/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-06-27 16:10:52.566074
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "../include/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.1)*x5);
x13=((0.1)*x0);
x14=((0.1)*x6);
x15=((0.1)*x11);
x16=((1.0)*x11);
x17=((1.0)*x9);
x18=((0.392)*x0);
x19=((1.0)*x5);
x20=((0.425)*x1);
x21=((1.0)*x0);
x22=((0.392)*x11);
x23=(x3*x4);
x24=(x1*x3);
x25=(x2*x4);
x26=(x1*x2);
x27=(x0*x10);
x28=(x10*x16);
x29=(x21*x24);
x30=(x16*x24);
x31=(x26+x23);
x32=((((-1.0)*x25))+(((1.0)*x24)));
x33=(x31*x5);
x34=(x32*x6);
x35=(((x0*x25))+(((-1.0)*x29)));
x36=((((-1.0)*x30))+((x11*x25)));
x37=(x21*((x26+x23)));
x38=(x16*((x26+x23)));
x39=(x35*x5);
x40=(x38*x6);
x41=(x37*x6);
x42=(((x32*x5))+((x6*(((((-1.0)*x23))+(((-1.0)*x26)))))));
x43=(x39+x41);
x44=(x40+((x36*x5)));
x45=(((x6*(((((-1.0)*x21*x25))+x29))))+((x37*x5)));
x46=(((x6*(((((-1.0)*x16*x25))+x30))))+((x38*x5)));
x47=(x44*x9);
eerot[0]=(((x7*(((((-1.0)*x28))+((x43*x9))))))+((x45*x8)));
eerot[1]=(((x8*(((((-1.0)*x17*x43))+x28))))+((x45*x7)));
eerot[2]=(((x10*(((((-1.0)*x41))+(((-1.0)*x19*x35))))))+(((-1.0)*x16*x9)));
IkReal x48=((1.0)*x13);
eetrans[0]=(((x10*(((((-1.0)*x12*x35))+(((-1.0)*x14*x37))))))+((x18*x24))+((x0*x20))+(((-1.0)*x18*x25))+((x5*(((((-1.0)*x23*x48))+(((-1.0)*x26*x48))))))+(((-1.0)*x15*x9))+(((-0.134)*x11))+((x6*(((((-1.0)*x24*x48))+((x13*x25)))))));
eerot[3]=(((x7*((x47+x27))))+((x46*x8)));
eerot[4]=(((x8*(((((-1.0)*x17*x44))+(((-1.0)*x10*x21))))))+((x46*x7)));
eerot[5]=(((x0*x9))+((x10*(((((-1.0)*x40))+(((-1.0)*x19*x36)))))));
IkReal x49=((1.0)*x15);
eetrans[1]=(((x22*x24))+((x6*(((((-1.0)*x24*x49))+((x15*x25))))))+(((0.134)*x0))+((x11*x20))+(((-1.0)*x22*x25))+((x10*(((((-1.0)*x12*x36))+(((-1.0)*x14*x38))))))+((x5*(((((-1.0)*x23*x49))+(((-1.0)*x26*x49))))))+((x13*x9)));
eerot[6]=(((x7*x9*((x33+x34))))+((x42*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x34))+(((-1.0)*x33))))))+((x42*x7)));
eerot[8]=(x10*(((((-1.0)*x34))+(((-1.0)*x19*x31)))));
eetrans[2]=((0.163)+(((-0.392)*x26))+(((-0.392)*x23))+(((-0.425)*x4))+((x5*(((((-0.1)*x24))+(((0.1)*x25))))))+((x10*(((((-1.0)*x12*x31))+(((-1.0)*x14*x32))))))+((x6*(((((0.1)*x26))+(((0.1)*x23)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.1)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.1)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.163)+(((-0.1)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x53=((0.2)*npx);
IkReal x54=((0.2)*npy);
IkReal x55=((0.1)*r22);
IkReal x56=((0.1)*r21);
IkReal x57=((-0.1)*r20);
IkReal x58=((-1.0)*r20);
IkReal x59=((-1.0)*rxp0_2);
IkReal x60=((-0.1)*r21);
IkReal x61=((-1.0)*r21);
IkReal x62=((-1.0)*rxp1_2);
IkReal x63=((-1.0)*npx);
IkReal x64=((-1.0)*r22);
IkReal x65=((-1.0)*npz);
matrixinvcoeffs[0]=x57;
matrixinvcoeffs[1]=x53;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x58;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x57;
matrixinvcoeffs[19]=x53;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x58;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x59;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x60;
matrixinvcoeffs[33]=x54;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x61;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x62;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x60;
matrixinvcoeffs[51]=x54;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x61;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x62;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x64;
matrixinvcoeffs[76]=x55;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x65;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x55;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x56;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x58;
matrixinvcoeffs[133]=x63;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x58;
matrixinvcoeffs[151]=x63;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x57;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x64;
matrixinvcoeffs[165]=x65;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x55;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x64;
matrixinvcoeffs[183]=x65;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x61;
matrixinvcoeffs[204]=x56;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x56;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x63;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x57;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x58;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x57;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=pp*pp;
IkReal x68=((0.2)*pz);
IkReal x69=(pp*r21);
IkReal x70=(gclwh13_10*rxp1_2);
IkReal x71=((0.00134)*r22);
IkReal x72=(npx*pz);
IkReal x73=((0.001)*r21);
IkReal x74=(pp*r20);
IkReal x75=(npy*pz);
IkReal x76=((4.0)*gclwh12_11);
IkReal x77=(gclwh10_11*r22);
IkReal x78=((0.00784)*r21);
IkReal x79=(pp*r22);
IkReal x80=(gclwh15_9*r20);
IkReal x81=(gclwh15_1*r20);
IkReal x82=(gclwh12_8*r21);
IkReal x83=((0.01)*r22);
IkReal x84=((0.2)*rxp2_2);
IkReal x85=(gclwh4_3*pp);
IkReal x86=(npz*pz);
IkReal x87=((2.0)*gclwh11_10);
IkReal x88=((0.01)*r21);
IkReal x89=(gclwh2_0*pz);
IkReal x90=(gclwh14_2*pz);
IkReal x91=(gclwh14_11*rxp0_2);
IkReal x92=((0.4)*rxp2_2);
IkReal x93=((0.00784)*r22);
IkReal x94=((1.0)*pz);
IkReal x95=((2.0)*gclwh4_11);
IkReal x96=((0.02)*r21);
IkReal x97=((0.1568)*rxp0_2);
IkReal x98=((0.0066)*rxp1_2);
IkReal x99=(gclwh8_2*r20);
IkReal x100=((0.0066)*rxp2_2);
IkReal x101=((0.01634)*r20);
IkReal x102=((9.045e-5)*r20);
IkReal x103=(gclwh14_8*r20);
IkReal x104=((0.02)*r22);
IkReal x105=((2.0)*gclwh9_10);
IkReal x106=(gclwh12_3*rxp1_2);
IkReal x107=(gclwh13_1*r21);
IkReal x108=((4.0)*gclwh14_11);
IkReal x109=((0.00268)*r20);
IkReal x110=(gclwh10_12*r22);
IkReal x111=((2.0)*gclwh13_10);
IkReal x112=((0.268)*gclwh14_14);
IkReal x113=(gclwh14_3*rxp0_2);
IkReal x114=((0.02)*rxp0_2);
IkReal x115=(gclwh12_14*r21);
IkReal x116=((2.0)*pp);
IkReal x117=((4.0)*gclwh11_10);
IkReal x118=(gclwh8_11*r20);
IkReal x119=((0.0132)*rxp2_2);
IkReal x120=((0.0132)*rxp0_2);
IkReal x121=((0.00817)*r22);
IkReal x122=(gclwh5_1*rxp2_2);
IkReal x123=((0.0268)*rxp2_2);
IkReal x124=(gclwh9_10*r20);
IkReal x125=(gclwh4_2*pz);
IkReal x126=(gclwh14_11*r20);
IkReal x127=((0.2)*rxp1_2);
IkReal x128=(gclwh5_0*rxp2_2);
IkReal x129=((0.1634)*rxp1_2);
IkReal x130=(gclwh13_15*r21);
IkReal x131=((4.0)*gclwh8_11);
IkReal x132=((0.00134)*r20);
IkReal x133=(gclwh3_3*r21);
IkReal x134=(gclwh5_1*r22);
IkReal x135=((0.0268)*rxp1_2);
IkReal x136=(gclwh7_13*r21);
IkReal x137=((2.0)*gclwh7_10);
IkReal x138=((0.0066)*rxp0_2);
IkReal x139=(gclwh13_9*rxp1_2);
IkReal x140=((0.00033)*r21);
IkReal x141=(gclwh2_1*r21);
IkReal x142=(gclwh7_0*pz);
IkReal x143=((0.536)*gclwh14_14);
IkReal x144=(gclwh6_11*rxp1_2);
IkReal x145=((0.17)*rxp2_2);
IkReal x146=((0.0536)*rxp1_2);
IkReal x147=(gclwh10_12*rxp2_2);
IkReal x148=((0.3268)*rxp1_2);
IkReal x149=((4.0)*gclwh9_10);
IkReal x150=((0.8)*rxp2_2);
IkReal x151=((0.04)*r22);
IkReal x152=((0.01634)*r21);
IkReal x153=((0.01)*r20);
IkReal x154=((4.0)*gclwh7_10);
IkReal x155=((0.1568)*rxp1_2);
IkReal x156=((0.2)*rxp0_2);
IkReal x157=((4.0)*gclwh4_11);
IkReal x158=((0.04)*r21);
IkReal x159=(gclwh10_2*r22);
IkReal x160=((0.2)*pp);
IkReal x161=(gclwh13_9*r21);
IkReal x162=((0.17)*rxp0_2);
IkReal x163=((0.268)*gclwh4_14);
IkReal x164=(gclwh12_8*rxp1_2);
IkReal x165=((0.8)*rxp0_2);
IkReal x166=((2.0)*gclwh6_11);
IkReal x167=(gclwh6_12*r21);
IkReal x168=(gclwh1_3*r20);
IkReal x169=((0.02)*rxp2_2);
IkReal x170=((0.0268)*rxp0_2);
IkReal x171=(gclwh8_2*rxp0_2);
IkReal x172=((0.1634)*rxp0_2);
IkReal x173=((2.0)*gclwh12_11);
IkReal x174=(gclwh10_2*rxp2_2);
IkReal x175=((0.1072)*rxp1_2);
IkReal x176=((2.0)*gclwh5_10);
IkReal x177=(gclwh11_0*r22);
IkReal x178=((0.268)*gclwh13_15);
IkReal x179=(gclwh10_2*pz);
IkReal x180=((0.268)*gclwh15_15);
IkReal x181=(gclwh9_0*pz);
IkReal x182=(gclwh4_3*r22);
IkReal x183=((2.0)*gclwh8_11);
IkReal x184=((2.0)*gclwh15_10);
IkReal x185=((0.268)*gclwh5_15);
IkReal x186=(gclwh4_14*rxp2_2);
IkReal x187=(gclwh4_8*r22);
IkReal x188=((0.00268)*r22);
IkReal x189=(gclwh4_3*rxp2_2);
IkReal x190=(gclwh12_3*r21);
IkReal x191=(gclwh9_0*r20);
IkReal x192=((0.00817)*r20);
IkReal x193=((0.3268)*rxp0_2);
IkReal x194=((4.0)*gclwh6_11);
IkReal x195=(gclwh12_11*rxp1_2);
IkReal x196=(gclwh11_0*pz);
IkReal x197=(gclwh5_9*r22);
IkReal x198=(gclwh5_0*pz);
IkReal x199=((0.4)*rxp0_2);
IkReal x200=((0.0132)*rxp1_2);
IkReal x201=((0.00784)*r20);
IkReal x202=((0.1568)*rxp2_2);
IkReal x203=((0.1634)*rxp2_2);
IkReal x204=((0.00675445)*r20);
IkReal x205=((0.536)*gclwh12_14);
IkReal x206=(gclwh15_1*rxp0_2);
IkReal x207=(gclwh13_0*pz);
IkReal x208=(gclwh9_13*r20);
IkReal x209=(gclwh11_13*r22);
IkReal x210=((0.1072)*rxp0_2);
IkReal x211=((0.00066)*r21);
IkReal x212=((0.536)*gclwh4_14);
IkReal x213=(gclwh5_15*rxp2_2);
IkReal x214=((0.00134)*r21);
IkReal x215=(gclwh8_12*r20);
IkReal x216=(gclwh13_1*rxp1_2);
IkReal x217=(gclwh6_2*pz);
IkReal x218=((2.0)*gclwh14_11);
IkReal x219=((0.0536)*rxp0_2);
IkReal x220=((0.268)*gclwh12_14);
IkReal x221=(gclwh12_2*pz);
IkReal x222=(gclwh14_14*x170);
IkReal x223=(gclwh6_5*x214);
IkReal x224=(gclwh4_14*x123);
IkReal x225=(gclwh10_5*x71);
IkReal x226=(gclwh8_5*x132);
IkReal x227=(gclwh12_14*x135);
IkReal x228=((0.02)*x164);
IkReal x229=(gclwh12_11*x127);
IkReal x230=(gclwh4_8*x169);
IkReal x231=(gclwh4_11*x84);
IkReal x232=(gclwh6_11*x88);
IkReal x233=((0.01)*x118);
IkReal x234=((0.01)*x77);
IkReal x235=((0.2)*x91);
IkReal x236=(gclwh14_8*x114);
IkReal x237=((0.02)*x139);
IkReal x238=(gclwh11_10*x83);
IkReal x239=(gclwh15_10*x156);
IkReal x240=((0.01)*x124);
IkReal x241=(gclwh5_9*x169);
IkReal x242=(gclwh7_10*x88);
IkReal x243=(gclwh5_10*x84);
IkReal x244=(gclwh15_9*x114);
IkReal x245=((0.2)*x70);
IkReal x246=(gclwh15_15*x170);
IkReal x247=(gclwh7_7*x214);
IkReal x248=(gclwh13_15*x135);
IkReal x249=(gclwh9_7*x132);
IkReal x250=(gclwh11_7*x71);
IkReal x251=(gclwh5_15*x123);
IkReal x252=(gclwh8_5*x170);
IkReal x253=(gclwh10_5*x123);
IkReal x254=(gclwh14_14*x132);
IkReal x255=((0.00134)*x115);
IkReal x256=(gclwh4_14*x71);
IkReal x257=(gclwh6_5*x135);
IkReal x258=(gclwh12_11*x88);
IkReal x259=(gclwh10_11*x84);
IkReal x260=((0.001)*x187);
IkReal x261=(gclwh4_11*x83);
IkReal x262=(gclwh8_11*x156);
IkReal x263=(gclwh12_8*x73);
IkReal x264=((0.001)*x103);
IkReal x265=(gclwh6_11*x127);
IkReal x266=((0.01)*x126);
IkReal x267=((0.001)*x80);
IkReal x268=(gclwh11_10*x84);
IkReal x269=(gclwh13_10*x88);
IkReal x270=(gclwh5_10*x83);
IkReal x271=(gclwh9_10*x156);
IkReal x272=((0.001)*x197);
IkReal x273=(gclwh13_9*x73);
IkReal x274=(gclwh7_10*x127);
IkReal x275=(gclwh15_10*x153);
IkReal x276=(gclwh5_15*x71);
IkReal x277=((0.00134)*x130);
IkReal x278=(gclwh7_7*x135);
IkReal x279=(gclwh11_7*x123);
IkReal x280=(gclwh9_7*x170);
IkReal x281=(gclwh15_15*x132);
IkReal x282=((0.4)*x91);
IkReal x283=((0.02)*x77);
IkReal x284=((0.02)*x118);
IkReal x285=(gclwh14_14*x219);
IkReal x286=(gclwh12_14*x146);
IkReal x287=((0.0536)*x186);
IkReal x288=(gclwh4_11*x92);
IkReal x289=(gclwh6_11*x96);
IkReal x290=((0.4)*x195);
IkReal x291=(gclwh13_15*x146);
IkReal x292=((0.0536)*x213);
IkReal x293=(gclwh15_15*x219);
IkReal x294=(gclwh11_10*x104);
IkReal x295=(gclwh15_10*x199);
IkReal x296=((0.02)*x124);
IkReal x297=((0.4)*x70);
IkReal x298=(gclwh7_10*x96);
IkReal x299=(gclwh5_10*x92);
IkReal x300=((0.02)*x126);
IkReal x301=((0.4)*x144);
IkReal x302=(gclwh14_14*x109);
IkReal x303=((0.00268)*x115);
IkReal x304=(gclwh4_14*x188);
IkReal x305=(gclwh4_11*x104);
IkReal x306=(gclwh12_11*x96);
IkReal x307=(gclwh10_11*x92);
IkReal x308=(gclwh8_11*x199);
IkReal x309=(gclwh15_9*x72);
IkReal x310=((2.0)*x66);
IkReal x311=((1.0)*x67);
IkReal x312=((0.134)*gclwh6_5*x69);
IkReal x313=((0.268)*gclwh10_5*x86);
IkReal x314=((0.268)*gclwh8_5*x72);
IkReal x315=((0.268)*gclwh6_5*x75);
IkReal x316=((0.134)*gclwh8_5*x74);
IkReal x317=((0.134)*gclwh10_5*x79);
IkReal x318=(gclwh14_2*rxp0_2*x68);
IkReal x319=((2.0)*gclwh10_11*x86);
IkReal x320=(x183*x72);
IkReal x321=(x179*x79);
IkReal x322=(x179*x83);
IkReal x323=(x106*x160);
IkReal x324=(gclwh8_2*pz*x74);
IkReal x325=(x84*x85);
IkReal x326=((0.01)*pz*x99);
IkReal x327=(gclwh12_2*rxp1_2*x68);
IkReal x328=(x113*x160);
IkReal x329=(gclwh4_2*rxp2_2*x68);
IkReal x330=(x166*x75);
IkReal x331=(x217*x88);
IkReal x332=(gclwh13_1*pp*x127);
IkReal x333=(x196*x79);
IkReal x334=(gclwh5_1*pp*x84);
IkReal x335=(x137*x75);
IkReal x336=(gclwh15_0*rxp0_2*x68);
IkReal x337=(x196*x83);
IkReal x338=(x153*x181);
IkReal x339=(x181*x74);
IkReal x340=(gclwh15_1*pp*x156);
IkReal x341=(x86*x87);
IkReal x342=(x105*x72);
IkReal x343=(x128*x68);
IkReal x344=(gclwh13_0*rxp1_2*x68);
IkReal x345=(x142*x88);
IkReal x346=((0.268)*gclwh9_7*x72);
IkReal x347=((0.134)*gclwh7_7*x69);
IkReal x348=((0.268)*gclwh11_7*x86);
IkReal x349=((0.134)*gclwh11_7*x79);
IkReal x350=((0.268)*gclwh7_7*x75);
IkReal x351=((0.134)*gclwh9_7*x74);
IkReal x352=(x220*x75);
IkReal x353=((0.134)*gclwh14_14*x74);
IkReal x354=(x163*x86);
IkReal x355=((0.134)*gclwh12_14*x69);
IkReal x356=(x112*x72);
IkReal x357=((0.134)*gclwh4_14*x79);
IkReal x358=(x74*x90);
IkReal x359=(x153*x90);
IkReal x360=((0.1)*gclwh4_8*x79);
IkReal x361=(x190*x67);
IkReal x362=(gclwh1_2*pz*x153);
IkReal x363=(gclwh3_2*pz*x88);
IkReal x364=((0.1)*gclwh12_8*x69);
IkReal x365=(x133*x67);
IkReal x366=(x168*x67);
IkReal x367=(gclwh6_2*rxp1_2*x68);
IkReal x368=(x218*x72);
IkReal x369=(x182*x67);
IkReal x370=(gclwh14_8*npx*x68);
IkReal x371=(x86*x95);
IkReal x372=(gclwh4_8*npz*x68);
IkReal x373=(gclwh12_8*npy*x68);
IkReal x374=(x174*x68);
IkReal x375=(x125*x83);
IkReal x376=(x173*x75);
IkReal x377=(x171*x68);
IkReal x378=((0.1)*gclwh14_8*x74);
IkReal x379=(x221*x88);
IkReal x380=(x207*x88);
IkReal x381=(gclwh0_0*pz*x153);
IkReal x382=(gclwh11_0*rxp2_2*x68);
IkReal x383=(x88*x89);
IkReal x384=(gclwh13_9*npy*x68);
IkReal x385=(x67*x81);
IkReal x386=(x198*x79);
IkReal x387=(x198*x83);
IkReal x388=(x207*x69);
IkReal x389=(gclwh9_0*rxp0_2*x68);
IkReal x390=((0.1)*gclwh15_9*x74);
IkReal x391=(x184*x72);
IkReal x392=(x141*x67);
IkReal x393=(gclwh5_9*npz*x68);
IkReal x394=(gclwh0_1*r20*x67);
IkReal x395=(gclwh7_0*rxp1_2*x68);
IkReal x396=((0.1)*gclwh5_9*x79);
IkReal x397=(gclwh15_9*npx*x68);
IkReal x398=((0.1)*gclwh13_9*x69);
IkReal x399=(x176*x86);
IkReal x400=(gclwh15_0*pz*x153);
IkReal x401=(x111*x75);
IkReal x402=((0.134)*gclwh13_15*x69);
IkReal x403=(x180*x72);
IkReal x404=((0.134)*gclwh5_15*x79);
IkReal x405=(x185*x86);
IkReal x406=((0.134)*gclwh15_15*x74);
IkReal x407=(x178*x75);
IkReal x408=(x183*x74);
IkReal x409=(x116*x77);
IkReal x410=(x194*x75);
IkReal x411=(x131*x72);
IkReal x412=(x166*x69);
IkReal x413=((4.0)*gclwh10_11*x86);
IkReal x414=(x79*x87);
IkReal x415=(x154*x75);
IkReal x416=(x105*x74);
IkReal x417=(x137*x69);
IkReal x418=(x149*x72);
IkReal x419=(x117*x86);
IkReal x420=(x218*x74);
IkReal x421=(x75*x76);
IkReal x422=(x157*x86);
IkReal x423=(x212*x86);
IkReal x424=(x112*x74);
IkReal x425=(x205*x75);
IkReal x426=(x220*x69);
IkReal x427=(x143*x72);
IkReal x428=(x163*x79);
IkReal x429=(x79*x95);
IkReal x430=(x173*x69);
IkReal x431=(x108*x72);
IkReal x432=(gclwh6_2*npy*x310);
IkReal x433=(gclwh6_2*x69*x94);
IkReal x434=(gclwh10_2*npz*x310);
IkReal x435=(gclwh8_2*npx*x310);
IkReal x436=(gclwh7_0*npy*x310);
IkReal x437=(gclwh9_0*npx*x310);
IkReal x438=(gclwh11_0*npz*x310);
IkReal x439=(gclwh7_0*x69*x94);
IkReal x440=(gclwh12_2*npy*x310);
IkReal x441=(gclwh3_2*npy*x310);
IkReal x442=(gclwh1_2*npx*x310);
IkReal x443=(gclwh14_3*x116*x72);
IkReal x444=(gclwh4_2*npz*x310);
IkReal x445=((2.0)*x85*x86);
IkReal x446=(gclwh12_2*x69*x94);
IkReal x447=(gclwh1_2*x74*x94);
IkReal x448=(gclwh3_3*x116*x75);
IkReal x449=(gclwh4_2*x79*x94);
IkReal x450=(gclwh1_3*x116*x72);
IkReal x451=(gclwh3_2*x69*x94);
IkReal x452=(gclwh12_3*x116*x75);
IkReal x453=(gclwh14_2*npx*x310);
IkReal x454=(gclwh14_3*r20*x311);
IkReal x455=(gclwh0_0*npx*x310);
IkReal x456=(gclwh2_0*npy*x310);
IkReal x457=(gclwh5_1*x116*x86);
IkReal x458=(gclwh13_1*x116*x75);
IkReal x459=(gclwh15_0*npx*x310);
IkReal x460=(gclwh2_1*x116*x75);
IkReal x461=(gclwh0_1*x116*x72);
IkReal x462=(gclwh5_0*npz*x310);
IkReal x463=(gclwh13_0*npy*x310);
IkReal x464=(gclwh0_0*x74*x94);
IkReal x465=(gclwh15_0*x74*x94);
IkReal x466=((1.0)*x69*x89);
IkReal x467=(x107*x311);
IkReal x468=(x134*x311);
IkReal x469=(gclwh15_1*x116*x72);
IkReal x470=(x224+x227);
IkReal x471=(x287+x286);
IkReal x472=(x251+x248);
IkReal x473=(x279+x280);
IkReal x474=(x252+x253);
IkReal x475=(x291+x292);
IkReal x476=(x330+x233+x234+x235);
IkReal x477=(x335+x238+x239+x240);
IkReal x478=(x376+x371+x265+x266);
IkReal x479=(x399+x274+x275+x401);
IkReal x480=(x281+x405+x407+x406);
IkReal x481=(x314+x313+x312+x223);
IkReal x482=(x346+x347+x348+x247);
IkReal x483=(x302+x425+x424+x423);
IkReal x484=(x353+x352+x354+x254);
IkReal x485=(x368+x258+x259+x261+x262);
IkReal x486=(x391+x269+x268+x270+x271);
IkReal x487=(x342+x341+x243+x242+x245);
IkReal x488=(x320+x319+x229+x232+x231);
IkReal x489=(x315+x317+x316+x225+x226);
IkReal x490=(x300+x301+x422+x421+x420);
IkReal x491=(x276+x277+x403+x402+x404);
IkReal x492=(x355+x357+x356+x255+x256);
IkReal x493=(x304+x303+x428+x427+x426);
IkReal x494=(x351+x350+x349+x250+x249);
IkReal x495=(x290+x289+x288+x412+x413+x411);
IkReal x496=(x298+x299+x297+x417+x418+x419);
IkReal x497=(x284+x283+x282+x409+x408+x410);
IkReal x498=(x294+x295+x296+x416+x414+x415);
IkReal x499=(x308+x306+x307+x305+x429+x430+x431);
IkReal x500=(x343+x340+x344+x345+x244+x438+x439+x437);
IkReal x501=(x331+x327+x328+x329+x236+x433+x434+x435);
IkReal x502=(x324+x325+x326+x321+x322+x323+x318+x228+x230+x432);
IkReal x503=(x339+x338+x333+x332+x337+x336+x334+x237+x241+x436);
IkReal x504=(x395+x397+x396+x398+x272+x273+x400+x469+x468+x463+x462+x461+x460+x467+x466+x465+x464);
IkReal x505=(x359+x358+x370+x369+x360+x361+x362+x363+x364+x365+x366+x367+x260+x263+x444+x441+x440+x443+x442+x68);
IkReal x506=(x379+x378+x377+x375+x374+x373+x372+x264+x449+x448+x445+x447+x446+x454+x452+x453+x450+x451);
IkReal x507=(x386+x387+x384+x385+x382+x383+x380+x381+x388+x389+x394+x390+x393+x392+x267+x458+x459+x456+x457+x455+x68);
op[0]=((((0.817)*gclwh6_12*x69))+(((-1.0)*x489))+(((1.634)*gclwh8_12*x72))+(((0.00817)*x167))+(((-1.634)*gclwh6_12*x75))+(((-1.0)*gclwh12_8*x129))+(((-0.817)*gclwh10_12*x79))+x481+x470+((gclwh14_8*x172))+(((-0.00817)*x110))+(((-1.0)*gclwh4_8*x203))+(((-1.0)*gclwh8_12*x192))+(((-0.817)*gclwh8_12*x74))+(((-1.0)*x222))+(((1.634)*gclwh10_12*x86)));
op[1]=((((-0.135089)*x189))+(((-1.0)*x488))+(((-1.0)*x501))+(((-1.0)*gclwh6_11*x69))+x476+x502+((gclwh8_11*x74))+((pp*x77))+(((0.135089)*x113))+(((-0.135089)*x106)));
op[2]=((-0.210112)+(((-1.0)*x495))+x497);
op[3]=((((0.784)*gclwh8_2*x74))+(((-1.0)*gclwh6_2*x78))+(((-1.0)*gclwh12_2*x155))+(((0.00784)*x99))+(((-1.568)*gclwh10_2*x86))+(((-1.0)*x471))+(((-1.0)*gclwh14_8*x162))+(((-0.784)*gclwh6_2*x69))+((gclwh4_8*x145))+x285+(((1.568)*gclwh6_2*x75))+(((-1.568)*gclwh8_2*x72))+(((0.784)*gclwh10_2*x79))+((gclwh14_2*x97))+((gclwh10_2*x93))+(((-1.0)*gclwh4_2*x202))+(((0.17)*x164)));
op[4]=((((-1.0)*gclwh14_8*x138))+((gclwh6_12*x140))+(((-0.033)*gclwh8_12*x74))+(((0.066)*gclwh8_12*x72))+(((0.033)*gclwh6_12*x69))+(((-1.0)*x489))+(((-0.033)*gclwh10_12*x79))+(((0.066)*gclwh10_12*x86))+(((-1.0)*x470))+(((-0.00033)*x215))+x222+((gclwh12_8*x98))+x481+(((-0.00033)*x110))+(((-0.066)*gclwh6_12*x75))+((gclwh4_8*x100)));
op[5]=((((-1.0)*x501))+(((-0.001809)*x106))+(((-1.0)*x476))+(((0.001809)*x113))+x488+x502+(((-1.0)*pp*x77))+((gclwh6_11*x69))+(((-0.001809)*x189))+(((-1.0)*gclwh8_11*x74)));
op[6]=((((0.135089)*x206))+(((-1.0)*x500))+((gclwh7_10*x69))+(((-1.0)*x477))+(((-0.135089)*x216))+(((-1.0)*gclwh11_10*x79))+x487+x503+(((-1.0)*gclwh9_10*x74))+(((-0.135089)*x122)));
op[7]=((((0.00817)*x136))+(((-1.634)*gclwh7_13*x75))+(((-1.0)*gclwh11_13*x121))+(((-1.0)*x494))+(((-1.0)*gclwh5_9*x203))+(((-0.817)*gclwh11_13*x79))+((gclwh15_9*x172))+(((-1.0)*gclwh9_13*x192))+x482+x472+(((-1.0)*gclwh13_9*x129))+(((-1.0)*x246))+(((1.634)*gclwh11_13*x86))+(((0.817)*gclwh7_13*x69))+(((1.634)*gclwh9_13*x72))+(((-0.817)*gclwh9_13*x74)));
op[8]=((((-1.0)*gclwh5_9*x145))+(((-0.784)*gclwh7_0*x69))+(((-1.0)*gclwh7_0*x78))+(((-1.568)*gclwh11_0*x86))+(((1.568)*gclwh7_0*x75))+(((-1.0)*x293))+(((0.00784)*x191))+((gclwh15_0*x97))+((gclwh15_9*x162))+(((-1.0)*gclwh13_0*x155))+(((-1.568)*gclwh9_0*x72))+x475+(((0.784)*gclwh9_0*x74))+((gclwh11_0*x93))+(((-0.1568)*x128))+(((-0.17)*x139))+(((0.784)*gclwh11_0*x79)));
op[9]=((-0.210112)+(((-1.0)*x496))+x498);
op[10]=((((-0.001809)*x216))+((gclwh11_10*x79))+(((-1.0)*x487))+(((-1.0)*x500))+(((-1.0)*gclwh7_10*x69))+(((-0.001809)*x122))+(((0.001809)*x206))+x477+x503+((gclwh9_10*x74)));
op[11]=((((-0.00033)*x209))+(((-0.00033)*x208))+(((0.00033)*x136))+(((-1.0)*x494))+(((-0.066)*gclwh7_13*x75))+((gclwh5_9*x100))+(((-1.0)*x472))+((gclwh13_9*x98))+(((-0.033)*gclwh9_13*x74))+x246+x482+(((0.066)*gclwh11_13*x86))+(((0.033)*gclwh7_13*x69))+(((-0.033)*gclwh11_13*x79))+(((-1.0)*gclwh15_9*x138))+(((0.066)*gclwh9_13*x72)));
op[12]=((((-1.634)*gclwh14_8*x72))+(((1.634)*gclwh4_8*x86))+(((-0.817)*gclwh12_8*x69))+(((-1.0)*x484))+(((-1.0)*gclwh6_12*x129))+(((0.817)*gclwh14_8*x74))+(((-0.817)*gclwh4_8*x79))+(((0.1634)*x147))+(((-1.0)*gclwh4_8*x121))+x492+x474+(((-0.00817)*x82))+((gclwh8_12*x172))+(((1.634)*gclwh12_8*x75))+(((0.00817)*x103))+(((-1.0)*x257)));
op[13]=((-0.685445)+(((0.00675445)*x168))+(((1.35089)*gclwh3_3*x75))+(((-1.0)*gclwh12_11*x69))+(((1.35089)*gclwh1_3*x72))+(((-0.665445)*gclwh4_3*x79))+(((-1.0)*x485))+(((0.665445)*gclwh14_3*x74))+(((-1.0)*x506))+(((0.00675445)*x133))+(((-1.35089)*gclwh14_3*x72))+(((-0.685445)*gclwh3_3*x69))+(((-0.665445)*gclwh12_3*x69))+(((-0.00675445)*x182))+x478+(((-0.685445)*gclwh1_3*x74))+((gclwh14_11*x74))+(((1.35089)*gclwh4_3*x86))+(((-0.00675445)*x190))+(((1.35089)*gclwh12_3*x75))+x505+((gclwh14_3*x204))+(((-1.0)*gclwh4_11*x79)));
op[14]=((-0.089834)+(((-1.0)*x499))+x490);
op[15]=((((-1.0)*gclwh4_2*x93))+(((-1.0)*gclwh8_2*x97))+(((1.568)*gclwh12_2*x75))+(((0.85)*gclwh4_8*x79))+(((-1.0)*x493))+((gclwh3_2*x78))+(((1.7)*gclwh14_8*x72))+(((-0.784)*gclwh3_2*x69))+(((0.0085)*x187))+(((1.568)*gclwh3_2*x75))+(((-1.7)*gclwh4_8*x86))+(((-0.1568)*x174))+(((-1.568)*gclwh14_2*x72))+(((-0.0085)*x103))+x483+(((-0.784)*gclwh4_2*x79))+(((-0.784)*gclwh1_2*x74))+(((-1.7)*gclwh12_8*x75))+((gclwh14_2*x201))+(((-0.784)*gclwh12_2*x69))+((gclwh1_2*x201))+(((-1.0)*gclwh12_2*x78))+(((0.784)*gclwh14_2*x74))+((gclwh6_2*x155))+(((0.0085)*x82))+(((0.85)*gclwh12_8*x69))+(((1.568)*gclwh1_2*x72))+(((1.568)*gclwh4_2*x86))+(((-0.85)*gclwh14_8*x74)));
op[16]=(((gclwh8_12*x138))+(((0.066)*gclwh14_8*x72))+(((-1.0)*x492))+((gclwh10_12*x100))+(((-0.066)*gclwh4_8*x86))+(((-0.066)*gclwh12_8*x75))+(((-0.033)*gclwh14_8*x74))+(((0.033)*gclwh12_8*x69))+x484+x474+(((0.00033)*x187))+(((-0.00033)*x103))+(((0.033)*gclwh4_8*x79))+(((0.00033)*x82))+(((-1.0)*gclwh6_12*x98))+(((-1.0)*x257)));
op[17]=((0.019045)+(((0.01809)*gclwh12_3*x75))+((gclwh1_3*x102))+(((-0.019045)*gclwh3_3*x69))+(((0.01809)*gclwh4_3*x86))+(((-1.0)*x506))+(((-0.01809)*gclwh14_3*x72))+(((-0.019045)*gclwh1_3*x74))+((gclwh14_3*x102))+(((-1.0)*x478))+(((0.01809)*gclwh3_3*x75))+(((-0.000955)*gclwh14_3*x74))+(((0.000955)*gclwh12_3*x69))+(((-9.045e-5)*x190))+(((9.045e-5)*x133))+x485+(((-9.045e-5)*x182))+x505+(((0.01809)*gclwh1_3*x72))+(((0.000955)*gclwh4_3*x79))+((gclwh12_11*x69))+(((-1.0)*gclwh14_11*x74))+((gclwh4_11*x79)));
op[18]=((0.685445)+(((0.665445)*gclwh13_1*x69))+(((-1.0)*x486))+(((0.00675445)*x141))+((gclwh0_1*x204))+(((1.35089)*gclwh2_1*x75))+(((-1.0)*x504))+(((0.00675445)*x134))+(((-0.685445)*gclwh2_1*x69))+(((0.665445)*gclwh5_1*x79))+(((-0.685445)*gclwh0_1*x74))+(((1.35089)*gclwh0_1*x72))+(((-1.0)*gclwh5_10*x79))+(((0.00675445)*x107))+x479+(((-1.35089)*gclwh13_1*x75))+x507+(((-1.0)*gclwh13_10*x69))+((gclwh15_10*x74))+(((-0.665445)*gclwh15_1*x74))+(((1.35089)*gclwh15_1*x72))+(((-1.35089)*gclwh5_1*x86))+(((-0.00675445)*x81)));
op[19]=((((-1.0)*x491))+(((-0.817)*gclwh15_9*x74))+((gclwh7_13*x129))+((gclwh5_9*x121))+(((0.817)*gclwh13_9*x69))+(((0.00817)*x161))+(((-1.0)*x473))+(((-1.0)*gclwh9_13*x172))+(((-1.634)*gclwh13_9*x75))+x278+x480+(((-1.0)*gclwh11_13*x203))+(((1.634)*x309))+(((-1.634)*gclwh5_9*x86))+(((-0.00817)*x80))+(((0.817)*gclwh5_9*x79)));
op[20]=((((-0.85)*gclwh15_9*x74))+(((-1.7)*gclwh13_9*x75))+(((-1.7)*gclwh5_9*x86))+(((0.0085)*x161))+(((-0.784)*gclwh15_0*x74))+(((0.784)*gclwh5_0*x79))+(((-1.0)*x185*x79))+((x180*x74))+(((1.568)*gclwh0_0*x72))+((gclwh0_0*x201))+(((-1.0)*x178*x69))+(((1.7)*x309))+(((0.0085)*x197))+(((-1.568)*gclwh13_0*x75))+((gclwh5_0*x93))+(((-0.536)*gclwh15_15*x72))+(((-1.568)*gclwh5_0*x86))+(((0.784)*gclwh13_0*x69))+((gclwh2_0*x78))+((gclwh13_0*x78))+(((-0.0085)*x80))+(((0.85)*gclwh13_9*x69))+(((-1.0)*gclwh7_0*x155))+(((1.568)*gclwh15_0*x72))+((gclwh11_0*x202))+(((-0.784)*gclwh2_0*x69))+(((1.568)*gclwh2_0*x75))+(((0.536)*gclwh13_15*x75))+(((0.536)*gclwh5_15*x86))+(((0.85)*gclwh5_9*x79))+(((-1.0)*gclwh15_0*x201))+(((-0.00268)*x130))+(((-0.784)*gclwh0_0*x74))+((gclwh9_0*x97))+(((-1.0)*gclwh5_15*x188))+((gclwh15_15*x109)));
op[21]=((-0.089834)+(((-1.0)*x184*x74))+(((-4.0)*gclwh5_10*x86))+((gclwh9_10*x199))+(((-0.4)*gclwh7_10*rxp1_2))+((gclwh5_10*x104))+(((-4.0)*gclwh13_10*x75))+((x111*x69))+((gclwh11_10*x92))+(((4.0)*gclwh15_10*x72))+(((-0.02)*gclwh15_10*r20))+((gclwh13_10*x96))+((x176*x79)));
op[22]=((-0.019045)+(((-9.045e-5)*x81))+((gclwh0_1*x102))+((gclwh13_10*x69))+(((-1.0)*x504))+(((-0.019045)*gclwh0_1*x74))+(((-0.000955)*gclwh5_1*x79))+(((9.045e-5)*x107))+(((0.01809)*gclwh0_1*x72))+(((-1.0)*x479))+((gclwh5_10*x79))+(((0.000955)*gclwh15_1*x74))+(((9.045e-5)*x134))+(((-0.01809)*gclwh13_1*x75))+x486+(((-0.01809)*gclwh5_1*x86))+(((9.045e-5)*x141))+x507+(((0.01809)*gclwh2_1*x75))+(((0.01809)*gclwh15_1*x72))+(((-0.000955)*gclwh13_1*x69))+(((-0.019045)*gclwh2_1*x69))+(((-1.0)*gclwh15_10*x74)));
op[23]=((((-0.00033)*x197))+(((-1.0)*x480))+(((-1.0)*gclwh13_9*x140))+(((-1.0)*gclwh11_13*x100))+(((0.066)*gclwh5_9*x86))+(((0.033)*gclwh15_9*x74))+(((-1.0)*x473))+(((-0.033)*gclwh5_9*x79))+(((-0.066)*x309))+x278+x491+(((0.066)*gclwh13_9*x75))+(((-1.0)*gclwh9_13*x138))+((gclwh7_13*x98))+(((-0.033)*gclwh13_9*x69))+(((0.00033)*x80)));
op[24]=((-0.437912)+(((-1.0)*x495))+x497);
op[25]=((((-1.0)*gclwh12_2*x148))+(((0.01634)*x99))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.0)*x471))+(((-1.0)*gclwh6_2*x152))+(((-1.634)*gclwh6_2*x69))+(((-3.268)*gclwh10_2*x86))+(((1.634)*gclwh8_2*x74))+x285+(((0.01634)*x159))+(((1.634)*gclwh10_2*x79))+(((3.268)*gclwh6_2*x75))+((gclwh14_2*x193))+(((-3.268)*gclwh8_2*x72)));
op[26]=((((-3.136)*gclwh8_12*x72))+((gclwh14_14*x210))+(((3.136)*gclwh6_12*x75))+(((1.568)*gclwh8_12*x74))+(((-0.01568)*x167))+(((-1.568)*gclwh6_12*x69))+(((-1.0)*gclwh12_14*x175))+(((0.01568)*x110))+(((0.01568)*x215))+(((-3.136)*gclwh10_12*x86))+(((-0.1072)*x186))+(((1.568)*gclwh10_12*x79)));
op[27]=((((-0.8)*x91))+(((-0.04)*x77))+(((-0.04)*x118))+(((-4.0)*pp*x77))+(((8.0)*gclwh8_11*x72))+(((0.8)*x195))+((x194*x69))+((gclwh4_11*x150))+(((8.0)*gclwh10_11*x86))+(((-8.0)*gclwh6_11*x75))+(((-1.0)*x131*x74))+((gclwh6_11*x158)));
op[28]=((-0.017688)+(((-1.0)*x497))+x495);
op[29]=((((0.066)*gclwh8_2*x74))+(((-1.0)*gclwh4_2*x119))+(((0.00066)*x159))+(((-0.132)*gclwh8_2*x72))+(((0.132)*gclwh6_2*x75))+((gclwh14_2*x120))+(((-1.0)*gclwh12_2*x200))+(((-0.132)*gclwh10_2*x86))+x471+(((0.00066)*x99))+(((0.066)*gclwh10_2*x79))+(((-1.0)*x285))+(((-1.0)*gclwh6_2*x211))+(((-0.066)*gclwh6_2*x69)));
op[30]=((((3.268)*gclwh7_0*x75))+(((-0.3268)*x128))+(((-1.634)*gclwh7_0*x69))+(((1.634)*gclwh11_0*x79))+(((-1.0)*x293))+(((-3.268)*gclwh11_0*x86))+((gclwh15_0*x193))+(((-3.268)*gclwh9_0*x72))+(((0.01634)*x177))+x475+(((-1.0)*gclwh7_0*x152))+(((-1.0)*gclwh13_0*x148))+((gclwh9_0*x101))+(((1.634)*gclwh9_0*x74)));
op[31]=((-0.437912)+(((-1.0)*x496))+x498);
op[32]=((((-0.8)*x70))+((x117*x79))+((gclwh15_10*x165))+((gclwh11_10*x151))+(((-1.0)*gclwh5_10*x150))+(((-8.0)*gclwh9_10*x72))+(((-1.0)*x154*x69))+(((8.0)*gclwh7_10*x75))+(((0.04)*x124))+((x149*x74))+(((-1.0)*gclwh7_10*x158))+(((-8.0)*gclwh11_10*x86)));
op[33]=((((-3.136)*gclwh9_13*x72))+(((-0.01568)*x136))+(((3.136)*gclwh7_13*x75))+(((-3.136)*gclwh11_13*x86))+(((1.568)*gclwh11_13*x79))+(((0.01568)*x209))+(((0.01568)*x208))+(((-1.568)*gclwh7_13*x69))+((gclwh15_15*x210))+(((-1.0)*gclwh13_15*x175))+(((-0.1072)*x213))+(((1.568)*gclwh9_13*x74)));
op[34]=((((0.00066)*x191))+((gclwh15_0*x120))+(((-1.0)*gclwh13_0*x200))+(((-1.0)*x475))+(((-1.0)*gclwh7_0*x211))+(((0.066)*gclwh11_0*x79))+(((0.066)*gclwh9_0*x74))+(((0.00066)*x177))+(((-1.0)*gclwh5_0*x119))+(((-0.132)*gclwh9_0*x72))+(((-0.066)*gclwh7_0*x69))+x293+(((0.132)*gclwh7_0*x75))+(((-0.132)*gclwh11_0*x86)));
op[35]=((-0.017688)+(((-1.0)*x498))+x496);
op[36]=((1.299066)+(((-1.0)*x499))+x490);
op[37]=((((3.268)*gclwh12_2*x75))+(((-1.0)*x493))+(((-1.0)*gclwh12_2*x152))+((gclwh14_2*x101))+(((3.268)*gclwh3_2*x75))+(((3.268)*gclwh1_2*x72))+(((-0.3268)*x171))+(((-0.3268)*x174))+(((-1.634)*gclwh3_2*x69))+(((-3.268)*gclwh14_2*x72))+x483+(((-1.634)*gclwh4_2*x79))+(((-1.634)*gclwh1_2*x74))+(((-0.01634)*gclwh4_2*r22))+(((3.268)*gclwh4_2*x86))+((gclwh1_2*x101))+((gclwh3_2*x152))+(((1.634)*gclwh14_2*x74))+(((-1.634)*gclwh12_2*x69))+((gclwh6_2*x148)));
op[38]=((((0.3136)*gclwh6_12*rxp1_2))+(((-0.00536)*gclwh4_14*r22))+(((-1.0)*x212*x79))+(((-0.3136)*x147))+((x143*x74))+(((-1.0)*x205*x69))+(((-0.3136)*gclwh8_12*rxp0_2))+(((-1.072)*gclwh14_14*x72))+(((-0.00536)*x115))+(((1.072)*gclwh4_14*x86))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x75)));
op[39]=((-0.03602)+((gclwh10_11*x150))+(((-0.8)*x144))+((x157*x79))+(((-0.04)*x126))+(((-1.0)*x108*x74))+((x69*x76))+(((-8.0)*gclwh12_11*x75))+(((-8.0)*gclwh4_11*x86))+(((8.0)*gclwh14_11*x72))+((gclwh4_11*x151))+((gclwh12_11*x158))+((gclwh8_11*x165)));
op[40]=((0.033734)+(((-1.0)*x490))+x499);
IkReal x508=pz*pz;
IkReal x509=pp*pp;
IkReal x510=((0.2)*pz);
IkReal x511=(pp*r21);
IkReal x512=((0.2)*rxp1_2);
IkReal x513=((0.00134)*r22);
IkReal x514=((0.066)*pz);
IkReal x515=(gclwh14_8*npx);
IkReal x516=((0.001)*r21);
IkReal x517=(pp*r20);
IkReal x518=(gclwh13_10*r21);
IkReal x519=(gclwh5_0*r22);
IkReal x520=((0.0132)*rxp2_2);
IkReal x521=((2.0)*pz);
IkReal x522=(gclwh7_10*npy);
IkReal x523=((0.02)*r22);
IkReal x524=((0.00784)*r21);
IkReal x525=(gclwh15_9*r20);
IkReal x526=(gclwh15_1*r20);
IkReal x527=(gclwh12_8*r21);
IkReal x528=((0.01)*r22);
IkReal x529=(gclwh6_12*npy);
IkReal x530=((0.2)*rxp2_2);
IkReal x531=(gclwh4_3*pp);
IkReal x532=(npz*pz);
IkReal x533=(gclwh2_0*pz);
IkReal x534=((0.01)*r21);
IkReal x535=(gclwh14_2*pz);
IkReal x536=((0.2)*rxp0_2);
IkReal x537=(gclwh8_2*pz);
IkReal x538=((0.00784)*r22);
IkReal x539=((1.0)*pz);
IkReal x540=(gclwh9_13*rxp0_2);
IkReal x541=(npx*pz);
IkReal x542=((0.1568)*rxp0_2);
IkReal x543=(npy*pz);
IkReal x544=((0.784)*pp);
IkReal x545=((0.0066)*rxp1_2);
IkReal x546=((0.536)*gclwh15_15);
IkReal x547=(pp*r22);
IkReal x548=((0.0066)*rxp2_2);
IkReal x549=((0.536)*gclwh5_15);
IkReal x550=(gclwh12_8*npy);
IkReal x551=((9.045e-5)*r20);
IkReal x552=(gclwh14_8*r20);
IkReal x553=(gclwh4_2*pz);
IkReal x554=(gclwh12_3*rxp1_2);
IkReal x555=(gclwh13_1*r21);
IkReal x556=((0.0132)*rxp1_2);
IkReal x557=(gclwh15_15*r20);
IkReal x558=((0.268)*gclwh14_14);
IkReal x559=((0.135089)*rxp0_2);
IkReal x560=((0.02)*rxp0_2);
IkReal x561=(gclwh12_14*r21);
IkReal x562=((0.00066)*r21);
IkReal x563=(gclwh5_1*pp);
IkReal x564=(gclwh8_11*r20);
IkReal x565=((0.02)*r21);
IkReal x566=((0.00817)*r22);
IkReal x567=(gclwh7_0*rxp1_2);
IkReal x568=((0.001809)*rxp2_2);
IkReal x569=(gclwh4_14*rxp2_2);
IkReal x570=((4.0)*gclwh15_10);
IkReal x571=((0.00066)*r20);
IkReal x572=(gclwh9_10*rxp0_2);
IkReal x573=(gclwh14_11*r20);
IkReal x574=((0.00033)*r22);
IkReal x575=((0.1634)*rxp1_2);
IkReal x576=(gclwh13_15*r21);
IkReal x577=((0.00134)*r20);
IkReal x578=(gclwh3_3*r21);
IkReal x579=(gclwh5_1*r22);
IkReal x580=(gclwh7_13*r21);
IkReal x581=(gclwh13_9*rxp1_2);
IkReal x582=((0.00033)*r21);
IkReal x583=(gclwh7_0*pz);
IkReal x584=(gclwh14_8*rxp0_2);
IkReal x585=((0.17)*rxp2_2);
IkReal x586=((0.0536)*rxp1_2);
IkReal x587=((0.1634)*rxp2_2);
IkReal x588=((0.1568)*rxp2_2);
IkReal x589=((0.01)*r20);
IkReal x590=((0.01634)*r21);
IkReal x591=(gclwh7_10*rxp1_2);
IkReal x592=(gclwh12_3*pp);
IkReal x593=(gclwh13_9*r21);
IkReal x594=((0.268)*gclwh4_14);
IkReal x595=(gclwh12_8*rxp1_2);
IkReal x596=((0.4)*rxp2_2);
IkReal x597=((0.0132)*rxp0_2);
IkReal x598=((0.00784)*r20);
IkReal x599=(gclwh1_3*r20);
IkReal x600=(gclwh14_3*pp);
IkReal x601=((0.02)*rxp2_2);
IkReal x602=((0.0268)*rxp0_2);
IkReal x603=(gclwh15_9*rxp0_2);
IkReal x604=((0.1568)*rxp1_2);
IkReal x605=((0.0268)*rxp1_2);
IkReal x606=((0.536)*gclwh13_15);
IkReal x607=(gclwh2_1*r21);
IkReal x608=((0.02)*r20);
IkReal x609=((0.4)*rxp1_2);
IkReal x610=((0.01634)*r20);
IkReal x611=((0.268)*gclwh13_15);
IkReal x612=(gclwh10_2*pz);
IkReal x613=(gclwh15_0*pz);
IkReal x614=((0.268)*gclwh15_15);
IkReal x615=(gclwh5_15*r22);
IkReal x616=(gclwh8_12*rxp0_2);
IkReal x617=(gclwh9_0*pz);
IkReal x618=(gclwh4_3*r22);
IkReal x619=((0.268)*gclwh5_15);
IkReal x620=((0.0268)*rxp2_2);
IkReal x621=(gclwh4_8*r22);
IkReal x622=((1.634)*pz);
IkReal x623=((4.0)*gclwh5_10);
IkReal x624=(npx*pp);
IkReal x625=((4.0)*gclwh13_10);
IkReal x626=(gclwh12_3*r21);
IkReal x627=(gclwh4_2*r22);
IkReal x628=((0.00817)*r20);
IkReal x629=((1.568)*npx);
IkReal x630=(gclwh0_1*r20);
IkReal x631=(npy*pp);
IkReal x632=(gclwh13_9*npy);
IkReal x633=(gclwh11_0*pz);
IkReal x634=(gclwh5_9*r22);
IkReal x635=((0.4)*rxp0_2);
IkReal x636=((0.135089)*rxp2_2);
IkReal x637=(gclwh13_0*pz);
IkReal x638=(gclwh14_3*r20);
IkReal x639=((0.00033)*r20);
IkReal x640=((0.00134)*r21);
IkReal x641=(gclwh13_1*rxp1_2);
IkReal x642=(gclwh6_2*pz);
IkReal x643=((0.0536)*rxp0_2);
IkReal x644=((0.001809)*rxp0_2);
IkReal x645=((0.268)*gclwh12_14);
IkReal x646=(gclwh12_2*pz);
IkReal x647=((0.00268)*x615);
IkReal x648=((0.00268)*x576);
IkReal x649=((0.00268)*x557);
IkReal x650=((0.4)*x591);
IkReal x651=(gclwh15_10*x608);
IkReal x652=((0.4)*x572);
IkReal x653=(gclwh5_10*x523);
IkReal x654=(gclwh11_10*x596);
IkReal x655=((0.02)*x518);
IkReal x656=((0.0268)*x569);
IkReal x657=(gclwh6_5*x640);
IkReal x658=(gclwh12_14*x605);
IkReal x659=(gclwh14_14*x602);
IkReal x660=(gclwh10_5*x513);
IkReal x661=(gclwh8_5*x577);
IkReal x662=((0.01)*x564);
IkReal x663=((0.02)*x595);
IkReal x664=(gclwh10_11*x528);
IkReal x665=(gclwh14_11*x536);
IkReal x666=(gclwh4_8*x601);
IkReal x667=(gclwh14_8*x560);
IkReal x668=(gclwh12_11*x512);
IkReal x669=(gclwh4_11*x530);
IkReal x670=(gclwh6_11*x534);
IkReal x671=((0.02)*x581);
IkReal x672=(gclwh7_10*x534);
IkReal x673=(gclwh5_10*x530);
IkReal x674=(gclwh5_9*x601);
IkReal x675=(gclwh13_10*x512);
IkReal x676=(gclwh11_10*x528);
IkReal x677=(gclwh15_10*x536);
IkReal x678=(gclwh9_10*x589);
IkReal x679=(gclwh15_9*x560);
IkReal x680=(gclwh13_15*x605);
IkReal x681=(gclwh5_15*x620);
IkReal x682=(gclwh7_7*x640);
IkReal x683=(gclwh15_15*x602);
IkReal x684=(gclwh9_7*x577);
IkReal x685=(gclwh11_7*x513);
IkReal x686=((0.00268)*x561);
IkReal x687=((0.00268)*gclwh4_14*r22);
IkReal x688=((0.00268)*gclwh14_14*r20);
IkReal x689=((0.00134)*x561);
IkReal x690=(gclwh8_5*x602);
IkReal x691=(gclwh10_5*x620);
IkReal x692=(gclwh4_14*x513);
IkReal x693=(gclwh6_5*x605);
IkReal x694=(gclwh14_14*x577);
IkReal x695=((0.001)*x621);
IkReal x696=(gclwh6_11*x512);
IkReal x697=((0.01)*x573);
IkReal x698=(gclwh12_8*x516);
IkReal x699=(gclwh12_11*x534);
IkReal x700=(gclwh10_11*x530);
IkReal x701=((0.001)*x552);
IkReal x702=(gclwh4_11*x528);
IkReal x703=(gclwh8_11*x536);
IkReal x704=((0.001)*x525);
IkReal x705=(gclwh7_10*x512);
IkReal x706=(gclwh15_10*x589);
IkReal x707=((0.001)*x634);
IkReal x708=(gclwh11_10*x530);
IkReal x709=(gclwh13_9*x516);
IkReal x710=((0.01)*x518);
IkReal x711=(gclwh5_10*x528);
IkReal x712=(gclwh9_10*x536);
IkReal x713=((0.00134)*x557);
IkReal x714=(gclwh7_7*x605);
IkReal x715=(gclwh11_7*x620);
IkReal x716=(gclwh5_15*x513);
IkReal x717=((0.00134)*x576);
IkReal x718=(gclwh9_7*x602);
IkReal x719=(gclwh15_9*x541);
IkReal x720=((2.0)*x508);
IkReal x721=((1.0)*x509);
IkReal x722=(x511*x611);
IkReal x723=(x547*x619);
IkReal x724=(x541*x546);
IkReal x725=(x517*x614);
IkReal x726=(x532*x549);
IkReal x727=(x543*x606);
IkReal x728=((2.0)*gclwh15_10*x517);
IkReal x729=(x532*x623);
IkReal x730=(x543*x625);
IkReal x731=((2.0)*gclwh13_10*x511);
IkReal x732=(x541*x570);
IkReal x733=((2.0)*gclwh5_10*x547);
IkReal x734=((0.134)*gclwh6_5*x511);
IkReal x735=((0.268)*gclwh10_5*x532);
IkReal x736=((0.268)*gclwh8_5*x541);
IkReal x737=((0.268)*gclwh6_5*x543);
IkReal x738=((0.134)*gclwh8_5*x517);
IkReal x739=((0.134)*gclwh10_5*x547);
IkReal x740=(gclwh14_2*rxp0_2*x510);
IkReal x741=(gclwh6_11*npy*x521);
IkReal x742=(x547*x612);
IkReal x743=(x528*x612);
IkReal x744=(x512*x592);
IkReal x745=(x517*x537);
IkReal x746=(x530*x531);
IkReal x747=(x537*x589);
IkReal x748=(gclwh12_2*rxp1_2*x510);
IkReal x749=(x536*x600);
IkReal x750=(gclwh4_2*rxp2_2*x510);
IkReal x751=(gclwh10_11*npz*x521);
IkReal x752=(x534*x642);
IkReal x753=(gclwh8_11*npx*x521);
IkReal x754=(gclwh11_10*npz*x521);
IkReal x755=(gclwh9_10*npx*x521);
IkReal x756=(gclwh13_1*pp*x512);
IkReal x757=(x547*x633);
IkReal x758=(x530*x563);
IkReal x759=(gclwh15_0*rxp0_2*x510);
IkReal x760=(x528*x633);
IkReal x761=(x589*x617);
IkReal x762=(x517*x617);
IkReal x763=(gclwh15_1*pp*x536);
IkReal x764=(gclwh5_0*rxp2_2*x510);
IkReal x765=(gclwh13_0*rxp1_2*x510);
IkReal x766=(x534*x583);
IkReal x767=(x521*x522);
IkReal x768=((0.268)*gclwh9_7*x541);
IkReal x769=((0.134)*gclwh7_7*x511);
IkReal x770=((0.268)*gclwh11_7*x532);
IkReal x771=((0.134)*gclwh11_7*x547);
IkReal x772=((0.268)*gclwh7_7*x543);
IkReal x773=((0.134)*gclwh9_7*x517);
IkReal x774=(x511*x645);
IkReal x775=((0.536)*gclwh14_14*x541);
IkReal x776=(x547*x594);
IkReal x777=((0.536)*gclwh4_14*x532);
IkReal x778=(x517*x558);
IkReal x779=((0.536)*gclwh12_14*x543);
IkReal x780=((0.134)*gclwh12_14*x511);
IkReal x781=(x541*x558);
IkReal x782=((0.134)*gclwh4_14*x547);
IkReal x783=(x543*x645);
IkReal x784=((0.134)*gclwh14_14*x517);
IkReal x785=(x532*x594);
IkReal x786=(x517*x535);
IkReal x787=(x535*x589);
IkReal x788=((0.1)*gclwh4_8*x547);
IkReal x789=(x509*x626);
IkReal x790=(gclwh1_2*pz*x589);
IkReal x791=(gclwh3_2*pz*x534);
IkReal x792=(gclwh4_11*npz*x521);
IkReal x793=((0.1)*gclwh12_8*x511);
IkReal x794=(x509*x578);
IkReal x795=(x509*x599);
IkReal x796=(gclwh6_2*rxp1_2*x510);
IkReal x797=(x509*x618);
IkReal x798=(gclwh12_11*npy*x521);
IkReal x799=(x510*x515);
IkReal x800=(gclwh4_8*npz*x510);
IkReal x801=(gclwh14_11*npx*x521);
IkReal x802=(x510*x550);
IkReal x803=(gclwh10_2*rxp2_2*x510);
IkReal x804=(x528*x553);
IkReal x805=(gclwh8_2*rxp0_2*x510);
IkReal x806=((0.1)*gclwh14_8*x517);
IkReal x807=(x534*x646);
IkReal x808=(x534*x637);
IkReal x809=(gclwh0_0*pz*x589);
IkReal x810=(gclwh11_0*rxp2_2*x510);
IkReal x811=(x533*x534);
IkReal x812=(x510*x632);
IkReal x813=(x509*x526);
IkReal x814=(pp*pz*x519);
IkReal x815=((0.01)*pz*x519);
IkReal x816=(x511*x637);
IkReal x817=(gclwh9_0*rxp0_2*x510);
IkReal x818=((0.1)*gclwh15_9*x517);
IkReal x819=(x509*x607);
IkReal x820=(gclwh5_10*npz*x521);
IkReal x821=(gclwh13_10*npy*x521);
IkReal x822=(gclwh5_9*npz*x510);
IkReal x823=(x509*x630);
IkReal x824=(x510*x567);
IkReal x825=((0.1)*gclwh5_9*x547);
IkReal x826=(gclwh15_9*npx*x510);
IkReal x827=((0.1)*gclwh13_9*x511);
IkReal x828=(gclwh15_10*npx*x521);
IkReal x829=(x589*x613);
IkReal x830=(x532*x619);
IkReal x831=((0.134)*gclwh15_15*x517);
IkReal x832=(x543*x611);
IkReal x833=((0.134)*gclwh13_15*x511);
IkReal x834=(x541*x614);
IkReal x835=((0.134)*gclwh5_15*x547);
IkReal x836=(gclwh6_2*npy*x720);
IkReal x837=(gclwh6_2*x511*x539);
IkReal x838=(gclwh10_2*npz*x720);
IkReal x839=(gclwh8_2*npx*x720);
IkReal x840=(gclwh7_0*npy*x720);
IkReal x841=(gclwh9_0*npx*x720);
IkReal x842=(gclwh11_0*npz*x720);
IkReal x843=(gclwh7_0*x511*x539);
IkReal x844=(gclwh12_2*npy*x720);
IkReal x845=(gclwh3_2*npy*x720);
IkReal x846=(gclwh1_2*npx*x720);
IkReal x847=(npx*x521*x600);
IkReal x848=(gclwh4_2*npz*x720);
IkReal x849=(npz*x521*x531);
IkReal x850=(gclwh12_2*x511*x539);
IkReal x851=(gclwh1_2*x517*x539);
IkReal x852=(gclwh3_3*x521*x631);
IkReal x853=(gclwh4_2*x539*x547);
IkReal x854=(gclwh1_3*x521*x624);
IkReal x855=(gclwh3_2*x511*x539);
IkReal x856=(npy*x521*x592);
IkReal x857=(gclwh14_2*npx*x720);
IkReal x858=(x638*x721);
IkReal x859=(gclwh0_0*npx*x720);
IkReal x860=(gclwh2_0*npy*x720);
IkReal x861=(npz*x521*x563);
IkReal x862=(gclwh13_1*x521*x631);
IkReal x863=(gclwh15_0*npx*x720);
IkReal x864=(gclwh2_1*x521*x631);
IkReal x865=(gclwh0_1*x521*x624);
IkReal x866=(gclwh5_0*npz*x720);
IkReal x867=(gclwh13_0*npy*x720);
IkReal x868=(gclwh0_0*x517*x539);
IkReal x869=(gclwh15_0*x517*x539);
IkReal x870=((1.0)*x511*x533);
IkReal x871=(x555*x721);
IkReal x872=(x579*x721);
IkReal x873=(gclwh15_1*x521*x624);
IkReal x874=(x690+x691);
IkReal x875=(x681+x680);
IkReal x876=(x718+x715);
IkReal x877=(x656+x658);
IkReal x878=(x662+x665+x664+x741);
IkReal x879=(x678+x676+x677+x767);
IkReal x880=(x706+x705+x821+x820);
IkReal x881=(x696+x697+x792+x798);
IkReal x882=(x649+x725+x726+x727);
IkReal x883=(x713+x830+x831+x832);
IkReal x884=(x657+x736+x735+x734);
IkReal x885=(x688+x777+x779+x778);
IkReal x886=(x694+x783+x784+x785);
IkReal x887=(x682+x770+x768+x769);
IkReal x888=(x699+x702+x703+x700+x801);
IkReal x889=(x711+x710+x712+x708+x828);
IkReal x890=(x672+x673+x675+x755+x754);
IkReal x891=(x669+x668+x670+x751+x753);
IkReal x892=(x650+x651+x730+x728+x729);
IkReal x893=(x687+x686+x776+x775+x774);
IkReal x894=(x661+x660+x737+x739+x738);
IkReal x895=(x717+x716+x834+x835+x833);
IkReal x896=(x685+x684+x773+x772+x771);
IkReal x897=(x689+x692+x782+x780+x781);
IkReal x898=(x647+x648+x722+x723+x724);
IkReal x899=(x652+x653+x654+x655+x733+x732+x731);
IkReal x900=(x679+x764+x765+x766+x763+x841+x843+x842);
IkReal x901=(x667+x750+x752+x748+x749+x837+x838+x839);
IkReal x902=(x671+x674+x757+x756+x759+x758+x760+x761+x762+x840);
IkReal x903=(x663+x666+x746+x747+x744+x745+x742+x743+x740+x836);
IkReal x904=(x709+x707+x869+x868+x867+x866+x865+x864+x870+x871+x872+x873+x829+x827+x826+x825+x824);
IkReal x905=(x510+x695+x698+x791+x790+x793+x795+x794+x797+x796+x799+x786+x787+x788+x789+x845+x844+x847+x846+x848);
IkReal x906=(x701+x852+x853+x850+x851+x856+x857+x854+x855+x858+x849+x805+x804+x807+x806+x800+x803+x802);
IkReal x907=(x510+x704+x859+x863+x862+x861+x860+x818+x819+x816+x817+x814+x815+x812+x813+x810+x811+x823+x822+x809+x808);
op[41]=(((gclwh3_2*x562))+(((0.132)*gclwh1_2*x541))+(((-1.0)*gclwh12_2*x562))+(((-0.132)*npx*x535))+((gclwh1_2*x571))+((gclwh14_2*x571))+(((-1.0)*gclwh10_2*x520))+(((0.132)*gclwh3_2*x543))+(((-1.0)*x885))+(((0.132)*gclwh12_2*x543))+(((-0.066)*gclwh4_2*x547))+((gclwh6_2*x556))+(((-0.066)*gclwh12_2*x511))+(((-0.066)*gclwh1_2*x517))+(((0.132)*gclwh4_2*x532))+(((-1.0)*gclwh8_2*x597))+x893+(((-0.066)*gclwh3_2*x511))+(((-0.00066)*x627))+(((0.066)*gclwh14_2*x517)));
op[42]=((((0.3268)*gclwh11_0*rxp2_2))+(((-1.634)*gclwh2_0*x511))+(((0.3268)*gclwh9_0*rxp0_2))+(((-3.268)*gclwh5_0*x532))+(((3.268)*gclwh15_0*x541))+(((-1.0)*x898))+(((3.268)*npy*x533))+(((-3.268)*gclwh13_0*x543))+(((-1.634)*gclwh15_0*x517))+(((-1.0)*gclwh15_0*x610))+(((3.268)*gclwh0_0*x541))+((gclwh2_0*x590))+((gclwh13_0*x590))+x882+(((-1.634)*gclwh0_0*x517))+(((1.634)*pp*x519))+((gclwh0_0*x610))+(((0.01634)*x519))+(((-0.3268)*x567))+(((1.634)*gclwh13_0*x511)));
op[43]=((1.299066)+(((-1.0)*x892))+x899);
op[44]=((0.03602)+(((0.04)*x518))+((x511*x625))+(((0.04)*gclwh5_10*r22))+(((0.8)*gclwh11_10*rxp2_2))+(((0.8)*x572))+(((-8.0)*gclwh5_10*x532))+(((-1.0)*x517*x570))+(((-0.8)*x591))+(((8.0)*gclwh15_10*x541))+(((-8.0)*gclwh13_10*x543))+((x547*x623))+(((-0.04)*gclwh15_10*r20)));
op[45]=((((-0.00536)*x557))+(((-1.072)*gclwh5_15*x532))+(((1.072)*gclwh15_15*x541))+(((-1.072)*gclwh13_15*x543))+(((0.3136)*x540))+((x547*x549))+(((0.00536)*x615))+(((-1.0)*x517*x546))+((x511*x606))+(((0.3136)*gclwh11_13*rxp2_2))+(((0.00536)*x576))+(((-0.3136)*gclwh7_13*rxp1_2)));
op[46]=((((0.132)*gclwh0_0*x541))+((gclwh0_0*x571))+((gclwh9_0*x597))+(((-0.066)*gclwh0_0*x517))+(((-1.0)*gclwh7_0*x556))+(((-0.066)*gclwh15_0*x517))+(((-1.0)*gclwh15_0*x571))+(((0.066)*pp*x519))+((gclwh11_0*x520))+(((-0.132)*gclwh5_0*x532))+(((-1.0)*x882))+((gclwh13_0*x562))+((gclwh2_0*x562))+(((0.132)*npy*x533))+(((0.066)*gclwh13_0*x511))+(((-0.132)*gclwh13_0*x543))+(((0.132)*gclwh15_0*x541))+x898+(((-0.066)*gclwh2_0*x511))+(((0.00066)*x519)));
op[47]=((0.033734)+(((-1.0)*x899))+x892);
op[48]=((((-1.0)*gclwh12_8*x575))+(((0.1634)*x584))+(((0.817)*gclwh8_12*x517))+(((-0.817)*gclwh6_12*x511))+((gclwh8_12*x628))+(((-1.0)*x894))+(((0.817)*gclwh10_12*x547))+((x529*x622))+(((-0.00817)*gclwh6_12*r21))+(((-1.634)*gclwh8_12*x541))+((gclwh10_12*x566))+x659+(((-1.634)*gclwh10_12*x532))+x884+(((-1.0)*gclwh4_8*x587))+(((-1.0)*x877)));
op[49]=(((gclwh6_11*x511))+(((-1.0)*gclwh8_11*x517))+(((-1.0)*x901))+(((-1.0)*gclwh4_3*x636))+(((-1.0)*gclwh10_11*x547))+((gclwh14_3*x559))+(((-0.135089)*x554))+x891+x903+(((-1.0)*x878)));
op[50]=((0.210112)+((gclwh12_11*x609))+(((-0.02)*x564))+(((-4.0)*gclwh6_11*x543))+(((-2.0)*gclwh10_11*x547))+((gclwh6_11*x565))+(((4.0)*gclwh8_11*x541))+(((2.0)*gclwh6_11*x511))+(((-2.0)*gclwh8_11*x517))+((gclwh4_11*x596))+(((4.0)*gclwh10_11*x532))+(((-1.0)*gclwh10_11*x523))+(((-1.0)*gclwh14_11*x635)));
op[51]=((((-1.0)*gclwh14_14*x643))+(((0.0536)*x569))+((x537*x629))+(((0.784)*gclwh6_2*x511))+((gclwh4_8*x585))+(((-1.568)*gclwh6_2*x543))+((gclwh12_14*x586))+(((-1.0)*gclwh10_2*x538))+(((-0.784)*gclwh8_2*x517))+(((1.568)*gclwh10_2*x532))+((gclwh6_2*x524))+((gclwh12_2*x604))+(((-1.0)*gclwh10_2*r22*x544))+(((-1.0)*gclwh14_2*x542))+(((-1.0)*gclwh8_2*x598))+(((0.17)*x595))+((gclwh4_2*x588))+(((-0.17)*x584)));
op[52]=(((gclwh12_8*x545))+((gclwh8_12*x639))+(((-1.0)*x894))+(((-1.0)*x659))+(((-0.0066)*x584))+(((0.033)*gclwh10_12*x547))+(((0.033)*gclwh8_12*x517))+(((-0.033)*gclwh6_12*x511))+((x514*x529))+((gclwh10_12*x574))+x877+x884+(((-1.0)*gclwh6_12*x582))+(((-1.0)*gclwh10_12*npz*x514))+(((-1.0)*gclwh8_12*npx*x514))+((gclwh4_8*x548)));
op[53]=((((-1.0)*gclwh4_3*x568))+(((-1.0)*x901))+(((-1.0)*x891))+((gclwh8_11*x517))+((gclwh14_3*x644))+(((-1.0)*gclwh6_11*x511))+x878+((gclwh10_11*x547))+x903+(((-0.001809)*x554)));
op[54]=((((-1.0)*gclwh7_10*x511))+(((-0.135089)*x641))+(((-1.0)*x900))+(((-1.0)*x890))+((gclwh11_10*x547))+((gclwh9_10*x517))+(((-1.0)*gclwh5_1*x636))+x879+((gclwh15_1*x559))+x902);
op[55]=((((-1.634)*gclwh9_13*x541))+((gclwh11_13*x566))+(((-1.0)*gclwh5_9*x587))+(((0.817)*gclwh9_13*x517))+(((-0.817)*gclwh7_13*x511))+(((-1.0)*x896))+(((0.1634)*x603))+(((1.634)*gclwh7_13*x543))+(((-0.00817)*x580))+((gclwh9_13*x628))+(((-1.634)*gclwh11_13*x532))+(((0.817)*gclwh11_13*x547))+x683+(((-1.0)*gclwh13_9*x575))+x887+(((-1.0)*x875)));
op[56]=((((0.784)*gclwh7_0*x511))+((gclwh5_0*x588))+(((-1.0)*gclwh5_9*x585))+(((-1.0)*gclwh15_0*x542))+(((-1.0)*gclwh9_0*x598))+(((1.568)*gclwh9_0*x541))+((gclwh15_15*x643))+(((-1.568)*gclwh7_0*x543))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.0)*gclwh11_0*r22*x544))+((gclwh7_0*x524))+(((-0.784)*gclwh9_0*x517))+(((0.17)*x603))+((gclwh13_0*x604))+(((-1.0)*gclwh11_0*x538))+(((1.568)*gclwh11_0*x532))+(((-0.17)*x581))+(((-1.0)*gclwh13_15*x586)));
op[57]=((0.210112)+(((-1.0)*gclwh9_10*x608))+((gclwh7_10*x565))+(((-4.0)*pz*x522))+(((4.0)*gclwh11_10*x532))+((gclwh5_10*x596))+(((-1.0)*gclwh11_10*x523))+(((-2.0)*gclwh9_10*x517))+((gclwh13_10*x609))+(((4.0)*gclwh9_10*x541))+(((2.0)*gclwh7_10*x511))+(((-1.0)*gclwh15_10*x635))+(((-2.0)*gclwh11_10*x547)));
op[58]=((((-1.0)*gclwh9_10*x517))+((gclwh15_1*x644))+(((-1.0)*x900))+(((-0.001809)*x641))+(((-1.0)*gclwh5_1*x568))+(((-1.0)*gclwh11_10*x547))+((gclwh7_10*x511))+x890+x902+(((-1.0)*x879)));
op[59]=((((-0.0066)*x603))+((gclwh7_13*npy*x514))+(((-1.0)*x683))+(((-1.0)*gclwh9_13*npx*x514))+(((0.033)*gclwh9_13*x517))+(((-0.033)*gclwh7_13*x511))+(((-1.0)*x896))+((gclwh13_9*x545))+((gclwh9_13*x639))+(((0.033)*gclwh11_13*x547))+((gclwh11_13*x574))+(((-0.00033)*x580))+x875+x887+((gclwh5_9*x548))+(((-1.0)*gclwh11_13*npz*x514)));
op[60]=((((-1.0)*gclwh10_12*x587))+(((-0.1634)*x616))+(((0.817)*gclwh14_8*x517))+((gclwh6_12*x575))+(((1.634)*gclwh12_8*x543))+(((-0.00817)*x527))+(((-1.0)*x897))+(((-0.817)*gclwh12_8*x511))+(((-0.817)*gclwh4_8*x547))+(((1.634)*gclwh4_8*x532))+(((-1.0)*x515*x622))+(((0.00817)*x552))+(((-1.0)*gclwh4_8*x566))+(((-1.0)*x693))+x874+x886);
op[61]=((0.685445)+(((0.665445)*gclwh14_3*x517))+(((-0.00675445)*x626))+(((-1.35089)*gclwh14_3*x541))+(((-1.0)*x906))+((gclwh12_11*x511))+(((-0.685445)*gclwh3_3*x511))+(((-0.00675445)*x618))+(((-1.0)*x881))+(((0.00675445)*x638))+(((0.00675445)*x578))+(((0.00675445)*x599))+(((1.35089)*gclwh4_3*x532))+(((-0.685445)*gclwh1_3*x517))+(((1.35089)*gclwh3_3*x543))+((gclwh4_11*x547))+(((1.35089)*gclwh1_3*x541))+(((-0.665445)*gclwh12_3*x511))+(((1.35089)*gclwh12_3*x543))+x888+(((-0.665445)*r22*x531))+x905+(((-1.0)*gclwh14_11*x517)));
op[62]=((0.089834)+((gclwh10_11*x596))+(((-1.0)*gclwh6_11*x609))+(((-4.0)*gclwh12_11*x543))+((gclwh8_11*x635))+(((-0.02)*x573))+((gclwh12_11*x565))+(((-2.0)*gclwh14_11*x517))+(((2.0)*gclwh12_11*x511))+(((4.0)*gclwh14_11*x541))+(((2.0)*gclwh4_11*x547))+((gclwh4_11*x523))+(((-4.0)*gclwh4_11*x532)));
op[63]=((((-1.7)*gclwh12_8*x543))+(((0.85)*gclwh4_8*x547))+(((0.85)*gclwh12_8*x511))+(((-1.568)*gclwh4_2*x532))+(((-1.568)*gclwh3_2*x543))+(((0.784)*gclwh1_2*x517))+((x544*x627))+(((-0.784)*gclwh14_2*x517))+(((-1.568)*gclwh12_2*x543))+(((-1.0)*gclwh14_2*x598))+(((0.784)*gclwh12_2*x511))+(((-1.0)*gclwh6_2*x604))+(((-1.0)*gclwh1_2*x598))+(((-1.0)*gclwh3_2*x524))+(((-1.0)*x885))+(((-0.85)*gclwh14_8*x517))+(((1.7)*pz*x515))+((gclwh12_2*x524))+(((0.784)*gclwh3_2*x511))+((gclwh10_2*x588))+(((0.0085)*x527))+((gclwh8_2*x542))+x893+(((-0.0085)*x552))+(((-1.7)*gclwh4_8*x532))+((gclwh4_2*x538))+(((0.0085)*x621))+((x535*x629))+(((-1.568)*gclwh1_2*x541)));
op[64]=((((-0.033)*gclwh14_8*x517))+(((0.033)*gclwh4_8*x547))+(((0.00033)*x527))+((gclwh4_8*x574))+((x514*x515))+(((-1.0)*x886))+(((-1.0)*x693))+(((-1.0)*gclwh4_8*npz*x514))+x874+x897+(((-0.00033)*x552))+(((-1.0)*x514*x550))+(((-1.0)*gclwh10_12*x548))+(((0.033)*gclwh12_8*x511))+((gclwh6_12*x545))+(((-0.0066)*x616)));
op[65]=((-0.019045)+(((-0.019045)*gclwh3_3*x511))+(((0.000955)*r22*x531))+(((0.01809)*gclwh1_3*x541))+(((0.000955)*gclwh12_3*x511))+(((-1.0)*x906))+(((-0.01809)*gclwh14_3*x541))+(((-1.0)*x888))+(((-1.0)*gclwh4_11*x547))+(((0.01809)*gclwh12_3*x543))+(((-9.045e-5)*x618))+(((9.045e-5)*x578))+(((0.01809)*gclwh4_3*x532))+(((-1.0)*gclwh12_11*x511))+((gclwh14_3*x551))+((gclwh14_11*x517))+(((-9.045e-5)*x626))+x881+((gclwh1_3*x551))+x905+(((-0.019045)*gclwh1_3*x517))+(((0.01809)*gclwh3_3*x543))+(((-0.000955)*gclwh14_3*x517)));
op[66]=((-0.685445)+(((0.00675445)*x555))+(((0.00675445)*x607))+(((-0.685445)*gclwh2_1*x511))+(((1.35089)*gclwh15_1*x541))+(((-1.0)*x904))+((gclwh13_10*x511))+(((-1.0)*x880))+(((0.00675445)*x630))+(((0.00675445)*x579))+((gclwh5_10*x547))+(((1.35089)*gclwh2_1*x543))+(((-0.665445)*gclwh15_1*x517))+(((-1.35089)*gclwh13_1*x543))+(((1.35089)*gclwh0_1*x541))+(((-0.685445)*gclwh0_1*x517))+(((0.665445)*gclwh5_1*x547))+x889+(((-0.00675445)*x526))+x907+(((0.665445)*gclwh13_1*x511))+(((-1.35089)*gclwh5_1*x532))+(((-1.0)*gclwh15_10*x517)));
op[67]=(((gclwh5_9*x566))+(((0.1634)*x540))+(((0.817)*gclwh5_9*x547))+(((-1.634)*gclwh13_9*x543))+(((-1.634)*gclwh5_9*x532))+(((-0.00817)*x525))+(((-1.0)*x883))+(((0.817)*gclwh13_9*x511))+((gclwh11_13*x587))+(((-0.817)*gclwh15_9*x517))+(((1.634)*x719))+(((-1.0)*gclwh7_13*x575))+x714+x895+(((0.00817)*x593))+(((-1.0)*x876)));
op[68]=((((0.85)*gclwh5_9*x547))+(((1.568)*gclwh5_0*x532))+(((0.784)*gclwh0_0*x517))+(((0.784)*gclwh2_0*x511))+(((-1.568)*npy*x533))+(((-1.0)*gclwh11_0*x588))+(((-1.0)*gclwh2_0*x524))+(((-1.0)*x882))+(((-1.0)*gclwh0_0*x598))+(((0.0085)*x593))+(((-1.568)*gclwh0_0*x541))+(((0.85)*gclwh13_9*x511))+(((-1.568)*gclwh15_0*x541))+(((-0.784)*gclwh13_0*x511))+(((-0.85)*gclwh15_9*x517))+(((-1.0)*gclwh9_0*x542))+((gclwh15_0*x598))+(((-0.0085)*x525))+(((0.1568)*x567))+x898+(((1.568)*gclwh13_0*x543))+(((0.784)*gclwh15_0*x517))+(((0.0085)*x634))+(((-1.0)*x519*x544))+(((-1.7)*gclwh5_9*x532))+(((-1.0)*gclwh13_0*x524))+(((-0.00784)*x519))+(((1.7)*x719))+(((-1.7)*gclwh13_9*x543)));
op[69]=((0.089834)+(((-1.0)*x899))+x892);
op[70]=((0.019045)+(((0.01809)*gclwh2_1*x543))+(((0.01809)*gclwh0_1*x541))+(((-0.019045)*gclwh0_1*x517))+(((-0.019045)*gclwh2_1*x511))+(((-1.0)*x904))+(((0.000955)*gclwh15_1*x517))+(((-1.0)*gclwh5_10*x547))+(((9.045e-5)*x607))+(((-1.0)*gclwh13_10*x511))+(((-0.01809)*gclwh5_1*x532))+(((-1.0)*x889))+((gclwh15_10*x517))+(((9.045e-5)*x579))+(((-0.01809)*gclwh13_1*x543))+(((0.01809)*gclwh15_1*x541))+x880+(((-0.000955)*gclwh13_1*x511))+((gclwh0_1*x551))+(((-9.045e-5)*x526))+x907+(((9.045e-5)*x555))+(((-0.000955)*gclwh5_1*x547)));
op[71]=((((0.0066)*x540))+(((-0.033)*gclwh5_9*x547))+(((0.00033)*x525))+(((-1.0)*x895))+(((-1.0)*gclwh5_9*x574))+(((-1.0)*gclwh7_13*x545))+(((-1.0)*gclwh13_9*x582))+((x514*x632))+(((-1.0)*gclwh15_9*npx*x514))+(((0.033)*gclwh15_9*x517))+(((-0.033)*gclwh13_9*x511))+((gclwh11_13*x548))+x714+x883+((gclwh5_9*npz*x514))+(((-1.0)*x876)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x908=htj1*htj1;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((1.0)+x908),-1);
if(!x909.valid){
continue;
}
cj1array[numsolutions]=((x909.value)*(((1.0)+(((-1.0)*x908)))));
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x910.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x910.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x911=htj2*htj2;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+x911),-1);
if(!x912.valid){
continue;
}
cj2array[numsolutions]=((x912.value)*(((1.0)+(((-1.0)*x911)))));
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x913.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x913.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x914=htj3*htj3;
CheckValue<IkReal> x915=IKPowWithIntegerCheck(((1.0)+x914),-1);
if(!x915.valid){
continue;
}
cj3array[numsolutions]=((x915.value)*(((1.0)+(((-1.0)*x914)))));
CheckValue<IkReal> x916=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x916.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x916.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x917=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x917);
rxp1_0=(pz*r11);
rxp1_1=(r01*x917);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x918=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x918);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x919=IKPowWithIntegerCheck(r22,-1);
if(!x919.valid){
continue;
}
CheckValue<IkReal> x920=IKPowWithIntegerCheck(sj3,-1);
if(!x920.valid){
continue;
}
sj4array[0]=((x919.value)*(x920.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x921=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x921);
rxp1_0=(pz*r11);
rxp1_1=(r01*x921);
IkReal x922=((16.0)*sj4);
IkReal x923=(cj1*cj2);
IkReal x924=((4.0)*sj3);
IkReal x925=((8.0)*sj4);
IkReal x926=((4.0)*cj4);
IkReal x927=(sj1*sj2);
IkReal x928=((4.0)*sj4);
IkReal x929=(cj3*r02);
IkReal x930=((16.0)*sj3);
IkReal x931=((8.0)*sj3);
IkReal x932=((12.0)*cj4);
IkReal x933=((12.0)*sj4);
IkReal x934=(cj3*r12);
IkReal x935=(r11*x924);
IkReal x936=(r01*x924);
IkReal x937=(r01*x927);
IkReal x938=(cj3*cj4*r01);
IkReal x939=(cj3*cj4*r11);
IkReal x940=(cj3*r10*x926);
IkReal x941=(x933*x934);
IkReal x942=(cj3*r00*x926);
IkReal x943=(x929*x933);
IkReal x944=(r00*x927*x928);
IkReal x945=(r02*x927*x932);
IkReal x946=(r00*x923*x928);
IkReal x947=(r02*x923*x932);
IkReal x948=(r10*x927*x928);
IkReal x949=(r12*x923*x932);
IkReal x950=(r12*x927*x932);
IkReal x951=(r10*x923*x928);
IkReal x952=(x935+x946);
IkReal x953=(x936+x948);
IkReal x954=(x940+x944);
IkReal x955=(x941+x947);
IkReal x956=(x951+x942);
IkReal x957=(x950+x943);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r12*x926*x927))+(((-1.0)*x928*x929))+((r12*x923*x926))+(((-1.0)*x956))+x953)))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x955))+x952+x945)))))+(((0.5)*(IKabs(((((-1.0)*x956))+(((-1.0)*x957))+x953+x949)))))+(((0.5)*(IKabs(((((-1.0)*r11*x922*x923))+(((-16.0)*x938))+(((-1.0)*r00*x930))+((r11*x922*x927)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x923*x926))+(((-1.0)*x928*x934))+(((-1.0)*x954))+x952+((r02*x926*x927)))))))+(IKabs(((((-1.0)*r11*x923*x925))+(((-8.0)*x938))+(((-1.0)*r00*x931))+((r11*x925*x927)))))+(IKabs(((((-1.0)*x925*x937))+(((-1.0)*r10*x931))+(((-8.0)*x939))+((r01*x923*x925)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x957))+x956+x949)))))+(((0.5)*(IKabs(((((-1.0)*r10*x930))+((r01*x922*x923))+(((-16.0)*x939))+(((-1.0)*x922*x937)))))))+(((0.5)*(IKabs(((((-1.0)*x955))+(((-1.0)*x952))+x954+x945))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x958=(r10*sj3);
IkReal x959=(r01*sj4);
IkReal x960=(cj1*cj2);
IkReal x961=(cj3*cj4);
IkReal x962=(sj1*sj2);
IkReal x963=(cj4*r02);
IkReal x964=((4.0)*r11*sj3);
IkReal x965=(cj3*r12*sj4);
IkReal x966=((4.0)*r00*sj4);
IkReal x967=((4.0)*r10*x961);
IkReal x968=((12.0)*x965);
IkReal x969=((4.0)*x965);
IkReal x970=(x960*x966);
IkReal x971=(x962*x966);
IkReal x972=((12.0)*x962*x963);
IkReal x973=((12.0)*x960*x963);
IkReal x974=((4.0)*x962*x963);
IkReal x975=((4.0)*x960*x963);
IkReal x976=(x970+x964);
IkReal x977=(x971+x967);
IkReal x978=(x975+x969);
IkReal x979=(x973+x968);
IkReal x980=((((8.0)*x959*x960))+(((-8.0)*x958))+(((-8.0)*x959*x962))+(((-8.0)*r11*x961)));
op[0]=(x974+x976+(((-1.0)*x978))+(((-1.0)*x977)));
op[1]=x980;
op[2]=(x972+x976+(((-1.0)*x979))+(((-1.0)*x977)));
op[3]=((((16.0)*x959*x960))+(((-16.0)*r11*x961))+(((-16.0)*x959*x962))+(((-16.0)*x958)));
op[4]=(x972+x977+(((-1.0)*x979))+(((-1.0)*x976)));
op[5]=x980;
op[6]=(x974+x977+(((-1.0)*x978))+(((-1.0)*x976)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x981=(cj1*cj2);
IkReal x982=((4.0)*cj4);
IkReal x983=(sj1*sj2);
IkReal x984=((4.0)*sj4);
IkReal x985=(r00*sj3);
IkReal x986=(cj3*r02);
IkReal x987=((4.0)*r01*sj3);
IkReal x988=((16.0)*r11*sj4);
IkReal x989=(cj3*cj4*r01);
IkReal x990=((12.0)*cj4*r12);
IkReal x991=((8.0)*r11*sj4);
IkReal x992=(cj3*r00*x982);
IkReal x993=((12.0)*sj4*x986);
IkReal x994=(x984*x986);
IkReal x995=(r10*x981*x984);
IkReal x996=(r10*x983*x984);
IkReal x997=(x981*x990);
IkReal x998=(x983*x990);
IkReal x999=(r12*x981*x982);
IkReal x1000=(r12*x982*x983);
IkReal x1001=(x996+x987);
IkReal x1002=(x992+x995);
IkReal x1003=(x1000+x994);
IkReal x1004=(x993+x998);
IkReal x1005=(((x983*x991))+(((-8.0)*x985))+(((-8.0)*x989))+(((-1.0)*x981*x991)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x1001+(((-1.0)*x1002))+(((-1.0)*x1004))+x997))))+x1002+(((-1.0)*x1001))+(((-1.0)*x1003))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1001+(((-1.0)*x1002))+(((-1.0)*x1003))+x999))))+(((htj5*htj5*htj5)*((((x983*x988))+(((-16.0)*x985))+(((-16.0)*x989))+(((-1.0)*x981*x988))))))+((x1005*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1002+(((-1.0)*x1001))+(((-1.0)*x1004))+x997))))+((htj5*x1005))+x999);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1006=(cj5*sj4);
IkReal x1007=(sj4*sj5);
if( IKabs((((r01*x1007))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1006)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1007))+((cj4*r12))+((r10*x1006)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1007))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1006))))+IKsqr(((((-1.0)*r11*x1007))+((cj4*r12))+((r10*x1006))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1007))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1006))), ((((-1.0)*r11*x1007))+((cj4*r12))+((r10*x1006))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1008=IKcos(j0);
IkReal x1009=IKsin(j0);
IkReal x1010=(r02*sj4);
IkReal x1011=((0.1)*sj5);
IkReal x1012=(cj5*r11);
IkReal x1013=((1.0)*sj3);
IkReal x1014=(r12*sj4);
IkReal x1015=((1.0)*cj3);
IkReal x1016=(r11*sj5);
IkReal x1017=(cj3*cj4);
IkReal x1018=((1.0)*sj2);
IkReal x1019=(cj5*r01);
IkReal x1020=(r01*sj5);
IkReal x1021=(sj1*sj2);
IkReal x1022=(cj1*cj2);
IkReal x1023=(r00*sj5);
IkReal x1024=((1.0)*cj2);
IkReal x1025=(r10*sj5);
IkReal x1026=((1.0)*cj4);
IkReal x1027=(cj4*cj5*r00);
IkReal x1028=(cj1*x1008);
IkReal x1029=(cj4*cj5*r10);
IkReal x1030=((0.392)*x1009);
IkReal x1031=((1.0)*x1009);
IkReal x1032=(cj1*x1009);
IkReal x1033=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x1026))+(((-1.0)*r10*x1033))+x1008+((sj4*x1016)));
evalcond[1]=((((-1.0)*x1031))+((sj4*x1020))+(((-1.0)*r02*x1026))+(((-1.0)*r00*x1033)));
evalcond[2]=((((-0.392)*x1008*x1021))+(((-1.0)*px))+(((0.425)*x1028))+(((-0.134)*x1009))+(((0.392)*x1008*x1022))+(((-1.0)*r00*x1011))+(((-0.1)*x1019)));
evalcond[3]=((((0.425)*x1032))+(((-1.0)*x1021*x1030))+(((0.134)*x1008))+(((-1.0)*py))+((x1022*x1030))+(((-1.0)*r10*x1011))+(((-0.1)*x1012)));
evalcond[4]=(((x1017*x1020))+((x1008*x1021))+(((-1.0)*x1008*x1022))+((cj3*x1010))+(((-1.0)*x1015*x1027))+((sj3*x1019))+((sj3*x1023)));
evalcond[5]=(((x1016*x1017))+((x1009*x1021))+((cj3*x1014))+(((-1.0)*x1022*x1031))+(((-1.0)*x1015*x1029))+((sj3*x1012))+((sj3*x1025)));
evalcond[6]=((((-1.0)*x1010*x1013))+((cj3*x1019))+(((-1.0)*cj4*x1013*x1020))+(((-1.0)*x1018*x1028))+(((-1.0)*sj1*x1008*x1024))+((sj3*x1027))+((cj3*x1023)));
evalcond[7]=(((cj3*x1012))+(((-1.0)*cj4*x1013*x1016))+(((-1.0)*sj1*x1009*x1024))+(((-1.0)*x1013*x1014))+(((-1.0)*x1018*x1032))+((sj3*x1029))+((cj3*x1025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1034=IKPowWithIntegerCheck(cj3,-1);
if(!x1034.valid){
continue;
}
CheckValue<IkReal> x1035=IKPowWithIntegerCheck(r22,-1);
if(!x1035.valid){
continue;
}
sj4array[0]=((-1.0)*(x1034.value)*(x1035.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1036=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1036);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1036);
IkReal x1037=((16.0)*sj4);
IkReal x1038=(cj1*cj2);
IkReal x1039=((4.0)*sj3);
IkReal x1040=((8.0)*sj4);
IkReal x1041=((4.0)*cj4);
IkReal x1042=(sj1*sj2);
IkReal x1043=((4.0)*sj4);
IkReal x1044=(cj3*r02);
IkReal x1045=((16.0)*sj3);
IkReal x1046=((8.0)*sj3);
IkReal x1047=((12.0)*cj4);
IkReal x1048=((12.0)*sj4);
IkReal x1049=(cj3*r12);
IkReal x1050=(r11*x1039);
IkReal x1051=(r01*x1039);
IkReal x1052=(r01*x1042);
IkReal x1053=(cj3*cj4*r01);
IkReal x1054=(cj3*cj4*r11);
IkReal x1055=(cj3*r10*x1041);
IkReal x1056=(x1048*x1049);
IkReal x1057=(cj3*r00*x1041);
IkReal x1058=(x1044*x1048);
IkReal x1059=(r00*x1042*x1043);
IkReal x1060=(r02*x1042*x1047);
IkReal x1061=(r00*x1038*x1043);
IkReal x1062=(r02*x1038*x1047);
IkReal x1063=(r10*x1042*x1043);
IkReal x1064=(r12*x1038*x1047);
IkReal x1065=(r12*x1042*x1047);
IkReal x1066=(r10*x1038*x1043);
IkReal x1067=(x1050+x1061);
IkReal x1068=(x1051+x1063);
IkReal x1069=(x1055+x1059);
IkReal x1070=(x1056+x1062);
IkReal x1071=(x1057+x1066);
IkReal x1072=(x1058+x1065);
j5eval[0]=((((0.5)*(IKabs((x1068+x1064+(((-1.0)*x1072))+(((-1.0)*x1071)))))))+(((0.5)*(IKabs((x1060+x1067+(((-1.0)*x1069))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x1038*x1041))+x1067+(((-1.0)*x1043*x1049))+(((-1.0)*x1069))+((r02*x1041*x1042)))))))+(((0.5)*(IKabs((x1069+x1060+(((-1.0)*x1067))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x1041*x1042))+x1068+((r12*x1038*x1041))+(((-1.0)*x1043*x1044))+(((-1.0)*x1071)))))))+(IKabs(((((-8.0)*x1054))+(((-1.0)*r10*x1046))+((r01*x1038*x1040))+(((-1.0)*x1040*x1052)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1045))+((r11*x1037*x1042))+(((-16.0)*x1053))+(((-1.0)*r11*x1037*x1038)))))))+(((0.5)*(IKabs((x1071+x1064+(((-1.0)*x1068))+(((-1.0)*x1072)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1045))+(((-1.0)*x1037*x1052))+((r01*x1037*x1038))+(((-16.0)*x1054)))))))+(IKabs(((((-1.0)*r11*x1038*x1040))+(((-1.0)*r00*x1046))+(((-8.0)*x1053))+((r11*x1040*x1042))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1073=(r10*sj3);
IkReal x1074=(r01*sj4);
IkReal x1075=(cj1*cj2);
IkReal x1076=(cj3*cj4);
IkReal x1077=(sj1*sj2);
IkReal x1078=(cj4*r02);
IkReal x1079=((4.0)*r11*sj3);
IkReal x1080=(cj3*r12*sj4);
IkReal x1081=((4.0)*r00*sj4);
IkReal x1082=((4.0)*r10*x1076);
IkReal x1083=((12.0)*x1080);
IkReal x1084=((4.0)*x1080);
IkReal x1085=(x1075*x1081);
IkReal x1086=(x1077*x1081);
IkReal x1087=((12.0)*x1077*x1078);
IkReal x1088=((12.0)*x1075*x1078);
IkReal x1089=((4.0)*x1077*x1078);
IkReal x1090=((4.0)*x1075*x1078);
IkReal x1091=(x1079+x1085);
IkReal x1092=(x1086+x1082);
IkReal x1093=(x1090+x1084);
IkReal x1094=(x1083+x1088);
IkReal x1095=((((-8.0)*x1073))+(((-8.0)*x1074*x1077))+(((8.0)*x1074*x1075))+(((-8.0)*r11*x1076)));
op[0]=(x1091+x1089+(((-1.0)*x1093))+(((-1.0)*x1092)));
op[1]=x1095;
op[2]=(x1091+x1087+(((-1.0)*x1094))+(((-1.0)*x1092)));
op[3]=((((-16.0)*x1074*x1077))+(((16.0)*x1074*x1075))+(((-16.0)*r11*x1076))+(((-16.0)*x1073)));
op[4]=(x1092+x1087+(((-1.0)*x1091))+(((-1.0)*x1094)));
op[5]=x1095;
op[6]=(x1092+x1089+(((-1.0)*x1091))+(((-1.0)*x1093)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1096=(cj1*cj2);
IkReal x1097=((4.0)*cj4);
IkReal x1098=(sj1*sj2);
IkReal x1099=((4.0)*sj4);
IkReal x1100=(r00*sj3);
IkReal x1101=(cj3*r02);
IkReal x1102=((4.0)*r01*sj3);
IkReal x1103=((16.0)*r11*sj4);
IkReal x1104=(cj3*cj4*r01);
IkReal x1105=((12.0)*cj4*r12);
IkReal x1106=((8.0)*r11*sj4);
IkReal x1107=(cj3*r00*x1097);
IkReal x1108=((12.0)*sj4*x1101);
IkReal x1109=(x1099*x1101);
IkReal x1110=(r10*x1096*x1099);
IkReal x1111=(r10*x1098*x1099);
IkReal x1112=(x1096*x1105);
IkReal x1113=(x1098*x1105);
IkReal x1114=(r12*x1096*x1097);
IkReal x1115=(r12*x1097*x1098);
IkReal x1116=(x1102+x1111);
IkReal x1117=(x1107+x1110);
IkReal x1118=(x1109+x1115);
IkReal x1119=(x1108+x1113);
IkReal x1120=(((x1098*x1106))+(((-8.0)*x1100))+(((-8.0)*x1104))+(((-1.0)*x1096*x1106)));
j5evalpoly[0]=(((htj5*x1120))+x1114+x1117+(((htj5*htj5*htj5*htj5)*((x1112+x1116+(((-1.0)*x1119))+(((-1.0)*x1117))))))+(((htj5*htj5*htj5)*((((x1098*x1103))+(((-16.0)*x1100))+(((-16.0)*x1104))+(((-1.0)*x1096*x1103))))))+((x1120*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1112+x1117+(((-1.0)*x1119))+(((-1.0)*x1116))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1114+x1116+(((-1.0)*x1118))+(((-1.0)*x1117))))))+(((-1.0)*x1118))+(((-1.0)*x1116)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1121=(cj5*sj4);
IkReal x1122=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1122))+(((-1.0)*r00*x1121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1122))+((r10*x1121))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1122))+(((-1.0)*r00*x1121))))+IKsqr(((((-1.0)*r11*x1122))+((r10*x1121))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1122))+(((-1.0)*r00*x1121))), ((((-1.0)*r11*x1122))+((r10*x1121))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1123=IKcos(j0);
IkReal x1124=IKsin(j0);
IkReal x1125=(r02*sj4);
IkReal x1126=((0.1)*sj5);
IkReal x1127=(cj5*r11);
IkReal x1128=((1.0)*sj3);
IkReal x1129=(r12*sj4);
IkReal x1130=((1.0)*cj3);
IkReal x1131=(r11*sj5);
IkReal x1132=(cj3*cj4);
IkReal x1133=((1.0)*sj2);
IkReal x1134=(cj5*r01);
IkReal x1135=(r01*sj5);
IkReal x1136=(sj1*sj2);
IkReal x1137=(cj1*cj2);
IkReal x1138=(r00*sj5);
IkReal x1139=((1.0)*cj2);
IkReal x1140=(r10*sj5);
IkReal x1141=((1.0)*cj4);
IkReal x1142=(cj4*cj5*r00);
IkReal x1143=(cj1*x1123);
IkReal x1144=(cj4*cj5*r10);
IkReal x1145=((0.392)*x1124);
IkReal x1146=((1.0)*x1124);
IkReal x1147=(cj1*x1124);
IkReal x1148=((1.0)*cj5*sj4);
evalcond[0]=(x1123+((sj4*x1131))+(((-1.0)*r10*x1148))+(((-1.0)*r12*x1141)));
evalcond[1]=((((-1.0)*r00*x1148))+((sj4*x1135))+(((-1.0)*x1146))+(((-1.0)*r02*x1141)));
evalcond[2]=((((-0.1)*x1134))+(((-0.392)*x1123*x1136))+(((0.425)*x1143))+(((-1.0)*px))+(((-0.134)*x1124))+(((-1.0)*r00*x1126))+(((0.392)*x1123*x1137)));
evalcond[3]=((((-1.0)*x1136*x1145))+((x1137*x1145))+(((-0.1)*x1127))+(((0.134)*x1123))+(((0.425)*x1147))+(((-1.0)*r10*x1126))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x1123*x1137))+(((-1.0)*x1130*x1142))+((x1123*x1136))+((sj3*x1134))+((sj3*x1138))+((cj3*x1125))+((x1132*x1135)));
evalcond[5]=((((-1.0)*x1137*x1146))+((x1131*x1132))+((sj3*x1140))+((x1124*x1136))+((sj3*x1127))+(((-1.0)*x1130*x1144))+((cj3*x1129)));
evalcond[6]=(((cj3*x1138))+((cj3*x1134))+(((-1.0)*cj4*x1128*x1135))+((sj3*x1142))+(((-1.0)*sj1*x1123*x1139))+(((-1.0)*x1133*x1143))+(((-1.0)*x1125*x1128)));
evalcond[7]=(((cj3*x1140))+(((-1.0)*sj1*x1124*x1139))+(((-1.0)*cj4*x1128*x1131))+((sj3*x1144))+(((-1.0)*x1133*x1147))+(((-1.0)*x1128*x1129))+((cj3*x1127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1149=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1149);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1149);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1150=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1150);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1150);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1151=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1151);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1151);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1152=IKPowWithIntegerCheck(r22,-1);
if(!x1152.valid){
continue;
}
sj4array[0]=((-1.0)*(x1152.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1153=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1153);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1153);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1155 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1155.valid){
continue;
}
IkReal x1154=x1155.value;
j5array[0]=((-1.0)*x1154);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1154)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1156=(cj5*sj4);
IkReal x1157=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1156))+((r01*x1157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1157))+((r10*x1156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1156))+((r01*x1157))))+IKsqr(((((-1.0)*r11*x1157))+((r10*x1156))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1156))+((r01*x1157))), ((((-1.0)*r11*x1157))+((r10*x1156))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1158=IKcos(j0);
IkReal x1159=IKsin(j0);
IkReal x1160=((0.1)*sj5);
IkReal x1161=(cj5*r11);
IkReal x1162=(cj5*r01);
IkReal x1163=(sj4*sj5);
IkReal x1164=((0.425)*cj1);
IkReal x1165=((1.0)*cj1*sj2);
IkReal x1166=((1.0)*cj2*sj1);
IkReal x1167=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1167))+x1158+((r11*x1163)));
evalcond[1]=(((r01*x1163))+(((-1.0)*x1159))+(((-1.0)*r00*x1167)));
evalcond[2]=(((r00*sj5))+x1162+(((-1.0)*x1158*x1165))+(((-1.0)*x1158*x1166)));
evalcond[3]=(x1161+(((-1.0)*x1159*x1166))+(((-1.0)*x1159*x1165))+((r10*sj5)));
evalcond[4]=((((-0.134)*x1159))+(((-1.0)*px))+(((-1.0)*r00*x1160))+((x1158*x1164))+(((-0.1)*x1162)));
evalcond[5]=((((-1.0)*r10*x1160))+((x1159*x1164))+(((0.134)*x1158))+(((-1.0)*py))+(((-0.1)*x1161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1168=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1168);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1168);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1169=IKPowWithIntegerCheck(r22,-1);
if(!x1169.valid){
continue;
}
sj4array[0]=((x1169.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1170=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1170);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1170);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1172 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1172.valid){
continue;
}
IkReal x1171=x1172.value;
j5array[0]=((-1.0)*x1171);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1171)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1173=(cj5*sj4);
IkReal x1174=(sj4*sj5);
if( IKabs((((r01*x1174))+(((-1.0)*r00*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1173))+(((-1.0)*r11*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1174))+(((-1.0)*r00*x1173))))+IKsqr((((r10*x1173))+(((-1.0)*r11*x1174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1174))+(((-1.0)*r00*x1173))), (((r10*x1173))+(((-1.0)*r11*x1174))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1175=IKcos(j0);
IkReal x1176=IKsin(j0);
IkReal x1177=(r00*sj5);
IkReal x1178=(cj5*r11);
IkReal x1179=(sj4*sj5);
IkReal x1180=(r10*sj5);
IkReal x1181=((0.425)*cj1);
IkReal x1182=((1.0)*cj5);
IkReal x1183=((1.0)*cj1*sj2);
IkReal x1184=((1.0)*cj2*sj1);
evalcond[0]=(x1175+((r11*x1179))+(((-1.0)*r10*sj4*x1182)));
evalcond[1]=((((-1.0)*r00*sj4*x1182))+((r01*x1179))+(((-1.0)*x1176)));
evalcond[2]=(((x1175*x1181))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-0.134)*x1176))+(((-0.1)*x1177)));
evalcond[3]=((((-0.1)*x1180))+((x1176*x1181))+(((-1.0)*py))+(((0.134)*x1175))+(((-0.1)*x1178)));
evalcond[4]=((((-1.0)*r01*x1182))+(((-1.0)*x1175*x1183))+(((-1.0)*x1175*x1184))+(((-1.0)*x1177)));
evalcond[5]=((((-1.0)*x1176*x1183))+(((-1.0)*x1176*x1184))+(((-1.0)*x1180))+(((-1.0)*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1185=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1185);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1185);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(r22,-1);
if(!x1186.valid){
continue;
}
sj4array[0]=((x1186.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1187=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1187);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1187);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1189 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1189.valid){
continue;
}
IkReal x1188=x1189.value;
j5array[0]=((-1.0)*x1188);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1188)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1190=(cj5*sj4);
IkReal x1191=(sj4*sj5);
if( IKabs((((r01*x1191))+(((-1.0)*r00*x1190)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1190))+(((-1.0)*r11*x1191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1191))+(((-1.0)*r00*x1190))))+IKsqr((((r10*x1190))+(((-1.0)*r11*x1191))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1191))+(((-1.0)*r00*x1190))), (((r10*x1190))+(((-1.0)*r11*x1191))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1192=IKcos(j0);
IkReal x1193=IKsin(j0);
IkReal x1194=((0.1)*sj5);
IkReal x1195=(sj1*sj2);
IkReal x1196=(cj5*r11);
IkReal x1197=(cj5*r01);
IkReal x1198=(sj4*sj5);
IkReal x1199=(cj1*cj2);
IkReal x1200=((0.392)*x1193);
IkReal x1201=(cj1*x1192);
IkReal x1202=((1.0)*x1193);
IkReal x1203=((1.0)*cj5*sj4);
evalcond[0]=(x1192+(((-1.0)*r10*x1203))+((r11*x1198)));
evalcond[1]=(((r01*x1198))+(((-1.0)*r00*x1203))+(((-1.0)*x1202)));
evalcond[2]=(((r00*sj5))+x1197+(((-1.0)*x1192*x1199))+((x1192*x1195)));
evalcond[3]=((((-1.0)*x1199*x1202))+x1196+((r10*sj5))+((x1193*x1195)));
evalcond[4]=((((-1.0)*r00*x1194))+(((0.425)*x1201))+(((-0.1)*x1197))+(((-0.392)*x1192*x1195))+(((-1.0)*px))+(((0.392)*x1192*x1199))+(((-0.134)*x1193)));
evalcond[5]=((((0.134)*x1192))+(((-0.1)*x1196))+(((-1.0)*r10*x1194))+((x1199*x1200))+(((-1.0)*py))+(((0.425)*cj1*x1193))+(((-1.0)*x1195*x1200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1204=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1204);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1204);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1205=IKPowWithIntegerCheck(r22,-1);
if(!x1205.valid){
continue;
}
sj4array[0]=((-1.0)*(x1205.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1206=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1206);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1206);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1208 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
IkReal x1207=x1208.value;
j5array[0]=((-1.0)*x1207);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1207)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1209=(cj5*sj4);
IkReal x1210=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1209))+((r01*x1210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1209))+(((-1.0)*r11*x1210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1209))+((r01*x1210))))+IKsqr((((r10*x1209))+(((-1.0)*r11*x1210))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1209))+((r01*x1210))), (((r10*x1209))+(((-1.0)*r11*x1210))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1211=IKcos(j0);
IkReal x1212=IKsin(j0);
IkReal x1213=((0.1)*sj5);
IkReal x1214=(sj1*sj2);
IkReal x1215=(cj5*r11);
IkReal x1216=(sj4*sj5);
IkReal x1217=(cj1*cj2);
IkReal x1218=((1.0)*sj5);
IkReal x1219=((1.0)*cj5);
IkReal x1220=((0.425)*cj1);
IkReal x1221=((0.392)*x1212);
IkReal x1222=((0.392)*x1211);
IkReal x1223=((1.0)*x1212);
evalcond[0]=(x1211+((r11*x1216))+(((-1.0)*r10*sj4*x1219)));
evalcond[1]=((((-1.0)*x1223))+((r01*x1216))+(((-1.0)*r00*sj4*x1219)));
evalcond[2]=((((-1.0)*x1211*x1217))+(((-1.0)*r00*x1218))+(((-1.0)*r01*x1219))+((x1211*x1214)));
evalcond[3]=(((x1212*x1214))+(((-1.0)*r10*x1218))+(((-1.0)*x1217*x1223))+(((-1.0)*x1215)));
evalcond[4]=(((x1217*x1222))+((x1211*x1220))+(((-1.0)*x1214*x1222))+(((-0.1)*cj5*r01))+(((-1.0)*r00*x1213))+(((-1.0)*px))+(((-0.134)*x1212)));
evalcond[5]=(((x1217*x1221))+(((-0.1)*x1215))+(((-1.0)*x1214*x1221))+(((-1.0)*py))+(((-1.0)*r10*x1213))+(((0.134)*x1211))+((x1212*x1220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1224=IKPowWithIntegerCheck(r22,-1);
if(!x1224.valid){
continue;
}
CheckValue<IkReal> x1225=IKPowWithIntegerCheck(sj3,-1);
if(!x1225.valid){
continue;
}
sj4array[0]=((x1224.value)*(x1225.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1226=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1226);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1226);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1227=((4.0)*r01);
IkReal x1228=((16.0)*r00);
IkReal x1229=(cj3*sj2);
IkReal x1230=((8.0)*r00);
IkReal x1231=(cj2*cj3);
IkReal x1232=(cj4*r01);
IkReal x1233=((16.0)*cj1);
IkReal x1234=((8.0)*sj1);
IkReal x1235=((16.0)*sj1);
IkReal x1236=((8.0)*cj1);
IkReal x1237=(sj2*sj3);
IkReal x1238=(cj2*sj3);
IkReal x1239=(sj1*x1238);
IkReal x1240=((4.0)*cj4*r00);
IkReal x1241=(((sj1*x1237*x1240))+((x1227*x1239))+((cj1*x1227*x1237))+((sj1*x1227*x1229)));
IkReal x1242=(((cj1*x1229*x1240))+((cj1*x1238*x1240))+((sj1*x1231*x1240))+((cj1*x1227*x1231)));
IkReal x1243=(x1242+(((-1.0)*x1241)));
IkReal x1244=(((x1229*x1232*x1236))+(((-1.0)*cj1*x1230*x1231))+((x1231*x1232*x1234))+((x1232*x1236*x1238))+((cj1*x1230*x1237))+((sj1*x1229*x1230))+(((-1.0)*x1232*x1234*x1237))+((x1230*x1239)));
IkReal x1245=(x1241+(((-1.0)*x1242)));
op[0]=x1243;
op[1]=x1244;
op[2]=x1243;
op[3]=(((x1229*x1232*x1233))+((cj1*x1228*x1237))+((x1231*x1232*x1235))+(((-1.0)*x1232*x1235*x1237))+((sj1*x1228*x1229))+((x1228*x1239))+((x1232*x1233*x1238))+(((-1.0)*cj1*x1228*x1231)));
op[4]=x1245;
op[5]=x1244;
op[6]=x1245;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1246=(cj5*sj4);
IkReal x1247=(sj4*sj5);
if( IKabs((((r01*x1247))+(((-1.0)*r00*x1246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1247))+((r10*x1246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1247))+(((-1.0)*r00*x1246))))+IKsqr(((((-1.0)*r11*x1247))+((r10*x1246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1247))+(((-1.0)*r00*x1246))), ((((-1.0)*r11*x1247))+((r10*x1246))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1248=IKcos(j0);
IkReal x1249=IKsin(j0);
IkReal x1250=((0.1)*sj5);
IkReal x1251=((0.392)*sj1);
IkReal x1252=(cj5*r11);
IkReal x1253=((1.0)*cj3);
IkReal x1254=((0.425)*cj1);
IkReal x1255=((1.0)*cj1);
IkReal x1256=(r11*sj5);
IkReal x1257=(cj5*r01);
IkReal x1258=(r01*sj5);
IkReal x1259=(cj3*cj4);
IkReal x1260=(r00*sj5);
IkReal x1261=((1.0)*sj1);
IkReal x1262=(r10*sj5);
IkReal x1263=(sj2*x1249);
IkReal x1264=(cj4*cj5*r00);
IkReal x1265=(sj2*x1248);
IkReal x1266=(cj4*cj5*r10);
IkReal x1267=((1.0)*cj4*sj3);
IkReal x1268=((0.392)*cj1*cj2);
IkReal x1269=(cj2*x1248);
IkReal x1270=((1.0)*cj5*sj4);
IkReal x1271=(cj2*x1249);
evalcond[0]=(x1248+((sj4*x1256))+(((-1.0)*r10*x1270)));
evalcond[1]=((((-1.0)*r00*x1270))+((sj4*x1258))+(((-1.0)*x1249)));
evalcond[2]=(((x1258*x1259))+(((-1.0)*x1253*x1264))+((sj1*x1265))+(((-1.0)*x1255*x1269))+((sj3*x1257))+((sj3*x1260)));
evalcond[3]=((((-1.0)*x1253*x1266))+(((-1.0)*x1255*x1271))+((sj1*x1263))+((x1256*x1259))+((sj3*x1252))+((sj3*x1262)));
evalcond[4]=((((-1.0)*x1258*x1267))+(((-1.0)*x1261*x1269))+((cj3*x1260))+((cj3*x1257))+(((-1.0)*x1255*x1265))+((sj3*x1264)));
evalcond[5]=((((-1.0)*x1261*x1271))+((cj3*x1262))+((cj3*x1252))+(((-1.0)*x1255*x1263))+(((-1.0)*x1256*x1267))+((sj3*x1266)));
evalcond[6]=((((-1.0)*r00*x1250))+(((-1.0)*px))+(((-0.134)*x1249))+(((-1.0)*x1251*x1265))+(((-0.1)*x1257))+((x1248*x1254))+((x1248*x1268)));
evalcond[7]=((((-1.0)*py))+(((-1.0)*x1251*x1263))+(((0.134)*x1248))+(((-0.1)*x1252))+((x1249*x1254))+((x1249*x1268))+(((-1.0)*r10*x1250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(cj3,-1);
if(!x1272.valid){
continue;
}
CheckValue<IkReal> x1273=IKPowWithIntegerCheck(r22,-1);
if(!x1273.valid){
continue;
}
sj4array[0]=((-1.0)*(x1272.value)*(x1273.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1274=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1274);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1274);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1275=((4.0)*r01);
IkReal x1276=((16.0)*r00);
IkReal x1277=(cj3*sj2);
IkReal x1278=((8.0)*r00);
IkReal x1279=(cj2*cj3);
IkReal x1280=(cj4*r01);
IkReal x1281=((16.0)*cj1);
IkReal x1282=((8.0)*sj1);
IkReal x1283=((16.0)*sj1);
IkReal x1284=((8.0)*cj1);
IkReal x1285=(sj2*sj3);
IkReal x1286=(cj2*sj3);
IkReal x1287=(sj1*x1286);
IkReal x1288=((4.0)*cj4*r00);
IkReal x1289=(((sj1*x1275*x1277))+((x1275*x1287))+((sj1*x1285*x1288))+((cj1*x1275*x1285)));
IkReal x1290=(((cj1*x1277*x1288))+((cj1*x1275*x1279))+((cj1*x1286*x1288))+((sj1*x1279*x1288)));
IkReal x1291=(x1290+(((-1.0)*x1289)));
IkReal x1292=(((sj1*x1277*x1278))+((x1279*x1280*x1282))+((x1278*x1287))+(((-1.0)*cj1*x1278*x1279))+((x1280*x1284*x1286))+((cj1*x1278*x1285))+((x1277*x1280*x1284))+(((-1.0)*x1280*x1282*x1285)));
IkReal x1293=(x1289+(((-1.0)*x1290)));
op[0]=x1291;
op[1]=x1292;
op[2]=x1291;
op[3]=(((x1279*x1280*x1283))+((x1280*x1281*x1286))+((x1276*x1287))+((cj1*x1276*x1285))+(((-1.0)*cj1*x1276*x1279))+(((-1.0)*x1280*x1283*x1285))+((x1277*x1280*x1281))+((sj1*x1276*x1277)));
op[4]=x1293;
op[5]=x1292;
op[6]=x1293;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1294=(cj5*sj4);
IkReal x1295=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1294))+((r01*x1295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1294))+(((-1.0)*r11*x1295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1294))+((r01*x1295))))+IKsqr((((r10*x1294))+(((-1.0)*r11*x1295))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1294))+((r01*x1295))), (((r10*x1294))+(((-1.0)*r11*x1295))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1296=IKcos(j0);
IkReal x1297=IKsin(j0);
IkReal x1298=((0.1)*sj5);
IkReal x1299=((0.392)*sj1);
IkReal x1300=(cj5*r11);
IkReal x1301=((1.0)*cj3);
IkReal x1302=((0.425)*cj1);
IkReal x1303=((1.0)*cj1);
IkReal x1304=(r11*sj5);
IkReal x1305=(cj5*r01);
IkReal x1306=(r01*sj5);
IkReal x1307=(cj3*cj4);
IkReal x1308=(r00*sj5);
IkReal x1309=((1.0)*sj1);
IkReal x1310=(r10*sj5);
IkReal x1311=(sj2*x1297);
IkReal x1312=(cj4*cj5*r00);
IkReal x1313=(sj2*x1296);
IkReal x1314=(cj4*cj5*r10);
IkReal x1315=((1.0)*cj4*sj3);
IkReal x1316=((0.392)*cj1*cj2);
IkReal x1317=(cj2*x1296);
IkReal x1318=((1.0)*cj5*sj4);
IkReal x1319=(cj2*x1297);
evalcond[0]=(x1296+((sj4*x1304))+(((-1.0)*r10*x1318)));
evalcond[1]=((((-1.0)*r00*x1318))+(((-1.0)*x1297))+((sj4*x1306)));
evalcond[2]=(((x1306*x1307))+((sj3*x1308))+((sj3*x1305))+(((-1.0)*x1303*x1317))+((sj1*x1313))+(((-1.0)*x1301*x1312)));
evalcond[3]=(((sj3*x1310))+((sj3*x1300))+(((-1.0)*x1303*x1319))+((x1304*x1307))+((sj1*x1311))+(((-1.0)*x1301*x1314)));
evalcond[4]=(((sj3*x1312))+(((-1.0)*x1306*x1315))+(((-1.0)*x1303*x1313))+((cj3*x1305))+((cj3*x1308))+(((-1.0)*x1309*x1317)));
evalcond[5]=((((-1.0)*x1304*x1315))+((sj3*x1314))+((cj3*x1310))+(((-1.0)*x1303*x1311))+((cj3*x1300))+(((-1.0)*x1309*x1319)));
evalcond[6]=((((-1.0)*r00*x1298))+(((-0.134)*x1297))+(((-1.0)*x1299*x1313))+(((-1.0)*px))+(((-0.1)*x1305))+((x1296*x1316))+((x1296*x1302)));
evalcond[7]=((((0.134)*x1296))+(((-1.0)*x1299*x1311))+(((-1.0)*py))+(((-0.1)*x1300))+((x1297*x1316))+((x1297*x1302))+(((-1.0)*r10*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1322 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1322.valid){
continue;
}
IkReal x1320=((1.0)*(x1322.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1323=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1323.valid){
continue;
}
if( (((-1.0)*(x1323.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1323.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1321=((-1.0)*(IKasin(((-1.0)*(x1323.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1321))+(((-1.0)*x1320)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1320))+(((1.0)*x1321)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1324=cj5*cj5;
IkReal x1325=r21*r21;
IkReal x1326=(sj3*x1324);
IkReal x1327=(((sj3*(r22*r22)))+((sj3*x1325))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1325*x1326))+((x1326*(r20*r20))));
j4eval[0]=x1327;
j4eval[1]=IKsign(x1327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1328=cj5*cj5;
IkReal x1329=r21*r21;
IkReal x1330=((1.0)*cj3);
IkReal x1331=(cj3*x1328);
IkReal x1332=(((x1329*x1331))+(((-1.0)*x1328*x1330*(r20*r20)))+(((-1.0)*x1329*x1330))+(((-1.0)*x1330*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1332;
j4eval[1]=IKsign(x1332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1333=cj1*cj1;
IkReal x1334=cj2*cj2;
IkReal x1335=(cj2*x1333);
IkReal x1336=(cj1*sj1*sj2);
IkReal x1337=(x1333*x1334);
j0eval[0]=((6.36549089425466)+x1333+(((12.3585920403546)*x1335))+(((-5.69949185861059)*x1334))+(((-11.3989837172212)*cj2*x1336))+(((11.3989837172212)*x1337))+(((-12.3585920403546)*x1336)));
j0eval[1]=IKsign(((42905.0)+(((76832.0)*x1337))+(((-83300.0)*x1336))+(((-38416.0)*x1334))+(((6740.25)*x1333))+(((-76832.0)*cj2*x1336))+(((83300.0)*x1335))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1338=((1.0)*cj5);
IkReal x1339=((1.0)*sj5);
IkReal x1340=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1340;
j0eval[1]=((IKabs(((((-1.0)*r10*x1339))+(((-1.0)*r11*x1338)))))+(IKabs(((((-1.0)*r00*x1339))+(((-1.0)*r01*x1338))))));
j0eval[2]=IKsign(x1340);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1341=cj5*cj5;
IkReal x1342=r21*r21;
IkReal x1343=(sj1*sj2);
IkReal x1344=(r21*sj5);
IkReal x1345=(cj5*r20);
IkReal x1346=(cj1*cj2);
IkReal x1347=(x1342+(((-2.0)*x1344*x1345))+(r22*r22)+(((-1.0)*x1341*x1342))+((x1341*(r20*r20))));
j4eval[0]=x1347;
j4eval[1]=IKsign(x1347);
j4eval[2]=((IKabs((((r22*x1343))+(((-1.0)*r22*x1346)))))+(IKabs((((x1345*x1346))+(((-1.0)*x1344*x1346))+(((-1.0)*x1343*x1345))+((x1343*x1344))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1348=IKcos(j0);
IkReal x1349=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x1349))+(((0.425)*x1348)));
evalcond[1]=((((0.134)*x1348))+(((-1.0)*py))+(((0.425)*x1349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1350=((1.0)*cj5);
IkReal x1351=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1350)));
j4eval[0]=x1351;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1350))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1352=((1.0)*cj5);
IkReal x1353=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1352)));
j4eval[0]=x1353;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1352))))));
j4eval[2]=IKsign(x1353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1354=cj5*cj5;
IkReal x1355=((1.0)*sj5);
IkReal x1356=(cj5*r20);
IkReal x1357=(r11*r21);
IkReal x1358=(x1357+((r10*r20*x1354))+(((-1.0)*cj5*r10*r21*x1355))+((r12*r22))+(((-1.0)*r11*x1355*x1356))+(((-1.0)*x1354*x1357)));
j4eval[0]=x1358;
j4eval[1]=IKsign(x1358);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1355))+((cj0*x1356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1359=cj5*cj5;
IkReal x1360=((1.0)*sj5);
IkReal x1361=(cj5*r20);
IkReal x1362=(r11*r21);
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1360))+((cj0*x1361)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
CheckValue<IkReal> x1364=IKPowWithIntegerCheck(IKsign((x1362+((r10*r20*x1359))+((r12*r22))+(((-1.0)*x1359*x1362))+(((-1.0)*cj5*r10*r21*x1360))+(((-1.0)*r11*x1360*x1361)))),-1);
if(!x1364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1363.value)+(((1.5707963267949)*(x1364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1365=IKsin(j4);
IkReal x1366=IKcos(j4);
IkReal x1367=((1.0)*sj0);
IkReal x1368=(cj5*r00);
IkReal x1369=(r11*sj5);
IkReal x1370=(cj5*r10);
IkReal x1371=(r21*sj5);
IkReal x1372=(cj5*r20);
IkReal x1373=(r01*sj5);
IkReal x1374=((1.0)*x1366);
IkReal x1375=((1.0)*x1365);
evalcond[0]=(((x1365*x1371))+(((-1.0)*r22*x1374))+(((-1.0)*x1372*x1375)));
evalcond[1]=((((-1.0)*x1371*x1374))+((x1366*x1372))+(((-1.0)*r22*x1375)));
evalcond[2]=(cj0+(((-1.0)*x1370*x1375))+((x1365*x1369))+(((-1.0)*r12*x1374)));
evalcond[3]=(((x1365*x1373))+(((-1.0)*r02*x1374))+(((-1.0)*x1368*x1375))+(((-1.0)*x1367)));
evalcond[4]=(((x1366*x1368))+(((-1.0)*r02*x1375))+(((-1.0)*x1373*x1374))+(((-1.0)*cj0)));
evalcond[5]=(((x1366*x1370))+(((-1.0)*r12*x1375))+(((-1.0)*x1369*x1374))+(((-1.0)*x1367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1376=((1.0)*cj5);
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1376))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
CheckValue<IkReal> x1378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1376)))),-1);
if(!x1378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1377.value)+(((1.5707963267949)*(x1378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1379=IKsin(j4);
IkReal x1380=IKcos(j4);
IkReal x1381=((1.0)*sj0);
IkReal x1382=(cj5*r00);
IkReal x1383=(r11*sj5);
IkReal x1384=(cj5*r10);
IkReal x1385=(r21*sj5);
IkReal x1386=(cj5*r20);
IkReal x1387=(r01*sj5);
IkReal x1388=((1.0)*x1380);
IkReal x1389=((1.0)*x1379);
evalcond[0]=(((x1379*x1385))+(((-1.0)*r22*x1388))+(((-1.0)*x1386*x1389)));
evalcond[1]=(((x1380*x1386))+(((-1.0)*r22*x1389))+(((-1.0)*x1385*x1388)));
evalcond[2]=((((-1.0)*r12*x1388))+cj0+(((-1.0)*x1384*x1389))+((x1379*x1383)));
evalcond[3]=((((-1.0)*x1381))+(((-1.0)*r02*x1388))+(((-1.0)*x1382*x1389))+((x1379*x1387)));
evalcond[4]=(((x1380*x1382))+(((-1.0)*r02*x1389))+(((-1.0)*x1387*x1388))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1389))+(((-1.0)*x1381))+((x1380*x1384))+(((-1.0)*x1383*x1388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1390=((1.0)*cj5);
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1390))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1390)))),-1);
if(!x1392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1391.value)+(((1.5707963267949)*(x1392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1393=IKsin(j4);
IkReal x1394=IKcos(j4);
IkReal x1395=((1.0)*sj0);
IkReal x1396=(cj5*r00);
IkReal x1397=(r11*sj5);
IkReal x1398=(cj5*r10);
IkReal x1399=(r21*sj5);
IkReal x1400=(cj5*r20);
IkReal x1401=(r01*sj5);
IkReal x1402=((1.0)*x1394);
IkReal x1403=((1.0)*x1393);
evalcond[0]=(((x1393*x1399))+(((-1.0)*r22*x1402))+(((-1.0)*x1400*x1403)));
evalcond[1]=((((-1.0)*x1399*x1402))+(((-1.0)*r22*x1403))+((x1394*x1400)));
evalcond[2]=((((-1.0)*r12*x1402))+((x1393*x1397))+cj0+(((-1.0)*x1398*x1403)));
evalcond[3]=(((x1393*x1401))+(((-1.0)*r02*x1402))+(((-1.0)*x1396*x1403))+(((-1.0)*x1395)));
evalcond[4]=(((x1394*x1396))+(((-1.0)*r02*x1403))+(((-1.0)*x1401*x1402))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1403))+((x1394*x1398))+(((-1.0)*x1397*x1402))+(((-1.0)*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1404=IKcos(j0);
IkReal x1405=IKsin(j0);
evalcond[0]=((((-0.134)*x1405))+(((-1.0)*px))+(((0.425)*x1404)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1405))+(((0.134)*x1404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1406=((1.0)*cj5);
IkReal x1407=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1406)));
j4eval[0]=x1407;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1406))))));
j4eval[2]=IKsign(x1407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1408=cj5*cj5;
IkReal x1409=((1.0)*r21);
IkReal x1410=(cj5*sj5);
IkReal x1411=((1.0)*r20);
IkReal x1412=((((-1.0)*r01*x1408*x1409))+((r01*r21))+(((-1.0)*r01*x1410*x1411))+(((-1.0)*r00*x1409*x1410))+((r00*r20*x1408))+((r02*r22)));
j4eval[0]=x1412;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1411))))));
j4eval[2]=IKsign(x1412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1413=cj5*cj5;
IkReal x1414=(r21*sj5);
IkReal x1415=(r11*r21);
IkReal x1416=((1.0)*cj5*r20);
IkReal x1417=((((-1.0)*cj5*r10*x1414))+((r12*r22))+(((-1.0)*r11*sj5*x1416))+((r10*r20*x1413))+x1415+(((-1.0)*x1413*x1415)));
j4eval[0]=x1417;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1416))+((sj0*x1414)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1418=cj5*cj5;
IkReal x1419=(r21*sj5);
IkReal x1420=(r11*r21);
IkReal x1421=((1.0)*cj5*r20);
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1421))+(((-1.0)*x1418*x1420))+(((-1.0)*cj5*r10*x1419))+((r12*r22))+((r10*r20*x1418))+x1420)),-1);
if(!x1422.valid){
continue;
}
CheckValue<IkReal> x1423 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1421))+((sj0*x1419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1422.value)))+(x1423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1424=IKsin(j4);
IkReal x1425=IKcos(j4);
IkReal x1426=(r11*sj5);
IkReal x1427=(cj5*r00);
IkReal x1428=(cj5*r10);
IkReal x1429=(r21*sj5);
IkReal x1430=(cj5*r20);
IkReal x1431=(r01*sj5);
IkReal x1432=((1.0)*x1425);
IkReal x1433=((1.0)*x1424);
evalcond[0]=(((x1424*x1429))+(((-1.0)*r22*x1432))+(((-1.0)*x1430*x1433)));
evalcond[1]=((((-1.0)*x1429*x1432))+(((-1.0)*r22*x1433))+((x1425*x1430)));
evalcond[2]=(((x1424*x1426))+(((-1.0)*r12*x1432))+cj0+(((-1.0)*x1428*x1433)));
evalcond[3]=(((x1425*x1427))+cj0+(((-1.0)*x1431*x1432))+(((-1.0)*r02*x1433)));
evalcond[4]=(((x1425*x1428))+(((-1.0)*r12*x1433))+sj0+(((-1.0)*x1426*x1432)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1432))+((x1424*x1431))+(((-1.0)*x1427*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1434=cj5*cj5;
IkReal x1435=((1.0)*r21);
IkReal x1436=(cj5*sj5);
IkReal x1437=((1.0)*r20);
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1435*x1436))+((r01*r21))+(((-1.0)*r01*x1436*x1437))+((r00*r20*x1434))+((r02*r22))+(((-1.0)*r01*x1434*x1435)))),-1);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1438.value)))+(x1439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1440=IKsin(j4);
IkReal x1441=IKcos(j4);
IkReal x1442=(r11*sj5);
IkReal x1443=(cj5*r00);
IkReal x1444=(cj5*r10);
IkReal x1445=(r21*sj5);
IkReal x1446=(cj5*r20);
IkReal x1447=(r01*sj5);
IkReal x1448=((1.0)*x1441);
IkReal x1449=((1.0)*x1440);
evalcond[0]=((((-1.0)*x1446*x1449))+(((-1.0)*r22*x1448))+((x1440*x1445)));
evalcond[1]=((((-1.0)*r22*x1449))+(((-1.0)*x1445*x1448))+((x1441*x1446)));
evalcond[2]=(cj0+((x1440*x1442))+(((-1.0)*r12*x1448))+(((-1.0)*x1444*x1449)));
evalcond[3]=(cj0+((x1441*x1443))+(((-1.0)*x1447*x1448))+(((-1.0)*r02*x1449)));
evalcond[4]=(sj0+((x1441*x1444))+(((-1.0)*r12*x1449))+(((-1.0)*x1442*x1448)));
evalcond[5]=((((-1.0)*sj0))+((x1440*x1447))+(((-1.0)*r02*x1448))+(((-1.0)*x1443*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1450=((1.0)*cj5);
CheckValue<IkReal> x1451 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1450))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1451.valid){
continue;
}
CheckValue<IkReal> x1452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1450)))),-1);
if(!x1452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1451.value)+(((1.5707963267949)*(x1452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1453=IKsin(j4);
IkReal x1454=IKcos(j4);
IkReal x1455=(r11*sj5);
IkReal x1456=(cj5*r00);
IkReal x1457=(cj5*r10);
IkReal x1458=(r21*sj5);
IkReal x1459=(cj5*r20);
IkReal x1460=(r01*sj5);
IkReal x1461=((1.0)*x1454);
IkReal x1462=((1.0)*x1453);
evalcond[0]=((((-1.0)*x1459*x1462))+(((-1.0)*r22*x1461))+((x1453*x1458)));
evalcond[1]=((((-1.0)*x1458*x1461))+((x1454*x1459))+(((-1.0)*r22*x1462)));
evalcond[2]=(cj0+(((-1.0)*x1457*x1462))+(((-1.0)*r12*x1461))+((x1453*x1455)));
evalcond[3]=((((-1.0)*r02*x1462))+cj0+((x1454*x1456))+(((-1.0)*x1460*x1461)));
evalcond[4]=(sj0+((x1454*x1457))+(((-1.0)*x1455*x1461))+(((-1.0)*r12*x1462)));
evalcond[5]=(((x1453*x1460))+(((-1.0)*sj0))+(((-1.0)*r02*x1461))+(((-1.0)*x1456*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1463=((1.0)*cj5);
IkReal x1464=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1463)));
j4eval[0]=x1464;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1463)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1464);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1465=((1.0)*cj5);
IkReal x1466=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1465)));
j4eval[0]=x1466;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1465))))));
j4eval[2]=IKsign(x1466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1467=cj5*cj5;
IkReal x1468=((1.0)*sj5);
IkReal x1469=(cj5*r20);
IkReal x1470=(r11*r21);
IkReal x1471=((((-1.0)*x1467*x1470))+(((-1.0)*cj5*r10*r21*x1468))+((r12*r22))+((r10*r20*x1467))+x1470+(((-1.0)*r11*x1468*x1469)));
j4eval[0]=x1471;
j4eval[1]=IKsign(x1471);
j4eval[2]=((IKabs((((cj0*x1469))+(((-1.0)*cj0*r21*x1468)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1472=cj5*cj5;
IkReal x1473=((1.0)*sj5);
IkReal x1474=(cj5*r20);
IkReal x1475=(r11*r21);
CheckValue<IkReal> x1476=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1473))+((r12*r22))+(((-1.0)*r11*x1473*x1474))+x1475+((r10*r20*x1472))+(((-1.0)*x1472*x1475)))),-1);
if(!x1476.valid){
continue;
}
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1473))+((cj0*x1474)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1476.value)))+(x1477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1478=IKsin(j4);
IkReal x1479=IKcos(j4);
IkReal x1480=((1.0)*sj0);
IkReal x1481=(cj5*r00);
IkReal x1482=(r11*sj5);
IkReal x1483=(cj5*r10);
IkReal x1484=(r21*sj5);
IkReal x1485=(cj5*r20);
IkReal x1486=(r01*sj5);
IkReal x1487=((1.0)*x1479);
IkReal x1488=((1.0)*x1478);
evalcond[0]=((((-1.0)*x1485*x1488))+(((-1.0)*r22*x1487))+((x1478*x1484)));
evalcond[1]=((((-1.0)*x1484*x1487))+(((-1.0)*r22*x1488))+((x1479*x1485)));
evalcond[2]=(cj0+(((-1.0)*r12*x1487))+(((-1.0)*x1483*x1488))+((x1478*x1482)));
evalcond[3]=((((-1.0)*x1480))+(((-1.0)*x1481*x1488))+(((-1.0)*r02*x1487))+((x1478*x1486)));
evalcond[4]=((((-1.0)*x1486*x1487))+(((-1.0)*r02*x1488))+(((-1.0)*cj0))+((x1479*x1481)));
evalcond[5]=((((-1.0)*x1482*x1487))+(((-1.0)*r12*x1488))+(((-1.0)*x1480))+((x1479*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1489=((1.0)*cj5);
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1489))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1489))+(((-1.0)*r10*sj5)))),-1);
if(!x1491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1490.value)+(((1.5707963267949)*(x1491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1492=IKsin(j4);
IkReal x1493=IKcos(j4);
IkReal x1494=((1.0)*sj0);
IkReal x1495=(cj5*r00);
IkReal x1496=(r11*sj5);
IkReal x1497=(cj5*r10);
IkReal x1498=(r21*sj5);
IkReal x1499=(cj5*r20);
IkReal x1500=(r01*sj5);
IkReal x1501=((1.0)*x1493);
IkReal x1502=((1.0)*x1492);
evalcond[0]=((((-1.0)*x1499*x1502))+(((-1.0)*r22*x1501))+((x1492*x1498)));
evalcond[1]=((((-1.0)*x1498*x1501))+(((-1.0)*r22*x1502))+((x1493*x1499)));
evalcond[2]=(cj0+((x1492*x1496))+(((-1.0)*x1497*x1502))+(((-1.0)*r12*x1501)));
evalcond[3]=(((x1492*x1500))+(((-1.0)*x1494))+(((-1.0)*r02*x1501))+(((-1.0)*x1495*x1502)));
evalcond[4]=((((-1.0)*r02*x1502))+((x1493*x1495))+(((-1.0)*x1500*x1501))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1494))+((x1493*x1497))+(((-1.0)*x1496*x1501))+(((-1.0)*r12*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1503=((1.0)*cj5);
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1503))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
CheckValue<IkReal> x1505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1503))+(((-1.0)*r00*sj5)))),-1);
if(!x1505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1504.value)+(((1.5707963267949)*(x1505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1506=IKsin(j4);
IkReal x1507=IKcos(j4);
IkReal x1508=((1.0)*sj0);
IkReal x1509=(cj5*r00);
IkReal x1510=(r11*sj5);
IkReal x1511=(cj5*r10);
IkReal x1512=(r21*sj5);
IkReal x1513=(cj5*r20);
IkReal x1514=(r01*sj5);
IkReal x1515=((1.0)*x1507);
IkReal x1516=((1.0)*x1506);
evalcond[0]=((((-1.0)*r22*x1515))+(((-1.0)*x1513*x1516))+((x1506*x1512)));
evalcond[1]=((((-1.0)*r22*x1516))+((x1507*x1513))+(((-1.0)*x1512*x1515)));
evalcond[2]=(cj0+((x1506*x1510))+(((-1.0)*x1511*x1516))+(((-1.0)*r12*x1515)));
evalcond[3]=((((-1.0)*x1508))+((x1506*x1514))+(((-1.0)*r02*x1515))+(((-1.0)*x1509*x1516)));
evalcond[4]=(((x1507*x1509))+(((-1.0)*r02*x1516))+(((-1.0)*x1514*x1515))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1508))+((x1507*x1511))+(((-1.0)*x1510*x1515))+(((-1.0)*r12*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1517=((1.0)*cj5);
IkReal x1518=((((-1.0)*r01*x1517))+(((-1.0)*r00*sj5)));
j4eval[0]=x1518;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1517))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1519=cj5*cj5;
IkReal x1520=((1.0)*r21);
IkReal x1521=(cj5*sj5);
IkReal x1522=((1.0)*r20);
IkReal x1523=((((-1.0)*r01*x1521*x1522))+((r01*r21))+(((-1.0)*r01*x1519*x1520))+(((-1.0)*r00*x1520*x1521))+((r02*r22))+((r00*r20*x1519)));
j4eval[0]=x1523;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1522)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1524=cj5*cj5;
IkReal x1525=(r21*sj5);
IkReal x1526=(r11*r21);
IkReal x1527=((1.0)*cj5*r20);
IkReal x1528=((((-1.0)*x1524*x1526))+((r12*r22))+(((-1.0)*r11*sj5*x1527))+x1526+(((-1.0)*cj5*r10*x1525))+((r10*r20*x1524)));
j4eval[0]=x1528;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1527))+((sj0*x1525))))));
j4eval[2]=IKsign(x1528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1529=cj5*cj5;
IkReal x1530=(r21*sj5);
IkReal x1531=(r11*r21);
IkReal x1532=((1.0)*cj5*r20);
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1529*x1531))+((r12*r22))+x1531+(((-1.0)*cj5*r10*x1530))+(((-1.0)*r11*sj5*x1532))+((r10*r20*x1529)))),-1);
if(!x1533.valid){
continue;
}
CheckValue<IkReal> x1534 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1532))+((sj0*x1530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1533.value)))+(x1534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1535=IKsin(j4);
IkReal x1536=IKcos(j4);
IkReal x1537=(r11*sj5);
IkReal x1538=(cj5*r00);
IkReal x1539=(cj5*r10);
IkReal x1540=(r21*sj5);
IkReal x1541=(cj5*r20);
IkReal x1542=(r01*sj5);
IkReal x1543=((1.0)*x1536);
IkReal x1544=((1.0)*x1535);
evalcond[0]=((((-1.0)*r22*x1543))+((x1535*x1540))+(((-1.0)*x1541*x1544)));
evalcond[1]=(((x1536*x1541))+(((-1.0)*x1540*x1543))+(((-1.0)*r22*x1544)));
evalcond[2]=(cj0+((x1535*x1537))+(((-1.0)*x1539*x1544))+(((-1.0)*r12*x1543)));
evalcond[3]=((((-1.0)*r02*x1544))+cj0+((x1536*x1538))+(((-1.0)*x1542*x1543)));
evalcond[4]=(sj0+((x1536*x1539))+(((-1.0)*x1537*x1543))+(((-1.0)*r12*x1544)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1543))+((x1535*x1542))+(((-1.0)*x1538*x1544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1545=cj5*cj5;
IkReal x1546=((1.0)*r21);
IkReal x1547=(cj5*sj5);
IkReal x1548=((1.0)*r20);
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1546*x1547))+((r00*r20*x1545))+(((-1.0)*r01*x1545*x1546))+((r02*r22))+(((-1.0)*r01*x1547*x1548)))),-1);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1549.value)))+(x1550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1551=IKsin(j4);
IkReal x1552=IKcos(j4);
IkReal x1553=(r11*sj5);
IkReal x1554=(cj5*r00);
IkReal x1555=(cj5*r10);
IkReal x1556=(r21*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=(r01*sj5);
IkReal x1559=((1.0)*x1552);
IkReal x1560=((1.0)*x1551);
evalcond[0]=(((x1551*x1556))+(((-1.0)*r22*x1559))+(((-1.0)*x1557*x1560)));
evalcond[1]=(((x1552*x1557))+(((-1.0)*r22*x1560))+(((-1.0)*x1556*x1559)));
evalcond[2]=(((x1551*x1553))+cj0+(((-1.0)*x1555*x1560))+(((-1.0)*r12*x1559)));
evalcond[3]=((((-1.0)*x1558*x1559))+(((-1.0)*r02*x1560))+cj0+((x1552*x1554)));
evalcond[4]=(sj0+((x1552*x1555))+(((-1.0)*x1553*x1559))+(((-1.0)*r12*x1560)));
evalcond[5]=(((x1551*x1558))+(((-1.0)*sj0))+(((-1.0)*r02*x1559))+(((-1.0)*x1554*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1561=((1.0)*cj5);
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1561)))),-1);
if(!x1563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1562.value)+(((1.5707963267949)*(x1563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1564=IKsin(j4);
IkReal x1565=IKcos(j4);
IkReal x1566=(r11*sj5);
IkReal x1567=(cj5*r00);
IkReal x1568=(cj5*r10);
IkReal x1569=(r21*sj5);
IkReal x1570=(cj5*r20);
IkReal x1571=(r01*sj5);
IkReal x1572=((1.0)*x1565);
IkReal x1573=((1.0)*x1564);
evalcond[0]=((((-1.0)*x1570*x1573))+(((-1.0)*r22*x1572))+((x1564*x1569)));
evalcond[1]=((((-1.0)*r22*x1573))+(((-1.0)*x1569*x1572))+((x1565*x1570)));
evalcond[2]=(cj0+(((-1.0)*x1568*x1573))+(((-1.0)*r12*x1572))+((x1564*x1566)));
evalcond[3]=((((-1.0)*r02*x1573))+(((-1.0)*x1571*x1572))+cj0+((x1565*x1567)));
evalcond[4]=(sj0+(((-1.0)*x1566*x1572))+(((-1.0)*r12*x1573))+((x1565*x1568)));
evalcond[5]=((((-1.0)*r02*x1572))+(((-1.0)*sj0))+(((-1.0)*x1567*x1573))+((x1564*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1574=IKcos(j0);
IkReal x1575=IKsin(j0);
evalcond[0]=((((-0.425)*x1574))+(((-0.134)*x1575))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1575))+(((0.134)*x1574))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1576=((1.0)*cj5);
IkReal x1577=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1576)));
j4eval[0]=x1577;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1576))))));
j4eval[2]=IKsign(x1577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1578=cj5*cj5;
IkReal x1579=((1.0)*r21);
IkReal x1580=(cj5*sj5);
IkReal x1581=((1.0)*r20);
IkReal x1582=((((-1.0)*r01*x1578*x1579))+((r01*r21))+(((-1.0)*r00*x1579*x1580))+((r00*r20*x1578))+(((-1.0)*r01*x1580*x1581))+((r02*r22)));
j4eval[0]=x1582;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1581))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1583=cj5*cj5;
IkReal x1584=(r21*sj5);
IkReal x1585=(r11*r21);
IkReal x1586=((1.0)*cj5*r20);
IkReal x1587=((((-1.0)*cj5*r10*x1584))+((r10*r20*x1583))+(((-1.0)*x1583*x1585))+((r12*r22))+x1585+(((-1.0)*r11*sj5*x1586)));
j4eval[0]=x1587;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1586))+((sj0*x1584))))));
j4eval[2]=IKsign(x1587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1588=cj5*cj5;
IkReal x1589=(r21*sj5);
IkReal x1590=(r11*r21);
IkReal x1591=((1.0)*cj5*r20);
CheckValue<IkReal> x1592 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1591))+((sj0*x1589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1592.valid){
continue;
}
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1589))+((r10*r20*x1588))+((r12*r22))+x1590+(((-1.0)*r11*sj5*x1591))+(((-1.0)*x1588*x1590)))),-1);
if(!x1593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1592.value)+(((1.5707963267949)*(x1593.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1594=IKsin(j4);
IkReal x1595=IKcos(j4);
IkReal x1596=(r11*sj5);
IkReal x1597=(cj5*r00);
IkReal x1598=(cj5*r10);
IkReal x1599=(r21*sj5);
IkReal x1600=(cj5*r20);
IkReal x1601=(r01*sj5);
IkReal x1602=((1.0)*x1595);
IkReal x1603=((1.0)*x1594);
evalcond[0]=(((x1594*x1599))+(((-1.0)*r22*x1602))+(((-1.0)*x1600*x1603)));
evalcond[1]=(((x1595*x1600))+(((-1.0)*r22*x1603))+(((-1.0)*x1599*x1602)));
evalcond[2]=(cj0+((x1594*x1596))+(((-1.0)*r12*x1602))+(((-1.0)*x1598*x1603)));
evalcond[3]=(cj0+(((-1.0)*x1601*x1602))+(((-1.0)*r02*x1603))+((x1595*x1597)));
evalcond[4]=(sj0+(((-1.0)*x1596*x1602))+((x1595*x1598))+(((-1.0)*r12*x1603)));
evalcond[5]=((((-1.0)*sj0))+((x1594*x1601))+(((-1.0)*x1597*x1603))+(((-1.0)*r02*x1602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1604=cj5*cj5;
IkReal x1605=((1.0)*r21);
IkReal x1606=(cj5*sj5);
IkReal x1607=((1.0)*r20);
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign((((r00*r20*x1604))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x1605*x1606))+(((-1.0)*r01*x1606*x1607))+(((-1.0)*r01*x1604*x1605)))),-1);
if(!x1608.valid){
continue;
}
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1608.value)))+(x1609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1610=IKsin(j4);
IkReal x1611=IKcos(j4);
IkReal x1612=(r11*sj5);
IkReal x1613=(cj5*r00);
IkReal x1614=(cj5*r10);
IkReal x1615=(r21*sj5);
IkReal x1616=(cj5*r20);
IkReal x1617=(r01*sj5);
IkReal x1618=((1.0)*x1611);
IkReal x1619=((1.0)*x1610);
evalcond[0]=((((-1.0)*x1616*x1619))+(((-1.0)*r22*x1618))+((x1610*x1615)));
evalcond[1]=((((-1.0)*r22*x1619))+((x1611*x1616))+(((-1.0)*x1615*x1618)));
evalcond[2]=((((-1.0)*r12*x1618))+cj0+(((-1.0)*x1614*x1619))+((x1610*x1612)));
evalcond[3]=(cj0+(((-1.0)*r02*x1619))+(((-1.0)*x1617*x1618))+((x1611*x1613)));
evalcond[4]=((((-1.0)*r12*x1619))+sj0+(((-1.0)*x1612*x1618))+((x1611*x1614)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1618))+(((-1.0)*x1613*x1619))+((x1610*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1620=((1.0)*cj5);
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
CheckValue<IkReal> x1622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1620)))),-1);
if(!x1622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1621.value)+(((1.5707963267949)*(x1622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1623=IKsin(j4);
IkReal x1624=IKcos(j4);
IkReal x1625=(r11*sj5);
IkReal x1626=(cj5*r00);
IkReal x1627=(cj5*r10);
IkReal x1628=(r21*sj5);
IkReal x1629=(cj5*r20);
IkReal x1630=(r01*sj5);
IkReal x1631=((1.0)*x1624);
IkReal x1632=((1.0)*x1623);
evalcond[0]=((((-1.0)*r22*x1631))+((x1623*x1628))+(((-1.0)*x1629*x1632)));
evalcond[1]=((((-1.0)*r22*x1632))+(((-1.0)*x1628*x1631))+((x1624*x1629)));
evalcond[2]=(cj0+(((-1.0)*r12*x1631))+((x1623*x1625))+(((-1.0)*x1627*x1632)));
evalcond[3]=(cj0+(((-1.0)*x1630*x1631))+((x1624*x1626))+(((-1.0)*r02*x1632)));
evalcond[4]=(sj0+(((-1.0)*r12*x1632))+(((-1.0)*x1625*x1631))+((x1624*x1627)));
evalcond[5]=((((-1.0)*sj0))+((x1623*x1630))+(((-1.0)*x1626*x1632))+(((-1.0)*r02*x1631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1633=IKcos(j0);
IkReal x1634=IKsin(j0);
evalcond[0]=((((-0.134)*x1634))+(((-1.0)*px))+(((-0.425)*x1633)));
evalcond[1]=((((0.134)*x1633))+(((-1.0)*py))+(((-0.425)*x1634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1635=((1.0)*cj5);
IkReal x1636=((((-1.0)*r01*x1635))+(((-1.0)*r00*sj5)));
j4eval[0]=x1636;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1635)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1637=((1.0)*cj5);
IkReal x1638=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1637)));
j4eval[0]=x1638;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1637))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1639=cj5*cj5;
IkReal x1640=((1.0)*sj5);
IkReal x1641=(cj5*r20);
IkReal x1642=(r11*r21);
IkReal x1643=(x1642+(((-1.0)*cj5*r10*r21*x1640))+((r12*r22))+(((-1.0)*x1639*x1642))+(((-1.0)*r11*x1640*x1641))+((r10*r20*x1639)));
j4eval[0]=x1643;
j4eval[1]=IKsign(x1643);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1640))+((cj0*x1641)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1644=cj5*cj5;
IkReal x1645=((1.0)*sj5);
IkReal x1646=(cj5*r20);
IkReal x1647=(r11*r21);
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1645))+((cj0*x1646)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
CheckValue<IkReal> x1649=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1644*x1647))+x1647+(((-1.0)*cj5*r10*r21*x1645))+(((-1.0)*r11*x1645*x1646))+((r12*r22))+((r10*r20*x1644)))),-1);
if(!x1649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1648.value)+(((1.5707963267949)*(x1649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1650=IKsin(j4);
IkReal x1651=IKcos(j4);
IkReal x1652=((1.0)*sj0);
IkReal x1653=(cj5*r00);
IkReal x1654=(r11*sj5);
IkReal x1655=(cj5*r10);
IkReal x1656=(r21*sj5);
IkReal x1657=(cj5*r20);
IkReal x1658=(r01*sj5);
IkReal x1659=((1.0)*x1651);
IkReal x1660=((1.0)*x1650);
evalcond[0]=(((x1650*x1656))+(((-1.0)*r22*x1659))+(((-1.0)*x1657*x1660)));
evalcond[1]=((((-1.0)*x1656*x1659))+(((-1.0)*r22*x1660))+((x1651*x1657)));
evalcond[2]=(((x1650*x1654))+cj0+(((-1.0)*r12*x1659))+(((-1.0)*x1655*x1660)));
evalcond[3]=(((x1650*x1658))+(((-1.0)*x1653*x1660))+(((-1.0)*x1652))+(((-1.0)*r02*x1659)));
evalcond[4]=(((x1651*x1653))+(((-1.0)*x1658*x1659))+(((-1.0)*r02*x1660))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1654*x1659))+(((-1.0)*r12*x1660))+(((-1.0)*x1652))+((x1651*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1661=((1.0)*cj5);
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1661)))),-1);
if(!x1662.valid){
continue;
}
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1661))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1662.value)))+(x1663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1664=IKsin(j4);
IkReal x1665=IKcos(j4);
IkReal x1666=((1.0)*sj0);
IkReal x1667=(cj5*r00);
IkReal x1668=(r11*sj5);
IkReal x1669=(cj5*r10);
IkReal x1670=(r21*sj5);
IkReal x1671=(cj5*r20);
IkReal x1672=(r01*sj5);
IkReal x1673=((1.0)*x1665);
IkReal x1674=((1.0)*x1664);
evalcond[0]=((((-1.0)*x1671*x1674))+(((-1.0)*r22*x1673))+((x1664*x1670)));
evalcond[1]=(((x1665*x1671))+(((-1.0)*x1670*x1673))+(((-1.0)*r22*x1674)));
evalcond[2]=(cj0+(((-1.0)*x1669*x1674))+(((-1.0)*r12*x1673))+((x1664*x1668)));
evalcond[3]=((((-1.0)*x1667*x1674))+(((-1.0)*r02*x1673))+(((-1.0)*x1666))+((x1664*x1672)));
evalcond[4]=((((-1.0)*x1672*x1673))+(((-1.0)*r02*x1674))+((x1665*x1667))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1668*x1673))+(((-1.0)*r12*x1674))+(((-1.0)*x1666))+((x1665*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1675=((1.0)*cj5);
CheckValue<IkReal> x1676 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1676.valid){
continue;
}
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1675)))),-1);
if(!x1677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1676.value)+(((1.5707963267949)*(x1677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1678=IKsin(j4);
IkReal x1679=IKcos(j4);
IkReal x1680=((1.0)*sj0);
IkReal x1681=(cj5*r00);
IkReal x1682=(r11*sj5);
IkReal x1683=(cj5*r10);
IkReal x1684=(r21*sj5);
IkReal x1685=(cj5*r20);
IkReal x1686=(r01*sj5);
IkReal x1687=((1.0)*x1679);
IkReal x1688=((1.0)*x1678);
evalcond[0]=((((-1.0)*x1685*x1688))+(((-1.0)*r22*x1687))+((x1678*x1684)));
evalcond[1]=((((-1.0)*r22*x1688))+((x1679*x1685))+(((-1.0)*x1684*x1687)));
evalcond[2]=((((-1.0)*r12*x1687))+cj0+(((-1.0)*x1683*x1688))+((x1678*x1682)));
evalcond[3]=((((-1.0)*x1680))+(((-1.0)*x1681*x1688))+(((-1.0)*r02*x1687))+((x1678*x1686)));
evalcond[4]=((((-1.0)*x1686*x1687))+((x1679*x1681))+(((-1.0)*r02*x1688))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1688))+(((-1.0)*x1680))+(((-1.0)*x1682*x1687))+((x1679*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1689=((1.0)*cj5);
IkReal x1690=((((-1.0)*r01*x1689))+(((-1.0)*r00*sj5)));
j4eval[0]=x1690;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1689)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1691=cj5*cj5;
IkReal x1692=((1.0)*r21);
IkReal x1693=(cj5*sj5);
IkReal x1694=((1.0)*r20);
IkReal x1695=((((-1.0)*r01*x1693*x1694))+((r01*r21))+(((-1.0)*r01*x1691*x1692))+(((-1.0)*r00*x1692*x1693))+((r00*r20*x1691))+((r02*r22)));
j4eval[0]=x1695;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x1694))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1696=cj5*cj5;
IkReal x1697=(r21*sj5);
IkReal x1698=(r11*r21);
IkReal x1699=((1.0)*cj5*r20);
IkReal x1700=(x1698+((r12*r22))+(((-1.0)*r11*sj5*x1699))+((r10*r20*x1696))+(((-1.0)*cj5*r10*x1697))+(((-1.0)*x1696*x1698)));
j4eval[0]=x1700;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1699))+((sj0*x1697))))));
j4eval[2]=IKsign(x1700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1701=cj5*cj5;
IkReal x1702=(r21*sj5);
IkReal x1703=(r11*r21);
IkReal x1704=((1.0)*cj5*r20);
CheckValue<IkReal> x1705=IKPowWithIntegerCheck(IKsign((x1703+(((-1.0)*x1701*x1703))+((r12*r22))+(((-1.0)*r11*sj5*x1704))+((r10*r20*x1701))+(((-1.0)*cj5*r10*x1702)))),-1);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1704))+((sj0*x1702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1705.value)))+(x1706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1707=IKsin(j4);
IkReal x1708=IKcos(j4);
IkReal x1709=(r11*sj5);
IkReal x1710=(cj5*r00);
IkReal x1711=(cj5*r10);
IkReal x1712=(r21*sj5);
IkReal x1713=(cj5*r20);
IkReal x1714=(r01*sj5);
IkReal x1715=((1.0)*x1708);
IkReal x1716=((1.0)*x1707);
evalcond[0]=((((-1.0)*x1713*x1716))+(((-1.0)*r22*x1715))+((x1707*x1712)));
evalcond[1]=((((-1.0)*x1712*x1715))+(((-1.0)*r22*x1716))+((x1708*x1713)));
evalcond[2]=(cj0+(((-1.0)*x1711*x1716))+(((-1.0)*r12*x1715))+((x1707*x1709)));
evalcond[3]=((((-1.0)*x1714*x1715))+cj0+(((-1.0)*r02*x1716))+((x1708*x1710)));
evalcond[4]=(sj0+(((-1.0)*x1709*x1715))+((x1708*x1711))+(((-1.0)*r12*x1716)));
evalcond[5]=((((-1.0)*x1710*x1716))+(((-1.0)*sj0))+(((-1.0)*r02*x1715))+((x1707*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1717=cj5*cj5;
IkReal x1718=((1.0)*r21);
IkReal x1719=(cj5*sj5);
IkReal x1720=((1.0)*r20);
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1718*x1719))+((r00*r20*x1717))+((r01*r21))+(((-1.0)*r01*x1717*x1718))+(((-1.0)*r01*x1719*x1720))+((r02*r22)))),-1);
if(!x1721.valid){
continue;
}
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1721.value)))+(x1722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1723=IKsin(j4);
IkReal x1724=IKcos(j4);
IkReal x1725=(r11*sj5);
IkReal x1726=(cj5*r00);
IkReal x1727=(cj5*r10);
IkReal x1728=(r21*sj5);
IkReal x1729=(cj5*r20);
IkReal x1730=(r01*sj5);
IkReal x1731=((1.0)*x1724);
IkReal x1732=((1.0)*x1723);
evalcond[0]=(((x1723*x1728))+(((-1.0)*x1729*x1732))+(((-1.0)*r22*x1731)));
evalcond[1]=(((x1724*x1729))+(((-1.0)*x1728*x1731))+(((-1.0)*r22*x1732)));
evalcond[2]=(((x1723*x1725))+cj0+(((-1.0)*r12*x1731))+(((-1.0)*x1727*x1732)));
evalcond[3]=(((x1724*x1726))+cj0+(((-1.0)*x1730*x1731))+(((-1.0)*r02*x1732)));
evalcond[4]=(sj0+((x1724*x1727))+(((-1.0)*r12*x1732))+(((-1.0)*x1725*x1731)));
evalcond[5]=(((x1723*x1730))+(((-1.0)*sj0))+(((-1.0)*x1726*x1732))+(((-1.0)*r02*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1733=((1.0)*cj5);
CheckValue<IkReal> x1734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1733))+(((-1.0)*r00*sj5)))),-1);
if(!x1734.valid){
continue;
}
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1734.value)))+(x1735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1736=IKsin(j4);
IkReal x1737=IKcos(j4);
IkReal x1738=(r11*sj5);
IkReal x1739=(cj5*r00);
IkReal x1740=(cj5*r10);
IkReal x1741=(r21*sj5);
IkReal x1742=(cj5*r20);
IkReal x1743=(r01*sj5);
IkReal x1744=((1.0)*x1737);
IkReal x1745=((1.0)*x1736);
evalcond[0]=(((x1736*x1741))+(((-1.0)*r22*x1744))+(((-1.0)*x1742*x1745)));
evalcond[1]=((((-1.0)*x1741*x1744))+(((-1.0)*r22*x1745))+((x1737*x1742)));
evalcond[2]=((((-1.0)*r12*x1744))+cj0+(((-1.0)*x1740*x1745))+((x1736*x1738)));
evalcond[3]=(cj0+((x1737*x1739))+(((-1.0)*x1743*x1744))+(((-1.0)*r02*x1745)));
evalcond[4]=((((-1.0)*r12*x1745))+sj0+(((-1.0)*x1738*x1744))+((x1737*x1740)));
evalcond[5]=(((x1736*x1743))+(((-1.0)*sj0))+(((-1.0)*x1739*x1745))+(((-1.0)*r02*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1746=((1.0)*cj5);
IkReal x1747=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1746)));
j4eval[0]=x1747;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1746)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1748=((1.0)*cj5);
IkReal x1749=((((-1.0)*r11*x1748))+(((-1.0)*r10*sj5)));
j4eval[0]=x1749;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1748))))));
j4eval[2]=IKsign(x1749);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1750=cj5*cj5;
IkReal x1751=((1.0)*sj5);
IkReal x1752=(cj5*r20);
IkReal x1753=(r11*r21);
IkReal x1754=(((r10*r20*x1750))+(((-1.0)*cj5*r10*r21*x1751))+x1753+((r12*r22))+(((-1.0)*x1750*x1753))+(((-1.0)*r11*x1751*x1752)));
j4eval[0]=x1754;
j4eval[1]=IKsign(x1754);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1751))+((cj0*x1752)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1755=cj5*cj5;
IkReal x1756=((1.0)*sj5);
IkReal x1757=(cj5*r20);
IkReal x1758=(r11*r21);
CheckValue<IkReal> x1759=IKPowWithIntegerCheck(IKsign((((r10*r20*x1755))+(((-1.0)*x1755*x1758))+(((-1.0)*cj5*r10*r21*x1756))+x1758+((r12*r22))+(((-1.0)*r11*x1756*x1757)))),-1);
if(!x1759.valid){
continue;
}
CheckValue<IkReal> x1760 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1756))+((cj0*x1757)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1759.value)))+(x1760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1761=IKsin(j4);
IkReal x1762=IKcos(j4);
IkReal x1763=((1.0)*sj0);
IkReal x1764=(cj5*r00);
IkReal x1765=(r11*sj5);
IkReal x1766=(cj5*r10);
IkReal x1767=(r21*sj5);
IkReal x1768=(cj5*r20);
IkReal x1769=(r01*sj5);
IkReal x1770=((1.0)*x1762);
IkReal x1771=((1.0)*x1761);
evalcond[0]=((((-1.0)*r22*x1770))+(((-1.0)*x1768*x1771))+((x1761*x1767)));
evalcond[1]=((((-1.0)*x1767*x1770))+((x1762*x1768))+(((-1.0)*r22*x1771)));
evalcond[2]=(cj0+(((-1.0)*x1766*x1771))+((x1761*x1765))+(((-1.0)*r12*x1770)));
evalcond[3]=((((-1.0)*x1763))+(((-1.0)*r02*x1770))+(((-1.0)*x1764*x1771))+((x1761*x1769)));
evalcond[4]=((((-1.0)*r02*x1771))+((x1762*x1764))+(((-1.0)*cj0))+(((-1.0)*x1769*x1770)));
evalcond[5]=((((-1.0)*x1763))+((x1762*x1766))+(((-1.0)*x1765*x1770))+(((-1.0)*r12*x1771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1772=((1.0)*cj5);
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1772)))),-1);
if(!x1773.valid){
continue;
}
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1772))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1773.value)))+(x1774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1775=IKsin(j4);
IkReal x1776=IKcos(j4);
IkReal x1777=((1.0)*sj0);
IkReal x1778=(cj5*r00);
IkReal x1779=(r11*sj5);
IkReal x1780=(cj5*r10);
IkReal x1781=(r21*sj5);
IkReal x1782=(cj5*r20);
IkReal x1783=(r01*sj5);
IkReal x1784=((1.0)*x1776);
IkReal x1785=((1.0)*x1775);
evalcond[0]=(((x1775*x1781))+(((-1.0)*r22*x1784))+(((-1.0)*x1782*x1785)));
evalcond[1]=((((-1.0)*r22*x1785))+((x1776*x1782))+(((-1.0)*x1781*x1784)));
evalcond[2]=(cj0+(((-1.0)*r12*x1784))+((x1775*x1779))+(((-1.0)*x1780*x1785)));
evalcond[3]=(((x1775*x1783))+(((-1.0)*x1777))+(((-1.0)*x1778*x1785))+(((-1.0)*r02*x1784)));
evalcond[4]=((((-1.0)*x1783*x1784))+((x1776*x1778))+(((-1.0)*r02*x1785))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1785))+(((-1.0)*x1777))+(((-1.0)*x1779*x1784))+((x1776*x1780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1786=((1.0)*cj5);
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1786))+(((-1.0)*r00*sj5)))),-1);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1786))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1787.value)))+(x1788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1789=IKsin(j4);
IkReal x1790=IKcos(j4);
IkReal x1791=((1.0)*sj0);
IkReal x1792=(cj5*r00);
IkReal x1793=(r11*sj5);
IkReal x1794=(cj5*r10);
IkReal x1795=(r21*sj5);
IkReal x1796=(cj5*r20);
IkReal x1797=(r01*sj5);
IkReal x1798=((1.0)*x1790);
IkReal x1799=((1.0)*x1789);
evalcond[0]=((((-1.0)*x1796*x1799))+(((-1.0)*r22*x1798))+((x1789*x1795)));
evalcond[1]=((((-1.0)*x1795*x1798))+(((-1.0)*r22*x1799))+((x1790*x1796)));
evalcond[2]=(cj0+(((-1.0)*r12*x1798))+((x1789*x1793))+(((-1.0)*x1794*x1799)));
evalcond[3]=((((-1.0)*x1792*x1799))+(((-1.0)*x1791))+((x1789*x1797))+(((-1.0)*r02*x1798)));
evalcond[4]=(((x1790*x1792))+(((-1.0)*r02*x1799))+(((-1.0)*x1797*x1798))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1791))+(((-1.0)*r12*x1799))+(((-1.0)*x1793*x1798))+((x1790*x1794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1800=(sj1*sj2);
IkReal x1801=(r00*sj5);
IkReal x1802=(cj1*cj2);
IkReal x1803=(cj5*r01);
IkReal x1804=((212.5)*cj1);
IkReal x1805=((500.0)*px);
CheckValue<IkReal> x1806=IKPowWithIntegerCheck(((((67.0)*x1800))+(((-67.0)*x1802))),-1);
if(!x1806.valid){
continue;
}
CheckValue<IkReal> x1807=IKPowWithIntegerCheck((x1800+(((-1.0)*x1802))),-1);
if(!x1807.valid){
continue;
}
if( IKabs(((x1806.value)*((((x1802*x1805))+(((-146.0)*x1801*x1802))+(((-1.0)*x1801*x1804))+(((-1.0)*x1800*x1805))+(((-146.0)*x1802*x1803))+(((146.0)*x1800*x1801))+(((146.0)*x1800*x1803))+(((-1.0)*x1803*x1804)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1807.value)*(((((-1.0)*x1803))+(((-1.0)*x1801)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1806.value)*((((x1802*x1805))+(((-146.0)*x1801*x1802))+(((-1.0)*x1801*x1804))+(((-1.0)*x1800*x1805))+(((-146.0)*x1802*x1803))+(((146.0)*x1800*x1801))+(((146.0)*x1800*x1803))+(((-1.0)*x1803*x1804))))))+IKsqr(((x1807.value)*(((((-1.0)*x1803))+(((-1.0)*x1801))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1806.value)*((((x1802*x1805))+(((-146.0)*x1801*x1802))+(((-1.0)*x1801*x1804))+(((-1.0)*x1800*x1805))+(((-146.0)*x1802*x1803))+(((146.0)*x1800*x1801))+(((146.0)*x1800*x1803))+(((-1.0)*x1803*x1804))))), ((x1807.value)*(((((-1.0)*x1803))+(((-1.0)*x1801))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1808=IKcos(j0);
IkReal x1809=IKsin(j0);
IkReal x1810=((0.1)*sj5);
IkReal x1811=(cj5*r11);
IkReal x1812=(cj5*r01);
IkReal x1813=(sj1*sj2);
IkReal x1814=(cj1*cj2);
IkReal x1815=((0.392)*x1809);
IkReal x1816=(cj1*x1808);
evalcond[0]=(((r00*sj5))+(((-1.0)*x1808*x1814))+((x1808*x1813))+x1812);
evalcond[1]=(((r10*sj5))+(((-1.0)*x1809*x1814))+((x1809*x1813))+x1811);
evalcond[2]=((((-0.392)*x1808*x1813))+(((-0.1)*x1812))+(((-1.0)*px))+(((-1.0)*r00*x1810))+(((0.425)*x1816))+(((0.392)*x1808*x1814))+(((-0.134)*x1809)));
evalcond[3]=((((-1.0)*x1813*x1815))+(((-0.1)*x1811))+(((-1.0)*r10*x1810))+(((-1.0)*py))+((x1814*x1815))+(((0.425)*cj1*x1809))+(((0.134)*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1817=((1.0)*cj5);
IkReal x1818=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1817)));
j4eval[0]=x1818;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1817))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1819=((1.0)*cj5);
IkReal x1820=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1819)));
j4eval[0]=x1820;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1819))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1821=((1.0)*sj0);
IkReal x1822=((1.0)*cj0);
IkReal x1823=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1823;
j4eval[1]=((IKabs(((((-1.0)*r12*x1821))+(((-1.0)*r02*x1822)))))+(IKabs(((((-1.0)*r11*sj5*x1821))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1822))))));
j4eval[2]=IKsign(x1823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1824=((-1.0)*r20);
IkReal x1826 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1826)==0){
continue;
}
IkReal x1825=pow(x1826,-0.5);
CheckValue<IkReal> x1827 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1824),IKFAST_ATAN2_MAGTHRESH);
if(!x1827.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1827.value));
IkReal gconst79=(r21*x1825);
IkReal gconst80=(x1824*x1825);
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1828.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1829=((-1.0)*r20);
IkReal x1830=x1825;
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1829),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
IkReal x1831=((-1.0)*(x1832.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1831;
IkReal gconst78=x1831;
IkReal gconst79=(r21*x1830);
IkReal gconst80=(x1829*x1830);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1833=((-1.0)*r20);
IkReal x1834=x1825;
CheckValue<IkReal> x1836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1833),IKFAST_ATAN2_MAGTHRESH);
if(!x1836.valid){
continue;
}
IkReal x1835=((-1.0)*(x1836.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1835;
IkReal gconst78=x1835;
IkReal gconst79=(r21*x1834);
IkReal gconst80=(x1833*x1834);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1837=((-1.0)*r20);
IkReal x1838=x1825;
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1837),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
IkReal x1839=((-1.0)*(x1840.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1839;
IkReal gconst78=x1839;
IkReal gconst79=(r21*x1838);
IkReal gconst80=(x1837*x1838);
IkReal x1841=r22*r22;
CheckValue<IkReal> x1844=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1841))),-1);
if(!x1844.valid){
continue;
}
IkReal x1842=x1844.value;
IkReal x1843=((((2.0)*x1842*(r20*r20)*(r21*r21)))+((x1842*(r21*r21*r21*r21)))+x1841+((x1842*(r20*r20*r20*r20))));
j4eval[0]=x1843;
j4eval[1]=IKsign(x1843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1845=(sj1*sj2);
IkReal x1846=(gconst80*r20);
IkReal x1847=(gconst79*r21);
IkReal x1848=(cj1*cj2);
CheckValue<IkReal> x1849=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1846*x1847))+(x1846*x1846)+(x1847*x1847))),-1);
if(!x1849.valid){
continue;
}
CheckValue<IkReal> x1850 = IKatan2WithCheck(IkReal((((r22*x1845))+(((-1.0)*r22*x1848)))),IkReal((((x1845*x1847))+(((-1.0)*x1847*x1848))+((x1846*x1848))+(((-1.0)*x1845*x1846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1849.value)))+(x1850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1851=IKsin(j4);
IkReal x1852=IKcos(j4);
IkReal x1853=(gconst79*r01);
IkReal x1854=(gconst79*r21);
IkReal x1855=((1.0)*cj2);
IkReal x1856=(gconst79*r11);
IkReal x1857=((1.0)*sj0);
IkReal x1858=(cj1*sj2);
IkReal x1859=((1.0)*x1852);
IkReal x1860=(gconst80*x1852);
IkReal x1861=((1.0)*x1851);
IkReal x1862=(gconst80*x1861);
evalcond[0]=(((x1851*x1854))+(((-1.0)*r22*x1859))+(((-1.0)*r20*x1862)));
evalcond[1]=(((x1851*x1856))+cj0+(((-1.0)*r12*x1859))+(((-1.0)*r10*x1862)));
evalcond[2]=(((x1851*x1853))+(((-1.0)*r02*x1859))+(((-1.0)*r00*x1862))+(((-1.0)*x1857)));
evalcond[3]=(((sj1*sj2))+((r20*x1860))+(((-1.0)*x1854*x1859))+(((-1.0)*r22*x1861))+(((-1.0)*cj1*x1855)));
evalcond[4]=((((-1.0)*r02*x1861))+(((-1.0)*cj0*sj1*x1855))+(((-1.0)*cj0*x1858))+(((-1.0)*x1853*x1859))+((r00*x1860)));
evalcond[5]=((((-1.0)*sj0*sj1*x1855))+(((-1.0)*x1857*x1858))+(((-1.0)*x1856*x1859))+(((-1.0)*r12*x1861))+((r10*x1860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1863=((1.0)*gconst80);
CheckValue<IkReal> x1864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1863))+(((-1.0)*gconst79*r10)))),-1);
if(!x1864.valid){
continue;
}
CheckValue<IkReal> x1865 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1863))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1864.value)))+(x1865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1866=IKsin(j4);
IkReal x1867=IKcos(j4);
IkReal x1868=(gconst79*r01);
IkReal x1869=(gconst79*r21);
IkReal x1870=((1.0)*cj2);
IkReal x1871=(gconst79*r11);
IkReal x1872=((1.0)*sj0);
IkReal x1873=(cj1*sj2);
IkReal x1874=((1.0)*x1867);
IkReal x1875=(gconst80*x1867);
IkReal x1876=((1.0)*x1866);
IkReal x1877=(gconst80*x1876);
evalcond[0]=((((-1.0)*r22*x1874))+((x1866*x1869))+(((-1.0)*r20*x1877)));
evalcond[1]=(((x1866*x1871))+cj0+(((-1.0)*r10*x1877))+(((-1.0)*r12*x1874)));
evalcond[2]=((((-1.0)*x1872))+(((-1.0)*r02*x1874))+((x1866*x1868))+(((-1.0)*r00*x1877)));
evalcond[3]=((((-1.0)*r22*x1876))+(((-1.0)*x1869*x1874))+((sj1*sj2))+((r20*x1875))+(((-1.0)*cj1*x1870)));
evalcond[4]=((((-1.0)*x1868*x1874))+(((-1.0)*cj0*x1873))+(((-1.0)*r02*x1876))+(((-1.0)*cj0*sj1*x1870))+((r00*x1875)));
evalcond[5]=((((-1.0)*x1872*x1873))+(((-1.0)*sj0*sj1*x1870))+(((-1.0)*x1871*x1874))+(((-1.0)*r12*x1876))+((r10*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1878=((1.0)*gconst80);
CheckValue<IkReal> x1879 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1878))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1879.valid){
continue;
}
CheckValue<IkReal> x1880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1878))+(((-1.0)*gconst79*r00)))),-1);
if(!x1880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1879.value)+(((1.5707963267949)*(x1880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1881=IKsin(j4);
IkReal x1882=IKcos(j4);
IkReal x1883=(gconst79*r01);
IkReal x1884=(gconst79*r21);
IkReal x1885=((1.0)*cj2);
IkReal x1886=(gconst79*r11);
IkReal x1887=((1.0)*sj0);
IkReal x1888=(cj1*sj2);
IkReal x1889=((1.0)*x1882);
IkReal x1890=(gconst80*x1882);
IkReal x1891=((1.0)*x1881);
IkReal x1892=(gconst80*x1891);
evalcond[0]=(((x1881*x1884))+(((-1.0)*r22*x1889))+(((-1.0)*r20*x1892)));
evalcond[1]=(((x1881*x1886))+cj0+(((-1.0)*r12*x1889))+(((-1.0)*r10*x1892)));
evalcond[2]=(((x1881*x1883))+(((-1.0)*r02*x1889))+(((-1.0)*r00*x1892))+(((-1.0)*x1887)));
evalcond[3]=(((r20*x1890))+(((-1.0)*cj1*x1885))+((sj1*sj2))+(((-1.0)*r22*x1891))+(((-1.0)*x1884*x1889)));
evalcond[4]=((((-1.0)*r02*x1891))+(((-1.0)*cj0*sj1*x1885))+(((-1.0)*cj0*x1888))+(((-1.0)*x1883*x1889))+((r00*x1890)));
evalcond[5]=((((-1.0)*sj0*sj1*x1885))+((r10*x1890))+(((-1.0)*r12*x1891))+(((-1.0)*x1887*x1888))+(((-1.0)*x1886*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1893=((-1.0)*r21);
IkReal x1895 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1895)==0){
continue;
}
IkReal x1894=pow(x1895,-0.5);
CheckValue<IkReal> x1896 = IKatan2WithCheck(IkReal(x1893),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1896.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1896.value))));
IkReal gconst82=(x1893*x1894);
IkReal gconst83=((1.0)*r20*x1894);
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1897.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1898=((-1.0)*r21);
CheckValue<IkReal> x1901 = IKatan2WithCheck(IkReal(x1898),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1901.valid){
continue;
}
IkReal x1899=((1.0)*(x1901.value));
IkReal x1900=x1894;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1899)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1899)));
IkReal gconst82=(x1898*x1900);
IkReal gconst83=((1.0)*r20*x1900);
IkReal x1902=r22*r22;
IkReal x1903=((1.0)*x1902);
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(((-1.0)+x1902),-1);
if(!x1907.valid){
continue;
}
IkReal x1904=x1907.value;
if((((1.0)+(((-1.0)*x1903)))) < -0.00001)
continue;
IkReal x1905=IKsqrt(((1.0)+(((-1.0)*x1903))));
IkReal x1906=(cj0*x1904*x1905);
j4eval[0]=((IKabs(((((-1.0)*x1903*x1906))+x1906)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1908=((-1.0)*r21);
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal(x1908),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
IkReal x1909=((1.0)*(x1911.value));
IkReal x1910=x1894;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1909)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1909)));
IkReal gconst82=(x1908*x1910);
IkReal gconst83=((1.0)*r20*x1910);
IkReal x1912=r22*r22;
IkReal x1913=((1.0)*x1912);
CheckValue<IkReal> x1917=IKPowWithIntegerCheck(((-1.0)+x1912),-1);
if(!x1917.valid){
continue;
}
IkReal x1914=x1917.value;
if((((1.0)+(((-1.0)*x1913)))) < -0.00001)
continue;
IkReal x1915=IKsqrt(((1.0)+(((-1.0)*x1913))));
IkReal x1916=(sj0*x1914*x1915);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1916+(((-1.0)*x1913*x1916))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1918=((-1.0)*r21);
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal(x1918),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
IkReal x1919=((1.0)*(x1921.value));
IkReal x1920=x1894;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1919)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1919)));
IkReal gconst82=(x1918*x1920);
IkReal gconst83=((1.0)*r20*x1920);
IkReal x1922=r22*r22;
IkReal x1923=(r12*sj0);
IkReal x1924=(cj0*r02);
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(((-1.0)+x1922),-1);
if(!x1928.valid){
continue;
}
IkReal x1925=x1928.value;
if((((1.0)+(((-1.0)*x1922)))) < -0.00001)
continue;
IkReal x1926=IKsqrt(((1.0)+(((-1.0)*x1922))));
IkReal x1927=(r22*x1925*x1926);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1923))+(((-1.0)*x1924)))))+(IKabs((((x1923*x1927))+((x1924*x1927))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1929=((1.0)*sj0);
IkReal x1930=((1.0)*cj0);
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1931.valid){
continue;
}
CheckValue<IkReal> x1932 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1929))+(((-1.0)*r02*x1930)))),IkReal(((((-1.0)*gconst82*r11*x1929))+(((-1.0)*gconst82*r01*x1930))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1931.value)))+(x1932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1933=IKsin(j4);
IkReal x1934=IKcos(j4);
IkReal x1935=(gconst82*r11);
IkReal x1936=((1.0)*cj2);
IkReal x1937=((1.0)*sj0);
IkReal x1938=(cj1*sj2);
IkReal x1939=((1.0)*x1934);
IkReal x1940=(gconst83*x1934);
IkReal x1941=(gconst82*x1933);
IkReal x1942=((1.0)*x1933);
evalcond[0]=((((-1.0)*r22*x1939))+(((-1.0)*gconst83*r20*x1942))+((r21*x1941)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1942))+(((-1.0)*r12*x1939))+((x1933*x1935)));
evalcond[2]=(((r01*x1941))+(((-1.0)*gconst83*r00*x1942))+(((-1.0)*r02*x1939))+(((-1.0)*x1937)));
evalcond[3]=((((-1.0)*r22*x1942))+((r20*x1940))+(((-1.0)*cj1*x1936))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1939)));
evalcond[4]=((((-1.0)*r02*x1942))+(((-1.0)*cj0*x1938))+(((-1.0)*gconst82*r01*x1939))+((r00*x1940))+(((-1.0)*cj0*sj1*x1936)));
evalcond[5]=((((-1.0)*x1937*x1938))+((r10*x1940))+(((-1.0)*r12*x1942))+(((-1.0)*sj0*sj1*x1936))+(((-1.0)*x1935*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1943=((1.0)*gconst83);
CheckValue<IkReal> x1944 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1944.valid){
continue;
}
CheckValue<IkReal> x1945=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1943)))),-1);
if(!x1945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1944.value)+(((1.5707963267949)*(x1945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1946=IKsin(j4);
IkReal x1947=IKcos(j4);
IkReal x1948=(gconst82*r11);
IkReal x1949=((1.0)*cj2);
IkReal x1950=((1.0)*sj0);
IkReal x1951=(cj1*sj2);
IkReal x1952=((1.0)*x1947);
IkReal x1953=(gconst83*x1947);
IkReal x1954=(gconst82*x1946);
IkReal x1955=((1.0)*x1946);
evalcond[0]=((((-1.0)*r22*x1952))+((r21*x1954))+(((-1.0)*gconst83*r20*x1955)));
evalcond[1]=(cj0+((x1946*x1948))+(((-1.0)*gconst83*r10*x1955))+(((-1.0)*r12*x1952)));
evalcond[2]=((((-1.0)*x1950))+(((-1.0)*r02*x1952))+((r01*x1954))+(((-1.0)*gconst83*r00*x1955)));
evalcond[3]=((((-1.0)*r22*x1955))+((r20*x1953))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1952))+(((-1.0)*cj1*x1949)));
evalcond[4]=((((-1.0)*cj0*x1951))+(((-1.0)*r02*x1955))+(((-1.0)*gconst82*r01*x1952))+((r00*x1953))+(((-1.0)*cj0*sj1*x1949)));
evalcond[5]=((((-1.0)*sj0*sj1*x1949))+(((-1.0)*x1948*x1952))+(((-1.0)*x1950*x1951))+((r10*x1953))+(((-1.0)*r12*x1955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1956=((1.0)*gconst83);
CheckValue<IkReal> x1957 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1956))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1957.valid){
continue;
}
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1956)))),-1);
if(!x1958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1957.value)+(((1.5707963267949)*(x1958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1959=IKsin(j4);
IkReal x1960=IKcos(j4);
IkReal x1961=(gconst82*r11);
IkReal x1962=((1.0)*cj2);
IkReal x1963=((1.0)*sj0);
IkReal x1964=(cj1*sj2);
IkReal x1965=((1.0)*x1960);
IkReal x1966=(gconst83*x1960);
IkReal x1967=(gconst82*x1959);
IkReal x1968=((1.0)*x1959);
evalcond[0]=((((-1.0)*r22*x1965))+((r21*x1967))+(((-1.0)*gconst83*r20*x1968)));
evalcond[1]=(((x1959*x1961))+cj0+(((-1.0)*gconst83*r10*x1968))+(((-1.0)*r12*x1965)));
evalcond[2]=((((-1.0)*r02*x1965))+(((-1.0)*x1963))+((r01*x1967))+(((-1.0)*gconst83*r00*x1968)));
evalcond[3]=(((r20*x1966))+(((-1.0)*r22*x1968))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1965))+(((-1.0)*cj1*x1962)));
evalcond[4]=((((-1.0)*cj0*x1964))+(((-1.0)*cj0*sj1*x1962))+(((-1.0)*r02*x1968))+((r00*x1966))+(((-1.0)*gconst82*r01*x1965)));
evalcond[5]=((((-1.0)*sj0*sj1*x1962))+((r10*x1966))+(((-1.0)*x1961*x1965))+(((-1.0)*r12*x1968))+(((-1.0)*x1963*x1964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1969=((-1.0)*r10);
IkReal x1971 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1971)==0){
continue;
}
IkReal x1970=pow(x1971,-0.5);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1969),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1972.value));
IkReal gconst85=(r11*x1970);
IkReal gconst86=(x1969*x1970);
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1973.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1974=((-1.0)*r10);
IkReal x1975=x1970;
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1974),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
IkReal x1976=((-1.0)*(x1977.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1976;
IkReal gconst84=x1976;
IkReal gconst85=(r11*x1975);
IkReal gconst86=(x1974*x1975);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1978=((1.0)*sj0);
IkReal x1979=((1.0)*gconst85);
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1979)))),-1);
if(!x1980.valid){
continue;
}
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1978)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1979))+(((-1.0)*gconst85*r11*x1978))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1980.value)))+(x1981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1982=IKsin(j4);
IkReal x1983=IKcos(j4);
IkReal x1984=(gconst85*r21);
IkReal x1985=(gconst86*r00);
IkReal x1986=(gconst86*r10);
IkReal x1987=((1.0)*cj2);
IkReal x1988=(gconst85*r11);
IkReal x1989=(gconst85*r01);
IkReal x1990=((1.0)*sj0);
IkReal x1991=(gconst86*r20);
IkReal x1992=(cj1*sj2);
IkReal x1993=((1.0)*x1983);
IkReal x1994=((1.0)*x1982);
evalcond[0]=(((x1982*x1984))+(((-1.0)*x1991*x1994))+(((-1.0)*r22*x1993)));
evalcond[1]=((((-1.0)*x1986*x1994))+cj0+((x1982*x1988))+(((-1.0)*r12*x1993)));
evalcond[2]=((((-1.0)*r02*x1993))+((x1982*x1989))+(((-1.0)*x1990))+(((-1.0)*x1985*x1994)));
evalcond[3]=(((sj1*sj2))+((x1983*x1991))+(((-1.0)*x1984*x1993))+(((-1.0)*cj1*x1987))+(((-1.0)*r22*x1994)));
evalcond[4]=((((-1.0)*cj0*x1992))+(((-1.0)*r02*x1994))+(((-1.0)*x1989*x1993))+(((-1.0)*cj0*sj1*x1987))+((x1983*x1985)));
evalcond[5]=((((-1.0)*sj0*sj1*x1987))+(((-1.0)*x1990*x1992))+(((-1.0)*r12*x1994))+((x1983*x1986))+(((-1.0)*x1988*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1995=((1.0)*gconst86);
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1995))+(((-1.0)*gconst85*r00)))),-1);
if(!x1996.valid){
continue;
}
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1995))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1996.value)))+(x1997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1998=IKsin(j4);
IkReal x1999=IKcos(j4);
IkReal x2000=(gconst85*r21);
IkReal x2001=(gconst86*r00);
IkReal x2002=(gconst86*r10);
IkReal x2003=((1.0)*cj2);
IkReal x2004=(gconst85*r11);
IkReal x2005=(gconst85*r01);
IkReal x2006=((1.0)*sj0);
IkReal x2007=(gconst86*r20);
IkReal x2008=(cj1*sj2);
IkReal x2009=((1.0)*x1999);
IkReal x2010=((1.0)*x1998);
evalcond[0]=((((-1.0)*r22*x2009))+(((-1.0)*x2007*x2010))+((x1998*x2000)));
evalcond[1]=(cj0+(((-1.0)*r12*x2009))+(((-1.0)*x2002*x2010))+((x1998*x2004)));
evalcond[2]=((((-1.0)*r02*x2009))+(((-1.0)*x2006))+(((-1.0)*x2001*x2010))+((x1998*x2005)));
evalcond[3]=(((x1999*x2007))+((sj1*sj2))+(((-1.0)*cj1*x2003))+(((-1.0)*x2000*x2009))+(((-1.0)*r22*x2010)));
evalcond[4]=((((-1.0)*x2005*x2009))+((x1999*x2001))+(((-1.0)*cj0*x2008))+(((-1.0)*r02*x2010))+(((-1.0)*cj0*sj1*x2003)));
evalcond[5]=((((-1.0)*x2006*x2008))+(((-1.0)*x2004*x2009))+((x1999*x2002))+(((-1.0)*sj0*sj1*x2003))+(((-1.0)*r12*x2010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2011=((-1.0)*r11);
IkReal x2013 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2013)==0){
continue;
}
IkReal x2012=pow(x2013,-0.5);
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal(x2011),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2014.value))));
IkReal gconst88=(x2011*x2012);
IkReal gconst89=((1.0)*r10*x2012);
CheckValue<IkReal> x2015 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2015.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2015.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2016=((-1.0)*r11);
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal(x2016),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
IkReal x2017=((1.0)*(x2019.value));
IkReal x2018=x2012;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2017)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2017)));
IkReal gconst88=(x2016*x2018);
IkReal gconst89=((1.0)*r10*x2018);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2020=((-1.0)*r11);
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal(x2020),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
IkReal x2021=((1.0)*(x2023.value));
IkReal x2022=x2012;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2021)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2021)));
IkReal gconst88=(x2020*x2022);
IkReal gconst89=((1.0)*r10*x2022);
IkReal x2024=r12*r12;
IkReal x2025=((1.0)*sj0);
IkReal x2026=(cj0*r02);
IkReal x2027=x2012;
j4eval[0]=((IKabs((((r12*x2026*x2027))+(((-1.0)*x2025*x2027))+((sj0*x2024*x2027)))))+(IKabs(((((-1.0)*r12*x2025))+(((-1.0)*x2026))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2028=((-1.0)*r11);
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal(x2028),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
IkReal x2029=((1.0)*(x2031.value));
IkReal x2030=x2012;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2029)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2029)));
IkReal gconst88=(x2028*x2030);
IkReal gconst89=((1.0)*r10*x2030);
IkReal x2032=r12*r12;
IkReal x2033=(cj1*cj2*r22);
IkReal x2034=(r22*sj1*sj2);
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(((-1.0)+x2032),-1);
if(!x2038.valid){
continue;
}
IkReal x2035=x2038.value;
if((((1.0)+(((-1.0)*x2032)))) < -0.00001)
continue;
IkReal x2036=IKsqrt(((1.0)+(((-1.0)*x2032))));
IkReal x2037=(r12*x2035*x2036);
j4eval[0]=((IKabs((((x2033*x2037))+(((-1.0)*x2034*x2037)))))+(IKabs((x2034+(((-1.0)*x2033))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2039=(cj1*cj2);
IkReal x2040=(gconst89*r20);
IkReal x2041=(gconst88*r21);
IkReal x2042=(sj1*sj2);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal((((r22*x2042))+(((-1.0)*r22*x2039)))),IkReal((((x2041*x2042))+(((-1.0)*x2040*x2042))+((x2039*x2040))+(((-1.0)*x2039*x2041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
CheckValue<IkReal> x2044=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2041*x2041)+(x2040*x2040)+(((-2.0)*x2040*x2041)))),-1);
if(!x2044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2043.value)+(((1.5707963267949)*(x2044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2045=IKsin(j4);
IkReal x2046=IKcos(j4);
IkReal x2047=((1.0)*sj0);
IkReal x2048=((1.0)*cj2);
IkReal x2049=(gconst89*r20);
IkReal x2050=(gconst89*r10);
IkReal x2051=(gconst89*r00);
IkReal x2052=(cj1*sj2);
IkReal x2053=((1.0)*x2046);
IkReal x2054=((1.0)*x2045);
IkReal x2055=(gconst88*x2045);
evalcond[0]=((((-1.0)*r22*x2053))+(((-1.0)*x2049*x2054))+((r21*x2055)));
evalcond[1]=(((r11*x2055))+cj0+(((-1.0)*r12*x2053))+(((-1.0)*x2050*x2054)));
evalcond[2]=(((r01*x2055))+(((-1.0)*x2047))+(((-1.0)*r02*x2053))+(((-1.0)*x2051*x2054)));
evalcond[3]=((((-1.0)*r22*x2054))+((sj1*sj2))+((x2046*x2049))+(((-1.0)*gconst88*r21*x2053))+(((-1.0)*cj1*x2048)));
evalcond[4]=((((-1.0)*gconst88*r01*x2053))+(((-1.0)*r02*x2054))+(((-1.0)*cj0*sj1*x2048))+(((-1.0)*cj0*x2052))+((x2046*x2051)));
evalcond[5]=((((-1.0)*cj2*sj1*x2047))+(((-1.0)*r12*x2054))+(((-1.0)*gconst88*r11*x2053))+((x2046*x2050))+(((-1.0)*x2047*x2052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2056=((1.0)*sj0);
IkReal x2057=((1.0)*cj0);
CheckValue<IkReal> x2058 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2056))+(((-1.0)*r02*x2057)))),IkReal(((((-1.0)*gconst88*r01*x2057))+(((-1.0)*gconst88*r11*x2056))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2058.valid){
continue;
}
CheckValue<IkReal> x2059=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2058.value)+(((1.5707963267949)*(x2059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2060=IKsin(j4);
IkReal x2061=IKcos(j4);
IkReal x2062=((1.0)*sj0);
IkReal x2063=((1.0)*cj2);
IkReal x2064=(gconst89*r20);
IkReal x2065=(gconst89*r10);
IkReal x2066=(gconst89*r00);
IkReal x2067=(cj1*sj2);
IkReal x2068=((1.0)*x2061);
IkReal x2069=((1.0)*x2060);
IkReal x2070=(gconst88*x2060);
evalcond[0]=((((-1.0)*x2064*x2069))+(((-1.0)*r22*x2068))+((r21*x2070)));
evalcond[1]=((((-1.0)*r12*x2068))+cj0+((r11*x2070))+(((-1.0)*x2065*x2069)));
evalcond[2]=((((-1.0)*r02*x2068))+(((-1.0)*x2062))+((r01*x2070))+(((-1.0)*x2066*x2069)));
evalcond[3]=((((-1.0)*gconst88*r21*x2068))+(((-1.0)*r22*x2069))+((sj1*sj2))+(((-1.0)*cj1*x2063))+((x2061*x2064)));
evalcond[4]=((((-1.0)*cj0*x2067))+(((-1.0)*r02*x2069))+(((-1.0)*cj0*sj1*x2063))+(((-1.0)*gconst88*r01*x2068))+((x2061*x2066)));
evalcond[5]=((((-1.0)*r12*x2069))+(((-1.0)*x2062*x2067))+(((-1.0)*gconst88*r11*x2068))+(((-1.0)*cj2*sj1*x2062))+((x2061*x2065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2071=((1.0)*gconst89);
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2071))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
CheckValue<IkReal> x2073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2071))+(((-1.0)*gconst88*r00)))),-1);
if(!x2073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2072.value)+(((1.5707963267949)*(x2073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2074=IKsin(j4);
IkReal x2075=IKcos(j4);
IkReal x2076=((1.0)*sj0);
IkReal x2077=((1.0)*cj2);
IkReal x2078=(gconst89*r20);
IkReal x2079=(gconst89*r10);
IkReal x2080=(gconst89*r00);
IkReal x2081=(cj1*sj2);
IkReal x2082=((1.0)*x2075);
IkReal x2083=((1.0)*x2074);
IkReal x2084=(gconst88*x2074);
evalcond[0]=((((-1.0)*x2078*x2083))+(((-1.0)*r22*x2082))+((r21*x2084)));
evalcond[1]=(cj0+(((-1.0)*r12*x2082))+(((-1.0)*x2079*x2083))+((r11*x2084)));
evalcond[2]=((((-1.0)*r02*x2082))+(((-1.0)*x2076))+((r01*x2084))+(((-1.0)*x2080*x2083)));
evalcond[3]=(((x2075*x2078))+(((-1.0)*r22*x2083))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2082))+(((-1.0)*cj1*x2077)));
evalcond[4]=((((-1.0)*r02*x2083))+(((-1.0)*gconst88*r01*x2082))+(((-1.0)*cj0*x2081))+(((-1.0)*cj0*sj1*x2077))+((x2075*x2080)));
evalcond[5]=(((x2075*x2079))+(((-1.0)*gconst88*r11*x2082))+(((-1.0)*x2076*x2081))+(((-1.0)*r12*x2083))+(((-1.0)*cj2*sj1*x2076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2085=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2085;
j4eval[1]=IKsign(x2085);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2086=((1.0)*cj5);
IkReal x2087=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2086)));
j4eval[0]=x2087;
j4eval[1]=((IKabs(((((-1.0)*r20*x2086))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2088=cj5*cj5;
IkReal x2089=r11*r11;
IkReal x2090=(r11*sj5);
IkReal x2091=(cj5*r10);
IkReal x2092=((r12*r12)+x2089+(((-1.0)*x2088*x2089))+((x2088*(r10*r10)))+(((-2.0)*x2090*x2091)));
j4eval[0]=x2092;
j4eval[1]=IKsign(x2092);
j4eval[2]=((IKabs(r12))+(IKabs((x2091+(((-1.0)*x2090))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2093=cj5*cj5;
IkReal x2094=r11*r11;
IkReal x2095=(cj5*r10);
IkReal x2096=(r11*sj5);
CheckValue<IkReal> x2097 = IKatan2WithCheck(IkReal((x2095+(((-1.0)*x2096)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2097.valid){
continue;
}
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2095*x2096))+(r12*r12)+x2094+(((-1.0)*x2093*x2094))+((x2093*(r10*r10))))),-1);
if(!x2098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2097.value)+(((1.5707963267949)*(x2098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2099=IKsin(j4);
IkReal x2100=IKcos(j4);
IkReal x2101=(cj5*r10);
IkReal x2102=(r01*sj5);
IkReal x2103=((1.0)*cj2);
IkReal x2104=(cj5*r00);
IkReal x2105=(cj5*r20);
IkReal x2106=((1.0)*x2100);
IkReal x2107=((1.0)*x2099);
IkReal x2108=(sj5*x2099);
evalcond[0]=((((-1.0)*r22*x2106))+((r21*x2108))+(((-1.0)*x2105*x2107)));
evalcond[1]=((((-1.0)*r02*x2106))+((x2099*x2102))+(((-1.0)*x2104*x2107)));
evalcond[2]=((((-1.0)*r12*x2107))+((x2100*x2101))+(((-1.0)*r11*sj5*x2106)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2106))+((r11*x2108))+(((-1.0)*x2101*x2107)));
evalcond[4]=((((-1.0)*r22*x2107))+(((-1.0)*cj1*x2103))+((sj1*sj2))+((x2100*x2105))+(((-1.0)*r21*sj5*x2106)));
evalcond[5]=((((-1.0)*r02*x2107))+(((-1.0)*sj1*x2103))+(((-1.0)*x2102*x2106))+(((-1.0)*cj1*sj2))+((x2100*x2104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2109=((1.0)*cj5);
CheckValue<IkReal> x2110 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2110.valid){
continue;
}
CheckValue<IkReal> x2111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2109)))),-1);
if(!x2111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2110.value)+(((1.5707963267949)*(x2111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2112=IKsin(j4);
IkReal x2113=IKcos(j4);
IkReal x2114=(cj5*r10);
IkReal x2115=(r01*sj5);
IkReal x2116=((1.0)*cj2);
IkReal x2117=(cj5*r00);
IkReal x2118=(cj5*r20);
IkReal x2119=((1.0)*x2113);
IkReal x2120=((1.0)*x2112);
IkReal x2121=(sj5*x2112);
evalcond[0]=((((-1.0)*x2118*x2120))+((r21*x2121))+(((-1.0)*r22*x2119)));
evalcond[1]=((((-1.0)*x2117*x2120))+(((-1.0)*r02*x2119))+((x2112*x2115)));
evalcond[2]=((((-1.0)*r11*sj5*x2119))+(((-1.0)*r12*x2120))+((x2113*x2114)));
evalcond[3]=((1.0)+((r11*x2121))+(((-1.0)*x2114*x2120))+(((-1.0)*r12*x2119)));
evalcond[4]=((((-1.0)*r21*sj5*x2119))+(((-1.0)*r22*x2120))+((sj1*sj2))+(((-1.0)*cj1*x2116))+((x2113*x2118)));
evalcond[5]=((((-1.0)*sj1*x2116))+(((-1.0)*r02*x2120))+(((-1.0)*cj1*sj2))+((x2113*x2117))+(((-1.0)*x2115*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2122=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2122.valid){
continue;
}
CheckValue<IkReal> x2123 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2122.value)))+(x2123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2124=IKsin(j4);
IkReal x2125=IKcos(j4);
IkReal x2126=(cj5*r10);
IkReal x2127=(r01*sj5);
IkReal x2128=((1.0)*cj2);
IkReal x2129=(cj5*r00);
IkReal x2130=(cj5*r20);
IkReal x2131=((1.0)*x2125);
IkReal x2132=((1.0)*x2124);
IkReal x2133=(sj5*x2124);
evalcond[0]=((((-1.0)*r22*x2131))+((r21*x2133))+(((-1.0)*x2130*x2132)));
evalcond[1]=((((-1.0)*x2129*x2132))+((x2124*x2127))+(((-1.0)*r02*x2131)));
evalcond[2]=(((x2125*x2126))+(((-1.0)*r12*x2132))+(((-1.0)*r11*sj5*x2131)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2131))+((r11*x2133))+(((-1.0)*x2126*x2132)));
evalcond[4]=((((-1.0)*r22*x2132))+((sj1*sj2))+(((-1.0)*cj1*x2128))+(((-1.0)*r21*sj5*x2131))+((x2125*x2130)));
evalcond[5]=(((x2125*x2129))+(((-1.0)*cj1*sj2))+(((-1.0)*x2127*x2131))+(((-1.0)*sj1*x2128))+(((-1.0)*r02*x2132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2134=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2134;
j4eval[1]=IKsign(x2134);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2135=((1.0)*cj5);
IkReal x2136=((((-1.0)*r21*x2135))+(((-1.0)*r20*sj5)));
j4eval[0]=x2136;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2135)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2137=cj5*cj5;
IkReal x2138=r11*r11;
IkReal x2139=(cj5*r10);
IkReal x2140=(r11*sj5);
IkReal x2141=((((2.0)*x2139*x2140))+(((-1.0)*x2137*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2138))+((x2137*x2138)));
j4eval[0]=x2141;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2140))+x2139))));
j4eval[2]=IKsign(x2141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2142=cj5*cj5;
IkReal x2143=r11*r11;
IkReal x2144=(cj5*r10);
IkReal x2145=(r11*sj5);
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(((((-1.0)*x2145))+x2144)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2143))+(((2.0)*x2144*x2145))+(((-1.0)*x2142*(r10*r10)))+((x2142*x2143))+(((-1.0)*(r12*r12))))),-1);
if(!x2147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2146.value)+(((1.5707963267949)*(x2147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2148=IKsin(j4);
IkReal x2149=IKcos(j4);
IkReal x2150=(cj5*r10);
IkReal x2151=(r01*sj5);
IkReal x2152=(cj5*r00);
IkReal x2153=(cj5*r20);
IkReal x2154=((1.0)*x2149);
IkReal x2155=((1.0)*x2148);
IkReal x2156=(sj5*x2148);
evalcond[0]=((((-1.0)*x2153*x2155))+(((-1.0)*r22*x2154))+((r21*x2156)));
evalcond[1]=((((-1.0)*r02*x2154))+(((-1.0)*x2152*x2155))+((x2148*x2151)));
evalcond[2]=(((x2149*x2150))+(((-1.0)*r11*sj5*x2154))+(((-1.0)*r12*x2155)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2154))+(((-1.0)*x2150*x2155))+((r11*x2156)));
evalcond[4]=(((cj2*sj1))+((x2149*x2152))+((cj1*sj2))+(((-1.0)*r02*x2155))+(((-1.0)*x2151*x2154)));
evalcond[5]=(((x2149*x2153))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2155))+(((-1.0)*r21*sj5*x2154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2157=((1.0)*cj5);
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2157))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
CheckValue<IkReal> x2159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2157))+(((-1.0)*r20*sj5)))),-1);
if(!x2159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2158.value)+(((1.5707963267949)*(x2159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2160=IKsin(j4);
IkReal x2161=IKcos(j4);
IkReal x2162=(cj5*r10);
IkReal x2163=(r01*sj5);
IkReal x2164=(cj5*r00);
IkReal x2165=(cj5*r20);
IkReal x2166=((1.0)*x2161);
IkReal x2167=((1.0)*x2160);
IkReal x2168=(sj5*x2160);
evalcond[0]=(((r21*x2168))+(((-1.0)*x2165*x2167))+(((-1.0)*r22*x2166)));
evalcond[1]=((((-1.0)*x2164*x2167))+((x2160*x2163))+(((-1.0)*r02*x2166)));
evalcond[2]=((((-1.0)*r11*sj5*x2166))+((x2161*x2162))+(((-1.0)*r12*x2167)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2166))+((r11*x2168))+(((-1.0)*x2162*x2167)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2163*x2166))+((cj1*sj2))+((x2161*x2164))+(((-1.0)*r02*x2167)));
evalcond[5]=((((-1.0)*r21*sj5*x2166))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2161*x2165))+(((-1.0)*r22*x2167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
CheckValue<IkReal> x2170=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2169.value)+(((1.5707963267949)*(x2170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2171=IKsin(j4);
IkReal x2172=IKcos(j4);
IkReal x2173=(cj5*r10);
IkReal x2174=(r01*sj5);
IkReal x2175=(cj5*r00);
IkReal x2176=(cj5*r20);
IkReal x2177=((1.0)*x2172);
IkReal x2178=((1.0)*x2171);
IkReal x2179=(sj5*x2171);
evalcond[0]=((((-1.0)*x2176*x2178))+((r21*x2179))+(((-1.0)*r22*x2177)));
evalcond[1]=(((x2171*x2174))+(((-1.0)*r02*x2177))+(((-1.0)*x2175*x2178)));
evalcond[2]=(((x2172*x2173))+(((-1.0)*r11*sj5*x2177))+(((-1.0)*r12*x2178)));
evalcond[3]=((-1.0)+((r11*x2179))+(((-1.0)*x2173*x2178))+(((-1.0)*r12*x2177)));
evalcond[4]=(((cj2*sj1))+((x2172*x2175))+(((-1.0)*x2174*x2177))+((cj1*sj2))+(((-1.0)*r02*x2178)));
evalcond[5]=(((x2172*x2176))+(((-1.0)*r21*sj5*x2177))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2180=((-1.0)*r00);
IkReal x2182 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2182)==0){
continue;
}
IkReal x2181=pow(x2182,-0.5);
CheckValue<IkReal> x2183 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2180),IKFAST_ATAN2_MAGTHRESH);
if(!x2183.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2183.value));
IkReal gconst91=(r01*x2181);
IkReal gconst92=(x2180*x2181);
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2184.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2185=((-1.0)*r00);
IkReal x2186=x2181;
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2185),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
IkReal x2187=((-1.0)*(x2188.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2187;
IkReal gconst90=x2187;
IkReal gconst91=(r01*x2186);
IkReal gconst92=(x2185*x2186);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2189=((1.0)*sj0);
IkReal x2190=((1.0)*cj0);
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2190))+(((-1.0)*r12*x2189)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2190))+(((-1.0)*gconst91*r11*x2189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2191.value)+(((1.5707963267949)*(x2192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2193=IKsin(j4);
IkReal x2194=IKcos(j4);
IkReal x2195=((1.0)*cj2);
IkReal x2196=(gconst92*r00);
IkReal x2197=(gconst92*r20);
IkReal x2198=((1.0)*sj0);
IkReal x2199=(gconst92*r10);
IkReal x2200=(cj1*sj2);
IkReal x2201=((1.0)*x2194);
IkReal x2202=(gconst91*x2193);
IkReal x2203=((1.0)*x2193);
evalcond[0]=((((-1.0)*r22*x2201))+(((-1.0)*x2197*x2203))+((r21*x2202)));
evalcond[1]=(cj0+(((-1.0)*r12*x2201))+((r11*x2202))+(((-1.0)*x2199*x2203)));
evalcond[2]=(((r01*x2202))+(((-1.0)*x2196*x2203))+(((-1.0)*x2198))+(((-1.0)*r02*x2201)));
evalcond[3]=(((x2194*x2197))+(((-1.0)*r22*x2203))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2201))+(((-1.0)*cj1*x2195)));
evalcond[4]=(((x2194*x2196))+(((-1.0)*gconst91*r01*x2201))+(((-1.0)*cj0*sj1*x2195))+(((-1.0)*r02*x2203))+(((-1.0)*cj0*x2200)));
evalcond[5]=(((x2194*x2199))+(((-1.0)*r12*x2203))+(((-1.0)*sj0*sj1*x2195))+(((-1.0)*x2198*x2200))+(((-1.0)*gconst91*r11*x2201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2204=((1.0)*gconst92);
CheckValue<IkReal> x2205=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2204)))),-1);
if(!x2205.valid){
continue;
}
CheckValue<IkReal> x2206 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2204))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2205.value)))+(x2206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2207=IKsin(j4);
IkReal x2208=IKcos(j4);
IkReal x2209=((1.0)*cj2);
IkReal x2210=(gconst92*r00);
IkReal x2211=(gconst92*r20);
IkReal x2212=((1.0)*sj0);
IkReal x2213=(gconst92*r10);
IkReal x2214=(cj1*sj2);
IkReal x2215=((1.0)*x2208);
IkReal x2216=(gconst91*x2207);
IkReal x2217=((1.0)*x2207);
evalcond[0]=((((-1.0)*r22*x2215))+((r21*x2216))+(((-1.0)*x2211*x2217)));
evalcond[1]=(cj0+(((-1.0)*r12*x2215))+((r11*x2216))+(((-1.0)*x2213*x2217)));
evalcond[2]=((((-1.0)*x2210*x2217))+((r01*x2216))+(((-1.0)*x2212))+(((-1.0)*r02*x2215)));
evalcond[3]=((((-1.0)*cj1*x2209))+(((-1.0)*r22*x2217))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2215))+((x2208*x2211)));
evalcond[4]=((((-1.0)*gconst91*r01*x2215))+(((-1.0)*cj0*sj1*x2209))+(((-1.0)*r02*x2217))+(((-1.0)*cj0*x2214))+((x2208*x2210)));
evalcond[5]=((((-1.0)*r12*x2217))+(((-1.0)*gconst91*r11*x2215))+(((-1.0)*x2212*x2214))+((x2208*x2213))+(((-1.0)*sj0*sj1*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2218=((-1.0)*r01);
IkReal x2220 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2220)==0){
continue;
}
IkReal x2219=pow(x2220,-0.5);
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal(x2218),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2221.value))));
IkReal gconst94=(x2218*x2219);
IkReal gconst95=((1.0)*r00*x2219);
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2222.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2223=((-1.0)*r01);
CheckValue<IkReal> x2226 = IKatan2WithCheck(IkReal(x2223),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2226.valid){
continue;
}
IkReal x2224=((1.0)*(x2226.value));
IkReal x2225=x2219;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2224)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2224)));
IkReal gconst94=(x2223*x2225);
IkReal gconst95=((1.0)*r00*x2225);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2227=((-1.0)*r01);
CheckValue<IkReal> x2230 = IKatan2WithCheck(IkReal(x2227),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2230.valid){
continue;
}
IkReal x2228=((1.0)*(x2230.value));
IkReal x2229=x2219;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2228)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2228)));
IkReal gconst94=(x2227*x2229);
IkReal gconst95=((1.0)*r00*x2229);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2231=((-1.0)*r01);
CheckValue<IkReal> x2234 = IKatan2WithCheck(IkReal(x2231),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2234.valid){
continue;
}
IkReal x2232=((1.0)*(x2234.value));
IkReal x2233=x2219;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2232)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2232)));
IkReal gconst94=(x2231*x2233);
IkReal gconst95=((1.0)*r00*x2233);
IkReal x2235=r02*r02;
IkReal x2236=(r12*sj0);
IkReal x2237=((1.0)*cj0);
IkReal x2238=x2219;
j4eval[0]=((IKabs(((((-1.0)*x2237*x2238))+((r02*x2236*x2238))+((cj0*x2235*x2238)))))+(IKabs(((((-1.0)*r02*x2237))+(((-1.0)*x2236))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2239=((1.0)*sj0);
IkReal x2240=((1.0)*cj0);
CheckValue<IkReal> x2241 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2240))+(((-1.0)*r12*x2239)))),IkReal(((((-1.0)*gconst94*r01*x2240))+(((-1.0)*gconst94*r11*x2239))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2241.valid){
continue;
}
CheckValue<IkReal> x2242=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2241.value)+(((1.5707963267949)*(x2242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2243=IKsin(j4);
IkReal x2244=IKcos(j4);
IkReal x2245=(gconst94*r11);
IkReal x2246=((1.0)*cj2);
IkReal x2247=(gconst94*r21);
IkReal x2248=((1.0)*sj0);
IkReal x2249=(gconst94*r01);
IkReal x2250=(cj1*sj2);
IkReal x2251=((1.0)*x2244);
IkReal x2252=(gconst95*x2244);
IkReal x2253=((1.0)*x2243);
IkReal x2254=(gconst95*x2253);
evalcond[0]=((((-1.0)*r22*x2251))+((x2243*x2247))+(((-1.0)*r20*x2254)));
evalcond[1]=(cj0+((x2243*x2245))+(((-1.0)*r12*x2251))+(((-1.0)*r10*x2254)));
evalcond[2]=(((x2243*x2249))+(((-1.0)*r02*x2251))+(((-1.0)*r00*x2254))+(((-1.0)*x2248)));
evalcond[3]=((((-1.0)*r22*x2253))+((sj1*sj2))+((r20*x2252))+(((-1.0)*cj1*x2246))+(((-1.0)*x2247*x2251)));
evalcond[4]=((((-1.0)*x2249*x2251))+(((-1.0)*r02*x2253))+(((-1.0)*cj0*x2250))+((r00*x2252))+(((-1.0)*cj0*sj1*x2246)));
evalcond[5]=(((r10*x2252))+(((-1.0)*sj0*sj1*x2246))+(((-1.0)*r12*x2253))+(((-1.0)*x2248*x2250))+(((-1.0)*x2245*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2255=((1.0)*gconst95);
CheckValue<IkReal> x2256 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2256.valid){
continue;
}
CheckValue<IkReal> x2257=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2255)))),-1);
if(!x2257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2256.value)+(((1.5707963267949)*(x2257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2258=IKsin(j4);
IkReal x2259=IKcos(j4);
IkReal x2260=(gconst94*r11);
IkReal x2261=((1.0)*cj2);
IkReal x2262=(gconst94*r21);
IkReal x2263=((1.0)*sj0);
IkReal x2264=(gconst94*r01);
IkReal x2265=(cj1*sj2);
IkReal x2266=((1.0)*x2259);
IkReal x2267=(gconst95*x2259);
IkReal x2268=((1.0)*x2258);
IkReal x2269=(gconst95*x2268);
evalcond[0]=(((x2258*x2262))+(((-1.0)*r20*x2269))+(((-1.0)*r22*x2266)));
evalcond[1]=(((x2258*x2260))+cj0+(((-1.0)*r10*x2269))+(((-1.0)*r12*x2266)));
evalcond[2]=(((x2258*x2264))+(((-1.0)*r00*x2269))+(((-1.0)*r02*x2266))+(((-1.0)*x2263)));
evalcond[3]=((((-1.0)*cj1*x2261))+((sj1*sj2))+(((-1.0)*r22*x2268))+((r20*x2267))+(((-1.0)*x2262*x2266)));
evalcond[4]=(((r00*x2267))+(((-1.0)*cj0*sj1*x2261))+(((-1.0)*r02*x2268))+(((-1.0)*cj0*x2265))+(((-1.0)*x2264*x2266)));
evalcond[5]=((((-1.0)*x2260*x2266))+(((-1.0)*x2263*x2265))+(((-1.0)*sj0*sj1*x2261))+((r10*x2267))+(((-1.0)*r12*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2270=((1.0)*gconst95);
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2270))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
CheckValue<IkReal> x2272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2270)))),-1);
if(!x2272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2271.value)+(((1.5707963267949)*(x2272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2273=IKsin(j4);
IkReal x2274=IKcos(j4);
IkReal x2275=(gconst94*r11);
IkReal x2276=((1.0)*cj2);
IkReal x2277=(gconst94*r21);
IkReal x2278=((1.0)*sj0);
IkReal x2279=(gconst94*r01);
IkReal x2280=(cj1*sj2);
IkReal x2281=((1.0)*x2274);
IkReal x2282=(gconst95*x2274);
IkReal x2283=((1.0)*x2273);
IkReal x2284=(gconst95*x2283);
evalcond[0]=(((x2273*x2277))+(((-1.0)*r20*x2284))+(((-1.0)*r22*x2281)));
evalcond[1]=(((x2273*x2275))+cj0+(((-1.0)*r12*x2281))+(((-1.0)*r10*x2284)));
evalcond[2]=((((-1.0)*r02*x2281))+((x2273*x2279))+(((-1.0)*x2278))+(((-1.0)*r00*x2284)));
evalcond[3]=((((-1.0)*x2277*x2281))+(((-1.0)*cj1*x2276))+((r20*x2282))+((sj1*sj2))+(((-1.0)*r22*x2283)));
evalcond[4]=((((-1.0)*r02*x2283))+(((-1.0)*cj0*sj1*x2276))+(((-1.0)*cj0*x2280))+(((-1.0)*x2279*x2281))+((r00*x2282)));
evalcond[5]=(((r10*x2282))+(((-1.0)*r12*x2283))+(((-1.0)*sj0*sj1*x2276))+(((-1.0)*x2278*x2280))+(((-1.0)*x2275*x2281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2285=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2285;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2286=((1.0)*cj5);
IkReal x2287=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2286)));
j4eval[0]=x2287;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2286)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2288=cj5*cj5;
IkReal x2289=r01*r01;
IkReal x2290=(r01*sj5);
IkReal x2291=(cj5*r00);
IkReal x2292=((((2.0)*x2290*x2291))+(((-1.0)*x2288*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2289))+((x2288*x2289)));
j4eval[0]=x2292;
j4eval[1]=IKsign(x2292);
j4eval[2]=((IKabs(r02))+(IKabs((x2291+(((-1.0)*x2290))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2293=cj5*cj5;
IkReal x2294=r01*r01;
IkReal x2295=(r01*sj5);
IkReal x2296=(cj5*r00);
CheckValue<IkReal> x2297=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x2294))+(((-1.0)*x2293*(r00*r00)))+(((2.0)*x2295*x2296))+((x2293*x2294)))),-1);
if(!x2297.valid){
continue;
}
CheckValue<IkReal> x2298 = IKatan2WithCheck(IkReal((x2296+(((-1.0)*x2295)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2297.value)))+(x2298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2299=IKsin(j4);
IkReal x2300=IKcos(j4);
IkReal x2301=(cj5*r10);
IkReal x2302=(r01*sj5);
IkReal x2303=((1.0)*cj2);
IkReal x2304=(cj5*r00);
IkReal x2305=(cj5*r20);
IkReal x2306=((1.0)*x2300);
IkReal x2307=((1.0)*x2299);
IkReal x2308=(sj5*x2299);
evalcond[0]=((((-1.0)*r22*x2306))+((r21*x2308))+(((-1.0)*x2305*x2307)));
evalcond[1]=((((-1.0)*x2301*x2307))+((r11*x2308))+(((-1.0)*r12*x2306)));
evalcond[2]=(((x2300*x2304))+(((-1.0)*x2302*x2306))+(((-1.0)*r02*x2307)));
evalcond[3]=((-1.0)+(((-1.0)*x2304*x2307))+((x2299*x2302))+(((-1.0)*r02*x2306)));
evalcond[4]=((((-1.0)*r22*x2307))+((x2300*x2305))+((sj1*sj2))+(((-1.0)*r21*sj5*x2306))+(((-1.0)*cj1*x2303)));
evalcond[5]=((((-1.0)*sj1*x2303))+((x2300*x2301))+(((-1.0)*r11*sj5*x2306))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2309=((1.0)*cj5);
CheckValue<IkReal> x2310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2309))+(((-1.0)*r10*sj5)))),-1);
if(!x2310.valid){
continue;
}
CheckValue<IkReal> x2311 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2309))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2310.value)))+(x2311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2312=IKsin(j4);
IkReal x2313=IKcos(j4);
IkReal x2314=(cj5*r10);
IkReal x2315=(r01*sj5);
IkReal x2316=((1.0)*cj2);
IkReal x2317=(cj5*r00);
IkReal x2318=(cj5*r20);
IkReal x2319=((1.0)*x2313);
IkReal x2320=((1.0)*x2312);
IkReal x2321=(sj5*x2312);
evalcond[0]=((((-1.0)*r22*x2319))+(((-1.0)*x2318*x2320))+((r21*x2321)));
evalcond[1]=(((r11*x2321))+(((-1.0)*r12*x2319))+(((-1.0)*x2314*x2320)));
evalcond[2]=((((-1.0)*x2315*x2319))+(((-1.0)*r02*x2320))+((x2313*x2317)));
evalcond[3]=((-1.0)+((x2312*x2315))+(((-1.0)*x2317*x2320))+(((-1.0)*r02*x2319)));
evalcond[4]=((((-1.0)*r22*x2320))+((sj1*sj2))+(((-1.0)*cj1*x2316))+(((-1.0)*r21*sj5*x2319))+((x2313*x2318)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2319))+(((-1.0)*r12*x2320))+(((-1.0)*sj1*x2316))+((x2313*x2314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2322=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2322.valid){
continue;
}
CheckValue<IkReal> x2323 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2322.value)))+(x2323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2324=IKsin(j4);
IkReal x2325=IKcos(j4);
IkReal x2326=(cj5*r10);
IkReal x2327=(r01*sj5);
IkReal x2328=((1.0)*cj2);
IkReal x2329=(cj5*r00);
IkReal x2330=(cj5*r20);
IkReal x2331=((1.0)*x2325);
IkReal x2332=((1.0)*x2324);
IkReal x2333=(sj5*x2324);
evalcond[0]=(((r21*x2333))+(((-1.0)*r22*x2331))+(((-1.0)*x2330*x2332)));
evalcond[1]=(((r11*x2333))+(((-1.0)*x2326*x2332))+(((-1.0)*r12*x2331)));
evalcond[2]=((((-1.0)*r02*x2332))+((x2325*x2329))+(((-1.0)*x2327*x2331)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2331))+(((-1.0)*x2329*x2332))+((x2324*x2327)));
evalcond[4]=((((-1.0)*r22*x2332))+((sj1*sj2))+(((-1.0)*cj1*x2328))+((x2325*x2330))+(((-1.0)*r21*sj5*x2331)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2331))+(((-1.0)*sj1*x2328))+((x2325*x2326))+(((-1.0)*r12*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2334=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2334;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2335=((1.0)*cj5);
IkReal x2336=((((-1.0)*r21*x2335))+(((-1.0)*r20*sj5)));
j4eval[0]=x2336;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2335))+((r11*sj5))))));
j4eval[2]=IKsign(x2336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2337=cj5*cj5;
IkReal x2338=r01*r01;
IkReal x2339=(cj5*r00);
IkReal x2340=(r01*sj5);
IkReal x2341=(x2338+(((-2.0)*x2339*x2340))+((x2337*(r00*r00)))+(r02*r02)+(((-1.0)*x2337*x2338)));
j4eval[0]=x2341;
j4eval[1]=((IKabs(r02))+(IKabs((x2339+(((-1.0)*x2340))))));
j4eval[2]=IKsign(x2341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2342=cj5*cj5;
IkReal x2343=r01*r01;
IkReal x2344=(r01*sj5);
IkReal x2345=(cj5*r00);
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal((x2345+(((-1.0)*x2344)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
CheckValue<IkReal> x2347=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2344*x2345))+x2343+((x2342*(r00*r00)))+(r02*r02)+(((-1.0)*x2342*x2343)))),-1);
if(!x2347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2346.value)+(((1.5707963267949)*(x2347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2348=IKsin(j4);
IkReal x2349=IKcos(j4);
IkReal x2350=(cj5*r10);
IkReal x2351=(r01*sj5);
IkReal x2352=(cj5*r00);
IkReal x2353=(cj5*r20);
IkReal x2354=((1.0)*x2349);
IkReal x2355=((1.0)*x2348);
IkReal x2356=(sj5*x2348);
evalcond[0]=((((-1.0)*x2353*x2355))+(((-1.0)*r22*x2354))+((r21*x2356)));
evalcond[1]=(((r11*x2356))+(((-1.0)*x2350*x2355))+(((-1.0)*r12*x2354)));
evalcond[2]=((((-1.0)*r02*x2355))+((x2349*x2352))+(((-1.0)*x2351*x2354)));
evalcond[3]=((1.0)+((x2348*x2351))+(((-1.0)*x2352*x2355))+(((-1.0)*r02*x2354)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2354))+((cj1*sj2))+((x2349*x2350))+(((-1.0)*r12*x2355)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2355))+((x2349*x2353))+(((-1.0)*r21*sj5*x2354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2357=((1.0)*cj5);
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2357))+(((-1.0)*r20*sj5)))),-1);
if(!x2359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2358.value)+(((1.5707963267949)*(x2359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2360=IKsin(j4);
IkReal x2361=IKcos(j4);
IkReal x2362=(cj5*r10);
IkReal x2363=(r01*sj5);
IkReal x2364=(cj5*r00);
IkReal x2365=(cj5*r20);
IkReal x2366=((1.0)*x2361);
IkReal x2367=((1.0)*x2360);
IkReal x2368=(sj5*x2360);
evalcond[0]=((((-1.0)*x2365*x2367))+(((-1.0)*r22*x2366))+((r21*x2368)));
evalcond[1]=(((r11*x2368))+(((-1.0)*x2362*x2367))+(((-1.0)*r12*x2366)));
evalcond[2]=(((x2361*x2364))+(((-1.0)*x2363*x2366))+(((-1.0)*r02*x2367)));
evalcond[3]=((1.0)+((x2360*x2363))+(((-1.0)*x2364*x2367))+(((-1.0)*r02*x2366)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2366))+((cj1*sj2))+((x2361*x2362))+(((-1.0)*r12*x2367)));
evalcond[5]=((((-1.0)*r21*sj5*x2366))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2361*x2365))+(((-1.0)*r22*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2369 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2369.valid){
continue;
}
CheckValue<IkReal> x2370=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2369.value)+(((1.5707963267949)*(x2370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2371=IKsin(j4);
IkReal x2372=IKcos(j4);
IkReal x2373=(cj5*r10);
IkReal x2374=(r01*sj5);
IkReal x2375=(cj5*r00);
IkReal x2376=(cj5*r20);
IkReal x2377=((1.0)*x2372);
IkReal x2378=((1.0)*x2371);
IkReal x2379=(sj5*x2371);
evalcond[0]=((((-1.0)*x2376*x2378))+(((-1.0)*r22*x2377))+((r21*x2379)));
evalcond[1]=((((-1.0)*x2373*x2378))+(((-1.0)*r12*x2377))+((r11*x2379)));
evalcond[2]=(((x2372*x2375))+(((-1.0)*r02*x2378))+(((-1.0)*x2374*x2377)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2377))+((x2371*x2374))+(((-1.0)*x2375*x2378)));
evalcond[4]=(((x2372*x2373))+(((-1.0)*r11*sj5*x2377))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2378)));
evalcond[5]=(((x2372*x2376))+(((-1.0)*r21*sj5*x2377))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2380=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2380);
rxp1_1=(px*r21);
rxp1_2=(r11*x2380);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2381=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2381);
rxp1_1=(px*r21);
rxp1_2=(r11*x2381);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2382=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2382);
rxp1_1=(px*r21);
rxp1_2=(r11*x2382);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2385=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2385.valid){
continue;
}
IkReal x2383=x2385.value;
IkReal x2384=(sj0*x2383);
cj4array[0]=(((cj2*sj1*x2384))+((cj1*sj2*x2384)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2386=IKsin(j4);
IkReal x2387=IKcos(j4);
IkReal x2388=(cj5*r20);
IkReal x2389=(r21*sj5);
IkReal x2390=((1.0)*x2386);
IkReal x2391=((1.0)*x2387);
evalcond[0]=((-1.0)*r02*x2386);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2391)));
evalcond[2]=((((-1.0)*x2388*x2390))+((x2386*x2389)));
evalcond[3]=((((-1.0)*cj5*r10*x2390))+((r11*sj5*x2386)));
evalcond[4]=(((x2387*x2388))+(((-1.0)*x2389*x2391))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2393=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2393.valid){
continue;
}
IkReal x2392=x2393.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2392))+((cj1*cj2*x2392)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2394=IKsin(j4);
IkReal x2395=IKcos(j4);
IkReal x2396=(r11*sj5);
IkReal x2397=((1.0)*sj0);
IkReal x2398=((1.0)*x2395);
IkReal x2399=((1.0)*cj5*x2394);
evalcond[0]=((-1.0)*r02*x2394);
evalcond[1]=((((-1.0)*r02*x2398))+(((-1.0)*x2397)));
evalcond[2]=((((-1.0)*r20*x2399))+((r21*sj5*x2394)));
evalcond[3]=((((-1.0)*r10*x2399))+((x2394*x2396)));
evalcond[4]=((((-1.0)*cj1*sj2*x2397))+(((-1.0)*x2396*x2398))+(((-1.0)*cj2*sj1*x2397))+((cj5*r10*x2395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2400=IKPowWithIntegerCheck(r02,-1);
if(!x2400.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2400.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2401=IKsin(j4);
IkReal x2402=IKcos(j4);
IkReal x2403=((1.0)*sj0);
IkReal x2404=(cj5*x2402);
IkReal x2405=(sj5*x2401);
IkReal x2406=((1.0)*sj5*x2402);
IkReal x2407=((1.0)*cj5*x2401);
evalcond[0]=((-1.0)*r02*x2401);
evalcond[1]=(((r21*x2405))+(((-1.0)*r20*x2407)));
evalcond[2]=(((r11*x2405))+(((-1.0)*r10*x2407)));
evalcond[3]=(((r20*x2404))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2406)));
evalcond[4]=(((r10*x2404))+(((-1.0)*cj2*sj1*x2403))+(((-1.0)*cj1*sj2*x2403))+(((-1.0)*r11*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2408=((1.0)*sj0);
IkReal x2409=((1.0)*cj0);
CheckValue<IkReal> x2410 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2409))+(((-1.0)*r12*x2408)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2409))+(((-1.0)*r11*sj5*x2408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2410.valid){
continue;
}
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2410.value)+(((1.5707963267949)*(x2411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2412=IKsin(j4);
IkReal x2413=IKcos(j4);
IkReal x2414=(cj5*r10);
IkReal x2415=(r01*sj5);
IkReal x2416=((1.0)*cj2);
IkReal x2417=(cj5*r00);
IkReal x2418=((1.0)*sj0);
IkReal x2419=(cj5*r20);
IkReal x2420=(cj1*sj2);
IkReal x2421=((1.0)*x2413);
IkReal x2422=((1.0)*x2412);
IkReal x2423=(sj5*x2412);
evalcond[0]=(((r21*x2423))+(((-1.0)*r22*x2421))+(((-1.0)*x2419*x2422)));
evalcond[1]=(cj0+(((-1.0)*r12*x2421))+((r11*x2423))+(((-1.0)*x2414*x2422)));
evalcond[2]=((((-1.0)*r02*x2421))+(((-1.0)*x2418))+(((-1.0)*x2417*x2422))+((x2412*x2415)));
evalcond[3]=(((x2413*x2419))+((sj1*sj2))+(((-1.0)*r22*x2422))+(((-1.0)*cj1*x2416))+(((-1.0)*r21*sj5*x2421)));
evalcond[4]=((((-1.0)*r02*x2422))+(((-1.0)*cj0*sj1*x2416))+((x2413*x2417))+(((-1.0)*cj0*x2420))+(((-1.0)*x2415*x2421)));
evalcond[5]=((((-1.0)*r11*sj5*x2421))+((x2413*x2414))+(((-1.0)*r12*x2422))+(((-1.0)*x2418*x2420))+(((-1.0)*sj0*sj1*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2424=((1.0)*cj5);
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2424)))),-1);
if(!x2425.valid){
continue;
}
CheckValue<IkReal> x2426 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2424))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2425.value)))+(x2426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2427=IKsin(j4);
IkReal x2428=IKcos(j4);
IkReal x2429=(cj5*r10);
IkReal x2430=(r01*sj5);
IkReal x2431=((1.0)*cj2);
IkReal x2432=(cj5*r00);
IkReal x2433=((1.0)*sj0);
IkReal x2434=(cj5*r20);
IkReal x2435=(cj1*sj2);
IkReal x2436=((1.0)*x2428);
IkReal x2437=((1.0)*x2427);
IkReal x2438=(sj5*x2427);
evalcond[0]=((((-1.0)*r22*x2436))+(((-1.0)*x2434*x2437))+((r21*x2438)));
evalcond[1]=(((r11*x2438))+cj0+(((-1.0)*x2429*x2437))+(((-1.0)*r12*x2436)));
evalcond[2]=((((-1.0)*x2433))+(((-1.0)*r02*x2436))+(((-1.0)*x2432*x2437))+((x2427*x2430)));
evalcond[3]=((((-1.0)*r22*x2437))+((x2428*x2434))+(((-1.0)*r21*sj5*x2436))+((sj1*sj2))+(((-1.0)*cj1*x2431)));
evalcond[4]=((((-1.0)*cj0*x2435))+((x2428*x2432))+(((-1.0)*x2430*x2436))+(((-1.0)*r02*x2437))+(((-1.0)*cj0*sj1*x2431)));
evalcond[5]=((((-1.0)*x2433*x2435))+(((-1.0)*sj0*sj1*x2431))+((x2428*x2429))+(((-1.0)*r11*sj5*x2436))+(((-1.0)*r12*x2437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2439=((1.0)*cj5);
CheckValue<IkReal> x2440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2439)))),-1);
if(!x2440.valid){
continue;
}
CheckValue<IkReal> x2441 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2440.value)))+(x2441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2442=IKsin(j4);
IkReal x2443=IKcos(j4);
IkReal x2444=(cj5*r10);
IkReal x2445=(r01*sj5);
IkReal x2446=((1.0)*cj2);
IkReal x2447=(cj5*r00);
IkReal x2448=((1.0)*sj0);
IkReal x2449=(cj5*r20);
IkReal x2450=(cj1*sj2);
IkReal x2451=((1.0)*x2443);
IkReal x2452=((1.0)*x2442);
IkReal x2453=(sj5*x2442);
evalcond[0]=((((-1.0)*x2449*x2452))+(((-1.0)*r22*x2451))+((r21*x2453)));
evalcond[1]=(cj0+(((-1.0)*x2444*x2452))+(((-1.0)*r12*x2451))+((r11*x2453)));
evalcond[2]=(((x2442*x2445))+(((-1.0)*x2447*x2452))+(((-1.0)*x2448))+(((-1.0)*r02*x2451)));
evalcond[3]=(((x2443*x2449))+((sj1*sj2))+(((-1.0)*r22*x2452))+(((-1.0)*cj1*x2446))+(((-1.0)*r21*sj5*x2451)));
evalcond[4]=((((-1.0)*cj0*x2450))+((x2443*x2447))+(((-1.0)*x2445*x2451))+(((-1.0)*cj0*sj1*x2446))+(((-1.0)*r02*x2452)));
evalcond[5]=(((x2443*x2444))+(((-1.0)*x2448*x2450))+(((-1.0)*r11*sj5*x2451))+(((-1.0)*r12*x2452))+(((-1.0)*sj0*sj1*x2446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2454=cj5*cj5;
IkReal x2455=r21*r21;
IkReal x2456=(sj1*sj2);
IkReal x2457=(r21*sj5);
IkReal x2458=(cj1*cj2);
IkReal x2459=(cj5*r20);
CheckValue<IkReal> x2460 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2458))+((r22*x2456)))),IkReal((((x2458*x2459))+(((-1.0)*x2457*x2458))+((x2456*x2457))+(((-1.0)*x2456*x2459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2460.valid){
continue;
}
CheckValue<IkReal> x2461=IKPowWithIntegerCheck(IKsign((((x2454*(r20*r20)))+x2455+(r22*r22)+(((-2.0)*x2457*x2459))+(((-1.0)*x2454*x2455)))),-1);
if(!x2461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2460.value)+(((1.5707963267949)*(x2461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2462=IKsin(j4);
IkReal x2463=IKcos(j4);
IkReal x2464=(r21*sj5);
IkReal x2465=(cj5*r20);
IkReal x2466=((1.0)*x2463);
IkReal x2467=((1.0)*x2462);
evalcond[0]=((((-1.0)*r22*x2466))+(((-1.0)*x2465*x2467))+((x2462*x2464)));
evalcond[1]=((((-1.0)*x2464*x2466))+(((-1.0)*r22*x2467))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2463*x2465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2468=(cj5*sj4);
IkReal x2469=(sj4*sj5);
if( IKabs((((r01*x2469))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2468)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2469))+((r10*x2468))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2469))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2468))))+IKsqr(((((-1.0)*r11*x2469))+((r10*x2468))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2469))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2468))), ((((-1.0)*r11*x2469))+((r10*x2468))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2470=IKcos(j0);
IkReal x2471=IKsin(j0);
IkReal x2472=(cj4*cj5);
IkReal x2473=((0.1)*sj5);
IkReal x2474=((0.392)*sj1);
IkReal x2475=(cj5*r11);
IkReal x2476=(cj5*r01);
IkReal x2477=((1.0)*cj1);
IkReal x2478=(r11*sj5);
IkReal x2479=((1.0)*sj4);
IkReal x2480=((0.392)*cj2);
IkReal x2481=((1.0)*sj1);
IkReal x2482=((1.0)*cj4);
IkReal x2483=(r01*sj5);
IkReal x2484=(sj2*x2471);
IkReal x2485=(sj2*x2470);
IkReal x2486=(cj1*x2470);
IkReal x2487=(cj2*x2470);
IkReal x2488=(cj1*x2471);
IkReal x2489=(cj2*x2471);
evalcond[0]=(x2470+(((-1.0)*cj5*r10*x2479))+((sj4*x2478))+(((-1.0)*r12*x2482)));
evalcond[1]=((((-1.0)*x2471))+(((-1.0)*cj5*r00*x2479))+(((-1.0)*r02*x2482))+((sj4*x2483)));
evalcond[2]=(((r00*sj5))+x2476+(((-1.0)*x2477*x2487))+((sj1*x2485)));
evalcond[3]=(x2475+((r10*sj5))+(((-1.0)*x2477*x2489))+((sj1*x2484)));
evalcond[4]=((((-1.0)*x2477*x2485))+((r00*x2472))+(((-1.0)*x2482*x2483))+(((-1.0)*r02*x2479))+(((-1.0)*x2481*x2487)));
evalcond[5]=((((-1.0)*r12*x2479))+(((-1.0)*x2477*x2484))+((r10*x2472))+(((-1.0)*x2481*x2489))+(((-1.0)*x2478*x2482)));
evalcond[6]=((((-0.1)*x2476))+(((-1.0)*r00*x2473))+((x2480*x2486))+(((-1.0)*px))+(((-0.134)*x2471))+(((-1.0)*x2474*x2485))+(((0.425)*x2486)));
evalcond[7]=((((-0.1)*x2475))+((x2480*x2488))+(((-1.0)*py))+(((-1.0)*r10*x2473))+(((-1.0)*x2474*x2484))+(((0.425)*x2488))+(((0.134)*x2470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2490=((1.0)*cj5);
IkReal x2491=((1.0)*sj5);
CheckValue<IkReal> x2492=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2492.valid){
continue;
}
CheckValue<IkReal> x2493 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2491))+(((-1.0)*r11*x2490)))),IkReal(((((-1.0)*r01*x2490))+(((-1.0)*r00*x2491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2493.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2492.value)))+(x2493.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2494=IKcos(j0);
IkReal x2495=IKsin(j0);
IkReal x2496=((0.1)*sj5);
IkReal x2497=(cj5*r11);
IkReal x2498=(cj5*r01);
IkReal x2499=(sj1*sj2);
IkReal x2500=(cj1*cj2);
IkReal x2501=((0.392)*x2495);
IkReal x2502=(cj1*x2494);
evalcond[0]=(((r00*sj5))+x2498+((x2494*x2499))+(((-1.0)*x2494*x2500)));
evalcond[1]=(x2497+((r10*sj5))+(((-1.0)*x2495*x2500))+((x2495*x2499)));
evalcond[2]=((((0.392)*x2494*x2500))+(((-0.134)*x2495))+(((0.425)*x2502))+(((-1.0)*r00*x2496))+(((-1.0)*px))+(((-0.1)*x2498))+(((-0.392)*x2494*x2499)));
evalcond[3]=(((x2500*x2501))+(((-1.0)*r10*x2496))+(((0.425)*cj1*x2495))+(((-1.0)*py))+(((-1.0)*x2499*x2501))+(((-0.1)*x2497))+(((0.134)*x2494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2503=((1.0)*cj5);
IkReal x2504=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2503)));
j4eval[0]=x2504;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2503)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2505=((1.0)*cj5);
IkReal x2506=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2505)));
j4eval[0]=x2506;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2505))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2506);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2507=((1.0)*sj0);
IkReal x2508=((1.0)*cj0);
IkReal x2509=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2509;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x2508))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2507)))))+(IKabs(((((-1.0)*r02*x2508))+(((-1.0)*r12*x2507))))));
j4eval[2]=IKsign(x2509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2510=((-1.0)*r20);
IkReal x2512 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2512)==0){
continue;
}
IkReal x2511=pow(x2512,-0.5);
CheckValue<IkReal> x2513 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2510),IKFAST_ATAN2_MAGTHRESH);
if(!x2513.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2513.value));
IkReal gconst79=(r21*x2511);
IkReal gconst80=(x2510*x2511);
CheckValue<IkReal> x2514 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2514.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2514.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2515=((-1.0)*r20);
IkReal x2516=x2511;
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2515),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
IkReal x2517=((-1.0)*(x2518.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2517;
IkReal gconst78=x2517;
IkReal gconst79=(r21*x2516);
IkReal gconst80=(x2515*x2516);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2519=((-1.0)*r20);
IkReal x2520=x2511;
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2519),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
IkReal x2521=((-1.0)*(x2522.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2521;
IkReal gconst78=x2521;
IkReal gconst79=(r21*x2520);
IkReal gconst80=(x2519*x2520);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2523=((-1.0)*r20);
IkReal x2524=x2511;
CheckValue<IkReal> x2526 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2523),IKFAST_ATAN2_MAGTHRESH);
if(!x2526.valid){
continue;
}
IkReal x2525=((-1.0)*(x2526.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2525;
IkReal gconst78=x2525;
IkReal gconst79=(r21*x2524);
IkReal gconst80=(x2523*x2524);
IkReal x2527=r22*r22;
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2527))),-1);
if(!x2530.valid){
continue;
}
IkReal x2528=x2530.value;
IkReal x2529=(x2527+((x2528*(r21*r21*r21*r21)))+(((2.0)*x2528*(r20*r20)*(r21*r21)))+((x2528*(r20*r20*r20*r20))));
j4eval[0]=x2529;
j4eval[1]=IKsign(x2529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2531=(sj1*sj2);
IkReal x2532=(gconst80*r20);
IkReal x2533=(gconst79*r21);
IkReal x2534=(cj1*cj2);
CheckValue<IkReal> x2535=IKPowWithIntegerCheck(IKsign(((x2532*x2532)+(r22*r22)+(x2533*x2533)+(((-2.0)*x2532*x2533)))),-1);
if(!x2535.valid){
continue;
}
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2534))+((r22*x2531)))),IkReal((((x2531*x2533))+(((-1.0)*x2533*x2534))+((x2532*x2534))+(((-1.0)*x2531*x2532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2535.value)))+(x2536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2537=IKsin(j4);
IkReal x2538=IKcos(j4);
IkReal x2539=(gconst79*r01);
IkReal x2540=(gconst79*r21);
IkReal x2541=((1.0)*cj2);
IkReal x2542=(gconst79*r11);
IkReal x2543=((1.0)*sj0);
IkReal x2544=(cj1*sj2);
IkReal x2545=((1.0)*x2538);
IkReal x2546=(gconst80*x2538);
IkReal x2547=((1.0)*x2537);
IkReal x2548=(gconst80*x2547);
evalcond[0]=(((x2537*x2540))+(((-1.0)*r20*x2548))+(((-1.0)*r22*x2545)));
evalcond[1]=((((-1.0)*r12*x2545))+(((-1.0)*r10*x2548))+cj0+((x2537*x2542)));
evalcond[2]=((((-1.0)*r00*x2548))+(((-1.0)*x2543))+(((-1.0)*r02*x2545))+((x2537*x2539)));
evalcond[3]=(((sj1*sj2))+((r20*x2546))+(((-1.0)*cj1*x2541))+(((-1.0)*r22*x2547))+(((-1.0)*x2540*x2545)));
evalcond[4]=((((-1.0)*x2539*x2545))+((r00*x2546))+(((-1.0)*cj0*x2544))+(((-1.0)*r02*x2547))+(((-1.0)*cj0*sj1*x2541)));
evalcond[5]=((((-1.0)*x2542*x2545))+(((-1.0)*r12*x2547))+(((-1.0)*x2543*x2544))+(((-1.0)*sj0*sj1*x2541))+((r10*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2549=((1.0)*gconst80);
CheckValue<IkReal> x2550 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x2549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2550.valid){
continue;
}
CheckValue<IkReal> x2551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2549))+(((-1.0)*gconst79*r10)))),-1);
if(!x2551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2550.value)+(((1.5707963267949)*(x2551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2552=IKsin(j4);
IkReal x2553=IKcos(j4);
IkReal x2554=(gconst79*r01);
IkReal x2555=(gconst79*r21);
IkReal x2556=((1.0)*cj2);
IkReal x2557=(gconst79*r11);
IkReal x2558=((1.0)*sj0);
IkReal x2559=(cj1*sj2);
IkReal x2560=((1.0)*x2553);
IkReal x2561=(gconst80*x2553);
IkReal x2562=((1.0)*x2552);
IkReal x2563=(gconst80*x2562);
evalcond[0]=((((-1.0)*r22*x2560))+(((-1.0)*r20*x2563))+((x2552*x2555)));
evalcond[1]=(cj0+((x2552*x2557))+(((-1.0)*r12*x2560))+(((-1.0)*r10*x2563)));
evalcond[2]=((((-1.0)*r00*x2563))+(((-1.0)*r02*x2560))+((x2552*x2554))+(((-1.0)*x2558)));
evalcond[3]=((((-1.0)*r22*x2562))+(((-1.0)*x2555*x2560))+((sj1*sj2))+((r20*x2561))+(((-1.0)*cj1*x2556)));
evalcond[4]=(((r00*x2561))+(((-1.0)*cj0*sj1*x2556))+(((-1.0)*r02*x2562))+(((-1.0)*cj0*x2559))+(((-1.0)*x2554*x2560)));
evalcond[5]=((((-1.0)*x2557*x2560))+(((-1.0)*x2558*x2559))+((r10*x2561))+(((-1.0)*sj0*sj1*x2556))+(((-1.0)*r12*x2562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2564=((1.0)*gconst80);
CheckValue<IkReal> x2565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2564))+(((-1.0)*gconst79*r00)))),-1);
if(!x2565.valid){
continue;
}
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2565.value)))+(x2566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2567=IKsin(j4);
IkReal x2568=IKcos(j4);
IkReal x2569=(gconst79*r01);
IkReal x2570=(gconst79*r21);
IkReal x2571=((1.0)*cj2);
IkReal x2572=(gconst79*r11);
IkReal x2573=((1.0)*sj0);
IkReal x2574=(cj1*sj2);
IkReal x2575=((1.0)*x2568);
IkReal x2576=(gconst80*x2568);
IkReal x2577=((1.0)*x2567);
IkReal x2578=(gconst80*x2577);
evalcond[0]=(((x2567*x2570))+(((-1.0)*r20*x2578))+(((-1.0)*r22*x2575)));
evalcond[1]=((((-1.0)*r10*x2578))+(((-1.0)*r12*x2575))+cj0+((x2567*x2572)));
evalcond[2]=(((x2567*x2569))+(((-1.0)*x2573))+(((-1.0)*r02*x2575))+(((-1.0)*r00*x2578)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2570*x2575))+((r20*x2576))+(((-1.0)*cj1*x2571))+(((-1.0)*r22*x2577)));
evalcond[4]=((((-1.0)*x2569*x2575))+(((-1.0)*cj0*x2574))+((r00*x2576))+(((-1.0)*r02*x2577))+(((-1.0)*cj0*sj1*x2571)));
evalcond[5]=(((r10*x2576))+(((-1.0)*r12*x2577))+(((-1.0)*sj0*sj1*x2571))+(((-1.0)*x2573*x2574))+(((-1.0)*x2572*x2575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2579=((-1.0)*r21);
IkReal x2581 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2581)==0){
continue;
}
IkReal x2580=pow(x2581,-0.5);
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal(x2579),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2582.value))));
IkReal gconst82=(x2579*x2580);
IkReal gconst83=((1.0)*r20*x2580);
CheckValue<IkReal> x2583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2583.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2583.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2584=((-1.0)*r21);
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(x2584),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
IkReal x2585=((1.0)*(x2587.value));
IkReal x2586=x2580;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2585)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2585)));
IkReal gconst82=(x2584*x2586);
IkReal gconst83=((1.0)*r20*x2586);
IkReal x2588=r22*r22;
IkReal x2589=((1.0)*x2588);
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(((-1.0)+x2588),-1);
if(!x2593.valid){
continue;
}
IkReal x2590=x2593.value;
if((((1.0)+(((-1.0)*x2589)))) < -0.00001)
continue;
IkReal x2591=IKsqrt(((1.0)+(((-1.0)*x2589))));
IkReal x2592=(cj0*x2590*x2591);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2592+(((-1.0)*x2589*x2592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2594=((-1.0)*r21);
CheckValue<IkReal> x2597 = IKatan2WithCheck(IkReal(x2594),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2597.valid){
continue;
}
IkReal x2595=((1.0)*(x2597.value));
IkReal x2596=x2580;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2595)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2595)));
IkReal gconst82=(x2594*x2596);
IkReal gconst83=((1.0)*r20*x2596);
IkReal x2598=r22*r22;
IkReal x2599=((1.0)*x2598);
CheckValue<IkReal> x2603=IKPowWithIntegerCheck(((-1.0)+x2598),-1);
if(!x2603.valid){
continue;
}
IkReal x2600=x2603.value;
if((((1.0)+(((-1.0)*x2599)))) < -0.00001)
continue;
IkReal x2601=IKsqrt(((1.0)+(((-1.0)*x2599))));
IkReal x2602=(sj0*x2600*x2601);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2602+(((-1.0)*x2599*x2602))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2604=((-1.0)*r21);
CheckValue<IkReal> x2607 = IKatan2WithCheck(IkReal(x2604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2607.valid){
continue;
}
IkReal x2605=((1.0)*(x2607.value));
IkReal x2606=x2580;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2605)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2605)));
IkReal gconst82=(x2604*x2606);
IkReal gconst83=((1.0)*r20*x2606);
IkReal x2608=r22*r22;
IkReal x2609=(r12*sj0);
IkReal x2610=(cj0*r02);
CheckValue<IkReal> x2614=IKPowWithIntegerCheck(((-1.0)+x2608),-1);
if(!x2614.valid){
continue;
}
IkReal x2611=x2614.value;
if((((1.0)+(((-1.0)*x2608)))) < -0.00001)
continue;
IkReal x2612=IKsqrt(((1.0)+(((-1.0)*x2608))));
IkReal x2613=(r22*x2611*x2612);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2610*x2613))+((x2609*x2613)))))+(IKabs(((((-1.0)*x2609))+(((-1.0)*x2610))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2615=((1.0)*sj0);
IkReal x2616=((1.0)*cj0);
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2617.valid){
continue;
}
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2615))+(((-1.0)*r02*x2616)))),IkReal(((((-1.0)*gconst82*r01*x2616))+(((-1.0)*gconst82*r11*x2615))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2617.value)))+(x2618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2619=IKsin(j4);
IkReal x2620=IKcos(j4);
IkReal x2621=(gconst82*r11);
IkReal x2622=((1.0)*cj2);
IkReal x2623=((1.0)*sj0);
IkReal x2624=(cj1*sj2);
IkReal x2625=((1.0)*x2620);
IkReal x2626=(gconst83*x2620);
IkReal x2627=(gconst82*x2619);
IkReal x2628=((1.0)*x2619);
evalcond[0]=((((-1.0)*gconst83*r20*x2628))+(((-1.0)*r22*x2625))+((r21*x2627)));
evalcond[1]=((((-1.0)*gconst83*r10*x2628))+((x2619*x2621))+cj0+(((-1.0)*r12*x2625)));
evalcond[2]=(((r01*x2627))+(((-1.0)*gconst83*r00*x2628))+(((-1.0)*r02*x2625))+(((-1.0)*x2623)));
evalcond[3]=(((r20*x2626))+(((-1.0)*gconst82*r21*x2625))+((sj1*sj2))+(((-1.0)*r22*x2628))+(((-1.0)*cj1*x2622)));
evalcond[4]=(((r00*x2626))+(((-1.0)*gconst82*r01*x2625))+(((-1.0)*cj0*x2624))+(((-1.0)*r02*x2628))+(((-1.0)*cj0*sj1*x2622)));
evalcond[5]=((((-1.0)*x2623*x2624))+(((-1.0)*r12*x2628))+(((-1.0)*sj0*sj1*x2622))+((r10*x2626))+(((-1.0)*x2621*x2625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2629=((1.0)*gconst83);
CheckValue<IkReal> x2630=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2629))+(((-1.0)*gconst82*r10)))),-1);
if(!x2630.valid){
continue;
}
CheckValue<IkReal> x2631 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2629))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2630.value)))+(x2631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2632=IKsin(j4);
IkReal x2633=IKcos(j4);
IkReal x2634=(gconst82*r11);
IkReal x2635=((1.0)*cj2);
IkReal x2636=((1.0)*sj0);
IkReal x2637=(cj1*sj2);
IkReal x2638=((1.0)*x2633);
IkReal x2639=(gconst83*x2633);
IkReal x2640=(gconst82*x2632);
IkReal x2641=((1.0)*x2632);
evalcond[0]=((((-1.0)*gconst83*r20*x2641))+((r21*x2640))+(((-1.0)*r22*x2638)));
evalcond[1]=(cj0+((x2632*x2634))+(((-1.0)*gconst83*r10*x2641))+(((-1.0)*r12*x2638)));
evalcond[2]=((((-1.0)*r02*x2638))+(((-1.0)*x2636))+((r01*x2640))+(((-1.0)*gconst83*r00*x2641)));
evalcond[3]=((((-1.0)*r22*x2641))+(((-1.0)*cj1*x2635))+((sj1*sj2))+((r20*x2639))+(((-1.0)*gconst82*r21*x2638)));
evalcond[4]=((((-1.0)*cj0*sj1*x2635))+(((-1.0)*r02*x2641))+(((-1.0)*gconst82*r01*x2638))+((r00*x2639))+(((-1.0)*cj0*x2637)));
evalcond[5]=((((-1.0)*sj0*sj1*x2635))+(((-1.0)*r12*x2641))+((r10*x2639))+(((-1.0)*x2634*x2638))+(((-1.0)*x2636*x2637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2642=((1.0)*gconst83);
CheckValue<IkReal> x2643 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2643.valid){
continue;
}
CheckValue<IkReal> x2644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2642))+(((-1.0)*gconst82*r00)))),-1);
if(!x2644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2643.value)+(((1.5707963267949)*(x2644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2645=IKsin(j4);
IkReal x2646=IKcos(j4);
IkReal x2647=(gconst82*r11);
IkReal x2648=((1.0)*cj2);
IkReal x2649=((1.0)*sj0);
IkReal x2650=(cj1*sj2);
IkReal x2651=((1.0)*x2646);
IkReal x2652=(gconst83*x2646);
IkReal x2653=(gconst82*x2645);
IkReal x2654=((1.0)*x2645);
evalcond[0]=((((-1.0)*r22*x2651))+(((-1.0)*gconst83*r20*x2654))+((r21*x2653)));
evalcond[1]=(cj0+(((-1.0)*r12*x2651))+((x2645*x2647))+(((-1.0)*gconst83*r10*x2654)));
evalcond[2]=((((-1.0)*r02*x2651))+((r01*x2653))+(((-1.0)*x2649))+(((-1.0)*gconst83*r00*x2654)));
evalcond[3]=((((-1.0)*r22*x2654))+(((-1.0)*cj1*x2648))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2651))+((r20*x2652)));
evalcond[4]=((((-1.0)*r02*x2654))+(((-1.0)*cj0*sj1*x2648))+(((-1.0)*gconst82*r01*x2651))+((r00*x2652))+(((-1.0)*cj0*x2650)));
evalcond[5]=((((-1.0)*r12*x2654))+(((-1.0)*x2647*x2651))+((r10*x2652))+(((-1.0)*sj0*sj1*x2648))+(((-1.0)*x2649*x2650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2655=((-1.0)*r10);
IkReal x2657 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2657)==0){
continue;
}
IkReal x2656=pow(x2657,-0.5);
CheckValue<IkReal> x2658 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2655),IKFAST_ATAN2_MAGTHRESH);
if(!x2658.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2658.value));
IkReal gconst85=(r11*x2656);
IkReal gconst86=(x2655*x2656);
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2659.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2660=((-1.0)*r10);
IkReal x2661=x2656;
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2660),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
IkReal x2662=((-1.0)*(x2663.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2662;
IkReal gconst84=x2662;
IkReal gconst85=(r11*x2661);
IkReal gconst86=(x2660*x2661);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2664=((1.0)*sj0);
IkReal x2665=((1.0)*gconst85);
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2665)))),-1);
if(!x2666.valid){
continue;
}
CheckValue<IkReal> x2667 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2664))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2665))+(((-1.0)*gconst85*r11*x2664))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2666.value)))+(x2667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2668=IKsin(j4);
IkReal x2669=IKcos(j4);
IkReal x2670=(gconst85*r21);
IkReal x2671=(gconst86*r00);
IkReal x2672=(gconst86*r10);
IkReal x2673=((1.0)*cj2);
IkReal x2674=(gconst85*r11);
IkReal x2675=(gconst85*r01);
IkReal x2676=((1.0)*sj0);
IkReal x2677=(gconst86*r20);
IkReal x2678=(cj1*sj2);
IkReal x2679=((1.0)*x2669);
IkReal x2680=((1.0)*x2668);
evalcond[0]=(((x2668*x2670))+(((-1.0)*x2677*x2680))+(((-1.0)*r22*x2679)));
evalcond[1]=((((-1.0)*r12*x2679))+cj0+((x2668*x2674))+(((-1.0)*x2672*x2680)));
evalcond[2]=(((x2668*x2675))+(((-1.0)*x2671*x2680))+(((-1.0)*r02*x2679))+(((-1.0)*x2676)));
evalcond[3]=((((-1.0)*x2670*x2679))+(((-1.0)*cj1*x2673))+((sj1*sj2))+(((-1.0)*r22*x2680))+((x2669*x2677)));
evalcond[4]=((((-1.0)*cj0*x2678))+(((-1.0)*r02*x2680))+(((-1.0)*cj0*sj1*x2673))+(((-1.0)*x2675*x2679))+((x2669*x2671)));
evalcond[5]=((((-1.0)*r12*x2680))+(((-1.0)*sj0*sj1*x2673))+(((-1.0)*x2674*x2679))+(((-1.0)*x2676*x2678))+((x2669*x2672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2681=((1.0)*gconst86);
CheckValue<IkReal> x2682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2681))+(((-1.0)*gconst85*r00)))),-1);
if(!x2682.valid){
continue;
}
CheckValue<IkReal> x2683 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2682.value)))+(x2683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2684=IKsin(j4);
IkReal x2685=IKcos(j4);
IkReal x2686=(gconst85*r21);
IkReal x2687=(gconst86*r00);
IkReal x2688=(gconst86*r10);
IkReal x2689=((1.0)*cj2);
IkReal x2690=(gconst85*r11);
IkReal x2691=(gconst85*r01);
IkReal x2692=((1.0)*sj0);
IkReal x2693=(gconst86*r20);
IkReal x2694=(cj1*sj2);
IkReal x2695=((1.0)*x2685);
IkReal x2696=((1.0)*x2684);
evalcond[0]=(((x2684*x2686))+(((-1.0)*r22*x2695))+(((-1.0)*x2693*x2696)));
evalcond[1]=(cj0+((x2684*x2690))+(((-1.0)*x2688*x2696))+(((-1.0)*r12*x2695)));
evalcond[2]=((((-1.0)*r02*x2695))+((x2684*x2691))+(((-1.0)*x2692))+(((-1.0)*x2687*x2696)));
evalcond[3]=((((-1.0)*cj1*x2689))+((sj1*sj2))+(((-1.0)*r22*x2696))+((x2685*x2693))+(((-1.0)*x2686*x2695)));
evalcond[4]=((((-1.0)*x2691*x2695))+(((-1.0)*cj0*x2694))+(((-1.0)*r02*x2696))+((x2685*x2687))+(((-1.0)*cj0*sj1*x2689)));
evalcond[5]=((((-1.0)*x2692*x2694))+((x2685*x2688))+(((-1.0)*r12*x2696))+(((-1.0)*x2690*x2695))+(((-1.0)*sj0*sj1*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2697=((-1.0)*r11);
IkReal x2699 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2699)==0){
continue;
}
IkReal x2698=pow(x2699,-0.5);
CheckValue<IkReal> x2700 = IKatan2WithCheck(IkReal(x2697),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2700.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2700.value))));
IkReal gconst88=(x2697*x2698);
IkReal gconst89=((1.0)*r10*x2698);
CheckValue<IkReal> x2701 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2701.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2701.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2702=((-1.0)*r11);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(x2702),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
IkReal x2703=((1.0)*(x2705.value));
IkReal x2704=x2698;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2703)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2703)));
IkReal gconst88=(x2702*x2704);
IkReal gconst89=((1.0)*r10*x2704);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2706=((-1.0)*r11);
CheckValue<IkReal> x2709 = IKatan2WithCheck(IkReal(x2706),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2709.valid){
continue;
}
IkReal x2707=((1.0)*(x2709.value));
IkReal x2708=x2698;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2707)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2707)));
IkReal gconst88=(x2706*x2708);
IkReal gconst89=((1.0)*r10*x2708);
IkReal x2710=r12*r12;
IkReal x2711=((1.0)*sj0);
IkReal x2712=(cj0*r02);
IkReal x2713=x2698;
j4eval[0]=((IKabs(((((-1.0)*x2712))+(((-1.0)*r12*x2711)))))+(IKabs((((r12*x2712*x2713))+((sj0*x2710*x2713))+(((-1.0)*x2711*x2713))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2714=((-1.0)*r11);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal(x2714),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
IkReal x2715=((1.0)*(x2717.value));
IkReal x2716=x2698;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2715)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2715)));
IkReal gconst88=(x2714*x2716);
IkReal gconst89=((1.0)*r10*x2716);
IkReal x2718=r12*r12;
IkReal x2719=(cj1*cj2*r22);
IkReal x2720=(r22*sj1*sj2);
CheckValue<IkReal> x2724=IKPowWithIntegerCheck(((-1.0)+x2718),-1);
if(!x2724.valid){
continue;
}
IkReal x2721=x2724.value;
if((((1.0)+(((-1.0)*x2718)))) < -0.00001)
continue;
IkReal x2722=IKsqrt(((1.0)+(((-1.0)*x2718))));
IkReal x2723=(r12*x2721*x2722);
j4eval[0]=((IKabs((x2720+(((-1.0)*x2719)))))+(IKabs(((((-1.0)*x2720*x2723))+((x2719*x2723))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2725=(cj1*cj2);
IkReal x2726=(gconst89*r20);
IkReal x2727=(gconst88*r21);
IkReal x2728=(sj1*sj2);
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal((((r22*x2728))+(((-1.0)*r22*x2725)))),IkReal((((x2727*x2728))+((x2725*x2726))+(((-1.0)*x2726*x2728))+(((-1.0)*x2725*x2727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
CheckValue<IkReal> x2730=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2726*x2727))+(r22*r22)+(x2726*x2726)+(x2727*x2727))),-1);
if(!x2730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2729.value)+(((1.5707963267949)*(x2730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2731=IKsin(j4);
IkReal x2732=IKcos(j4);
IkReal x2733=((1.0)*sj0);
IkReal x2734=((1.0)*cj2);
IkReal x2735=(gconst89*r20);
IkReal x2736=(gconst89*r10);
IkReal x2737=(gconst89*r00);
IkReal x2738=(cj1*sj2);
IkReal x2739=((1.0)*x2732);
IkReal x2740=((1.0)*x2731);
IkReal x2741=(gconst88*x2731);
evalcond[0]=(((r21*x2741))+(((-1.0)*x2735*x2740))+(((-1.0)*r22*x2739)));
evalcond[1]=(((r11*x2741))+cj0+(((-1.0)*x2736*x2740))+(((-1.0)*r12*x2739)));
evalcond[2]=(((r01*x2741))+(((-1.0)*r02*x2739))+(((-1.0)*x2733))+(((-1.0)*x2737*x2740)));
evalcond[3]=(((sj1*sj2))+((x2732*x2735))+(((-1.0)*gconst88*r21*x2739))+(((-1.0)*cj1*x2734))+(((-1.0)*r22*x2740)));
evalcond[4]=((((-1.0)*cj0*sj1*x2734))+(((-1.0)*cj0*x2738))+((x2732*x2737))+(((-1.0)*gconst88*r01*x2739))+(((-1.0)*r02*x2740)));
evalcond[5]=((((-1.0)*cj2*sj1*x2733))+(((-1.0)*x2733*x2738))+((x2732*x2736))+(((-1.0)*r12*x2740))+(((-1.0)*gconst88*r11*x2739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2742=((1.0)*sj0);
IkReal x2743=((1.0)*cj0);
CheckValue<IkReal> x2744 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2742))+(((-1.0)*r02*x2743)))),IkReal(((((-1.0)*gconst88*r11*x2742))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2743))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2744.valid){
continue;
}
CheckValue<IkReal> x2745=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2744.value)+(((1.5707963267949)*(x2745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2746=IKsin(j4);
IkReal x2747=IKcos(j4);
IkReal x2748=((1.0)*sj0);
IkReal x2749=((1.0)*cj2);
IkReal x2750=(gconst89*r20);
IkReal x2751=(gconst89*r10);
IkReal x2752=(gconst89*r00);
IkReal x2753=(cj1*sj2);
IkReal x2754=((1.0)*x2747);
IkReal x2755=((1.0)*x2746);
IkReal x2756=(gconst88*x2746);
evalcond[0]=((((-1.0)*r22*x2754))+((r21*x2756))+(((-1.0)*x2750*x2755)));
evalcond[1]=(((r11*x2756))+cj0+(((-1.0)*r12*x2754))+(((-1.0)*x2751*x2755)));
evalcond[2]=((((-1.0)*x2752*x2755))+((r01*x2756))+(((-1.0)*x2748))+(((-1.0)*r02*x2754)));
evalcond[3]=((((-1.0)*r22*x2755))+(((-1.0)*gconst88*r21*x2754))+((sj1*sj2))+(((-1.0)*cj1*x2749))+((x2747*x2750)));
evalcond[4]=((((-1.0)*gconst88*r01*x2754))+(((-1.0)*cj0*x2753))+((x2747*x2752))+(((-1.0)*r02*x2755))+(((-1.0)*cj0*sj1*x2749)));
evalcond[5]=((((-1.0)*gconst88*r11*x2754))+(((-1.0)*cj2*sj1*x2748))+(((-1.0)*r12*x2755))+(((-1.0)*x2748*x2753))+((x2747*x2751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2757=((1.0)*gconst89);
CheckValue<IkReal> x2758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2757))+(((-1.0)*gconst88*r00)))),-1);
if(!x2758.valid){
continue;
}
CheckValue<IkReal> x2759 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2757))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2758.value)))+(x2759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2760=IKsin(j4);
IkReal x2761=IKcos(j4);
IkReal x2762=((1.0)*sj0);
IkReal x2763=((1.0)*cj2);
IkReal x2764=(gconst89*r20);
IkReal x2765=(gconst89*r10);
IkReal x2766=(gconst89*r00);
IkReal x2767=(cj1*sj2);
IkReal x2768=((1.0)*x2761);
IkReal x2769=((1.0)*x2760);
IkReal x2770=(gconst88*x2760);
evalcond[0]=((((-1.0)*x2764*x2769))+((r21*x2770))+(((-1.0)*r22*x2768)));
evalcond[1]=(((r11*x2770))+cj0+(((-1.0)*r12*x2768))+(((-1.0)*x2765*x2769)));
evalcond[2]=(((r01*x2770))+(((-1.0)*x2762))+(((-1.0)*r02*x2768))+(((-1.0)*x2766*x2769)));
evalcond[3]=((((-1.0)*gconst88*r21*x2768))+((x2761*x2764))+((sj1*sj2))+(((-1.0)*cj1*x2763))+(((-1.0)*r22*x2769)));
evalcond[4]=(((x2761*x2766))+(((-1.0)*cj0*x2767))+(((-1.0)*gconst88*r01*x2768))+(((-1.0)*r02*x2769))+(((-1.0)*cj0*sj1*x2763)));
evalcond[5]=((((-1.0)*r12*x2769))+((x2761*x2765))+(((-1.0)*x2762*x2767))+(((-1.0)*cj2*sj1*x2762))+(((-1.0)*gconst88*r11*x2768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2771=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2771;
j4eval[1]=IKsign(x2771);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2772=((1.0)*cj5);
IkReal x2773=((((-1.0)*r01*x2772))+(((-1.0)*r00*sj5)));
j4eval[0]=x2773;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2772))))));
j4eval[2]=IKsign(x2773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2774=cj5*cj5;
IkReal x2775=r11*r11;
IkReal x2776=(r11*sj5);
IkReal x2777=(cj5*r10);
IkReal x2778=(x2775+(r12*r12)+(((-1.0)*x2774*x2775))+(((-2.0)*x2776*x2777))+((x2774*(r10*r10))));
j4eval[0]=x2778;
j4eval[1]=IKsign(x2778);
j4eval[2]=((IKabs((x2777+(((-1.0)*x2776)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2779=cj5*cj5;
IkReal x2780=r11*r11;
IkReal x2781=(cj5*r10);
IkReal x2782=(r11*sj5);
CheckValue<IkReal> x2783 = IKatan2WithCheck(IkReal((x2781+(((-1.0)*x2782)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign((x2780+(r12*r12)+(((-1.0)*x2779*x2780))+(((-2.0)*x2781*x2782))+((x2779*(r10*r10))))),-1);
if(!x2784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2783.value)+(((1.5707963267949)*(x2784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2785=IKsin(j4);
IkReal x2786=IKcos(j4);
IkReal x2787=(cj5*r10);
IkReal x2788=(r01*sj5);
IkReal x2789=((1.0)*cj2);
IkReal x2790=(cj5*r00);
IkReal x2791=(cj5*r20);
IkReal x2792=((1.0)*x2786);
IkReal x2793=((1.0)*x2785);
IkReal x2794=(sj5*x2785);
evalcond[0]=(((r21*x2794))+(((-1.0)*x2791*x2793))+(((-1.0)*r22*x2792)));
evalcond[1]=((((-1.0)*x2790*x2793))+((x2785*x2788))+(((-1.0)*r02*x2792)));
evalcond[2]=((((-1.0)*r11*sj5*x2792))+(((-1.0)*r12*x2793))+((x2786*x2787)));
evalcond[3]=((1.0)+(((-1.0)*x2787*x2793))+((r11*x2794))+(((-1.0)*r12*x2792)));
evalcond[4]=((((-1.0)*cj1*x2789))+((x2786*x2791))+(((-1.0)*r21*sj5*x2792))+((sj1*sj2))+(((-1.0)*r22*x2793)));
evalcond[5]=(((x2786*x2790))+(((-1.0)*sj1*x2789))+(((-1.0)*cj1*sj2))+(((-1.0)*x2788*x2792))+(((-1.0)*r02*x2793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2795=((1.0)*cj5);
CheckValue<IkReal> x2796 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2795))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2796.valid){
continue;
}
CheckValue<IkReal> x2797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2795)))),-1);
if(!x2797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2796.value)+(((1.5707963267949)*(x2797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2798=IKsin(j4);
IkReal x2799=IKcos(j4);
IkReal x2800=(cj5*r10);
IkReal x2801=(r01*sj5);
IkReal x2802=((1.0)*cj2);
IkReal x2803=(cj5*r00);
IkReal x2804=(cj5*r20);
IkReal x2805=((1.0)*x2799);
IkReal x2806=((1.0)*x2798);
IkReal x2807=(sj5*x2798);
evalcond[0]=((((-1.0)*r22*x2805))+(((-1.0)*x2804*x2806))+((r21*x2807)));
evalcond[1]=(((x2798*x2801))+(((-1.0)*x2803*x2806))+(((-1.0)*r02*x2805)));
evalcond[2]=((((-1.0)*r12*x2806))+((x2799*x2800))+(((-1.0)*r11*sj5*x2805)));
evalcond[3]=((1.0)+(((-1.0)*x2800*x2806))+(((-1.0)*r12*x2805))+((r11*x2807)));
evalcond[4]=((((-1.0)*r21*sj5*x2805))+(((-1.0)*cj1*x2802))+((sj1*sj2))+(((-1.0)*r22*x2806))+((x2799*x2804)));
evalcond[5]=((((-1.0)*sj1*x2802))+(((-1.0)*cj1*sj2))+((x2799*x2803))+(((-1.0)*r02*x2806))+(((-1.0)*x2801*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2808=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2808.value)))+(x2809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2810=IKsin(j4);
IkReal x2811=IKcos(j4);
IkReal x2812=(cj5*r10);
IkReal x2813=(r01*sj5);
IkReal x2814=((1.0)*cj2);
IkReal x2815=(cj5*r00);
IkReal x2816=(cj5*r20);
IkReal x2817=((1.0)*x2811);
IkReal x2818=((1.0)*x2810);
IkReal x2819=(sj5*x2810);
evalcond[0]=(((r21*x2819))+(((-1.0)*r22*x2817))+(((-1.0)*x2816*x2818)));
evalcond[1]=(((x2810*x2813))+(((-1.0)*r02*x2817))+(((-1.0)*x2815*x2818)));
evalcond[2]=((((-1.0)*r12*x2818))+(((-1.0)*r11*sj5*x2817))+((x2811*x2812)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2817))+(((-1.0)*x2812*x2818))+((r11*x2819)));
evalcond[4]=((((-1.0)*cj1*x2814))+((sj1*sj2))+(((-1.0)*r22*x2818))+(((-1.0)*r21*sj5*x2817))+((x2811*x2816)));
evalcond[5]=((((-1.0)*r02*x2818))+(((-1.0)*x2813*x2817))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2814))+((x2811*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2820=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2820;
j4eval[1]=IKsign(x2820);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2821=((1.0)*cj5);
IkReal x2822=((((-1.0)*r21*x2821))+(((-1.0)*r20*sj5)));
j4eval[0]=x2822;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2821)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2823=cj5*cj5;
IkReal x2824=r11*r11;
IkReal x2825=(cj5*r10);
IkReal x2826=(r11*sj5);
IkReal x2827=((((-1.0)*x2823*(r10*r10)))+(((-1.0)*x2824))+((x2823*x2824))+(((-1.0)*(r12*r12)))+(((2.0)*x2825*x2826)));
j4eval[0]=x2827;
j4eval[1]=((IKabs(((((-1.0)*x2826))+x2825)))+(IKabs(r12)));
j4eval[2]=IKsign(x2827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2828=cj5*cj5;
IkReal x2829=r11*r11;
IkReal x2830=(cj5*r10);
IkReal x2831=(r11*sj5);
CheckValue<IkReal> x2832=IKPowWithIntegerCheck(IKsign(((((2.0)*x2830*x2831))+(((-1.0)*x2828*(r10*r10)))+(((-1.0)*x2829))+((x2828*x2829))+(((-1.0)*(r12*r12))))),-1);
if(!x2832.valid){
continue;
}
CheckValue<IkReal> x2833 = IKatan2WithCheck(IkReal(((((-1.0)*x2831))+x2830)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2832.value)))+(x2833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2834=IKsin(j4);
IkReal x2835=IKcos(j4);
IkReal x2836=(cj5*r10);
IkReal x2837=(r01*sj5);
IkReal x2838=(cj5*r00);
IkReal x2839=(cj5*r20);
IkReal x2840=((1.0)*x2835);
IkReal x2841=((1.0)*x2834);
IkReal x2842=(sj5*x2834);
evalcond[0]=(((r21*x2842))+(((-1.0)*x2839*x2841))+(((-1.0)*r22*x2840)));
evalcond[1]=(((x2834*x2837))+(((-1.0)*r02*x2840))+(((-1.0)*x2838*x2841)));
evalcond[2]=((((-1.0)*r12*x2841))+((x2835*x2836))+(((-1.0)*r11*sj5*x2840)));
evalcond[3]=((-1.0)+((r11*x2842))+(((-1.0)*r12*x2840))+(((-1.0)*x2836*x2841)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2841))+((x2835*x2838))+(((-1.0)*x2837*x2840)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2841))+((x2835*x2839))+(((-1.0)*r21*sj5*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2843=((1.0)*cj5);
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
CheckValue<IkReal> x2845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2843))+(((-1.0)*r20*sj5)))),-1);
if(!x2845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2844.value)+(((1.5707963267949)*(x2845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2846=IKsin(j4);
IkReal x2847=IKcos(j4);
IkReal x2848=(cj5*r10);
IkReal x2849=(r01*sj5);
IkReal x2850=(cj5*r00);
IkReal x2851=(cj5*r20);
IkReal x2852=((1.0)*x2847);
IkReal x2853=((1.0)*x2846);
IkReal x2854=(sj5*x2846);
evalcond[0]=(((r21*x2854))+(((-1.0)*x2851*x2853))+(((-1.0)*r22*x2852)));
evalcond[1]=(((x2846*x2849))+(((-1.0)*x2850*x2853))+(((-1.0)*r02*x2852)));
evalcond[2]=((((-1.0)*r11*sj5*x2852))+((x2847*x2848))+(((-1.0)*r12*x2853)));
evalcond[3]=((-1.0)+((r11*x2854))+(((-1.0)*r12*x2852))+(((-1.0)*x2848*x2853)));
evalcond[4]=(((cj2*sj1))+((x2847*x2850))+((cj1*sj2))+(((-1.0)*x2849*x2852))+(((-1.0)*r02*x2853)));
evalcond[5]=(((x2847*x2851))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2853))+(((-1.0)*r21*sj5*x2852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2855.value)+(((1.5707963267949)*(x2856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2857=IKsin(j4);
IkReal x2858=IKcos(j4);
IkReal x2859=(cj5*r10);
IkReal x2860=(r01*sj5);
IkReal x2861=(cj5*r00);
IkReal x2862=(cj5*r20);
IkReal x2863=((1.0)*x2858);
IkReal x2864=((1.0)*x2857);
IkReal x2865=(sj5*x2857);
evalcond[0]=((((-1.0)*x2862*x2864))+((r21*x2865))+(((-1.0)*r22*x2863)));
evalcond[1]=((((-1.0)*r02*x2863))+((x2857*x2860))+(((-1.0)*x2861*x2864)));
evalcond[2]=((((-1.0)*r12*x2864))+((x2858*x2859))+(((-1.0)*r11*sj5*x2863)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2863))+(((-1.0)*x2859*x2864))+((r11*x2865)));
evalcond[4]=((((-1.0)*r02*x2864))+((cj2*sj1))+((cj1*sj2))+((x2858*x2861))+(((-1.0)*x2860*x2863)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2864))+((x2858*x2862))+(((-1.0)*r21*sj5*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2866=((-1.0)*r00);
IkReal x2868 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2868)==0){
continue;
}
IkReal x2867=pow(x2868,-0.5);
CheckValue<IkReal> x2869 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2866),IKFAST_ATAN2_MAGTHRESH);
if(!x2869.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2869.value));
IkReal gconst91=(r01*x2867);
IkReal gconst92=(x2866*x2867);
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2870.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2871=((-1.0)*r00);
IkReal x2872=x2867;
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2871),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
IkReal x2873=((-1.0)*(x2874.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2873;
IkReal gconst90=x2873;
IkReal gconst91=(r01*x2872);
IkReal gconst92=(x2871*x2872);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2875=((1.0)*sj0);
IkReal x2876=((1.0)*cj0);
CheckValue<IkReal> x2877=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2877.valid){
continue;
}
CheckValue<IkReal> x2878 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2876))+(((-1.0)*r12*x2875)))),IkReal(((((-1.0)*gconst91*r11*x2875))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2877.value)))+(x2878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2879=IKsin(j4);
IkReal x2880=IKcos(j4);
IkReal x2881=((1.0)*cj2);
IkReal x2882=(gconst92*r00);
IkReal x2883=(gconst92*r20);
IkReal x2884=((1.0)*sj0);
IkReal x2885=(gconst92*r10);
IkReal x2886=(cj1*sj2);
IkReal x2887=((1.0)*x2880);
IkReal x2888=(gconst91*x2879);
IkReal x2889=((1.0)*x2879);
evalcond[0]=((((-1.0)*x2883*x2889))+(((-1.0)*r22*x2887))+((r21*x2888)));
evalcond[1]=(cj0+((r11*x2888))+(((-1.0)*x2885*x2889))+(((-1.0)*r12*x2887)));
evalcond[2]=((((-1.0)*x2882*x2889))+(((-1.0)*r02*x2887))+((r01*x2888))+(((-1.0)*x2884)));
evalcond[3]=((((-1.0)*gconst91*r21*x2887))+(((-1.0)*r22*x2889))+((x2880*x2883))+((sj1*sj2))+(((-1.0)*cj1*x2881)));
evalcond[4]=(((x2880*x2882))+(((-1.0)*cj0*sj1*x2881))+(((-1.0)*r02*x2889))+(((-1.0)*cj0*x2886))+(((-1.0)*gconst91*r01*x2887)));
evalcond[5]=((((-1.0)*sj0*sj1*x2881))+(((-1.0)*gconst91*r11*x2887))+((x2880*x2885))+(((-1.0)*x2884*x2886))+(((-1.0)*r12*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2890=((1.0)*gconst92);
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2890))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
CheckValue<IkReal> x2892=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2890)))),-1);
if(!x2892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2891.value)+(((1.5707963267949)*(x2892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2893=IKsin(j4);
IkReal x2894=IKcos(j4);
IkReal x2895=((1.0)*cj2);
IkReal x2896=(gconst92*r00);
IkReal x2897=(gconst92*r20);
IkReal x2898=((1.0)*sj0);
IkReal x2899=(gconst92*r10);
IkReal x2900=(cj1*sj2);
IkReal x2901=((1.0)*x2894);
IkReal x2902=(gconst91*x2893);
IkReal x2903=((1.0)*x2893);
evalcond[0]=(((r21*x2902))+(((-1.0)*x2897*x2903))+(((-1.0)*r22*x2901)));
evalcond[1]=(cj0+(((-1.0)*x2899*x2903))+(((-1.0)*r12*x2901))+((r11*x2902)));
evalcond[2]=((((-1.0)*r02*x2901))+((r01*x2902))+(((-1.0)*x2896*x2903))+(((-1.0)*x2898)));
evalcond[3]=(((sj1*sj2))+((x2894*x2897))+(((-1.0)*cj1*x2895))+(((-1.0)*gconst91*r21*x2901))+(((-1.0)*r22*x2903)));
evalcond[4]=((((-1.0)*r02*x2903))+(((-1.0)*cj0*x2900))+(((-1.0)*cj0*sj1*x2895))+((x2894*x2896))+(((-1.0)*gconst91*r01*x2901)));
evalcond[5]=((((-1.0)*sj0*sj1*x2895))+(((-1.0)*x2898*x2900))+(((-1.0)*gconst91*r11*x2901))+((x2894*x2899))+(((-1.0)*r12*x2903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2904=((-1.0)*r01);
IkReal x2906 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2906)==0){
continue;
}
IkReal x2905=pow(x2906,-0.5);
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal(x2904),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2907.value))));
IkReal gconst94=(x2904*x2905);
IkReal gconst95=((1.0)*r00*x2905);
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2908.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2909=((-1.0)*r01);
CheckValue<IkReal> x2912 = IKatan2WithCheck(IkReal(x2909),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2912.valid){
continue;
}
IkReal x2910=((1.0)*(x2912.value));
IkReal x2911=x2905;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2910)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2910)));
IkReal gconst94=(x2909*x2911);
IkReal gconst95=((1.0)*r00*x2911);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2913=((-1.0)*r01);
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal(x2913),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
IkReal x2914=((1.0)*(x2916.value));
IkReal x2915=x2905;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2914)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2914)));
IkReal gconst94=(x2913*x2915);
IkReal gconst95=((1.0)*r00*x2915);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2917=((-1.0)*r01);
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal(x2917),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
IkReal x2918=((1.0)*(x2920.value));
IkReal x2919=x2905;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2918)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2918)));
IkReal gconst94=(x2917*x2919);
IkReal gconst95=((1.0)*r00*x2919);
IkReal x2921=r02*r02;
IkReal x2922=(r12*sj0);
IkReal x2923=((1.0)*cj0);
IkReal x2924=x2905;
j4eval[0]=((IKabs(((((-1.0)*x2923*x2924))+((r02*x2922*x2924))+((cj0*x2921*x2924)))))+(IKabs(((((-1.0)*r02*x2923))+(((-1.0)*x2922))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2925=((1.0)*sj0);
IkReal x2926=((1.0)*cj0);
CheckValue<IkReal> x2927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2927.valid){
continue;
}
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2926))+(((-1.0)*r12*x2925)))),IkReal(((((-1.0)*gconst94*r01*x2926))+(((-1.0)*gconst94*r11*x2925))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2927.value)))+(x2928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2929=IKsin(j4);
IkReal x2930=IKcos(j4);
IkReal x2931=(gconst94*r11);
IkReal x2932=((1.0)*cj2);
IkReal x2933=(gconst94*r21);
IkReal x2934=((1.0)*sj0);
IkReal x2935=(gconst94*r01);
IkReal x2936=(cj1*sj2);
IkReal x2937=((1.0)*x2930);
IkReal x2938=(gconst95*x2930);
IkReal x2939=((1.0)*x2929);
IkReal x2940=(gconst95*x2939);
evalcond[0]=(((x2929*x2933))+(((-1.0)*r20*x2940))+(((-1.0)*r22*x2937)));
evalcond[1]=(((x2929*x2931))+cj0+(((-1.0)*r10*x2940))+(((-1.0)*r12*x2937)));
evalcond[2]=(((x2929*x2935))+(((-1.0)*x2934))+(((-1.0)*r00*x2940))+(((-1.0)*r02*x2937)));
evalcond[3]=((((-1.0)*x2933*x2937))+((sj1*sj2))+(((-1.0)*cj1*x2932))+((r20*x2938))+(((-1.0)*r22*x2939)));
evalcond[4]=((((-1.0)*cj0*x2936))+((r00*x2938))+(((-1.0)*cj0*sj1*x2932))+(((-1.0)*x2935*x2937))+(((-1.0)*r02*x2939)));
evalcond[5]=((((-1.0)*x2931*x2937))+((r10*x2938))+(((-1.0)*sj0*sj1*x2932))+(((-1.0)*r12*x2939))+(((-1.0)*x2934*x2936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2941=((1.0)*gconst95);
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2941)))),-1);
if(!x2943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2942.value)+(((1.5707963267949)*(x2943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2944=IKsin(j4);
IkReal x2945=IKcos(j4);
IkReal x2946=(gconst94*r11);
IkReal x2947=((1.0)*cj2);
IkReal x2948=(gconst94*r21);
IkReal x2949=((1.0)*sj0);
IkReal x2950=(gconst94*r01);
IkReal x2951=(cj1*sj2);
IkReal x2952=((1.0)*x2945);
IkReal x2953=(gconst95*x2945);
IkReal x2954=((1.0)*x2944);
IkReal x2955=(gconst95*x2954);
evalcond[0]=((((-1.0)*r20*x2955))+((x2944*x2948))+(((-1.0)*r22*x2952)));
evalcond[1]=((((-1.0)*r10*x2955))+cj0+((x2944*x2946))+(((-1.0)*r12*x2952)));
evalcond[2]=((((-1.0)*r02*x2952))+((x2944*x2950))+(((-1.0)*x2949))+(((-1.0)*r00*x2955)));
evalcond[3]=((((-1.0)*x2948*x2952))+((sj1*sj2))+((r20*x2953))+(((-1.0)*cj1*x2947))+(((-1.0)*r22*x2954)));
evalcond[4]=((((-1.0)*r02*x2954))+(((-1.0)*cj0*x2951))+((r00*x2953))+(((-1.0)*x2950*x2952))+(((-1.0)*cj0*sj1*x2947)));
evalcond[5]=(((r10*x2953))+(((-1.0)*x2949*x2951))+(((-1.0)*r12*x2954))+(((-1.0)*sj0*sj1*x2947))+(((-1.0)*x2946*x2952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2956=((1.0)*gconst95);
CheckValue<IkReal> x2957=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2956)))),-1);
if(!x2957.valid){
continue;
}
CheckValue<IkReal> x2958 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2956))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2957.value)))+(x2958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2959=IKsin(j4);
IkReal x2960=IKcos(j4);
IkReal x2961=(gconst94*r11);
IkReal x2962=((1.0)*cj2);
IkReal x2963=(gconst94*r21);
IkReal x2964=((1.0)*sj0);
IkReal x2965=(gconst94*r01);
IkReal x2966=(cj1*sj2);
IkReal x2967=((1.0)*x2960);
IkReal x2968=(gconst95*x2960);
IkReal x2969=((1.0)*x2959);
IkReal x2970=(gconst95*x2969);
evalcond[0]=((((-1.0)*r20*x2970))+((x2959*x2963))+(((-1.0)*r22*x2967)));
evalcond[1]=(cj0+((x2959*x2961))+(((-1.0)*r10*x2970))+(((-1.0)*r12*x2967)));
evalcond[2]=((((-1.0)*r00*x2970))+(((-1.0)*r02*x2967))+(((-1.0)*x2964))+((x2959*x2965)));
evalcond[3]=((((-1.0)*x2963*x2967))+((sj1*sj2))+(((-1.0)*r22*x2969))+((r20*x2968))+(((-1.0)*cj1*x2962)));
evalcond[4]=((((-1.0)*x2965*x2967))+(((-1.0)*r02*x2969))+(((-1.0)*cj0*x2966))+(((-1.0)*cj0*sj1*x2962))+((r00*x2968)));
evalcond[5]=(((r10*x2968))+(((-1.0)*sj0*sj1*x2962))+(((-1.0)*x2961*x2967))+(((-1.0)*x2964*x2966))+(((-1.0)*r12*x2969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2971=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2971;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2972=((1.0)*cj5);
IkReal x2973=((((-1.0)*r11*x2972))+(((-1.0)*r10*sj5)));
j4eval[0]=x2973;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2972))))));
j4eval[2]=IKsign(x2973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2974=cj5*cj5;
IkReal x2975=r01*r01;
IkReal x2976=(r01*sj5);
IkReal x2977=(cj5*r00);
IkReal x2978=((((-1.0)*x2974*(r00*r00)))+(((-1.0)*x2975))+((x2974*x2975))+(((-1.0)*(r02*r02)))+(((2.0)*x2976*x2977)));
j4eval[0]=x2978;
j4eval[1]=IKsign(x2978);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2976))+x2977))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2979=cj5*cj5;
IkReal x2980=r01*r01;
IkReal x2981=(r01*sj5);
IkReal x2982=(cj5*r00);
CheckValue<IkReal> x2983 = IKatan2WithCheck(IkReal(((((-1.0)*x2981))+x2982)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2979*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2980))+((x2979*x2980))+(((2.0)*x2981*x2982)))),-1);
if(!x2984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2983.value)+(((1.5707963267949)*(x2984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2985=IKsin(j4);
IkReal x2986=IKcos(j4);
IkReal x2987=(cj5*r10);
IkReal x2988=(r01*sj5);
IkReal x2989=((1.0)*cj2);
IkReal x2990=(cj5*r00);
IkReal x2991=(cj5*r20);
IkReal x2992=((1.0)*x2986);
IkReal x2993=((1.0)*x2985);
IkReal x2994=(sj5*x2985);
evalcond[0]=((((-1.0)*r22*x2992))+(((-1.0)*x2991*x2993))+((r21*x2994)));
evalcond[1]=((((-1.0)*x2987*x2993))+(((-1.0)*r12*x2992))+((r11*x2994)));
evalcond[2]=(((x2986*x2990))+(((-1.0)*x2988*x2992))+(((-1.0)*r02*x2993)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2992))+(((-1.0)*x2990*x2993))+((x2985*x2988)));
evalcond[4]=((((-1.0)*r22*x2993))+(((-1.0)*cj1*x2989))+((sj1*sj2))+((x2986*x2991))+(((-1.0)*r21*sj5*x2992)));
evalcond[5]=(((x2986*x2987))+(((-1.0)*r12*x2993))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2989))+(((-1.0)*r11*sj5*x2992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2995=((1.0)*cj5);
CheckValue<IkReal> x2996=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2995)))),-1);
if(!x2996.valid){
continue;
}
CheckValue<IkReal> x2997 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2996.value)))+(x2997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2998=IKsin(j4);
IkReal x2999=IKcos(j4);
IkReal x3000=(cj5*r10);
IkReal x3001=(r01*sj5);
IkReal x3002=((1.0)*cj2);
IkReal x3003=(cj5*r00);
IkReal x3004=(cj5*r20);
IkReal x3005=((1.0)*x2999);
IkReal x3006=((1.0)*x2998);
IkReal x3007=(sj5*x2998);
evalcond[0]=((((-1.0)*r22*x3005))+(((-1.0)*x3004*x3006))+((r21*x3007)));
evalcond[1]=((((-1.0)*x3000*x3006))+(((-1.0)*r12*x3005))+((r11*x3007)));
evalcond[2]=(((x2999*x3003))+(((-1.0)*r02*x3006))+(((-1.0)*x3001*x3005)));
evalcond[3]=((-1.0)+(((-1.0)*x3003*x3006))+(((-1.0)*r02*x3005))+((x2998*x3001)));
evalcond[4]=((((-1.0)*r22*x3006))+(((-1.0)*r21*sj5*x3005))+((x2999*x3004))+((sj1*sj2))+(((-1.0)*cj1*x3002)));
evalcond[5]=(((x2999*x3000))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3005))+(((-1.0)*r12*x3006))+(((-1.0)*sj1*x3002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3008=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3008.valid){
continue;
}
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3008.value)))+(x3009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3010=IKsin(j4);
IkReal x3011=IKcos(j4);
IkReal x3012=(cj5*r10);
IkReal x3013=(r01*sj5);
IkReal x3014=((1.0)*cj2);
IkReal x3015=(cj5*r00);
IkReal x3016=(cj5*r20);
IkReal x3017=((1.0)*x3011);
IkReal x3018=((1.0)*x3010);
IkReal x3019=(sj5*x3010);
evalcond[0]=((((-1.0)*r22*x3017))+((r21*x3019))+(((-1.0)*x3016*x3018)));
evalcond[1]=((((-1.0)*r12*x3017))+((r11*x3019))+(((-1.0)*x3012*x3018)));
evalcond[2]=(((x3011*x3015))+(((-1.0)*r02*x3018))+(((-1.0)*x3013*x3017)));
evalcond[3]=((-1.0)+((x3010*x3013))+(((-1.0)*r02*x3017))+(((-1.0)*x3015*x3018)));
evalcond[4]=(((x3011*x3016))+(((-1.0)*r22*x3018))+(((-1.0)*r21*sj5*x3017))+((sj1*sj2))+(((-1.0)*cj1*x3014)));
evalcond[5]=(((x3011*x3012))+(((-1.0)*r11*sj5*x3017))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3018))+(((-1.0)*sj1*x3014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3020=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3020;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3021=((1.0)*cj5);
IkReal x3022=((((-1.0)*r21*x3021))+(((-1.0)*r20*sj5)));
j4eval[0]=x3022;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3021))))));
j4eval[2]=IKsign(x3022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3023=cj5*cj5;
IkReal x3024=r01*r01;
IkReal x3025=(cj5*r00);
IkReal x3026=(r01*sj5);
IkReal x3027=(x3024+(((-2.0)*x3025*x3026))+((x3023*(r00*r00)))+(((-1.0)*x3023*x3024))+(r02*r02));
j4eval[0]=x3027;
j4eval[1]=((IKabs(r02))+(IKabs((x3025+(((-1.0)*x3026))))));
j4eval[2]=IKsign(x3027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3028=cj5*cj5;
IkReal x3029=r01*r01;
IkReal x3030=(r01*sj5);
IkReal x3031=(cj5*r00);
CheckValue<IkReal> x3032=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3030*x3031))+x3029+((x3028*(r00*r00)))+(((-1.0)*x3028*x3029))+(r02*r02))),-1);
if(!x3032.valid){
continue;
}
CheckValue<IkReal> x3033 = IKatan2WithCheck(IkReal((x3031+(((-1.0)*x3030)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3032.value)))+(x3033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3034=IKsin(j4);
IkReal x3035=IKcos(j4);
IkReal x3036=(cj5*r10);
IkReal x3037=(r01*sj5);
IkReal x3038=(cj5*r00);
IkReal x3039=(cj5*r20);
IkReal x3040=((1.0)*x3035);
IkReal x3041=((1.0)*x3034);
IkReal x3042=(sj5*x3034);
evalcond[0]=(((r21*x3042))+(((-1.0)*r22*x3040))+(((-1.0)*x3039*x3041)));
evalcond[1]=((((-1.0)*r12*x3040))+(((-1.0)*x3036*x3041))+((r11*x3042)));
evalcond[2]=(((x3035*x3038))+(((-1.0)*x3037*x3040))+(((-1.0)*r02*x3041)));
evalcond[3]=((1.0)+(((-1.0)*x3038*x3041))+((x3034*x3037))+(((-1.0)*r02*x3040)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3041))+((cj1*sj2))+((x3035*x3036))+(((-1.0)*r11*sj5*x3040)));
evalcond[5]=((((-1.0)*r22*x3041))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3035*x3039))+(((-1.0)*r21*sj5*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3043=((1.0)*cj5);
CheckValue<IkReal> x3044 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3043))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3044.valid){
continue;
}
CheckValue<IkReal> x3045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3043))+(((-1.0)*r20*sj5)))),-1);
if(!x3045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3044.value)+(((1.5707963267949)*(x3045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3046=IKsin(j4);
IkReal x3047=IKcos(j4);
IkReal x3048=(cj5*r10);
IkReal x3049=(r01*sj5);
IkReal x3050=(cj5*r00);
IkReal x3051=(cj5*r20);
IkReal x3052=((1.0)*x3047);
IkReal x3053=((1.0)*x3046);
IkReal x3054=(sj5*x3046);
evalcond[0]=((((-1.0)*x3051*x3053))+((r21*x3054))+(((-1.0)*r22*x3052)));
evalcond[1]=(((r11*x3054))+(((-1.0)*x3048*x3053))+(((-1.0)*r12*x3052)));
evalcond[2]=((((-1.0)*r02*x3053))+((x3047*x3050))+(((-1.0)*x3049*x3052)));
evalcond[3]=((1.0)+((x3046*x3049))+(((-1.0)*r02*x3052))+(((-1.0)*x3050*x3053)));
evalcond[4]=(((cj2*sj1))+((x3047*x3048))+((cj1*sj2))+(((-1.0)*r12*x3053))+(((-1.0)*r11*sj5*x3052)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3052))+((x3047*x3051))+(((-1.0)*r22*x3053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3055 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3055.valid){
continue;
}
CheckValue<IkReal> x3056=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3055.value)+(((1.5707963267949)*(x3056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3057=IKsin(j4);
IkReal x3058=IKcos(j4);
IkReal x3059=(cj5*r10);
IkReal x3060=(r01*sj5);
IkReal x3061=(cj5*r00);
IkReal x3062=(cj5*r20);
IkReal x3063=((1.0)*x3058);
IkReal x3064=((1.0)*x3057);
IkReal x3065=(sj5*x3057);
evalcond[0]=((((-1.0)*r22*x3063))+(((-1.0)*x3062*x3064))+((r21*x3065)));
evalcond[1]=((((-1.0)*r12*x3063))+((r11*x3065))+(((-1.0)*x3059*x3064)));
evalcond[2]=((((-1.0)*x3060*x3063))+((x3058*x3061))+(((-1.0)*r02*x3064)));
evalcond[3]=((1.0)+(((-1.0)*x3061*x3064))+(((-1.0)*r02*x3063))+((x3057*x3060)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3063))+((cj1*sj2))+(((-1.0)*r12*x3064))+((x3058*x3059)));
evalcond[5]=((((-1.0)*r21*sj5*x3063))+(((-1.0)*r22*x3064))+((x3058*x3062))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3066=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3066);
rxp1_1=(px*r21);
rxp1_2=(r11*x3066);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3067=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3067);
rxp1_1=(px*r21);
rxp1_2=(r11*x3067);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3068=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3068);
rxp1_1=(px*r21);
rxp1_2=(r11*x3068);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3071=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3071.valid){
continue;
}
IkReal x3069=x3071.value;
IkReal x3070=(sj0*x3069);
cj4array[0]=(((cj2*sj1*x3070))+((cj1*sj2*x3070)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3072=IKsin(j4);
IkReal x3073=IKcos(j4);
IkReal x3074=(cj5*r20);
IkReal x3075=(r21*sj5);
IkReal x3076=((1.0)*x3072);
IkReal x3077=((1.0)*x3073);
evalcond[0]=((-1.0)*r02*x3072);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3077)));
evalcond[2]=((((-1.0)*x3074*x3076))+((x3072*x3075)));
evalcond[3]=((((-1.0)*cj5*r10*x3076))+((r11*sj5*x3072)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3073*x3074))+(((-1.0)*x3075*x3077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3079=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3079.valid){
continue;
}
IkReal x3078=x3079.value;
cj4array[0]=(((cj1*cj2*x3078))+(((-1.0)*sj1*sj2*x3078)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3080=IKsin(j4);
IkReal x3081=IKcos(j4);
IkReal x3082=(r11*sj5);
IkReal x3083=((1.0)*sj0);
IkReal x3084=((1.0)*x3081);
IkReal x3085=((1.0)*cj5*x3080);
evalcond[0]=((-1.0)*r02*x3080);
evalcond[1]=((((-1.0)*x3083))+(((-1.0)*r02*x3084)));
evalcond[2]=((((-1.0)*r20*x3085))+((r21*sj5*x3080)));
evalcond[3]=(((x3080*x3082))+(((-1.0)*r10*x3085)));
evalcond[4]=((((-1.0)*x3082*x3084))+((cj5*r10*x3081))+(((-1.0)*cj1*sj2*x3083))+(((-1.0)*cj2*sj1*x3083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3086=IKPowWithIntegerCheck(r02,-1);
if(!x3086.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3086.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3087=IKsin(j4);
IkReal x3088=IKcos(j4);
IkReal x3089=((1.0)*sj0);
IkReal x3090=(cj5*x3088);
IkReal x3091=(sj5*x3087);
IkReal x3092=((1.0)*sj5*x3088);
IkReal x3093=((1.0)*cj5*x3087);
evalcond[0]=((-1.0)*r02*x3087);
evalcond[1]=(((r21*x3091))+(((-1.0)*r20*x3093)));
evalcond[2]=((((-1.0)*r10*x3093))+((r11*x3091)));
evalcond[3]=(((r20*x3090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x3092)));
evalcond[4]=((((-1.0)*r11*x3092))+((r10*x3090))+(((-1.0)*cj1*sj2*x3089))+(((-1.0)*cj2*sj1*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3094=((1.0)*sj0);
IkReal x3095=((1.0)*cj0);
CheckValue<IkReal> x3096 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3095))+(((-1.0)*r12*x3094)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3095))+(((-1.0)*r11*sj5*x3094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3096.valid){
continue;
}
CheckValue<IkReal> x3097=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3096.value)+(((1.5707963267949)*(x3097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3098=IKsin(j4);
IkReal x3099=IKcos(j4);
IkReal x3100=(cj5*r10);
IkReal x3101=(r01*sj5);
IkReal x3102=((1.0)*cj2);
IkReal x3103=(cj5*r00);
IkReal x3104=((1.0)*sj0);
IkReal x3105=(cj5*r20);
IkReal x3106=(cj1*sj2);
IkReal x3107=((1.0)*x3099);
IkReal x3108=((1.0)*x3098);
IkReal x3109=(sj5*x3098);
evalcond[0]=(((r21*x3109))+(((-1.0)*x3105*x3108))+(((-1.0)*r22*x3107)));
evalcond[1]=(((r11*x3109))+cj0+(((-1.0)*r12*x3107))+(((-1.0)*x3100*x3108)));
evalcond[2]=((((-1.0)*x3103*x3108))+((x3098*x3101))+(((-1.0)*x3104))+(((-1.0)*r02*x3107)));
evalcond[3]=(((x3099*x3105))+(((-1.0)*cj1*x3102))+((sj1*sj2))+(((-1.0)*r22*x3108))+(((-1.0)*r21*sj5*x3107)));
evalcond[4]=(((x3099*x3103))+(((-1.0)*x3101*x3107))+(((-1.0)*r02*x3108))+(((-1.0)*cj0*x3106))+(((-1.0)*cj0*sj1*x3102)));
evalcond[5]=(((x3099*x3100))+(((-1.0)*r12*x3108))+(((-1.0)*sj0*sj1*x3102))+(((-1.0)*x3104*x3106))+(((-1.0)*r11*sj5*x3107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3110=((1.0)*cj5);
CheckValue<IkReal> x3111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3110)))),-1);
if(!x3111.valid){
continue;
}
CheckValue<IkReal> x3112 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3110))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3111.value)))+(x3112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3113=IKsin(j4);
IkReal x3114=IKcos(j4);
IkReal x3115=(cj5*r10);
IkReal x3116=(r01*sj5);
IkReal x3117=((1.0)*cj2);
IkReal x3118=(cj5*r00);
IkReal x3119=((1.0)*sj0);
IkReal x3120=(cj5*r20);
IkReal x3121=(cj1*sj2);
IkReal x3122=((1.0)*x3114);
IkReal x3123=((1.0)*x3113);
IkReal x3124=(sj5*x3113);
evalcond[0]=(((r21*x3124))+(((-1.0)*x3120*x3123))+(((-1.0)*r22*x3122)));
evalcond[1]=(cj0+(((-1.0)*x3115*x3123))+(((-1.0)*r12*x3122))+((r11*x3124)));
evalcond[2]=((((-1.0)*r02*x3122))+(((-1.0)*x3119))+((x3113*x3116))+(((-1.0)*x3118*x3123)));
evalcond[3]=((((-1.0)*r21*sj5*x3122))+(((-1.0)*cj1*x3117))+((sj1*sj2))+((x3114*x3120))+(((-1.0)*r22*x3123)));
evalcond[4]=((((-1.0)*r02*x3123))+(((-1.0)*x3116*x3122))+((x3114*x3118))+(((-1.0)*cj0*x3121))+(((-1.0)*cj0*sj1*x3117)));
evalcond[5]=(((x3114*x3115))+(((-1.0)*sj0*sj1*x3117))+(((-1.0)*r12*x3123))+(((-1.0)*x3119*x3121))+(((-1.0)*r11*sj5*x3122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3125=((1.0)*cj5);
CheckValue<IkReal> x3126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3125)))),-1);
if(!x3126.valid){
continue;
}
CheckValue<IkReal> x3127 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3125))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3126.value)))+(x3127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3128=IKsin(j4);
IkReal x3129=IKcos(j4);
IkReal x3130=(cj5*r10);
IkReal x3131=(r01*sj5);
IkReal x3132=((1.0)*cj2);
IkReal x3133=(cj5*r00);
IkReal x3134=((1.0)*sj0);
IkReal x3135=(cj5*r20);
IkReal x3136=(cj1*sj2);
IkReal x3137=((1.0)*x3129);
IkReal x3138=((1.0)*x3128);
IkReal x3139=(sj5*x3128);
evalcond[0]=(((r21*x3139))+(((-1.0)*x3135*x3138))+(((-1.0)*r22*x3137)));
evalcond[1]=((((-1.0)*x3130*x3138))+cj0+(((-1.0)*r12*x3137))+((r11*x3139)));
evalcond[2]=((((-1.0)*r02*x3137))+(((-1.0)*x3133*x3138))+(((-1.0)*x3134))+((x3128*x3131)));
evalcond[3]=((((-1.0)*r21*sj5*x3137))+((sj1*sj2))+(((-1.0)*cj1*x3132))+(((-1.0)*r22*x3138))+((x3129*x3135)));
evalcond[4]=((((-1.0)*x3131*x3137))+(((-1.0)*cj0*sj1*x3132))+(((-1.0)*r02*x3138))+(((-1.0)*cj0*x3136))+((x3129*x3133)));
evalcond[5]=((((-1.0)*x3134*x3136))+(((-1.0)*r12*x3138))+(((-1.0)*r11*sj5*x3137))+((x3129*x3130))+(((-1.0)*sj0*sj1*x3132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3140=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3140;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3140);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3141=r21*r21;
IkReal x3142=cj5*cj5;
IkReal x3143=(sj1*sj2);
IkReal x3144=(r21*sj5);
IkReal x3145=(cj5*r20);
IkReal x3146=(cj1*cj2);
IkReal x3147=((((-1.0)*x3141))+(((-1.0)*x3142*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x3144*x3145))+((x3141*x3142)));
j4eval[0]=x3147;
j4eval[1]=((IKabs(((((-1.0)*r22*x3146))+((r22*x3143)))))+(IKabs(((((-1.0)*x3144*x3146))+((x3145*x3146))+(((-1.0)*x3143*x3145))+((x3143*x3144))))));
j4eval[2]=IKsign(x3147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3148=IKcos(j0);
IkReal x3149=IKsin(j0);
evalcond[0]=((((0.425)*x3148))+(((-0.134)*x3149))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x3149))+(((-1.0)*py))+(((0.134)*x3148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3150=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3150;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3151=((1.0)*cj5);
IkReal x3152=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3151)));
j4eval[0]=x3152;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3151)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3152);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3153=((1.0)*cj5);
IkReal x3154=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3153)));
j4eval[0]=x3154;
j4eval[1]=IKsign(x3154);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3153))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3155=((1.0)*cj5);
CheckValue<IkReal> x3156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3155)))),-1);
if(!x3156.valid){
continue;
}
CheckValue<IkReal> x3157 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3155)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3156.value)))+(x3157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3158=IKcos(j4);
IkReal x3159=IKsin(j4);
IkReal x3160=((1.0)*sj0);
IkReal x3161=(cj5*r00);
IkReal x3162=(cj5*r10);
IkReal x3163=(cj5*r20);
IkReal x3164=((1.0)*x3158);
IkReal x3165=((1.0)*x3159);
IkReal x3166=(sj5*x3158);
IkReal x3167=(sj5*x3159);
evalcond[0]=(((r22*x3159))+(((-1.0)*x3163*x3164))+((r21*x3166)));
evalcond[1]=((((-1.0)*x3163*x3165))+((r21*x3167))+(((-1.0)*r22*x3164)));
evalcond[2]=((((-1.0)*r12*x3164))+(((-1.0)*x3162*x3165))+cj0+((r11*x3167)));
evalcond[3]=((((-1.0)*x3161*x3164))+((r02*x3159))+((r01*x3166))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3162*x3164))+((r11*x3166))+((r12*x3159))+(((-1.0)*x3160)));
evalcond[5]=((((-1.0)*x3161*x3165))+((r01*x3167))+(((-1.0)*r02*x3164))+(((-1.0)*x3160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3168=((1.0)*cj5);
CheckValue<IkReal> x3169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3168)))),-1);
if(!x3169.valid){
continue;
}
CheckValue<IkReal> x3170 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3169.value)))+(x3170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3171=IKcos(j4);
IkReal x3172=IKsin(j4);
IkReal x3173=((1.0)*sj0);
IkReal x3174=(cj5*r00);
IkReal x3175=(cj5*r10);
IkReal x3176=(cj5*r20);
IkReal x3177=((1.0)*x3171);
IkReal x3178=((1.0)*x3172);
IkReal x3179=(sj5*x3171);
IkReal x3180=(sj5*x3172);
evalcond[0]=(((r22*x3172))+((r21*x3179))+(((-1.0)*x3176*x3177)));
evalcond[1]=((((-1.0)*x3176*x3178))+(((-1.0)*r22*x3177))+((r21*x3180)));
evalcond[2]=(cj0+(((-1.0)*r12*x3177))+((r11*x3180))+(((-1.0)*x3175*x3178)));
evalcond[3]=((((-1.0)*x3174*x3177))+((r02*x3172))+((r01*x3179))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3179))+(((-1.0)*x3173))+((r12*x3172))+(((-1.0)*x3175*x3177)));
evalcond[5]=((((-1.0)*x3174*x3178))+((r01*x3180))+(((-1.0)*x3173))+(((-1.0)*r02*x3177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3181 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3181.valid){
continue;
}
CheckValue<IkReal> x3182=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3181.value)+(((1.5707963267949)*(x3182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3183=IKcos(j4);
IkReal x3184=IKsin(j4);
IkReal x3185=((1.0)*sj0);
IkReal x3186=(cj5*r00);
IkReal x3187=(cj5*r10);
IkReal x3188=(cj5*r20);
IkReal x3189=((1.0)*x3183);
IkReal x3190=((1.0)*x3184);
IkReal x3191=(sj5*x3183);
IkReal x3192=(sj5*x3184);
evalcond[0]=(((r22*x3184))+((r21*x3191))+(((-1.0)*x3188*x3189)));
evalcond[1]=(((r21*x3192))+(((-1.0)*r22*x3189))+(((-1.0)*x3188*x3190)));
evalcond[2]=(cj0+(((-1.0)*x3187*x3190))+((r11*x3192))+(((-1.0)*r12*x3189)));
evalcond[3]=(((r01*x3191))+(((-1.0)*x3186*x3189))+(((-1.0)*cj0))+((r02*x3184)));
evalcond[4]=((((-1.0)*x3187*x3189))+((r12*x3184))+((r11*x3191))+(((-1.0)*x3185)));
evalcond[5]=((((-1.0)*r02*x3189))+((r01*x3192))+(((-1.0)*x3186*x3190))+(((-1.0)*x3185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3193=IKcos(j0);
IkReal x3194=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x3193))+(((-0.134)*x3194)));
evalcond[1]=((((0.134)*x3193))+(((-1.0)*py))+(((0.425)*x3194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3195=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3195;
j4eval[1]=IKsign(x3195);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3196=((1.0)*cj5);
IkReal x3197=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3196)));
j4eval[0]=x3197;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3196)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3198=cj5*cj5;
IkReal x3199=((1.0)*r20);
IkReal x3200=(r01*r21);
IkReal x3201=(r21*sj5);
IkReal x3202=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3198*x3200))+(((-1.0)*x3200))+((cj5*r00*x3201))+(((-1.0)*r00*x3198*x3199)));
j4eval[0]=x3202;
j4eval[1]=((IKabs((((cj0*x3201))+(((-1.0)*cj0*cj5*x3199)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3203=cj5*cj5;
IkReal x3204=((1.0)*r20);
IkReal x3205=(r01*r21);
IkReal x3206=(r21*sj5);
CheckValue<IkReal> x3207=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3205))+(((-1.0)*r00*x3203*x3204))+((cj5*r00*x3206))+((x3203*x3205)))),-1);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3206))+(((-1.0)*cj0*cj5*x3204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3207.value)))+(x3208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3209=IKcos(j4);
IkReal x3210=IKsin(j4);
IkReal x3211=(cj5*r00);
IkReal x3212=(cj5*r10);
IkReal x3213=(cj5*r20);
IkReal x3214=((1.0)*x3209);
IkReal x3215=((1.0)*x3210);
IkReal x3216=(sj5*x3209);
IkReal x3217=(sj5*x3210);
evalcond[0]=(((r22*x3210))+((r21*x3216))+(((-1.0)*x3213*x3214)));
evalcond[1]=(((r21*x3217))+(((-1.0)*r22*x3214))+(((-1.0)*x3213*x3215)));
evalcond[2]=((((-1.0)*x3211*x3214))+cj0+((r01*x3216))+((r02*x3210)));
evalcond[3]=(sj0+((r12*x3210))+((r11*x3216))+(((-1.0)*x3212*x3214)));
evalcond[4]=(cj0+((r11*x3217))+(((-1.0)*x3212*x3215))+(((-1.0)*r12*x3214)));
evalcond[5]=((((-1.0)*x3211*x3215))+(((-1.0)*sj0))+((r01*x3217))+(((-1.0)*r02*x3214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3218=((1.0)*cj5);
CheckValue<IkReal> x3219 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3218)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3219.valid){
continue;
}
CheckValue<IkReal> x3220=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3218)))),-1);
if(!x3220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3219.value)+(((1.5707963267949)*(x3220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3221=IKcos(j4);
IkReal x3222=IKsin(j4);
IkReal x3223=(cj5*r00);
IkReal x3224=(cj5*r10);
IkReal x3225=(cj5*r20);
IkReal x3226=((1.0)*x3221);
IkReal x3227=((1.0)*x3222);
IkReal x3228=(sj5*x3221);
IkReal x3229=(sj5*x3222);
evalcond[0]=((((-1.0)*x3225*x3226))+((r21*x3228))+((r22*x3222)));
evalcond[1]=((((-1.0)*x3225*x3227))+((r21*x3229))+(((-1.0)*r22*x3226)));
evalcond[2]=(cj0+((r02*x3222))+((r01*x3228))+(((-1.0)*x3223*x3226)));
evalcond[3]=(((r12*x3222))+sj0+((r11*x3228))+(((-1.0)*x3224*x3226)));
evalcond[4]=(cj0+((r11*x3229))+(((-1.0)*x3224*x3227))+(((-1.0)*r12*x3226)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3226))+((r01*x3229))+(((-1.0)*x3223*x3227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3230 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3230.valid){
continue;
}
CheckValue<IkReal> x3231=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3230.value)+(((1.5707963267949)*(x3231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3232=IKcos(j4);
IkReal x3233=IKsin(j4);
IkReal x3234=(cj5*r00);
IkReal x3235=(cj5*r10);
IkReal x3236=(cj5*r20);
IkReal x3237=((1.0)*x3232);
IkReal x3238=((1.0)*x3233);
IkReal x3239=(sj5*x3232);
IkReal x3240=(sj5*x3233);
evalcond[0]=(((r22*x3233))+(((-1.0)*x3236*x3237))+((r21*x3239)));
evalcond[1]=(((r21*x3240))+(((-1.0)*x3236*x3238))+(((-1.0)*r22*x3237)));
evalcond[2]=(cj0+((r01*x3239))+(((-1.0)*x3234*x3237))+((r02*x3233)));
evalcond[3]=(sj0+(((-1.0)*x3235*x3237))+((r11*x3239))+((r12*x3233)));
evalcond[4]=(cj0+(((-1.0)*x3235*x3238))+(((-1.0)*r12*x3237))+((r11*x3240)));
evalcond[5]=(((r01*x3240))+(((-1.0)*r02*x3237))+(((-1.0)*sj0))+(((-1.0)*x3234*x3238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3241=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3241;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3242=((1.0)*cj5);
IkReal x3243=((((-1.0)*r01*x3242))+(((-1.0)*r00*sj5)));
j4eval[0]=x3243;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3242)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3244=((1.0)*cj5);
IkReal x3245=((((-1.0)*r01*x3244))+(((-1.0)*r00*sj5)));
j4eval[0]=x3245;
j4eval[1]=IKsign(x3245);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3244))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3246=((1.0)*cj5);
CheckValue<IkReal> x3247 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3246)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3247.valid){
continue;
}
CheckValue<IkReal> x3248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3246))+(((-1.0)*r00*sj5)))),-1);
if(!x3248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3247.value)+(((1.5707963267949)*(x3248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3249=IKcos(j4);
IkReal x3250=IKsin(j4);
IkReal x3251=((1.0)*sj0);
IkReal x3252=(cj5*r00);
IkReal x3253=(cj5*r10);
IkReal x3254=(cj5*r20);
IkReal x3255=((1.0)*x3249);
IkReal x3256=((1.0)*x3250);
IkReal x3257=(sj5*x3249);
IkReal x3258=(sj5*x3250);
evalcond[0]=((((-1.0)*x3254*x3255))+((r21*x3257))+((r22*x3250)));
evalcond[1]=((((-1.0)*x3254*x3256))+((r21*x3258))+(((-1.0)*r22*x3255)));
evalcond[2]=(cj0+((r11*x3258))+(((-1.0)*x3253*x3256))+(((-1.0)*r12*x3255)));
evalcond[3]=(((r02*x3250))+((r01*x3257))+(((-1.0)*x3252*x3255))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3250))+((r11*x3257))+(((-1.0)*x3253*x3255))+(((-1.0)*x3251)));
evalcond[5]=((((-1.0)*r02*x3255))+((r01*x3258))+(((-1.0)*x3252*x3256))+(((-1.0)*x3251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3259=((1.0)*cj5);
CheckValue<IkReal> x3260 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3259)))),-1);
if(!x3261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3260.value)+(((1.5707963267949)*(x3261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3262=IKcos(j4);
IkReal x3263=IKsin(j4);
IkReal x3264=((1.0)*sj0);
IkReal x3265=(cj5*r00);
IkReal x3266=(cj5*r10);
IkReal x3267=(cj5*r20);
IkReal x3268=((1.0)*x3262);
IkReal x3269=((1.0)*x3263);
IkReal x3270=(sj5*x3262);
IkReal x3271=(sj5*x3263);
evalcond[0]=(((r21*x3270))+(((-1.0)*x3267*x3268))+((r22*x3263)));
evalcond[1]=(((r21*x3271))+(((-1.0)*x3267*x3269))+(((-1.0)*r22*x3268)));
evalcond[2]=(cj0+(((-1.0)*r12*x3268))+((r11*x3271))+(((-1.0)*x3266*x3269)));
evalcond[3]=(((r01*x3270))+(((-1.0)*x3265*x3268))+((r02*x3263))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3264))+((r11*x3270))+(((-1.0)*x3266*x3268))+((r12*x3263)));
evalcond[5]=(((r01*x3271))+(((-1.0)*x3264))+(((-1.0)*x3265*x3269))+(((-1.0)*r02*x3268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3272 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3272.valid){
continue;
}
CheckValue<IkReal> x3273=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3272.value)+(((1.5707963267949)*(x3273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3274=IKcos(j4);
IkReal x3275=IKsin(j4);
IkReal x3276=((1.0)*sj0);
IkReal x3277=(cj5*r00);
IkReal x3278=(cj5*r10);
IkReal x3279=(cj5*r20);
IkReal x3280=((1.0)*x3274);
IkReal x3281=((1.0)*x3275);
IkReal x3282=(sj5*x3274);
IkReal x3283=(sj5*x3275);
evalcond[0]=((((-1.0)*x3279*x3280))+((r21*x3282))+((r22*x3275)));
evalcond[1]=((((-1.0)*r22*x3280))+(((-1.0)*x3279*x3281))+((r21*x3283)));
evalcond[2]=((((-1.0)*r12*x3280))+cj0+((r11*x3283))+(((-1.0)*x3278*x3281)));
evalcond[3]=((((-1.0)*x3277*x3280))+((r02*x3275))+(((-1.0)*cj0))+((r01*x3282)));
evalcond[4]=((((-1.0)*x3276))+((r12*x3275))+((r11*x3282))+(((-1.0)*x3278*x3280)));
evalcond[5]=((((-1.0)*x3277*x3281))+(((-1.0)*x3276))+(((-1.0)*r02*x3280))+((r01*x3283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3284=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3284;
j4eval[1]=IKsign(x3284);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3285=((1.0)*cj5);
IkReal x3286=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3285)));
j4eval[0]=x3286;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3285))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3287=cj5*cj5;
IkReal x3288=((1.0)*r20);
IkReal x3289=(r01*r21);
IkReal x3290=(r21*sj5);
IkReal x3291=(((cj5*r01*r20*sj5))+((x3287*x3289))+(((-1.0)*r02*r22))+((cj5*r00*x3290))+(((-1.0)*x3289))+(((-1.0)*r00*x3287*x3288)));
j4eval[0]=x3291;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3288))+((cj0*x3290))))));
j4eval[2]=IKsign(x3291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3292=cj5*cj5;
IkReal x3293=((1.0)*r20);
IkReal x3294=(r01*r21);
IkReal x3295=(r21*sj5);
CheckValue<IkReal> x3296=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3292*x3294))+(((-1.0)*r00*x3292*x3293))+((cj5*r00*x3295))+(((-1.0)*x3294)))),-1);
if(!x3296.valid){
continue;
}
CheckValue<IkReal> x3297 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3293))+((cj0*x3295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3296.value)))+(x3297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3298=IKcos(j4);
IkReal x3299=IKsin(j4);
IkReal x3300=(cj5*r00);
IkReal x3301=(cj5*r10);
IkReal x3302=(cj5*r20);
IkReal x3303=((1.0)*x3298);
IkReal x3304=((1.0)*x3299);
IkReal x3305=(sj5*x3298);
IkReal x3306=(sj5*x3299);
evalcond[0]=(((r21*x3305))+((r22*x3299))+(((-1.0)*x3302*x3303)));
evalcond[1]=(((r21*x3306))+(((-1.0)*r22*x3303))+(((-1.0)*x3302*x3304)));
evalcond[2]=(cj0+((r02*x3299))+((r01*x3305))+(((-1.0)*x3300*x3303)));
evalcond[3]=(sj0+((r11*x3305))+(((-1.0)*x3301*x3303))+((r12*x3299)));
evalcond[4]=(cj0+((r11*x3306))+(((-1.0)*x3301*x3304))+(((-1.0)*r12*x3303)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3303))+((r01*x3306))+(((-1.0)*x3300*x3304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3307=((1.0)*cj5);
CheckValue<IkReal> x3308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3307)))),-1);
if(!x3308.valid){
continue;
}
CheckValue<IkReal> x3309 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3307)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3308.value)))+(x3309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3310=IKcos(j4);
IkReal x3311=IKsin(j4);
IkReal x3312=(cj5*r00);
IkReal x3313=(cj5*r10);
IkReal x3314=(cj5*r20);
IkReal x3315=((1.0)*x3310);
IkReal x3316=((1.0)*x3311);
IkReal x3317=(sj5*x3310);
IkReal x3318=(sj5*x3311);
evalcond[0]=(((r21*x3317))+((r22*x3311))+(((-1.0)*x3314*x3315)));
evalcond[1]=(((r21*x3318))+(((-1.0)*r22*x3315))+(((-1.0)*x3314*x3316)));
evalcond[2]=(cj0+((r02*x3311))+(((-1.0)*x3312*x3315))+((r01*x3317)));
evalcond[3]=(sj0+((r11*x3317))+((r12*x3311))+(((-1.0)*x3313*x3315)));
evalcond[4]=(cj0+((r11*x3318))+(((-1.0)*x3313*x3316))+(((-1.0)*r12*x3315)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3312*x3316))+(((-1.0)*r02*x3315))+((r01*x3318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3319 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3319.valid){
continue;
}
CheckValue<IkReal> x3320=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3319.value)+(((1.5707963267949)*(x3320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3321=IKcos(j4);
IkReal x3322=IKsin(j4);
IkReal x3323=(cj5*r00);
IkReal x3324=(cj5*r10);
IkReal x3325=(cj5*r20);
IkReal x3326=((1.0)*x3321);
IkReal x3327=((1.0)*x3322);
IkReal x3328=(sj5*x3321);
IkReal x3329=(sj5*x3322);
evalcond[0]=(((r22*x3322))+(((-1.0)*x3325*x3326))+((r21*x3328)));
evalcond[1]=((((-1.0)*x3325*x3327))+((r21*x3329))+(((-1.0)*r22*x3326)));
evalcond[2]=(cj0+((r01*x3328))+(((-1.0)*x3323*x3326))+((r02*x3322)));
evalcond[3]=((((-1.0)*x3324*x3326))+((r12*x3322))+sj0+((r11*x3328)));
evalcond[4]=((((-1.0)*x3324*x3327))+cj0+((r11*x3329))+(((-1.0)*r12*x3326)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3326))+((r01*x3329))+(((-1.0)*x3323*x3327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3330=IKcos(j0);
IkReal x3331=IKsin(j0);
evalcond[0]=((((-0.425)*x3330))+(((-0.134)*x3331))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x3331))+(((0.134)*x3330))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3332=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3332;
j4eval[1]=IKsign(x3332);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3333=((1.0)*cj5);
IkReal x3334=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3333)));
j4eval[0]=x3334;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3333)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3335=cj5*cj5;
IkReal x3336=((1.0)*r20);
IkReal x3337=(r01*r21);
IkReal x3338=(r21*sj5);
IkReal x3339=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3338))+(((-1.0)*x3337))+(((-1.0)*r00*x3335*x3336))+((x3335*x3337)));
j4eval[0]=x3339;
j4eval[1]=((IKabs((((cj0*x3338))+(((-1.0)*cj0*cj5*x3336)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3340=cj5*cj5;
IkReal x3341=((1.0)*r20);
IkReal x3342=(r01*r21);
IkReal x3343=(r21*sj5);
CheckValue<IkReal> x3344=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3340*x3341))+((x3340*x3342))+(((-1.0)*x3342))+(((-1.0)*r02*r22))+((cj5*r00*x3343)))),-1);
if(!x3344.valid){
continue;
}
CheckValue<IkReal> x3345 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3343))+(((-1.0)*cj0*cj5*x3341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3344.value)))+(x3345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3346=IKcos(j4);
IkReal x3347=IKsin(j4);
IkReal x3348=(cj5*r00);
IkReal x3349=(cj5*r10);
IkReal x3350=(cj5*r20);
IkReal x3351=((1.0)*x3346);
IkReal x3352=((1.0)*x3347);
IkReal x3353=(sj5*x3346);
IkReal x3354=(sj5*x3347);
evalcond[0]=(((r22*x3347))+(((-1.0)*x3350*x3351))+((r21*x3353)));
evalcond[1]=((((-1.0)*x3350*x3352))+((r21*x3354))+(((-1.0)*r22*x3351)));
evalcond[2]=((((-1.0)*x3348*x3351))+cj0+((r01*x3353))+((r02*x3347)));
evalcond[3]=(sj0+((r11*x3353))+(((-1.0)*x3349*x3351))+((r12*x3347)));
evalcond[4]=(cj0+((r11*x3354))+(((-1.0)*x3349*x3352))+(((-1.0)*r12*x3351)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3348*x3352))+(((-1.0)*r02*x3351))+((r01*x3354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3355=((1.0)*cj5);
CheckValue<IkReal> x3356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3355)))),-1);
if(!x3356.valid){
continue;
}
CheckValue<IkReal> x3357 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3355)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3356.value)))+(x3357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3358=IKcos(j4);
IkReal x3359=IKsin(j4);
IkReal x3360=(cj5*r00);
IkReal x3361=(cj5*r10);
IkReal x3362=(cj5*r20);
IkReal x3363=((1.0)*x3358);
IkReal x3364=((1.0)*x3359);
IkReal x3365=(sj5*x3358);
IkReal x3366=(sj5*x3359);
evalcond[0]=((((-1.0)*x3362*x3363))+((r21*x3365))+((r22*x3359)));
evalcond[1]=((((-1.0)*x3362*x3364))+((r21*x3366))+(((-1.0)*r22*x3363)));
evalcond[2]=((((-1.0)*x3360*x3363))+cj0+((r01*x3365))+((r02*x3359)));
evalcond[3]=((((-1.0)*x3361*x3363))+((r12*x3359))+sj0+((r11*x3365)));
evalcond[4]=((((-1.0)*x3361*x3364))+(((-1.0)*r12*x3363))+cj0+((r11*x3366)));
evalcond[5]=((((-1.0)*x3360*x3364))+(((-1.0)*sj0))+((r01*x3366))+(((-1.0)*r02*x3363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3367 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3367.valid){
continue;
}
CheckValue<IkReal> x3368=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3367.value)+(((1.5707963267949)*(x3368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3369=IKcos(j4);
IkReal x3370=IKsin(j4);
IkReal x3371=(cj5*r00);
IkReal x3372=(cj5*r10);
IkReal x3373=(cj5*r20);
IkReal x3374=((1.0)*x3369);
IkReal x3375=((1.0)*x3370);
IkReal x3376=(sj5*x3369);
IkReal x3377=(sj5*x3370);
evalcond[0]=((((-1.0)*x3373*x3374))+((r22*x3370))+((r21*x3376)));
evalcond[1]=((((-1.0)*r22*x3374))+(((-1.0)*x3373*x3375))+((r21*x3377)));
evalcond[2]=(((r01*x3376))+cj0+((r02*x3370))+(((-1.0)*x3371*x3374)));
evalcond[3]=(((r12*x3370))+sj0+((r11*x3376))+(((-1.0)*x3372*x3374)));
evalcond[4]=(cj0+(((-1.0)*r12*x3374))+((r11*x3377))+(((-1.0)*x3372*x3375)));
evalcond[5]=(((r01*x3377))+(((-1.0)*sj0))+(((-1.0)*r02*x3374))+(((-1.0)*x3371*x3375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3378=IKcos(j0);
IkReal x3379=IKsin(j0);
evalcond[0]=((((-0.134)*x3379))+(((-1.0)*px))+(((-0.425)*x3378)));
evalcond[1]=((((0.134)*x3378))+(((-1.0)*py))+(((-0.425)*x3379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3380=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3380;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3381=((1.0)*cj5);
IkReal x3382=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3381)));
j4eval[0]=x3382;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3381)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3383=((1.0)*cj5);
IkReal x3384=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3383)));
j4eval[0]=x3384;
j4eval[1]=IKsign(x3384);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3383))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3385=((1.0)*cj5);
CheckValue<IkReal> x3386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3385)))),-1);
if(!x3386.valid){
continue;
}
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3385)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3386.value)))+(x3387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3388=IKcos(j4);
IkReal x3389=IKsin(j4);
IkReal x3390=((1.0)*sj0);
IkReal x3391=(cj5*r00);
IkReal x3392=(cj5*r10);
IkReal x3393=(cj5*r20);
IkReal x3394=((1.0)*x3388);
IkReal x3395=((1.0)*x3389);
IkReal x3396=(sj5*x3388);
IkReal x3397=(sj5*x3389);
evalcond[0]=(((r21*x3396))+((r22*x3389))+(((-1.0)*x3393*x3394)));
evalcond[1]=((((-1.0)*r22*x3394))+((r21*x3397))+(((-1.0)*x3393*x3395)));
evalcond[2]=((((-1.0)*x3392*x3395))+cj0+((r11*x3397))+(((-1.0)*r12*x3394)));
evalcond[3]=(((r01*x3396))+((r02*x3389))+(((-1.0)*x3391*x3394))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3392*x3394))+((r11*x3396))+(((-1.0)*x3390))+((r12*x3389)));
evalcond[5]=(((r01*x3397))+(((-1.0)*r02*x3394))+(((-1.0)*x3390))+(((-1.0)*x3391*x3395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3398=((1.0)*cj5);
CheckValue<IkReal> x3399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3398))+(((-1.0)*r00*sj5)))),-1);
if(!x3399.valid){
continue;
}
CheckValue<IkReal> x3400 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3399.value)))+(x3400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3401=IKcos(j4);
IkReal x3402=IKsin(j4);
IkReal x3403=((1.0)*sj0);
IkReal x3404=(cj5*r00);
IkReal x3405=(cj5*r10);
IkReal x3406=(cj5*r20);
IkReal x3407=((1.0)*x3401);
IkReal x3408=((1.0)*x3402);
IkReal x3409=(sj5*x3401);
IkReal x3410=(sj5*x3402);
evalcond[0]=(((r22*x3402))+((r21*x3409))+(((-1.0)*x3406*x3407)));
evalcond[1]=(((r21*x3410))+(((-1.0)*x3406*x3408))+(((-1.0)*r22*x3407)));
evalcond[2]=((((-1.0)*x3405*x3408))+cj0+(((-1.0)*r12*x3407))+((r11*x3410)));
evalcond[3]=(((r02*x3402))+(((-1.0)*x3404*x3407))+((r01*x3409))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3405*x3407))+((r11*x3409))+((r12*x3402))+(((-1.0)*x3403)));
evalcond[5]=((((-1.0)*x3404*x3408))+((r01*x3410))+(((-1.0)*r02*x3407))+(((-1.0)*x3403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3411 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3411.valid){
continue;
}
CheckValue<IkReal> x3412=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3411.value)+(((1.5707963267949)*(x3412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3413=IKcos(j4);
IkReal x3414=IKsin(j4);
IkReal x3415=((1.0)*sj0);
IkReal x3416=(cj5*r00);
IkReal x3417=(cj5*r10);
IkReal x3418=(cj5*r20);
IkReal x3419=((1.0)*x3413);
IkReal x3420=((1.0)*x3414);
IkReal x3421=(sj5*x3413);
IkReal x3422=(sj5*x3414);
evalcond[0]=((((-1.0)*x3418*x3419))+((r22*x3414))+((r21*x3421)));
evalcond[1]=((((-1.0)*r22*x3419))+(((-1.0)*x3418*x3420))+((r21*x3422)));
evalcond[2]=(cj0+(((-1.0)*x3417*x3420))+(((-1.0)*r12*x3419))+((r11*x3422)));
evalcond[3]=(((r02*x3414))+(((-1.0)*x3416*x3419))+(((-1.0)*cj0))+((r01*x3421)));
evalcond[4]=(((r12*x3414))+(((-1.0)*x3417*x3419))+((r11*x3421))+(((-1.0)*x3415)));
evalcond[5]=((((-1.0)*r02*x3419))+(((-1.0)*x3416*x3420))+((r01*x3422))+(((-1.0)*x3415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3423=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3423;
j4eval[1]=IKsign(x3423);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3424=((1.0)*cj5);
IkReal x3425=((((-1.0)*r11*x3424))+(((-1.0)*r10*sj5)));
j4eval[0]=x3425;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3424))))));
j4eval[2]=IKsign(x3425);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3426=cj5*cj5;
IkReal x3427=((1.0)*r20);
IkReal x3428=(r01*r21);
IkReal x3429=(r21*sj5);
IkReal x3430=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3429))+(((-1.0)*r00*x3426*x3427))+(((-1.0)*x3428))+((x3426*x3428)));
j4eval[0]=x3430;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3427))+((cj0*x3429))))));
j4eval[2]=IKsign(x3430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3431=cj5*cj5;
IkReal x3432=((1.0)*r20);
IkReal x3433=(r01*r21);
IkReal x3434=(r21*sj5);
CheckValue<IkReal> x3435 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3434))+(((-1.0)*cj0*cj5*x3432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3435.valid){
continue;
}
CheckValue<IkReal> x3436=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3434))+(((-1.0)*r00*x3431*x3432))+(((-1.0)*x3433))+((x3431*x3433)))),-1);
if(!x3436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3435.value)+(((1.5707963267949)*(x3436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3437=IKcos(j4);
IkReal x3438=IKsin(j4);
IkReal x3439=(cj5*r00);
IkReal x3440=(cj5*r10);
IkReal x3441=(cj5*r20);
IkReal x3442=((1.0)*x3437);
IkReal x3443=((1.0)*x3438);
IkReal x3444=(sj5*x3437);
IkReal x3445=(sj5*x3438);
evalcond[0]=(((r21*x3444))+(((-1.0)*x3441*x3442))+((r22*x3438)));
evalcond[1]=(((r21*x3445))+(((-1.0)*x3441*x3443))+(((-1.0)*r22*x3442)));
evalcond[2]=(cj0+(((-1.0)*x3439*x3442))+((r01*x3444))+((r02*x3438)));
evalcond[3]=(((r11*x3444))+sj0+((r12*x3438))+(((-1.0)*x3440*x3442)));
evalcond[4]=(((r11*x3445))+cj0+(((-1.0)*r12*x3442))+(((-1.0)*x3440*x3443)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3439*x3443))+(((-1.0)*r02*x3442))+((r01*x3445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3446=((1.0)*cj5);
CheckValue<IkReal> x3447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3446)))),-1);
if(!x3447.valid){
continue;
}
CheckValue<IkReal> x3448 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3446))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3447.value)))+(x3448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3449=IKcos(j4);
IkReal x3450=IKsin(j4);
IkReal x3451=(cj5*r00);
IkReal x3452=(cj5*r10);
IkReal x3453=(cj5*r20);
IkReal x3454=((1.0)*x3449);
IkReal x3455=((1.0)*x3450);
IkReal x3456=(sj5*x3449);
IkReal x3457=(sj5*x3450);
evalcond[0]=((((-1.0)*x3453*x3454))+((r21*x3456))+((r22*x3450)));
evalcond[1]=((((-1.0)*x3453*x3455))+((r21*x3457))+(((-1.0)*r22*x3454)));
evalcond[2]=((((-1.0)*x3451*x3454))+cj0+((r02*x3450))+((r01*x3456)));
evalcond[3]=(sj0+((r12*x3450))+(((-1.0)*x3452*x3454))+((r11*x3456)));
evalcond[4]=(cj0+(((-1.0)*r12*x3454))+(((-1.0)*x3452*x3455))+((r11*x3457)));
evalcond[5]=((((-1.0)*x3451*x3455))+(((-1.0)*sj0))+(((-1.0)*r02*x3454))+((r01*x3457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3458 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3458.valid){
continue;
}
CheckValue<IkReal> x3459=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3458.value)+(((1.5707963267949)*(x3459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3460=IKcos(j4);
IkReal x3461=IKsin(j4);
IkReal x3462=(cj5*r00);
IkReal x3463=(cj5*r10);
IkReal x3464=(cj5*r20);
IkReal x3465=((1.0)*x3460);
IkReal x3466=((1.0)*x3461);
IkReal x3467=(sj5*x3460);
IkReal x3468=(sj5*x3461);
evalcond[0]=(((r21*x3467))+(((-1.0)*x3464*x3465))+((r22*x3461)));
evalcond[1]=((((-1.0)*r22*x3465))+((r21*x3468))+(((-1.0)*x3464*x3466)));
evalcond[2]=(cj0+(((-1.0)*x3462*x3465))+((r01*x3467))+((r02*x3461)));
evalcond[3]=((((-1.0)*x3463*x3465))+sj0+((r12*x3461))+((r11*x3467)));
evalcond[4]=((((-1.0)*x3463*x3466))+cj0+(((-1.0)*r12*x3465))+((r11*x3468)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3462*x3466))+(((-1.0)*r02*x3465))+((r01*x3468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3469=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3469;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3469);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3470=((1.0)*cj5);
IkReal x3471=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3470)));
j4eval[0]=x3471;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3470)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3472=((1.0)*cj5);
IkReal x3473=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3472)));
j4eval[0]=x3473;
j4eval[1]=IKsign(x3473);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3472))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3474=((1.0)*cj5);
CheckValue<IkReal> x3475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3474)))),-1);
if(!x3475.valid){
continue;
}
CheckValue<IkReal> x3476 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3474))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3475.value)))+(x3476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3477=IKcos(j4);
IkReal x3478=IKsin(j4);
IkReal x3479=((1.0)*sj0);
IkReal x3480=(cj5*r00);
IkReal x3481=(cj5*r10);
IkReal x3482=(cj5*r20);
IkReal x3483=((1.0)*x3477);
IkReal x3484=((1.0)*x3478);
IkReal x3485=(sj5*x3477);
IkReal x3486=(sj5*x3478);
evalcond[0]=((((-1.0)*x3482*x3483))+((r21*x3485))+((r22*x3478)));
evalcond[1]=((((-1.0)*x3482*x3484))+(((-1.0)*r22*x3483))+((r21*x3486)));
evalcond[2]=(cj0+(((-1.0)*x3481*x3484))+(((-1.0)*r12*x3483))+((r11*x3486)));
evalcond[3]=(((r01*x3485))+((r02*x3478))+(((-1.0)*cj0))+(((-1.0)*x3480*x3483)));
evalcond[4]=((((-1.0)*x3481*x3483))+((r12*x3478))+((r11*x3485))+(((-1.0)*x3479)));
evalcond[5]=((((-1.0)*r02*x3483))+((r01*x3486))+(((-1.0)*x3479))+(((-1.0)*x3480*x3484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3487=((1.0)*cj5);
CheckValue<IkReal> x3488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3487))+(((-1.0)*r00*sj5)))),-1);
if(!x3488.valid){
continue;
}
CheckValue<IkReal> x3489 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3488.value)))+(x3489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3490=IKcos(j4);
IkReal x3491=IKsin(j4);
IkReal x3492=((1.0)*sj0);
IkReal x3493=(cj5*r00);
IkReal x3494=(cj5*r10);
IkReal x3495=(cj5*r20);
IkReal x3496=((1.0)*x3490);
IkReal x3497=((1.0)*x3491);
IkReal x3498=(sj5*x3490);
IkReal x3499=(sj5*x3491);
evalcond[0]=(((r22*x3491))+(((-1.0)*x3495*x3496))+((r21*x3498)));
evalcond[1]=((((-1.0)*r22*x3496))+(((-1.0)*x3495*x3497))+((r21*x3499)));
evalcond[2]=((((-1.0)*r12*x3496))+cj0+(((-1.0)*x3494*x3497))+((r11*x3499)));
evalcond[3]=(((r01*x3498))+(((-1.0)*x3493*x3496))+((r02*x3491))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3494*x3496))+(((-1.0)*x3492))+((r11*x3498))+((r12*x3491)));
evalcond[5]=((((-1.0)*r02*x3496))+((r01*x3499))+(((-1.0)*x3492))+(((-1.0)*x3493*x3497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3500 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3500.valid){
continue;
}
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3500.value)+(((1.5707963267949)*(x3501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3502=IKcos(j4);
IkReal x3503=IKsin(j4);
IkReal x3504=((1.0)*sj0);
IkReal x3505=(cj5*r00);
IkReal x3506=(cj5*r10);
IkReal x3507=(cj5*r20);
IkReal x3508=((1.0)*x3502);
IkReal x3509=((1.0)*x3503);
IkReal x3510=(sj5*x3502);
IkReal x3511=(sj5*x3503);
evalcond[0]=(((r21*x3510))+((r22*x3503))+(((-1.0)*x3507*x3508)));
evalcond[1]=(((r21*x3511))+(((-1.0)*r22*x3508))+(((-1.0)*x3507*x3509)));
evalcond[2]=((((-1.0)*r12*x3508))+(((-1.0)*x3506*x3509))+cj0+((r11*x3511)));
evalcond[3]=(((r01*x3510))+((r02*x3503))+(((-1.0)*x3505*x3508))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3506*x3508))+(((-1.0)*x3504))+((r12*x3503))+((r11*x3510)));
evalcond[5]=(((r01*x3511))+(((-1.0)*x3504))+(((-1.0)*x3505*x3509))+(((-1.0)*r02*x3508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3512=(sj1*sj2);
IkReal x3513=(r00*sj5);
IkReal x3514=(cj5*r01);
IkReal x3515=((212.5)*cj1);
IkReal x3516=(cj1*cj2);
IkReal x3517=((500.0)*px);
IkReal x3518=((246.0)*x3516);
CheckValue<IkReal> x3519=IKPowWithIntegerCheck(((((-67.0)*x3516))+(((67.0)*x3512))),-1);
if(!x3519.valid){
continue;
}
CheckValue<IkReal> x3520=IKPowWithIntegerCheck((x3512+(((-1.0)*x3516))),-1);
if(!x3520.valid){
continue;
}
if( IKabs(((x3519.value)*(((((-1.0)*x3512*x3517))+(((-246.0)*x3512*x3514))+(((-246.0)*x3512*x3513))+((x3514*x3518))+((x3514*x3515))+((x3513*x3518))+((x3513*x3515))+((x3516*x3517)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3520.value)*((x3513+x3514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3519.value)*(((((-1.0)*x3512*x3517))+(((-246.0)*x3512*x3514))+(((-246.0)*x3512*x3513))+((x3514*x3518))+((x3514*x3515))+((x3513*x3518))+((x3513*x3515))+((x3516*x3517))))))+IKsqr(((x3520.value)*((x3513+x3514))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3519.value)*(((((-1.0)*x3512*x3517))+(((-246.0)*x3512*x3514))+(((-246.0)*x3512*x3513))+((x3514*x3518))+((x3514*x3515))+((x3513*x3518))+((x3513*x3515))+((x3516*x3517))))), ((x3520.value)*((x3513+x3514))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3521=IKcos(j0);
IkReal x3522=IKsin(j0);
IkReal x3523=((0.1)*sj5);
IkReal x3524=(cj5*r11);
IkReal x3525=(sj1*sj2);
IkReal x3526=(cj1*cj2);
IkReal x3527=((1.0)*sj5);
IkReal x3528=(cj5*r01);
IkReal x3529=((0.425)*cj1);
IkReal x3530=((0.392)*x3522);
IkReal x3531=((0.392)*x3521);
evalcond[0]=((((-1.0)*x3528))+(((-1.0)*x3521*x3526))+(((-1.0)*r00*x3527))+((x3521*x3525)));
evalcond[1]=((((-1.0)*x3524))+(((-1.0)*r10*x3527))+(((-1.0)*x3522*x3526))+((x3522*x3525)));
evalcond[2]=((((-0.134)*x3522))+(((-1.0)*x3525*x3531))+(((-1.0)*px))+(((-0.1)*x3528))+(((-1.0)*r00*x3523))+((x3521*x3529))+((x3526*x3531)));
evalcond[3]=((((0.134)*x3521))+(((-1.0)*r10*x3523))+(((-1.0)*x3525*x3530))+((x3522*x3529))+(((-1.0)*py))+(((-0.1)*x3524))+((x3526*x3530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3532=((1.0)*cj5);
IkReal x3533=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3532)));
j4eval[0]=x3533;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3532))))));
j4eval[2]=IKsign(x3533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3534=((1.0)*cj5);
IkReal x3535=((((-1.0)*r11*x3534))+(((-1.0)*r10*sj5)));
j4eval[0]=x3535;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3534))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3536=((1.0)*sj0);
IkReal x3537=((1.0)*cj0);
IkReal x3538=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3538;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x3537))+(((-1.0)*r11*sj5*x3536))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x3536))+(((-1.0)*r02*x3537))))));
j4eval[2]=IKsign(x3538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3539=((-1.0)*r20);
IkReal x3541 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3541)==0){
continue;
}
IkReal x3540=pow(x3541,-0.5);
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3539),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3542.value));
IkReal gconst97=(r21*x3540);
IkReal gconst98=(x3539*x3540);
CheckValue<IkReal> x3543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3543.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3543.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3544=((-1.0)*r20);
IkReal x3545=x3540;
CheckValue<IkReal> x3547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3544),IKFAST_ATAN2_MAGTHRESH);
if(!x3547.valid){
continue;
}
IkReal x3546=((-1.0)*(x3547.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3546;
IkReal gconst96=x3546;
IkReal gconst97=(r21*x3545);
IkReal gconst98=(x3544*x3545);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3548=((-1.0)*r20);
IkReal x3549=x3540;
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3548),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
IkReal x3550=((-1.0)*(x3551.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3550;
IkReal gconst96=x3550;
IkReal gconst97=(r21*x3549);
IkReal gconst98=(x3548*x3549);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3552=((-1.0)*r20);
IkReal x3553=x3540;
CheckValue<IkReal> x3555 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3552),IKFAST_ATAN2_MAGTHRESH);
if(!x3555.valid){
continue;
}
IkReal x3554=((-1.0)*(x3555.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3554;
IkReal gconst96=x3554;
IkReal gconst97=(r21*x3553);
IkReal gconst98=(x3552*x3553);
IkReal x3556=((1.0)*(r22*r22));
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3556))),-1);
if(!x3560.valid){
continue;
}
IkReal x3557=x3560.value;
IkReal x3558=((1.0)*x3557);
IkReal x3559=((((-1.0)*x3556))+(((-1.0)*x3558*(r20*r20*r20*r20)))+(((-2.0)*x3557*(r20*r20)*(r21*r21)))+(((-1.0)*x3558*(r21*r21*r21*r21))));
j4eval[0]=x3559;
j4eval[1]=IKsign(x3559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3561=(cj1*cj2);
IkReal x3562=(gconst98*r20);
IkReal x3563=(sj1*sj2);
IkReal x3564=(gconst97*r21);
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal((((r22*x3563))+(((-1.0)*r22*x3561)))),IkReal((((x3563*x3564))+(((-1.0)*x3562*x3563))+((x3561*x3562))+(((-1.0)*x3561*x3564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
CheckValue<IkReal> x3566=IKPowWithIntegerCheck(IKsign(((((2.0)*x3562*x3564))+(((-1.0)*(x3564*x3564)))+(((-1.0)*(x3562*x3562)))+(((-1.0)*(r22*r22))))),-1);
if(!x3566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3565.value)+(((1.5707963267949)*(x3566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3567=IKsin(j4);
IkReal x3568=IKcos(j4);
IkReal x3569=(gconst98*r10);
IkReal x3570=(gconst97*r21);
IkReal x3571=(gconst98*r20);
IkReal x3572=((1.0)*cj2);
IkReal x3573=((1.0)*sj0);
IkReal x3574=(gconst98*r00);
IkReal x3575=(cj1*sj2);
IkReal x3576=((1.0)*x3568);
IkReal x3577=((1.0)*x3567);
IkReal x3578=(gconst97*x3567);
IkReal x3579=(gconst97*x3568);
evalcond[0]=(((x3567*x3570))+(((-1.0)*x3571*x3577))+(((-1.0)*r22*x3576)));
evalcond[1]=(cj0+(((-1.0)*x3569*x3577))+((r11*x3578))+(((-1.0)*r12*x3576)));
evalcond[2]=(((r01*x3578))+(((-1.0)*x3573))+(((-1.0)*x3574*x3577))+(((-1.0)*r02*x3576)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3571*x3576))+((r22*x3567))+((x3568*x3570))+(((-1.0)*cj1*x3572)));
evalcond[4]=(((r01*x3579))+(((-1.0)*cj0*x3575))+(((-1.0)*x3574*x3576))+((r02*x3567))+(((-1.0)*cj0*sj1*x3572)));
evalcond[5]=((((-1.0)*sj0*sj1*x3572))+(((-1.0)*x3573*x3575))+(((-1.0)*x3569*x3576))+((r11*x3579))+((r12*x3567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3580=((1.0)*gconst98);
CheckValue<IkReal> x3581=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r10))+(((-1.0)*r11*x3580)))),-1);
if(!x3581.valid){
continue;
}
CheckValue<IkReal> x3582 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3581.value)))+(x3582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3583=IKsin(j4);
IkReal x3584=IKcos(j4);
IkReal x3585=(gconst98*r10);
IkReal x3586=(gconst97*r21);
IkReal x3587=(gconst98*r20);
IkReal x3588=((1.0)*cj2);
IkReal x3589=((1.0)*sj0);
IkReal x3590=(gconst98*r00);
IkReal x3591=(cj1*sj2);
IkReal x3592=((1.0)*x3584);
IkReal x3593=((1.0)*x3583);
IkReal x3594=(gconst97*x3583);
IkReal x3595=(gconst97*x3584);
evalcond[0]=((((-1.0)*x3587*x3593))+((x3583*x3586))+(((-1.0)*r22*x3592)));
evalcond[1]=(cj0+((r11*x3594))+(((-1.0)*x3585*x3593))+(((-1.0)*r12*x3592)));
evalcond[2]=((((-1.0)*x3590*x3593))+(((-1.0)*r02*x3592))+((r01*x3594))+(((-1.0)*x3589)));
evalcond[3]=((((-1.0)*x3587*x3592))+((x3584*x3586))+((sj1*sj2))+(((-1.0)*cj1*x3588))+((r22*x3583)));
evalcond[4]=((((-1.0)*cj0*sj1*x3588))+((r02*x3583))+(((-1.0)*cj0*x3591))+(((-1.0)*x3590*x3592))+((r01*x3595)));
evalcond[5]=((((-1.0)*x3589*x3591))+((r12*x3583))+((r11*x3595))+(((-1.0)*x3585*x3592))+(((-1.0)*sj0*sj1*x3588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3596=((1.0)*gconst98);
CheckValue<IkReal> x3597 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3596))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3597.valid){
continue;
}
CheckValue<IkReal> x3598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3596))+(((-1.0)*gconst97*r00)))),-1);
if(!x3598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3597.value)+(((1.5707963267949)*(x3598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3599=IKsin(j4);
IkReal x3600=IKcos(j4);
IkReal x3601=(gconst98*r10);
IkReal x3602=(gconst97*r21);
IkReal x3603=(gconst98*r20);
IkReal x3604=((1.0)*cj2);
IkReal x3605=((1.0)*sj0);
IkReal x3606=(gconst98*r00);
IkReal x3607=(cj1*sj2);
IkReal x3608=((1.0)*x3600);
IkReal x3609=((1.0)*x3599);
IkReal x3610=(gconst97*x3599);
IkReal x3611=(gconst97*x3600);
evalcond[0]=(((x3599*x3602))+(((-1.0)*x3603*x3609))+(((-1.0)*r22*x3608)));
evalcond[1]=(((r11*x3610))+cj0+(((-1.0)*r12*x3608))+(((-1.0)*x3601*x3609)));
evalcond[2]=((((-1.0)*x3606*x3609))+(((-1.0)*r02*x3608))+((r01*x3610))+(((-1.0)*x3605)));
evalcond[3]=(((sj1*sj2))+((x3600*x3602))+(((-1.0)*x3603*x3608))+((r22*x3599))+(((-1.0)*cj1*x3604)));
evalcond[4]=((((-1.0)*x3606*x3608))+((r02*x3599))+((r01*x3611))+(((-1.0)*cj0*x3607))+(((-1.0)*cj0*sj1*x3604)));
evalcond[5]=(((r11*x3611))+(((-1.0)*x3601*x3608))+((r12*x3599))+(((-1.0)*sj0*sj1*x3604))+(((-1.0)*x3605*x3607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3612=((-1.0)*r21);
IkReal x3614 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3614)==0){
continue;
}
IkReal x3613=pow(x3614,-0.5);
CheckValue<IkReal> x3615 = IKatan2WithCheck(IkReal(x3612),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3615.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3615.value))));
IkReal gconst100=(x3612*x3613);
IkReal gconst101=((1.0)*r20*x3613);
CheckValue<IkReal> x3616 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3616.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3616.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3617=((-1.0)*r21);
CheckValue<IkReal> x3620 = IKatan2WithCheck(IkReal(x3617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3620.valid){
continue;
}
IkReal x3618=((1.0)*(x3620.value));
IkReal x3619=x3613;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3618)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3618)));
IkReal gconst100=(x3617*x3619);
IkReal gconst101=((1.0)*r20*x3619);
IkReal x3621=r22*r22;
IkReal x3622=((1.0)*x3621);
CheckValue<IkReal> x3626=IKPowWithIntegerCheck(((-1.0)+x3621),-1);
if(!x3626.valid){
continue;
}
IkReal x3623=x3626.value;
if((((1.0)+(((-1.0)*x3622)))) < -0.00001)
continue;
IkReal x3624=IKsqrt(((1.0)+(((-1.0)*x3622))));
IkReal x3625=(cj0*x3623*x3624);
j4eval[0]=((IKabs(((((-1.0)*x3622*x3625))+x3625)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3627=((-1.0)*r21);
CheckValue<IkReal> x3630 = IKatan2WithCheck(IkReal(x3627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3630.valid){
continue;
}
IkReal x3628=((1.0)*(x3630.value));
IkReal x3629=x3613;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3628)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3628)));
IkReal gconst100=(x3627*x3629);
IkReal gconst101=((1.0)*r20*x3629);
IkReal x3631=r22*r22;
IkReal x3632=((1.0)*x3631);
CheckValue<IkReal> x3636=IKPowWithIntegerCheck(((-1.0)+x3631),-1);
if(!x3636.valid){
continue;
}
IkReal x3633=x3636.value;
if((((1.0)+(((-1.0)*x3632)))) < -0.00001)
continue;
IkReal x3634=IKsqrt(((1.0)+(((-1.0)*x3632))));
IkReal x3635=(sj0*x3633*x3634);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3635+(((-1.0)*x3632*x3635))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3637=((-1.0)*r21);
CheckValue<IkReal> x3640 = IKatan2WithCheck(IkReal(x3637),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3640.valid){
continue;
}
IkReal x3638=((1.0)*(x3640.value));
IkReal x3639=x3613;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3638)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3638)));
IkReal gconst100=(x3637*x3639);
IkReal gconst101=((1.0)*r20*x3639);
IkReal x3641=r22*r22;
IkReal x3642=(r12*sj0);
IkReal x3643=(cj0*r02);
CheckValue<IkReal> x3647=IKPowWithIntegerCheck(((-1.0)+x3641),-1);
if(!x3647.valid){
continue;
}
IkReal x3644=x3647.value;
if((((1.0)+(((-1.0)*x3641)))) < -0.00001)
continue;
IkReal x3645=IKsqrt(((1.0)+(((-1.0)*x3641))));
IkReal x3646=(r22*x3644*x3645);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3643*x3646))+((x3642*x3646)))))+(IKabs(((((-1.0)*x3643))+(((-1.0)*x3642))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3648=((1.0)*sj0);
IkReal x3649=((1.0)*gconst100);
CheckValue<IkReal> x3650 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3648))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3648))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3650.valid){
continue;
}
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3649))+(((-1.0)*gconst101*r21)))),-1);
if(!x3651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3650.value)+(((1.5707963267949)*(x3651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3652=IKsin(j4);
IkReal x3653=IKcos(j4);
IkReal x3654=(gconst101*r20);
IkReal x3655=(gconst101*r10);
IkReal x3656=((1.0)*cj2);
IkReal x3657=(gconst101*r00);
IkReal x3658=((1.0)*sj0);
IkReal x3659=(cj1*sj2);
IkReal x3660=((1.0)*x3653);
IkReal x3661=((1.0)*x3652);
IkReal x3662=(gconst100*x3652);
IkReal x3663=(gconst100*x3653);
evalcond[0]=((((-1.0)*x3654*x3661))+(((-1.0)*r22*x3660))+((r21*x3662)));
evalcond[1]=(cj0+((r11*x3662))+(((-1.0)*x3655*x3661))+(((-1.0)*r12*x3660)));
evalcond[2]=((((-1.0)*r02*x3660))+((r01*x3662))+(((-1.0)*x3657*x3661))+(((-1.0)*x3658)));
evalcond[3]=((((-1.0)*x3654*x3660))+((sj1*sj2))+(((-1.0)*cj1*x3656))+((r21*x3663))+((r22*x3652)));
evalcond[4]=((((-1.0)*cj0*x3659))+((r01*x3663))+((r02*x3652))+(((-1.0)*x3657*x3660))+(((-1.0)*cj0*sj1*x3656)));
evalcond[5]=((((-1.0)*sj0*sj1*x3656))+((r12*x3652))+((r11*x3663))+(((-1.0)*x3655*x3660))+(((-1.0)*x3658*x3659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3664=((1.0)*gconst101);
CheckValue<IkReal> x3665 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3664))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3665.valid){
continue;
}
CheckValue<IkReal> x3666=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3664)))),-1);
if(!x3666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3665.value)+(((1.5707963267949)*(x3666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3667=IKsin(j4);
IkReal x3668=IKcos(j4);
IkReal x3669=(gconst101*r20);
IkReal x3670=(gconst101*r10);
IkReal x3671=((1.0)*cj2);
IkReal x3672=(gconst101*r00);
IkReal x3673=((1.0)*sj0);
IkReal x3674=(cj1*sj2);
IkReal x3675=((1.0)*x3668);
IkReal x3676=((1.0)*x3667);
IkReal x3677=(gconst100*x3667);
IkReal x3678=(gconst100*x3668);
evalcond[0]=(((r21*x3677))+(((-1.0)*r22*x3675))+(((-1.0)*x3669*x3676)));
evalcond[1]=(cj0+(((-1.0)*x3670*x3676))+((r11*x3677))+(((-1.0)*r12*x3675)));
evalcond[2]=(((r01*x3677))+(((-1.0)*x3672*x3676))+(((-1.0)*r02*x3675))+(((-1.0)*x3673)));
evalcond[3]=(((r22*x3667))+((sj1*sj2))+((r21*x3678))+(((-1.0)*cj1*x3671))+(((-1.0)*x3669*x3675)));
evalcond[4]=(((r01*x3678))+(((-1.0)*cj0*x3674))+(((-1.0)*x3672*x3675))+((r02*x3667))+(((-1.0)*cj0*sj1*x3671)));
evalcond[5]=((((-1.0)*x3670*x3675))+((r11*x3678))+(((-1.0)*x3673*x3674))+((r12*x3667))+(((-1.0)*sj0*sj1*x3671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3679=((1.0)*gconst101);
CheckValue<IkReal> x3680 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3680.valid){
continue;
}
CheckValue<IkReal> x3681=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3679)))),-1);
if(!x3681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3680.value)+(((1.5707963267949)*(x3681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3682=IKsin(j4);
IkReal x3683=IKcos(j4);
IkReal x3684=(gconst101*r20);
IkReal x3685=(gconst101*r10);
IkReal x3686=((1.0)*cj2);
IkReal x3687=(gconst101*r00);
IkReal x3688=((1.0)*sj0);
IkReal x3689=(cj1*sj2);
IkReal x3690=((1.0)*x3683);
IkReal x3691=((1.0)*x3682);
IkReal x3692=(gconst100*x3682);
IkReal x3693=(gconst100*x3683);
evalcond[0]=((((-1.0)*r22*x3690))+((r21*x3692))+(((-1.0)*x3684*x3691)));
evalcond[1]=((((-1.0)*x3685*x3691))+cj0+(((-1.0)*r12*x3690))+((r11*x3692)));
evalcond[2]=(((r01*x3692))+(((-1.0)*x3688))+(((-1.0)*x3687*x3691))+(((-1.0)*r02*x3690)));
evalcond[3]=(((sj1*sj2))+((r21*x3693))+(((-1.0)*cj1*x3686))+((r22*x3682))+(((-1.0)*x3684*x3690)));
evalcond[4]=(((r01*x3693))+(((-1.0)*cj0*x3689))+(((-1.0)*x3687*x3690))+((r02*x3682))+(((-1.0)*cj0*sj1*x3686)));
evalcond[5]=((((-1.0)*x3685*x3690))+(((-1.0)*sj0*sj1*x3686))+((r12*x3682))+((r11*x3693))+(((-1.0)*x3688*x3689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3694=((-1.0)*r10);
IkReal x3696 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3696)==0){
continue;
}
IkReal x3695=pow(x3696,-0.5);
CheckValue<IkReal> x3697 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3694),IKFAST_ATAN2_MAGTHRESH);
if(!x3697.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3697.value));
IkReal gconst103=(r11*x3695);
IkReal gconst104=(x3694*x3695);
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3698.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3699=((-1.0)*r10);
IkReal x3700=x3695;
CheckValue<IkReal> x3702 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3699),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
IkReal x3701=((-1.0)*(x3702.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3701;
IkReal gconst102=x3701;
IkReal gconst103=(r11*x3700);
IkReal gconst104=(x3699*x3700);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3703=((1.0)*sj0);
IkReal x3704=((1.0)*gconst103);
CheckValue<IkReal> x3705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3704)))),-1);
if(!x3705.valid){
continue;
}
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3703)))),IkReal(((((-1.0)*gconst103*r11*x3703))+(((-1.0)*cj0*r01*x3704))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3705.value)))+(x3706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3707=IKsin(j4);
IkReal x3708=IKcos(j4);
IkReal x3709=(gconst103*r11);
IkReal x3710=((1.0)*cj2);
IkReal x3711=((1.0)*sj0);
IkReal x3712=(cj1*sj2);
IkReal x3713=((1.0)*x3708);
IkReal x3714=(gconst103*x3708);
IkReal x3715=(gconst103*x3707);
IkReal x3716=((1.0)*gconst104*x3707);
evalcond[0]=((((-1.0)*r20*x3716))+((r21*x3715))+(((-1.0)*r22*x3713)));
evalcond[1]=(cj0+(((-1.0)*r10*x3716))+((x3707*x3709))+(((-1.0)*r12*x3713)));
evalcond[2]=((((-1.0)*r00*x3716))+(((-1.0)*r02*x3713))+(((-1.0)*x3711))+((r01*x3715)));
evalcond[3]=((((-1.0)*gconst104*r20*x3713))+(((-1.0)*cj1*x3710))+((sj1*sj2))+((r21*x3714))+((r22*x3707)));
evalcond[4]=((((-1.0)*cj0*x3712))+((r01*x3714))+(((-1.0)*gconst104*r00*x3713))+((r02*x3707))+(((-1.0)*cj0*sj1*x3710)));
evalcond[5]=(((r12*x3707))+(((-1.0)*x3711*x3712))+(((-1.0)*sj0*sj1*x3710))+((x3708*x3709))+(((-1.0)*gconst104*r10*x3713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3717=((1.0)*gconst104);
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3717)))),-1);
if(!x3718.valid){
continue;
}
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3717))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3718.value)))+(x3719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3720=IKsin(j4);
IkReal x3721=IKcos(j4);
IkReal x3722=(gconst103*r11);
IkReal x3723=((1.0)*cj2);
IkReal x3724=((1.0)*sj0);
IkReal x3725=(cj1*sj2);
IkReal x3726=((1.0)*x3721);
IkReal x3727=(gconst103*x3721);
IkReal x3728=(gconst103*x3720);
IkReal x3729=((1.0)*gconst104*x3720);
evalcond[0]=((((-1.0)*r22*x3726))+(((-1.0)*r20*x3729))+((r21*x3728)));
evalcond[1]=(cj0+(((-1.0)*r12*x3726))+((x3720*x3722))+(((-1.0)*r10*x3729)));
evalcond[2]=((((-1.0)*x3724))+((r01*x3728))+(((-1.0)*r00*x3729))+(((-1.0)*r02*x3726)));
evalcond[3]=((((-1.0)*cj1*x3723))+((r22*x3720))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3726))+((r21*x3727)));
evalcond[4]=((((-1.0)*cj0*x3725))+(((-1.0)*gconst104*r00*x3726))+((r01*x3727))+((r02*x3720))+(((-1.0)*cj0*sj1*x3723)));
evalcond[5]=((((-1.0)*gconst104*r10*x3726))+(((-1.0)*sj0*sj1*x3723))+(((-1.0)*x3724*x3725))+((r12*x3720))+((x3721*x3722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3730=((-1.0)*r11);
IkReal x3732 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3732)==0){
continue;
}
IkReal x3731=pow(x3732,-0.5);
CheckValue<IkReal> x3733 = IKatan2WithCheck(IkReal(x3730),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3733.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3733.value))));
IkReal gconst106=(x3730*x3731);
IkReal gconst107=((1.0)*r10*x3731);
CheckValue<IkReal> x3734 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3734.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3734.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3735=((-1.0)*r11);
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(x3735),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
IkReal x3736=((1.0)*(x3738.value));
IkReal x3737=x3731;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3736)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3736)));
IkReal gconst106=(x3735*x3737);
IkReal gconst107=((1.0)*r10*x3737);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3739=((-1.0)*r11);
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal(x3739),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
IkReal x3740=((1.0)*(x3742.value));
IkReal x3741=x3731;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3740)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3740)));
IkReal gconst106=(x3739*x3741);
IkReal gconst107=((1.0)*r10*x3741);
IkReal x3743=r12*r12;
IkReal x3744=((1.0)*sj0);
IkReal x3745=(cj0*r02);
IkReal x3746=x3731;
j4eval[0]=((IKabs(((((-1.0)*r12*x3744))+(((-1.0)*x3745)))))+(IKabs((((r12*x3745*x3746))+((sj0*x3743*x3746))+(((-1.0)*x3744*x3746))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3747=((-1.0)*r11);
CheckValue<IkReal> x3750 = IKatan2WithCheck(IkReal(x3747),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3750.valid){
continue;
}
IkReal x3748=((1.0)*(x3750.value));
IkReal x3749=x3731;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3748)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3748)));
IkReal gconst106=(x3747*x3749);
IkReal gconst107=((1.0)*r10*x3749);
IkReal x3751=r12*r12;
IkReal x3752=((1.0)+(((-1.0)*x3751)));
IkReal x3753=(r22*sj1*sj2);
IkReal x3754=(cj1*cj2*r22);
CheckValue<IkReal> x3761=IKPowWithIntegerCheck(x3752,-1);
if(!x3761.valid){
continue;
}
IkReal x3755=x3761.value;
CheckValue<IkReal> x3762=IKPowWithIntegerCheck(((-1.0)+x3751),-1);
if(!x3762.valid){
continue;
}
IkReal x3756=x3762.value;
IkReal x3757=((1.0)*x3755);
if((x3752) < -0.00001)
continue;
IkReal x3758=IKsqrt(x3752);
IkReal x3759=(r12*x3756*x3758);
IkReal x3760=((((-1.0)*x3757*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x3755))+(((-1.0)*x3757*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3760;
j4eval[1]=((IKabs((((x3754*x3759))+(((-1.0)*x3753*x3759)))))+(IKabs((x3753+(((-1.0)*x3754))))));
j4eval[2]=IKsign(x3760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3763=(sj1*sj2);
IkReal x3764=(gconst106*r21);
IkReal x3765=(gconst107*r20);
IkReal x3766=(cj1*cj2);
CheckValue<IkReal> x3767=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3764*x3764)))+(((2.0)*x3764*x3765))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3765*x3765))))),-1);
if(!x3767.valid){
continue;
}
CheckValue<IkReal> x3768 = IKatan2WithCheck(IkReal((((r22*x3763))+(((-1.0)*r22*x3766)))),IkReal(((((-1.0)*x3764*x3766))+(((-1.0)*x3763*x3765))+((x3763*x3764))+((x3765*x3766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3767.value)))+(x3768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3769=IKsin(j4);
IkReal x3770=IKcos(j4);
IkReal x3771=(gconst107*r10);
IkReal x3772=(gconst107*r00);
IkReal x3773=((1.0)*cj2);
IkReal x3774=(gconst107*r20);
IkReal x3775=((1.0)*sj0);
IkReal x3776=(cj1*sj2);
IkReal x3777=((1.0)*x3770);
IkReal x3778=(gconst106*x3770);
IkReal x3779=(gconst106*x3769);
IkReal x3780=((1.0)*x3769);
evalcond[0]=(((r21*x3779))+(((-1.0)*r22*x3777))+(((-1.0)*x3774*x3780)));
evalcond[1]=(cj0+(((-1.0)*x3771*x3780))+((r11*x3779))+(((-1.0)*r12*x3777)));
evalcond[2]=((((-1.0)*x3772*x3780))+(((-1.0)*r02*x3777))+(((-1.0)*x3775))+((r01*x3779)));
evalcond[3]=(((r22*x3769))+((r21*x3778))+((sj1*sj2))+(((-1.0)*x3774*x3777))+(((-1.0)*cj1*x3773)));
evalcond[4]=(((r02*x3769))+(((-1.0)*cj0*sj1*x3773))+(((-1.0)*cj0*x3776))+(((-1.0)*x3772*x3777))+((r01*x3778)));
evalcond[5]=(((r11*x3778))+(((-1.0)*x3775*x3776))+(((-1.0)*sj0*sj1*x3773))+((r12*x3769))+(((-1.0)*x3771*x3777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3781=((1.0)*sj0);
IkReal x3782=((1.0)*gconst106);
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3782)))),-1);
if(!x3783.valid){
continue;
}
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3781)))),IkReal(((((-1.0)*cj0*r01*x3782))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3781))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3783.value)))+(x3784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3785=IKsin(j4);
IkReal x3786=IKcos(j4);
IkReal x3787=(gconst107*r10);
IkReal x3788=(gconst107*r00);
IkReal x3789=((1.0)*cj2);
IkReal x3790=(gconst107*r20);
IkReal x3791=((1.0)*sj0);
IkReal x3792=(cj1*sj2);
IkReal x3793=((1.0)*x3786);
IkReal x3794=(gconst106*x3786);
IkReal x3795=(gconst106*x3785);
IkReal x3796=((1.0)*x3785);
evalcond[0]=(((r21*x3795))+(((-1.0)*r22*x3793))+(((-1.0)*x3790*x3796)));
evalcond[1]=((((-1.0)*r12*x3793))+cj0+((r11*x3795))+(((-1.0)*x3787*x3796)));
evalcond[2]=((((-1.0)*x3791))+(((-1.0)*r02*x3793))+((r01*x3795))+(((-1.0)*x3788*x3796)));
evalcond[3]=(((r21*x3794))+((r22*x3785))+((sj1*sj2))+(((-1.0)*cj1*x3789))+(((-1.0)*x3790*x3793)));
evalcond[4]=(((r02*x3785))+(((-1.0)*cj0*x3792))+((r01*x3794))+(((-1.0)*x3788*x3793))+(((-1.0)*cj0*sj1*x3789)));
evalcond[5]=(((r12*x3785))+(((-1.0)*x3791*x3792))+(((-1.0)*sj0*sj1*x3789))+((r11*x3794))+(((-1.0)*x3787*x3793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3797=((1.0)*gconst107);
CheckValue<IkReal> x3798=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3797)))),-1);
if(!x3798.valid){
continue;
}
CheckValue<IkReal> x3799 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3798.value)))+(x3799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3800=IKsin(j4);
IkReal x3801=IKcos(j4);
IkReal x3802=(gconst107*r10);
IkReal x3803=(gconst107*r00);
IkReal x3804=((1.0)*cj2);
IkReal x3805=(gconst107*r20);
IkReal x3806=((1.0)*sj0);
IkReal x3807=(cj1*sj2);
IkReal x3808=((1.0)*x3801);
IkReal x3809=(gconst106*x3801);
IkReal x3810=(gconst106*x3800);
IkReal x3811=((1.0)*x3800);
evalcond[0]=(((r21*x3810))+(((-1.0)*x3805*x3811))+(((-1.0)*r22*x3808)));
evalcond[1]=(cj0+((r11*x3810))+(((-1.0)*x3802*x3811))+(((-1.0)*r12*x3808)));
evalcond[2]=((((-1.0)*x3806))+(((-1.0)*x3803*x3811))+(((-1.0)*r02*x3808))+((r01*x3810)));
evalcond[3]=((((-1.0)*x3805*x3808))+((r21*x3809))+((r22*x3800))+((sj1*sj2))+(((-1.0)*cj1*x3804)));
evalcond[4]=(((r01*x3809))+((r02*x3800))+(((-1.0)*cj0*x3807))+(((-1.0)*cj0*sj1*x3804))+(((-1.0)*x3803*x3808)));
evalcond[5]=((((-1.0)*sj0*sj1*x3804))+((r11*x3809))+((r12*x3800))+(((-1.0)*x3802*x3808))+(((-1.0)*x3806*x3807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3812=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3812;
j4eval[1]=IKsign(x3812);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3813=((1.0)*cj5);
IkReal x3814=((((-1.0)*r01*x3813))+(((-1.0)*r00*sj5)));
j4eval[0]=x3814;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3813)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3815=(sj1*sj2);
IkReal x3816=(cj5*r10);
IkReal x3817=(r11*sj5);
IkReal x3818=(cj1*cj2);
IkReal x3819=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3819;
j4eval[1]=((IKabs((((r12*x3818))+(((-1.0)*r12*x3815)))))+(IKabs((((x3815*x3817))+(((-1.0)*x3817*x3818))+((x3816*x3818))+(((-1.0)*x3815*x3816))))));
j4eval[2]=IKsign(x3819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3820=(sj1*sj2);
IkReal x3821=(cj5*r10);
IkReal x3822=(r11*sj5);
IkReal x3823=(cj1*cj2);
CheckValue<IkReal> x3824 = IKatan2WithCheck(IkReal((((x3820*x3822))+((x3821*x3823))+(((-1.0)*x3820*x3821))+(((-1.0)*x3822*x3823)))),IkReal((((r12*x3823))+(((-1.0)*r12*x3820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3824.value)+(((1.5707963267949)*(x3825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3826=IKcos(j4);
IkReal x3827=IKsin(j4);
IkReal x3828=(cj5*r00);
IkReal x3829=(cj5*r10);
IkReal x3830=(r21*sj5);
IkReal x3831=((1.0)*cj2);
IkReal x3832=(cj5*r20);
IkReal x3833=((1.0)*x3826);
IkReal x3834=((1.0)*x3827);
IkReal x3835=(sj5*x3827);
IkReal x3836=(sj5*x3826);
evalcond[0]=(((r12*x3827))+(((-1.0)*x3829*x3833))+((r11*x3836)));
evalcond[1]=((((-1.0)*x3832*x3834))+((x3827*x3830))+(((-1.0)*r22*x3833)));
evalcond[2]=((((-1.0)*x3828*x3834))+((r01*x3835))+(((-1.0)*r02*x3833)));
evalcond[3]=((1.0)+(((-1.0)*x3829*x3834))+(((-1.0)*r12*x3833))+((r11*x3835)));
evalcond[4]=((((-1.0)*x3832*x3833))+((sj1*sj2))+((x3826*x3830))+((r22*x3827))+(((-1.0)*cj1*x3831)));
evalcond[5]=((((-1.0)*x3828*x3833))+((r01*x3836))+(((-1.0)*cj1*sj2))+((r02*x3827))+(((-1.0)*sj1*x3831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3837=((1.0)*cj5);
CheckValue<IkReal> x3838 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3837))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3838.valid){
continue;
}
CheckValue<IkReal> x3839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3837)))),-1);
if(!x3839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3838.value)+(((1.5707963267949)*(x3839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3840=IKcos(j4);
IkReal x3841=IKsin(j4);
IkReal x3842=(cj5*r00);
IkReal x3843=(cj5*r10);
IkReal x3844=(r21*sj5);
IkReal x3845=((1.0)*cj2);
IkReal x3846=(cj5*r20);
IkReal x3847=((1.0)*x3840);
IkReal x3848=((1.0)*x3841);
IkReal x3849=(sj5*x3841);
IkReal x3850=(sj5*x3840);
evalcond[0]=(((r12*x3841))+((r11*x3850))+(((-1.0)*x3843*x3847)));
evalcond[1]=(((x3841*x3844))+(((-1.0)*r22*x3847))+(((-1.0)*x3846*x3848)));
evalcond[2]=((((-1.0)*r02*x3847))+(((-1.0)*x3842*x3848))+((r01*x3849)));
evalcond[3]=((1.0)+(((-1.0)*x3843*x3848))+(((-1.0)*r12*x3847))+((r11*x3849)));
evalcond[4]=(((sj1*sj2))+((x3840*x3844))+(((-1.0)*cj1*x3845))+((r22*x3841))+(((-1.0)*x3846*x3847)));
evalcond[5]=((((-1.0)*x3842*x3847))+(((-1.0)*sj1*x3845))+(((-1.0)*cj1*sj2))+((r01*x3850))+((r02*x3841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3851=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3851.valid){
continue;
}
CheckValue<IkReal> x3852 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3851.value)))+(x3852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3853=IKcos(j4);
IkReal x3854=IKsin(j4);
IkReal x3855=(cj5*r00);
IkReal x3856=(cj5*r10);
IkReal x3857=(r21*sj5);
IkReal x3858=((1.0)*cj2);
IkReal x3859=(cj5*r20);
IkReal x3860=((1.0)*x3853);
IkReal x3861=((1.0)*x3854);
IkReal x3862=(sj5*x3854);
IkReal x3863=(sj5*x3853);
evalcond[0]=(((r11*x3863))+(((-1.0)*x3856*x3860))+((r12*x3854)));
evalcond[1]=(((x3854*x3857))+(((-1.0)*x3859*x3861))+(((-1.0)*r22*x3860)));
evalcond[2]=((((-1.0)*r02*x3860))+((r01*x3862))+(((-1.0)*x3855*x3861)));
evalcond[3]=((1.0)+((r11*x3862))+(((-1.0)*x3856*x3861))+(((-1.0)*r12*x3860)));
evalcond[4]=((((-1.0)*x3859*x3860))+((sj1*sj2))+((x3853*x3857))+(((-1.0)*cj1*x3858))+((r22*x3854)));
evalcond[5]=(((r02*x3854))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3858))+((r01*x3863))+(((-1.0)*x3855*x3860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3864=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3864;
j4eval[1]=IKsign(x3864);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3865=((1.0)*cj5);
IkReal x3866=((((-1.0)*r21*x3865))+(((-1.0)*r20*sj5)));
j4eval[0]=x3866;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3865))))));
j4eval[2]=IKsign(x3866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3867=cj5*cj5;
IkReal x3868=r11*r11;
IkReal x3869=(r11*sj5);
IkReal x3870=(cj5*r10);
IkReal x3871=((((-1.0)*x3867*x3868))+(r12*r12)+(((-2.0)*x3869*x3870))+x3868+((x3867*(r10*r10))));
j4eval[0]=x3871;
j4eval[1]=IKsign(x3871);
j4eval[2]=((IKabs(r12))+(IKabs((x3869+(((-1.0)*x3870))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3872=cj5*cj5;
IkReal x3873=r11*r11;
IkReal x3874=(cj5*r10);
IkReal x3875=(r11*sj5);
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3874*x3875))+((x3872*(r10*r10)))+x3873+(((-1.0)*x3872*x3873)))),-1);
if(!x3876.valid){
continue;
}
CheckValue<IkReal> x3877 = IKatan2WithCheck(IkReal((x3875+(((-1.0)*x3874)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3876.value)))+(x3877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3878=IKcos(j4);
IkReal x3879=IKsin(j4);
IkReal x3880=(cj5*r00);
IkReal x3881=(cj5*r10);
IkReal x3882=(r21*sj5);
IkReal x3883=(cj5*r20);
IkReal x3884=((1.0)*x3878);
IkReal x3885=((1.0)*x3879);
IkReal x3886=(sj5*x3879);
IkReal x3887=(sj5*x3878);
evalcond[0]=(((r11*x3887))+((r12*x3879))+(((-1.0)*x3881*x3884)));
evalcond[1]=((((-1.0)*x3883*x3885))+(((-1.0)*r22*x3884))+((x3879*x3882)));
evalcond[2]=((((-1.0)*r02*x3884))+(((-1.0)*x3880*x3885))+((r01*x3886)));
evalcond[3]=((-1.0)+((r11*x3886))+(((-1.0)*r12*x3884))+(((-1.0)*x3881*x3885)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3880*x3884))+((cj1*sj2))+((r01*x3887))+((r02*x3879)));
evalcond[5]=(((x3878*x3882))+(((-1.0)*x3883*x3884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3888=((1.0)*cj5);
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3888))+(((-1.0)*r20*sj5)))),-1);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3889.value)))+(x3890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3891=IKcos(j4);
IkReal x3892=IKsin(j4);
IkReal x3893=(cj5*r00);
IkReal x3894=(cj5*r10);
IkReal x3895=(r21*sj5);
IkReal x3896=(cj5*r20);
IkReal x3897=((1.0)*x3891);
IkReal x3898=((1.0)*x3892);
IkReal x3899=(sj5*x3892);
IkReal x3900=(sj5*x3891);
evalcond[0]=((((-1.0)*x3894*x3897))+((r12*x3892))+((r11*x3900)));
evalcond[1]=((((-1.0)*x3896*x3898))+(((-1.0)*r22*x3897))+((x3892*x3895)));
evalcond[2]=(((r01*x3899))+(((-1.0)*x3893*x3898))+(((-1.0)*r02*x3897)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3897))+((r11*x3899))+(((-1.0)*x3894*x3898)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3900))+(((-1.0)*x3893*x3897))+((r02*x3892)));
evalcond[5]=((((-1.0)*x3896*x3897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3891*x3895))+((r22*x3892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3901 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3901.valid){
continue;
}
CheckValue<IkReal> x3902=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3901.value)+(((1.5707963267949)*(x3902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3903=IKcos(j4);
IkReal x3904=IKsin(j4);
IkReal x3905=(cj5*r00);
IkReal x3906=(cj5*r10);
IkReal x3907=(r21*sj5);
IkReal x3908=(cj5*r20);
IkReal x3909=((1.0)*x3903);
IkReal x3910=((1.0)*x3904);
IkReal x3911=(sj5*x3904);
IkReal x3912=(sj5*x3903);
evalcond[0]=((((-1.0)*x3906*x3909))+((r12*x3904))+((r11*x3912)));
evalcond[1]=((((-1.0)*x3908*x3910))+(((-1.0)*r22*x3909))+((x3904*x3907)));
evalcond[2]=((((-1.0)*x3905*x3910))+((r01*x3911))+(((-1.0)*r02*x3909)));
evalcond[3]=((-1.0)+(((-1.0)*x3906*x3910))+(((-1.0)*r12*x3909))+((r11*x3911)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3905*x3909))+((cj1*sj2))+((r01*x3912))+((r02*x3904)));
evalcond[5]=(((x3903*x3907))+((r22*x3904))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3908*x3909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3913=((-1.0)*r00);
IkReal x3915 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3915)==0){
continue;
}
IkReal x3914=pow(x3915,-0.5);
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3913),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3916.value));
IkReal gconst109=(r01*x3914);
IkReal gconst110=(x3913*x3914);
CheckValue<IkReal> x3917 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3917.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3917.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3918=((-1.0)*r00);
IkReal x3919=x3914;
CheckValue<IkReal> x3921 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3918),IKFAST_ATAN2_MAGTHRESH);
if(!x3921.valid){
continue;
}
IkReal x3920=((-1.0)*(x3921.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3920;
IkReal gconst108=x3920;
IkReal gconst109=(r01*x3919);
IkReal gconst110=(x3918*x3919);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3922=((1.0)*sj0);
IkReal x3923=((1.0)*gconst109);
CheckValue<IkReal> x3924 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3922))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+(((-1.0)*cj0*r01*x3923))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3924.valid){
continue;
}
CheckValue<IkReal> x3925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3923))+(((-1.0)*gconst110*r21)))),-1);
if(!x3925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3924.value)+(((1.5707963267949)*(x3925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3926=IKsin(j4);
IkReal x3927=IKcos(j4);
IkReal x3928=(gconst109*r21);
IkReal x3929=((1.0)*cj2);
IkReal x3930=((1.0)*sj0);
IkReal x3931=(cj1*sj2);
IkReal x3932=((1.0)*x3927);
IkReal x3933=(gconst109*x3926);
IkReal x3934=(gconst109*x3927);
IkReal x3935=((1.0)*gconst110*x3926);
evalcond[0]=((((-1.0)*r22*x3932))+(((-1.0)*r20*x3935))+((x3926*x3928)));
evalcond[1]=(cj0+(((-1.0)*r12*x3932))+(((-1.0)*r10*x3935))+((r11*x3933)));
evalcond[2]=(((r01*x3933))+(((-1.0)*r00*x3935))+(((-1.0)*r02*x3932))+(((-1.0)*x3930)));
evalcond[3]=((((-1.0)*cj1*x3929))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3932))+((r22*x3926))+((x3927*x3928)));
evalcond[4]=(((r01*x3934))+(((-1.0)*cj0*x3931))+((r02*x3926))+(((-1.0)*gconst110*r00*x3932))+(((-1.0)*cj0*sj1*x3929)));
evalcond[5]=(((r12*x3926))+(((-1.0)*sj0*sj1*x3929))+(((-1.0)*x3930*x3931))+(((-1.0)*gconst110*r10*x3932))+((r11*x3934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3936=((1.0)*gconst110);
CheckValue<IkReal> x3937=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3936)))),-1);
if(!x3937.valid){
continue;
}
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3936))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3937.value)))+(x3938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3939=IKsin(j4);
IkReal x3940=IKcos(j4);
IkReal x3941=(gconst109*r21);
IkReal x3942=((1.0)*cj2);
IkReal x3943=((1.0)*sj0);
IkReal x3944=(cj1*sj2);
IkReal x3945=((1.0)*x3940);
IkReal x3946=(gconst109*x3939);
IkReal x3947=(gconst109*x3940);
IkReal x3948=((1.0)*gconst110*x3939);
evalcond[0]=(((x3939*x3941))+(((-1.0)*r22*x3945))+(((-1.0)*r20*x3948)));
evalcond[1]=(cj0+(((-1.0)*r10*x3948))+(((-1.0)*r12*x3945))+((r11*x3946)));
evalcond[2]=(((r01*x3946))+(((-1.0)*r00*x3948))+(((-1.0)*r02*x3945))+(((-1.0)*x3943)));
evalcond[3]=(((r22*x3939))+(((-1.0)*cj1*x3942))+((x3940*x3941))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3945)));
evalcond[4]=(((r01*x3947))+(((-1.0)*cj0*x3944))+(((-1.0)*cj0*sj1*x3942))+(((-1.0)*gconst110*r00*x3945))+((r02*x3939)));
evalcond[5]=((((-1.0)*sj0*sj1*x3942))+(((-1.0)*gconst110*r10*x3945))+((r12*x3939))+(((-1.0)*x3943*x3944))+((r11*x3947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3949=((-1.0)*r01);
IkReal x3951 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3951)==0){
continue;
}
IkReal x3950=pow(x3951,-0.5);
CheckValue<IkReal> x3952 = IKatan2WithCheck(IkReal(x3949),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3952.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3952.value))));
IkReal gconst112=(x3949*x3950);
IkReal gconst113=((1.0)*r00*x3950);
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3953.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3954=((-1.0)*r01);
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal(x3954),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
IkReal x3955=((1.0)*(x3957.value));
IkReal x3956=x3950;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3955)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3955)));
IkReal gconst112=(x3954*x3956);
IkReal gconst113=((1.0)*r00*x3956);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3958=((-1.0)*r01);
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal(x3958),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
IkReal x3959=((1.0)*(x3961.value));
IkReal x3960=x3950;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3959)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3959)));
IkReal gconst112=(x3958*x3960);
IkReal gconst113=((1.0)*r00*x3960);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3962=((-1.0)*r01);
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal(x3962),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
IkReal x3963=((1.0)*(x3965.value));
IkReal x3964=x3950;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3963)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3963)));
IkReal gconst112=(x3962*x3964);
IkReal gconst113=((1.0)*r00*x3964);
IkReal x3966=r02*r02;
IkReal x3967=(r12*sj0);
IkReal x3968=((1.0)*cj0);
IkReal x3969=x3950;
j4eval[0]=((IKabs(((((-1.0)*r02*x3968))+(((-1.0)*x3967)))))+(IKabs((((r02*x3967*x3969))+(((-1.0)*x3968*x3969))+((cj0*x3966*x3969))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3970=((1.0)*sj0);
IkReal x3971=((1.0)*gconst112);
CheckValue<IkReal> x3972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3971))+(((-1.0)*gconst113*r21)))),-1);
if(!x3972.valid){
continue;
}
CheckValue<IkReal> x3973 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3970))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3971))+(((-1.0)*gconst112*r11*x3970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3972.value)))+(x3973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3974=IKsin(j4);
IkReal x3975=IKcos(j4);
IkReal x3976=(gconst113*r20);
IkReal x3977=(gconst112*r21);
IkReal x3978=((1.0)*cj2);
IkReal x3979=(gconst113*r00);
IkReal x3980=(gconst113*r10);
IkReal x3981=((1.0)*sj0);
IkReal x3982=(cj1*sj2);
IkReal x3983=((1.0)*x3975);
IkReal x3984=((1.0)*x3974);
IkReal x3985=(gconst112*x3975);
IkReal x3986=(gconst112*x3974);
evalcond[0]=((((-1.0)*x3976*x3984))+(((-1.0)*r22*x3983))+((x3974*x3977)));
evalcond[1]=((((-1.0)*r12*x3983))+((r11*x3986))+cj0+(((-1.0)*x3980*x3984)));
evalcond[2]=(((r01*x3986))+(((-1.0)*x3979*x3984))+(((-1.0)*x3981))+(((-1.0)*r02*x3983)));
evalcond[3]=((((-1.0)*cj1*x3978))+(((-1.0)*x3976*x3983))+((sj1*sj2))+((r22*x3974))+((x3975*x3977)));
evalcond[4]=(((r02*x3974))+((r01*x3985))+(((-1.0)*cj0*x3982))+(((-1.0)*x3979*x3983))+(((-1.0)*cj0*sj1*x3978)));
evalcond[5]=(((r11*x3985))+(((-1.0)*x3981*x3982))+((r12*x3974))+(((-1.0)*x3980*x3983))+(((-1.0)*sj0*sj1*x3978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3987=((1.0)*gconst113);
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3987))+(((-1.0)*gconst112*r10)))),-1);
if(!x3988.valid){
continue;
}
CheckValue<IkReal> x3989 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3988.value)))+(x3989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3990=IKsin(j4);
IkReal x3991=IKcos(j4);
IkReal x3992=(gconst113*r20);
IkReal x3993=(gconst112*r21);
IkReal x3994=((1.0)*cj2);
IkReal x3995=(gconst113*r00);
IkReal x3996=(gconst113*r10);
IkReal x3997=((1.0)*sj0);
IkReal x3998=(cj1*sj2);
IkReal x3999=((1.0)*x3991);
IkReal x4000=((1.0)*x3990);
IkReal x4001=(gconst112*x3991);
IkReal x4002=(gconst112*x3990);
evalcond[0]=(((x3990*x3993))+(((-1.0)*x3992*x4000))+(((-1.0)*r22*x3999)));
evalcond[1]=(cj0+(((-1.0)*r12*x3999))+(((-1.0)*x3996*x4000))+((r11*x4002)));
evalcond[2]=((((-1.0)*x3997))+((r01*x4002))+(((-1.0)*r02*x3999))+(((-1.0)*x3995*x4000)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3992*x3999))+((r22*x3990))+((x3991*x3993))+(((-1.0)*cj1*x3994)));
evalcond[4]=((((-1.0)*x3995*x3999))+((r01*x4001))+(((-1.0)*cj0*sj1*x3994))+((r02*x3990))+(((-1.0)*cj0*x3998)));
evalcond[5]=((((-1.0)*x3997*x3998))+(((-1.0)*x3996*x3999))+((r12*x3990))+(((-1.0)*sj0*sj1*x3994))+((r11*x4001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4003=((1.0)*gconst113);
CheckValue<IkReal> x4004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4003))+(((-1.0)*gconst112*r00)))),-1);
if(!x4004.valid){
continue;
}
CheckValue<IkReal> x4005 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4003))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4004.value)))+(x4005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4006=IKsin(j4);
IkReal x4007=IKcos(j4);
IkReal x4008=(gconst113*r20);
IkReal x4009=(gconst112*r21);
IkReal x4010=((1.0)*cj2);
IkReal x4011=(gconst113*r00);
IkReal x4012=(gconst113*r10);
IkReal x4013=((1.0)*sj0);
IkReal x4014=(cj1*sj2);
IkReal x4015=((1.0)*x4007);
IkReal x4016=((1.0)*x4006);
IkReal x4017=(gconst112*x4007);
IkReal x4018=(gconst112*x4006);
evalcond[0]=((((-1.0)*r22*x4015))+(((-1.0)*x4008*x4016))+((x4006*x4009)));
evalcond[1]=((((-1.0)*r12*x4015))+(((-1.0)*x4012*x4016))+cj0+((r11*x4018)));
evalcond[2]=((((-1.0)*x4011*x4016))+(((-1.0)*r02*x4015))+((r01*x4018))+(((-1.0)*x4013)));
evalcond[3]=((((-1.0)*cj1*x4010))+((sj1*sj2))+((r22*x4006))+(((-1.0)*x4008*x4015))+((x4007*x4009)));
evalcond[4]=((((-1.0)*cj0*x4014))+(((-1.0)*x4011*x4015))+(((-1.0)*cj0*sj1*x4010))+((r01*x4017))+((r02*x4006)));
evalcond[5]=(((r12*x4006))+(((-1.0)*sj0*sj1*x4010))+(((-1.0)*x4012*x4015))+(((-1.0)*x4013*x4014))+((r11*x4017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4019=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4019;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4019);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4020=((1.0)*cj5);
IkReal x4021=((((-1.0)*r11*x4020))+(((-1.0)*r10*sj5)));
j4eval[0]=x4021;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4020)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4022=cj5*cj5;
IkReal x4023=r01*r01;
IkReal x4024=(cj5*r00);
IkReal x4025=(r01*sj5);
IkReal x4026=((((-1.0)*x4022*x4023))+(((-2.0)*x4024*x4025))+x4023+(r02*r02)+((x4022*(r00*r00))));
j4eval[0]=x4026;
j4eval[1]=IKsign(x4026);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4024))+x4025))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4027=cj5*cj5;
IkReal x4028=r01*r01;
IkReal x4029=(r01*sj5);
IkReal x4030=(cj5*r00);
CheckValue<IkReal> x4031 = IKatan2WithCheck(IkReal((x4029+(((-1.0)*x4030)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4031.valid){
continue;
}
CheckValue<IkReal> x4032=IKPowWithIntegerCheck(IKsign((((x4027*(r00*r00)))+(((-1.0)*x4027*x4028))+x4028+(((-2.0)*x4029*x4030))+(r02*r02))),-1);
if(!x4032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4031.value)+(((1.5707963267949)*(x4032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4033=IKcos(j4);
IkReal x4034=IKsin(j4);
IkReal x4035=(cj5*r00);
IkReal x4036=(cj5*r10);
IkReal x4037=(r21*sj5);
IkReal x4038=((1.0)*cj2);
IkReal x4039=(cj5*r20);
IkReal x4040=((1.0)*x4033);
IkReal x4041=((1.0)*x4034);
IkReal x4042=(sj5*x4034);
IkReal x4043=(sj5*x4033);
evalcond[0]=((((-1.0)*x4035*x4040))+((r02*x4034))+((r01*x4043)));
evalcond[1]=((((-1.0)*x4039*x4041))+((x4034*x4037))+(((-1.0)*r22*x4040)));
evalcond[2]=((((-1.0)*x4036*x4041))+(((-1.0)*r12*x4040))+((r11*x4042)));
evalcond[3]=((-1.0)+(((-1.0)*x4035*x4041))+(((-1.0)*r02*x4040))+((r01*x4042)));
evalcond[4]=((((-1.0)*x4039*x4040))+(((-1.0)*cj1*x4038))+((sj1*sj2))+((x4033*x4037))+((r22*x4034)));
evalcond[5]=((((-1.0)*x4036*x4040))+(((-1.0)*cj1*sj2))+((r11*x4043))+((r12*x4034))+(((-1.0)*sj1*x4038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4044=((1.0)*cj5);
CheckValue<IkReal> x4045 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4044))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4045.valid){
continue;
}
CheckValue<IkReal> x4046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4044)))),-1);
if(!x4046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4045.value)+(((1.5707963267949)*(x4046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4047=IKcos(j4);
IkReal x4048=IKsin(j4);
IkReal x4049=(cj5*r00);
IkReal x4050=(cj5*r10);
IkReal x4051=(r21*sj5);
IkReal x4052=((1.0)*cj2);
IkReal x4053=(cj5*r20);
IkReal x4054=((1.0)*x4047);
IkReal x4055=((1.0)*x4048);
IkReal x4056=(sj5*x4048);
IkReal x4057=(sj5*x4047);
evalcond[0]=(((r02*x4048))+(((-1.0)*x4049*x4054))+((r01*x4057)));
evalcond[1]=(((x4048*x4051))+(((-1.0)*x4053*x4055))+(((-1.0)*r22*x4054)));
evalcond[2]=((((-1.0)*x4050*x4055))+(((-1.0)*r12*x4054))+((r11*x4056)));
evalcond[3]=((-1.0)+(((-1.0)*x4049*x4055))+(((-1.0)*r02*x4054))+((r01*x4056)));
evalcond[4]=(((r22*x4048))+(((-1.0)*x4053*x4054))+((sj1*sj2))+((x4047*x4051))+(((-1.0)*cj1*x4052)));
evalcond[5]=((((-1.0)*x4050*x4054))+(((-1.0)*cj1*sj2))+((r11*x4057))+((r12*x4048))+(((-1.0)*sj1*x4052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4058.valid){
continue;
}
CheckValue<IkReal> x4059 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4058.value)))+(x4059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4060=IKcos(j4);
IkReal x4061=IKsin(j4);
IkReal x4062=(cj5*r00);
IkReal x4063=(cj5*r10);
IkReal x4064=(r21*sj5);
IkReal x4065=((1.0)*cj2);
IkReal x4066=(cj5*r20);
IkReal x4067=((1.0)*x4060);
IkReal x4068=((1.0)*x4061);
IkReal x4069=(sj5*x4061);
IkReal x4070=(sj5*x4060);
evalcond[0]=(((r02*x4061))+((r01*x4070))+(((-1.0)*x4062*x4067)));
evalcond[1]=(((x4061*x4064))+(((-1.0)*x4066*x4068))+(((-1.0)*r22*x4067)));
evalcond[2]=((((-1.0)*r12*x4067))+(((-1.0)*x4063*x4068))+((r11*x4069)));
evalcond[3]=((-1.0)+(((-1.0)*x4062*x4068))+(((-1.0)*r02*x4067))+((r01*x4069)));
evalcond[4]=(((x4060*x4064))+(((-1.0)*x4066*x4067))+((sj1*sj2))+(((-1.0)*cj1*x4065))+((r22*x4061)));
evalcond[5]=((((-1.0)*x4063*x4067))+(((-1.0)*cj1*sj2))+((r12*x4061))+((r11*x4070))+(((-1.0)*sj1*x4065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4071=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4071;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4072=((1.0)*cj5);
IkReal x4073=((((-1.0)*r21*x4072))+(((-1.0)*r20*sj5)));
j4eval[0]=x4073;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4072))+((r11*sj5))))));
j4eval[2]=IKsign(x4073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4074=cj5*cj5;
IkReal x4075=r01*r01;
IkReal x4076=(r01*sj5);
IkReal x4077=(cj5*r00);
IkReal x4078=(((x4074*x4075))+(((-1.0)*x4075))+(((-1.0)*(r02*r02)))+(((-1.0)*x4074*(r00*r00)))+(((2.0)*x4076*x4077)));
j4eval[0]=x4078;
j4eval[1]=IKsign(x4078);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4077))+x4076))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4079=cj5*cj5;
IkReal x4080=r01*r01;
IkReal x4081=(r01*sj5);
IkReal x4082=(cj5*r00);
CheckValue<IkReal> x4083=IKPowWithIntegerCheck(IKsign((((x4079*x4080))+(((-1.0)*(r02*r02)))+(((-1.0)*x4080))+(((-1.0)*x4079*(r00*r00)))+(((2.0)*x4081*x4082)))),-1);
if(!x4083.valid){
continue;
}
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal((x4081+(((-1.0)*x4082)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4083.value)))+(x4084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4085=IKcos(j4);
IkReal x4086=IKsin(j4);
IkReal x4087=(cj5*r00);
IkReal x4088=(cj5*r10);
IkReal x4089=(r21*sj5);
IkReal x4090=(cj5*r20);
IkReal x4091=((1.0)*x4085);
IkReal x4092=((1.0)*x4086);
IkReal x4093=(sj5*x4086);
IkReal x4094=(sj5*x4085);
evalcond[0]=(((r01*x4094))+((r02*x4086))+(((-1.0)*x4087*x4091)));
evalcond[1]=(((x4086*x4089))+(((-1.0)*x4090*x4092))+(((-1.0)*r22*x4091)));
evalcond[2]=((((-1.0)*r12*x4091))+((r11*x4093))+(((-1.0)*x4088*x4092)));
evalcond[3]=((1.0)+((r01*x4093))+(((-1.0)*r02*x4091))+(((-1.0)*x4087*x4092)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4094))+((r12*x4086))+(((-1.0)*x4088*x4091)));
evalcond[5]=(((x4085*x4089))+(((-1.0)*x4090*x4091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4095=((1.0)*cj5);
CheckValue<IkReal> x4096 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4095))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4096.valid){
continue;
}
CheckValue<IkReal> x4097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4095))+(((-1.0)*r20*sj5)))),-1);
if(!x4097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4096.value)+(((1.5707963267949)*(x4097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4098=IKcos(j4);
IkReal x4099=IKsin(j4);
IkReal x4100=(cj5*r00);
IkReal x4101=(cj5*r10);
IkReal x4102=(r21*sj5);
IkReal x4103=(cj5*r20);
IkReal x4104=((1.0)*x4098);
IkReal x4105=((1.0)*x4099);
IkReal x4106=(sj5*x4099);
IkReal x4107=(sj5*x4098);
evalcond[0]=(((r02*x4099))+(((-1.0)*x4100*x4104))+((r01*x4107)));
evalcond[1]=(((x4099*x4102))+(((-1.0)*r22*x4104))+(((-1.0)*x4103*x4105)));
evalcond[2]=((((-1.0)*r12*x4104))+((r11*x4106))+(((-1.0)*x4101*x4105)));
evalcond[3]=((1.0)+(((-1.0)*x4100*x4105))+((r01*x4106))+(((-1.0)*r02*x4104)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4099))+((r11*x4107))+(((-1.0)*x4101*x4104)));
evalcond[5]=(((x4098*x4102))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4099))+(((-1.0)*x4103*x4104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4108 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4108.valid){
continue;
}
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4108.value)+(((1.5707963267949)*(x4109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4110=IKcos(j4);
IkReal x4111=IKsin(j4);
IkReal x4112=(cj5*r00);
IkReal x4113=(cj5*r10);
IkReal x4114=(r21*sj5);
IkReal x4115=(cj5*r20);
IkReal x4116=((1.0)*x4110);
IkReal x4117=((1.0)*x4111);
IkReal x4118=(sj5*x4111);
IkReal x4119=(sj5*x4110);
evalcond[0]=(((r02*x4111))+(((-1.0)*x4112*x4116))+((r01*x4119)));
evalcond[1]=((((-1.0)*r22*x4116))+((x4111*x4114))+(((-1.0)*x4115*x4117)));
evalcond[2]=((((-1.0)*r12*x4116))+(((-1.0)*x4113*x4117))+((r11*x4118)));
evalcond[3]=((1.0)+(((-1.0)*x4112*x4117))+(((-1.0)*r02*x4116))+((r01*x4118)));
evalcond[4]=(((r12*x4111))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4113*x4116))+((r11*x4119)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4111))+(((-1.0)*x4115*x4116))+((x4110*x4114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4120=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4120);
rxp1_1=(px*r21);
rxp1_2=(r11*x4120);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4121=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4121);
rxp1_1=(px*r21);
rxp1_2=(r11*x4121);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4122=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4122);
rxp1_1=(px*r21);
rxp1_2=(r11*x4122);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4125=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4125.valid){
continue;
}
IkReal x4123=x4125.value;
IkReal x4124=(sj0*x4123);
cj4array[0]=(((cj1*sj2*x4124))+((cj2*sj1*x4124)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4126=IKsin(j4);
IkReal x4127=IKcos(j4);
IkReal x4128=(r21*sj5);
IkReal x4129=((1.0)*cj5*r20);
evalcond[0]=(r02*x4126);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4127)));
evalcond[2]=((((-1.0)*x4126*x4129))+((x4126*x4128)));
evalcond[3]=(((r11*sj5*x4126))+(((-1.0)*cj5*r10*x4126)));
evalcond[4]=(((x4127*x4128))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4127*x4129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4131=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4131.valid){
continue;
}
IkReal x4130=x4131.value;
cj4array[0]=(((cj1*cj2*x4130))+(((-1.0)*sj1*sj2*x4130)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4132=IKsin(j4);
IkReal x4133=IKcos(j4);
IkReal x4134=((1.0)*sj0);
IkReal x4135=((1.0)*cj5);
IkReal x4136=(sj5*x4132);
evalcond[0]=(r02*x4132);
evalcond[1]=((((-1.0)*x4134))+(((-1.0)*r02*x4133)));
evalcond[2]=(((r21*x4136))+(((-1.0)*r20*x4132*x4135)));
evalcond[3]=(((r11*x4136))+(((-1.0)*r10*x4132*x4135)));
evalcond[4]=((((-1.0)*cj2*sj1*x4134))+(((-1.0)*r10*x4133*x4135))+((r11*sj5*x4133))+(((-1.0)*cj1*sj2*x4134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4137=IKPowWithIntegerCheck(r02,-1);
if(!x4137.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4137.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4138=IKsin(j4);
IkReal x4139=IKcos(j4);
IkReal x4140=((1.0)*cj1);
IkReal x4141=(r21*sj5);
IkReal x4142=((1.0)*cj5);
IkReal x4143=(r11*sj5);
evalcond[0]=(r02*x4138);
evalcond[1]=((((-1.0)*r20*x4138*x4142))+((x4138*x4141)));
evalcond[2]=((((-1.0)*r10*x4138*x4142))+((x4138*x4143)));
evalcond[3]=(((x4139*x4141))+(((-1.0)*r20*x4139*x4142))+((sj1*sj2))+(((-1.0)*cj2*x4140)));
evalcond[4]=(((x4139*x4143))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4140))+(((-1.0)*r10*x4139*x4142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4144=((1.0)*sj0);
IkReal x4145=((1.0)*cj0);
CheckValue<IkReal> x4146 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4145))+(((-1.0)*r12*x4144)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4145))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4146.valid){
continue;
}
CheckValue<IkReal> x4147=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4146.value)+(((1.5707963267949)*(x4147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4148=IKsin(j4);
IkReal x4149=IKcos(j4);
IkReal x4150=(cj5*r00);
IkReal x4151=(cj5*r10);
IkReal x4152=(r21*sj5);
IkReal x4153=((1.0)*cj2);
IkReal x4154=((1.0)*sj0);
IkReal x4155=(cj1*sj2);
IkReal x4156=(cj5*r20);
IkReal x4157=((1.0)*x4149);
IkReal x4158=((1.0)*x4148);
IkReal x4159=(sj5*x4148);
IkReal x4160=(sj5*x4149);
evalcond[0]=((((-1.0)*x4156*x4158))+((x4148*x4152))+(((-1.0)*r22*x4157)));
evalcond[1]=(cj0+((r11*x4159))+(((-1.0)*x4151*x4158))+(((-1.0)*r12*x4157)));
evalcond[2]=(((r01*x4159))+(((-1.0)*r02*x4157))+(((-1.0)*x4150*x4158))+(((-1.0)*x4154)));
evalcond[3]=((((-1.0)*x4156*x4157))+((sj1*sj2))+(((-1.0)*cj1*x4153))+((r22*x4148))+((x4149*x4152)));
evalcond[4]=(((r02*x4148))+((r01*x4160))+(((-1.0)*x4150*x4157))+(((-1.0)*cj0*sj1*x4153))+(((-1.0)*cj0*x4155)));
evalcond[5]=(((r12*x4148))+(((-1.0)*sj0*sj1*x4153))+(((-1.0)*x4151*x4157))+(((-1.0)*x4154*x4155))+((r11*x4160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4161=((1.0)*cj5);
CheckValue<IkReal> x4162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4161)))),-1);
if(!x4162.valid){
continue;
}
CheckValue<IkReal> x4163 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4161))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4162.value)))+(x4163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4164=IKsin(j4);
IkReal x4165=IKcos(j4);
IkReal x4166=(cj5*r00);
IkReal x4167=(cj5*r10);
IkReal x4168=(r21*sj5);
IkReal x4169=((1.0)*cj2);
IkReal x4170=((1.0)*sj0);
IkReal x4171=(cj1*sj2);
IkReal x4172=(cj5*r20);
IkReal x4173=((1.0)*x4165);
IkReal x4174=((1.0)*x4164);
IkReal x4175=(sj5*x4164);
IkReal x4176=(sj5*x4165);
evalcond[0]=((((-1.0)*x4172*x4174))+(((-1.0)*r22*x4173))+((x4164*x4168)));
evalcond[1]=(((r11*x4175))+cj0+(((-1.0)*x4167*x4174))+(((-1.0)*r12*x4173)));
evalcond[2]=((((-1.0)*x4170))+(((-1.0)*x4166*x4174))+((r01*x4175))+(((-1.0)*r02*x4173)));
evalcond[3]=(((r22*x4164))+((x4165*x4168))+(((-1.0)*x4172*x4173))+(((-1.0)*cj1*x4169))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x4169))+(((-1.0)*cj0*x4171))+(((-1.0)*x4166*x4173))+((r02*x4164))+((r01*x4176)));
evalcond[5]=(((r11*x4176))+(((-1.0)*x4170*x4171))+(((-1.0)*x4167*x4173))+((r12*x4164))+(((-1.0)*sj0*sj1*x4169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4177=((1.0)*cj5);
CheckValue<IkReal> x4178 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4178.valid){
continue;
}
CheckValue<IkReal> x4179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4177))+(((-1.0)*r00*sj5)))),-1);
if(!x4179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4178.value)+(((1.5707963267949)*(x4179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4180=IKsin(j4);
IkReal x4181=IKcos(j4);
IkReal x4182=(cj5*r00);
IkReal x4183=(cj5*r10);
IkReal x4184=(r21*sj5);
IkReal x4185=((1.0)*cj2);
IkReal x4186=((1.0)*sj0);
IkReal x4187=(cj1*sj2);
IkReal x4188=(cj5*r20);
IkReal x4189=((1.0)*x4181);
IkReal x4190=((1.0)*x4180);
IkReal x4191=(sj5*x4180);
IkReal x4192=(sj5*x4181);
evalcond[0]=(((x4180*x4184))+(((-1.0)*r22*x4189))+(((-1.0)*x4188*x4190)));
evalcond[1]=((((-1.0)*r12*x4189))+((r11*x4191))+cj0+(((-1.0)*x4183*x4190)));
evalcond[2]=((((-1.0)*x4186))+(((-1.0)*r02*x4189))+((r01*x4191))+(((-1.0)*x4182*x4190)));
evalcond[3]=((((-1.0)*cj1*x4185))+((sj1*sj2))+((r22*x4180))+(((-1.0)*x4188*x4189))+((x4181*x4184)));
evalcond[4]=(((r02*x4180))+(((-1.0)*cj0*sj1*x4185))+(((-1.0)*cj0*x4187))+((r01*x4192))+(((-1.0)*x4182*x4189)));
evalcond[5]=((((-1.0)*x4183*x4189))+((r12*x4180))+((r11*x4192))+(((-1.0)*x4186*x4187))+(((-1.0)*sj0*sj1*x4185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4193=r21*r21;
IkReal x4194=cj5*cj5;
IkReal x4195=(sj1*sj2);
IkReal x4196=(r21*sj5);
IkReal x4197=(cj1*cj2);
IkReal x4198=(cj5*r20);
CheckValue<IkReal> x4199 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4197))+((r22*x4195)))),IkReal((((x4197*x4198))+(((-1.0)*x4196*x4197))+((x4195*x4196))+(((-1.0)*x4195*x4198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4199.valid){
continue;
}
CheckValue<IkReal> x4200=IKPowWithIntegerCheck(IKsign((((x4193*x4194))+(((-1.0)*x4193))+(((2.0)*x4196*x4198))+(((-1.0)*(r22*r22)))+(((-1.0)*x4194*(r20*r20))))),-1);
if(!x4200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4199.value)+(((1.5707963267949)*(x4200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4201=IKsin(j4);
IkReal x4202=IKcos(j4);
IkReal x4203=(r21*sj5);
IkReal x4204=(cj5*r20);
IkReal x4205=((1.0)*x4202);
evalcond[0]=((((-1.0)*r22*x4205))+(((-1.0)*x4201*x4204))+((x4201*x4203)));
evalcond[1]=(((r22*x4201))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4202*x4203))+(((-1.0)*x4204*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4206=(cj5*sj4);
IkReal x4207=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4206))+((r01*x4207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4206))+(((-1.0)*r11*x4207))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4206))+((r01*x4207))))+IKsqr((((r10*x4206))+(((-1.0)*r11*x4207))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4206))+((r01*x4207))), (((r10*x4206))+(((-1.0)*r11*x4207))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4208=IKcos(j0);
IkReal x4209=IKsin(j0);
IkReal x4210=((0.1)*sj5);
IkReal x4211=((0.392)*sj1);
IkReal x4212=(cj5*r11);
IkReal x4213=((1.0)*cj1);
IkReal x4214=(r11*sj5);
IkReal x4215=((1.0)*sj5);
IkReal x4216=((1.0)*sj1);
IkReal x4217=((1.0)*cj5);
IkReal x4218=((0.425)*cj1);
IkReal x4219=((1.0)*cj4);
IkReal x4220=(r01*sj5);
IkReal x4221=(sj2*x4209);
IkReal x4222=(sj2*x4208);
IkReal x4223=(cj4*x4217);
IkReal x4224=((0.392)*cj1*cj2);
IkReal x4225=(cj2*x4208);
IkReal x4226=(cj2*x4209);
evalcond[0]=((((-1.0)*r12*x4219))+(((-1.0)*r10*sj4*x4217))+x4208+((sj4*x4214)));
evalcond[1]=(((sj4*x4220))+(((-1.0)*r02*x4219))+(((-1.0)*r00*sj4*x4217))+(((-1.0)*x4209)));
evalcond[2]=((((-1.0)*r01*x4217))+(((-1.0)*r00*x4215))+((sj1*x4222))+(((-1.0)*x4213*x4225)));
evalcond[3]=(((sj1*x4221))+(((-1.0)*x4212))+(((-1.0)*x4213*x4226))+(((-1.0)*r10*x4215)));
evalcond[4]=(((r02*sj4))+(((-1.0)*r00*x4223))+(((-1.0)*x4216*x4225))+(((-1.0)*x4213*x4222))+((cj4*x4220)));
evalcond[5]=(((cj4*x4214))+(((-1.0)*r10*x4223))+(((-1.0)*x4216*x4226))+((r12*sj4))+(((-1.0)*x4213*x4221)));
evalcond[6]=(((x4208*x4224))+(((-1.0)*r00*x4210))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-1.0)*x4211*x4222))+(((-0.134)*x4209))+((x4208*x4218)));
evalcond[7]=(((x4209*x4218))+(((-0.1)*x4212))+(((-1.0)*py))+(((-1.0)*x4211*x4221))+((x4209*x4224))+(((0.134)*x4208))+(((-1.0)*r10*x4210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4227 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4227.valid){
continue;
}
CheckValue<IkReal> x4228=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4228.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4227.value)+(((1.5707963267949)*(x4228.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4229=IKcos(j0);
IkReal x4230=IKsin(j0);
IkReal x4231=((0.1)*sj5);
IkReal x4232=(cj5*r11);
IkReal x4233=(sj1*sj2);
IkReal x4234=(cj1*cj2);
IkReal x4235=((1.0)*sj5);
IkReal x4236=(cj5*r01);
IkReal x4237=((0.425)*cj1);
IkReal x4238=((0.392)*x4230);
IkReal x4239=((0.392)*x4229);
evalcond[0]=((((-1.0)*x4229*x4234))+(((-1.0)*x4236))+(((-1.0)*r00*x4235))+((x4229*x4233)));
evalcond[1]=((((-1.0)*x4230*x4234))+((x4230*x4233))+(((-1.0)*x4232))+(((-1.0)*r10*x4235)));
evalcond[2]=((((-0.134)*x4230))+(((-0.1)*x4236))+(((-1.0)*px))+(((-1.0)*x4233*x4239))+(((-1.0)*r00*x4231))+((x4229*x4237))+((x4234*x4239)));
evalcond[3]=(((x4230*x4237))+(((0.134)*x4229))+(((-0.1)*x4232))+(((-1.0)*r10*x4231))+(((-1.0)*py))+(((-1.0)*x4233*x4238))+((x4234*x4238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4240=((1.0)*cj5);
IkReal x4241=((((-1.0)*r01*x4240))+(((-1.0)*r00*sj5)));
j4eval[0]=x4241;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4240)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4242=((1.0)*cj5);
IkReal x4243=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4242)));
j4eval[0]=x4243;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x4242))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4244=((1.0)*sj0);
IkReal x4245=((1.0)*cj0);
IkReal x4246=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4246;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x4245))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4244)))))+(IKabs(((((-1.0)*r12*x4244))+(((-1.0)*r02*x4245))))));
j4eval[2]=IKsign(x4246);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4247=((-1.0)*r20);
IkReal x4249 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4249)==0){
continue;
}
IkReal x4248=pow(x4249,-0.5);
CheckValue<IkReal> x4250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4247),IKFAST_ATAN2_MAGTHRESH);
if(!x4250.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4250.value));
IkReal gconst97=(r21*x4248);
IkReal gconst98=(x4247*x4248);
CheckValue<IkReal> x4251 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4251.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4251.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4252=((-1.0)*r20);
IkReal x4253=x4248;
CheckValue<IkReal> x4255 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4252),IKFAST_ATAN2_MAGTHRESH);
if(!x4255.valid){
continue;
}
IkReal x4254=((-1.0)*(x4255.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4254;
IkReal gconst96=x4254;
IkReal gconst97=(r21*x4253);
IkReal gconst98=(x4252*x4253);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4256=((-1.0)*r20);
IkReal x4257=x4248;
CheckValue<IkReal> x4259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4256),IKFAST_ATAN2_MAGTHRESH);
if(!x4259.valid){
continue;
}
IkReal x4258=((-1.0)*(x4259.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4258;
IkReal gconst96=x4258;
IkReal gconst97=(r21*x4257);
IkReal gconst98=(x4256*x4257);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4260=((-1.0)*r20);
IkReal x4261=x4248;
CheckValue<IkReal> x4263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4260),IKFAST_ATAN2_MAGTHRESH);
if(!x4263.valid){
continue;
}
IkReal x4262=((-1.0)*(x4263.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4262;
IkReal gconst96=x4262;
IkReal gconst97=(r21*x4261);
IkReal gconst98=(x4260*x4261);
IkReal x4264=((1.0)*(r22*r22));
CheckValue<IkReal> x4268=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4264))),-1);
if(!x4268.valid){
continue;
}
IkReal x4265=x4268.value;
IkReal x4266=((1.0)*x4265);
IkReal x4267=((((-1.0)*x4266*(r20*r20*r20*r20)))+(((-2.0)*x4265*(r20*r20)*(r21*r21)))+(((-1.0)*x4264))+(((-1.0)*x4266*(r21*r21*r21*r21))));
j4eval[0]=x4267;
j4eval[1]=IKsign(x4267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4269=(cj1*cj2);
IkReal x4270=(gconst98*r20);
IkReal x4271=(sj1*sj2);
IkReal x4272=(gconst97*r21);
CheckValue<IkReal> x4273 = IKatan2WithCheck(IkReal((((r22*x4271))+(((-1.0)*r22*x4269)))),IkReal(((((-1.0)*x4270*x4271))+(((-1.0)*x4269*x4272))+((x4269*x4270))+((x4271*x4272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4273.valid){
continue;
}
CheckValue<IkReal> x4274=IKPowWithIntegerCheck(IKsign(((((2.0)*x4270*x4272))+(((-1.0)*(x4272*x4272)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4270*x4270))))),-1);
if(!x4274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4273.value)+(((1.5707963267949)*(x4274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4275=IKsin(j4);
IkReal x4276=IKcos(j4);
IkReal x4277=(gconst98*r10);
IkReal x4278=(gconst97*r21);
IkReal x4279=(gconst98*r20);
IkReal x4280=((1.0)*cj2);
IkReal x4281=((1.0)*sj0);
IkReal x4282=(gconst98*r00);
IkReal x4283=(cj1*sj2);
IkReal x4284=((1.0)*x4276);
IkReal x4285=((1.0)*x4275);
IkReal x4286=(gconst97*x4275);
IkReal x4287=(gconst97*x4276);
evalcond[0]=((((-1.0)*x4279*x4285))+((x4275*x4278))+(((-1.0)*r22*x4284)));
evalcond[1]=(cj0+((r11*x4286))+(((-1.0)*r12*x4284))+(((-1.0)*x4277*x4285)));
evalcond[2]=((((-1.0)*x4281))+(((-1.0)*x4282*x4285))+(((-1.0)*r02*x4284))+((r01*x4286)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4279*x4284))+((x4276*x4278))+(((-1.0)*cj1*x4280))+((r22*x4275)));
evalcond[4]=((((-1.0)*x4282*x4284))+((r02*x4275))+(((-1.0)*cj0*x4283))+((r01*x4287))+(((-1.0)*cj0*sj1*x4280)));
evalcond[5]=(((r11*x4287))+((r12*x4275))+(((-1.0)*sj0*sj1*x4280))+(((-1.0)*x4277*x4284))+(((-1.0)*x4281*x4283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4288=((1.0)*gconst98);
CheckValue<IkReal> x4289 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4289.valid){
continue;
}
CheckValue<IkReal> x4290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4288))+(((-1.0)*gconst97*r10)))),-1);
if(!x4290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4289.value)+(((1.5707963267949)*(x4290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4291=IKsin(j4);
IkReal x4292=IKcos(j4);
IkReal x4293=(gconst98*r10);
IkReal x4294=(gconst97*r21);
IkReal x4295=(gconst98*r20);
IkReal x4296=((1.0)*cj2);
IkReal x4297=((1.0)*sj0);
IkReal x4298=(gconst98*r00);
IkReal x4299=(cj1*sj2);
IkReal x4300=((1.0)*x4292);
IkReal x4301=((1.0)*x4291);
IkReal x4302=(gconst97*x4291);
IkReal x4303=(gconst97*x4292);
evalcond[0]=((((-1.0)*r22*x4300))+(((-1.0)*x4295*x4301))+((x4291*x4294)));
evalcond[1]=((((-1.0)*r12*x4300))+((r11*x4302))+cj0+(((-1.0)*x4293*x4301)));
evalcond[2]=((((-1.0)*x4297))+((r01*x4302))+(((-1.0)*r02*x4300))+(((-1.0)*x4298*x4301)));
evalcond[3]=(((x4292*x4294))+(((-1.0)*x4295*x4300))+((sj1*sj2))+((r22*x4291))+(((-1.0)*cj1*x4296)));
evalcond[4]=((((-1.0)*cj0*sj1*x4296))+(((-1.0)*cj0*x4299))+((r01*x4303))+(((-1.0)*x4298*x4300))+((r02*x4291)));
evalcond[5]=(((r11*x4303))+(((-1.0)*x4297*x4299))+((r12*x4291))+(((-1.0)*x4293*x4300))+(((-1.0)*sj0*sj1*x4296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4304=((1.0)*gconst98);
CheckValue<IkReal> x4305 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4305.valid){
continue;
}
CheckValue<IkReal> x4306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4304))+(((-1.0)*gconst97*r00)))),-1);
if(!x4306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4305.value)+(((1.5707963267949)*(x4306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4307=IKsin(j4);
IkReal x4308=IKcos(j4);
IkReal x4309=(gconst98*r10);
IkReal x4310=(gconst97*r21);
IkReal x4311=(gconst98*r20);
IkReal x4312=((1.0)*cj2);
IkReal x4313=((1.0)*sj0);
IkReal x4314=(gconst98*r00);
IkReal x4315=(cj1*sj2);
IkReal x4316=((1.0)*x4308);
IkReal x4317=((1.0)*x4307);
IkReal x4318=(gconst97*x4307);
IkReal x4319=(gconst97*x4308);
evalcond[0]=((((-1.0)*r22*x4316))+(((-1.0)*x4311*x4317))+((x4307*x4310)));
evalcond[1]=(cj0+((r11*x4318))+(((-1.0)*x4309*x4317))+(((-1.0)*r12*x4316)));
evalcond[2]=((((-1.0)*x4313))+((r01*x4318))+(((-1.0)*x4314*x4317))+(((-1.0)*r02*x4316)));
evalcond[3]=(((r22*x4307))+(((-1.0)*cj1*x4312))+(((-1.0)*x4311*x4316))+((x4308*x4310))+((sj1*sj2)));
evalcond[4]=(((r02*x4307))+(((-1.0)*cj0*x4315))+((r01*x4319))+(((-1.0)*x4314*x4316))+(((-1.0)*cj0*sj1*x4312)));
evalcond[5]=(((r12*x4307))+((r11*x4319))+(((-1.0)*x4309*x4316))+(((-1.0)*sj0*sj1*x4312))+(((-1.0)*x4313*x4315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4320=((-1.0)*r21);
IkReal x4322 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4322)==0){
continue;
}
IkReal x4321=pow(x4322,-0.5);
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(x4320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4323.value))));
IkReal gconst100=(x4320*x4321);
IkReal gconst101=((1.0)*r20*x4321);
CheckValue<IkReal> x4324 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4324.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4324.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4325=((-1.0)*r21);
CheckValue<IkReal> x4328 = IKatan2WithCheck(IkReal(x4325),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4328.valid){
continue;
}
IkReal x4326=((1.0)*(x4328.value));
IkReal x4327=x4321;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4326)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4326)));
IkReal gconst100=(x4325*x4327);
IkReal gconst101=((1.0)*r20*x4327);
IkReal x4329=r22*r22;
IkReal x4330=((1.0)*x4329);
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(((-1.0)+x4329),-1);
if(!x4334.valid){
continue;
}
IkReal x4331=x4334.value;
if((((1.0)+(((-1.0)*x4330)))) < -0.00001)
continue;
IkReal x4332=IKsqrt(((1.0)+(((-1.0)*x4330))));
IkReal x4333=(cj0*x4331*x4332);
j4eval[0]=((IKabs(((((-1.0)*x4330*x4333))+x4333)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4335=((-1.0)*r21);
CheckValue<IkReal> x4338 = IKatan2WithCheck(IkReal(x4335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4338.valid){
continue;
}
IkReal x4336=((1.0)*(x4338.value));
IkReal x4337=x4321;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4336)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4336)));
IkReal gconst100=(x4335*x4337);
IkReal gconst101=((1.0)*r20*x4337);
IkReal x4339=r22*r22;
IkReal x4340=((1.0)*x4339);
CheckValue<IkReal> x4344=IKPowWithIntegerCheck(((-1.0)+x4339),-1);
if(!x4344.valid){
continue;
}
IkReal x4341=x4344.value;
if((((1.0)+(((-1.0)*x4340)))) < -0.00001)
continue;
IkReal x4342=IKsqrt(((1.0)+(((-1.0)*x4340))));
IkReal x4343=(sj0*x4341*x4342);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4340*x4343))+x4343))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4345=((-1.0)*r21);
CheckValue<IkReal> x4348 = IKatan2WithCheck(IkReal(x4345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4348.valid){
continue;
}
IkReal x4346=((1.0)*(x4348.value));
IkReal x4347=x4321;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4346)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4346)));
IkReal gconst100=(x4345*x4347);
IkReal gconst101=((1.0)*r20*x4347);
IkReal x4349=r22*r22;
IkReal x4350=(r12*sj0);
IkReal x4351=(cj0*r02);
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(((-1.0)+x4349),-1);
if(!x4355.valid){
continue;
}
IkReal x4352=x4355.value;
if((((1.0)+(((-1.0)*x4349)))) < -0.00001)
continue;
IkReal x4353=IKsqrt(((1.0)+(((-1.0)*x4349))));
IkReal x4354=(r22*x4352*x4353);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4350*x4354))+((x4351*x4354)))))+(IKabs(((((-1.0)*x4351))+(((-1.0)*x4350))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4356=((1.0)*sj0);
IkReal x4357=((1.0)*gconst100);
CheckValue<IkReal> x4358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4357)))),-1);
if(!x4358.valid){
continue;
}
CheckValue<IkReal> x4359 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4356))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4357))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4358.value)))+(x4359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4360=IKsin(j4);
IkReal x4361=IKcos(j4);
IkReal x4362=(gconst101*r20);
IkReal x4363=(gconst101*r10);
IkReal x4364=((1.0)*cj2);
IkReal x4365=(gconst101*r00);
IkReal x4366=((1.0)*sj0);
IkReal x4367=(cj1*sj2);
IkReal x4368=((1.0)*x4361);
IkReal x4369=((1.0)*x4360);
IkReal x4370=(gconst100*x4360);
IkReal x4371=(gconst100*x4361);
evalcond[0]=((((-1.0)*r22*x4368))+(((-1.0)*x4362*x4369))+((r21*x4370)));
evalcond[1]=(cj0+((r11*x4370))+(((-1.0)*r12*x4368))+(((-1.0)*x4363*x4369)));
evalcond[2]=(((r01*x4370))+(((-1.0)*x4366))+(((-1.0)*x4365*x4369))+(((-1.0)*r02*x4368)));
evalcond[3]=((((-1.0)*cj1*x4364))+(((-1.0)*x4362*x4368))+((sj1*sj2))+((r22*x4360))+((r21*x4371)));
evalcond[4]=(((r01*x4371))+(((-1.0)*cj0*x4367))+(((-1.0)*x4365*x4368))+(((-1.0)*cj0*sj1*x4364))+((r02*x4360)));
evalcond[5]=(((r11*x4371))+((r12*x4360))+(((-1.0)*sj0*sj1*x4364))+(((-1.0)*x4366*x4367))+(((-1.0)*x4363*x4368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4372=((1.0)*gconst101);
CheckValue<IkReal> x4373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4372)))),-1);
if(!x4373.valid){
continue;
}
CheckValue<IkReal> x4374 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4372))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4373.value)))+(x4374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4375=IKsin(j4);
IkReal x4376=IKcos(j4);
IkReal x4377=(gconst101*r20);
IkReal x4378=(gconst101*r10);
IkReal x4379=((1.0)*cj2);
IkReal x4380=(gconst101*r00);
IkReal x4381=((1.0)*sj0);
IkReal x4382=(cj1*sj2);
IkReal x4383=((1.0)*x4376);
IkReal x4384=((1.0)*x4375);
IkReal x4385=(gconst100*x4375);
IkReal x4386=(gconst100*x4376);
evalcond[0]=((((-1.0)*r22*x4383))+((r21*x4385))+(((-1.0)*x4377*x4384)));
evalcond[1]=((((-1.0)*r12*x4383))+cj0+(((-1.0)*x4378*x4384))+((r11*x4385)));
evalcond[2]=((((-1.0)*r02*x4383))+(((-1.0)*x4380*x4384))+(((-1.0)*x4381))+((r01*x4385)));
evalcond[3]=(((r22*x4375))+((sj1*sj2))+((r21*x4386))+(((-1.0)*x4377*x4383))+(((-1.0)*cj1*x4379)));
evalcond[4]=((((-1.0)*cj0*sj1*x4379))+((r02*x4375))+(((-1.0)*x4380*x4383))+(((-1.0)*cj0*x4382))+((r01*x4386)));
evalcond[5]=((((-1.0)*x4381*x4382))+((r12*x4375))+(((-1.0)*x4378*x4383))+(((-1.0)*sj0*sj1*x4379))+((r11*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4387=((1.0)*gconst101);
CheckValue<IkReal> x4388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4387)))),-1);
if(!x4388.valid){
continue;
}
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4388.value)))+(x4389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4390=IKsin(j4);
IkReal x4391=IKcos(j4);
IkReal x4392=(gconst101*r20);
IkReal x4393=(gconst101*r10);
IkReal x4394=((1.0)*cj2);
IkReal x4395=(gconst101*r00);
IkReal x4396=((1.0)*sj0);
IkReal x4397=(cj1*sj2);
IkReal x4398=((1.0)*x4391);
IkReal x4399=((1.0)*x4390);
IkReal x4400=(gconst100*x4390);
IkReal x4401=(gconst100*x4391);
evalcond[0]=(((r21*x4400))+(((-1.0)*r22*x4398))+(((-1.0)*x4392*x4399)));
evalcond[1]=((((-1.0)*r12*x4398))+((r11*x4400))+cj0+(((-1.0)*x4393*x4399)));
evalcond[2]=((((-1.0)*x4396))+(((-1.0)*r02*x4398))+(((-1.0)*x4395*x4399))+((r01*x4400)));
evalcond[3]=(((r21*x4401))+((r22*x4390))+((sj1*sj2))+(((-1.0)*cj1*x4394))+(((-1.0)*x4392*x4398)));
evalcond[4]=((((-1.0)*cj0*sj1*x4394))+(((-1.0)*x4395*x4398))+((r02*x4390))+((r01*x4401))+(((-1.0)*cj0*x4397)));
evalcond[5]=((((-1.0)*sj0*sj1*x4394))+((r11*x4401))+(((-1.0)*x4396*x4397))+(((-1.0)*x4393*x4398))+((r12*x4390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4402=((-1.0)*r10);
IkReal x4404 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4404)==0){
continue;
}
IkReal x4403=pow(x4404,-0.5);
CheckValue<IkReal> x4405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4402),IKFAST_ATAN2_MAGTHRESH);
if(!x4405.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4405.value));
IkReal gconst103=(r11*x4403);
IkReal gconst104=(x4402*x4403);
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4406.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4407=((-1.0)*r10);
IkReal x4408=x4403;
CheckValue<IkReal> x4410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4407),IKFAST_ATAN2_MAGTHRESH);
if(!x4410.valid){
continue;
}
IkReal x4409=((-1.0)*(x4410.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4409;
IkReal gconst102=x4409;
IkReal gconst103=(r11*x4408);
IkReal gconst104=(x4407*x4408);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4411=((1.0)*sj0);
IkReal x4412=((1.0)*gconst103);
CheckValue<IkReal> x4413 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4411)))),IkReal(((((-1.0)*cj0*r01*x4412))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4411))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4412)))),-1);
if(!x4414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4413.value)+(((1.5707963267949)*(x4414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4415=IKsin(j4);
IkReal x4416=IKcos(j4);
IkReal x4417=(gconst103*r11);
IkReal x4418=((1.0)*cj2);
IkReal x4419=((1.0)*sj0);
IkReal x4420=(cj1*sj2);
IkReal x4421=((1.0)*x4416);
IkReal x4422=(gconst103*x4416);
IkReal x4423=(gconst103*x4415);
IkReal x4424=((1.0)*gconst104*x4415);
evalcond[0]=((((-1.0)*r22*x4421))+(((-1.0)*r20*x4424))+((r21*x4423)));
evalcond[1]=(cj0+((x4415*x4417))+(((-1.0)*r12*x4421))+(((-1.0)*r10*x4424)));
evalcond[2]=((((-1.0)*x4419))+((r01*x4423))+(((-1.0)*r02*x4421))+(((-1.0)*r00*x4424)));
evalcond[3]=(((r22*x4415))+(((-1.0)*gconst104*r20*x4421))+((sj1*sj2))+((r21*x4422))+(((-1.0)*cj1*x4418)));
evalcond[4]=((((-1.0)*cj0*sj1*x4418))+(((-1.0)*cj0*x4420))+((r01*x4422))+((r02*x4415))+(((-1.0)*gconst104*r00*x4421)));
evalcond[5]=(((r12*x4415))+(((-1.0)*gconst104*r10*x4421))+(((-1.0)*sj0*sj1*x4418))+((x4416*x4417))+(((-1.0)*x4419*x4420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4425=((1.0)*gconst104);
CheckValue<IkReal> x4426 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4425))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4426.valid){
continue;
}
CheckValue<IkReal> x4427=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4425))+(((-1.0)*gconst103*r00)))),-1);
if(!x4427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4426.value)+(((1.5707963267949)*(x4427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4428=IKsin(j4);
IkReal x4429=IKcos(j4);
IkReal x4430=(gconst103*r11);
IkReal x4431=((1.0)*cj2);
IkReal x4432=((1.0)*sj0);
IkReal x4433=(cj1*sj2);
IkReal x4434=((1.0)*x4429);
IkReal x4435=(gconst103*x4429);
IkReal x4436=(gconst103*x4428);
IkReal x4437=((1.0)*gconst104*x4428);
evalcond[0]=((((-1.0)*r22*x4434))+(((-1.0)*r20*x4437))+((r21*x4436)));
evalcond[1]=(cj0+((x4428*x4430))+(((-1.0)*r10*x4437))+(((-1.0)*r12*x4434)));
evalcond[2]=((((-1.0)*r02*x4434))+(((-1.0)*x4432))+(((-1.0)*r00*x4437))+((r01*x4436)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4431))+((r22*x4428))+(((-1.0)*gconst104*r20*x4434))+((r21*x4435)));
evalcond[4]=(((r02*x4428))+(((-1.0)*cj0*x4433))+(((-1.0)*cj0*sj1*x4431))+(((-1.0)*gconst104*r00*x4434))+((r01*x4435)));
evalcond[5]=(((x4429*x4430))+(((-1.0)*x4432*x4433))+(((-1.0)*gconst104*r10*x4434))+((r12*x4428))+(((-1.0)*sj0*sj1*x4431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4438=((-1.0)*r11);
IkReal x4440 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4440)==0){
continue;
}
IkReal x4439=pow(x4440,-0.5);
CheckValue<IkReal> x4441 = IKatan2WithCheck(IkReal(x4438),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4441.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4441.value))));
IkReal gconst106=(x4438*x4439);
IkReal gconst107=((1.0)*r10*x4439);
CheckValue<IkReal> x4442 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4442.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4442.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4443=((-1.0)*r11);
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal(x4443),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
IkReal x4444=((1.0)*(x4446.value));
IkReal x4445=x4439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4444)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4444)));
IkReal gconst106=(x4443*x4445);
IkReal gconst107=((1.0)*r10*x4445);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4447=((-1.0)*r11);
CheckValue<IkReal> x4450 = IKatan2WithCheck(IkReal(x4447),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4450.valid){
continue;
}
IkReal x4448=((1.0)*(x4450.value));
IkReal x4449=x4439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4448)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4448)));
IkReal gconst106=(x4447*x4449);
IkReal gconst107=((1.0)*r10*x4449);
IkReal x4451=r12*r12;
IkReal x4452=((1.0)*sj0);
IkReal x4453=(cj0*r02);
IkReal x4454=x4439;
j4eval[0]=((IKabs((((sj0*x4451*x4454))+((r12*x4453*x4454))+(((-1.0)*x4452*x4454)))))+(IKabs(((((-1.0)*r12*x4452))+(((-1.0)*x4453))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4455=((-1.0)*r11);
CheckValue<IkReal> x4458 = IKatan2WithCheck(IkReal(x4455),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4458.valid){
continue;
}
IkReal x4456=((1.0)*(x4458.value));
IkReal x4457=x4439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4456)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4456)));
IkReal gconst106=(x4455*x4457);
IkReal gconst107=((1.0)*r10*x4457);
IkReal x4459=r12*r12;
IkReal x4460=((1.0)+(((-1.0)*x4459)));
IkReal x4461=(r22*sj1*sj2);
IkReal x4462=(cj1*cj2*r22);
CheckValue<IkReal> x4469=IKPowWithIntegerCheck(x4460,-1);
if(!x4469.valid){
continue;
}
IkReal x4463=x4469.value;
CheckValue<IkReal> x4470=IKPowWithIntegerCheck(((-1.0)+x4459),-1);
if(!x4470.valid){
continue;
}
IkReal x4464=x4470.value;
IkReal x4465=((1.0)*x4463);
if((x4460) < -0.00001)
continue;
IkReal x4466=IKsqrt(x4460);
IkReal x4467=(r12*x4464*x4466);
IkReal x4468=((((-2.0)*r10*r11*r20*r21*x4463))+(((-1.0)*x4465*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4465*(r10*r10)*(r20*r20))));
j4eval[0]=x4468;
j4eval[1]=((IKabs(((((-1.0)*x4461*x4467))+((x4462*x4467)))))+(IKabs((x4461+(((-1.0)*x4462))))));
j4eval[2]=IKsign(x4468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4471=(sj1*sj2);
IkReal x4472=(gconst106*r21);
IkReal x4473=(gconst107*r20);
IkReal x4474=(cj1*cj2);
CheckValue<IkReal> x4475=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4472*x4472)))+(((2.0)*x4472*x4473))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4473*x4473))))),-1);
if(!x4475.valid){
continue;
}
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4474))+((r22*x4471)))),IkReal((((x4471*x4472))+(((-1.0)*x4472*x4474))+((x4473*x4474))+(((-1.0)*x4471*x4473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4475.value)))+(x4476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4477=IKsin(j4);
IkReal x4478=IKcos(j4);
IkReal x4479=(gconst107*r10);
IkReal x4480=(gconst107*r00);
IkReal x4481=((1.0)*cj2);
IkReal x4482=(gconst107*r20);
IkReal x4483=((1.0)*sj0);
IkReal x4484=(cj1*sj2);
IkReal x4485=((1.0)*x4478);
IkReal x4486=(gconst106*x4478);
IkReal x4487=(gconst106*x4477);
IkReal x4488=((1.0)*x4477);
evalcond[0]=(((r21*x4487))+(((-1.0)*r22*x4485))+(((-1.0)*x4482*x4488)));
evalcond[1]=(((r11*x4487))+(((-1.0)*r12*x4485))+cj0+(((-1.0)*x4479*x4488)));
evalcond[2]=((((-1.0)*x4480*x4488))+((r01*x4487))+(((-1.0)*r02*x4485))+(((-1.0)*x4483)));
evalcond[3]=((((-1.0)*cj1*x4481))+((r21*x4486))+((sj1*sj2))+((r22*x4477))+(((-1.0)*x4482*x4485)));
evalcond[4]=((((-1.0)*cj0*x4484))+(((-1.0)*cj0*sj1*x4481))+(((-1.0)*x4480*x4485))+((r02*x4477))+((r01*x4486)));
evalcond[5]=(((r11*x4486))+(((-1.0)*x4479*x4485))+(((-1.0)*sj0*sj1*x4481))+((r12*x4477))+(((-1.0)*x4483*x4484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4489=((1.0)*sj0);
IkReal x4490=((1.0)*gconst106);
CheckValue<IkReal> x4491=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4490)))),-1);
if(!x4491.valid){
continue;
}
CheckValue<IkReal> x4492 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4489))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4490))+(((-1.0)*gconst106*r11*x4489))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4491.value)))+(x4492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4493=IKsin(j4);
IkReal x4494=IKcos(j4);
IkReal x4495=(gconst107*r10);
IkReal x4496=(gconst107*r00);
IkReal x4497=((1.0)*cj2);
IkReal x4498=(gconst107*r20);
IkReal x4499=((1.0)*sj0);
IkReal x4500=(cj1*sj2);
IkReal x4501=((1.0)*x4494);
IkReal x4502=(gconst106*x4494);
IkReal x4503=(gconst106*x4493);
IkReal x4504=((1.0)*x4493);
evalcond[0]=(((r21*x4503))+(((-1.0)*x4498*x4504))+(((-1.0)*r22*x4501)));
evalcond[1]=(cj0+((r11*x4503))+(((-1.0)*x4495*x4504))+(((-1.0)*r12*x4501)));
evalcond[2]=((((-1.0)*x4496*x4504))+(((-1.0)*r02*x4501))+((r01*x4503))+(((-1.0)*x4499)));
evalcond[3]=((((-1.0)*cj1*x4497))+((r21*x4502))+((sj1*sj2))+(((-1.0)*x4498*x4501))+((r22*x4493)));
evalcond[4]=((((-1.0)*x4496*x4501))+((r02*x4493))+(((-1.0)*cj0*x4500))+((r01*x4502))+(((-1.0)*cj0*sj1*x4497)));
evalcond[5]=(((r12*x4493))+((r11*x4502))+(((-1.0)*x4495*x4501))+(((-1.0)*sj0*sj1*x4497))+(((-1.0)*x4499*x4500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4505=((1.0)*gconst107);
CheckValue<IkReal> x4506=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4505)))),-1);
if(!x4506.valid){
continue;
}
CheckValue<IkReal> x4507 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4505))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4506.value)))+(x4507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4508=IKsin(j4);
IkReal x4509=IKcos(j4);
IkReal x4510=(gconst107*r10);
IkReal x4511=(gconst107*r00);
IkReal x4512=((1.0)*cj2);
IkReal x4513=(gconst107*r20);
IkReal x4514=((1.0)*sj0);
IkReal x4515=(cj1*sj2);
IkReal x4516=((1.0)*x4509);
IkReal x4517=(gconst106*x4509);
IkReal x4518=(gconst106*x4508);
IkReal x4519=((1.0)*x4508);
evalcond[0]=((((-1.0)*x4513*x4519))+((r21*x4518))+(((-1.0)*r22*x4516)));
evalcond[1]=(cj0+(((-1.0)*r12*x4516))+((r11*x4518))+(((-1.0)*x4510*x4519)));
evalcond[2]=((((-1.0)*r02*x4516))+((r01*x4518))+(((-1.0)*x4511*x4519))+(((-1.0)*x4514)));
evalcond[3]=((((-1.0)*cj1*x4512))+(((-1.0)*x4513*x4516))+((r22*x4508))+((sj1*sj2))+((r21*x4517)));
evalcond[4]=((((-1.0)*cj0*x4515))+(((-1.0)*cj0*sj1*x4512))+((r02*x4508))+((r01*x4517))+(((-1.0)*x4511*x4516)));
evalcond[5]=(((r12*x4508))+(((-1.0)*sj0*sj1*x4512))+((r11*x4517))+(((-1.0)*x4510*x4516))+(((-1.0)*x4514*x4515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4520=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4520;
j4eval[1]=IKsign(x4520);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4521=((1.0)*cj5);
IkReal x4522=((((-1.0)*r01*x4521))+(((-1.0)*r00*sj5)));
j4eval[0]=x4522;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4521)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4523=(sj1*sj2);
IkReal x4524=(cj5*r10);
IkReal x4525=(r11*sj5);
IkReal x4526=(cj1*cj2);
IkReal x4527=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4527;
j4eval[1]=((IKabs((((x4523*x4525))+(((-1.0)*x4525*x4526))+((x4524*x4526))+(((-1.0)*x4523*x4524)))))+(IKabs((((r12*x4526))+(((-1.0)*r12*x4523))))));
j4eval[2]=IKsign(x4527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4528=(sj1*sj2);
IkReal x4529=(cj5*r10);
IkReal x4530=(r11*sj5);
IkReal x4531=(cj1*cj2);
CheckValue<IkReal> x4532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4532.valid){
continue;
}
CheckValue<IkReal> x4533 = IKatan2WithCheck(IkReal((((x4528*x4530))+(((-1.0)*x4528*x4529))+((x4529*x4531))+(((-1.0)*x4530*x4531)))),IkReal(((((-1.0)*r12*x4528))+((r12*x4531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4532.value)))+(x4533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4534=IKcos(j4);
IkReal x4535=IKsin(j4);
IkReal x4536=(cj5*r00);
IkReal x4537=(cj5*r10);
IkReal x4538=(r21*sj5);
IkReal x4539=((1.0)*cj2);
IkReal x4540=(cj5*r20);
IkReal x4541=((1.0)*x4534);
IkReal x4542=((1.0)*x4535);
IkReal x4543=(sj5*x4535);
IkReal x4544=(sj5*x4534);
evalcond[0]=(((r12*x4535))+(((-1.0)*x4537*x4541))+((r11*x4544)));
evalcond[1]=((((-1.0)*r22*x4541))+(((-1.0)*x4540*x4542))+((x4535*x4538)));
evalcond[2]=((((-1.0)*r02*x4541))+(((-1.0)*x4536*x4542))+((r01*x4543)));
evalcond[3]=((1.0)+(((-1.0)*x4537*x4542))+(((-1.0)*r12*x4541))+((r11*x4543)));
evalcond[4]=((((-1.0)*cj1*x4539))+((sj1*sj2))+((r22*x4535))+(((-1.0)*x4540*x4541))+((x4534*x4538)));
evalcond[5]=((((-1.0)*sj1*x4539))+(((-1.0)*cj1*sj2))+(((-1.0)*x4536*x4541))+((r01*x4544))+((r02*x4535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4545=((1.0)*cj5);
CheckValue<IkReal> x4546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4545)))),-1);
if(!x4546.valid){
continue;
}
CheckValue<IkReal> x4547 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4546.value)))+(x4547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4548=IKcos(j4);
IkReal x4549=IKsin(j4);
IkReal x4550=(cj5*r00);
IkReal x4551=(cj5*r10);
IkReal x4552=(r21*sj5);
IkReal x4553=((1.0)*cj2);
IkReal x4554=(cj5*r20);
IkReal x4555=((1.0)*x4548);
IkReal x4556=((1.0)*x4549);
IkReal x4557=(sj5*x4549);
IkReal x4558=(sj5*x4548);
evalcond[0]=((((-1.0)*x4551*x4555))+((r11*x4558))+((r12*x4549)));
evalcond[1]=((((-1.0)*r22*x4555))+(((-1.0)*x4554*x4556))+((x4549*x4552)));
evalcond[2]=(((r01*x4557))+(((-1.0)*x4550*x4556))+(((-1.0)*r02*x4555)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4555))+(((-1.0)*x4551*x4556))+((r11*x4557)));
evalcond[4]=(((r22*x4549))+(((-1.0)*cj1*x4553))+((sj1*sj2))+(((-1.0)*x4554*x4555))+((x4548*x4552)));
evalcond[5]=(((r01*x4558))+((r02*x4549))+(((-1.0)*x4550*x4555))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4559=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4559.valid){
continue;
}
CheckValue<IkReal> x4560 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4559.value)))+(x4560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4561=IKcos(j4);
IkReal x4562=IKsin(j4);
IkReal x4563=(cj5*r00);
IkReal x4564=(cj5*r10);
IkReal x4565=(r21*sj5);
IkReal x4566=((1.0)*cj2);
IkReal x4567=(cj5*r20);
IkReal x4568=((1.0)*x4561);
IkReal x4569=((1.0)*x4562);
IkReal x4570=(sj5*x4562);
IkReal x4571=(sj5*x4561);
evalcond[0]=(((r12*x4562))+((r11*x4571))+(((-1.0)*x4564*x4568)));
evalcond[1]=((((-1.0)*x4567*x4569))+(((-1.0)*r22*x4568))+((x4562*x4565)));
evalcond[2]=((((-1.0)*r02*x4568))+((r01*x4570))+(((-1.0)*x4563*x4569)));
evalcond[3]=((1.0)+((r11*x4570))+(((-1.0)*x4564*x4569))+(((-1.0)*r12*x4568)));
evalcond[4]=((((-1.0)*x4567*x4568))+((r22*x4562))+(((-1.0)*cj1*x4566))+((sj1*sj2))+((x4561*x4565)));
evalcond[5]=((((-1.0)*sj1*x4566))+((r02*x4562))+(((-1.0)*cj1*sj2))+((r01*x4571))+(((-1.0)*x4563*x4568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4572=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4572;
j4eval[1]=IKsign(x4572);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4573=((1.0)*cj5);
IkReal x4574=((((-1.0)*r21*x4573))+(((-1.0)*r20*sj5)));
j4eval[0]=x4574;
j4eval[1]=((IKabs(((((-1.0)*r00*x4573))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x4574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4575=cj5*cj5;
IkReal x4576=r11*r11;
IkReal x4577=(r11*sj5);
IkReal x4578=(cj5*r10);
IkReal x4579=((((-2.0)*x4577*x4578))+(r12*r12)+(((-1.0)*x4575*x4576))+x4576+((x4575*(r10*r10))));
j4eval[0]=x4579;
j4eval[1]=IKsign(x4579);
j4eval[2]=((IKabs(r12))+(IKabs((x4577+(((-1.0)*x4578))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4580=cj5*cj5;
IkReal x4581=r11*r11;
IkReal x4582=(cj5*r10);
IkReal x4583=(r11*sj5);
CheckValue<IkReal> x4584 = IKatan2WithCheck(IkReal((x4583+(((-1.0)*x4582)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4584.valid){
continue;
}
CheckValue<IkReal> x4585=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4582*x4583))+x4581+((x4580*(r10*r10)))+(((-1.0)*x4580*x4581)))),-1);
if(!x4585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4584.value)+(((1.5707963267949)*(x4585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4586=IKcos(j4);
IkReal x4587=IKsin(j4);
IkReal x4588=(cj5*r00);
IkReal x4589=(cj5*r10);
IkReal x4590=(r21*sj5);
IkReal x4591=(cj5*r20);
IkReal x4592=((1.0)*x4586);
IkReal x4593=((1.0)*x4587);
IkReal x4594=(sj5*x4587);
IkReal x4595=(sj5*x4586);
evalcond[0]=((((-1.0)*x4589*x4592))+((r11*x4595))+((r12*x4587)));
evalcond[1]=((((-1.0)*r22*x4592))+(((-1.0)*x4591*x4593))+((x4587*x4590)));
evalcond[2]=((((-1.0)*r02*x4592))+(((-1.0)*x4588*x4593))+((r01*x4594)));
evalcond[3]=((-1.0)+(((-1.0)*x4589*x4593))+((r11*x4594))+(((-1.0)*r12*x4592)));
evalcond[4]=(((cj2*sj1))+((r02*x4587))+((cj1*sj2))+(((-1.0)*x4588*x4592))+((r01*x4595)));
evalcond[5]=(((r22*x4587))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4591*x4592))+((x4586*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4596=((1.0)*cj5);
CheckValue<IkReal> x4597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4596))+(((-1.0)*r20*sj5)))),-1);
if(!x4597.valid){
continue;
}
CheckValue<IkReal> x4598 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4597.value)))+(x4598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4599=IKcos(j4);
IkReal x4600=IKsin(j4);
IkReal x4601=(cj5*r00);
IkReal x4602=(cj5*r10);
IkReal x4603=(r21*sj5);
IkReal x4604=(cj5*r20);
IkReal x4605=((1.0)*x4599);
IkReal x4606=((1.0)*x4600);
IkReal x4607=(sj5*x4600);
IkReal x4608=(sj5*x4599);
evalcond[0]=(((r11*x4608))+((r12*x4600))+(((-1.0)*x4602*x4605)));
evalcond[1]=(((x4600*x4603))+(((-1.0)*x4604*x4606))+(((-1.0)*r22*x4605)));
evalcond[2]=(((r01*x4607))+(((-1.0)*r02*x4605))+(((-1.0)*x4601*x4606)));
evalcond[3]=((-1.0)+((r11*x4607))+(((-1.0)*x4602*x4606))+(((-1.0)*r12*x4605)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4608))+(((-1.0)*x4601*x4605))+((r02*x4600)));
evalcond[5]=(((x4599*x4603))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4600))+(((-1.0)*x4604*x4605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4609 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4609.valid){
continue;
}
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4609.value)+(((1.5707963267949)*(x4610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4611=IKcos(j4);
IkReal x4612=IKsin(j4);
IkReal x4613=(cj5*r00);
IkReal x4614=(cj5*r10);
IkReal x4615=(r21*sj5);
IkReal x4616=(cj5*r20);
IkReal x4617=((1.0)*x4611);
IkReal x4618=((1.0)*x4612);
IkReal x4619=(sj5*x4612);
IkReal x4620=(sj5*x4611);
evalcond[0]=(((r11*x4620))+((r12*x4612))+(((-1.0)*x4614*x4617)));
evalcond[1]=((((-1.0)*r22*x4617))+(((-1.0)*x4616*x4618))+((x4612*x4615)));
evalcond[2]=((((-1.0)*r02*x4617))+((r01*x4619))+(((-1.0)*x4613*x4618)));
evalcond[3]=((-1.0)+((r11*x4619))+(((-1.0)*r12*x4617))+(((-1.0)*x4614*x4618)));
evalcond[4]=(((cj2*sj1))+((r02*x4612))+((cj1*sj2))+((r01*x4620))+(((-1.0)*x4613*x4617)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x4611*x4615))+((sj1*sj2))+((r22*x4612))+(((-1.0)*x4616*x4617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4621=((-1.0)*r00);
IkReal x4623 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4623)==0){
continue;
}
IkReal x4622=pow(x4623,-0.5);
CheckValue<IkReal> x4624 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4621),IKFAST_ATAN2_MAGTHRESH);
if(!x4624.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4624.value));
IkReal gconst109=(r01*x4622);
IkReal gconst110=(x4621*x4622);
CheckValue<IkReal> x4625 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4625.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4625.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4626=((-1.0)*r00);
IkReal x4627=x4622;
CheckValue<IkReal> x4629 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4626),IKFAST_ATAN2_MAGTHRESH);
if(!x4629.valid){
continue;
}
IkReal x4628=((-1.0)*(x4629.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4628;
IkReal gconst108=x4628;
IkReal gconst109=(r01*x4627);
IkReal gconst110=(x4626*x4627);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4630=((1.0)*sj0);
IkReal x4631=((1.0)*gconst109);
CheckValue<IkReal> x4632 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4630)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4631))+(((-1.0)*gconst109*r11*x4630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4632.valid){
continue;
}
CheckValue<IkReal> x4633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4631))+(((-1.0)*gconst110*r21)))),-1);
if(!x4633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4632.value)+(((1.5707963267949)*(x4633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4634=IKsin(j4);
IkReal x4635=IKcos(j4);
IkReal x4636=(gconst109*r21);
IkReal x4637=((1.0)*cj2);
IkReal x4638=((1.0)*sj0);
IkReal x4639=(cj1*sj2);
IkReal x4640=((1.0)*x4635);
IkReal x4641=(gconst109*x4634);
IkReal x4642=(gconst109*x4635);
IkReal x4643=((1.0)*gconst110*x4634);
evalcond[0]=((((-1.0)*r20*x4643))+(((-1.0)*r22*x4640))+((x4634*x4636)));
evalcond[1]=(cj0+(((-1.0)*r10*x4643))+((r11*x4641))+(((-1.0)*r12*x4640)));
evalcond[2]=((((-1.0)*r02*x4640))+(((-1.0)*x4638))+((r01*x4641))+(((-1.0)*r00*x4643)));
evalcond[3]=((((-1.0)*cj1*x4637))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4640))+((x4635*x4636))+((r22*x4634)));
evalcond[4]=((((-1.0)*cj0*sj1*x4637))+(((-1.0)*cj0*x4639))+((r01*x4642))+((r02*x4634))+(((-1.0)*gconst110*r00*x4640)));
evalcond[5]=(((r12*x4634))+(((-1.0)*gconst110*r10*x4640))+((r11*x4642))+(((-1.0)*sj0*sj1*x4637))+(((-1.0)*x4638*x4639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4644=((1.0)*gconst110);
CheckValue<IkReal> x4645 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4645.valid){
continue;
}
CheckValue<IkReal> x4646=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4644))+(((-1.0)*gconst109*r10)))),-1);
if(!x4646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4645.value)+(((1.5707963267949)*(x4646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4647=IKsin(j4);
IkReal x4648=IKcos(j4);
IkReal x4649=(gconst109*r21);
IkReal x4650=((1.0)*cj2);
IkReal x4651=((1.0)*sj0);
IkReal x4652=(cj1*sj2);
IkReal x4653=((1.0)*x4648);
IkReal x4654=(gconst109*x4647);
IkReal x4655=(gconst109*x4648);
IkReal x4656=((1.0)*gconst110*x4647);
evalcond[0]=((((-1.0)*r22*x4653))+(((-1.0)*r20*x4656))+((x4647*x4649)));
evalcond[1]=(((r11*x4654))+cj0+(((-1.0)*r12*x4653))+(((-1.0)*r10*x4656)));
evalcond[2]=((((-1.0)*x4651))+(((-1.0)*r00*x4656))+(((-1.0)*r02*x4653))+((r01*x4654)));
evalcond[3]=((((-1.0)*cj1*x4650))+((sj1*sj2))+((r22*x4647))+((x4648*x4649))+(((-1.0)*gconst110*r20*x4653)));
evalcond[4]=(((r02*x4647))+(((-1.0)*gconst110*r00*x4653))+(((-1.0)*cj0*x4652))+((r01*x4655))+(((-1.0)*cj0*sj1*x4650)));
evalcond[5]=(((r11*x4655))+((r12*x4647))+(((-1.0)*x4651*x4652))+(((-1.0)*gconst110*r10*x4653))+(((-1.0)*sj0*sj1*x4650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4657=((-1.0)*r01);
IkReal x4659 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4659)==0){
continue;
}
IkReal x4658=pow(x4659,-0.5);
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(x4657),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4660.value))));
IkReal gconst112=(x4657*x4658);
IkReal gconst113=((1.0)*r00*x4658);
CheckValue<IkReal> x4661 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4661.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4661.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4662=((-1.0)*r01);
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(x4662),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
IkReal x4663=((1.0)*(x4665.value));
IkReal x4664=x4658;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4663)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4663)));
IkReal gconst112=(x4662*x4664);
IkReal gconst113=((1.0)*r00*x4664);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4666=((-1.0)*r01);
CheckValue<IkReal> x4669 = IKatan2WithCheck(IkReal(x4666),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4669.valid){
continue;
}
IkReal x4667=((1.0)*(x4669.value));
IkReal x4668=x4658;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4667)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4667)));
IkReal gconst112=(x4666*x4668);
IkReal gconst113=((1.0)*r00*x4668);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4670=((-1.0)*r01);
CheckValue<IkReal> x4673 = IKatan2WithCheck(IkReal(x4670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4673.valid){
continue;
}
IkReal x4671=((1.0)*(x4673.value));
IkReal x4672=x4658;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4671)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4671)));
IkReal gconst112=(x4670*x4672);
IkReal gconst113=((1.0)*r00*x4672);
IkReal x4674=r02*r02;
IkReal x4675=(r12*sj0);
IkReal x4676=((1.0)*cj0);
IkReal x4677=x4658;
j4eval[0]=((IKabs(((((-1.0)*r02*x4676))+(((-1.0)*x4675)))))+(IKabs(((((-1.0)*x4676*x4677))+((r02*x4675*x4677))+((cj0*x4674*x4677))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4678=((1.0)*sj0);
IkReal x4679=((1.0)*gconst112);
CheckValue<IkReal> x4680 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4678))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4679))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x4678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4680.valid){
continue;
}
CheckValue<IkReal> x4681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4679))+(((-1.0)*gconst113*r21)))),-1);
if(!x4681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4680.value)+(((1.5707963267949)*(x4681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4682=IKsin(j4);
IkReal x4683=IKcos(j4);
IkReal x4684=(gconst113*r20);
IkReal x4685=(gconst112*r21);
IkReal x4686=((1.0)*cj2);
IkReal x4687=(gconst113*r00);
IkReal x4688=(gconst113*r10);
IkReal x4689=((1.0)*sj0);
IkReal x4690=(cj1*sj2);
IkReal x4691=((1.0)*x4683);
IkReal x4692=((1.0)*x4682);
IkReal x4693=(gconst112*x4683);
IkReal x4694=(gconst112*x4682);
evalcond[0]=(((x4682*x4685))+(((-1.0)*x4684*x4692))+(((-1.0)*r22*x4691)));
evalcond[1]=((((-1.0)*r12*x4691))+cj0+(((-1.0)*x4688*x4692))+((r11*x4694)));
evalcond[2]=((((-1.0)*x4687*x4692))+(((-1.0)*r02*x4691))+((r01*x4694))+(((-1.0)*x4689)));
evalcond[3]=(((x4683*x4685))+(((-1.0)*x4684*x4691))+(((-1.0)*cj1*x4686))+((sj1*sj2))+((r22*x4682)));
evalcond[4]=((((-1.0)*x4687*x4691))+((r02*x4682))+(((-1.0)*cj0*sj1*x4686))+(((-1.0)*cj0*x4690))+((r01*x4693)));
evalcond[5]=((((-1.0)*x4688*x4691))+(((-1.0)*sj0*sj1*x4686))+((r12*x4682))+((r11*x4693))+(((-1.0)*x4689*x4690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4695=((1.0)*gconst113);
CheckValue<IkReal> x4696=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x4695)))),-1);
if(!x4696.valid){
continue;
}
CheckValue<IkReal> x4697 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4696.value)))+(x4697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4698=IKsin(j4);
IkReal x4699=IKcos(j4);
IkReal x4700=(gconst113*r20);
IkReal x4701=(gconst112*r21);
IkReal x4702=((1.0)*cj2);
IkReal x4703=(gconst113*r00);
IkReal x4704=(gconst113*r10);
IkReal x4705=((1.0)*sj0);
IkReal x4706=(cj1*sj2);
IkReal x4707=((1.0)*x4699);
IkReal x4708=((1.0)*x4698);
IkReal x4709=(gconst112*x4699);
IkReal x4710=(gconst112*x4698);
evalcond[0]=((((-1.0)*x4700*x4708))+(((-1.0)*r22*x4707))+((x4698*x4701)));
evalcond[1]=(cj0+(((-1.0)*r12*x4707))+(((-1.0)*x4704*x4708))+((r11*x4710)));
evalcond[2]=((((-1.0)*r02*x4707))+(((-1.0)*x4703*x4708))+((r01*x4710))+(((-1.0)*x4705)));
evalcond[3]=((((-1.0)*x4700*x4707))+((x4699*x4701))+((sj1*sj2))+((r22*x4698))+(((-1.0)*cj1*x4702)));
evalcond[4]=(((r02*x4698))+(((-1.0)*x4703*x4707))+(((-1.0)*cj0*sj1*x4702))+(((-1.0)*cj0*x4706))+((r01*x4709)));
evalcond[5]=((((-1.0)*sj0*sj1*x4702))+(((-1.0)*x4704*x4707))+((r12*x4698))+(((-1.0)*x4705*x4706))+((r11*x4709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4711=((1.0)*gconst113);
CheckValue<IkReal> x4712=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x4711)))),-1);
if(!x4712.valid){
continue;
}
CheckValue<IkReal> x4713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4712.value)))+(x4713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4714=IKsin(j4);
IkReal x4715=IKcos(j4);
IkReal x4716=(gconst113*r20);
IkReal x4717=(gconst112*r21);
IkReal x4718=((1.0)*cj2);
IkReal x4719=(gconst113*r00);
IkReal x4720=(gconst113*r10);
IkReal x4721=((1.0)*sj0);
IkReal x4722=(cj1*sj2);
IkReal x4723=((1.0)*x4715);
IkReal x4724=((1.0)*x4714);
IkReal x4725=(gconst112*x4715);
IkReal x4726=(gconst112*x4714);
evalcond[0]=((((-1.0)*x4716*x4724))+((x4714*x4717))+(((-1.0)*r22*x4723)));
evalcond[1]=(((r11*x4726))+cj0+(((-1.0)*r12*x4723))+(((-1.0)*x4720*x4724)));
evalcond[2]=((((-1.0)*x4721))+(((-1.0)*x4719*x4724))+((r01*x4726))+(((-1.0)*r02*x4723)));
evalcond[3]=(((r22*x4714))+(((-1.0)*x4716*x4723))+((sj1*sj2))+((x4715*x4717))+(((-1.0)*cj1*x4718)));
evalcond[4]=((((-1.0)*cj0*sj1*x4718))+(((-1.0)*x4719*x4723))+(((-1.0)*cj0*x4722))+((r01*x4725))+((r02*x4714)));
evalcond[5]=(((r11*x4725))+(((-1.0)*sj0*sj1*x4718))+((r12*x4714))+(((-1.0)*x4721*x4722))+(((-1.0)*x4720*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4727=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4727;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4728=((1.0)*cj5);
IkReal x4729=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4728)));
j4eval[0]=x4729;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4728)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4730=cj5*cj5;
IkReal x4731=r01*r01;
IkReal x4732=(cj5*r00);
IkReal x4733=(r01*sj5);
IkReal x4734=(((x4730*(r00*r00)))+x4731+(((-1.0)*x4730*x4731))+(r02*r02)+(((-2.0)*x4732*x4733)));
j4eval[0]=x4734;
j4eval[1]=IKsign(x4734);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4732))+x4733))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4735=cj5*cj5;
IkReal x4736=r01*r01;
IkReal x4737=(r01*sj5);
IkReal x4738=(cj5*r00);
CheckValue<IkReal> x4739 = IKatan2WithCheck(IkReal(((((-1.0)*x4738))+x4737)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4739.valid){
continue;
}
CheckValue<IkReal> x4740=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4735*x4736))+x4736+(((-2.0)*x4737*x4738))+(r02*r02)+((x4735*(r00*r00))))),-1);
if(!x4740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4739.value)+(((1.5707963267949)*(x4740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4741=IKcos(j4);
IkReal x4742=IKsin(j4);
IkReal x4743=(cj5*r00);
IkReal x4744=(cj5*r10);
IkReal x4745=(r21*sj5);
IkReal x4746=((1.0)*cj2);
IkReal x4747=(cj5*r20);
IkReal x4748=((1.0)*x4741);
IkReal x4749=((1.0)*x4742);
IkReal x4750=(sj5*x4742);
IkReal x4751=(sj5*x4741);
evalcond[0]=(((r01*x4751))+((r02*x4742))+(((-1.0)*x4743*x4748)));
evalcond[1]=(((x4742*x4745))+(((-1.0)*r22*x4748))+(((-1.0)*x4747*x4749)));
evalcond[2]=((((-1.0)*r12*x4748))+((r11*x4750))+(((-1.0)*x4744*x4749)));
evalcond[3]=((-1.0)+((r01*x4750))+(((-1.0)*x4743*x4749))+(((-1.0)*r02*x4748)));
evalcond[4]=(((x4741*x4745))+(((-1.0)*cj1*x4746))+((sj1*sj2))+((r22*x4742))+(((-1.0)*x4747*x4748)));
evalcond[5]=((((-1.0)*sj1*x4746))+((r11*x4751))+((r12*x4742))+(((-1.0)*x4744*x4748))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4752=((1.0)*cj5);
CheckValue<IkReal> x4753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4752)))),-1);
if(!x4753.valid){
continue;
}
CheckValue<IkReal> x4754 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4752))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4753.value)))+(x4754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4755=IKcos(j4);
IkReal x4756=IKsin(j4);
IkReal x4757=(cj5*r00);
IkReal x4758=(cj5*r10);
IkReal x4759=(r21*sj5);
IkReal x4760=((1.0)*cj2);
IkReal x4761=(cj5*r20);
IkReal x4762=((1.0)*x4755);
IkReal x4763=((1.0)*x4756);
IkReal x4764=(sj5*x4756);
IkReal x4765=(sj5*x4755);
evalcond[0]=(((r01*x4765))+(((-1.0)*x4757*x4762))+((r02*x4756)));
evalcond[1]=((((-1.0)*x4761*x4763))+((x4756*x4759))+(((-1.0)*r22*x4762)));
evalcond[2]=((((-1.0)*x4758*x4763))+(((-1.0)*r12*x4762))+((r11*x4764)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4762))+((r01*x4764))+(((-1.0)*x4757*x4763)));
evalcond[4]=((((-1.0)*x4761*x4762))+((x4755*x4759))+((sj1*sj2))+(((-1.0)*cj1*x4760))+((r22*x4756)));
evalcond[5]=((((-1.0)*x4758*x4762))+((r12*x4756))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4760))+((r11*x4765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4766=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4766.valid){
continue;
}
CheckValue<IkReal> x4767 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4766.value)))+(x4767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4768=IKcos(j4);
IkReal x4769=IKsin(j4);
IkReal x4770=(cj5*r00);
IkReal x4771=(cj5*r10);
IkReal x4772=(r21*sj5);
IkReal x4773=((1.0)*cj2);
IkReal x4774=(cj5*r20);
IkReal x4775=((1.0)*x4768);
IkReal x4776=((1.0)*x4769);
IkReal x4777=(sj5*x4769);
IkReal x4778=(sj5*x4768);
evalcond[0]=(((r02*x4769))+((r01*x4778))+(((-1.0)*x4770*x4775)));
evalcond[1]=(((x4769*x4772))+(((-1.0)*r22*x4775))+(((-1.0)*x4774*x4776)));
evalcond[2]=(((r11*x4777))+(((-1.0)*r12*x4775))+(((-1.0)*x4771*x4776)));
evalcond[3]=((-1.0)+((r01*x4777))+(((-1.0)*x4770*x4776))+(((-1.0)*r02*x4775)));
evalcond[4]=(((r22*x4769))+((x4768*x4772))+(((-1.0)*cj1*x4773))+(((-1.0)*x4774*x4775))+((sj1*sj2)));
evalcond[5]=(((r11*x4778))+(((-1.0)*sj1*x4773))+(((-1.0)*cj1*sj2))+(((-1.0)*x4771*x4775))+((r12*x4769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4779=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4779;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4780=((1.0)*cj5);
IkReal x4781=((((-1.0)*r21*x4780))+(((-1.0)*r20*sj5)));
j4eval[0]=x4781;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4780))))));
j4eval[2]=IKsign(x4781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4782=cj5*cj5;
IkReal x4783=r01*r01;
IkReal x4784=(r01*sj5);
IkReal x4785=(cj5*r00);
IkReal x4786=((((-1.0)*x4782*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4784*x4785))+(((-1.0)*x4783))+((x4782*x4783)));
j4eval[0]=x4786;
j4eval[1]=IKsign(x4786);
j4eval[2]=((IKabs((x4784+(((-1.0)*x4785)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4787=cj5*cj5;
IkReal x4788=r01*r01;
IkReal x4789=(r01*sj5);
IkReal x4790=(cj5*r00);
CheckValue<IkReal> x4791 = IKatan2WithCheck(IkReal((x4789+(((-1.0)*x4790)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4791.valid){
continue;
}
CheckValue<IkReal> x4792=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4787*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4789*x4790))+(((-1.0)*x4788))+((x4787*x4788)))),-1);
if(!x4792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4791.value)+(((1.5707963267949)*(x4792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4793=IKcos(j4);
IkReal x4794=IKsin(j4);
IkReal x4795=(cj5*r00);
IkReal x4796=(cj5*r10);
IkReal x4797=(r21*sj5);
IkReal x4798=(cj5*r20);
IkReal x4799=((1.0)*x4793);
IkReal x4800=((1.0)*x4794);
IkReal x4801=(sj5*x4794);
IkReal x4802=(sj5*x4793);
evalcond[0]=(((r01*x4802))+((r02*x4794))+(((-1.0)*x4795*x4799)));
evalcond[1]=((((-1.0)*r22*x4799))+(((-1.0)*x4798*x4800))+((x4794*x4797)));
evalcond[2]=((((-1.0)*x4796*x4800))+(((-1.0)*r12*x4799))+((r11*x4801)));
evalcond[3]=((1.0)+((r01*x4801))+(((-1.0)*r02*x4799))+(((-1.0)*x4795*x4800)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4796*x4799))+((r12*x4794))+((r11*x4802)));
evalcond[5]=(((x4793*x4797))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4798*x4799))+((r22*x4794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4803=((1.0)*cj5);
CheckValue<IkReal> x4804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4803))+(((-1.0)*r20*sj5)))),-1);
if(!x4804.valid){
continue;
}
CheckValue<IkReal> x4805 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4804.value)))+(x4805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4806=IKcos(j4);
IkReal x4807=IKsin(j4);
IkReal x4808=(cj5*r00);
IkReal x4809=(cj5*r10);
IkReal x4810=(r21*sj5);
IkReal x4811=(cj5*r20);
IkReal x4812=((1.0)*x4806);
IkReal x4813=((1.0)*x4807);
IkReal x4814=(sj5*x4807);
IkReal x4815=(sj5*x4806);
evalcond[0]=(((r02*x4807))+(((-1.0)*x4808*x4812))+((r01*x4815)));
evalcond[1]=((((-1.0)*x4811*x4813))+((x4807*x4810))+(((-1.0)*r22*x4812)));
evalcond[2]=((((-1.0)*x4809*x4813))+((r11*x4814))+(((-1.0)*r12*x4812)));
evalcond[3]=((1.0)+(((-1.0)*x4808*x4813))+(((-1.0)*r02*x4812))+((r01*x4814)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4809*x4812))+((r11*x4815))+((cj1*sj2))+((r12*x4807)));
evalcond[5]=((((-1.0)*x4811*x4812))+((x4806*x4810))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4816 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4816.valid){
continue;
}
CheckValue<IkReal> x4817=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4816.value)+(((1.5707963267949)*(x4817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4818=IKcos(j4);
IkReal x4819=IKsin(j4);
IkReal x4820=(cj5*r00);
IkReal x4821=(cj5*r10);
IkReal x4822=(r21*sj5);
IkReal x4823=(cj5*r20);
IkReal x4824=((1.0)*x4818);
IkReal x4825=((1.0)*x4819);
IkReal x4826=(sj5*x4819);
IkReal x4827=(sj5*x4818);
evalcond[0]=(((r02*x4819))+(((-1.0)*x4820*x4824))+((r01*x4827)));
evalcond[1]=(((x4819*x4822))+(((-1.0)*x4823*x4825))+(((-1.0)*r22*x4824)));
evalcond[2]=(((r11*x4826))+(((-1.0)*x4821*x4825))+(((-1.0)*r12*x4824)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4824))+(((-1.0)*x4820*x4825))+((r01*x4826)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4827))+((r12*x4819))+(((-1.0)*x4821*x4824)));
evalcond[5]=(((x4818*x4822))+(((-1.0)*x4823*x4824))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4828=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4828);
rxp1_1=(px*r21);
rxp1_2=(r11*x4828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4829=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4829);
rxp1_1=(px*r21);
rxp1_2=(r11*x4829);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4830=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4830);
rxp1_1=(px*r21);
rxp1_2=(r11*x4830);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4833=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4833.valid){
continue;
}
IkReal x4831=x4833.value;
IkReal x4832=(sj0*x4831);
cj4array[0]=(((cj1*sj2*x4832))+((cj2*sj1*x4832)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4834=IKsin(j4);
IkReal x4835=IKcos(j4);
IkReal x4836=(r21*sj5);
IkReal x4837=((1.0)*cj5*r20);
evalcond[0]=(r02*x4834);
evalcond[1]=((((-1.0)*r02*x4835))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x4834*x4837))+((x4834*x4836)));
evalcond[3]=(((r11*sj5*x4834))+(((-1.0)*cj5*r10*x4834)));
evalcond[4]=((((-1.0)*x4835*x4837))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4835*x4836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4839=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4839.valid){
continue;
}
IkReal x4838=x4839.value;
cj4array[0]=(((cj1*cj2*x4838))+(((-1.0)*sj1*sj2*x4838)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4840=IKsin(j4);
IkReal x4841=IKcos(j4);
IkReal x4842=((1.0)*sj0);
IkReal x4843=((1.0)*cj5);
IkReal x4844=(sj5*x4840);
evalcond[0]=(r02*x4840);
evalcond[1]=((((-1.0)*x4842))+(((-1.0)*r02*x4841)));
evalcond[2]=((((-1.0)*r20*x4840*x4843))+((r21*x4844)));
evalcond[3]=((((-1.0)*r10*x4840*x4843))+((r11*x4844)));
evalcond[4]=(((r11*sj5*x4841))+(((-1.0)*r10*x4841*x4843))+(((-1.0)*cj2*sj1*x4842))+(((-1.0)*cj1*sj2*x4842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4845=IKPowWithIntegerCheck(r02,-1);
if(!x4845.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4845.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4846=IKsin(j4);
IkReal x4847=IKcos(j4);
IkReal x4848=((1.0)*cj1);
IkReal x4849=(r21*sj5);
IkReal x4850=((1.0)*cj5);
IkReal x4851=(r11*sj5);
evalcond[0]=(r02*x4846);
evalcond[1]=(((x4846*x4849))+(((-1.0)*r20*x4846*x4850)));
evalcond[2]=(((x4846*x4851))+(((-1.0)*r10*x4846*x4850)));
evalcond[3]=((((-1.0)*cj2*x4848))+(((-1.0)*r20*x4847*x4850))+((x4847*x4849))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4847*x4850))+(((-1.0)*sj0*sj2*x4848))+((x4847*x4851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4852=((1.0)*sj0);
IkReal x4853=((1.0)*cj0);
CheckValue<IkReal> x4854 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4852))+(((-1.0)*r02*x4853)))),IkReal(((((-1.0)*r11*sj5*x4852))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4853))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4854.valid){
continue;
}
CheckValue<IkReal> x4855=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4854.value)+(((1.5707963267949)*(x4855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4856=IKsin(j4);
IkReal x4857=IKcos(j4);
IkReal x4858=(cj5*r00);
IkReal x4859=(cj5*r10);
IkReal x4860=(r21*sj5);
IkReal x4861=((1.0)*cj2);
IkReal x4862=((1.0)*sj0);
IkReal x4863=(cj1*sj2);
IkReal x4864=(cj5*r20);
IkReal x4865=((1.0)*x4857);
IkReal x4866=((1.0)*x4856);
IkReal x4867=(sj5*x4856);
IkReal x4868=(sj5*x4857);
evalcond[0]=((((-1.0)*r22*x4865))+(((-1.0)*x4864*x4866))+((x4856*x4860)));
evalcond[1]=(((r11*x4867))+cj0+(((-1.0)*r12*x4865))+(((-1.0)*x4859*x4866)));
evalcond[2]=(((r01*x4867))+(((-1.0)*x4858*x4866))+(((-1.0)*x4862))+(((-1.0)*r02*x4865)));
evalcond[3]=(((r22*x4856))+((sj1*sj2))+(((-1.0)*x4864*x4865))+((x4857*x4860))+(((-1.0)*cj1*x4861)));
evalcond[4]=((((-1.0)*cj0*sj1*x4861))+((r01*x4868))+(((-1.0)*x4858*x4865))+(((-1.0)*cj0*x4863))+((r02*x4856)));
evalcond[5]=((((-1.0)*x4862*x4863))+((r11*x4868))+(((-1.0)*sj0*sj1*x4861))+((r12*x4856))+(((-1.0)*x4859*x4865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4869=((1.0)*cj5);
CheckValue<IkReal> x4870 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4869))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4870.valid){
continue;
}
CheckValue<IkReal> x4871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4869)))),-1);
if(!x4871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4870.value)+(((1.5707963267949)*(x4871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4872=IKsin(j4);
IkReal x4873=IKcos(j4);
IkReal x4874=(cj5*r00);
IkReal x4875=(cj5*r10);
IkReal x4876=(r21*sj5);
IkReal x4877=((1.0)*cj2);
IkReal x4878=((1.0)*sj0);
IkReal x4879=(cj1*sj2);
IkReal x4880=(cj5*r20);
IkReal x4881=((1.0)*x4873);
IkReal x4882=((1.0)*x4872);
IkReal x4883=(sj5*x4872);
IkReal x4884=(sj5*x4873);
evalcond[0]=((((-1.0)*x4880*x4882))+((x4872*x4876))+(((-1.0)*r22*x4881)));
evalcond[1]=(((r11*x4883))+cj0+(((-1.0)*r12*x4881))+(((-1.0)*x4875*x4882)));
evalcond[2]=((((-1.0)*x4874*x4882))+(((-1.0)*r02*x4881))+((r01*x4883))+(((-1.0)*x4878)));
evalcond[3]=((((-1.0)*x4880*x4881))+((sj1*sj2))+((x4873*x4876))+((r22*x4872))+(((-1.0)*cj1*x4877)));
evalcond[4]=((((-1.0)*x4874*x4881))+((r02*x4872))+(((-1.0)*cj0*sj1*x4877))+((r01*x4884))+(((-1.0)*cj0*x4879)));
evalcond[5]=(((r11*x4884))+(((-1.0)*x4878*x4879))+(((-1.0)*sj0*sj1*x4877))+((r12*x4872))+(((-1.0)*x4875*x4881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4885=((1.0)*cj5);
CheckValue<IkReal> x4886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4885)))),-1);
if(!x4886.valid){
continue;
}
CheckValue<IkReal> x4887 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4886.value)))+(x4887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4888=IKsin(j4);
IkReal x4889=IKcos(j4);
IkReal x4890=(cj5*r00);
IkReal x4891=(cj5*r10);
IkReal x4892=(r21*sj5);
IkReal x4893=((1.0)*cj2);
IkReal x4894=((1.0)*sj0);
IkReal x4895=(cj1*sj2);
IkReal x4896=(cj5*r20);
IkReal x4897=((1.0)*x4889);
IkReal x4898=((1.0)*x4888);
IkReal x4899=(sj5*x4888);
IkReal x4900=(sj5*x4889);
evalcond[0]=(((x4888*x4892))+(((-1.0)*x4896*x4898))+(((-1.0)*r22*x4897)));
evalcond[1]=(((r11*x4899))+(((-1.0)*r12*x4897))+cj0+(((-1.0)*x4891*x4898)));
evalcond[2]=((((-1.0)*x4894))+(((-1.0)*r02*x4897))+(((-1.0)*x4890*x4898))+((r01*x4899)));
evalcond[3]=((((-1.0)*cj1*x4893))+((sj1*sj2))+((x4889*x4892))+(((-1.0)*x4896*x4897))+((r22*x4888)));
evalcond[4]=((((-1.0)*cj0*x4895))+(((-1.0)*cj0*sj1*x4893))+((r02*x4888))+(((-1.0)*x4890*x4897))+((r01*x4900)));
evalcond[5]=(((r12*x4888))+(((-1.0)*sj0*sj1*x4893))+(((-1.0)*x4894*x4895))+(((-1.0)*x4891*x4897))+((r11*x4900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4901=((1.0)*cj5);
IkReal x4902=((1.0)*sj5);
IkReal x4903=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4903;
j0eval[1]=((IKabs(((((-1.0)*r11*x4901))+(((-1.0)*r10*x4902)))))+(IKabs(((((-1.0)*r01*x4901))+(((-1.0)*r00*x4902))))));
j0eval[2]=IKsign(x4903);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4904=r21*r21;
IkReal x4905=cj5*cj5;
IkReal x4906=(cj2*sj1);
IkReal x4907=(cj1*sj2);
IkReal x4908=(r21*sj5);
IkReal x4909=((1.0)*cj5*r20);
IkReal x4910=(((x4904*x4905))+(((-1.0)*x4904))+(((2.0)*cj5*r20*x4908))+(((-1.0)*(r22*r22)))+(((-1.0)*x4905*(r20*r20))));
j4eval[0]=x4910;
j4eval[1]=((IKabs(((((-1.0)*x4906*x4909))+((x4907*x4908))+((x4906*x4908))+(((-1.0)*x4907*x4909)))))+(IKabs((((r22*x4907))+((r22*x4906))))));
j4eval[2]=IKsign(x4910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4911=cj1*cj1;
IkReal x4912=(cj2*sj2);
IkReal x4913=(cj2*sj1);
IkReal x4914=(cj1*sj1);
j0eval[0]=(x4914+x4912+(((-1.08418367346939)*cj1*x4913))+(((-2.0)*x4911*x4912))+(((-1.08418367346939)*sj2*x4911))+(((-2.0)*cj1*cj2*x4913)));
j0eval[1]=((((-1.0)*x4913))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4915=IKcos(j0);
IkReal x4916=IKsin(j0);
evalcond[0]=((((-0.134)*x4916))+(((-1.0)*px))+(((0.817)*x4915)));
evalcond[1]=((((0.134)*x4915))+(((-1.0)*py))+(((0.817)*x4916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4917=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4917;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4918=((1.0)*cj5);
IkReal x4919=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4918)));
j4eval[0]=x4919;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4918))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4920=((1.0)*cj5);
IkReal x4921=((((-1.0)*r01*x4920))+(((-1.0)*r00*sj5)));
j4eval[0]=x4921;
j4eval[1]=IKsign(x4921);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4920))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4922=((1.0)*cj5);
CheckValue<IkReal> x4923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4922))+(((-1.0)*r00*sj5)))),-1);
if(!x4923.valid){
continue;
}
CheckValue<IkReal> x4924 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4922)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4923.value)))+(x4924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4925=IKcos(j4);
IkReal x4926=IKsin(j4);
IkReal x4927=((1.0)*sj0);
IkReal x4928=(cj5*r00);
IkReal x4929=(cj5*r10);
IkReal x4930=(cj5*r20);
IkReal x4931=((1.0)*x4925);
IkReal x4932=((1.0)*x4926);
IkReal x4933=(sj5*x4925);
IkReal x4934=(sj5*x4926);
evalcond[0]=((((-1.0)*x4930*x4931))+((r22*x4926))+((r21*x4933)));
evalcond[1]=((((-1.0)*x4930*x4932))+((r21*x4934))+(((-1.0)*r22*x4931)));
evalcond[2]=(cj0+(((-1.0)*r12*x4931))+(((-1.0)*x4929*x4932))+((r11*x4934)));
evalcond[3]=(((r01*x4933))+((r02*x4926))+(((-1.0)*x4928*x4931))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4929*x4931))+((r11*x4933))+(((-1.0)*x4927))+((r12*x4926)));
evalcond[5]=((((-1.0)*r02*x4931))+((r01*x4934))+(((-1.0)*x4928*x4932))+(((-1.0)*x4927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4935=((1.0)*cj5);
CheckValue<IkReal> x4936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4935))+(((-1.0)*r00*sj5)))),-1);
if(!x4936.valid){
continue;
}
CheckValue<IkReal> x4937 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4936.value)))+(x4937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4938=IKcos(j4);
IkReal x4939=IKsin(j4);
IkReal x4940=((1.0)*sj0);
IkReal x4941=(cj5*r00);
IkReal x4942=(cj5*r10);
IkReal x4943=(cj5*r20);
IkReal x4944=((1.0)*x4938);
IkReal x4945=((1.0)*x4939);
IkReal x4946=(sj5*x4938);
IkReal x4947=(sj5*x4939);
evalcond[0]=((((-1.0)*x4943*x4944))+((r21*x4946))+((r22*x4939)));
evalcond[1]=((((-1.0)*x4943*x4945))+((r21*x4947))+(((-1.0)*r22*x4944)));
evalcond[2]=((((-1.0)*x4942*x4945))+cj0+((r11*x4947))+(((-1.0)*r12*x4944)));
evalcond[3]=(((r01*x4946))+(((-1.0)*x4941*x4944))+((r02*x4939))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4942*x4944))+((r12*x4939))+((r11*x4946))+(((-1.0)*x4940)));
evalcond[5]=(((r01*x4947))+(((-1.0)*x4941*x4945))+(((-1.0)*x4940))+(((-1.0)*r02*x4944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4948 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4948.valid){
continue;
}
CheckValue<IkReal> x4949=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4948.value)+(((1.5707963267949)*(x4949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4950=IKcos(j4);
IkReal x4951=IKsin(j4);
IkReal x4952=((1.0)*sj0);
IkReal x4953=(cj5*r00);
IkReal x4954=(cj5*r10);
IkReal x4955=(cj5*r20);
IkReal x4956=((1.0)*x4950);
IkReal x4957=((1.0)*x4951);
IkReal x4958=(sj5*x4950);
IkReal x4959=(sj5*x4951);
evalcond[0]=(((r22*x4951))+(((-1.0)*x4955*x4956))+((r21*x4958)));
evalcond[1]=((((-1.0)*x4955*x4957))+(((-1.0)*r22*x4956))+((r21*x4959)));
evalcond[2]=(cj0+((r11*x4959))+(((-1.0)*r12*x4956))+(((-1.0)*x4954*x4957)));
evalcond[3]=(((r02*x4951))+((r01*x4958))+(((-1.0)*x4953*x4956))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4951))+(((-1.0)*x4952))+((r11*x4958))+(((-1.0)*x4954*x4956)));
evalcond[5]=((((-1.0)*x4952))+(((-1.0)*r02*x4956))+((r01*x4959))+(((-1.0)*x4953*x4957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4960=IKcos(j0);
IkReal x4961=IKsin(j0);
evalcond[0]=((((0.033)*x4960))+(((-1.0)*px))+(((-0.134)*x4961)));
evalcond[1]=((((0.033)*x4961))+(((-1.0)*py))+(((0.134)*x4960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4962=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4962;
j4eval[1]=IKsign(x4962);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4963=((1.0)*cj5);
IkReal x4964=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4963)));
j4eval[0]=x4964;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4963)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4965=cj5*cj5;
IkReal x4966=((1.0)*r20);
IkReal x4967=(r01*r21);
IkReal x4968=(r21*sj5);
IkReal x4969=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4965*x4966))+((cj5*r00*x4968))+((x4965*x4967))+(((-1.0)*x4967)));
j4eval[0]=x4969;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4966))+((cj0*x4968))))));
j4eval[2]=IKsign(x4969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4970=cj5*cj5;
IkReal x4971=((1.0)*r20);
IkReal x4972=(r01*r21);
IkReal x4973=(r21*sj5);
CheckValue<IkReal> x4974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4971))+((cj0*x4973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4974.valid){
continue;
}
CheckValue<IkReal> x4975=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4973))+(((-1.0)*r00*x4970*x4971))+((x4970*x4972))+(((-1.0)*x4972)))),-1);
if(!x4975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4974.value)+(((1.5707963267949)*(x4975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4976=IKcos(j4);
IkReal x4977=IKsin(j4);
IkReal x4978=(cj5*r00);
IkReal x4979=(cj5*r10);
IkReal x4980=(cj5*r20);
IkReal x4981=((1.0)*x4976);
IkReal x4982=((1.0)*x4977);
IkReal x4983=(sj5*x4976);
IkReal x4984=(sj5*x4977);
evalcond[0]=(((r22*x4977))+((r21*x4983))+(((-1.0)*x4980*x4981)));
evalcond[1]=((((-1.0)*r22*x4981))+((r21*x4984))+(((-1.0)*x4980*x4982)));
evalcond[2]=(((r01*x4983))+cj0+((r02*x4977))+(((-1.0)*x4978*x4981)));
evalcond[3]=(sj0+((r11*x4983))+((r12*x4977))+(((-1.0)*x4979*x4981)));
evalcond[4]=(cj0+((r11*x4984))+(((-1.0)*r12*x4981))+(((-1.0)*x4979*x4982)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4984))+(((-1.0)*x4978*x4982))+(((-1.0)*r02*x4981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4985=((1.0)*cj5);
CheckValue<IkReal> x4986 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4985)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4986.valid){
continue;
}
CheckValue<IkReal> x4987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4985)))),-1);
if(!x4987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4986.value)+(((1.5707963267949)*(x4987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4988=IKcos(j4);
IkReal x4989=IKsin(j4);
IkReal x4990=(cj5*r00);
IkReal x4991=(cj5*r10);
IkReal x4992=(cj5*r20);
IkReal x4993=((1.0)*x4988);
IkReal x4994=((1.0)*x4989);
IkReal x4995=(sj5*x4988);
IkReal x4996=(sj5*x4989);
evalcond[0]=(((r22*x4989))+((r21*x4995))+(((-1.0)*x4992*x4993)));
evalcond[1]=((((-1.0)*r22*x4993))+((r21*x4996))+(((-1.0)*x4992*x4994)));
evalcond[2]=(cj0+(((-1.0)*x4990*x4993))+((r01*x4995))+((r02*x4989)));
evalcond[3]=(sj0+((r12*x4989))+(((-1.0)*x4991*x4993))+((r11*x4995)));
evalcond[4]=(cj0+(((-1.0)*r12*x4993))+(((-1.0)*x4991*x4994))+((r11*x4996)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4990*x4994))+(((-1.0)*r02*x4993))+((r01*x4996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4997 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4997.valid){
continue;
}
CheckValue<IkReal> x4998=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4997.value)+(((1.5707963267949)*(x4998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4999=IKcos(j4);
IkReal x5000=IKsin(j4);
IkReal x5001=(cj5*r00);
IkReal x5002=(cj5*r10);
IkReal x5003=(cj5*r20);
IkReal x5004=((1.0)*x4999);
IkReal x5005=((1.0)*x5000);
IkReal x5006=(sj5*x4999);
IkReal x5007=(sj5*x5000);
evalcond[0]=((((-1.0)*x5003*x5004))+((r22*x5000))+((r21*x5006)));
evalcond[1]=((((-1.0)*x5003*x5005))+((r21*x5007))+(((-1.0)*r22*x5004)));
evalcond[2]=(cj0+((r02*x5000))+(((-1.0)*x5001*x5004))+((r01*x5006)));
evalcond[3]=(((r12*x5000))+sj0+((r11*x5006))+(((-1.0)*x5002*x5004)));
evalcond[4]=(((r11*x5007))+cj0+(((-1.0)*x5002*x5005))+(((-1.0)*r12*x5004)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5001*x5005))+((r01*x5007))+(((-1.0)*r02*x5004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5008=IKsin(j0);
IkReal x5009=IKcos(j0);
IkReal x5010=((0.1)*sj5);
IkReal x5011=(cj5*r11);
IkReal x5012=(cj5*r01);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5009))+x5012);
evalcond[1]=(((r10*sj5))+(((-1.0)*x5008))+x5011);
evalcond[2]=((((-1.0)*px))+(((-0.134)*x5008))+(((-0.1)*x5012))+(((-1.0)*r00*x5010)));
evalcond[3]=((((0.134)*x5009))+(((-1.0)*r10*x5010))+(((-1.0)*py))+(((-0.1)*x5011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5013=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5013;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5013);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5014=((1.0)*cj5);
IkReal x5015=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5014)));
j4eval[0]=x5015;
j4eval[1]=((IKabs(((((-1.0)*r10*x5014))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5016=cj5*cj5;
IkReal x5017=(r01*r11);
IkReal x5018=((1.0)*r00);
IkReal x5019=(r01*sj5);
IkReal x5020=(((x5016*x5017))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5016*x5018))+((cj5*r10*x5019))+(((-1.0)*x5017))+((cj5*r00*r11*sj5)));
j4eval[0]=x5020;
j4eval[1]=IKsign(x5020);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5019))+(((-1.0)*cj0*cj5*x5018))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5021=cj5*cj5;
IkReal x5022=(r01*r11);
IkReal x5023=(cj5*r00);
IkReal x5024=(r01*sj5);
CheckValue<IkReal> x5025 = IKatan2WithCheck(IkReal((((cj0*x5024))+(((-1.0)*cj0*x5023)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5025.valid){
continue;
}
CheckValue<IkReal> x5026=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5024))+((x5021*x5022))+(((-1.0)*r02*r12))+((r11*sj5*x5023))+(((-1.0)*x5022))+(((-1.0)*r00*r10*x5021)))),-1);
if(!x5026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5025.value)+(((1.5707963267949)*(x5026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5027=IKcos(j4);
IkReal x5028=IKsin(j4);
IkReal x5029=(cj5*r00);
IkReal x5030=(r01*sj5);
IkReal x5031=(cj5*r10);
IkReal x5032=(cj5*r20);
IkReal x5033=((1.0)*x5027);
IkReal x5034=((1.0)*x5028);
IkReal x5035=(sj5*x5028);
IkReal x5036=(sj5*x5027);
evalcond[0]=(((r02*x5028))+(((-1.0)*x5029*x5033))+((x5027*x5030)));
evalcond[1]=(((r12*x5028))+((r11*x5036))+(((-1.0)*x5031*x5033)));
evalcond[2]=((((-1.0)*x5032*x5034))+((r21*x5035))+(((-1.0)*r22*x5033)));
evalcond[3]=((1.0)+(((-1.0)*x5032*x5033))+((r22*x5028))+((r21*x5036)));
evalcond[4]=(cj0+((r11*x5035))+(((-1.0)*x5031*x5034))+(((-1.0)*r12*x5033)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5029*x5034))+((x5028*x5030))+(((-1.0)*r02*x5033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5037=((1.0)*cj5);
CheckValue<IkReal> x5038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5037)))),-1);
if(!x5038.valid){
continue;
}
CheckValue<IkReal> x5039 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5037)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5038.value)))+(x5039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5040=IKcos(j4);
IkReal x5041=IKsin(j4);
IkReal x5042=(cj5*r00);
IkReal x5043=(r01*sj5);
IkReal x5044=(cj5*r10);
IkReal x5045=(cj5*r20);
IkReal x5046=((1.0)*x5040);
IkReal x5047=((1.0)*x5041);
IkReal x5048=(sj5*x5041);
IkReal x5049=(sj5*x5040);
evalcond[0]=((((-1.0)*x5042*x5046))+((x5040*x5043))+((r02*x5041)));
evalcond[1]=((((-1.0)*x5044*x5046))+((r12*x5041))+((r11*x5049)));
evalcond[2]=(((r21*x5048))+(((-1.0)*x5045*x5047))+(((-1.0)*r22*x5046)));
evalcond[3]=((1.0)+((r21*x5049))+(((-1.0)*x5045*x5046))+((r22*x5041)));
evalcond[4]=(cj0+(((-1.0)*r12*x5046))+(((-1.0)*x5044*x5047))+((r11*x5048)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5046))+(((-1.0)*x5042*x5047))+((x5041*x5043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5050 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5050.valid){
continue;
}
CheckValue<IkReal> x5051=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5050.value)+(((1.5707963267949)*(x5051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5052=IKcos(j4);
IkReal x5053=IKsin(j4);
IkReal x5054=(cj5*r00);
IkReal x5055=(r01*sj5);
IkReal x5056=(cj5*r10);
IkReal x5057=(cj5*r20);
IkReal x5058=((1.0)*x5052);
IkReal x5059=((1.0)*x5053);
IkReal x5060=(sj5*x5053);
IkReal x5061=(sj5*x5052);
evalcond[0]=((((-1.0)*x5054*x5058))+((x5052*x5055))+((r02*x5053)));
evalcond[1]=(((r12*x5053))+((r11*x5061))+(((-1.0)*x5056*x5058)));
evalcond[2]=((((-1.0)*r22*x5058))+((r21*x5060))+(((-1.0)*x5057*x5059)));
evalcond[3]=((1.0)+((r22*x5053))+((r21*x5061))+(((-1.0)*x5057*x5058)));
evalcond[4]=(cj0+(((-1.0)*r12*x5058))+((r11*x5060))+(((-1.0)*x5056*x5059)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5054*x5059))+((x5053*x5055))+(((-1.0)*r02*x5058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5062=IKcos(j0);
IkReal x5063=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.392)*x5062))+(((-0.134)*x5063)));
evalcond[1]=((((-1.0)*py))+(((-0.392)*x5063))+(((0.134)*x5062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5064=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5064;
j4eval[1]=IKsign(x5064);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5065=((1.0)*cj5);
IkReal x5066=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5065)));
j4eval[0]=x5066;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5065)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5067=cj5*cj5;
IkReal x5068=((1.0)*r20);
IkReal x5069=(r01*r21);
IkReal x5070=(r21*sj5);
IkReal x5071=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5070))+((x5067*x5069))+(((-1.0)*x5069))+(((-1.0)*r00*x5067*x5068)));
j4eval[0]=x5071;
j4eval[1]=((IKabs((((cj0*x5070))+(((-1.0)*cj0*cj5*x5068)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5072=cj5*cj5;
IkReal x5073=((1.0)*r20);
IkReal x5074=(r01*r21);
IkReal x5075=(r21*sj5);
CheckValue<IkReal> x5076=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5075))+(((-1.0)*r00*x5072*x5073))+(((-1.0)*x5074))+((x5072*x5074)))),-1);
if(!x5076.valid){
continue;
}
CheckValue<IkReal> x5077 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5075))+(((-1.0)*cj0*cj5*x5073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5076.value)))+(x5077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5078=IKcos(j4);
IkReal x5079=IKsin(j4);
IkReal x5080=(cj5*r00);
IkReal x5081=(cj5*r10);
IkReal x5082=(cj5*r20);
IkReal x5083=((1.0)*x5078);
IkReal x5084=((1.0)*x5079);
IkReal x5085=(sj5*x5078);
IkReal x5086=(sj5*x5079);
evalcond[0]=(((r21*x5085))+(((-1.0)*x5082*x5083))+((r22*x5079)));
evalcond[1]=(((r21*x5086))+(((-1.0)*x5082*x5084))+(((-1.0)*r22*x5083)));
evalcond[2]=((((-1.0)*x5080*x5083))+cj0+((r01*x5085))+((r02*x5079)));
evalcond[3]=(sj0+((r11*x5085))+(((-1.0)*x5081*x5083))+((r12*x5079)));
evalcond[4]=((((-1.0)*r12*x5083))+cj0+((r11*x5086))+(((-1.0)*x5081*x5084)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5080*x5084))+((r01*x5086))+(((-1.0)*r02*x5083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5087=((1.0)*cj5);
CheckValue<IkReal> x5088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5087))+(((-1.0)*r10*sj5)))),-1);
if(!x5088.valid){
continue;
}
CheckValue<IkReal> x5089 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5087)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5088.value)))+(x5089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5090=IKcos(j4);
IkReal x5091=IKsin(j4);
IkReal x5092=(cj5*r00);
IkReal x5093=(cj5*r10);
IkReal x5094=(cj5*r20);
IkReal x5095=((1.0)*x5090);
IkReal x5096=((1.0)*x5091);
IkReal x5097=(sj5*x5090);
IkReal x5098=(sj5*x5091);
evalcond[0]=(((r21*x5097))+((r22*x5091))+(((-1.0)*x5094*x5095)));
evalcond[1]=((((-1.0)*r22*x5095))+((r21*x5098))+(((-1.0)*x5094*x5096)));
evalcond[2]=(cj0+((r01*x5097))+(((-1.0)*x5092*x5095))+((r02*x5091)));
evalcond[3]=((((-1.0)*x5093*x5095))+sj0+((r11*x5097))+((r12*x5091)));
evalcond[4]=((((-1.0)*x5093*x5096))+cj0+((r11*x5098))+(((-1.0)*r12*x5095)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5098))+(((-1.0)*x5092*x5096))+(((-1.0)*r02*x5095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5099 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5099.valid){
continue;
}
CheckValue<IkReal> x5100=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5099.value)+(((1.5707963267949)*(x5100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5101=IKcos(j4);
IkReal x5102=IKsin(j4);
IkReal x5103=(cj5*r00);
IkReal x5104=(cj5*r10);
IkReal x5105=(cj5*r20);
IkReal x5106=((1.0)*x5101);
IkReal x5107=((1.0)*x5102);
IkReal x5108=(sj5*x5101);
IkReal x5109=(sj5*x5102);
evalcond[0]=(((r22*x5102))+((r21*x5108))+(((-1.0)*x5105*x5106)));
evalcond[1]=((((-1.0)*r22*x5106))+((r21*x5109))+(((-1.0)*x5105*x5107)));
evalcond[2]=(((r01*x5108))+cj0+((r02*x5102))+(((-1.0)*x5103*x5106)));
evalcond[3]=(((r12*x5102))+sj0+(((-1.0)*x5104*x5106))+((r11*x5108)));
evalcond[4]=(cj0+(((-1.0)*x5104*x5107))+((r11*x5109))+(((-1.0)*r12*x5106)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5109))+(((-1.0)*r02*x5106))+(((-1.0)*x5103*x5107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5110=((1.0)*sj5);
IkReal x5111=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5111))+(((-1.0)*r10*x5110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5111))+(((-1.0)*r00*x5110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5111))+(((-1.0)*r10*x5110))))+IKsqr(((((-1.0)*r01*x5111))+(((-1.0)*r00*x5110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5111))+(((-1.0)*r10*x5110))), ((((-1.0)*r01*x5111))+(((-1.0)*r00*x5110))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5112=IKsin(j0);
IkReal x5113=IKcos(j0);
IkReal x5114=(r10*sj5);
IkReal x5115=(r00*sj5);
IkReal x5116=(cj5*r11);
IkReal x5117=(cj5*r01);
evalcond[0]=(x5115+x5117+x5113);
evalcond[1]=(x5114+x5116+x5112);
evalcond[2]=((((-0.1)*x5117))+(((-0.1)*x5115))+(((-0.134)*x5112))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x5116))+(((-0.1)*x5114))+(((-1.0)*py))+(((0.134)*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5118=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5118;
j4eval[1]=IKsign(x5118);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5119=((1.0)*cj5);
IkReal x5120=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5119)));
j4eval[0]=x5120;
j4eval[1]=IKsign(x5120);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5119))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5121=cj5*cj5;
IkReal x5122=(r01*r11);
IkReal x5123=((1.0)*r00);
IkReal x5124=(r01*sj5);
IkReal x5125=((((-1.0)*r10*x5121*x5123))+(((-1.0)*r02*r12))+((cj5*r10*x5124))+(((-1.0)*x5122))+((x5121*x5122))+((cj5*r00*r11*sj5)));
j4eval[0]=x5125;
j4eval[1]=IKsign(x5125);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5124))+(((-1.0)*cj0*cj5*x5123))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5126=cj5*cj5;
IkReal x5127=(r01*r11);
IkReal x5128=(cj5*r00);
IkReal x5129=(r01*sj5);
CheckValue<IkReal> x5130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x5126*x5127))+((cj5*r10*x5129))+(((-1.0)*r00*r10*x5126))+(((-1.0)*x5127))+((r11*sj5*x5128)))),-1);
if(!x5130.valid){
continue;
}
CheckValue<IkReal> x5131 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5128))+((cj0*x5129)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5130.value)))+(x5131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5132=IKcos(j4);
IkReal x5133=IKsin(j4);
IkReal x5134=(cj5*r00);
IkReal x5135=(r01*sj5);
IkReal x5136=(cj5*r10);
IkReal x5137=(cj5*r20);
IkReal x5138=((1.0)*x5132);
IkReal x5139=((1.0)*x5133);
IkReal x5140=(sj5*x5133);
IkReal x5141=(sj5*x5132);
evalcond[0]=(((x5132*x5135))+((r02*x5133))+(((-1.0)*x5134*x5138)));
evalcond[1]=((((-1.0)*x5136*x5138))+((r12*x5133))+((r11*x5141)));
evalcond[2]=(((r21*x5140))+(((-1.0)*x5137*x5139))+(((-1.0)*r22*x5138)));
evalcond[3]=((-1.0)+((r21*x5141))+((r22*x5133))+(((-1.0)*x5137*x5138)));
evalcond[4]=(cj0+(((-1.0)*x5136*x5139))+((r11*x5140))+(((-1.0)*r12*x5138)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5138))+((x5133*x5135))+(((-1.0)*x5134*x5139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5142=((1.0)*cj5);
CheckValue<IkReal> x5143 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5142)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5143.valid){
continue;
}
CheckValue<IkReal> x5144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5142)))),-1);
if(!x5144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5143.value)+(((1.5707963267949)*(x5144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5145=IKcos(j4);
IkReal x5146=IKsin(j4);
IkReal x5147=(cj5*r00);
IkReal x5148=(r01*sj5);
IkReal x5149=(cj5*r10);
IkReal x5150=(cj5*r20);
IkReal x5151=((1.0)*x5145);
IkReal x5152=((1.0)*x5146);
IkReal x5153=(sj5*x5146);
IkReal x5154=(sj5*x5145);
evalcond[0]=(((x5145*x5148))+((r02*x5146))+(((-1.0)*x5147*x5151)));
evalcond[1]=(((r11*x5154))+((r12*x5146))+(((-1.0)*x5149*x5151)));
evalcond[2]=(((r21*x5153))+(((-1.0)*r22*x5151))+(((-1.0)*x5150*x5152)));
evalcond[3]=((-1.0)+((r21*x5154))+(((-1.0)*x5150*x5151))+((r22*x5146)));
evalcond[4]=(((r11*x5153))+cj0+(((-1.0)*r12*x5151))+(((-1.0)*x5149*x5152)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5147*x5152))+((x5146*x5148))+(((-1.0)*r02*x5151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5155=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5155.valid){
continue;
}
CheckValue<IkReal> x5156 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5155.value)))+(x5156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5157=IKcos(j4);
IkReal x5158=IKsin(j4);
IkReal x5159=(cj5*r00);
IkReal x5160=(r01*sj5);
IkReal x5161=(cj5*r10);
IkReal x5162=(cj5*r20);
IkReal x5163=((1.0)*x5157);
IkReal x5164=((1.0)*x5158);
IkReal x5165=(sj5*x5158);
IkReal x5166=(sj5*x5157);
evalcond[0]=((((-1.0)*x5159*x5163))+((r02*x5158))+((x5157*x5160)));
evalcond[1]=(((r12*x5158))+(((-1.0)*x5161*x5163))+((r11*x5166)));
evalcond[2]=((((-1.0)*r22*x5163))+((r21*x5165))+(((-1.0)*x5162*x5164)));
evalcond[3]=((-1.0)+((r21*x5166))+(((-1.0)*x5162*x5163))+((r22*x5158)));
evalcond[4]=(cj0+(((-1.0)*r12*x5163))+(((-1.0)*x5161*x5164))+((r11*x5165)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5163))+(((-1.0)*x5159*x5164))+((x5158*x5160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5167=IKsin(j0);
IkReal x5168=IKcos(j0);
evalcond[0]=((((0.392)*x5168))+(((-1.0)*px))+(((-0.134)*x5167)));
evalcond[1]=((((0.392)*x5167))+(((-1.0)*py))+(((0.134)*x5168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5169=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5169;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5170=((1.0)*cj5);
IkReal x5171=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5170)));
j4eval[0]=x5171;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5170)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5172=((1.0)*cj5);
IkReal x5173=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5172)));
j4eval[0]=x5173;
j4eval[1]=IKsign(x5173);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5172))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5174=((1.0)*cj5);
CheckValue<IkReal> x5175 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5174))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5175.valid){
continue;
}
CheckValue<IkReal> x5176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5174)))),-1);
if(!x5176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5175.value)+(((1.5707963267949)*(x5176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5177=IKcos(j4);
IkReal x5178=IKsin(j4);
IkReal x5179=((1.0)*sj0);
IkReal x5180=(cj5*r00);
IkReal x5181=(cj5*r10);
IkReal x5182=(cj5*r20);
IkReal x5183=((1.0)*x5177);
IkReal x5184=((1.0)*x5178);
IkReal x5185=(sj5*x5177);
IkReal x5186=(sj5*x5178);
evalcond[0]=((((-1.0)*x5182*x5183))+((r21*x5185))+((r22*x5178)));
evalcond[1]=((((-1.0)*r22*x5183))+(((-1.0)*x5182*x5184))+((r21*x5186)));
evalcond[2]=(cj0+(((-1.0)*r12*x5183))+((r11*x5186))+(((-1.0)*x5181*x5184)));
evalcond[3]=(((r01*x5185))+((r02*x5178))+(((-1.0)*x5180*x5183))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5179))+((r12*x5178))+((r11*x5185))+(((-1.0)*x5181*x5183)));
evalcond[5]=((((-1.0)*r02*x5183))+((r01*x5186))+(((-1.0)*x5179))+(((-1.0)*x5180*x5184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5187=((1.0)*cj5);
CheckValue<IkReal> x5188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5187)))),-1);
if(!x5188.valid){
continue;
}
CheckValue<IkReal> x5189 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5188.value)))+(x5189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5190=IKcos(j4);
IkReal x5191=IKsin(j4);
IkReal x5192=((1.0)*sj0);
IkReal x5193=(cj5*r00);
IkReal x5194=(cj5*r10);
IkReal x5195=(cj5*r20);
IkReal x5196=((1.0)*x5190);
IkReal x5197=((1.0)*x5191);
IkReal x5198=(sj5*x5190);
IkReal x5199=(sj5*x5191);
evalcond[0]=(((r21*x5198))+((r22*x5191))+(((-1.0)*x5195*x5196)));
evalcond[1]=(((r21*x5199))+(((-1.0)*r22*x5196))+(((-1.0)*x5195*x5197)));
evalcond[2]=((((-1.0)*r12*x5196))+cj0+((r11*x5199))+(((-1.0)*x5194*x5197)));
evalcond[3]=(((r02*x5191))+(((-1.0)*x5193*x5196))+((r01*x5198))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5198))+(((-1.0)*x5192))+((r12*x5191))+(((-1.0)*x5194*x5196)));
evalcond[5]=((((-1.0)*x5192))+(((-1.0)*x5193*x5197))+(((-1.0)*r02*x5196))+((r01*x5199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5200 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5200.valid){
continue;
}
CheckValue<IkReal> x5201=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5200.value)+(((1.5707963267949)*(x5201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5202=IKcos(j4);
IkReal x5203=IKsin(j4);
IkReal x5204=((1.0)*sj0);
IkReal x5205=(cj5*r00);
IkReal x5206=(cj5*r10);
IkReal x5207=(cj5*r20);
IkReal x5208=((1.0)*x5202);
IkReal x5209=((1.0)*x5203);
IkReal x5210=(sj5*x5202);
IkReal x5211=(sj5*x5203);
evalcond[0]=(((r22*x5203))+(((-1.0)*x5207*x5208))+((r21*x5210)));
evalcond[1]=((((-1.0)*r22*x5208))+(((-1.0)*x5207*x5209))+((r21*x5211)));
evalcond[2]=((((-1.0)*x5206*x5209))+cj0+((r11*x5211))+(((-1.0)*r12*x5208)));
evalcond[3]=(((r01*x5210))+(((-1.0)*x5205*x5208))+((r02*x5203))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5204))+(((-1.0)*x5206*x5208))+((r11*x5210))+((r12*x5203)));
evalcond[5]=((((-1.0)*x5204))+((r01*x5211))+(((-1.0)*r02*x5208))+(((-1.0)*x5205*x5209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5212=IKcos(j0);
IkReal x5213=IKsin(j0);
evalcond[0]=((((-0.134)*x5213))+(((-1.0)*px))+(((-0.817)*x5212)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5212))+(((-0.817)*x5213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5214=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5214;
j4eval[1]=IKsign(x5214);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5215=((1.0)*cj5);
IkReal x5216=((((-1.0)*r11*x5215))+(((-1.0)*r10*sj5)));
j4eval[0]=x5216;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5215)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5217=cj5*cj5;
IkReal x5218=((1.0)*r20);
IkReal x5219=(r01*r21);
IkReal x5220=(r21*sj5);
IkReal x5221=(((cj5*r01*r20*sj5))+((x5217*x5219))+(((-1.0)*r02*r22))+((cj5*r00*x5220))+(((-1.0)*r00*x5217*x5218))+(((-1.0)*x5219)));
j4eval[0]=x5221;
j4eval[1]=((IKabs((((cj0*x5220))+(((-1.0)*cj0*cj5*x5218)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5222=cj5*cj5;
IkReal x5223=((1.0)*r20);
IkReal x5224=(r01*r21);
IkReal x5225=(r21*sj5);
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5223))+((cj0*x5225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5225))+((x5222*x5224))+(((-1.0)*r00*x5222*x5223))+(((-1.0)*x5224)))),-1);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5226.value)+(((1.5707963267949)*(x5227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5228=IKcos(j4);
IkReal x5229=IKsin(j4);
IkReal x5230=(cj5*r00);
IkReal x5231=(cj5*r10);
IkReal x5232=(cj5*r20);
IkReal x5233=((1.0)*x5228);
IkReal x5234=((1.0)*x5229);
IkReal x5235=(sj5*x5228);
IkReal x5236=(sj5*x5229);
evalcond[0]=(((r22*x5229))+(((-1.0)*x5232*x5233))+((r21*x5235)));
evalcond[1]=((((-1.0)*r22*x5233))+(((-1.0)*x5232*x5234))+((r21*x5236)));
evalcond[2]=(cj0+((r02*x5229))+((r01*x5235))+(((-1.0)*x5230*x5233)));
evalcond[3]=(sj0+((r11*x5235))+(((-1.0)*x5231*x5233))+((r12*x5229)));
evalcond[4]=(cj0+((r11*x5236))+(((-1.0)*r12*x5233))+(((-1.0)*x5231*x5234)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5233))+((r01*x5236))+(((-1.0)*x5230*x5234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5237=((1.0)*cj5);
CheckValue<IkReal> x5238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5237))+(((-1.0)*r10*sj5)))),-1);
if(!x5238.valid){
continue;
}
CheckValue<IkReal> x5239 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5237))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5238.value)))+(x5239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5240=IKcos(j4);
IkReal x5241=IKsin(j4);
IkReal x5242=(cj5*r00);
IkReal x5243=(cj5*r10);
IkReal x5244=(cj5*r20);
IkReal x5245=((1.0)*x5240);
IkReal x5246=((1.0)*x5241);
IkReal x5247=(sj5*x5240);
IkReal x5248=(sj5*x5241);
evalcond[0]=(((r21*x5247))+((r22*x5241))+(((-1.0)*x5244*x5245)));
evalcond[1]=((((-1.0)*r22*x5245))+((r21*x5248))+(((-1.0)*x5244*x5246)));
evalcond[2]=(cj0+(((-1.0)*x5242*x5245))+((r01*x5247))+((r02*x5241)));
evalcond[3]=(sj0+((r11*x5247))+(((-1.0)*x5243*x5245))+((r12*x5241)));
evalcond[4]=((((-1.0)*r12*x5245))+((r11*x5248))+cj0+(((-1.0)*x5243*x5246)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5242*x5246))+((r01*x5248))+(((-1.0)*r02*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5249 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5249.valid){
continue;
}
CheckValue<IkReal> x5250=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5249.value)+(((1.5707963267949)*(x5250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5251=IKcos(j4);
IkReal x5252=IKsin(j4);
IkReal x5253=(cj5*r00);
IkReal x5254=(cj5*r10);
IkReal x5255=(cj5*r20);
IkReal x5256=((1.0)*x5251);
IkReal x5257=((1.0)*x5252);
IkReal x5258=(sj5*x5251);
IkReal x5259=(sj5*x5252);
evalcond[0]=(((r22*x5252))+(((-1.0)*x5255*x5256))+((r21*x5258)));
evalcond[1]=((((-1.0)*x5255*x5257))+((r21*x5259))+(((-1.0)*r22*x5256)));
evalcond[2]=(((r01*x5258))+cj0+(((-1.0)*x5253*x5256))+((r02*x5252)));
evalcond[3]=(sj0+((r12*x5252))+(((-1.0)*x5254*x5256))+((r11*x5258)));
evalcond[4]=(cj0+(((-1.0)*x5254*x5257))+(((-1.0)*r12*x5256))+((r11*x5259)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5256))+((r01*x5259))+(((-1.0)*x5253*x5257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5260=IKcos(j0);
IkReal x5261=IKsin(j0);
evalcond[0]=((((-0.033)*x5260))+(((-0.134)*x5261))+(((-1.0)*px)));
evalcond[1]=((((-0.033)*x5261))+(((-1.0)*py))+(((0.134)*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5262=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5262;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5263=((1.0)*cj5);
IkReal x5264=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5263)));
j4eval[0]=x5264;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5263)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5265=((1.0)*cj5);
IkReal x5266=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5265)));
j4eval[0]=x5266;
j4eval[1]=IKsign(x5266);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5265))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5267=((1.0)*cj5);
CheckValue<IkReal> x5268 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5267))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5268.valid){
continue;
}
CheckValue<IkReal> x5269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5267)))),-1);
if(!x5269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5268.value)+(((1.5707963267949)*(x5269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5270=IKcos(j4);
IkReal x5271=IKsin(j4);
IkReal x5272=((1.0)*sj0);
IkReal x5273=(cj5*r00);
IkReal x5274=(cj5*r10);
IkReal x5275=(cj5*r20);
IkReal x5276=((1.0)*x5270);
IkReal x5277=((1.0)*x5271);
IkReal x5278=(sj5*x5270);
IkReal x5279=(sj5*x5271);
evalcond[0]=(((r22*x5271))+((r21*x5278))+(((-1.0)*x5275*x5276)));
evalcond[1]=(((r21*x5279))+(((-1.0)*x5275*x5277))+(((-1.0)*r22*x5276)));
evalcond[2]=(cj0+(((-1.0)*x5274*x5277))+(((-1.0)*r12*x5276))+((r11*x5279)));
evalcond[3]=(((r02*x5271))+((r01*x5278))+(((-1.0)*x5273*x5276))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5274*x5276))+(((-1.0)*x5272))+((r11*x5278))+((r12*x5271)));
evalcond[5]=((((-1.0)*x5272))+((r01*x5279))+(((-1.0)*r02*x5276))+(((-1.0)*x5273*x5277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5280=((1.0)*cj5);
CheckValue<IkReal> x5281 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5281.valid){
continue;
}
CheckValue<IkReal> x5282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5280))+(((-1.0)*r00*sj5)))),-1);
if(!x5282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5281.value)+(((1.5707963267949)*(x5282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5283=IKcos(j4);
IkReal x5284=IKsin(j4);
IkReal x5285=((1.0)*sj0);
IkReal x5286=(cj5*r00);
IkReal x5287=(cj5*r10);
IkReal x5288=(cj5*r20);
IkReal x5289=((1.0)*x5283);
IkReal x5290=((1.0)*x5284);
IkReal x5291=(sj5*x5283);
IkReal x5292=(sj5*x5284);
evalcond[0]=(((r22*x5284))+(((-1.0)*x5288*x5289))+((r21*x5291)));
evalcond[1]=((((-1.0)*r22*x5289))+(((-1.0)*x5288*x5290))+((r21*x5292)));
evalcond[2]=((((-1.0)*x5287*x5290))+cj0+(((-1.0)*r12*x5289))+((r11*x5292)));
evalcond[3]=(((r02*x5284))+(((-1.0)*x5286*x5289))+((r01*x5291))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5287*x5289))+((r12*x5284))+(((-1.0)*x5285))+((r11*x5291)));
evalcond[5]=((((-1.0)*x5286*x5290))+(((-1.0)*x5285))+(((-1.0)*r02*x5289))+((r01*x5292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5293 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5293.valid){
continue;
}
CheckValue<IkReal> x5294=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5293.value)+(((1.5707963267949)*(x5294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5295=IKcos(j4);
IkReal x5296=IKsin(j4);
IkReal x5297=((1.0)*sj0);
IkReal x5298=(cj5*r00);
IkReal x5299=(cj5*r10);
IkReal x5300=(cj5*r20);
IkReal x5301=((1.0)*x5295);
IkReal x5302=((1.0)*x5296);
IkReal x5303=(sj5*x5295);
IkReal x5304=(sj5*x5296);
evalcond[0]=(((r21*x5303))+((r22*x5296))+(((-1.0)*x5300*x5301)));
evalcond[1]=((((-1.0)*r22*x5301))+((r21*x5304))+(((-1.0)*x5300*x5302)));
evalcond[2]=(cj0+(((-1.0)*r12*x5301))+((r11*x5304))+(((-1.0)*x5299*x5302)));
evalcond[3]=(((r02*x5296))+(((-1.0)*x5298*x5301))+((r01*x5303))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5296))+(((-1.0)*x5297))+((r11*x5303))+(((-1.0)*x5299*x5301)));
evalcond[5]=((((-1.0)*x5297))+(((-1.0)*r02*x5301))+(((-1.0)*x5298*x5302))+((r01*x5304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5305=((1.0)*sj5);
IkReal x5306=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5306))+(((-1.0)*r10*x5305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5306))+(((-1.0)*r00*x5305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5306))+(((-1.0)*r10*x5305))))+IKsqr(((((-1.0)*r01*x5306))+(((-1.0)*r00*x5305))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5306))+(((-1.0)*r10*x5305))), ((((-1.0)*r01*x5306))+(((-1.0)*r00*x5305))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5307=IKsin(j0);
IkReal x5308=IKcos(j0);
IkReal x5309=(r10*sj5);
IkReal x5310=(r00*sj5);
IkReal x5311=(cj5*r11);
IkReal x5312=(cj5*r01);
evalcond[0]=(x5308+x5312+x5310);
evalcond[1]=(x5309+x5307+x5311);
evalcond[2]=((((-0.1)*x5310))+(((-0.1)*x5312))+(((-1.0)*px))+(((-0.134)*x5307)));
evalcond[3]=((((-0.1)*x5309))+(((-0.1)*x5311))+(((-1.0)*py))+(((0.134)*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5313=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5313;
j4eval[1]=IKsign(x5313);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5314=((1.0)*cj5);
IkReal x5315=((((-1.0)*r11*x5314))+(((-1.0)*r10*sj5)));
j4eval[0]=x5315;
j4eval[1]=IKsign(x5315);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5314))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5316=cj5*cj5;
IkReal x5317=(r01*r11);
IkReal x5318=((1.0)*r00);
IkReal x5319=(r01*sj5);
IkReal x5320=(((cj5*r10*x5319))+(((-1.0)*r10*x5316*x5318))+(((-1.0)*r02*r12))+((x5316*x5317))+(((-1.0)*x5317))+((cj5*r00*r11*sj5)));
j4eval[0]=x5320;
j4eval[1]=IKsign(x5320);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5319))+(((-1.0)*cj0*cj5*x5318))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5321=cj5*cj5;
IkReal x5322=(r01*r11);
IkReal x5323=(cj5*r00);
IkReal x5324=(r01*sj5);
CheckValue<IkReal> x5325=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5322))+(((-1.0)*r00*r10*x5321))+(((-1.0)*r02*r12))+((x5321*x5322))+((r11*sj5*x5323))+((cj5*r10*x5324)))),-1);
if(!x5325.valid){
continue;
}
CheckValue<IkReal> x5326 = IKatan2WithCheck(IkReal((((cj0*x5324))+(((-1.0)*cj0*x5323)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5325.value)))+(x5326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5327=IKcos(j4);
IkReal x5328=IKsin(j4);
IkReal x5329=(cj5*r00);
IkReal x5330=(r01*sj5);
IkReal x5331=(cj5*r10);
IkReal x5332=(cj5*r20);
IkReal x5333=((1.0)*x5327);
IkReal x5334=((1.0)*x5328);
IkReal x5335=(sj5*x5328);
IkReal x5336=(sj5*x5327);
evalcond[0]=(((x5327*x5330))+(((-1.0)*x5329*x5333))+((r02*x5328)));
evalcond[1]=((((-1.0)*x5331*x5333))+((r11*x5336))+((r12*x5328)));
evalcond[2]=((((-1.0)*r22*x5333))+(((-1.0)*x5332*x5334))+((r21*x5335)));
evalcond[3]=((-1.0)+(((-1.0)*x5332*x5333))+((r22*x5328))+((r21*x5336)));
evalcond[4]=((((-1.0)*x5331*x5334))+cj0+((r11*x5335))+(((-1.0)*r12*x5333)));
evalcond[5]=(((x5328*x5330))+(((-1.0)*sj0))+(((-1.0)*r02*x5333))+(((-1.0)*x5329*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5337=((1.0)*cj5);
CheckValue<IkReal> x5338 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5337))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5338.valid){
continue;
}
CheckValue<IkReal> x5339=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5337)))),-1);
if(!x5339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5338.value)+(((1.5707963267949)*(x5339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5340=IKcos(j4);
IkReal x5341=IKsin(j4);
IkReal x5342=(cj5*r00);
IkReal x5343=(r01*sj5);
IkReal x5344=(cj5*r10);
IkReal x5345=(cj5*r20);
IkReal x5346=((1.0)*x5340);
IkReal x5347=((1.0)*x5341);
IkReal x5348=(sj5*x5341);
IkReal x5349=(sj5*x5340);
evalcond[0]=(((r02*x5341))+(((-1.0)*x5342*x5346))+((x5340*x5343)));
evalcond[1]=((((-1.0)*x5344*x5346))+((r12*x5341))+((r11*x5349)));
evalcond[2]=((((-1.0)*x5345*x5347))+(((-1.0)*r22*x5346))+((r21*x5348)));
evalcond[3]=((-1.0)+(((-1.0)*x5345*x5346))+((r22*x5341))+((r21*x5349)));
evalcond[4]=(cj0+(((-1.0)*x5344*x5347))+((r11*x5348))+(((-1.0)*r12*x5346)));
evalcond[5]=((((-1.0)*r02*x5346))+(((-1.0)*sj0))+((x5341*x5343))+(((-1.0)*x5342*x5347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5350=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5350.valid){
continue;
}
CheckValue<IkReal> x5351 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5350.value)))+(x5351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5352=IKcos(j4);
IkReal x5353=IKsin(j4);
IkReal x5354=(cj5*r00);
IkReal x5355=(r01*sj5);
IkReal x5356=(cj5*r10);
IkReal x5357=(cj5*r20);
IkReal x5358=((1.0)*x5352);
IkReal x5359=((1.0)*x5353);
IkReal x5360=(sj5*x5353);
IkReal x5361=(sj5*x5352);
evalcond[0]=((((-1.0)*x5354*x5358))+((x5352*x5355))+((r02*x5353)));
evalcond[1]=((((-1.0)*x5356*x5358))+((r12*x5353))+((r11*x5361)));
evalcond[2]=((((-1.0)*x5357*x5359))+((r21*x5360))+(((-1.0)*r22*x5358)));
evalcond[3]=((-1.0)+(((-1.0)*x5357*x5358))+((r22*x5353))+((r21*x5361)));
evalcond[4]=(cj0+(((-1.0)*x5356*x5359))+(((-1.0)*r12*x5358))+((r11*x5360)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5358))+((x5353*x5355))+(((-1.0)*x5354*x5359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5362=IKsin(j0);
IkReal x5363=IKcos(j0);
evalcond[0]=((((-0.134)*x5362))+(((-1.0)*px))+(((0.392)*x5363)));
evalcond[1]=((((-1.0)*py))+(((0.392)*x5362))+(((0.134)*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5364=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5364;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5365=((1.0)*cj5);
IkReal x5366=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5365)));
j4eval[0]=x5366;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5365))))));
j4eval[2]=IKsign(x5366);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5367=((1.0)*cj5);
IkReal x5368=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5367)));
j4eval[0]=x5368;
j4eval[1]=IKsign(x5368);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5367))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5369=((1.0)*cj5);
CheckValue<IkReal> x5370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5369)))),-1);
if(!x5370.valid){
continue;
}
CheckValue<IkReal> x5371 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5369)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5370.value)))+(x5371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5372=IKcos(j4);
IkReal x5373=IKsin(j4);
IkReal x5374=((1.0)*sj0);
IkReal x5375=(cj5*r00);
IkReal x5376=(cj5*r10);
IkReal x5377=(cj5*r20);
IkReal x5378=((1.0)*x5372);
IkReal x5379=((1.0)*x5373);
IkReal x5380=(sj5*x5372);
IkReal x5381=(sj5*x5373);
evalcond[0]=(((r22*x5373))+(((-1.0)*x5377*x5378))+((r21*x5380)));
evalcond[1]=((((-1.0)*r22*x5378))+(((-1.0)*x5377*x5379))+((r21*x5381)));
evalcond[2]=(cj0+(((-1.0)*r12*x5378))+(((-1.0)*x5376*x5379))+((r11*x5381)));
evalcond[3]=(((r02*x5373))+(((-1.0)*x5375*x5378))+((r01*x5380))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5374))+(((-1.0)*x5376*x5378))+((r11*x5380))+((r12*x5373)));
evalcond[5]=((((-1.0)*x5374))+(((-1.0)*x5375*x5379))+(((-1.0)*r02*x5378))+((r01*x5381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5382=((1.0)*cj5);
CheckValue<IkReal> x5383 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5383.valid){
continue;
}
CheckValue<IkReal> x5384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5382)))),-1);
if(!x5384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5383.value)+(((1.5707963267949)*(x5384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5385=IKcos(j4);
IkReal x5386=IKsin(j4);
IkReal x5387=((1.0)*sj0);
IkReal x5388=(cj5*r00);
IkReal x5389=(cj5*r10);
IkReal x5390=(cj5*r20);
IkReal x5391=((1.0)*x5385);
IkReal x5392=((1.0)*x5386);
IkReal x5393=(sj5*x5385);
IkReal x5394=(sj5*x5386);
evalcond[0]=((((-1.0)*x5390*x5391))+((r21*x5393))+((r22*x5386)));
evalcond[1]=((((-1.0)*x5390*x5392))+(((-1.0)*r22*x5391))+((r21*x5394)));
evalcond[2]=(cj0+(((-1.0)*x5389*x5392))+((r11*x5394))+(((-1.0)*r12*x5391)));
evalcond[3]=((((-1.0)*x5388*x5391))+((r02*x5386))+((r01*x5393))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5389*x5391))+((r11*x5393))+((r12*x5386))+(((-1.0)*x5387)));
evalcond[5]=((((-1.0)*x5388*x5392))+(((-1.0)*r02*x5391))+((r01*x5394))+(((-1.0)*x5387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5395 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5395.valid){
continue;
}
CheckValue<IkReal> x5396=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5395.value)+(((1.5707963267949)*(x5396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5397=IKcos(j4);
IkReal x5398=IKsin(j4);
IkReal x5399=((1.0)*sj0);
IkReal x5400=(cj5*r00);
IkReal x5401=(cj5*r10);
IkReal x5402=(cj5*r20);
IkReal x5403=((1.0)*x5397);
IkReal x5404=((1.0)*x5398);
IkReal x5405=(sj5*x5397);
IkReal x5406=(sj5*x5398);
evalcond[0]=(((r21*x5405))+((r22*x5398))+(((-1.0)*x5402*x5403)));
evalcond[1]=(((r21*x5406))+(((-1.0)*x5402*x5404))+(((-1.0)*r22*x5403)));
evalcond[2]=(cj0+(((-1.0)*r12*x5403))+((r11*x5406))+(((-1.0)*x5401*x5404)));
evalcond[3]=((((-1.0)*x5400*x5403))+((r02*x5398))+((r01*x5405))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5398))+(((-1.0)*x5399))+((r11*x5405))+(((-1.0)*x5401*x5403)));
evalcond[5]=((((-1.0)*x5400*x5404))+(((-1.0)*r02*x5403))+(((-1.0)*x5399))+((r01*x5406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5407=IKsin(j0);
IkReal x5408=IKcos(j0);
IkReal x5409=((0.1)*sj5);
IkReal x5410=(cj5*r11);
IkReal x5411=(cj5*r01);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5408))+x5411);
evalcond[1]=((((-1.0)*x5407))+x5410+((r10*sj5)));
evalcond[2]=((((-1.0)*r00*x5409))+(((-1.0)*px))+(((-0.1)*x5411))+(((-0.134)*x5407)));
evalcond[3]=((((-1.0)*py))+(((0.134)*x5408))+(((-0.1)*x5410))+(((-1.0)*r10*x5409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5412=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5412;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5413=((1.0)*cj5);
IkReal x5414=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5413)));
j4eval[0]=x5414;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5413))+((r11*sj5))))));
j4eval[2]=IKsign(x5414);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5415=cj5*cj5;
IkReal x5416=(r01*r11);
IkReal x5417=((1.0)*r00);
IkReal x5418=(r01*sj5);
IkReal x5419=((((-1.0)*x5416))+((cj5*r10*x5418))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5415*x5417))+((x5415*x5416))+((cj5*r00*r11*sj5)));
j4eval[0]=x5419;
j4eval[1]=IKsign(x5419);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5417))+((cj0*x5418))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5420=cj5*cj5;
IkReal x5421=(r01*r11);
IkReal x5422=(cj5*r00);
IkReal x5423=(r01*sj5);
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5422))+((cj0*x5423)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
CheckValue<IkReal> x5425=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5422))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5420))+((cj5*r10*x5423))+((x5420*x5421))+(((-1.0)*x5421)))),-1);
if(!x5425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5424.value)+(((1.5707963267949)*(x5425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5426=IKcos(j4);
IkReal x5427=IKsin(j4);
IkReal x5428=(cj5*r00);
IkReal x5429=(r01*sj5);
IkReal x5430=(cj5*r10);
IkReal x5431=(cj5*r20);
IkReal x5432=((1.0)*x5426);
IkReal x5433=((1.0)*x5427);
IkReal x5434=(sj5*x5427);
IkReal x5435=(sj5*x5426);
evalcond[0]=((((-1.0)*x5428*x5432))+((x5426*x5429))+((r02*x5427)));
evalcond[1]=(((r12*x5427))+(((-1.0)*x5430*x5432))+((r11*x5435)));
evalcond[2]=((((-1.0)*x5431*x5433))+(((-1.0)*r22*x5432))+((r21*x5434)));
evalcond[3]=((1.0)+(((-1.0)*x5431*x5432))+((r22*x5427))+((r21*x5435)));
evalcond[4]=(cj0+(((-1.0)*r12*x5432))+(((-1.0)*x5430*x5433))+((r11*x5434)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5428*x5433))+(((-1.0)*r02*x5432))+((x5427*x5429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5436=((1.0)*cj5);
CheckValue<IkReal> x5437 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5436)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5437.valid){
continue;
}
CheckValue<IkReal> x5438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5436))+(((-1.0)*r00*sj5)))),-1);
if(!x5438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5437.value)+(((1.5707963267949)*(x5438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5439=IKcos(j4);
IkReal x5440=IKsin(j4);
IkReal x5441=(cj5*r00);
IkReal x5442=(r01*sj5);
IkReal x5443=(cj5*r10);
IkReal x5444=(cj5*r20);
IkReal x5445=((1.0)*x5439);
IkReal x5446=((1.0)*x5440);
IkReal x5447=(sj5*x5440);
IkReal x5448=(sj5*x5439);
evalcond[0]=(((x5439*x5442))+(((-1.0)*x5441*x5445))+((r02*x5440)));
evalcond[1]=((((-1.0)*x5443*x5445))+((r12*x5440))+((r11*x5448)));
evalcond[2]=((((-1.0)*x5444*x5446))+(((-1.0)*r22*x5445))+((r21*x5447)));
evalcond[3]=((1.0)+(((-1.0)*x5444*x5445))+((r22*x5440))+((r21*x5448)));
evalcond[4]=(cj0+(((-1.0)*r12*x5445))+(((-1.0)*x5443*x5446))+((r11*x5447)));
evalcond[5]=(((x5440*x5442))+(((-1.0)*sj0))+(((-1.0)*x5441*x5446))+(((-1.0)*r02*x5445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5449 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5449.valid){
continue;
}
CheckValue<IkReal> x5450=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5449.value)+(((1.5707963267949)*(x5450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5451=IKcos(j4);
IkReal x5452=IKsin(j4);
IkReal x5453=(cj5*r00);
IkReal x5454=(r01*sj5);
IkReal x5455=(cj5*r10);
IkReal x5456=(cj5*r20);
IkReal x5457=((1.0)*x5451);
IkReal x5458=((1.0)*x5452);
IkReal x5459=(sj5*x5452);
IkReal x5460=(sj5*x5451);
evalcond[0]=(((r02*x5452))+(((-1.0)*x5453*x5457))+((x5451*x5454)));
evalcond[1]=((((-1.0)*x5455*x5457))+((r12*x5452))+((r11*x5460)));
evalcond[2]=(((r21*x5459))+(((-1.0)*x5456*x5458))+(((-1.0)*r22*x5457)));
evalcond[3]=((1.0)+((r22*x5452))+(((-1.0)*x5456*x5457))+((r21*x5460)));
evalcond[4]=((((-1.0)*r12*x5457))+(((-1.0)*x5455*x5458))+cj0+((r11*x5459)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5457))+((x5452*x5454))+(((-1.0)*x5453*x5458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5461=IKcos(j0);
IkReal x5462=IKsin(j0);
evalcond[0]=((((-0.392)*x5461))+(((-1.0)*px))+(((-0.134)*x5462)));
evalcond[1]=((((-0.392)*x5462))+(((-1.0)*py))+(((0.134)*x5461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5463=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5463;
j4eval[1]=IKsign(x5463);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5464=((1.0)*cj5);
IkReal x5465=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5464)));
j4eval[0]=x5465;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5464))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5466=cj5*cj5;
IkReal x5467=((1.0)*r20);
IkReal x5468=(r01*r21);
IkReal x5469=(r21*sj5);
IkReal x5470=(((cj5*r01*r20*sj5))+((x5466*x5468))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5466*x5467))+(((-1.0)*x5468))+((cj5*r00*x5469)));
j4eval[0]=x5470;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5467))+((cj0*x5469)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5471=cj5*cj5;
IkReal x5472=((1.0)*r20);
IkReal x5473=(r01*r21);
IkReal x5474=(r21*sj5);
CheckValue<IkReal> x5475=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5473))+(((-1.0)*r00*x5471*x5472))+(((-1.0)*r02*r22))+((x5471*x5473))+((cj5*r00*x5474)))),-1);
if(!x5475.valid){
continue;
}
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5472))+((cj0*x5474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5475.value)))+(x5476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5477=IKcos(j4);
IkReal x5478=IKsin(j4);
IkReal x5479=(cj5*r00);
IkReal x5480=(cj5*r10);
IkReal x5481=(cj5*r20);
IkReal x5482=((1.0)*x5477);
IkReal x5483=((1.0)*x5478);
IkReal x5484=(sj5*x5477);
IkReal x5485=(sj5*x5478);
evalcond[0]=((((-1.0)*x5481*x5482))+((r21*x5484))+((r22*x5478)));
evalcond[1]=((((-1.0)*x5481*x5483))+(((-1.0)*r22*x5482))+((r21*x5485)));
evalcond[2]=((((-1.0)*x5479*x5482))+cj0+((r01*x5484))+((r02*x5478)));
evalcond[3]=(sj0+((r11*x5484))+((r12*x5478))+(((-1.0)*x5480*x5482)));
evalcond[4]=((((-1.0)*r12*x5482))+cj0+((r11*x5485))+(((-1.0)*x5480*x5483)));
evalcond[5]=((((-1.0)*x5479*x5483))+(((-1.0)*sj0))+((r01*x5485))+(((-1.0)*r02*x5482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5486=((1.0)*cj5);
CheckValue<IkReal> x5487 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5486)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5487.valid){
continue;
}
CheckValue<IkReal> x5488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5486))+(((-1.0)*r10*sj5)))),-1);
if(!x5488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5487.value)+(((1.5707963267949)*(x5488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5489=IKcos(j4);
IkReal x5490=IKsin(j4);
IkReal x5491=(cj5*r00);
IkReal x5492=(cj5*r10);
IkReal x5493=(cj5*r20);
IkReal x5494=((1.0)*x5489);
IkReal x5495=((1.0)*x5490);
IkReal x5496=(sj5*x5489);
IkReal x5497=(sj5*x5490);
evalcond[0]=(((r21*x5496))+(((-1.0)*x5493*x5494))+((r22*x5490)));
evalcond[1]=(((r21*x5497))+(((-1.0)*r22*x5494))+(((-1.0)*x5493*x5495)));
evalcond[2]=(((r01*x5496))+cj0+(((-1.0)*x5491*x5494))+((r02*x5490)));
evalcond[3]=(sj0+((r12*x5490))+((r11*x5496))+(((-1.0)*x5492*x5494)));
evalcond[4]=(cj0+(((-1.0)*r12*x5494))+((r11*x5497))+(((-1.0)*x5492*x5495)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5497))+(((-1.0)*x5491*x5495))+(((-1.0)*r02*x5494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5498 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5498.valid){
continue;
}
CheckValue<IkReal> x5499=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5498.value)+(((1.5707963267949)*(x5499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5500=IKcos(j4);
IkReal x5501=IKsin(j4);
IkReal x5502=(cj5*r00);
IkReal x5503=(cj5*r10);
IkReal x5504=(cj5*r20);
IkReal x5505=((1.0)*x5500);
IkReal x5506=((1.0)*x5501);
IkReal x5507=(sj5*x5500);
IkReal x5508=(sj5*x5501);
evalcond[0]=(((r21*x5507))+((r22*x5501))+(((-1.0)*x5504*x5505)));
evalcond[1]=((((-1.0)*r22*x5505))+((r21*x5508))+(((-1.0)*x5504*x5506)));
evalcond[2]=((((-1.0)*x5502*x5505))+cj0+((r02*x5501))+((r01*x5507)));
evalcond[3]=((((-1.0)*x5503*x5505))+sj0+((r12*x5501))+((r11*x5507)));
evalcond[4]=((((-1.0)*x5503*x5506))+cj0+(((-1.0)*r12*x5505))+((r11*x5508)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5502*x5506))+(((-1.0)*r02*x5505))+((r01*x5508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5509=cj1*cj1;
IkReal x5510=((500.0)*py);
IkReal x5511=(cj1*sj2);
IkReal x5512=(cj2*sj2);
IkReal x5513=(cj5*r01);
IkReal x5514=(cj2*sj1);
IkReal x5515=(cj1*sj1);
IkReal x5516=(r00*sj5);
IkReal x5517=((50.0)*r10*sj5);
IkReal x5518=((50.0)*cj5*r11);
CheckValue<IkReal> x5519=IKPowWithIntegerCheck(((((-392.0)*x5509*x5512))+(((-392.0)*cj1*cj2*x5514))+(((-212.5)*sj2*x5509))+(((196.0)*x5515))+(((196.0)*x5512))+(((-212.5)*cj1*x5514))),-1);
if(!x5519.valid){
continue;
}
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(((((-1.0)*x5514))+(((-1.0)*x5511))),-1);
if(!x5520.valid){
continue;
}
if( IKabs(((x5519.value)*(((((-1.0)*x5510*x5514))+(((-1.0)*x5510*x5511))+(((-1.0)*x5511*x5517))+(((-1.0)*x5511*x5518))+(((-1.0)*x5514*x5518))+(((-1.0)*x5514*x5517))+(((67.0)*x5516))+(((67.0)*x5513)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5520.value)*(((((-1.0)*x5516))+(((-1.0)*x5513)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5519.value)*(((((-1.0)*x5510*x5514))+(((-1.0)*x5510*x5511))+(((-1.0)*x5511*x5517))+(((-1.0)*x5511*x5518))+(((-1.0)*x5514*x5518))+(((-1.0)*x5514*x5517))+(((67.0)*x5516))+(((67.0)*x5513))))))+IKsqr(((x5520.value)*(((((-1.0)*x5516))+(((-1.0)*x5513))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5519.value)*(((((-1.0)*x5510*x5514))+(((-1.0)*x5510*x5511))+(((-1.0)*x5511*x5517))+(((-1.0)*x5511*x5518))+(((-1.0)*x5514*x5518))+(((-1.0)*x5514*x5517))+(((67.0)*x5516))+(((67.0)*x5513))))), ((x5520.value)*(((((-1.0)*x5516))+(((-1.0)*x5513))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5521=IKcos(j0);
IkReal x5522=IKsin(j0);
IkReal x5523=((0.1)*sj5);
IkReal x5524=(cj5*r11);
IkReal x5525=(cj5*r01);
IkReal x5526=((0.392)*cj2);
IkReal x5527=((1.0)*cj2);
IkReal x5528=((0.392)*sj2);
IkReal x5529=((1.0)*cj1*sj2);
IkReal x5530=(cj1*x5521);
IkReal x5531=(cj1*x5522);
IkReal x5532=(sj1*x5521);
IkReal x5533=(sj1*x5522);
evalcond[0]=(((r00*sj5))+x5525+(((-1.0)*x5527*x5532))+(((-1.0)*x5521*x5529)));
evalcond[1]=(x5524+((r10*sj5))+(((-1.0)*x5527*x5533))+(((-1.0)*x5522*x5529)));
evalcond[2]=((((-0.134)*x5522))+((x5526*x5530))+(((-1.0)*x5528*x5532))+(((-1.0)*px))+(((-0.1)*x5525))+(((0.425)*x5530))+(((-1.0)*r00*x5523)));
evalcond[3]=(((x5526*x5531))+(((-1.0)*x5528*x5533))+(((-1.0)*r10*x5523))+(((-1.0)*py))+(((0.134)*x5521))+(((-0.1)*x5524))+(((0.425)*x5531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5534=((1.0)*cj5);
IkReal x5535=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5534)));
j4eval[0]=x5535;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5534)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5536=((1.0)*cj5);
IkReal x5537=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5536)));
j4eval[0]=x5537;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5536))))));
j4eval[2]=IKsign(x5537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5538=((1.0)*sj0);
IkReal x5539=((1.0)*cj0);
IkReal x5540=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5540;
j4eval[1]=((IKabs(((((-1.0)*r02*x5539))+(((-1.0)*r12*x5538)))))+(IKabs(((((-1.0)*r01*sj5*x5539))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5538))))));
j4eval[2]=IKsign(x5540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5541=((-1.0)*r20);
IkReal x5543 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5543)==0){
continue;
}
IkReal x5542=pow(x5543,-0.5);
CheckValue<IkReal> x5544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5541),IKFAST_ATAN2_MAGTHRESH);
if(!x5544.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5544.value));
IkReal gconst115=(r21*x5542);
IkReal gconst116=(x5541*x5542);
CheckValue<IkReal> x5545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5545.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5545.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5546=((-1.0)*r20);
IkReal x5547=x5542;
CheckValue<IkReal> x5549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5546),IKFAST_ATAN2_MAGTHRESH);
if(!x5549.valid){
continue;
}
IkReal x5548=((-1.0)*(x5549.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5548;
IkReal gconst114=x5548;
IkReal gconst115=(r21*x5547);
IkReal gconst116=(x5546*x5547);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5550=((-1.0)*r20);
IkReal x5551=x5542;
CheckValue<IkReal> x5553 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5550),IKFAST_ATAN2_MAGTHRESH);
if(!x5553.valid){
continue;
}
IkReal x5552=((-1.0)*(x5553.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5552;
IkReal gconst114=x5552;
IkReal gconst115=(r21*x5551);
IkReal gconst116=(x5550*x5551);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5554=((-1.0)*r20);
IkReal x5555=x5542;
CheckValue<IkReal> x5557 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5554),IKFAST_ATAN2_MAGTHRESH);
if(!x5557.valid){
continue;
}
IkReal x5556=((-1.0)*(x5557.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5556;
IkReal gconst114=x5556;
IkReal gconst115=(r21*x5555);
IkReal gconst116=(x5554*x5555);
IkReal x5558=((1.0)*(r22*r22));
CheckValue<IkReal> x5562=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5558))),-1);
if(!x5562.valid){
continue;
}
IkReal x5559=x5562.value;
IkReal x5560=((1.0)*x5559);
IkReal x5561=((((-2.0)*x5559*(r20*r20)*(r21*r21)))+(((-1.0)*x5560*(r20*r20*r20*r20)))+(((-1.0)*x5560*(r21*r21*r21*r21)))+(((-1.0)*x5558)));
j4eval[0]=x5561;
j4eval[1]=IKsign(x5561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5563=(cj2*sj1);
IkReal x5564=(gconst115*r21);
IkReal x5565=(cj1*sj2);
IkReal x5566=((1.0)*gconst116*r20);
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal((((r22*x5565))+((r22*x5563)))),IkReal((((x5564*x5565))+(((-1.0)*x5563*x5566))+((x5563*x5564))+(((-1.0)*x5565*x5566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
CheckValue<IkReal> x5568=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5564*x5564)))+(((-1.0)*gconst116*r20*x5566))+(((2.0)*gconst116*r20*x5564))+(((-1.0)*(r22*r22))))),-1);
if(!x5568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5567.value)+(((1.5707963267949)*(x5568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5569=IKsin(j4);
IkReal x5570=IKcos(j4);
IkReal x5571=(sj1*sj2);
IkReal x5572=((1.0)*x5570);
IkReal x5573=((1.0)*cj1*cj2);
IkReal x5574=(gconst115*x5569);
IkReal x5575=(gconst115*x5570);
IkReal x5576=((1.0)*gconst116*x5569);
evalcond[0]=(((r21*x5574))+(((-1.0)*r20*x5576))+(((-1.0)*r22*x5572)));
evalcond[1]=(cj0+(((-1.0)*r10*x5576))+(((-1.0)*r12*x5572))+((r11*x5574)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5572))+(((-1.0)*r00*x5576))+((r01*x5574)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5569))+((r21*x5575))+(((-1.0)*gconst116*r20*x5572)));
evalcond[4]=(((cj0*x5571))+((r02*x5569))+(((-1.0)*gconst116*r00*x5572))+(((-1.0)*cj0*x5573))+((r01*x5575)));
evalcond[5]=((((-1.0)*sj0*x5573))+((r11*x5575))+((sj0*x5571))+(((-1.0)*gconst116*r10*x5572))+((r12*x5569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5577=((1.0)*gconst116);
CheckValue<IkReal> x5578 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5578.valid){
continue;
}
CheckValue<IkReal> x5579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5577))+(((-1.0)*gconst115*r10)))),-1);
if(!x5579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5578.value)+(((1.5707963267949)*(x5579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5580=IKsin(j4);
IkReal x5581=IKcos(j4);
IkReal x5582=(sj1*sj2);
IkReal x5583=((1.0)*x5581);
IkReal x5584=((1.0)*cj1*cj2);
IkReal x5585=(gconst115*x5580);
IkReal x5586=(gconst115*x5581);
IkReal x5587=((1.0)*gconst116*x5580);
evalcond[0]=(((r21*x5585))+(((-1.0)*r20*x5587))+(((-1.0)*r22*x5583)));
evalcond[1]=((((-1.0)*r12*x5583))+cj0+((r11*x5585))+(((-1.0)*r10*x5587)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5583))+(((-1.0)*r00*x5587))+((r01*x5585)));
evalcond[3]=(((cj2*sj1))+((r21*x5586))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5583))+((r22*x5580)));
evalcond[4]=((((-1.0)*cj0*x5584))+((cj0*x5582))+((r02*x5580))+(((-1.0)*gconst116*r00*x5583))+((r01*x5586)));
evalcond[5]=(((r11*x5586))+((sj0*x5582))+((r12*x5580))+(((-1.0)*gconst116*r10*x5583))+(((-1.0)*sj0*x5584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5588=((1.0)*gconst116);
CheckValue<IkReal> x5589 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5589.valid){
continue;
}
CheckValue<IkReal> x5590=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5588)))),-1);
if(!x5590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5589.value)+(((1.5707963267949)*(x5590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5591=IKsin(j4);
IkReal x5592=IKcos(j4);
IkReal x5593=(sj1*sj2);
IkReal x5594=((1.0)*x5592);
IkReal x5595=((1.0)*cj1*cj2);
IkReal x5596=(gconst115*x5591);
IkReal x5597=(gconst115*x5592);
IkReal x5598=((1.0)*gconst116*x5591);
evalcond[0]=(((r21*x5596))+(((-1.0)*r20*x5598))+(((-1.0)*r22*x5594)));
evalcond[1]=((((-1.0)*r12*x5594))+cj0+((r11*x5596))+(((-1.0)*r10*x5598)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5594))+(((-1.0)*r00*x5598))+((r01*x5596)));
evalcond[3]=(((r21*x5597))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5594))+((r22*x5591)));
evalcond[4]=((((-1.0)*cj0*x5595))+((cj0*x5593))+((r02*x5591))+(((-1.0)*gconst116*r00*x5594))+((r01*x5597)));
evalcond[5]=(((sj0*x5593))+((r11*x5597))+((r12*x5591))+(((-1.0)*gconst116*r10*x5594))+(((-1.0)*sj0*x5595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5599=((-1.0)*r21);
IkReal x5601 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5601)==0){
continue;
}
IkReal x5600=pow(x5601,-0.5);
CheckValue<IkReal> x5602 = IKatan2WithCheck(IkReal(x5599),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5602.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5602.value))));
IkReal gconst118=(x5599*x5600);
IkReal gconst119=((1.0)*r20*x5600);
CheckValue<IkReal> x5603 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5603.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5604=((-1.0)*r21);
CheckValue<IkReal> x5607 = IKatan2WithCheck(IkReal(x5604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5607.valid){
continue;
}
IkReal x5605=((1.0)*(x5607.value));
IkReal x5606=x5600;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5605)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5605)));
IkReal gconst118=(x5604*x5606);
IkReal gconst119=((1.0)*r20*x5606);
IkReal x5608=r22*r22;
IkReal x5609=((1.0)*x5608);
CheckValue<IkReal> x5613=IKPowWithIntegerCheck(((-1.0)+x5608),-1);
if(!x5613.valid){
continue;
}
IkReal x5610=x5613.value;
if((((1.0)+(((-1.0)*x5609)))) < -0.00001)
continue;
IkReal x5611=IKsqrt(((1.0)+(((-1.0)*x5609))));
IkReal x5612=(cj0*x5610*x5611);
j4eval[0]=((IKabs((x5612+(((-1.0)*x5609*x5612)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5614=((-1.0)*r21);
CheckValue<IkReal> x5617 = IKatan2WithCheck(IkReal(x5614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5617.valid){
continue;
}
IkReal x5615=((1.0)*(x5617.value));
IkReal x5616=x5600;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5615)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5615)));
IkReal gconst118=(x5614*x5616);
IkReal gconst119=((1.0)*r20*x5616);
IkReal x5618=r22*r22;
IkReal x5619=((1.0)*x5618);
CheckValue<IkReal> x5623=IKPowWithIntegerCheck(((-1.0)+x5618),-1);
if(!x5623.valid){
continue;
}
IkReal x5620=x5623.value;
if((((1.0)+(((-1.0)*x5619)))) < -0.00001)
continue;
IkReal x5621=IKsqrt(((1.0)+(((-1.0)*x5619))));
IkReal x5622=(sj0*x5620*x5621);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5622+(((-1.0)*x5619*x5622))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5624=((-1.0)*r21);
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal(x5624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
IkReal x5625=((1.0)*(x5627.value));
IkReal x5626=x5600;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5625)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5625)));
IkReal gconst118=(x5624*x5626);
IkReal gconst119=((1.0)*r20*x5626);
IkReal x5628=r22*r22;
IkReal x5629=(r12*sj0);
IkReal x5630=(cj0*r02);
CheckValue<IkReal> x5634=IKPowWithIntegerCheck(((-1.0)+x5628),-1);
if(!x5634.valid){
continue;
}
IkReal x5631=x5634.value;
if((((1.0)+(((-1.0)*x5628)))) < -0.00001)
continue;
IkReal x5632=IKsqrt(((1.0)+(((-1.0)*x5628))));
IkReal x5633=(r22*x5631*x5632);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5629*x5633))+((x5630*x5633)))))+(IKabs(((((-1.0)*x5630))+(((-1.0)*x5629))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5635=((1.0)*sj0);
IkReal x5636=((1.0)*gconst118);
CheckValue<IkReal> x5637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5636)))),-1);
if(!x5637.valid){
continue;
}
CheckValue<IkReal> x5638 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5635))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5635))+(((-1.0)*cj0*r01*x5636))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5637.value)))+(x5638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5639=IKsin(j4);
IkReal x5640=IKcos(j4);
IkReal x5641=(gconst118*r01);
IkReal x5642=(sj1*sj2);
IkReal x5643=(gconst119*r20);
IkReal x5644=(gconst119*r10);
IkReal x5645=(gconst119*r00);
IkReal x5646=(gconst118*r21);
IkReal x5647=(gconst118*r11);
IkReal x5648=((1.0)*x5640);
IkReal x5649=((1.0)*cj1*cj2);
IkReal x5650=((1.0)*x5639);
evalcond[0]=((((-1.0)*r22*x5648))+((x5639*x5646))+(((-1.0)*x5643*x5650)));
evalcond[1]=(((x5639*x5647))+cj0+(((-1.0)*r12*x5648))+(((-1.0)*x5644*x5650)));
evalcond[2]=((((-1.0)*sj0))+((x5639*x5641))+(((-1.0)*x5645*x5650))+(((-1.0)*r02*x5648)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5640*x5646))+((r22*x5639))+(((-1.0)*x5643*x5648)));
evalcond[4]=(((cj0*x5642))+(((-1.0)*x5645*x5648))+((x5640*x5641))+(((-1.0)*cj0*x5649))+((r02*x5639)));
evalcond[5]=(((r12*x5639))+(((-1.0)*sj0*x5649))+(((-1.0)*x5644*x5648))+((sj0*x5642))+((x5640*x5647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5651=((1.0)*gconst119);
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
CheckValue<IkReal> x5653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5651))+(((-1.0)*gconst118*r10)))),-1);
if(!x5653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5652.value)+(((1.5707963267949)*(x5653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5654=IKsin(j4);
IkReal x5655=IKcos(j4);
IkReal x5656=(gconst118*r01);
IkReal x5657=(sj1*sj2);
IkReal x5658=(gconst119*r20);
IkReal x5659=(gconst119*r10);
IkReal x5660=(gconst119*r00);
IkReal x5661=(gconst118*r21);
IkReal x5662=(gconst118*r11);
IkReal x5663=((1.0)*x5655);
IkReal x5664=((1.0)*cj1*cj2);
IkReal x5665=((1.0)*x5654);
evalcond[0]=((((-1.0)*r22*x5663))+((x5654*x5661))+(((-1.0)*x5658*x5665)));
evalcond[1]=(cj0+(((-1.0)*x5659*x5665))+(((-1.0)*r12*x5663))+((x5654*x5662)));
evalcond[2]=((((-1.0)*sj0))+((x5654*x5656))+(((-1.0)*r02*x5663))+(((-1.0)*x5660*x5665)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5654))+((x5655*x5661))+(((-1.0)*x5658*x5663)));
evalcond[4]=(((cj0*x5657))+((x5655*x5656))+(((-1.0)*cj0*x5664))+(((-1.0)*x5660*x5663))+((r02*x5654)));
evalcond[5]=((((-1.0)*x5659*x5663))+((sj0*x5657))+((r12*x5654))+(((-1.0)*sj0*x5664))+((x5655*x5662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5666=((1.0)*gconst119);
CheckValue<IkReal> x5667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5666))+(((-1.0)*gconst118*r00)))),-1);
if(!x5667.valid){
continue;
}
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5667.value)))+(x5668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5669=IKsin(j4);
IkReal x5670=IKcos(j4);
IkReal x5671=(gconst118*r01);
IkReal x5672=(sj1*sj2);
IkReal x5673=(gconst119*r20);
IkReal x5674=(gconst119*r10);
IkReal x5675=(gconst119*r00);
IkReal x5676=(gconst118*r21);
IkReal x5677=(gconst118*r11);
IkReal x5678=((1.0)*x5670);
IkReal x5679=((1.0)*cj1*cj2);
IkReal x5680=((1.0)*x5669);
evalcond[0]=((((-1.0)*r22*x5678))+(((-1.0)*x5673*x5680))+((x5669*x5676)));
evalcond[1]=(cj0+(((-1.0)*r12*x5678))+((x5669*x5677))+(((-1.0)*x5674*x5680)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5675*x5680))+((x5669*x5671))+(((-1.0)*r02*x5678)));
evalcond[3]=(((cj2*sj1))+((r22*x5669))+((x5670*x5676))+((cj1*sj2))+(((-1.0)*x5673*x5678)));
evalcond[4]=(((cj0*x5672))+((x5670*x5671))+((r02*x5669))+(((-1.0)*cj0*x5679))+(((-1.0)*x5675*x5678)));
evalcond[5]=(((x5670*x5677))+((sj0*x5672))+((r12*x5669))+(((-1.0)*x5674*x5678))+(((-1.0)*sj0*x5679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5681=((-1.0)*r10);
IkReal x5683 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5683)==0){
continue;
}
IkReal x5682=pow(x5683,-0.5);
CheckValue<IkReal> x5684 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5681),IKFAST_ATAN2_MAGTHRESH);
if(!x5684.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5684.value));
IkReal gconst121=(r11*x5682);
IkReal gconst122=(x5681*x5682);
CheckValue<IkReal> x5685 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5685.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5685.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5686=((-1.0)*r10);
IkReal x5687=x5682;
CheckValue<IkReal> x5689 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5686),IKFAST_ATAN2_MAGTHRESH);
if(!x5689.valid){
continue;
}
IkReal x5688=((-1.0)*(x5689.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5688;
IkReal gconst120=x5688;
IkReal gconst121=(r11*x5687);
IkReal gconst122=(x5686*x5687);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5690=((1.0)*sj0);
IkReal x5691=((1.0)*gconst121);
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5690)))),IkReal(((((-1.0)*cj0*r01*x5691))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5690))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
CheckValue<IkReal> x5693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5691)))),-1);
if(!x5693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5692.value)+(((1.5707963267949)*(x5693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5694=IKsin(j4);
IkReal x5695=IKcos(j4);
IkReal x5696=(gconst121*r11);
IkReal x5697=(sj1*sj2);
IkReal x5698=(gconst122*r00);
IkReal x5699=(gconst122*r10);
IkReal x5700=(gconst122*r20);
IkReal x5701=((1.0)*x5695);
IkReal x5702=((1.0)*cj1*cj2);
IkReal x5703=((1.0)*x5694);
IkReal x5704=(gconst121*x5694);
IkReal x5705=(gconst121*x5695);
evalcond[0]=((((-1.0)*x5700*x5703))+(((-1.0)*r22*x5701))+((r21*x5704)));
evalcond[1]=(((x5694*x5696))+(((-1.0)*r12*x5701))+cj0+(((-1.0)*x5699*x5703)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5698*x5703))+((r01*x5704))+(((-1.0)*r02*x5701)));
evalcond[3]=(((cj2*sj1))+((r22*x5694))+(((-1.0)*x5700*x5701))+((cj1*sj2))+((r21*x5705)));
evalcond[4]=(((r02*x5694))+(((-1.0)*x5698*x5701))+((r01*x5705))+(((-1.0)*cj0*x5702))+((cj0*x5697)));
evalcond[5]=(((x5695*x5696))+(((-1.0)*x5699*x5701))+((sj0*x5697))+(((-1.0)*sj0*x5702))+((r12*x5694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5706=((1.0)*gconst122);
CheckValue<IkReal> x5707=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5706)))),-1);
if(!x5707.valid){
continue;
}
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5706))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5707.value)))+(x5708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5709=IKsin(j4);
IkReal x5710=IKcos(j4);
IkReal x5711=(gconst121*r11);
IkReal x5712=(sj1*sj2);
IkReal x5713=(gconst122*r00);
IkReal x5714=(gconst122*r10);
IkReal x5715=(gconst122*r20);
IkReal x5716=((1.0)*x5710);
IkReal x5717=((1.0)*cj1*cj2);
IkReal x5718=((1.0)*x5709);
IkReal x5719=(gconst121*x5709);
IkReal x5720=(gconst121*x5710);
evalcond[0]=((((-1.0)*x5715*x5718))+(((-1.0)*r22*x5716))+((r21*x5719)));
evalcond[1]=(cj0+(((-1.0)*x5714*x5718))+(((-1.0)*r12*x5716))+((x5709*x5711)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5713*x5718))+((r01*x5719))+(((-1.0)*r02*x5716)));
evalcond[3]=(((cj2*sj1))+((r21*x5720))+(((-1.0)*x5715*x5716))+((cj1*sj2))+((r22*x5709)));
evalcond[4]=((((-1.0)*cj0*x5717))+((r02*x5709))+((r01*x5720))+((cj0*x5712))+(((-1.0)*x5713*x5716)));
evalcond[5]=((((-1.0)*x5714*x5716))+((x5710*x5711))+((r12*x5709))+((sj0*x5712))+(((-1.0)*sj0*x5717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5721=((-1.0)*r11);
IkReal x5723 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5723)==0){
continue;
}
IkReal x5722=pow(x5723,-0.5);
CheckValue<IkReal> x5724 = IKatan2WithCheck(IkReal(x5721),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5724.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5724.value))));
IkReal gconst124=(x5721*x5722);
IkReal gconst125=((1.0)*r10*x5722);
CheckValue<IkReal> x5725 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5725.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5725.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5726=((-1.0)*r11);
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal(x5726),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
IkReal x5727=((1.0)*(x5729.value));
IkReal x5728=x5722;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5727)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5727)));
IkReal gconst124=(x5726*x5728);
IkReal gconst125=((1.0)*r10*x5728);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5730=((-1.0)*r11);
CheckValue<IkReal> x5733 = IKatan2WithCheck(IkReal(x5730),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5733.valid){
continue;
}
IkReal x5731=((1.0)*(x5733.value));
IkReal x5732=x5722;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5731)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5731)));
IkReal gconst124=(x5730*x5732);
IkReal gconst125=((1.0)*r10*x5732);
IkReal x5734=r12*r12;
IkReal x5735=((1.0)*sj0);
IkReal x5736=(cj0*r02);
IkReal x5737=x5722;
j4eval[0]=((IKabs(((((-1.0)*r12*x5735))+(((-1.0)*x5736)))))+(IKabs((((r12*x5736*x5737))+(((-1.0)*x5735*x5737))+((sj0*x5734*x5737))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5738=((-1.0)*r11);
CheckValue<IkReal> x5741 = IKatan2WithCheck(IkReal(x5738),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5741.valid){
continue;
}
IkReal x5739=((1.0)*(x5741.value));
IkReal x5740=x5722;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5739)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5739)));
IkReal gconst124=(x5738*x5740);
IkReal gconst125=((1.0)*r10*x5740);
IkReal x5742=r12*r12;
IkReal x5743=((1.0)+(((-1.0)*x5742)));
IkReal x5744=(cj2*r22*sj1);
IkReal x5745=(cj1*r22*sj2);
CheckValue<IkReal> x5752=IKPowWithIntegerCheck(x5743,-1);
if(!x5752.valid){
continue;
}
IkReal x5746=x5752.value;
CheckValue<IkReal> x5753=IKPowWithIntegerCheck(((-1.0)+x5742),-1);
if(!x5753.valid){
continue;
}
IkReal x5747=x5753.value;
IkReal x5748=((1.0)*x5746);
if((x5743) < -0.00001)
continue;
IkReal x5749=IKsqrt(x5743);
IkReal x5750=((1.0)*r12*x5747*x5749);
IkReal x5751=((((-1.0)*x5748*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x5746))+(((-1.0)*(r22*r22)))+(((-1.0)*x5748*(r10*r10)*(r20*r20))));
j4eval[0]=x5751;
j4eval[1]=IKsign(x5751);
j4eval[2]=((IKabs(((((-1.0)*x5744*x5750))+(((-1.0)*x5745*x5750)))))+(IKabs((x5744+x5745))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5754=(gconst124*r21);
IkReal x5755=(cj1*sj2);
IkReal x5756=(cj2*sj1);
IkReal x5757=(gconst125*r20);
CheckValue<IkReal> x5758=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5757*x5757)))+(((2.0)*x5754*x5757))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5754*x5754))))),-1);
if(!x5758.valid){
continue;
}
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal((((r22*x5756))+((r22*x5755)))),IkReal((((x5754*x5755))+((x5754*x5756))+(((-1.0)*x5755*x5757))+(((-1.0)*x5756*x5757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5758.value)))+(x5759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5760=IKsin(j4);
IkReal x5761=IKcos(j4);
IkReal x5762=(sj1*sj2);
IkReal x5763=(gconst125*r20);
IkReal x5764=(gconst124*r01);
IkReal x5765=(gconst125*r00);
IkReal x5766=(gconst125*r10);
IkReal x5767=((1.0)*x5761);
IkReal x5768=((1.0)*cj1*cj2);
IkReal x5769=((1.0)*x5760);
IkReal x5770=(gconst124*x5760);
IkReal x5771=(gconst124*x5761);
evalcond[0]=(((r21*x5770))+(((-1.0)*x5763*x5769))+(((-1.0)*r22*x5767)));
evalcond[1]=(cj0+(((-1.0)*r12*x5767))+(((-1.0)*x5766*x5769))+((r11*x5770)));
evalcond[2]=((((-1.0)*sj0))+((x5760*x5764))+(((-1.0)*r02*x5767))+(((-1.0)*x5765*x5769)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5760))+((r21*x5771))+(((-1.0)*x5763*x5767)));
evalcond[4]=((((-1.0)*cj0*x5768))+((cj0*x5762))+((r02*x5760))+((x5761*x5764))+(((-1.0)*x5765*x5767)));
evalcond[5]=((((-1.0)*x5766*x5767))+(((-1.0)*sj0*x5768))+((r11*x5771))+((r12*x5760))+((sj0*x5762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5772=((1.0)*sj0);
IkReal x5773=((1.0)*cj0);
CheckValue<IkReal> x5774 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5772))+(((-1.0)*r02*x5773)))),IkReal(((((-1.0)*gconst124*r11*x5772))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5773))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5774.valid){
continue;
}
CheckValue<IkReal> x5775=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5774.value)+(((1.5707963267949)*(x5775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5776=IKsin(j4);
IkReal x5777=IKcos(j4);
IkReal x5778=(sj1*sj2);
IkReal x5779=(gconst125*r20);
IkReal x5780=(gconst124*r01);
IkReal x5781=(gconst125*r00);
IkReal x5782=(gconst125*r10);
IkReal x5783=((1.0)*x5777);
IkReal x5784=((1.0)*cj1*cj2);
IkReal x5785=((1.0)*x5776);
IkReal x5786=(gconst124*x5776);
IkReal x5787=(gconst124*x5777);
evalcond[0]=(((r21*x5786))+(((-1.0)*x5779*x5785))+(((-1.0)*r22*x5783)));
evalcond[1]=(cj0+(((-1.0)*x5782*x5785))+((r11*x5786))+(((-1.0)*r12*x5783)));
evalcond[2]=((((-1.0)*sj0))+((x5776*x5780))+(((-1.0)*x5781*x5785))+(((-1.0)*r02*x5783)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5787))+((r22*x5776))+(((-1.0)*x5779*x5783)));
evalcond[4]=(((cj0*x5778))+((r02*x5776))+((x5777*x5780))+(((-1.0)*cj0*x5784))+(((-1.0)*x5781*x5783)));
evalcond[5]=((((-1.0)*x5782*x5783))+((r11*x5787))+((r12*x5776))+(((-1.0)*sj0*x5784))+((sj0*x5778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5788=((1.0)*gconst125);
CheckValue<IkReal> x5789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5788)))),-1);
if(!x5789.valid){
continue;
}
CheckValue<IkReal> x5790 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5788))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5789.value)))+(x5790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5791=IKsin(j4);
IkReal x5792=IKcos(j4);
IkReal x5793=(sj1*sj2);
IkReal x5794=(gconst125*r20);
IkReal x5795=(gconst124*r01);
IkReal x5796=(gconst125*r00);
IkReal x5797=(gconst125*r10);
IkReal x5798=((1.0)*x5792);
IkReal x5799=((1.0)*cj1*cj2);
IkReal x5800=((1.0)*x5791);
IkReal x5801=(gconst124*x5791);
IkReal x5802=(gconst124*x5792);
evalcond[0]=(((r21*x5801))+(((-1.0)*x5794*x5800))+(((-1.0)*r22*x5798)));
evalcond[1]=((((-1.0)*x5797*x5800))+cj0+((r11*x5801))+(((-1.0)*r12*x5798)));
evalcond[2]=((((-1.0)*sj0))+((x5791*x5795))+(((-1.0)*x5796*x5800))+(((-1.0)*r02*x5798)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5802))+((r22*x5791))+(((-1.0)*x5794*x5798)));
evalcond[4]=(((x5792*x5795))+(((-1.0)*cj0*x5799))+(((-1.0)*x5796*x5798))+((cj0*x5793))+((r02*x5791)));
evalcond[5]=(((r12*x5791))+(((-1.0)*x5797*x5798))+((r11*x5802))+((sj0*x5793))+(((-1.0)*sj0*x5799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5803=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5803;
j4eval[1]=IKsign(x5803);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5804=((1.0)*cj5);
IkReal x5805=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5804)));
j4eval[0]=x5805;
j4eval[1]=((IKabs(((((-1.0)*r20*x5804))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5806=cj5*cj5;
IkReal x5807=r11*r11;
IkReal x5808=(cj5*r10);
IkReal x5809=(r11*sj5);
IkReal x5810=((((2.0)*x5808*x5809))+((x5806*x5807))+(((-1.0)*(r12*r12)))+(((-1.0)*x5806*(r10*r10)))+(((-1.0)*x5807)));
j4eval[0]=x5810;
j4eval[1]=IKsign(x5810);
j4eval[2]=((IKabs(((((-1.0)*x5808))+x5809)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5811=cj5*cj5;
IkReal x5812=r11*r11;
IkReal x5813=(cj5*r10);
IkReal x5814=(r11*sj5);
CheckValue<IkReal> x5815=IKPowWithIntegerCheck(IKsign(((((2.0)*x5813*x5814))+(((-1.0)*x5812))+(((-1.0)*x5811*(r10*r10)))+(((-1.0)*(r12*r12)))+((x5811*x5812)))),-1);
if(!x5815.valid){
continue;
}
CheckValue<IkReal> x5816 = IKatan2WithCheck(IkReal(((((-1.0)*x5813))+x5814)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5815.value)))+(x5816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5817=IKcos(j4);
IkReal x5818=IKsin(j4);
IkReal x5819=(cj5*r00);
IkReal x5820=(cj5*r10);
IkReal x5821=(r21*sj5);
IkReal x5822=(cj5*r20);
IkReal x5823=((1.0)*x5817);
IkReal x5824=((1.0)*x5818);
IkReal x5825=(sj5*x5818);
IkReal x5826=(sj5*x5817);
evalcond[0]=((((-1.0)*x5820*x5823))+((r11*x5826))+((r12*x5818)));
evalcond[1]=((((-1.0)*r22*x5823))+((x5818*x5821))+(((-1.0)*x5822*x5824)));
evalcond[2]=((((-1.0)*r02*x5823))+((r01*x5825))+(((-1.0)*x5819*x5824)));
evalcond[3]=((1.0)+(((-1.0)*x5820*x5824))+((r11*x5825))+(((-1.0)*r12*x5823)));
evalcond[4]=(((cj2*sj1))+((r22*x5818))+((cj1*sj2))+(((-1.0)*x5822*x5823))+((x5817*x5821)));
evalcond[5]=(((r02*x5818))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5826))+(((-1.0)*x5819*x5823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5827=((1.0)*cj5);
CheckValue<IkReal> x5828 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5827))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5828.valid){
continue;
}
CheckValue<IkReal> x5829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5827))+(((-1.0)*r00*sj5)))),-1);
if(!x5829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5828.value)+(((1.5707963267949)*(x5829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5830=IKcos(j4);
IkReal x5831=IKsin(j4);
IkReal x5832=(cj5*r00);
IkReal x5833=(cj5*r10);
IkReal x5834=(r21*sj5);
IkReal x5835=(cj5*r20);
IkReal x5836=((1.0)*x5830);
IkReal x5837=((1.0)*x5831);
IkReal x5838=(sj5*x5831);
IkReal x5839=(sj5*x5830);
evalcond[0]=((((-1.0)*x5833*x5836))+((r12*x5831))+((r11*x5839)));
evalcond[1]=((((-1.0)*r22*x5836))+((x5831*x5834))+(((-1.0)*x5835*x5837)));
evalcond[2]=((((-1.0)*r02*x5836))+(((-1.0)*x5832*x5837))+((r01*x5838)));
evalcond[3]=((1.0)+(((-1.0)*x5833*x5837))+((r11*x5838))+(((-1.0)*r12*x5836)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5830*x5834))+((r22*x5831))+(((-1.0)*x5835*x5836)));
evalcond[5]=(((r02*x5831))+(((-1.0)*x5832*x5836))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5840=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5840.valid){
continue;
}
CheckValue<IkReal> x5841 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5840.value)))+(x5841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5842=IKcos(j4);
IkReal x5843=IKsin(j4);
IkReal x5844=(cj5*r00);
IkReal x5845=(cj5*r10);
IkReal x5846=(r21*sj5);
IkReal x5847=(cj5*r20);
IkReal x5848=((1.0)*x5842);
IkReal x5849=((1.0)*x5843);
IkReal x5850=(sj5*x5843);
IkReal x5851=(sj5*x5842);
evalcond[0]=(((r11*x5851))+((r12*x5843))+(((-1.0)*x5845*x5848)));
evalcond[1]=((((-1.0)*x5847*x5849))+((x5843*x5846))+(((-1.0)*r22*x5848)));
evalcond[2]=((((-1.0)*r02*x5848))+((r01*x5850))+(((-1.0)*x5844*x5849)));
evalcond[3]=((1.0)+((r11*x5850))+(((-1.0)*x5845*x5849))+(((-1.0)*r12*x5848)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5847*x5848))+((cj1*sj2))+((x5842*x5846))+((r22*x5843)));
evalcond[5]=(((r01*x5851))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5844*x5848))+((r02*x5843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5852=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5852;
j4eval[1]=IKsign(x5852);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5853=((1.0)*cj5);
IkReal x5854=((((-1.0)*r21*x5853))+(((-1.0)*r20*sj5)));
j4eval[0]=x5854;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5853))))));
j4eval[2]=IKsign(x5854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5855=cj5*cj5;
IkReal x5856=r11*r11;
IkReal x5857=(r11*sj5);
IkReal x5858=(cj5*r10);
IkReal x5859=((r12*r12)+((x5855*(r10*r10)))+(((-1.0)*x5855*x5856))+(((-2.0)*x5857*x5858))+x5856);
j4eval[0]=x5859;
j4eval[1]=IKsign(x5859);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5858))+x5857))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5860=cj5*cj5;
IkReal x5861=r11*r11;
IkReal x5862=(cj5*r10);
IkReal x5863=(r11*sj5);
CheckValue<IkReal> x5864=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5860*x5861))+((x5860*(r10*r10)))+x5861+(((-2.0)*x5862*x5863)))),-1);
if(!x5864.valid){
continue;
}
CheckValue<IkReal> x5865 = IKatan2WithCheck(IkReal(((((-1.0)*x5862))+x5863)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5864.value)))+(x5865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5866=IKcos(j4);
IkReal x5867=IKsin(j4);
IkReal x5868=(cj5*r00);
IkReal x5869=(cj5*r10);
IkReal x5870=(r21*sj5);
IkReal x5871=(cj5*r20);
IkReal x5872=((1.0)*x5866);
IkReal x5873=((1.0)*x5867);
IkReal x5874=(sj5*x5867);
IkReal x5875=(sj5*x5866);
evalcond[0]=(((r11*x5875))+((r12*x5867))+(((-1.0)*x5869*x5872)));
evalcond[1]=(((x5867*x5870))+(((-1.0)*r22*x5872))+(((-1.0)*x5871*x5873)));
evalcond[2]=((((-1.0)*r02*x5872))+(((-1.0)*x5868*x5873))+((r01*x5874)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5872))+((r11*x5874))+(((-1.0)*x5869*x5873)));
evalcond[4]=(((x5866*x5870))+((cj2*sj1))+((r22*x5867))+((cj1*sj2))+(((-1.0)*x5871*x5872)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5867))+((cj1*cj2))+(((-1.0)*x5868*x5872))+((r01*x5875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5876=((1.0)*cj5);
CheckValue<IkReal> x5877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5876))+(((-1.0)*r20*sj5)))),-1);
if(!x5877.valid){
continue;
}
CheckValue<IkReal> x5878 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5877.value)))+(x5878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5879=IKcos(j4);
IkReal x5880=IKsin(j4);
IkReal x5881=(cj5*r00);
IkReal x5882=(cj5*r10);
IkReal x5883=(r21*sj5);
IkReal x5884=(cj5*r20);
IkReal x5885=((1.0)*x5879);
IkReal x5886=((1.0)*x5880);
IkReal x5887=(sj5*x5880);
IkReal x5888=(sj5*x5879);
evalcond[0]=((((-1.0)*x5882*x5885))+((r12*x5880))+((r11*x5888)));
evalcond[1]=(((x5880*x5883))+(((-1.0)*x5884*x5886))+(((-1.0)*r22*x5885)));
evalcond[2]=(((r01*x5887))+(((-1.0)*r02*x5885))+(((-1.0)*x5881*x5886)));
evalcond[3]=((-1.0)+(((-1.0)*x5882*x5886))+((r11*x5887))+(((-1.0)*r12*x5885)));
evalcond[4]=(((cj2*sj1))+((x5879*x5883))+((cj1*sj2))+((r22*x5880))+(((-1.0)*x5884*x5885)));
evalcond[5]=(((r01*x5888))+(((-1.0)*sj1*sj2))+(((-1.0)*x5881*x5885))+((cj1*cj2))+((r02*x5880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5889 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5889.valid){
continue;
}
CheckValue<IkReal> x5890=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5889.value)+(((1.5707963267949)*(x5890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5891=IKcos(j4);
IkReal x5892=IKsin(j4);
IkReal x5893=(cj5*r00);
IkReal x5894=(cj5*r10);
IkReal x5895=(r21*sj5);
IkReal x5896=(cj5*r20);
IkReal x5897=((1.0)*x5891);
IkReal x5898=((1.0)*x5892);
IkReal x5899=(sj5*x5892);
IkReal x5900=(sj5*x5891);
evalcond[0]=((((-1.0)*x5894*x5897))+((r12*x5892))+((r11*x5900)));
evalcond[1]=((((-1.0)*x5896*x5898))+(((-1.0)*r22*x5897))+((x5892*x5895)));
evalcond[2]=((((-1.0)*x5893*x5898))+(((-1.0)*r02*x5897))+((r01*x5899)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5897))+(((-1.0)*x5894*x5898))+((r11*x5899)));
evalcond[4]=(((r22*x5892))+((cj2*sj1))+(((-1.0)*x5896*x5897))+((cj1*sj2))+((x5891*x5895)));
evalcond[5]=((((-1.0)*x5893*x5897))+(((-1.0)*sj1*sj2))+((r02*x5892))+((cj1*cj2))+((r01*x5900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5901=((-1.0)*r00);
IkReal x5903 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5903)==0){
continue;
}
IkReal x5902=pow(x5903,-0.5);
CheckValue<IkReal> x5904 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5901),IKFAST_ATAN2_MAGTHRESH);
if(!x5904.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5904.value));
IkReal gconst127=(r01*x5902);
IkReal gconst128=(x5901*x5902);
CheckValue<IkReal> x5905 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5905.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5905.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5906=((-1.0)*r00);
IkReal x5907=x5902;
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5906),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
IkReal x5908=((-1.0)*(x5909.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5908;
IkReal gconst126=x5908;
IkReal gconst127=(r01*x5907);
IkReal gconst128=(x5906*x5907);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5910=((1.0)*sj0);
IkReal x5911=((1.0)*gconst127);
CheckValue<IkReal> x5912 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5910))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5911))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5912.valid){
continue;
}
CheckValue<IkReal> x5913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5911))+(((-1.0)*gconst128*r21)))),-1);
if(!x5913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5912.value)+(((1.5707963267949)*(x5913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5914=IKsin(j4);
IkReal x5915=IKcos(j4);
IkReal x5916=(gconst127*r01);
IkReal x5917=(sj1*sj2);
IkReal x5918=(gconst128*r10);
IkReal x5919=(gconst128*r00);
IkReal x5920=(gconst128*r20);
IkReal x5921=((1.0)*x5915);
IkReal x5922=((1.0)*cj1*cj2);
IkReal x5923=((1.0)*x5914);
IkReal x5924=(gconst127*x5915);
IkReal x5925=(gconst127*x5914);
evalcond[0]=((((-1.0)*r22*x5921))+(((-1.0)*x5920*x5923))+((r21*x5925)));
evalcond[1]=((((-1.0)*x5918*x5923))+cj0+((r11*x5925))+(((-1.0)*r12*x5921)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5921))+(((-1.0)*x5919*x5923))+((x5914*x5916)));
evalcond[3]=(((cj2*sj1))+((r22*x5914))+((cj1*sj2))+(((-1.0)*x5920*x5921))+((r21*x5924)));
evalcond[4]=(((x5915*x5916))+((r02*x5914))+(((-1.0)*x5919*x5921))+(((-1.0)*cj0*x5922))+((cj0*x5917)));
evalcond[5]=(((r12*x5914))+(((-1.0)*x5918*x5921))+((sj0*x5917))+(((-1.0)*sj0*x5922))+((r11*x5924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5926=((1.0)*gconst128);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5926))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
CheckValue<IkReal> x5928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5926))+(((-1.0)*gconst127*r10)))),-1);
if(!x5928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5927.value)+(((1.5707963267949)*(x5928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5929=IKsin(j4);
IkReal x5930=IKcos(j4);
IkReal x5931=(gconst127*r01);
IkReal x5932=(sj1*sj2);
IkReal x5933=(gconst128*r10);
IkReal x5934=(gconst128*r00);
IkReal x5935=(gconst128*r20);
IkReal x5936=((1.0)*x5930);
IkReal x5937=((1.0)*cj1*cj2);
IkReal x5938=((1.0)*x5929);
IkReal x5939=(gconst127*x5930);
IkReal x5940=(gconst127*x5929);
evalcond[0]=(((r21*x5940))+(((-1.0)*x5935*x5938))+(((-1.0)*r22*x5936)));
evalcond[1]=(cj0+(((-1.0)*x5933*x5938))+(((-1.0)*r12*x5936))+((r11*x5940)));
evalcond[2]=((((-1.0)*x5934*x5938))+(((-1.0)*sj0))+((x5929*x5931))+(((-1.0)*r02*x5936)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5929))+((r21*x5939))+(((-1.0)*x5935*x5936)));
evalcond[4]=((((-1.0)*x5934*x5936))+((x5930*x5931))+((cj0*x5932))+(((-1.0)*cj0*x5937))+((r02*x5929)));
evalcond[5]=((((-1.0)*sj0*x5937))+((r11*x5939))+((r12*x5929))+(((-1.0)*x5933*x5936))+((sj0*x5932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5941=((-1.0)*r01);
IkReal x5943 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5943)==0){
continue;
}
IkReal x5942=pow(x5943,-0.5);
CheckValue<IkReal> x5944 = IKatan2WithCheck(IkReal(x5941),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5944.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5944.value))));
IkReal gconst130=(x5941*x5942);
IkReal gconst131=((1.0)*r00*x5942);
CheckValue<IkReal> x5945 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5945.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5945.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5946=((-1.0)*r01);
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal(x5946),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
IkReal x5947=((1.0)*(x5949.value));
IkReal x5948=x5942;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5947)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5947)));
IkReal gconst130=(x5946*x5948);
IkReal gconst131=((1.0)*r00*x5948);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5950=((-1.0)*r01);
CheckValue<IkReal> x5953 = IKatan2WithCheck(IkReal(x5950),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5953.valid){
continue;
}
IkReal x5951=((1.0)*(x5953.value));
IkReal x5952=x5942;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5951)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5951)));
IkReal gconst130=(x5950*x5952);
IkReal gconst131=((1.0)*r00*x5952);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5954=((-1.0)*r01);
CheckValue<IkReal> x5957 = IKatan2WithCheck(IkReal(x5954),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5957.valid){
continue;
}
IkReal x5955=((1.0)*(x5957.value));
IkReal x5956=x5942;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5955)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5955)));
IkReal gconst130=(x5954*x5956);
IkReal gconst131=((1.0)*r00*x5956);
IkReal x5958=r02*r02;
IkReal x5959=(r12*sj0);
IkReal x5960=((1.0)*cj0);
IkReal x5961=x5942;
j4eval[0]=((IKabs((((r02*x5959*x5961))+(((-1.0)*x5960*x5961))+((cj0*x5958*x5961)))))+(IKabs(((((-1.0)*x5959))+(((-1.0)*r02*x5960))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5962=((1.0)*sj0);
IkReal x5963=((1.0)*gconst130);
CheckValue<IkReal> x5964 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5962)))),IkReal(((((-1.0)*gconst130*r11*x5962))+(((-1.0)*cj0*r01*x5963))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5964.valid){
continue;
}
CheckValue<IkReal> x5965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5963))+(((-1.0)*gconst131*r21)))),-1);
if(!x5965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5964.value)+(((1.5707963267949)*(x5965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5966=IKsin(j4);
IkReal x5967=IKcos(j4);
IkReal x5968=(gconst131*r10);
IkReal x5969=(sj1*sj2);
IkReal x5970=(gconst131*r20);
IkReal x5971=(gconst131*r00);
IkReal x5972=((1.0)*x5967);
IkReal x5973=((1.0)*cj1*cj2);
IkReal x5974=(gconst130*x5966);
IkReal x5975=((1.0)*x5966);
IkReal x5976=(gconst130*x5967);
evalcond[0]=((((-1.0)*r22*x5972))+((r21*x5974))+(((-1.0)*x5970*x5975)));
evalcond[1]=(cj0+(((-1.0)*r12*x5972))+((r11*x5974))+(((-1.0)*x5968*x5975)));
evalcond[2]=((((-1.0)*r02*x5972))+(((-1.0)*sj0))+((r01*x5974))+(((-1.0)*x5971*x5975)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5966))+((r21*x5976))+(((-1.0)*x5970*x5972)));
evalcond[4]=(((r02*x5966))+((cj0*x5969))+((r01*x5976))+(((-1.0)*cj0*x5973))+(((-1.0)*x5971*x5972)));
evalcond[5]=((((-1.0)*sj0*x5973))+((r11*x5976))+((r12*x5966))+((sj0*x5969))+(((-1.0)*x5968*x5972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5977=((1.0)*gconst131);
CheckValue<IkReal> x5978=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5977))+(((-1.0)*gconst130*r10)))),-1);
if(!x5978.valid){
continue;
}
CheckValue<IkReal> x5979 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5977))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5978.value)))+(x5979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5980=IKsin(j4);
IkReal x5981=IKcos(j4);
IkReal x5982=(gconst131*r10);
IkReal x5983=(sj1*sj2);
IkReal x5984=(gconst131*r20);
IkReal x5985=(gconst131*r00);
IkReal x5986=((1.0)*x5981);
IkReal x5987=((1.0)*cj1*cj2);
IkReal x5988=(gconst130*x5980);
IkReal x5989=((1.0)*x5980);
IkReal x5990=(gconst130*x5981);
evalcond[0]=(((r21*x5988))+(((-1.0)*x5984*x5989))+(((-1.0)*r22*x5986)));
evalcond[1]=((((-1.0)*r12*x5986))+cj0+((r11*x5988))+(((-1.0)*x5982*x5989)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5985*x5989))+(((-1.0)*r02*x5986))+((r01*x5988)));
evalcond[3]=(((r21*x5990))+((cj2*sj1))+(((-1.0)*x5984*x5986))+((cj1*sj2))+((r22*x5980)));
evalcond[4]=((((-1.0)*x5985*x5986))+((r02*x5980))+((cj0*x5983))+((r01*x5990))+(((-1.0)*cj0*x5987)));
evalcond[5]=(((r12*x5980))+((r11*x5990))+((sj0*x5983))+(((-1.0)*sj0*x5987))+(((-1.0)*x5982*x5986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5991=((1.0)*gconst131);
CheckValue<IkReal> x5992=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5991)))),-1);
if(!x5992.valid){
continue;
}
CheckValue<IkReal> x5993 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5992.value)))+(x5993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5994=IKsin(j4);
IkReal x5995=IKcos(j4);
IkReal x5996=(gconst131*r10);
IkReal x5997=(sj1*sj2);
IkReal x5998=(gconst131*r20);
IkReal x5999=(gconst131*r00);
IkReal x6000=((1.0)*x5995);
IkReal x6001=((1.0)*cj1*cj2);
IkReal x6002=(gconst130*x5994);
IkReal x6003=((1.0)*x5994);
IkReal x6004=(gconst130*x5995);
evalcond[0]=(((r21*x6002))+(((-1.0)*x5998*x6003))+(((-1.0)*r22*x6000)));
evalcond[1]=(cj0+((r11*x6002))+(((-1.0)*x5996*x6003))+(((-1.0)*r12*x6000)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5999*x6003))+((r01*x6002))+(((-1.0)*r02*x6000)));
evalcond[3]=(((r21*x6004))+((cj2*sj1))+(((-1.0)*x5998*x6000))+((cj1*sj2))+((r22*x5994)));
evalcond[4]=(((r02*x5994))+(((-1.0)*cj0*x6001))+((cj0*x5997))+(((-1.0)*x5999*x6000))+((r01*x6004)));
evalcond[5]=(((r12*x5994))+(((-1.0)*sj0*x6001))+((sj0*x5997))+((r11*x6004))+(((-1.0)*x5996*x6000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6005=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6005;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6006=((1.0)*cj5);
IkReal x6007=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6006)));
j4eval[0]=x6007;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6006))))));
j4eval[2]=IKsign(x6007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6008=cj5*cj5;
IkReal x6009=r01*r01;
IkReal x6010=(cj5*r00);
IkReal x6011=(r01*sj5);
IkReal x6012=((((-1.0)*x6008*x6009))+x6009+((x6008*(r00*r00)))+(((-2.0)*x6010*x6011))+(r02*r02));
j4eval[0]=x6012;
j4eval[1]=IKsign(x6012);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6010))+x6011))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6013=cj5*cj5;
IkReal x6014=r01*r01;
IkReal x6015=(r01*sj5);
IkReal x6016=(cj5*r00);
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(IKsign((x6014+((x6013*(r00*r00)))+(((-1.0)*x6013*x6014))+(r02*r02)+(((-2.0)*x6015*x6016)))),-1);
if(!x6017.valid){
continue;
}
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal(((((-1.0)*x6016))+x6015)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6017.value)))+(x6018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6019=IKcos(j4);
IkReal x6020=IKsin(j4);
IkReal x6021=(cj5*r00);
IkReal x6022=(cj5*r10);
IkReal x6023=(r21*sj5);
IkReal x6024=(cj5*r20);
IkReal x6025=((1.0)*x6019);
IkReal x6026=((1.0)*x6020);
IkReal x6027=(sj5*x6020);
IkReal x6028=(sj5*x6019);
evalcond[0]=(((r02*x6020))+((r01*x6028))+(((-1.0)*x6021*x6025)));
evalcond[1]=((((-1.0)*x6024*x6026))+((x6020*x6023))+(((-1.0)*r22*x6025)));
evalcond[2]=(((r11*x6027))+(((-1.0)*x6022*x6026))+(((-1.0)*r12*x6025)));
evalcond[3]=((-1.0)+((r01*x6027))+(((-1.0)*x6021*x6026))+(((-1.0)*r02*x6025)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6024*x6025))+((cj1*sj2))+((x6019*x6023))+((r22*x6020)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6020))+((r11*x6028))+(((-1.0)*x6022*x6025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6029=((1.0)*cj5);
CheckValue<IkReal> x6030 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6030.valid){
continue;
}
CheckValue<IkReal> x6031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6029))+(((-1.0)*r10*sj5)))),-1);
if(!x6031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6030.value)+(((1.5707963267949)*(x6031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6032=IKcos(j4);
IkReal x6033=IKsin(j4);
IkReal x6034=(cj5*r00);
IkReal x6035=(cj5*r10);
IkReal x6036=(r21*sj5);
IkReal x6037=(cj5*r20);
IkReal x6038=((1.0)*x6032);
IkReal x6039=((1.0)*x6033);
IkReal x6040=(sj5*x6033);
IkReal x6041=(sj5*x6032);
evalcond[0]=(((r02*x6033))+(((-1.0)*x6034*x6038))+((r01*x6041)));
evalcond[1]=(((x6033*x6036))+(((-1.0)*r22*x6038))+(((-1.0)*x6037*x6039)));
evalcond[2]=(((r11*x6040))+(((-1.0)*x6035*x6039))+(((-1.0)*r12*x6038)));
evalcond[3]=((-1.0)+(((-1.0)*x6034*x6039))+((r01*x6040))+(((-1.0)*r02*x6038)));
evalcond[4]=(((r22*x6033))+((cj2*sj1))+((cj1*sj2))+((x6032*x6036))+(((-1.0)*x6037*x6038)));
evalcond[5]=(((r11*x6041))+((r12*x6033))+(((-1.0)*x6035*x6038))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6042=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6042.valid){
continue;
}
CheckValue<IkReal> x6043 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6042.value)))+(x6043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6044=IKcos(j4);
IkReal x6045=IKsin(j4);
IkReal x6046=(cj5*r00);
IkReal x6047=(cj5*r10);
IkReal x6048=(r21*sj5);
IkReal x6049=(cj5*r20);
IkReal x6050=((1.0)*x6044);
IkReal x6051=((1.0)*x6045);
IkReal x6052=(sj5*x6045);
IkReal x6053=(sj5*x6044);
evalcond[0]=(((r01*x6053))+(((-1.0)*x6046*x6050))+((r02*x6045)));
evalcond[1]=((((-1.0)*r22*x6050))+(((-1.0)*x6049*x6051))+((x6045*x6048)));
evalcond[2]=((((-1.0)*r12*x6050))+(((-1.0)*x6047*x6051))+((r11*x6052)));
evalcond[3]=((-1.0)+((r01*x6052))+(((-1.0)*x6046*x6051))+(((-1.0)*r02*x6050)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6045))+(((-1.0)*x6049*x6050))+((x6044*x6048)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6047*x6050))+((r12*x6045))+((r11*x6053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6054=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6054;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6055=((1.0)*cj5);
IkReal x6056=((((-1.0)*r21*x6055))+(((-1.0)*r20*sj5)));
j4eval[0]=x6056;
j4eval[1]=((IKabs(((((-1.0)*r10*x6055))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6057=(r01*sj5);
IkReal x6058=(cj1*sj2);
IkReal x6059=(cj2*sj1);
IkReal x6060=((1.0)*r02);
IkReal x6061=((1.0)*cj5*r00);
IkReal x6062=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6062;
j4eval[1]=((IKabs(((((-1.0)*x6059*x6061))+(((-1.0)*x6058*x6061))+((x6057*x6058))+((x6057*x6059)))))+(IKabs(((((-1.0)*x6059*x6060))+(((-1.0)*x6058*x6060))))));
j4eval[2]=IKsign(x6062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6063=(r01*sj5);
IkReal x6064=(cj1*sj2);
IkReal x6065=(cj2*sj1);
IkReal x6066=((1.0)*r02);
IkReal x6067=((1.0)*cj5*r00);
CheckValue<IkReal> x6068 = IKatan2WithCheck(IkReal(((((-1.0)*x6064*x6067))+((x6063*x6064))+((x6063*x6065))+(((-1.0)*x6065*x6067)))),IkReal(((((-1.0)*x6064*x6066))+(((-1.0)*x6065*x6066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6068.valid){
continue;
}
CheckValue<IkReal> x6069=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6068.value)+(((1.5707963267949)*(x6069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6070=IKcos(j4);
IkReal x6071=IKsin(j4);
IkReal x6072=(cj5*r00);
IkReal x6073=(cj5*r10);
IkReal x6074=(r21*sj5);
IkReal x6075=(cj5*r20);
IkReal x6076=((1.0)*x6070);
IkReal x6077=((1.0)*x6071);
IkReal x6078=(sj5*x6071);
IkReal x6079=(sj5*x6070);
evalcond[0]=(((r01*x6079))+(((-1.0)*x6072*x6076))+((r02*x6071)));
evalcond[1]=(((x6071*x6074))+(((-1.0)*r22*x6076))+(((-1.0)*x6075*x6077)));
evalcond[2]=(((r11*x6078))+(((-1.0)*x6073*x6077))+(((-1.0)*r12*x6076)));
evalcond[3]=((1.0)+((r01*x6078))+(((-1.0)*r02*x6076))+(((-1.0)*x6072*x6077)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6071))+((x6070*x6074))+(((-1.0)*x6075*x6076)));
evalcond[5]=(((r11*x6079))+(((-1.0)*sj1*sj2))+(((-1.0)*x6073*x6076))+((cj1*cj2))+((r12*x6071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6080=((1.0)*cj5);
CheckValue<IkReal> x6081 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6081.valid){
continue;
}
CheckValue<IkReal> x6082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6080))+(((-1.0)*r20*sj5)))),-1);
if(!x6082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6081.value)+(((1.5707963267949)*(x6082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6083=IKcos(j4);
IkReal x6084=IKsin(j4);
IkReal x6085=(cj5*r00);
IkReal x6086=(cj5*r10);
IkReal x6087=(r21*sj5);
IkReal x6088=(cj5*r20);
IkReal x6089=((1.0)*x6083);
IkReal x6090=((1.0)*x6084);
IkReal x6091=(sj5*x6084);
IkReal x6092=(sj5*x6083);
evalcond[0]=((((-1.0)*x6085*x6089))+((r01*x6092))+((r02*x6084)));
evalcond[1]=((((-1.0)*r22*x6089))+((x6084*x6087))+(((-1.0)*x6088*x6090)));
evalcond[2]=((((-1.0)*r12*x6089))+((r11*x6091))+(((-1.0)*x6086*x6090)));
evalcond[3]=((1.0)+((r01*x6091))+(((-1.0)*r02*x6089))+(((-1.0)*x6085*x6090)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6088*x6089))+((cj1*sj2))+((r22*x6084))+((x6083*x6087)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6084))+((r11*x6092))+(((-1.0)*x6086*x6089))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6093 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6093.valid){
continue;
}
CheckValue<IkReal> x6094=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6093.value)+(((1.5707963267949)*(x6094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6095=IKcos(j4);
IkReal x6096=IKsin(j4);
IkReal x6097=(cj5*r00);
IkReal x6098=(cj5*r10);
IkReal x6099=(r21*sj5);
IkReal x6100=(cj5*r20);
IkReal x6101=((1.0)*x6095);
IkReal x6102=((1.0)*x6096);
IkReal x6103=(sj5*x6096);
IkReal x6104=(sj5*x6095);
evalcond[0]=(((r01*x6104))+((r02*x6096))+(((-1.0)*x6097*x6101)));
evalcond[1]=(((x6096*x6099))+(((-1.0)*r22*x6101))+(((-1.0)*x6100*x6102)));
evalcond[2]=(((r11*x6103))+(((-1.0)*x6098*x6102))+(((-1.0)*r12*x6101)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6101))+((r01*x6103))+(((-1.0)*x6097*x6102)));
evalcond[4]=(((x6095*x6099))+((cj2*sj1))+((cj1*sj2))+((r22*x6096))+(((-1.0)*x6100*x6101)));
evalcond[5]=(((r11*x6104))+(((-1.0)*sj1*sj2))+(((-1.0)*x6098*x6101))+((r12*x6096))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6105=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6105);
rxp1_1=(px*r21);
rxp1_2=(r11*x6105);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6106=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6106);
rxp1_1=(px*r21);
rxp1_2=(r11*x6106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6107=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6107);
rxp1_1=(px*r21);
rxp1_2=(r11*x6107);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6110=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6110.valid){
continue;
}
IkReal x6108=x6110.value;
IkReal x6109=(sj0*x6108);
cj4array[0]=(((cj1*cj2*x6109))+(((-1.0)*sj1*sj2*x6109)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6111=IKsin(j4);
IkReal x6112=IKcos(j4);
IkReal x6113=(r21*sj5);
IkReal x6114=((1.0)*cj5*r20);
evalcond[0]=(r02*x6111);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6112)));
evalcond[2]=(((x6111*x6113))+(((-1.0)*x6111*x6114)));
evalcond[3]=(((r11*sj5*x6111))+(((-1.0)*cj5*r10*x6111)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6112*x6114))+((cj1*sj2))+((x6112*x6113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6117=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6117.valid){
continue;
}
IkReal x6115=x6117.value;
IkReal x6116=((1.0)*x6115);
cj4array[0]=((((-1.0)*cj1*sj2*x6116))+(((-1.0)*cj2*sj1*x6116)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6118=IKsin(j4);
IkReal x6119=IKcos(j4);
IkReal x6120=((1.0)*sj0);
IkReal x6121=((1.0)*cj5);
IkReal x6122=(sj5*x6118);
evalcond[0]=(r02*x6118);
evalcond[1]=((((-1.0)*x6120))+(((-1.0)*r02*x6119)));
evalcond[2]=(((r21*x6122))+(((-1.0)*r20*x6118*x6121)));
evalcond[3]=((((-1.0)*r10*x6118*x6121))+((r11*x6122)));
evalcond[4]=(((r11*sj5*x6119))+(((-1.0)*cj1*cj2*x6120))+(((-1.0)*r10*x6119*x6121))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6123=IKPowWithIntegerCheck(r02,-1);
if(!x6123.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6123.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6124=IKsin(j4);
IkReal x6125=IKcos(j4);
IkReal x6126=(r21*sj5);
IkReal x6127=((1.0)*cj5);
IkReal x6128=(r11*sj5);
evalcond[0]=(r02*x6124);
evalcond[1]=(((x6124*x6126))+(((-1.0)*r20*x6124*x6127)));
evalcond[2]=(((x6124*x6128))+(((-1.0)*r10*x6124*x6127)));
evalcond[3]=(((x6125*x6126))+(((-1.0)*r20*x6125*x6127))+((cj2*sj1))+((cj1*sj2)));
evalcond[4]=(((x6125*x6128))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6125*x6127))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6129=((1.0)*sj0);
IkReal x6130=((1.0)*cj0);
CheckValue<IkReal> x6131 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6129))+(((-1.0)*r02*x6130)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6129))+(((-1.0)*r01*sj5*x6130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6131.valid){
continue;
}
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6131.value)+(((1.5707963267949)*(x6132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6133=IKsin(j4);
IkReal x6134=IKcos(j4);
IkReal x6135=(cj5*r00);
IkReal x6136=(cj5*r10);
IkReal x6137=(r21*sj5);
IkReal x6138=(sj1*sj2);
IkReal x6139=(cj5*r20);
IkReal x6140=((1.0)*x6134);
IkReal x6141=((1.0)*cj1*cj2);
IkReal x6142=((1.0)*x6133);
IkReal x6143=(sj5*x6133);
IkReal x6144=(sj5*x6134);
evalcond[0]=((((-1.0)*x6139*x6142))+((x6133*x6137))+(((-1.0)*r22*x6140)));
evalcond[1]=(cj0+(((-1.0)*x6136*x6142))+((r11*x6143))+(((-1.0)*r12*x6140)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6140))+((r01*x6143))+(((-1.0)*x6135*x6142)));
evalcond[3]=((((-1.0)*x6139*x6140))+((cj2*sj1))+((r22*x6133))+((cj1*sj2))+((x6134*x6137)));
evalcond[4]=(((cj0*x6138))+((r01*x6144))+((r02*x6133))+(((-1.0)*x6135*x6140))+(((-1.0)*cj0*x6141)));
evalcond[5]=((((-1.0)*x6136*x6140))+(((-1.0)*sj0*x6141))+((r11*x6144))+((r12*x6133))+((sj0*x6138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6145=((1.0)*cj5);
CheckValue<IkReal> x6146 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6145))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6146.valid){
continue;
}
CheckValue<IkReal> x6147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6145)))),-1);
if(!x6147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6146.value)+(((1.5707963267949)*(x6147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6148=IKsin(j4);
IkReal x6149=IKcos(j4);
IkReal x6150=(cj5*r00);
IkReal x6151=(cj5*r10);
IkReal x6152=(r21*sj5);
IkReal x6153=(sj1*sj2);
IkReal x6154=(cj5*r20);
IkReal x6155=((1.0)*x6149);
IkReal x6156=((1.0)*cj1*cj2);
IkReal x6157=((1.0)*x6148);
IkReal x6158=(sj5*x6148);
IkReal x6159=(sj5*x6149);
evalcond[0]=(((x6148*x6152))+(((-1.0)*r22*x6155))+(((-1.0)*x6154*x6157)));
evalcond[1]=(cj0+(((-1.0)*x6151*x6157))+(((-1.0)*r12*x6155))+((r11*x6158)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6155))+(((-1.0)*x6150*x6157))+((r01*x6158)));
evalcond[3]=(((cj2*sj1))+((x6149*x6152))+((cj1*sj2))+((r22*x6148))+(((-1.0)*x6154*x6155)));
evalcond[4]=(((cj0*x6153))+(((-1.0)*x6150*x6155))+(((-1.0)*cj0*x6156))+((r02*x6148))+((r01*x6159)));
evalcond[5]=(((sj0*x6153))+(((-1.0)*x6151*x6155))+((r12*x6148))+((r11*x6159))+(((-1.0)*sj0*x6156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6160=((1.0)*cj5);
CheckValue<IkReal> x6161 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6161.valid){
continue;
}
CheckValue<IkReal> x6162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6160)))),-1);
if(!x6162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6161.value)+(((1.5707963267949)*(x6162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6163=IKsin(j4);
IkReal x6164=IKcos(j4);
IkReal x6165=(cj5*r00);
IkReal x6166=(cj5*r10);
IkReal x6167=(r21*sj5);
IkReal x6168=(sj1*sj2);
IkReal x6169=(cj5*r20);
IkReal x6170=((1.0)*x6164);
IkReal x6171=((1.0)*cj1*cj2);
IkReal x6172=((1.0)*x6163);
IkReal x6173=(sj5*x6163);
IkReal x6174=(sj5*x6164);
evalcond[0]=(((x6163*x6167))+(((-1.0)*r22*x6170))+(((-1.0)*x6169*x6172)));
evalcond[1]=(cj0+(((-1.0)*x6166*x6172))+((r11*x6173))+(((-1.0)*r12*x6170)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6173))+(((-1.0)*r02*x6170))+(((-1.0)*x6165*x6172)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6164*x6167))+(((-1.0)*x6169*x6170))+((r22*x6163)));
evalcond[4]=((((-1.0)*cj0*x6171))+((r02*x6163))+((r01*x6174))+((cj0*x6168))+(((-1.0)*x6165*x6170)));
evalcond[5]=((((-1.0)*sj0*x6171))+((sj0*x6168))+((r12*x6163))+(((-1.0)*x6166*x6170))+((r11*x6174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6175=r21*r21;
IkReal x6176=cj5*cj5;
IkReal x6177=(cj2*sj1);
IkReal x6178=(cj1*sj2);
IkReal x6179=(r21*sj5);
IkReal x6180=((1.0)*cj5*r20);
CheckValue<IkReal> x6181 = IKatan2WithCheck(IkReal((((r22*x6178))+((r22*x6177)))),IkReal(((((-1.0)*x6178*x6180))+((x6178*x6179))+((x6177*x6179))+(((-1.0)*x6177*x6180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6181.valid){
continue;
}
CheckValue<IkReal> x6182=IKPowWithIntegerCheck(IKsign((((x6175*x6176))+(((2.0)*cj5*r20*x6179))+(((-1.0)*x6176*(r20*r20)))+(((-1.0)*x6175))+(((-1.0)*(r22*r22))))),-1);
if(!x6182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6181.value)+(((1.5707963267949)*(x6182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6183=IKsin(j4);
IkReal x6184=IKcos(j4);
IkReal x6185=(r21*sj5);
IkReal x6186=(cj5*r20);
IkReal x6187=((1.0)*x6184);
evalcond[0]=((((-1.0)*r22*x6187))+((x6183*x6185))+(((-1.0)*x6183*x6186)));
evalcond[1]=(((cj2*sj1))+((x6184*x6185))+((r22*x6183))+((cj1*sj2))+(((-1.0)*x6186*x6187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6188=(cj5*sj4);
IkReal x6189=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6189))+(((-1.0)*r00*x6188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6188))+(((-1.0)*r11*x6189))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6189))+(((-1.0)*r00*x6188))))+IKsqr((((r10*x6188))+(((-1.0)*r11*x6189))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6189))+(((-1.0)*r00*x6188))), (((r10*x6188))+(((-1.0)*r11*x6189))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6190=IKcos(j0);
IkReal x6191=IKsin(j0);
IkReal x6192=((0.1)*sj5);
IkReal x6193=((0.392)*sj1);
IkReal x6194=(cj5*r11);
IkReal x6195=(cj5*r01);
IkReal x6196=((1.0)*cj1);
IkReal x6197=(r11*sj5);
IkReal x6198=((0.392)*cj2);
IkReal x6199=((1.0)*sj1);
IkReal x6200=((1.0)*cj4);
IkReal x6201=(r01*sj5);
IkReal x6202=(sj2*x6191);
IkReal x6203=(sj2*x6190);
IkReal x6204=(cj5*x6200);
IkReal x6205=(cj1*x6190);
IkReal x6206=(cj1*x6191);
IkReal x6207=(cj2*x6190);
IkReal x6208=((1.0)*cj5*sj4);
IkReal x6209=(cj2*x6191);
evalcond[0]=(x6190+((sj4*x6197))+(((-1.0)*r12*x6200))+(((-1.0)*r10*x6208)));
evalcond[1]=((((-1.0)*r00*x6208))+(((-1.0)*r02*x6200))+(((-1.0)*x6191))+((sj4*x6201)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x6199*x6207))+(((-1.0)*x6196*x6203))+x6195);
evalcond[3]=((((-1.0)*x6199*x6209))+((r10*sj5))+(((-1.0)*x6196*x6202))+x6194);
evalcond[4]=((((-1.0)*r00*x6204))+(((-1.0)*x6196*x6207))+((sj1*x6203))+((r02*sj4))+((cj4*x6201)));
evalcond[5]=((((-1.0)*x6196*x6209))+((sj1*x6202))+((r12*sj4))+((cj4*x6197))+(((-1.0)*r10*x6204)));
evalcond[6]=(((x6198*x6205))+(((-0.1)*x6195))+(((-1.0)*x6193*x6203))+(((-1.0)*px))+(((0.425)*x6205))+(((-0.134)*x6191))+(((-1.0)*r00*x6192)));
evalcond[7]=((((-1.0)*r10*x6192))+((x6198*x6206))+(((-0.1)*x6194))+(((-1.0)*x6193*x6202))+(((-1.0)*py))+(((0.425)*x6206))+(((0.134)*x6190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6210=((1.0)*cj5);
IkReal x6211=((1.0)*sj5);
CheckValue<IkReal> x6212 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6210))+(((-1.0)*r10*x6211)))),IkReal(((((-1.0)*r00*x6211))+(((-1.0)*r01*x6210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6212.valid){
continue;
}
CheckValue<IkReal> x6213=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6213.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6212.value)+(((1.5707963267949)*(x6213.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6214=IKcos(j0);
IkReal x6215=IKsin(j0);
IkReal x6216=((0.1)*sj5);
IkReal x6217=(cj5*r11);
IkReal x6218=(cj5*r01);
IkReal x6219=((0.392)*cj2);
IkReal x6220=((1.0)*cj2);
IkReal x6221=((0.392)*sj2);
IkReal x6222=((1.0)*cj1*sj2);
IkReal x6223=(cj1*x6214);
IkReal x6224=(cj1*x6215);
IkReal x6225=(sj1*x6214);
IkReal x6226=(sj1*x6215);
evalcond[0]=(((r00*sj5))+x6218+(((-1.0)*x6214*x6222))+(((-1.0)*x6220*x6225)));
evalcond[1]=(x6217+((r10*sj5))+(((-1.0)*x6215*x6222))+(((-1.0)*x6220*x6226)));
evalcond[2]=((((-0.134)*x6215))+(((-1.0)*r00*x6216))+((x6219*x6223))+(((-1.0)*px))+(((-0.1)*x6218))+(((0.425)*x6223))+(((-1.0)*x6221*x6225)));
evalcond[3]=(((x6219*x6224))+(((-1.0)*py))+(((0.134)*x6214))+(((-0.1)*x6217))+(((0.425)*x6224))+(((-1.0)*r10*x6216))+(((-1.0)*x6221*x6226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6227=((1.0)*cj5);
IkReal x6228=((((-1.0)*r01*x6227))+(((-1.0)*r00*sj5)));
j4eval[0]=x6228;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6227)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6229=((1.0)*cj5);
IkReal x6230=((((-1.0)*r11*x6229))+(((-1.0)*r10*sj5)));
j4eval[0]=x6230;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6229))))));
j4eval[2]=IKsign(x6230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6231=((1.0)*sj0);
IkReal x6232=((1.0)*cj0);
IkReal x6233=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6233;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6232))+(((-1.0)*r11*sj5*x6231)))))+(IKabs(((((-1.0)*r12*x6231))+(((-1.0)*r02*x6232))))));
j4eval[2]=IKsign(x6233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6234=((-1.0)*r20);
IkReal x6236 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6236)==0){
continue;
}
IkReal x6235=pow(x6236,-0.5);
CheckValue<IkReal> x6237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6234),IKFAST_ATAN2_MAGTHRESH);
if(!x6237.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6237.value));
IkReal gconst115=(r21*x6235);
IkReal gconst116=(x6234*x6235);
CheckValue<IkReal> x6238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6238.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6238.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6239=((-1.0)*r20);
IkReal x6240=x6235;
CheckValue<IkReal> x6242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6239),IKFAST_ATAN2_MAGTHRESH);
if(!x6242.valid){
continue;
}
IkReal x6241=((-1.0)*(x6242.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6241;
IkReal gconst114=x6241;
IkReal gconst115=(r21*x6240);
IkReal gconst116=(x6239*x6240);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6243=((-1.0)*r20);
IkReal x6244=x6235;
CheckValue<IkReal> x6246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6243),IKFAST_ATAN2_MAGTHRESH);
if(!x6246.valid){
continue;
}
IkReal x6245=((-1.0)*(x6246.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6245;
IkReal gconst114=x6245;
IkReal gconst115=(r21*x6244);
IkReal gconst116=(x6243*x6244);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6247=((-1.0)*r20);
IkReal x6248=x6235;
CheckValue<IkReal> x6250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6247),IKFAST_ATAN2_MAGTHRESH);
if(!x6250.valid){
continue;
}
IkReal x6249=((-1.0)*(x6250.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6249;
IkReal gconst114=x6249;
IkReal gconst115=(r21*x6248);
IkReal gconst116=(x6247*x6248);
IkReal x6251=((1.0)*(r22*r22));
CheckValue<IkReal> x6255=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6251))),-1);
if(!x6255.valid){
continue;
}
IkReal x6252=x6255.value;
IkReal x6253=((1.0)*x6252);
IkReal x6254=((((-1.0)*x6253*(r21*r21*r21*r21)))+(((-1.0)*x6253*(r20*r20*r20*r20)))+(((-2.0)*x6252*(r20*r20)*(r21*r21)))+(((-1.0)*x6251)));
j4eval[0]=x6254;
j4eval[1]=IKsign(x6254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6256=(cj2*sj1);
IkReal x6257=(gconst115*r21);
IkReal x6258=(cj1*sj2);
IkReal x6259=((1.0)*gconst116*r20);
CheckValue<IkReal> x6260 = IKatan2WithCheck(IkReal((((r22*x6258))+((r22*x6256)))),IkReal((((x6256*x6257))+(((-1.0)*x6258*x6259))+(((-1.0)*x6256*x6259))+((x6257*x6258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6260.valid){
continue;
}
CheckValue<IkReal> x6261=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6257*x6257)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6257))+(((-1.0)*gconst116*r20*x6259)))),-1);
if(!x6261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6260.value)+(((1.5707963267949)*(x6261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6262=IKsin(j4);
IkReal x6263=IKcos(j4);
IkReal x6264=(sj1*sj2);
IkReal x6265=((1.0)*x6263);
IkReal x6266=((1.0)*cj1*cj2);
IkReal x6267=(gconst115*x6262);
IkReal x6268=(gconst115*x6263);
IkReal x6269=((1.0)*gconst116*x6262);
evalcond[0]=(((r21*x6267))+(((-1.0)*r22*x6265))+(((-1.0)*r20*x6269)));
evalcond[1]=(cj0+(((-1.0)*r10*x6269))+(((-1.0)*r12*x6265))+((r11*x6267)));
evalcond[2]=(((r01*x6267))+(((-1.0)*sj0))+(((-1.0)*r02*x6265))+(((-1.0)*r00*x6269)));
evalcond[3]=(((cj2*sj1))+((r22*x6262))+((cj1*sj2))+((r21*x6268))+(((-1.0)*gconst116*r20*x6265)));
evalcond[4]=(((r01*x6268))+(((-1.0)*gconst116*r00*x6265))+(((-1.0)*cj0*x6266))+((r02*x6262))+((cj0*x6264)));
evalcond[5]=((((-1.0)*gconst116*r10*x6265))+((sj0*x6264))+((r12*x6262))+(((-1.0)*sj0*x6266))+((r11*x6268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6270=((1.0)*gconst116);
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
CheckValue<IkReal> x6272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6270)))),-1);
if(!x6272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6271.value)+(((1.5707963267949)*(x6272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6273=IKsin(j4);
IkReal x6274=IKcos(j4);
IkReal x6275=(sj1*sj2);
IkReal x6276=((1.0)*x6274);
IkReal x6277=((1.0)*cj1*cj2);
IkReal x6278=(gconst115*x6273);
IkReal x6279=(gconst115*x6274);
IkReal x6280=((1.0)*gconst116*x6273);
evalcond[0]=((((-1.0)*r20*x6280))+((r21*x6278))+(((-1.0)*r22*x6276)));
evalcond[1]=(cj0+(((-1.0)*r10*x6280))+(((-1.0)*r12*x6276))+((r11*x6278)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6278))+(((-1.0)*r02*x6276))+(((-1.0)*r00*x6280)));
evalcond[3]=(((r22*x6273))+((cj2*sj1))+((cj1*sj2))+((r21*x6279))+(((-1.0)*gconst116*r20*x6276)));
evalcond[4]=(((r01*x6279))+((r02*x6273))+(((-1.0)*gconst116*r00*x6276))+(((-1.0)*cj0*x6277))+((cj0*x6275)));
evalcond[5]=(((r12*x6273))+(((-1.0)*sj0*x6277))+(((-1.0)*gconst116*r10*x6276))+((sj0*x6275))+((r11*x6279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6281=((1.0)*gconst116);
CheckValue<IkReal> x6282 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6282.valid){
continue;
}
CheckValue<IkReal> x6283=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6281)))),-1);
if(!x6283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6282.value)+(((1.5707963267949)*(x6283.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6284=IKsin(j4);
IkReal x6285=IKcos(j4);
IkReal x6286=(sj1*sj2);
IkReal x6287=((1.0)*x6285);
IkReal x6288=((1.0)*cj1*cj2);
IkReal x6289=(gconst115*x6284);
IkReal x6290=(gconst115*x6285);
IkReal x6291=((1.0)*gconst116*x6284);
evalcond[0]=((((-1.0)*r20*x6291))+(((-1.0)*r22*x6287))+((r21*x6289)));
evalcond[1]=(cj0+((r11*x6289))+(((-1.0)*r10*x6291))+(((-1.0)*r12*x6287)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6291))+(((-1.0)*r02*x6287))+((r01*x6289)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6287))+((r22*x6284))+((cj1*sj2))+((r21*x6290)));
evalcond[4]=((((-1.0)*gconst116*r00*x6287))+((r01*x6290))+((cj0*x6286))+(((-1.0)*cj0*x6288))+((r02*x6284)));
evalcond[5]=(((r11*x6290))+((r12*x6284))+(((-1.0)*gconst116*r10*x6287))+((sj0*x6286))+(((-1.0)*sj0*x6288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6292=((-1.0)*r21);
IkReal x6294 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6294)==0){
continue;
}
IkReal x6293=pow(x6294,-0.5);
CheckValue<IkReal> x6295 = IKatan2WithCheck(IkReal(x6292),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6295.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6295.value))));
IkReal gconst118=(x6292*x6293);
IkReal gconst119=((1.0)*r20*x6293);
CheckValue<IkReal> x6296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6296.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6296.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6297=((-1.0)*r21);
CheckValue<IkReal> x6300 = IKatan2WithCheck(IkReal(x6297),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6300.valid){
continue;
}
IkReal x6298=((1.0)*(x6300.value));
IkReal x6299=x6293;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6298)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6298)));
IkReal gconst118=(x6297*x6299);
IkReal gconst119=((1.0)*r20*x6299);
IkReal x6301=r22*r22;
IkReal x6302=((1.0)*x6301);
CheckValue<IkReal> x6306=IKPowWithIntegerCheck(((-1.0)+x6301),-1);
if(!x6306.valid){
continue;
}
IkReal x6303=x6306.value;
if((((1.0)+(((-1.0)*x6302)))) < -0.00001)
continue;
IkReal x6304=IKsqrt(((1.0)+(((-1.0)*x6302))));
IkReal x6305=(cj0*x6303*x6304);
j4eval[0]=((IKabs(((((-1.0)*x6302*x6305))+x6305)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6307=((-1.0)*r21);
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal(x6307),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
IkReal x6308=((1.0)*(x6310.value));
IkReal x6309=x6293;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6308)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6308)));
IkReal gconst118=(x6307*x6309);
IkReal gconst119=((1.0)*r20*x6309);
IkReal x6311=r22*r22;
IkReal x6312=((1.0)*x6311);
CheckValue<IkReal> x6316=IKPowWithIntegerCheck(((-1.0)+x6311),-1);
if(!x6316.valid){
continue;
}
IkReal x6313=x6316.value;
if((((1.0)+(((-1.0)*x6312)))) < -0.00001)
continue;
IkReal x6314=IKsqrt(((1.0)+(((-1.0)*x6312))));
IkReal x6315=(sj0*x6313*x6314);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x6312*x6315))+x6315))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6317=((-1.0)*r21);
CheckValue<IkReal> x6320 = IKatan2WithCheck(IkReal(x6317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6320.valid){
continue;
}
IkReal x6318=((1.0)*(x6320.value));
IkReal x6319=x6293;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6318)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6318)));
IkReal gconst118=(x6317*x6319);
IkReal gconst119=((1.0)*r20*x6319);
IkReal x6321=r22*r22;
IkReal x6322=(r12*sj0);
IkReal x6323=(cj0*r02);
CheckValue<IkReal> x6327=IKPowWithIntegerCheck(((-1.0)+x6321),-1);
if(!x6327.valid){
continue;
}
IkReal x6324=x6327.value;
if((((1.0)+(((-1.0)*x6321)))) < -0.00001)
continue;
IkReal x6325=IKsqrt(((1.0)+(((-1.0)*x6321))));
IkReal x6326=(r22*x6324*x6325);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6323))+(((-1.0)*x6322)))))+(IKabs((((x6322*x6326))+((x6323*x6326))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6328=((1.0)*sj0);
IkReal x6329=((1.0)*gconst118);
CheckValue<IkReal> x6330=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6329)))),-1);
if(!x6330.valid){
continue;
}
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6328)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6329))+(((-1.0)*gconst118*r11*x6328))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6330.value)))+(x6331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6332=IKsin(j4);
IkReal x6333=IKcos(j4);
IkReal x6334=(gconst118*r01);
IkReal x6335=(sj1*sj2);
IkReal x6336=(gconst119*r20);
IkReal x6337=(gconst119*r10);
IkReal x6338=(gconst119*r00);
IkReal x6339=(gconst118*r21);
IkReal x6340=(gconst118*r11);
IkReal x6341=((1.0)*x6333);
IkReal x6342=((1.0)*cj1*cj2);
IkReal x6343=((1.0)*x6332);
evalcond[0]=((((-1.0)*r22*x6341))+((x6332*x6339))+(((-1.0)*x6336*x6343)));
evalcond[1]=(cj0+(((-1.0)*x6337*x6343))+((x6332*x6340))+(((-1.0)*r12*x6341)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6338*x6343))+((x6332*x6334))+(((-1.0)*r02*x6341)));
evalcond[3]=(((cj2*sj1))+((r22*x6332))+((cj1*sj2))+((x6333*x6339))+(((-1.0)*x6336*x6341)));
evalcond[4]=(((r02*x6332))+(((-1.0)*cj0*x6342))+(((-1.0)*x6338*x6341))+((x6333*x6334))+((cj0*x6335)));
evalcond[5]=(((r12*x6332))+(((-1.0)*x6337*x6341))+((sj0*x6335))+((x6333*x6340))+(((-1.0)*sj0*x6342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6344=((1.0)*gconst119);
CheckValue<IkReal> x6345 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6345.valid){
continue;
}
CheckValue<IkReal> x6346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6344))+(((-1.0)*gconst118*r10)))),-1);
if(!x6346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6345.value)+(((1.5707963267949)*(x6346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6347=IKsin(j4);
IkReal x6348=IKcos(j4);
IkReal x6349=(gconst118*r01);
IkReal x6350=(sj1*sj2);
IkReal x6351=(gconst119*r20);
IkReal x6352=(gconst119*r10);
IkReal x6353=(gconst119*r00);
IkReal x6354=(gconst118*r21);
IkReal x6355=(gconst118*r11);
IkReal x6356=((1.0)*x6348);
IkReal x6357=((1.0)*cj1*cj2);
IkReal x6358=((1.0)*x6347);
evalcond[0]=((((-1.0)*x6351*x6358))+((x6347*x6354))+(((-1.0)*r22*x6356)));
evalcond[1]=(cj0+((x6347*x6355))+(((-1.0)*r12*x6356))+(((-1.0)*x6352*x6358)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6353*x6358))+(((-1.0)*r02*x6356))+((x6347*x6349)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6351*x6356))+((r22*x6347))+((x6348*x6354))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x6357))+(((-1.0)*x6353*x6356))+((r02*x6347))+((x6348*x6349))+((cj0*x6350)));
evalcond[5]=(((r12*x6347))+((x6348*x6355))+(((-1.0)*sj0*x6357))+((sj0*x6350))+(((-1.0)*x6352*x6356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6359=((1.0)*gconst119);
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6359))+((cj0*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6359))+(((-1.0)*gconst118*r00)))),-1);
if(!x6361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6360.value)+(((1.5707963267949)*(x6361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6362=IKsin(j4);
IkReal x6363=IKcos(j4);
IkReal x6364=(gconst118*r01);
IkReal x6365=(sj1*sj2);
IkReal x6366=(gconst119*r20);
IkReal x6367=(gconst119*r10);
IkReal x6368=(gconst119*r00);
IkReal x6369=(gconst118*r21);
IkReal x6370=(gconst118*r11);
IkReal x6371=((1.0)*x6363);
IkReal x6372=((1.0)*cj1*cj2);
IkReal x6373=((1.0)*x6362);
evalcond[0]=((((-1.0)*x6366*x6373))+((x6362*x6369))+(((-1.0)*r22*x6371)));
evalcond[1]=(cj0+((x6362*x6370))+(((-1.0)*x6367*x6373))+(((-1.0)*r12*x6371)));
evalcond[2]=((((-1.0)*x6368*x6373))+(((-1.0)*sj0))+((x6362*x6364))+(((-1.0)*r02*x6371)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6366*x6371))+((cj1*sj2))+((x6363*x6369))+((r22*x6362)));
evalcond[4]=((((-1.0)*x6368*x6371))+((x6363*x6364))+((cj0*x6365))+((r02*x6362))+(((-1.0)*cj0*x6372)));
evalcond[5]=((((-1.0)*sj0*x6372))+((r12*x6362))+((sj0*x6365))+(((-1.0)*x6367*x6371))+((x6363*x6370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6374=((-1.0)*r10);
IkReal x6376 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6376)==0){
continue;
}
IkReal x6375=pow(x6376,-0.5);
CheckValue<IkReal> x6377 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6374),IKFAST_ATAN2_MAGTHRESH);
if(!x6377.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6377.value));
IkReal gconst121=(r11*x6375);
IkReal gconst122=(x6374*x6375);
CheckValue<IkReal> x6378 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6378.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6378.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6379=((-1.0)*r10);
IkReal x6380=x6375;
CheckValue<IkReal> x6382 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6379),IKFAST_ATAN2_MAGTHRESH);
if(!x6382.valid){
continue;
}
IkReal x6381=((-1.0)*(x6382.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6381;
IkReal gconst120=x6381;
IkReal gconst121=(r11*x6380);
IkReal gconst122=(x6379*x6380);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6383=((1.0)*sj0);
IkReal x6384=((1.0)*gconst121);
CheckValue<IkReal> x6385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6384))+(((-1.0)*gconst122*r21)))),-1);
if(!x6385.valid){
continue;
}
CheckValue<IkReal> x6386 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6383))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x6383))+(((-1.0)*cj0*r01*x6384))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6385.value)))+(x6386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6387=IKsin(j4);
IkReal x6388=IKcos(j4);
IkReal x6389=(gconst121*r11);
IkReal x6390=(sj1*sj2);
IkReal x6391=(gconst122*r00);
IkReal x6392=(gconst122*r10);
IkReal x6393=(gconst122*r20);
IkReal x6394=((1.0)*x6388);
IkReal x6395=((1.0)*cj1*cj2);
IkReal x6396=((1.0)*x6387);
IkReal x6397=(gconst121*x6387);
IkReal x6398=(gconst121*x6388);
evalcond[0]=((((-1.0)*r22*x6394))+((r21*x6397))+(((-1.0)*x6393*x6396)));
evalcond[1]=(cj0+(((-1.0)*x6392*x6396))+((x6387*x6389))+(((-1.0)*r12*x6394)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6397))+(((-1.0)*r02*x6394))+(((-1.0)*x6391*x6396)));
evalcond[3]=(((cj2*sj1))+((r22*x6387))+((cj1*sj2))+((r21*x6398))+(((-1.0)*x6393*x6394)));
evalcond[4]=(((cj0*x6390))+(((-1.0)*cj0*x6395))+((r02*x6387))+((r01*x6398))+(((-1.0)*x6391*x6394)));
evalcond[5]=((((-1.0)*sj0*x6395))+((sj0*x6390))+((x6388*x6389))+(((-1.0)*x6392*x6394))+((r12*x6387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6399=((1.0)*gconst122);
CheckValue<IkReal> x6400 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6399))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6400.valid){
continue;
}
CheckValue<IkReal> x6401=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6399)))),-1);
if(!x6401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6400.value)+(((1.5707963267949)*(x6401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6402=IKsin(j4);
IkReal x6403=IKcos(j4);
IkReal x6404=(gconst121*r11);
IkReal x6405=(sj1*sj2);
IkReal x6406=(gconst122*r00);
IkReal x6407=(gconst122*r10);
IkReal x6408=(gconst122*r20);
IkReal x6409=((1.0)*x6403);
IkReal x6410=((1.0)*cj1*cj2);
IkReal x6411=((1.0)*x6402);
IkReal x6412=(gconst121*x6402);
IkReal x6413=(gconst121*x6403);
evalcond[0]=(((r21*x6412))+(((-1.0)*x6408*x6411))+(((-1.0)*r22*x6409)));
evalcond[1]=(cj0+(((-1.0)*x6407*x6411))+(((-1.0)*r12*x6409))+((x6402*x6404)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6412))+(((-1.0)*x6406*x6411))+(((-1.0)*r02*x6409)));
evalcond[3]=(((cj2*sj1))+((r21*x6413))+((cj1*sj2))+(((-1.0)*x6408*x6409))+((r22*x6402)));
evalcond[4]=(((r02*x6402))+(((-1.0)*x6406*x6409))+((r01*x6413))+((cj0*x6405))+(((-1.0)*cj0*x6410)));
evalcond[5]=(((sj0*x6405))+(((-1.0)*x6407*x6409))+((r12*x6402))+(((-1.0)*sj0*x6410))+((x6403*x6404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6414=((-1.0)*r11);
IkReal x6416 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6416)==0){
continue;
}
IkReal x6415=pow(x6416,-0.5);
CheckValue<IkReal> x6417 = IKatan2WithCheck(IkReal(x6414),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6417.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6417.value))));
IkReal gconst124=(x6414*x6415);
IkReal gconst125=((1.0)*r10*x6415);
CheckValue<IkReal> x6418 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6418.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6418.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6419=((-1.0)*r11);
CheckValue<IkReal> x6422 = IKatan2WithCheck(IkReal(x6419),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6422.valid){
continue;
}
IkReal x6420=((1.0)*(x6422.value));
IkReal x6421=x6415;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6420)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6420)));
IkReal gconst124=(x6419*x6421);
IkReal gconst125=((1.0)*r10*x6421);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6423=((-1.0)*r11);
CheckValue<IkReal> x6426 = IKatan2WithCheck(IkReal(x6423),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6426.valid){
continue;
}
IkReal x6424=((1.0)*(x6426.value));
IkReal x6425=x6415;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6424)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6424)));
IkReal gconst124=(x6423*x6425);
IkReal gconst125=((1.0)*r10*x6425);
IkReal x6427=r12*r12;
IkReal x6428=((1.0)*sj0);
IkReal x6429=(cj0*r02);
IkReal x6430=x6415;
j4eval[0]=((IKabs(((((-1.0)*x6429))+(((-1.0)*r12*x6428)))))+(IKabs((((r12*x6429*x6430))+((sj0*x6427*x6430))+(((-1.0)*x6428*x6430))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6431=((-1.0)*r11);
CheckValue<IkReal> x6434 = IKatan2WithCheck(IkReal(x6431),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6434.valid){
continue;
}
IkReal x6432=((1.0)*(x6434.value));
IkReal x6433=x6415;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6432)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6432)));
IkReal gconst124=(x6431*x6433);
IkReal gconst125=((1.0)*r10*x6433);
IkReal x6435=r12*r12;
IkReal x6436=((1.0)+(((-1.0)*x6435)));
IkReal x6437=(cj2*r22*sj1);
IkReal x6438=(cj1*r22*sj2);
CheckValue<IkReal> x6445=IKPowWithIntegerCheck(x6436,-1);
if(!x6445.valid){
continue;
}
IkReal x6439=x6445.value;
CheckValue<IkReal> x6446=IKPowWithIntegerCheck(((-1.0)+x6435),-1);
if(!x6446.valid){
continue;
}
IkReal x6440=x6446.value;
IkReal x6441=((1.0)*x6439);
if((x6436) < -0.00001)
continue;
IkReal x6442=IKsqrt(x6436);
IkReal x6443=((1.0)*r12*x6440*x6442);
IkReal x6444=((((-2.0)*r10*r11*r20*r21*x6439))+(((-1.0)*x6441*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6441*(r10*r10)*(r20*r20))));
j4eval[0]=x6444;
j4eval[1]=IKsign(x6444);
j4eval[2]=((IKabs((x6437+x6438)))+(IKabs(((((-1.0)*x6438*x6443))+(((-1.0)*x6437*x6443))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6447=(gconst124*r21);
IkReal x6448=(cj1*sj2);
IkReal x6449=(cj2*sj1);
IkReal x6450=(gconst125*r20);
CheckValue<IkReal> x6451=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6450*x6450)))+(((-1.0)*(x6447*x6447)))+(((-1.0)*(r22*r22)))+(((2.0)*x6447*x6450)))),-1);
if(!x6451.valid){
continue;
}
CheckValue<IkReal> x6452 = IKatan2WithCheck(IkReal((((r22*x6448))+((r22*x6449)))),IkReal((((x6447*x6449))+((x6447*x6448))+(((-1.0)*x6448*x6450))+(((-1.0)*x6449*x6450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6451.value)))+(x6452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6453=IKsin(j4);
IkReal x6454=IKcos(j4);
IkReal x6455=(sj1*sj2);
IkReal x6456=(gconst125*r20);
IkReal x6457=(gconst124*r01);
IkReal x6458=(gconst125*r00);
IkReal x6459=(gconst125*r10);
IkReal x6460=((1.0)*x6454);
IkReal x6461=((1.0)*cj1*cj2);
IkReal x6462=((1.0)*x6453);
IkReal x6463=(gconst124*x6453);
IkReal x6464=(gconst124*x6454);
evalcond[0]=(((r21*x6463))+(((-1.0)*r22*x6460))+(((-1.0)*x6456*x6462)));
evalcond[1]=(cj0+(((-1.0)*r12*x6460))+((r11*x6463))+(((-1.0)*x6459*x6462)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6458*x6462))+((x6453*x6457))+(((-1.0)*r02*x6460)));
evalcond[3]=(((cj2*sj1))+((r21*x6464))+((cj1*sj2))+((r22*x6453))+(((-1.0)*x6456*x6460)));
evalcond[4]=((((-1.0)*x6458*x6460))+((cj0*x6455))+((x6454*x6457))+((r02*x6453))+(((-1.0)*cj0*x6461)));
evalcond[5]=(((sj0*x6455))+((r11*x6464))+(((-1.0)*x6459*x6460))+(((-1.0)*sj0*x6461))+((r12*x6453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6465=((1.0)*sj0);
IkReal x6466=((1.0)*cj0);
CheckValue<IkReal> x6467 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6466))+(((-1.0)*r12*x6465)))),IkReal((((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x6466))+(((-1.0)*gconst124*r11*x6465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6467.valid){
continue;
}
CheckValue<IkReal> x6468=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6467.value)+(((1.5707963267949)*(x6468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6469=IKsin(j4);
IkReal x6470=IKcos(j4);
IkReal x6471=(sj1*sj2);
IkReal x6472=(gconst125*r20);
IkReal x6473=(gconst124*r01);
IkReal x6474=(gconst125*r00);
IkReal x6475=(gconst125*r10);
IkReal x6476=((1.0)*x6470);
IkReal x6477=((1.0)*cj1*cj2);
IkReal x6478=((1.0)*x6469);
IkReal x6479=(gconst124*x6469);
IkReal x6480=(gconst124*x6470);
evalcond[0]=((((-1.0)*r22*x6476))+(((-1.0)*x6472*x6478))+((r21*x6479)));
evalcond[1]=((((-1.0)*r12*x6476))+cj0+((r11*x6479))+(((-1.0)*x6475*x6478)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6476))+(((-1.0)*x6474*x6478))+((x6469*x6473)));
evalcond[3]=(((r21*x6480))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6472*x6476))+((r22*x6469)));
evalcond[4]=((((-1.0)*cj0*x6477))+((x6470*x6473))+((cj0*x6471))+(((-1.0)*x6474*x6476))+((r02*x6469)));
evalcond[5]=(((r11*x6480))+(((-1.0)*sj0*x6477))+((r12*x6469))+(((-1.0)*x6475*x6476))+((sj0*x6471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6481=((1.0)*gconst125);
CheckValue<IkReal> x6482 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x6481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6482.valid){
continue;
}
CheckValue<IkReal> x6483=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6481)))),-1);
if(!x6483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6482.value)+(((1.5707963267949)*(x6483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6484=IKsin(j4);
IkReal x6485=IKcos(j4);
IkReal x6486=(sj1*sj2);
IkReal x6487=(gconst125*r20);
IkReal x6488=(gconst124*r01);
IkReal x6489=(gconst125*r00);
IkReal x6490=(gconst125*r10);
IkReal x6491=((1.0)*x6485);
IkReal x6492=((1.0)*cj1*cj2);
IkReal x6493=((1.0)*x6484);
IkReal x6494=(gconst124*x6484);
IkReal x6495=(gconst124*x6485);
evalcond[0]=((((-1.0)*x6487*x6493))+(((-1.0)*r22*x6491))+((r21*x6494)));
evalcond[1]=(cj0+((r11*x6494))+(((-1.0)*r12*x6491))+(((-1.0)*x6490*x6493)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6491))+(((-1.0)*x6489*x6493))+((x6484*x6488)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6487*x6491))+((cj1*sj2))+((r22*x6484))+((r21*x6495)));
evalcond[4]=((((-1.0)*x6489*x6491))+((cj0*x6486))+((r02*x6484))+((x6485*x6488))+(((-1.0)*cj0*x6492)));
evalcond[5]=(((r11*x6495))+(((-1.0)*sj0*x6492))+((r12*x6484))+(((-1.0)*x6490*x6491))+((sj0*x6486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6496=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6496;
j4eval[1]=IKsign(x6496);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6497=((1.0)*cj5);
IkReal x6498=((((-1.0)*r01*x6497))+(((-1.0)*r00*sj5)));
j4eval[0]=x6498;
j4eval[1]=((IKabs(((((-1.0)*r20*x6497))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6499=cj5*cj5;
IkReal x6500=r11*r11;
IkReal x6501=(cj5*r10);
IkReal x6502=(r11*sj5);
IkReal x6503=((((-1.0)*x6500))+(((2.0)*x6501*x6502))+(((-1.0)*(r12*r12)))+((x6499*x6500))+(((-1.0)*x6499*(r10*r10))));
j4eval[0]=x6503;
j4eval[1]=IKsign(x6503);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6501))+x6502))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6504=cj5*cj5;
IkReal x6505=r11*r11;
IkReal x6506=(cj5*r10);
IkReal x6507=(r11*sj5);
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6504*(r10*r10)))+(((-1.0)*x6505))+(((2.0)*x6506*x6507))+((x6504*x6505))+(((-1.0)*(r12*r12))))),-1);
if(!x6508.valid){
continue;
}
CheckValue<IkReal> x6509 = IKatan2WithCheck(IkReal(((((-1.0)*x6506))+x6507)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6508.value)))+(x6509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6510=IKcos(j4);
IkReal x6511=IKsin(j4);
IkReal x6512=(cj5*r00);
IkReal x6513=(cj5*r10);
IkReal x6514=(r21*sj5);
IkReal x6515=(cj5*r20);
IkReal x6516=((1.0)*x6510);
IkReal x6517=((1.0)*x6511);
IkReal x6518=(sj5*x6511);
IkReal x6519=(sj5*x6510);
evalcond[0]=(((r11*x6519))+((r12*x6511))+(((-1.0)*x6513*x6516)));
evalcond[1]=((((-1.0)*r22*x6516))+((x6511*x6514))+(((-1.0)*x6515*x6517)));
evalcond[2]=((((-1.0)*r02*x6516))+(((-1.0)*x6512*x6517))+((r01*x6518)));
evalcond[3]=((1.0)+((r11*x6518))+(((-1.0)*r12*x6516))+(((-1.0)*x6513*x6517)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6510*x6514))+(((-1.0)*x6515*x6516))+((r22*x6511)));
evalcond[5]=((((-1.0)*x6512*x6516))+((r01*x6519))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6520=((1.0)*cj5);
CheckValue<IkReal> x6521 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6521.valid){
continue;
}
CheckValue<IkReal> x6522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6520)))),-1);
if(!x6522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6521.value)+(((1.5707963267949)*(x6522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6523=IKcos(j4);
IkReal x6524=IKsin(j4);
IkReal x6525=(cj5*r00);
IkReal x6526=(cj5*r10);
IkReal x6527=(r21*sj5);
IkReal x6528=(cj5*r20);
IkReal x6529=((1.0)*x6523);
IkReal x6530=((1.0)*x6524);
IkReal x6531=(sj5*x6524);
IkReal x6532=(sj5*x6523);
evalcond[0]=((((-1.0)*x6526*x6529))+((r12*x6524))+((r11*x6532)));
evalcond[1]=(((x6524*x6527))+(((-1.0)*r22*x6529))+(((-1.0)*x6528*x6530)));
evalcond[2]=((((-1.0)*r02*x6529))+((r01*x6531))+(((-1.0)*x6525*x6530)));
evalcond[3]=((1.0)+(((-1.0)*x6526*x6530))+(((-1.0)*r12*x6529))+((r11*x6531)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6528*x6529))+((x6523*x6527))+((r22*x6524)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6524))+((r01*x6532))+(((-1.0)*x6525*x6529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6533=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6533.valid){
continue;
}
CheckValue<IkReal> x6534 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6533.value)))+(x6534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6535=IKcos(j4);
IkReal x6536=IKsin(j4);
IkReal x6537=(cj5*r00);
IkReal x6538=(cj5*r10);
IkReal x6539=(r21*sj5);
IkReal x6540=(cj5*r20);
IkReal x6541=((1.0)*x6535);
IkReal x6542=((1.0)*x6536);
IkReal x6543=(sj5*x6536);
IkReal x6544=(sj5*x6535);
evalcond[0]=((((-1.0)*x6538*x6541))+((r11*x6544))+((r12*x6536)));
evalcond[1]=(((x6536*x6539))+(((-1.0)*x6540*x6542))+(((-1.0)*r22*x6541)));
evalcond[2]=((((-1.0)*x6537*x6542))+(((-1.0)*r02*x6541))+((r01*x6543)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6541))+(((-1.0)*x6538*x6542))+((r11*x6543)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6540*x6541))+((cj1*sj2))+((r22*x6536))+((x6535*x6539)));
evalcond[5]=(((r02*x6536))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6537*x6541))+((r01*x6544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6545=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6545;
j4eval[1]=IKsign(x6545);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6546=((1.0)*cj5);
IkReal x6547=((((-1.0)*r21*x6546))+(((-1.0)*r20*sj5)));
j4eval[0]=x6547;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6546))+((r01*sj5))))));
j4eval[2]=IKsign(x6547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6548=cj5*cj5;
IkReal x6549=r11*r11;
IkReal x6550=(r11*sj5);
IkReal x6551=(cj5*r10);
IkReal x6552=((((-1.0)*x6548*x6549))+(r12*r12)+(((-2.0)*x6550*x6551))+((x6548*(r10*r10)))+x6549);
j4eval[0]=x6552;
j4eval[1]=IKsign(x6552);
j4eval[2]=((IKabs((x6550+(((-1.0)*x6551)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6553=cj5*cj5;
IkReal x6554=r11*r11;
IkReal x6555=(cj5*r10);
IkReal x6556=(r11*sj5);
CheckValue<IkReal> x6557=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6553*x6554))+((x6553*(r10*r10)))+x6554+(((-2.0)*x6555*x6556)))),-1);
if(!x6557.valid){
continue;
}
CheckValue<IkReal> x6558 = IKatan2WithCheck(IkReal((x6556+(((-1.0)*x6555)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6557.value)))+(x6558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6559=IKcos(j4);
IkReal x6560=IKsin(j4);
IkReal x6561=(cj5*r00);
IkReal x6562=(cj5*r10);
IkReal x6563=(r21*sj5);
IkReal x6564=(cj5*r20);
IkReal x6565=((1.0)*x6559);
IkReal x6566=((1.0)*x6560);
IkReal x6567=(sj5*x6560);
IkReal x6568=(sj5*x6559);
evalcond[0]=(((r12*x6560))+((r11*x6568))+(((-1.0)*x6562*x6565)));
evalcond[1]=(((x6560*x6563))+(((-1.0)*r22*x6565))+(((-1.0)*x6564*x6566)));
evalcond[2]=((((-1.0)*x6561*x6566))+(((-1.0)*r02*x6565))+((r01*x6567)));
evalcond[3]=((-1.0)+((r11*x6567))+(((-1.0)*r12*x6565))+(((-1.0)*x6562*x6566)));
evalcond[4]=(((cj2*sj1))+((r22*x6560))+((cj1*sj2))+((x6559*x6563))+(((-1.0)*x6564*x6565)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6561*x6565))+((r02*x6560))+((cj1*cj2))+((r01*x6568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6569=((1.0)*cj5);
CheckValue<IkReal> x6570 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6570.valid){
continue;
}
CheckValue<IkReal> x6571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6569))+(((-1.0)*r20*sj5)))),-1);
if(!x6571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6570.value)+(((1.5707963267949)*(x6571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6572=IKcos(j4);
IkReal x6573=IKsin(j4);
IkReal x6574=(cj5*r00);
IkReal x6575=(cj5*r10);
IkReal x6576=(r21*sj5);
IkReal x6577=(cj5*r20);
IkReal x6578=((1.0)*x6572);
IkReal x6579=((1.0)*x6573);
IkReal x6580=(sj5*x6573);
IkReal x6581=(sj5*x6572);
evalcond[0]=(((r11*x6581))+((r12*x6573))+(((-1.0)*x6575*x6578)));
evalcond[1]=((((-1.0)*x6577*x6579))+((x6573*x6576))+(((-1.0)*r22*x6578)));
evalcond[2]=(((r01*x6580))+(((-1.0)*x6574*x6579))+(((-1.0)*r02*x6578)));
evalcond[3]=((-1.0)+((r11*x6580))+(((-1.0)*x6575*x6579))+(((-1.0)*r12*x6578)));
evalcond[4]=(((r22*x6573))+((cj2*sj1))+(((-1.0)*x6577*x6578))+((cj1*sj2))+((x6572*x6576)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x6581))+(((-1.0)*x6574*x6578))+((cj1*cj2))+((r02*x6573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6582 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6582.valid){
continue;
}
CheckValue<IkReal> x6583=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6582.value)+(((1.5707963267949)*(x6583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6584=IKcos(j4);
IkReal x6585=IKsin(j4);
IkReal x6586=(cj5*r00);
IkReal x6587=(cj5*r10);
IkReal x6588=(r21*sj5);
IkReal x6589=(cj5*r20);
IkReal x6590=((1.0)*x6584);
IkReal x6591=((1.0)*x6585);
IkReal x6592=(sj5*x6585);
IkReal x6593=(sj5*x6584);
evalcond[0]=(((r11*x6593))+(((-1.0)*x6587*x6590))+((r12*x6585)));
evalcond[1]=((((-1.0)*x6589*x6591))+((x6585*x6588))+(((-1.0)*r22*x6590)));
evalcond[2]=((((-1.0)*r02*x6590))+((r01*x6592))+(((-1.0)*x6586*x6591)));
evalcond[3]=((-1.0)+((r11*x6592))+(((-1.0)*r12*x6590))+(((-1.0)*x6587*x6591)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6589*x6590))+((r22*x6585))+((cj1*sj2))+((x6584*x6588)));
evalcond[5]=(((r02*x6585))+(((-1.0)*sj1*sj2))+((r01*x6593))+((cj1*cj2))+(((-1.0)*x6586*x6590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6594=((-1.0)*r00);
IkReal x6596 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6596)==0){
continue;
}
IkReal x6595=pow(x6596,-0.5);
CheckValue<IkReal> x6597 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6594),IKFAST_ATAN2_MAGTHRESH);
if(!x6597.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6597.value));
IkReal gconst127=(r01*x6595);
IkReal gconst128=(x6594*x6595);
CheckValue<IkReal> x6598 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6598.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6598.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6599=((-1.0)*r00);
IkReal x6600=x6595;
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6599),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
IkReal x6601=((-1.0)*(x6602.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6601;
IkReal gconst126=x6601;
IkReal gconst127=(r01*x6600);
IkReal gconst128=(x6599*x6600);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6603=((1.0)*sj0);
IkReal x6604=((1.0)*gconst127);
CheckValue<IkReal> x6605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6604)))),-1);
if(!x6605.valid){
continue;
}
CheckValue<IkReal> x6606 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6603)))),IkReal((((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6603))+(((-1.0)*cj0*r01*x6604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6605.value)))+(x6606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6607=IKsin(j4);
IkReal x6608=IKcos(j4);
IkReal x6609=(gconst127*r01);
IkReal x6610=(sj1*sj2);
IkReal x6611=(gconst128*r10);
IkReal x6612=(gconst128*r00);
IkReal x6613=(gconst128*r20);
IkReal x6614=((1.0)*x6608);
IkReal x6615=((1.0)*cj1*cj2);
IkReal x6616=((1.0)*x6607);
IkReal x6617=(gconst127*x6608);
IkReal x6618=(gconst127*x6607);
evalcond[0]=((((-1.0)*x6613*x6616))+((r21*x6618))+(((-1.0)*r22*x6614)));
evalcond[1]=((((-1.0)*r12*x6614))+cj0+(((-1.0)*x6611*x6616))+((r11*x6618)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6612*x6616))+(((-1.0)*r02*x6614))+((x6607*x6609)));
evalcond[3]=((((-1.0)*x6613*x6614))+((cj2*sj1))+((r21*x6617))+((r22*x6607))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x6612*x6614))+(((-1.0)*cj0*x6615))+((r02*x6607))+((cj0*x6610))+((x6608*x6609)));
evalcond[5]=((((-1.0)*x6611*x6614))+((r11*x6617))+(((-1.0)*sj0*x6615))+((sj0*x6610))+((r12*x6607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6619=((1.0)*gconst128);
CheckValue<IkReal> x6620 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6620.valid){
continue;
}
CheckValue<IkReal> x6621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6619))+(((-1.0)*gconst127*r10)))),-1);
if(!x6621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6620.value)+(((1.5707963267949)*(x6621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6622=IKsin(j4);
IkReal x6623=IKcos(j4);
IkReal x6624=(gconst127*r01);
IkReal x6625=(sj1*sj2);
IkReal x6626=(gconst128*r10);
IkReal x6627=(gconst128*r00);
IkReal x6628=(gconst128*r20);
IkReal x6629=((1.0)*x6623);
IkReal x6630=((1.0)*cj1*cj2);
IkReal x6631=((1.0)*x6622);
IkReal x6632=(gconst127*x6623);
IkReal x6633=(gconst127*x6622);
evalcond[0]=((((-1.0)*x6628*x6631))+((r21*x6633))+(((-1.0)*r22*x6629)));
evalcond[1]=((((-1.0)*r12*x6629))+cj0+((r11*x6633))+(((-1.0)*x6626*x6631)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6629))+((x6622*x6624))+(((-1.0)*x6627*x6631)));
evalcond[3]=(((cj2*sj1))+((r21*x6632))+(((-1.0)*x6628*x6629))+((cj1*sj2))+((r22*x6622)));
evalcond[4]=(((r02*x6622))+((cj0*x6625))+(((-1.0)*cj0*x6630))+(((-1.0)*x6627*x6629))+((x6623*x6624)));
evalcond[5]=(((r12*x6622))+((r11*x6632))+((sj0*x6625))+(((-1.0)*x6626*x6629))+(((-1.0)*sj0*x6630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6634=((-1.0)*r01);
IkReal x6636 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6636)==0){
continue;
}
IkReal x6635=pow(x6636,-0.5);
CheckValue<IkReal> x6637 = IKatan2WithCheck(IkReal(x6634),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6637.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6637.value))));
IkReal gconst130=(x6634*x6635);
IkReal gconst131=((1.0)*r00*x6635);
CheckValue<IkReal> x6638 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6638.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6638.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6639=((-1.0)*r01);
CheckValue<IkReal> x6642 = IKatan2WithCheck(IkReal(x6639),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6642.valid){
continue;
}
IkReal x6640=((1.0)*(x6642.value));
IkReal x6641=x6635;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6640)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6640)));
IkReal gconst130=(x6639*x6641);
IkReal gconst131=((1.0)*r00*x6641);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6643=((-1.0)*r01);
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal(x6643),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
IkReal x6644=((1.0)*(x6646.value));
IkReal x6645=x6635;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6644)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6644)));
IkReal gconst130=(x6643*x6645);
IkReal gconst131=((1.0)*r00*x6645);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6647=((-1.0)*r01);
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal(x6647),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
IkReal x6648=((1.0)*(x6650.value));
IkReal x6649=x6635;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6648)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6648)));
IkReal gconst130=(x6647*x6649);
IkReal gconst131=((1.0)*r00*x6649);
IkReal x6651=r02*r02;
IkReal x6652=(r12*sj0);
IkReal x6653=((1.0)*cj0);
IkReal x6654=x6635;
j4eval[0]=((IKabs(((((-1.0)*x6652))+(((-1.0)*r02*x6653)))))+(IKabs(((((-1.0)*x6653*x6654))+((r02*x6652*x6654))+((cj0*x6651*x6654))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6655=((1.0)*sj0);
IkReal x6656=((1.0)*gconst130);
CheckValue<IkReal> x6657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6656))+(((-1.0)*gconst131*r21)))),-1);
if(!x6657.valid){
continue;
}
CheckValue<IkReal> x6658 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6655))+(((-1.0)*cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6656))+((cj0*gconst131*r00))+(((-1.0)*gconst130*r11*x6655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6657.value)))+(x6658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6659=IKsin(j4);
IkReal x6660=IKcos(j4);
IkReal x6661=(gconst131*r10);
IkReal x6662=(sj1*sj2);
IkReal x6663=(gconst131*r20);
IkReal x6664=(gconst131*r00);
IkReal x6665=((1.0)*x6660);
IkReal x6666=((1.0)*cj1*cj2);
IkReal x6667=(gconst130*x6659);
IkReal x6668=((1.0)*x6659);
IkReal x6669=(gconst130*x6660);
evalcond[0]=(((r21*x6667))+(((-1.0)*x6663*x6668))+(((-1.0)*r22*x6665)));
evalcond[1]=(cj0+(((-1.0)*x6661*x6668))+((r11*x6667))+(((-1.0)*r12*x6665)));
evalcond[2]=((((-1.0)*x6664*x6668))+(((-1.0)*sj0))+((r01*x6667))+(((-1.0)*r02*x6665)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6669))+(((-1.0)*x6663*x6665))+((r22*x6659)));
evalcond[4]=((((-1.0)*x6664*x6665))+((r02*x6659))+((r01*x6669))+(((-1.0)*cj0*x6666))+((cj0*x6662)));
evalcond[5]=(((r12*x6659))+(((-1.0)*sj0*x6666))+(((-1.0)*x6661*x6665))+((r11*x6669))+((sj0*x6662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6670=((1.0)*gconst131);
CheckValue<IkReal> x6671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6671.valid){
continue;
}
CheckValue<IkReal> x6672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6670))+(((-1.0)*gconst130*r10)))),-1);
if(!x6672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6671.value)+(((1.5707963267949)*(x6672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6673=IKsin(j4);
IkReal x6674=IKcos(j4);
IkReal x6675=(gconst131*r10);
IkReal x6676=(sj1*sj2);
IkReal x6677=(gconst131*r20);
IkReal x6678=(gconst131*r00);
IkReal x6679=((1.0)*x6674);
IkReal x6680=((1.0)*cj1*cj2);
IkReal x6681=(gconst130*x6673);
IkReal x6682=((1.0)*x6673);
IkReal x6683=(gconst130*x6674);
evalcond[0]=(((r21*x6681))+(((-1.0)*x6677*x6682))+(((-1.0)*r22*x6679)));
evalcond[1]=(cj0+(((-1.0)*r12*x6679))+((r11*x6681))+(((-1.0)*x6675*x6682)));
evalcond[2]=((((-1.0)*r02*x6679))+(((-1.0)*sj0))+(((-1.0)*x6678*x6682))+((r01*x6681)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6683))+((r22*x6673))+(((-1.0)*x6677*x6679)));
evalcond[4]=(((cj0*x6676))+((r02*x6673))+(((-1.0)*cj0*x6680))+((r01*x6683))+(((-1.0)*x6678*x6679)));
evalcond[5]=((((-1.0)*sj0*x6680))+((r11*x6683))+((r12*x6673))+((sj0*x6676))+(((-1.0)*x6675*x6679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6684=((1.0)*gconst131);
CheckValue<IkReal> x6685 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6685.valid){
continue;
}
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6684))+(((-1.0)*gconst130*r00)))),-1);
if(!x6686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6685.value)+(((1.5707963267949)*(x6686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6687=IKsin(j4);
IkReal x6688=IKcos(j4);
IkReal x6689=(gconst131*r10);
IkReal x6690=(sj1*sj2);
IkReal x6691=(gconst131*r20);
IkReal x6692=(gconst131*r00);
IkReal x6693=((1.0)*x6688);
IkReal x6694=((1.0)*cj1*cj2);
IkReal x6695=(gconst130*x6687);
IkReal x6696=((1.0)*x6687);
IkReal x6697=(gconst130*x6688);
evalcond[0]=(((r21*x6695))+(((-1.0)*x6691*x6696))+(((-1.0)*r22*x6693)));
evalcond[1]=(((r11*x6695))+cj0+(((-1.0)*x6689*x6696))+(((-1.0)*r12*x6693)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6693))+(((-1.0)*x6692*x6696))+((r01*x6695)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6687))+((r21*x6697))+(((-1.0)*x6691*x6693)));
evalcond[4]=(((r02*x6687))+((cj0*x6690))+(((-1.0)*cj0*x6694))+(((-1.0)*x6692*x6693))+((r01*x6697)));
evalcond[5]=(((r12*x6687))+((r11*x6697))+(((-1.0)*sj0*x6694))+((sj0*x6690))+(((-1.0)*x6689*x6693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6698=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6698;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6699=((1.0)*cj5);
IkReal x6700=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6699)));
j4eval[0]=x6700;
j4eval[1]=((IKabs(((((-1.0)*r20*x6699))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6701=cj5*cj5;
IkReal x6702=r01*r01;
IkReal x6703=(cj5*r00);
IkReal x6704=(r01*sj5);
IkReal x6705=((((-1.0)*x6701*x6702))+x6702+(r02*r02)+((x6701*(r00*r00)))+(((-2.0)*x6703*x6704)));
j4eval[0]=x6705;
j4eval[1]=IKsign(x6705);
j4eval[2]=((IKabs(r02))+(IKabs((x6704+(((-1.0)*x6703))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6706=cj5*cj5;
IkReal x6707=r01*r01;
IkReal x6708=(r01*sj5);
IkReal x6709=(cj5*r00);
CheckValue<IkReal> x6710 = IKatan2WithCheck(IkReal((x6708+(((-1.0)*x6709)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6710.valid){
continue;
}
CheckValue<IkReal> x6711=IKPowWithIntegerCheck(IKsign((((x6706*(r00*r00)))+(((-2.0)*x6708*x6709))+x6707+(((-1.0)*x6706*x6707))+(r02*r02))),-1);
if(!x6711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6710.value)+(((1.5707963267949)*(x6711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6712=IKcos(j4);
IkReal x6713=IKsin(j4);
IkReal x6714=(cj5*r00);
IkReal x6715=(cj5*r10);
IkReal x6716=(r21*sj5);
IkReal x6717=(cj5*r20);
IkReal x6718=((1.0)*x6712);
IkReal x6719=((1.0)*x6713);
IkReal x6720=(sj5*x6713);
IkReal x6721=(sj5*x6712);
evalcond[0]=(((r02*x6713))+(((-1.0)*x6714*x6718))+((r01*x6721)));
evalcond[1]=((((-1.0)*x6717*x6719))+((x6713*x6716))+(((-1.0)*r22*x6718)));
evalcond[2]=(((r11*x6720))+(((-1.0)*r12*x6718))+(((-1.0)*x6715*x6719)));
evalcond[3]=((-1.0)+(((-1.0)*x6714*x6719))+(((-1.0)*r02*x6718))+((r01*x6720)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6713))+((x6712*x6716))+(((-1.0)*x6717*x6718)));
evalcond[5]=(((r11*x6721))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6715*x6718))+((r12*x6713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6722=((1.0)*cj5);
CheckValue<IkReal> x6723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6722)))),-1);
if(!x6723.valid){
continue;
}
CheckValue<IkReal> x6724 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6722))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6723.value)))+(x6724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6725=IKcos(j4);
IkReal x6726=IKsin(j4);
IkReal x6727=(cj5*r00);
IkReal x6728=(cj5*r10);
IkReal x6729=(r21*sj5);
IkReal x6730=(cj5*r20);
IkReal x6731=((1.0)*x6725);
IkReal x6732=((1.0)*x6726);
IkReal x6733=(sj5*x6726);
IkReal x6734=(sj5*x6725);
evalcond[0]=((((-1.0)*x6727*x6731))+((r02*x6726))+((r01*x6734)));
evalcond[1]=((((-1.0)*x6730*x6732))+(((-1.0)*r22*x6731))+((x6726*x6729)));
evalcond[2]=((((-1.0)*r12*x6731))+(((-1.0)*x6728*x6732))+((r11*x6733)));
evalcond[3]=((-1.0)+(((-1.0)*x6727*x6732))+(((-1.0)*r02*x6731))+((r01*x6733)));
evalcond[4]=((((-1.0)*x6730*x6731))+((cj2*sj1))+((cj1*sj2))+((r22*x6726))+((x6725*x6729)));
evalcond[5]=(((r12*x6726))+(((-1.0)*x6728*x6731))+((r11*x6734))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6735=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6735.valid){
continue;
}
CheckValue<IkReal> x6736 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6735.value)))+(x6736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6737=IKcos(j4);
IkReal x6738=IKsin(j4);
IkReal x6739=(cj5*r00);
IkReal x6740=(cj5*r10);
IkReal x6741=(r21*sj5);
IkReal x6742=(cj5*r20);
IkReal x6743=((1.0)*x6737);
IkReal x6744=((1.0)*x6738);
IkReal x6745=(sj5*x6738);
IkReal x6746=(sj5*x6737);
evalcond[0]=(((r01*x6746))+(((-1.0)*x6739*x6743))+((r02*x6738)));
evalcond[1]=((((-1.0)*x6742*x6744))+(((-1.0)*r22*x6743))+((x6738*x6741)));
evalcond[2]=((((-1.0)*r12*x6743))+((r11*x6745))+(((-1.0)*x6740*x6744)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6743))+((r01*x6745))+(((-1.0)*x6739*x6744)));
evalcond[4]=(((r22*x6738))+(((-1.0)*x6742*x6743))+((cj2*sj1))+((cj1*sj2))+((x6737*x6741)));
evalcond[5]=(((r11*x6746))+((r12*x6738))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6740*x6743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6747=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6747;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6748=((1.0)*cj5);
IkReal x6749=((((-1.0)*r21*x6748))+(((-1.0)*r20*sj5)));
j4eval[0]=x6749;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6748))+((r11*sj5))))));
j4eval[2]=IKsign(x6749);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6750=(r01*sj5);
IkReal x6751=(cj1*sj2);
IkReal x6752=(cj2*sj1);
IkReal x6753=((1.0)*r02);
IkReal x6754=((1.0)*cj5*r00);
IkReal x6755=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6755;
j4eval[1]=((IKabs(((((-1.0)*x6751*x6754))+((x6750*x6751))+((x6750*x6752))+(((-1.0)*x6752*x6754)))))+(IKabs(((((-1.0)*x6751*x6753))+(((-1.0)*x6752*x6753))))));
j4eval[2]=IKsign(x6755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6756=(r01*sj5);
IkReal x6757=(cj1*sj2);
IkReal x6758=(cj2*sj1);
IkReal x6759=((1.0)*r02);
IkReal x6760=((1.0)*cj5*r00);
CheckValue<IkReal> x6761 = IKatan2WithCheck(IkReal((((x6756*x6757))+((x6756*x6758))+(((-1.0)*x6758*x6760))+(((-1.0)*x6757*x6760)))),IkReal(((((-1.0)*x6758*x6759))+(((-1.0)*x6757*x6759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6761.valid){
continue;
}
CheckValue<IkReal> x6762=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6761.value)+(((1.5707963267949)*(x6762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6763=IKcos(j4);
IkReal x6764=IKsin(j4);
IkReal x6765=(cj5*r00);
IkReal x6766=(cj5*r10);
IkReal x6767=(r21*sj5);
IkReal x6768=(cj5*r20);
IkReal x6769=((1.0)*x6763);
IkReal x6770=((1.0)*x6764);
IkReal x6771=(sj5*x6764);
IkReal x6772=(sj5*x6763);
evalcond[0]=((((-1.0)*x6765*x6769))+((r02*x6764))+((r01*x6772)));
evalcond[1]=((((-1.0)*x6768*x6770))+(((-1.0)*r22*x6769))+((x6764*x6767)));
evalcond[2]=(((r11*x6771))+(((-1.0)*r12*x6769))+(((-1.0)*x6766*x6770)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6769))+(((-1.0)*x6765*x6770))+((r01*x6771)));
evalcond[4]=((((-1.0)*x6768*x6769))+((cj2*sj1))+((r22*x6764))+((cj1*sj2))+((x6763*x6767)));
evalcond[5]=(((r11*x6772))+((r12*x6764))+(((-1.0)*x6766*x6769))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6773=((1.0)*cj5);
CheckValue<IkReal> x6774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6773))+(((-1.0)*r20*sj5)))),-1);
if(!x6774.valid){
continue;
}
CheckValue<IkReal> x6775 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6774.value)))+(x6775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6776=IKcos(j4);
IkReal x6777=IKsin(j4);
IkReal x6778=(cj5*r00);
IkReal x6779=(cj5*r10);
IkReal x6780=(r21*sj5);
IkReal x6781=(cj5*r20);
IkReal x6782=((1.0)*x6776);
IkReal x6783=((1.0)*x6777);
IkReal x6784=(sj5*x6777);
IkReal x6785=(sj5*x6776);
evalcond[0]=(((r02*x6777))+(((-1.0)*x6778*x6782))+((r01*x6785)));
evalcond[1]=(((x6777*x6780))+(((-1.0)*x6781*x6783))+(((-1.0)*r22*x6782)));
evalcond[2]=(((r11*x6784))+(((-1.0)*r12*x6782))+(((-1.0)*x6779*x6783)));
evalcond[3]=((1.0)+(((-1.0)*x6778*x6783))+(((-1.0)*r02*x6782))+((r01*x6784)));
evalcond[4]=(((cj2*sj1))+((x6776*x6780))+((cj1*sj2))+((r22*x6777))+(((-1.0)*x6781*x6782)));
evalcond[5]=(((r12*x6777))+((r11*x6785))+(((-1.0)*sj1*sj2))+(((-1.0)*x6779*x6782))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6786 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6786.valid){
continue;
}
CheckValue<IkReal> x6787=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6786.value)+(((1.5707963267949)*(x6787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6788=IKcos(j4);
IkReal x6789=IKsin(j4);
IkReal x6790=(cj5*r00);
IkReal x6791=(cj5*r10);
IkReal x6792=(r21*sj5);
IkReal x6793=(cj5*r20);
IkReal x6794=((1.0)*x6788);
IkReal x6795=((1.0)*x6789);
IkReal x6796=(sj5*x6789);
IkReal x6797=(sj5*x6788);
evalcond[0]=(((r01*x6797))+((r02*x6789))+(((-1.0)*x6790*x6794)));
evalcond[1]=((((-1.0)*x6793*x6795))+(((-1.0)*r22*x6794))+((x6789*x6792)));
evalcond[2]=(((r11*x6796))+(((-1.0)*x6791*x6795))+(((-1.0)*r12*x6794)));
evalcond[3]=((1.0)+((r01*x6796))+(((-1.0)*x6790*x6795))+(((-1.0)*r02*x6794)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6793*x6794))+((cj1*sj2))+((r22*x6789))+((x6788*x6792)));
evalcond[5]=(((r12*x6789))+(((-1.0)*sj1*sj2))+((r11*x6797))+((cj1*cj2))+(((-1.0)*x6791*x6794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6798=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6798);
rxp1_1=(px*r21);
rxp1_2=(r11*x6798);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6799=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6799);
rxp1_1=(px*r21);
rxp1_2=(r11*x6799);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6800=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6800);
rxp1_1=(px*r21);
rxp1_2=(r11*x6800);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6803=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6803.valid){
continue;
}
IkReal x6801=x6803.value;
IkReal x6802=(sj0*x6801);
cj4array[0]=(((cj1*cj2*x6802))+(((-1.0)*sj1*sj2*x6802)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6804=IKsin(j4);
IkReal x6805=IKcos(j4);
IkReal x6806=(r21*sj5);
IkReal x6807=((1.0)*cj5*r20);
evalcond[0]=(r02*x6804);
evalcond[1]=((((-1.0)*r02*x6805))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x6804*x6807))+((x6804*x6806)));
evalcond[3]=(((r11*sj5*x6804))+(((-1.0)*cj5*r10*x6804)));
evalcond[4]=(((x6805*x6806))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6805*x6807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6810=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6810.valid){
continue;
}
IkReal x6808=x6810.value;
IkReal x6809=((1.0)*x6808);
cj4array[0]=((((-1.0)*cj2*sj1*x6809))+(((-1.0)*cj1*sj2*x6809)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6811=IKsin(j4);
IkReal x6812=IKcos(j4);
IkReal x6813=((1.0)*sj0);
IkReal x6814=((1.0)*cj5);
IkReal x6815=(sj5*x6811);
evalcond[0]=(r02*x6811);
evalcond[1]=((((-1.0)*r02*x6812))+(((-1.0)*x6813)));
evalcond[2]=(((r21*x6815))+(((-1.0)*r20*x6811*x6814)));
evalcond[3]=(((r11*x6815))+(((-1.0)*r10*x6811*x6814)));
evalcond[4]=((((-1.0)*r10*x6812*x6814))+((r11*sj5*x6812))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6816=IKPowWithIntegerCheck(r02,-1);
if(!x6816.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6816.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6817=IKsin(j4);
IkReal x6818=IKcos(j4);
IkReal x6819=(r21*sj5);
IkReal x6820=((1.0)*cj5);
IkReal x6821=(r11*sj5);
evalcond[0]=(r02*x6817);
evalcond[1]=(((x6817*x6819))+(((-1.0)*r20*x6817*x6820)));
evalcond[2]=(((x6817*x6821))+(((-1.0)*r10*x6817*x6820)));
evalcond[3]=(((cj2*sj1))+((x6818*x6819))+(((-1.0)*r20*x6818*x6820))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r10*x6818*x6820))+(((-1.0)*cj1*cj2*sj0))+((x6818*x6821))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6822=((1.0)*sj0);
IkReal x6823=((1.0)*cj0);
CheckValue<IkReal> x6824 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6823))+(((-1.0)*r12*x6822)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6822))+(((-1.0)*r01*sj5*x6823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6824.valid){
continue;
}
CheckValue<IkReal> x6825=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6824.value)+(((1.5707963267949)*(x6825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6826=IKsin(j4);
IkReal x6827=IKcos(j4);
IkReal x6828=(cj5*r00);
IkReal x6829=(cj5*r10);
IkReal x6830=(r21*sj5);
IkReal x6831=(sj1*sj2);
IkReal x6832=(cj5*r20);
IkReal x6833=((1.0)*x6827);
IkReal x6834=((1.0)*cj1*cj2);
IkReal x6835=((1.0)*x6826);
IkReal x6836=(sj5*x6826);
IkReal x6837=(sj5*x6827);
evalcond[0]=(((x6826*x6830))+(((-1.0)*x6832*x6835))+(((-1.0)*r22*x6833)));
evalcond[1]=(cj0+(((-1.0)*r12*x6833))+((r11*x6836))+(((-1.0)*x6829*x6835)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6833))+((r01*x6836))+(((-1.0)*x6828*x6835)));
evalcond[3]=(((cj2*sj1))+((r22*x6826))+((cj1*sj2))+(((-1.0)*x6832*x6833))+((x6827*x6830)));
evalcond[4]=(((r02*x6826))+((r01*x6837))+(((-1.0)*x6828*x6833))+(((-1.0)*cj0*x6834))+((cj0*x6831)));
evalcond[5]=((((-1.0)*sj0*x6834))+((sj0*x6831))+((r11*x6837))+((r12*x6826))+(((-1.0)*x6829*x6833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6838=((1.0)*cj5);
CheckValue<IkReal> x6839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6838)))),-1);
if(!x6839.valid){
continue;
}
CheckValue<IkReal> x6840 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6838))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6839.value)))+(x6840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6841=IKsin(j4);
IkReal x6842=IKcos(j4);
IkReal x6843=(cj5*r00);
IkReal x6844=(cj5*r10);
IkReal x6845=(r21*sj5);
IkReal x6846=(sj1*sj2);
IkReal x6847=(cj5*r20);
IkReal x6848=((1.0)*x6842);
IkReal x6849=((1.0)*cj1*cj2);
IkReal x6850=((1.0)*x6841);
IkReal x6851=(sj5*x6841);
IkReal x6852=(sj5*x6842);
evalcond[0]=((((-1.0)*r22*x6848))+(((-1.0)*x6847*x6850))+((x6841*x6845)));
evalcond[1]=(cj0+(((-1.0)*x6844*x6850))+((r11*x6851))+(((-1.0)*r12*x6848)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6851))+(((-1.0)*x6843*x6850))+(((-1.0)*r02*x6848)));
evalcond[3]=(((cj2*sj1))+((r22*x6841))+((cj1*sj2))+(((-1.0)*x6847*x6848))+((x6842*x6845)));
evalcond[4]=((((-1.0)*x6843*x6848))+((cj0*x6846))+((r01*x6852))+(((-1.0)*cj0*x6849))+((r02*x6841)));
evalcond[5]=(((r12*x6841))+(((-1.0)*x6844*x6848))+((r11*x6852))+(((-1.0)*sj0*x6849))+((sj0*x6846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6853=((1.0)*cj5);
CheckValue<IkReal> x6854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6853)))),-1);
if(!x6854.valid){
continue;
}
CheckValue<IkReal> x6855 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6853))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6854.value)))+(x6855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6856=IKsin(j4);
IkReal x6857=IKcos(j4);
IkReal x6858=(cj5*r00);
IkReal x6859=(cj5*r10);
IkReal x6860=(r21*sj5);
IkReal x6861=(sj1*sj2);
IkReal x6862=(cj5*r20);
IkReal x6863=((1.0)*x6857);
IkReal x6864=((1.0)*cj1*cj2);
IkReal x6865=((1.0)*x6856);
IkReal x6866=(sj5*x6856);
IkReal x6867=(sj5*x6857);
evalcond[0]=((((-1.0)*x6862*x6865))+(((-1.0)*r22*x6863))+((x6856*x6860)));
evalcond[1]=(((r11*x6866))+cj0+(((-1.0)*r12*x6863))+(((-1.0)*x6859*x6865)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6863))+((r01*x6866))+(((-1.0)*x6858*x6865)));
evalcond[3]=(((cj2*sj1))+((r22*x6856))+((cj1*sj2))+(((-1.0)*x6862*x6863))+((x6857*x6860)));
evalcond[4]=(((r02*x6856))+((cj0*x6861))+((r01*x6867))+(((-1.0)*x6858*x6863))+(((-1.0)*cj0*x6864)));
evalcond[5]=(((sj0*x6861))+((r11*x6867))+((r12*x6856))+(((-1.0)*sj0*x6864))+(((-1.0)*x6859*x6863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6868=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6868;
j0eval[1]=IKsign(x6868);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6869=cj5*cj5;
IkReal x6870=r21*r21;
IkReal x6871=(cj2*sj1);
IkReal x6872=(cj1*sj2);
IkReal x6873=(r21*sj5);
IkReal x6874=((1.0)*cj5*r20);
IkReal x6875=((r22*r22)+((x6869*(r20*r20)))+x6870+(((-1.0)*x6869*x6870))+(((-2.0)*cj5*r20*x6873)));
j4eval[0]=x6875;
j4eval[1]=IKsign(x6875);
j4eval[2]=((IKabs(((((-1.0)*x6871*x6874))+((x6872*x6873))+(((-1.0)*x6872*x6874))+((x6871*x6873)))))+(IKabs((((r22*x6872))+((r22*x6871))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6876=cj1*cj1;
IkReal x6877=(cj2*sj2);
IkReal x6878=(cj2*sj1);
IkReal x6879=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x6878))+(((-2.0)*x6876*x6877))+x6879+x6877+(((-1.08418367346939)*cj1*x6878))+(((-1.08418367346939)*sj2*x6876)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6878)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6880=IKcos(j0);
IkReal x6881=IKsin(j0);
evalcond[0]=((((-0.134)*x6881))+(((0.817)*x6880))+(((-1.0)*px)));
evalcond[1]=((((0.817)*x6881))+(((-1.0)*py))+(((0.134)*x6880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6882=((1.0)*cj5);
IkReal x6883=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6882)));
j4eval[0]=x6883;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6882))))));
j4eval[2]=IKsign(x6883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6884=((1.0)*cj5);
IkReal x6885=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6884)));
j4eval[0]=x6885;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6884))))));
j4eval[2]=IKsign(x6885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6886=cj5*cj5;
IkReal x6887=((1.0)*sj5);
IkReal x6888=(cj5*r20);
IkReal x6889=(r11*r21);
IkReal x6890=((((-1.0)*x6886*x6889))+((r10*r20*x6886))+((r12*r22))+x6889+(((-1.0)*r11*x6887*x6888))+(((-1.0)*cj5*r10*r21*x6887)));
j4eval[0]=x6890;
j4eval[1]=IKsign(x6890);
j4eval[2]=((IKabs((((cj0*x6888))+(((-1.0)*cj0*r21*x6887)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6891=cj5*cj5;
IkReal x6892=((1.0)*sj5);
IkReal x6893=(cj5*r20);
IkReal x6894=(r11*r21);
CheckValue<IkReal> x6895 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6892))+((cj0*x6893)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6895.valid){
continue;
}
CheckValue<IkReal> x6896=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6892))+(((-1.0)*r11*x6892*x6893))+((r10*r20*x6891))+((r12*r22))+x6894+(((-1.0)*x6891*x6894)))),-1);
if(!x6896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6895.value)+(((1.5707963267949)*(x6896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6897=IKsin(j4);
IkReal x6898=IKcos(j4);
IkReal x6899=((1.0)*sj0);
IkReal x6900=(cj5*r00);
IkReal x6901=(r11*sj5);
IkReal x6902=(cj5*r10);
IkReal x6903=(r21*sj5);
IkReal x6904=(cj5*r20);
IkReal x6905=(r01*sj5);
IkReal x6906=((1.0)*x6898);
IkReal x6907=((1.0)*x6897);
evalcond[0]=(((x6897*x6903))+(((-1.0)*x6904*x6907))+(((-1.0)*r22*x6906)));
evalcond[1]=((((-1.0)*r22*x6907))+(((-1.0)*x6903*x6906))+((x6898*x6904)));
evalcond[2]=(((x6897*x6901))+cj0+(((-1.0)*r12*x6906))+(((-1.0)*x6902*x6907)));
evalcond[3]=((((-1.0)*r02*x6906))+((x6897*x6905))+(((-1.0)*x6900*x6907))+(((-1.0)*x6899)));
evalcond[4]=((((-1.0)*r02*x6907))+(((-1.0)*x6905*x6906))+(((-1.0)*cj0))+((x6898*x6900)));
evalcond[5]=((((-1.0)*r12*x6907))+(((-1.0)*x6899))+(((-1.0)*x6901*x6906))+((x6898*x6902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6908=((1.0)*cj5);
CheckValue<IkReal> x6909 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6908))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6909.valid){
continue;
}
CheckValue<IkReal> x6910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6908)))),-1);
if(!x6910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6909.value)+(((1.5707963267949)*(x6910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6911=IKsin(j4);
IkReal x6912=IKcos(j4);
IkReal x6913=((1.0)*sj0);
IkReal x6914=(cj5*r00);
IkReal x6915=(r11*sj5);
IkReal x6916=(cj5*r10);
IkReal x6917=(r21*sj5);
IkReal x6918=(cj5*r20);
IkReal x6919=(r01*sj5);
IkReal x6920=((1.0)*x6912);
IkReal x6921=((1.0)*x6911);
evalcond[0]=((((-1.0)*r22*x6920))+((x6911*x6917))+(((-1.0)*x6918*x6921)));
evalcond[1]=((((-1.0)*r22*x6921))+((x6912*x6918))+(((-1.0)*x6917*x6920)));
evalcond[2]=((((-1.0)*x6916*x6921))+cj0+((x6911*x6915))+(((-1.0)*r12*x6920)));
evalcond[3]=((((-1.0)*r02*x6920))+(((-1.0)*x6913))+((x6911*x6919))+(((-1.0)*x6914*x6921)));
evalcond[4]=(((x6912*x6914))+(((-1.0)*r02*x6921))+(((-1.0)*x6919*x6920))+(((-1.0)*cj0)));
evalcond[5]=(((x6912*x6916))+(((-1.0)*x6913))+(((-1.0)*r12*x6921))+(((-1.0)*x6915*x6920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6922=((1.0)*cj5);
CheckValue<IkReal> x6923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6922)))),-1);
if(!x6923.valid){
continue;
}
CheckValue<IkReal> x6924 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6923.value)))+(x6924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6925=IKsin(j4);
IkReal x6926=IKcos(j4);
IkReal x6927=((1.0)*sj0);
IkReal x6928=(cj5*r00);
IkReal x6929=(r11*sj5);
IkReal x6930=(cj5*r10);
IkReal x6931=(r21*sj5);
IkReal x6932=(cj5*r20);
IkReal x6933=(r01*sj5);
IkReal x6934=((1.0)*x6926);
IkReal x6935=((1.0)*x6925);
evalcond[0]=((((-1.0)*x6932*x6935))+(((-1.0)*r22*x6934))+((x6925*x6931)));
evalcond[1]=(((x6926*x6932))+(((-1.0)*r22*x6935))+(((-1.0)*x6931*x6934)));
evalcond[2]=(cj0+(((-1.0)*x6930*x6935))+(((-1.0)*r12*x6934))+((x6925*x6929)));
evalcond[3]=((((-1.0)*r02*x6934))+(((-1.0)*x6928*x6935))+((x6925*x6933))+(((-1.0)*x6927)));
evalcond[4]=(((x6926*x6928))+(((-1.0)*r02*x6935))+(((-1.0)*cj0))+(((-1.0)*x6933*x6934)));
evalcond[5]=(((x6926*x6930))+(((-1.0)*r12*x6935))+(((-1.0)*x6927))+(((-1.0)*x6929*x6934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6936=IKcos(j0);
IkReal x6937=IKsin(j0);
evalcond[0]=((((-0.134)*x6937))+(((-1.0)*px))+(((0.033)*x6936)));
evalcond[1]=((((-1.0)*py))+(((0.033)*x6937))+(((0.134)*x6936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6938=((1.0)*cj5);
IkReal x6939=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6938)));
j4eval[0]=x6939;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6938)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6940=cj5*cj5;
IkReal x6941=((1.0)*r21);
IkReal x6942=(cj5*sj5);
IkReal x6943=((1.0)*r20);
IkReal x6944=((((-1.0)*r01*x6942*x6943))+((r00*r20*x6940))+((r01*r21))+(((-1.0)*r00*x6941*x6942))+(((-1.0)*r01*x6940*x6941))+((r02*r22)));
j4eval[0]=x6944;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6943)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6945=cj5*cj5;
IkReal x6946=(r21*sj5);
IkReal x6947=(r11*r21);
IkReal x6948=((1.0)*cj5*r20);
IkReal x6949=((((-1.0)*cj5*r10*x6946))+((r12*r22))+(((-1.0)*r11*sj5*x6948))+x6947+(((-1.0)*x6945*x6947))+((r10*r20*x6945)));
j4eval[0]=x6949;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6948))+((sj0*x6946))))));
j4eval[2]=IKsign(x6949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6950=cj5*cj5;
IkReal x6951=(r21*sj5);
IkReal x6952=(r11*r21);
IkReal x6953=((1.0)*cj5*r20);
CheckValue<IkReal> x6954=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6950*x6952))+(((-1.0)*cj5*r10*x6951))+((r12*r22))+(((-1.0)*r11*sj5*x6953))+x6952+((r10*r20*x6950)))),-1);
if(!x6954.valid){
continue;
}
CheckValue<IkReal> x6955 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6953))+((sj0*x6951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6954.value)))+(x6955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6956=IKsin(j4);
IkReal x6957=IKcos(j4);
IkReal x6958=(r11*sj5);
IkReal x6959=(cj5*r00);
IkReal x6960=(cj5*r10);
IkReal x6961=(r21*sj5);
IkReal x6962=(cj5*r20);
IkReal x6963=(r01*sj5);
IkReal x6964=((1.0)*x6957);
IkReal x6965=((1.0)*x6956);
evalcond[0]=(((x6956*x6961))+(((-1.0)*r22*x6964))+(((-1.0)*x6962*x6965)));
evalcond[1]=((((-1.0)*x6961*x6964))+(((-1.0)*r22*x6965))+((x6957*x6962)));
evalcond[2]=(((x6956*x6958))+cj0+(((-1.0)*r12*x6964))+(((-1.0)*x6960*x6965)));
evalcond[3]=((((-1.0)*r02*x6965))+cj0+((x6957*x6959))+(((-1.0)*x6963*x6964)));
evalcond[4]=(sj0+(((-1.0)*x6958*x6964))+(((-1.0)*r12*x6965))+((x6957*x6960)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6964))+(((-1.0)*x6959*x6965))+((x6956*x6963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6966=cj5*cj5;
IkReal x6967=((1.0)*r21);
IkReal x6968=(cj5*sj5);
IkReal x6969=((1.0)*r20);
CheckValue<IkReal> x6970 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6970.valid){
continue;
}
CheckValue<IkReal> x6971=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x6966))+(((-1.0)*r01*x6968*x6969))+(((-1.0)*r00*x6967*x6968))+((r02*r22))+(((-1.0)*r01*x6966*x6967)))),-1);
if(!x6971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6970.value)+(((1.5707963267949)*(x6971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6972=IKsin(j4);
IkReal x6973=IKcos(j4);
IkReal x6974=(r11*sj5);
IkReal x6975=(cj5*r00);
IkReal x6976=(cj5*r10);
IkReal x6977=(r21*sj5);
IkReal x6978=(cj5*r20);
IkReal x6979=(r01*sj5);
IkReal x6980=((1.0)*x6973);
IkReal x6981=((1.0)*x6972);
evalcond[0]=(((x6972*x6977))+(((-1.0)*x6978*x6981))+(((-1.0)*r22*x6980)));
evalcond[1]=((((-1.0)*r22*x6981))+(((-1.0)*x6977*x6980))+((x6973*x6978)));
evalcond[2]=(((x6972*x6974))+cj0+(((-1.0)*r12*x6980))+(((-1.0)*x6976*x6981)));
evalcond[3]=(cj0+(((-1.0)*x6979*x6980))+(((-1.0)*r02*x6981))+((x6973*x6975)));
evalcond[4]=(sj0+(((-1.0)*r12*x6981))+(((-1.0)*x6974*x6980))+((x6973*x6976)));
evalcond[5]=(((x6972*x6979))+(((-1.0)*sj0))+(((-1.0)*x6975*x6981))+(((-1.0)*r02*x6980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6982=((1.0)*cj5);
CheckValue<IkReal> x6983 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6982))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6983.valid){
continue;
}
CheckValue<IkReal> x6984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6982)))),-1);
if(!x6984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6983.value)+(((1.5707963267949)*(x6984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6985=IKsin(j4);
IkReal x6986=IKcos(j4);
IkReal x6987=(r11*sj5);
IkReal x6988=(cj5*r00);
IkReal x6989=(cj5*r10);
IkReal x6990=(r21*sj5);
IkReal x6991=(cj5*r20);
IkReal x6992=(r01*sj5);
IkReal x6993=((1.0)*x6986);
IkReal x6994=((1.0)*x6985);
evalcond[0]=(((x6985*x6990))+(((-1.0)*r22*x6993))+(((-1.0)*x6991*x6994)));
evalcond[1]=(((x6986*x6991))+(((-1.0)*r22*x6994))+(((-1.0)*x6990*x6993)));
evalcond[2]=((((-1.0)*r12*x6993))+cj0+((x6985*x6987))+(((-1.0)*x6989*x6994)));
evalcond[3]=(cj0+((x6986*x6988))+(((-1.0)*x6992*x6993))+(((-1.0)*r02*x6994)));
evalcond[4]=((((-1.0)*r12*x6994))+sj0+(((-1.0)*x6987*x6993))+((x6986*x6989)));
evalcond[5]=(((x6985*x6992))+(((-1.0)*sj0))+(((-1.0)*r02*x6993))+(((-1.0)*x6988*x6994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6995=((1.0)*sj5);
IkReal x6996=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x6996))+(((-1.0)*r10*x6995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6995))+(((-1.0)*r01*x6996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6996))+(((-1.0)*r10*x6995))))+IKsqr(((((-1.0)*r00*x6995))+(((-1.0)*r01*x6996))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x6996))+(((-1.0)*r10*x6995))), ((((-1.0)*r00*x6995))+(((-1.0)*r01*x6996))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6997=IKsin(j0);
IkReal x6998=IKcos(j0);
IkReal x6999=((0.1)*sj5);
IkReal x7000=(cj5*r11);
IkReal x7001=(cj5*r01);
IkReal x7002=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7001))+(((-1.0)*x6998))+(((-1.0)*r00*x7002)));
evalcond[1]=((((-1.0)*x7000))+(((-1.0)*x6997))+(((-1.0)*r10*x7002)));
evalcond[2]=((((-1.0)*r00*x6999))+(((-0.1)*x7001))+(((-1.0)*px))+(((-0.134)*x6997)));
evalcond[3]=((((-0.1)*x7000))+(((-1.0)*r10*x6999))+(((-1.0)*py))+(((0.134)*x6998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7003=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7003;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7004=((1.0)*cj5);
IkReal x7005=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7004)));
j4eval[0]=x7005;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7004))))));
j4eval[2]=IKsign(x7005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7006=cj5*cj5;
IkReal x7007=r21*r21;
IkReal x7008=(r21*sj5);
IkReal x7009=(cj5*r20);
IkReal x7010=(x7007+(r22*r22)+(((-1.0)*x7006*x7007))+((x7006*(r20*r20)))+(((-2.0)*x7008*x7009)));
j4eval[0]=x7010;
j4eval[1]=IKsign(x7010);
j4eval[2]=((IKabs(((((-1.0)*x7009))+x7008)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7011=cj5*cj5;
IkReal x7012=r21*r21;
IkReal x7013=(r21*sj5);
IkReal x7014=(cj5*r20);
CheckValue<IkReal> x7015 = IKatan2WithCheck(IkReal(r22),IkReal((x7013+(((-1.0)*x7014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7015.valid){
continue;
}
CheckValue<IkReal> x7016=IKPowWithIntegerCheck(IKsign((x7012+(((-1.0)*x7011*x7012))+(r22*r22)+((x7011*(r20*r20)))+(((-2.0)*x7013*x7014)))),-1);
if(!x7016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7015.value)+(((1.5707963267949)*(x7016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7017=IKsin(j4);
IkReal x7018=IKcos(j4);
IkReal x7019=(r11*sj5);
IkReal x7020=(r21*sj5);
IkReal x7021=(cj5*r00);
IkReal x7022=(cj5*r20);
IkReal x7023=(r01*sj5);
IkReal x7024=(cj5*r10);
IkReal x7025=((1.0)*x7018);
IkReal x7026=((1.0)*x7017);
evalcond[0]=((((-1.0)*r22*x7025))+((x7017*x7020))+(((-1.0)*x7022*x7026)));
evalcond[1]=(((x7018*x7021))+(((-1.0)*r02*x7026))+(((-1.0)*x7023*x7025)));
evalcond[2]=((((-1.0)*r12*x7026))+((x7018*x7024))+(((-1.0)*x7019*x7025)));
evalcond[3]=((((-1.0)*r12*x7025))+(((-1.0)*x7024*x7026))+cj0+((x7017*x7019)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7026))+((x7018*x7022))+(((-1.0)*x7020*x7025)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7021*x7026))+(((-1.0)*r02*x7025))+((x7017*x7023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7027=((1.0)*cj5);
CheckValue<IkReal> x7028=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7027)))),-1);
if(!x7028.valid){
continue;
}
CheckValue<IkReal> x7029 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7028.value)))+(x7029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7030=IKsin(j4);
IkReal x7031=IKcos(j4);
IkReal x7032=(r11*sj5);
IkReal x7033=(r21*sj5);
IkReal x7034=(cj5*r00);
IkReal x7035=(cj5*r20);
IkReal x7036=(r01*sj5);
IkReal x7037=(cj5*r10);
IkReal x7038=((1.0)*x7031);
IkReal x7039=((1.0)*x7030);
evalcond[0]=(((x7030*x7033))+(((-1.0)*r22*x7038))+(((-1.0)*x7035*x7039)));
evalcond[1]=((((-1.0)*r02*x7039))+(((-1.0)*x7036*x7038))+((x7031*x7034)));
evalcond[2]=((((-1.0)*r12*x7039))+(((-1.0)*x7032*x7038))+((x7031*x7037)));
evalcond[3]=(((x7030*x7032))+cj0+(((-1.0)*r12*x7038))+(((-1.0)*x7037*x7039)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7039))+((x7031*x7035))+(((-1.0)*x7033*x7038)));
evalcond[5]=(((x7030*x7036))+(((-1.0)*sj0))+(((-1.0)*x7034*x7039))+(((-1.0)*r02*x7038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7040 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7040.valid){
continue;
}
CheckValue<IkReal> x7041=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7040.value)+(((1.5707963267949)*(x7041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7042=IKsin(j4);
IkReal x7043=IKcos(j4);
IkReal x7044=(r11*sj5);
IkReal x7045=(r21*sj5);
IkReal x7046=(cj5*r00);
IkReal x7047=(cj5*r20);
IkReal x7048=(r01*sj5);
IkReal x7049=(cj5*r10);
IkReal x7050=((1.0)*x7043);
IkReal x7051=((1.0)*x7042);
evalcond[0]=((((-1.0)*x7047*x7051))+(((-1.0)*r22*x7050))+((x7042*x7045)));
evalcond[1]=((((-1.0)*x7048*x7050))+((x7043*x7046))+(((-1.0)*r02*x7051)));
evalcond[2]=((((-1.0)*x7044*x7050))+(((-1.0)*r12*x7051))+((x7043*x7049)));
evalcond[3]=(cj0+(((-1.0)*x7049*x7051))+(((-1.0)*r12*x7050))+((x7042*x7044)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7051))+(((-1.0)*x7045*x7050))+((x7043*x7047)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7046*x7051))+((x7042*x7048))+(((-1.0)*r02*x7050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7052=IKcos(j0);
IkReal x7053=IKsin(j0);
evalcond[0]=((((-0.134)*x7053))+(((-0.392)*x7052))+(((-1.0)*px)));
evalcond[1]=((((-0.392)*x7053))+(((-1.0)*py))+(((0.134)*x7052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7054=((1.0)*cj5);
IkReal x7055=((((-1.0)*r01*x7054))+(((-1.0)*r00*sj5)));
j4eval[0]=x7055;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7054))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7056=cj5*cj5;
IkReal x7057=((1.0)*r21);
IkReal x7058=(cj5*sj5);
IkReal x7059=((1.0)*r20);
IkReal x7060=(((r00*r20*x7056))+((r01*r21))+(((-1.0)*r01*x7058*x7059))+(((-1.0)*r01*x7056*x7057))+((r02*r22))+(((-1.0)*r00*x7057*x7058)));
j4eval[0]=x7060;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7059)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7061=cj5*cj5;
IkReal x7062=(r21*sj5);
IkReal x7063=(r11*r21);
IkReal x7064=((1.0)*cj5*r20);
IkReal x7065=(x7063+((r12*r22))+(((-1.0)*r11*sj5*x7064))+(((-1.0)*cj5*r10*x7062))+(((-1.0)*x7061*x7063))+((r10*r20*x7061)));
j4eval[0]=x7065;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7064))+((sj0*x7062))))));
j4eval[2]=IKsign(x7065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7066=cj5*cj5;
IkReal x7067=(r21*sj5);
IkReal x7068=(r11*r21);
IkReal x7069=((1.0)*cj5*r20);
CheckValue<IkReal> x7070 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7069))+((sj0*x7067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7070.valid){
continue;
}
CheckValue<IkReal> x7071=IKPowWithIntegerCheck(IKsign((x7068+(((-1.0)*x7066*x7068))+((r12*r22))+(((-1.0)*r11*sj5*x7069))+(((-1.0)*cj5*r10*x7067))+((r10*r20*x7066)))),-1);
if(!x7071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7070.value)+(((1.5707963267949)*(x7071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7072=IKsin(j4);
IkReal x7073=IKcos(j4);
IkReal x7074=(r11*sj5);
IkReal x7075=(cj5*r00);
IkReal x7076=(cj5*r10);
IkReal x7077=(r21*sj5);
IkReal x7078=(cj5*r20);
IkReal x7079=(r01*sj5);
IkReal x7080=((1.0)*x7073);
IkReal x7081=((1.0)*x7072);
evalcond[0]=(((x7072*x7077))+(((-1.0)*r22*x7080))+(((-1.0)*x7078*x7081)));
evalcond[1]=(((x7073*x7078))+(((-1.0)*r22*x7081))+(((-1.0)*x7077*x7080)));
evalcond[2]=((((-1.0)*x7076*x7081))+cj0+((x7072*x7074))+(((-1.0)*r12*x7080)));
evalcond[3]=(cj0+(((-1.0)*x7079*x7080))+((x7073*x7075))+(((-1.0)*r02*x7081)));
evalcond[4]=(sj0+((x7073*x7076))+(((-1.0)*r12*x7081))+(((-1.0)*x7074*x7080)));
evalcond[5]=((((-1.0)*sj0))+((x7072*x7079))+(((-1.0)*x7075*x7081))+(((-1.0)*r02*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7082=cj5*cj5;
IkReal x7083=((1.0)*r21);
IkReal x7084=(cj5*sj5);
IkReal x7085=((1.0)*r20);
CheckValue<IkReal> x7086 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7086.valid){
continue;
}
CheckValue<IkReal> x7087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7082*x7083))+((r01*r21))+(((-1.0)*r00*x7083*x7084))+((r00*r20*x7082))+((r02*r22))+(((-1.0)*r01*x7084*x7085)))),-1);
if(!x7087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7086.value)+(((1.5707963267949)*(x7087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7088=IKsin(j4);
IkReal x7089=IKcos(j4);
IkReal x7090=(r11*sj5);
IkReal x7091=(cj5*r00);
IkReal x7092=(cj5*r10);
IkReal x7093=(r21*sj5);
IkReal x7094=(cj5*r20);
IkReal x7095=(r01*sj5);
IkReal x7096=((1.0)*x7089);
IkReal x7097=((1.0)*x7088);
evalcond[0]=((((-1.0)*x7094*x7097))+((x7088*x7093))+(((-1.0)*r22*x7096)));
evalcond[1]=((((-1.0)*x7093*x7096))+(((-1.0)*r22*x7097))+((x7089*x7094)));
evalcond[2]=(cj0+(((-1.0)*x7092*x7097))+(((-1.0)*r12*x7096))+((x7088*x7090)));
evalcond[3]=(cj0+(((-1.0)*x7095*x7096))+(((-1.0)*r02*x7097))+((x7089*x7091)));
evalcond[4]=(sj0+(((-1.0)*r12*x7097))+(((-1.0)*x7090*x7096))+((x7089*x7092)));
evalcond[5]=((((-1.0)*sj0))+((x7088*x7095))+(((-1.0)*x7091*x7097))+(((-1.0)*r02*x7096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7098=((1.0)*cj5);
CheckValue<IkReal> x7099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7098))+(((-1.0)*r00*sj5)))),-1);
if(!x7099.valid){
continue;
}
CheckValue<IkReal> x7100 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7099.value)))+(x7100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7101=IKsin(j4);
IkReal x7102=IKcos(j4);
IkReal x7103=(r11*sj5);
IkReal x7104=(cj5*r00);
IkReal x7105=(cj5*r10);
IkReal x7106=(r21*sj5);
IkReal x7107=(cj5*r20);
IkReal x7108=(r01*sj5);
IkReal x7109=((1.0)*x7102);
IkReal x7110=((1.0)*x7101);
evalcond[0]=((((-1.0)*x7107*x7110))+(((-1.0)*r22*x7109))+((x7101*x7106)));
evalcond[1]=(((x7102*x7107))+(((-1.0)*r22*x7110))+(((-1.0)*x7106*x7109)));
evalcond[2]=(cj0+(((-1.0)*r12*x7109))+(((-1.0)*x7105*x7110))+((x7101*x7103)));
evalcond[3]=(((x7102*x7104))+(((-1.0)*x7108*x7109))+cj0+(((-1.0)*r02*x7110)));
evalcond[4]=(((x7102*x7105))+sj0+(((-1.0)*x7103*x7109))+(((-1.0)*r12*x7110)));
evalcond[5]=((((-1.0)*x7104*x7110))+(((-1.0)*sj0))+(((-1.0)*r02*x7109))+((x7101*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7111=IKsin(j0);
IkReal x7112=IKcos(j0);
IkReal x7113=((0.1)*sj5);
IkReal x7114=(cj5*r11);
IkReal x7115=(cj5*r01);
IkReal x7116=((1.0)*sj5);
evalcond[0]=(x7112+(((-1.0)*x7115))+(((-1.0)*r00*x7116)));
evalcond[1]=(x7111+(((-1.0)*x7114))+(((-1.0)*r10*x7116)));
evalcond[2]=((((-0.1)*x7115))+(((-0.134)*x7111))+(((-1.0)*px))+(((-1.0)*r00*x7113)));
evalcond[3]=((((-0.1)*x7114))+(((-1.0)*r10*x7113))+(((-1.0)*py))+(((0.134)*x7112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7117=((1.0)*sj5);
IkReal x7118=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7117)));
j4eval[0]=x7118;
j4eval[1]=IKsign(x7118);
j4eval[2]=((IKabs(((((-1.0)*r01*x7117))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7119=((1.0)*cj5);
IkReal x7120=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7119)));
j4eval[0]=x7120;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7119)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7121=r21*r21;
IkReal x7122=cj5*cj5;
IkReal x7123=(r21*sj5);
IkReal x7124=(cj5*r20);
IkReal x7125=((((-1.0)*x7121))+((x7121*x7122))+(((-1.0)*(r22*r22)))+(((2.0)*x7123*x7124))+(((-1.0)*x7122*(r20*r20))));
j4eval[0]=x7125;
j4eval[1]=((IKabs(r22))+(IKabs((x7123+(((-1.0)*x7124))))));
j4eval[2]=IKsign(x7125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7126=r21*r21;
IkReal x7127=cj5*cj5;
IkReal x7128=(r21*sj5);
IkReal x7129=(cj5*r20);
CheckValue<IkReal> x7130 = IKatan2WithCheck(IkReal(r22),IkReal((x7128+(((-1.0)*x7129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7130.valid){
continue;
}
CheckValue<IkReal> x7131=IKPowWithIntegerCheck(IKsign(((((2.0)*x7128*x7129))+(((-1.0)*x7126))+(((-1.0)*(r22*r22)))+((x7126*x7127))+(((-1.0)*x7127*(r20*r20))))),-1);
if(!x7131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7130.value)+(((1.5707963267949)*(x7131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7132=IKsin(j4);
IkReal x7133=IKcos(j4);
IkReal x7134=(r11*sj5);
IkReal x7135=(r21*sj5);
IkReal x7136=(cj5*r00);
IkReal x7137=(cj5*r20);
IkReal x7138=(r01*sj5);
IkReal x7139=(cj5*r10);
IkReal x7140=((1.0)*x7133);
IkReal x7141=((1.0)*x7132);
evalcond[0]=((((-1.0)*r22*x7140))+((x7132*x7135))+(((-1.0)*x7137*x7141)));
evalcond[1]=(((x7133*x7136))+(((-1.0)*x7138*x7140))+(((-1.0)*r02*x7141)));
evalcond[2]=(((x7133*x7139))+(((-1.0)*x7134*x7140))+(((-1.0)*r12*x7141)));
evalcond[3]=(cj0+((x7132*x7134))+(((-1.0)*x7139*x7141))+(((-1.0)*r12*x7140)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7141))+((x7133*x7137))+(((-1.0)*x7135*x7140)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7136*x7141))+((x7132*x7138))+(((-1.0)*r02*x7140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7142=((1.0)*cj5);
CheckValue<IkReal> x7143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7142)))),-1);
if(!x7143.valid){
continue;
}
CheckValue<IkReal> x7144 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7143.value)))+(x7144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7145=IKsin(j4);
IkReal x7146=IKcos(j4);
IkReal x7147=(r11*sj5);
IkReal x7148=(r21*sj5);
IkReal x7149=(cj5*r00);
IkReal x7150=(cj5*r20);
IkReal x7151=(r01*sj5);
IkReal x7152=(cj5*r10);
IkReal x7153=((1.0)*x7146);
IkReal x7154=((1.0)*x7145);
evalcond[0]=((((-1.0)*r22*x7153))+((x7145*x7148))+(((-1.0)*x7150*x7154)));
evalcond[1]=((((-1.0)*x7151*x7153))+((x7146*x7149))+(((-1.0)*r02*x7154)));
evalcond[2]=((((-1.0)*r12*x7154))+((x7146*x7152))+(((-1.0)*x7147*x7153)));
evalcond[3]=((((-1.0)*r12*x7153))+(((-1.0)*x7152*x7154))+cj0+((x7145*x7147)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7154))+((x7146*x7150))+(((-1.0)*x7148*x7153)));
evalcond[5]=((((-1.0)*sj0))+((x7145*x7151))+(((-1.0)*x7149*x7154))+(((-1.0)*r02*x7153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7155=((1.0)*sj5);
CheckValue<IkReal> x7156=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7155)))),-1);
if(!x7156.valid){
continue;
}
CheckValue<IkReal> x7157 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7155))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7156.value)))+(x7157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7158=IKsin(j4);
IkReal x7159=IKcos(j4);
IkReal x7160=(r11*sj5);
IkReal x7161=(r21*sj5);
IkReal x7162=(cj5*r00);
IkReal x7163=(cj5*r20);
IkReal x7164=(r01*sj5);
IkReal x7165=(cj5*r10);
IkReal x7166=((1.0)*x7159);
IkReal x7167=((1.0)*x7158);
evalcond[0]=((((-1.0)*r22*x7166))+(((-1.0)*x7163*x7167))+((x7158*x7161)));
evalcond[1]=((((-1.0)*r02*x7167))+((x7159*x7162))+(((-1.0)*x7164*x7166)));
evalcond[2]=(((x7159*x7165))+(((-1.0)*x7160*x7166))+(((-1.0)*r12*x7167)));
evalcond[3]=(cj0+((x7158*x7160))+(((-1.0)*x7165*x7167))+(((-1.0)*r12*x7166)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7167))+((x7159*x7163))+(((-1.0)*x7161*x7166)));
evalcond[5]=((((-1.0)*r02*x7166))+(((-1.0)*sj0))+((x7158*x7164))+(((-1.0)*x7162*x7167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7168=IKsin(j0);
IkReal x7169=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x7168))+(((0.392)*x7169)));
evalcond[1]=((((0.134)*x7169))+(((-1.0)*py))+(((0.392)*x7168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7170=((1.0)*cj5);
IkReal x7171=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7170)));
j4eval[0]=x7171;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7170))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7172=((1.0)*cj5);
IkReal x7173=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7172)));
j4eval[0]=x7173;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7172))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7174=cj5*cj5;
IkReal x7175=((1.0)*sj5);
IkReal x7176=(cj5*r20);
IkReal x7177=(r11*r21);
IkReal x7178=(x7177+(((-1.0)*cj5*r10*r21*x7175))+(((-1.0)*x7174*x7177))+((r12*r22))+((r10*r20*x7174))+(((-1.0)*r11*x7175*x7176)));
j4eval[0]=x7178;
j4eval[1]=IKsign(x7178);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7175))+((cj0*x7176)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7179=cj5*cj5;
IkReal x7180=((1.0)*sj5);
IkReal x7181=(cj5*r20);
IkReal x7182=(r11*r21);
CheckValue<IkReal> x7183=IKPowWithIntegerCheck(IKsign((x7182+(((-1.0)*r11*x7180*x7181))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7180))+((r10*r20*x7179))+(((-1.0)*x7179*x7182)))),-1);
if(!x7183.valid){
continue;
}
CheckValue<IkReal> x7184 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7180))+((cj0*x7181)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7183.value)))+(x7184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7185=IKsin(j4);
IkReal x7186=IKcos(j4);
IkReal x7187=((1.0)*sj0);
IkReal x7188=(cj5*r00);
IkReal x7189=(r11*sj5);
IkReal x7190=(cj5*r10);
IkReal x7191=(r21*sj5);
IkReal x7192=(cj5*r20);
IkReal x7193=(r01*sj5);
IkReal x7194=((1.0)*x7186);
IkReal x7195=((1.0)*x7185);
evalcond[0]=((((-1.0)*r22*x7194))+(((-1.0)*x7192*x7195))+((x7185*x7191)));
evalcond[1]=((((-1.0)*x7191*x7194))+(((-1.0)*r22*x7195))+((x7186*x7192)));
evalcond[2]=(((x7185*x7189))+cj0+(((-1.0)*x7190*x7195))+(((-1.0)*r12*x7194)));
evalcond[3]=((((-1.0)*x7187))+(((-1.0)*x7188*x7195))+(((-1.0)*r02*x7194))+((x7185*x7193)));
evalcond[4]=(((x7186*x7188))+(((-1.0)*x7193*x7194))+(((-1.0)*r02*x7195))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7189*x7194))+(((-1.0)*x7187))+(((-1.0)*r12*x7195))+((x7186*x7190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7196=((1.0)*cj5);
CheckValue<IkReal> x7197 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7197.valid){
continue;
}
CheckValue<IkReal> x7198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7196)))),-1);
if(!x7198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7197.value)+(((1.5707963267949)*(x7198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7199=IKsin(j4);
IkReal x7200=IKcos(j4);
IkReal x7201=((1.0)*sj0);
IkReal x7202=(cj5*r00);
IkReal x7203=(r11*sj5);
IkReal x7204=(cj5*r10);
IkReal x7205=(r21*sj5);
IkReal x7206=(cj5*r20);
IkReal x7207=(r01*sj5);
IkReal x7208=((1.0)*x7200);
IkReal x7209=((1.0)*x7199);
evalcond[0]=((((-1.0)*x7206*x7209))+((x7199*x7205))+(((-1.0)*r22*x7208)));
evalcond[1]=(((x7200*x7206))+(((-1.0)*x7205*x7208))+(((-1.0)*r22*x7209)));
evalcond[2]=(cj0+((x7199*x7203))+(((-1.0)*x7204*x7209))+(((-1.0)*r12*x7208)));
evalcond[3]=(((x7199*x7207))+(((-1.0)*x7202*x7209))+(((-1.0)*x7201))+(((-1.0)*r02*x7208)));
evalcond[4]=((((-1.0)*x7207*x7208))+((x7200*x7202))+(((-1.0)*cj0))+(((-1.0)*r02*x7209)));
evalcond[5]=(((x7200*x7204))+(((-1.0)*x7203*x7208))+(((-1.0)*r12*x7209))+(((-1.0)*x7201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7210=((1.0)*cj5);
CheckValue<IkReal> x7211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7211.valid){
continue;
}
CheckValue<IkReal> x7212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7210))+(((-1.0)*r00*sj5)))),-1);
if(!x7212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7211.value)+(((1.5707963267949)*(x7212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7213=IKsin(j4);
IkReal x7214=IKcos(j4);
IkReal x7215=((1.0)*sj0);
IkReal x7216=(cj5*r00);
IkReal x7217=(r11*sj5);
IkReal x7218=(cj5*r10);
IkReal x7219=(r21*sj5);
IkReal x7220=(cj5*r20);
IkReal x7221=(r01*sj5);
IkReal x7222=((1.0)*x7214);
IkReal x7223=((1.0)*x7213);
evalcond[0]=((((-1.0)*x7220*x7223))+((x7213*x7219))+(((-1.0)*r22*x7222)));
evalcond[1]=(((x7214*x7220))+(((-1.0)*r22*x7223))+(((-1.0)*x7219*x7222)));
evalcond[2]=(cj0+(((-1.0)*x7218*x7223))+(((-1.0)*r12*x7222))+((x7213*x7217)));
evalcond[3]=((((-1.0)*r02*x7222))+(((-1.0)*x7215))+(((-1.0)*x7216*x7223))+((x7213*x7221)));
evalcond[4]=((((-1.0)*r02*x7223))+((x7214*x7216))+(((-1.0)*x7221*x7222))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7217*x7222))+((x7214*x7218))+(((-1.0)*x7215))+(((-1.0)*r12*x7223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7224=IKcos(j0);
IkReal x7225=IKsin(j0);
evalcond[0]=((((-0.134)*x7225))+(((-1.0)*px))+(((-0.817)*x7224)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7224))+(((-0.817)*x7225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7226=((1.0)*cj5);
IkReal x7227=((((-1.0)*r01*x7226))+(((-1.0)*r00*sj5)));
j4eval[0]=x7227;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7226))))));
j4eval[2]=IKsign(x7227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7228=cj5*cj5;
IkReal x7229=((1.0)*r21);
IkReal x7230=(cj5*sj5);
IkReal x7231=((1.0)*r20);
IkReal x7232=(((r01*r21))+(((-1.0)*r01*x7228*x7229))+(((-1.0)*r00*x7229*x7230))+((r02*r22))+((r00*r20*x7228))+(((-1.0)*r01*x7230*x7231)));
j4eval[0]=x7232;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7231))))));
j4eval[2]=IKsign(x7232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7233=cj5*cj5;
IkReal x7234=(r21*sj5);
IkReal x7235=(r11*r21);
IkReal x7236=((1.0)*cj5*r20);
IkReal x7237=((((-1.0)*r11*sj5*x7236))+(((-1.0)*cj5*r10*x7234))+((r10*r20*x7233))+x7235+(((-1.0)*x7233*x7235))+((r12*r22)));
j4eval[0]=x7237;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7236))+((sj0*x7234))))));
j4eval[2]=IKsign(x7237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7238=cj5*cj5;
IkReal x7239=(r21*sj5);
IkReal x7240=(r11*r21);
IkReal x7241=((1.0)*cj5*r20);
CheckValue<IkReal> x7242 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7239))+(((-1.0)*sj0*x7241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7242.valid){
continue;
}
CheckValue<IkReal> x7243=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7239))+((r10*r20*x7238))+x7240+(((-1.0)*r11*sj5*x7241))+((r12*r22))+(((-1.0)*x7238*x7240)))),-1);
if(!x7243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7242.value)+(((1.5707963267949)*(x7243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7244=IKsin(j4);
IkReal x7245=IKcos(j4);
IkReal x7246=(r11*sj5);
IkReal x7247=(cj5*r00);
IkReal x7248=(cj5*r10);
IkReal x7249=(r21*sj5);
IkReal x7250=(cj5*r20);
IkReal x7251=(r01*sj5);
IkReal x7252=((1.0)*x7245);
IkReal x7253=((1.0)*x7244);
evalcond[0]=(((x7244*x7249))+(((-1.0)*r22*x7252))+(((-1.0)*x7250*x7253)));
evalcond[1]=(((x7245*x7250))+(((-1.0)*x7249*x7252))+(((-1.0)*r22*x7253)));
evalcond[2]=(cj0+((x7244*x7246))+(((-1.0)*r12*x7252))+(((-1.0)*x7248*x7253)));
evalcond[3]=((((-1.0)*x7251*x7252))+cj0+(((-1.0)*r02*x7253))+((x7245*x7247)));
evalcond[4]=(sj0+(((-1.0)*x7246*x7252))+(((-1.0)*r12*x7253))+((x7245*x7248)));
evalcond[5]=((((-1.0)*sj0))+((x7244*x7251))+(((-1.0)*x7247*x7253))+(((-1.0)*r02*x7252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7254=cj5*cj5;
IkReal x7255=((1.0)*r21);
IkReal x7256=(cj5*sj5);
IkReal x7257=((1.0)*r20);
CheckValue<IkReal> x7258 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7258.valid){
continue;
}
CheckValue<IkReal> x7259=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7254*x7255))+(((-1.0)*r00*x7255*x7256))+((r02*r22))+(((-1.0)*r01*x7256*x7257))+((r00*r20*x7254)))),-1);
if(!x7259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7258.value)+(((1.5707963267949)*(x7259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7260=IKsin(j4);
IkReal x7261=IKcos(j4);
IkReal x7262=(r11*sj5);
IkReal x7263=(cj5*r00);
IkReal x7264=(cj5*r10);
IkReal x7265=(r21*sj5);
IkReal x7266=(cj5*r20);
IkReal x7267=(r01*sj5);
IkReal x7268=((1.0)*x7261);
IkReal x7269=((1.0)*x7260);
evalcond[0]=((((-1.0)*r22*x7268))+(((-1.0)*x7266*x7269))+((x7260*x7265)));
evalcond[1]=((((-1.0)*r22*x7269))+((x7261*x7266))+(((-1.0)*x7265*x7268)));
evalcond[2]=((((-1.0)*x7264*x7269))+cj0+((x7260*x7262))+(((-1.0)*r12*x7268)));
evalcond[3]=(cj0+(((-1.0)*x7267*x7268))+((x7261*x7263))+(((-1.0)*r02*x7269)));
evalcond[4]=(sj0+(((-1.0)*x7262*x7268))+((x7261*x7264))+(((-1.0)*r12*x7269)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7263*x7269))+((x7260*x7267))+(((-1.0)*r02*x7268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7270=((1.0)*cj5);
CheckValue<IkReal> x7271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7270)))),-1);
if(!x7271.valid){
continue;
}
CheckValue<IkReal> x7272 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7271.value)))+(x7272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7273=IKsin(j4);
IkReal x7274=IKcos(j4);
IkReal x7275=(r11*sj5);
IkReal x7276=(cj5*r00);
IkReal x7277=(cj5*r10);
IkReal x7278=(r21*sj5);
IkReal x7279=(cj5*r20);
IkReal x7280=(r01*sj5);
IkReal x7281=((1.0)*x7274);
IkReal x7282=((1.0)*x7273);
evalcond[0]=(((x7273*x7278))+(((-1.0)*x7279*x7282))+(((-1.0)*r22*x7281)));
evalcond[1]=((((-1.0)*x7278*x7281))+((x7274*x7279))+(((-1.0)*r22*x7282)));
evalcond[2]=(cj0+(((-1.0)*x7277*x7282))+(((-1.0)*r12*x7281))+((x7273*x7275)));
evalcond[3]=(cj0+(((-1.0)*x7280*x7281))+((x7274*x7276))+(((-1.0)*r02*x7282)));
evalcond[4]=(sj0+(((-1.0)*r12*x7282))+(((-1.0)*x7275*x7281))+((x7274*x7277)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7276*x7282))+((x7273*x7280))+(((-1.0)*r02*x7281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7283=IKcos(j0);
IkReal x7284=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.033)*x7283))+(((-0.134)*x7284)));
evalcond[1]=((((0.134)*x7283))+(((-1.0)*py))+(((-0.033)*x7284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7285=((1.0)*cj5);
IkReal x7286=((((-1.0)*r01*x7285))+(((-1.0)*r00*sj5)));
j4eval[0]=x7286;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7285))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7287=((1.0)*cj5);
IkReal x7288=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7287)));
j4eval[0]=x7288;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7287))))));
j4eval[2]=IKsign(x7288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7289=cj5*cj5;
IkReal x7290=((1.0)*sj5);
IkReal x7291=(cj5*r20);
IkReal x7292=(r11*r21);
IkReal x7293=((((-1.0)*r11*x7290*x7291))+x7292+(((-1.0)*cj5*r10*r21*x7290))+((r10*r20*x7289))+((r12*r22))+(((-1.0)*x7289*x7292)));
j4eval[0]=x7293;
j4eval[1]=IKsign(x7293);
j4eval[2]=((IKabs((((cj0*x7291))+(((-1.0)*cj0*r21*x7290)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7294=cj5*cj5;
IkReal x7295=((1.0)*sj5);
IkReal x7296=(cj5*r20);
IkReal x7297=(r11*r21);
CheckValue<IkReal> x7298=IKPowWithIntegerCheck(IKsign((x7297+(((-1.0)*cj5*r10*r21*x7295))+((r10*r20*x7294))+((r12*r22))+(((-1.0)*x7294*x7297))+(((-1.0)*r11*x7295*x7296)))),-1);
if(!x7298.valid){
continue;
}
CheckValue<IkReal> x7299 = IKatan2WithCheck(IkReal((((cj0*x7296))+(((-1.0)*cj0*r21*x7295)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7298.value)))+(x7299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7300=IKsin(j4);
IkReal x7301=IKcos(j4);
IkReal x7302=((1.0)*sj0);
IkReal x7303=(cj5*r00);
IkReal x7304=(r11*sj5);
IkReal x7305=(cj5*r10);
IkReal x7306=(r21*sj5);
IkReal x7307=(cj5*r20);
IkReal x7308=(r01*sj5);
IkReal x7309=((1.0)*x7301);
IkReal x7310=((1.0)*x7300);
evalcond[0]=(((x7300*x7306))+(((-1.0)*r22*x7309))+(((-1.0)*x7307*x7310)));
evalcond[1]=(((x7301*x7307))+(((-1.0)*r22*x7310))+(((-1.0)*x7306*x7309)));
evalcond[2]=(cj0+((x7300*x7304))+(((-1.0)*r12*x7309))+(((-1.0)*x7305*x7310)));
evalcond[3]=((((-1.0)*r02*x7309))+((x7300*x7308))+(((-1.0)*x7303*x7310))+(((-1.0)*x7302)));
evalcond[4]=(((x7301*x7303))+(((-1.0)*x7308*x7309))+(((-1.0)*cj0))+(((-1.0)*r02*x7310)));
evalcond[5]=(((x7301*x7305))+(((-1.0)*r12*x7310))+(((-1.0)*x7302))+(((-1.0)*x7304*x7309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7311=((1.0)*cj5);
CheckValue<IkReal> x7312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7311)))),-1);
if(!x7312.valid){
continue;
}
CheckValue<IkReal> x7313 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7311))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7312.value)))+(x7313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7314=IKsin(j4);
IkReal x7315=IKcos(j4);
IkReal x7316=((1.0)*sj0);
IkReal x7317=(cj5*r00);
IkReal x7318=(r11*sj5);
IkReal x7319=(cj5*r10);
IkReal x7320=(r21*sj5);
IkReal x7321=(cj5*r20);
IkReal x7322=(r01*sj5);
IkReal x7323=((1.0)*x7315);
IkReal x7324=((1.0)*x7314);
evalcond[0]=((((-1.0)*r22*x7323))+(((-1.0)*x7321*x7324))+((x7314*x7320)));
evalcond[1]=((((-1.0)*r22*x7324))+((x7315*x7321))+(((-1.0)*x7320*x7323)));
evalcond[2]=(cj0+(((-1.0)*x7319*x7324))+((x7314*x7318))+(((-1.0)*r12*x7323)));
evalcond[3]=((((-1.0)*x7317*x7324))+(((-1.0)*x7316))+((x7314*x7322))+(((-1.0)*r02*x7323)));
evalcond[4]=((((-1.0)*x7322*x7323))+((x7315*x7317))+(((-1.0)*cj0))+(((-1.0)*r02*x7324)));
evalcond[5]=((((-1.0)*x7318*x7323))+((x7315*x7319))+(((-1.0)*x7316))+(((-1.0)*r12*x7324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7325=((1.0)*cj5);
CheckValue<IkReal> x7326 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7326.valid){
continue;
}
CheckValue<IkReal> x7327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7325)))),-1);
if(!x7327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7326.value)+(((1.5707963267949)*(x7327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7328=IKsin(j4);
IkReal x7329=IKcos(j4);
IkReal x7330=((1.0)*sj0);
IkReal x7331=(cj5*r00);
IkReal x7332=(r11*sj5);
IkReal x7333=(cj5*r10);
IkReal x7334=(r21*sj5);
IkReal x7335=(cj5*r20);
IkReal x7336=(r01*sj5);
IkReal x7337=((1.0)*x7329);
IkReal x7338=((1.0)*x7328);
evalcond[0]=(((x7328*x7334))+(((-1.0)*x7335*x7338))+(((-1.0)*r22*x7337)));
evalcond[1]=(((x7329*x7335))+(((-1.0)*r22*x7338))+(((-1.0)*x7334*x7337)));
evalcond[2]=(((x7328*x7332))+cj0+(((-1.0)*r12*x7337))+(((-1.0)*x7333*x7338)));
evalcond[3]=((((-1.0)*r02*x7337))+((x7328*x7336))+(((-1.0)*x7330))+(((-1.0)*x7331*x7338)));
evalcond[4]=((((-1.0)*r02*x7338))+((x7329*x7331))+(((-1.0)*x7336*x7337))+(((-1.0)*cj0)));
evalcond[5]=(((x7329*x7333))+(((-1.0)*r12*x7338))+(((-1.0)*x7332*x7337))+(((-1.0)*x7330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7339=IKsin(j0);
IkReal x7340=IKcos(j0);
IkReal x7341=((0.1)*sj5);
IkReal x7342=(cj5*r11);
IkReal x7343=(cj5*r01);
IkReal x7344=((1.0)*sj5);
evalcond[0]=(x7340+(((-1.0)*r00*x7344))+(((-1.0)*x7343)));
evalcond[1]=(x7339+(((-1.0)*r10*x7344))+(((-1.0)*x7342)));
evalcond[2]=((((-0.134)*x7339))+(((-1.0)*r00*x7341))+(((-0.1)*x7343))+(((-1.0)*px)));
evalcond[3]=((((0.134)*x7340))+(((-1.0)*r10*x7341))+(((-0.1)*x7342))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7345=((1.0)*sj5);
IkReal x7346=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7345)));
j4eval[0]=x7346;
j4eval[1]=IKsign(x7346);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7345))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7347=((1.0)*cj5);
IkReal x7348=((((-1.0)*r01*x7347))+(((-1.0)*r00*sj5)));
j4eval[0]=x7348;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7347))))));
j4eval[2]=IKsign(x7348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7349=r21*r21;
IkReal x7350=cj5*cj5;
IkReal x7351=(r21*sj5);
IkReal x7352=(cj5*r20);
IkReal x7353=((((2.0)*x7351*x7352))+(((-1.0)*x7350*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x7349))+((x7349*x7350)));
j4eval[0]=x7353;
j4eval[1]=((IKabs(r22))+(IKabs((x7351+(((-1.0)*x7352))))));
j4eval[2]=IKsign(x7353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7354=r21*r21;
IkReal x7355=cj5*cj5;
IkReal x7356=(r21*sj5);
IkReal x7357=(cj5*r20);
CheckValue<IkReal> x7358 = IKatan2WithCheck(IkReal(r22),IkReal((x7356+(((-1.0)*x7357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7358.valid){
continue;
}
CheckValue<IkReal> x7359=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x7356*x7357))+(((-1.0)*x7354))+(((-1.0)*x7355*(r20*r20)))+((x7354*x7355)))),-1);
if(!x7359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7358.value)+(((1.5707963267949)*(x7359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7360=IKsin(j4);
IkReal x7361=IKcos(j4);
IkReal x7362=(r11*sj5);
IkReal x7363=(r21*sj5);
IkReal x7364=(cj5*r00);
IkReal x7365=(cj5*r20);
IkReal x7366=(r01*sj5);
IkReal x7367=(cj5*r10);
IkReal x7368=((1.0)*x7361);
IkReal x7369=((1.0)*x7360);
evalcond[0]=((((-1.0)*x7365*x7369))+(((-1.0)*r22*x7368))+((x7360*x7363)));
evalcond[1]=((((-1.0)*x7366*x7368))+((x7361*x7364))+(((-1.0)*r02*x7369)));
evalcond[2]=((((-1.0)*r12*x7369))+((x7361*x7367))+(((-1.0)*x7362*x7368)));
evalcond[3]=(cj0+(((-1.0)*r12*x7368))+(((-1.0)*x7367*x7369))+((x7360*x7362)));
evalcond[4]=((-1.0)+(((-1.0)*x7363*x7368))+(((-1.0)*r22*x7369))+((x7361*x7365)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7364*x7369))+((x7360*x7366))+(((-1.0)*r02*x7368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7370=((1.0)*cj5);
CheckValue<IkReal> x7371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7370))+(((-1.0)*r00*sj5)))),-1);
if(!x7371.valid){
continue;
}
CheckValue<IkReal> x7372 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7371.value)))+(x7372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7373=IKsin(j4);
IkReal x7374=IKcos(j4);
IkReal x7375=(r11*sj5);
IkReal x7376=(r21*sj5);
IkReal x7377=(cj5*r00);
IkReal x7378=(cj5*r20);
IkReal x7379=(r01*sj5);
IkReal x7380=(cj5*r10);
IkReal x7381=((1.0)*x7374);
IkReal x7382=((1.0)*x7373);
evalcond[0]=((((-1.0)*r22*x7381))+(((-1.0)*x7378*x7382))+((x7373*x7376)));
evalcond[1]=((((-1.0)*r02*x7382))+(((-1.0)*x7379*x7381))+((x7374*x7377)));
evalcond[2]=(((x7374*x7380))+(((-1.0)*x7375*x7381))+(((-1.0)*r12*x7382)));
evalcond[3]=(cj0+(((-1.0)*x7380*x7382))+((x7373*x7375))+(((-1.0)*r12*x7381)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7382))+(((-1.0)*x7376*x7381))+((x7374*x7378)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7381))+(((-1.0)*x7377*x7382))+((x7373*x7379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7383=((1.0)*sj5);
CheckValue<IkReal> x7384=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7383)))),-1);
if(!x7384.valid){
continue;
}
CheckValue<IkReal> x7385 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7383))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7384.value)))+(x7385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7386=IKsin(j4);
IkReal x7387=IKcos(j4);
IkReal x7388=(r11*sj5);
IkReal x7389=(r21*sj5);
IkReal x7390=(cj5*r00);
IkReal x7391=(cj5*r20);
IkReal x7392=(r01*sj5);
IkReal x7393=(cj5*r10);
IkReal x7394=((1.0)*x7387);
IkReal x7395=((1.0)*x7386);
evalcond[0]=((((-1.0)*r22*x7394))+((x7386*x7389))+(((-1.0)*x7391*x7395)));
evalcond[1]=((((-1.0)*x7392*x7394))+(((-1.0)*r02*x7395))+((x7387*x7390)));
evalcond[2]=((((-1.0)*r12*x7395))+(((-1.0)*x7388*x7394))+((x7387*x7393)));
evalcond[3]=((((-1.0)*r12*x7394))+cj0+((x7386*x7388))+(((-1.0)*x7393*x7395)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7395))+(((-1.0)*x7389*x7394))+((x7387*x7391)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7390*x7395))+(((-1.0)*r02*x7394))+((x7386*x7392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7396=IKsin(j0);
IkReal x7397=IKcos(j0);
evalcond[0]=((((-0.134)*x7396))+(((0.392)*x7397))+(((-1.0)*px)));
evalcond[1]=((((0.392)*x7396))+(((-1.0)*py))+(((0.134)*x7397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7398=((1.0)*cj5);
IkReal x7399=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7398)));
j4eval[0]=x7399;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7398)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7400=((1.0)*cj5);
IkReal x7401=((((-1.0)*r11*x7400))+(((-1.0)*r10*sj5)));
j4eval[0]=x7401;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7400))))));
j4eval[2]=IKsign(x7401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7402=cj5*cj5;
IkReal x7403=((1.0)*sj5);
IkReal x7404=(cj5*r20);
IkReal x7405=(r11*r21);
IkReal x7406=((((-1.0)*r11*x7403*x7404))+((r12*r22))+(((-1.0)*x7402*x7405))+(((-1.0)*cj5*r10*r21*x7403))+x7405+((r10*r20*x7402)));
j4eval[0]=x7406;
j4eval[1]=IKsign(x7406);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7403))+((cj0*x7404)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7407=cj5*cj5;
IkReal x7408=((1.0)*sj5);
IkReal x7409=(cj5*r20);
IkReal x7410=(r11*r21);
CheckValue<IkReal> x7411 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7408))+((cj0*x7409)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7411.valid){
continue;
}
CheckValue<IkReal> x7412=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*r11*x7408*x7409))+(((-1.0)*cj5*r10*r21*x7408))+(((-1.0)*x7407*x7410))+x7410+((r10*r20*x7407)))),-1);
if(!x7412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7411.value)+(((1.5707963267949)*(x7412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7413=IKsin(j4);
IkReal x7414=IKcos(j4);
IkReal x7415=((1.0)*sj0);
IkReal x7416=(cj5*r00);
IkReal x7417=(r11*sj5);
IkReal x7418=(cj5*r10);
IkReal x7419=(r21*sj5);
IkReal x7420=(cj5*r20);
IkReal x7421=(r01*sj5);
IkReal x7422=((1.0)*x7414);
IkReal x7423=((1.0)*x7413);
evalcond[0]=(((x7413*x7419))+(((-1.0)*r22*x7422))+(((-1.0)*x7420*x7423)));
evalcond[1]=((((-1.0)*r22*x7423))+(((-1.0)*x7419*x7422))+((x7414*x7420)));
evalcond[2]=(((x7413*x7417))+cj0+(((-1.0)*r12*x7422))+(((-1.0)*x7418*x7423)));
evalcond[3]=((((-1.0)*x7416*x7423))+(((-1.0)*r02*x7422))+(((-1.0)*x7415))+((x7413*x7421)));
evalcond[4]=((((-1.0)*x7421*x7422))+(((-1.0)*r02*x7423))+(((-1.0)*cj0))+((x7414*x7416)));
evalcond[5]=((((-1.0)*r12*x7423))+(((-1.0)*x7415))+((x7414*x7418))+(((-1.0)*x7417*x7422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7424=((1.0)*cj5);
CheckValue<IkReal> x7425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7424)))),-1);
if(!x7425.valid){
continue;
}
CheckValue<IkReal> x7426 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7424))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7425.value)))+(x7426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7427=IKsin(j4);
IkReal x7428=IKcos(j4);
IkReal x7429=((1.0)*sj0);
IkReal x7430=(cj5*r00);
IkReal x7431=(r11*sj5);
IkReal x7432=(cj5*r10);
IkReal x7433=(r21*sj5);
IkReal x7434=(cj5*r20);
IkReal x7435=(r01*sj5);
IkReal x7436=((1.0)*x7428);
IkReal x7437=((1.0)*x7427);
evalcond[0]=((((-1.0)*r22*x7436))+(((-1.0)*x7434*x7437))+((x7427*x7433)));
evalcond[1]=((((-1.0)*r22*x7437))+((x7428*x7434))+(((-1.0)*x7433*x7436)));
evalcond[2]=(cj0+(((-1.0)*r12*x7436))+((x7427*x7431))+(((-1.0)*x7432*x7437)));
evalcond[3]=((((-1.0)*x7430*x7437))+(((-1.0)*r02*x7436))+((x7427*x7435))+(((-1.0)*x7429)));
evalcond[4]=((((-1.0)*r02*x7437))+((x7428*x7430))+(((-1.0)*x7435*x7436))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7437))+((x7428*x7432))+(((-1.0)*x7429))+(((-1.0)*x7431*x7436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7438=((1.0)*cj5);
CheckValue<IkReal> x7439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7438))+(((-1.0)*r00*sj5)))),-1);
if(!x7439.valid){
continue;
}
CheckValue<IkReal> x7440 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7439.value)))+(x7440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7441=IKsin(j4);
IkReal x7442=IKcos(j4);
IkReal x7443=((1.0)*sj0);
IkReal x7444=(cj5*r00);
IkReal x7445=(r11*sj5);
IkReal x7446=(cj5*r10);
IkReal x7447=(r21*sj5);
IkReal x7448=(cj5*r20);
IkReal x7449=(r01*sj5);
IkReal x7450=((1.0)*x7442);
IkReal x7451=((1.0)*x7441);
evalcond[0]=((((-1.0)*r22*x7450))+((x7441*x7447))+(((-1.0)*x7448*x7451)));
evalcond[1]=(((x7442*x7448))+(((-1.0)*x7447*x7450))+(((-1.0)*r22*x7451)));
evalcond[2]=(cj0+(((-1.0)*x7446*x7451))+(((-1.0)*r12*x7450))+((x7441*x7445)));
evalcond[3]=((((-1.0)*x7443))+(((-1.0)*r02*x7450))+(((-1.0)*x7444*x7451))+((x7441*x7449)));
evalcond[4]=(((x7442*x7444))+(((-1.0)*r02*x7451))+(((-1.0)*x7449*x7450))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7443))+((x7442*x7446))+(((-1.0)*x7445*x7450))+(((-1.0)*r12*x7451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7452=((1.0)*sj5);
IkReal x7453=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7452))+(((-1.0)*r11*x7453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7452))+(((-1.0)*r01*x7453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7452))+(((-1.0)*r11*x7453))))+IKsqr(((((-1.0)*r00*x7452))+(((-1.0)*r01*x7453))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7452))+(((-1.0)*r11*x7453))), ((((-1.0)*r00*x7452))+(((-1.0)*r01*x7453))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7454=IKsin(j0);
IkReal x7455=IKcos(j0);
IkReal x7456=((0.1)*sj5);
IkReal x7457=(cj5*r11);
IkReal x7458=(cj5*r01);
IkReal x7459=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7458))+(((-1.0)*x7455))+(((-1.0)*r00*x7459)));
evalcond[1]=((((-1.0)*r10*x7459))+(((-1.0)*x7454))+(((-1.0)*x7457)));
evalcond[2]=((((-0.1)*x7458))+(((-1.0)*r00*x7456))+(((-1.0)*px))+(((-0.134)*x7454)));
evalcond[3]=((((-0.1)*x7457))+(((-1.0)*r10*x7456))+(((-1.0)*py))+(((0.134)*x7455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7460=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7460;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7460);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7461=((1.0)*cj5);
IkReal x7462=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7461)));
j4eval[0]=x7462;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7461))))));
j4eval[2]=IKsign(x7462);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7463=cj5*cj5;
IkReal x7464=r21*r21;
IkReal x7465=(r21*sj5);
IkReal x7466=(cj5*r20);
IkReal x7467=(((x7463*(r20*r20)))+(r22*r22)+(((-1.0)*x7463*x7464))+(((-2.0)*x7465*x7466))+x7464);
j4eval[0]=x7467;
j4eval[1]=IKsign(x7467);
j4eval[2]=((IKabs(((((-1.0)*x7466))+x7465)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7468=cj5*cj5;
IkReal x7469=r21*r21;
IkReal x7470=(r21*sj5);
IkReal x7471=(cj5*r20);
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7471))+x7470)),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
CheckValue<IkReal> x7473=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7470*x7471))+(((-1.0)*x7468*x7469))+(r22*r22)+((x7468*(r20*r20)))+x7469)),-1);
if(!x7473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7472.value)+(((1.5707963267949)*(x7473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7474=IKsin(j4);
IkReal x7475=IKcos(j4);
IkReal x7476=(r11*sj5);
IkReal x7477=(r21*sj5);
IkReal x7478=(cj5*r00);
IkReal x7479=(cj5*r20);
IkReal x7480=(r01*sj5);
IkReal x7481=(cj5*r10);
IkReal x7482=((1.0)*x7475);
IkReal x7483=((1.0)*x7474);
evalcond[0]=(((x7474*x7477))+(((-1.0)*x7479*x7483))+(((-1.0)*r22*x7482)));
evalcond[1]=((((-1.0)*x7480*x7482))+(((-1.0)*r02*x7483))+((x7475*x7478)));
evalcond[2]=((((-1.0)*x7476*x7482))+((x7475*x7481))+(((-1.0)*r12*x7483)));
evalcond[3]=(((x7474*x7476))+cj0+(((-1.0)*x7481*x7483))+(((-1.0)*r12*x7482)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7483))+((x7475*x7479))+(((-1.0)*x7477*x7482)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7478*x7483))+((x7474*x7480))+(((-1.0)*r02*x7482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7484=((1.0)*cj5);
CheckValue<IkReal> x7485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7484)))),-1);
if(!x7485.valid){
continue;
}
CheckValue<IkReal> x7486 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7485.value)))+(x7486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7487=IKsin(j4);
IkReal x7488=IKcos(j4);
IkReal x7489=(r11*sj5);
IkReal x7490=(r21*sj5);
IkReal x7491=(cj5*r00);
IkReal x7492=(cj5*r20);
IkReal x7493=(r01*sj5);
IkReal x7494=(cj5*r10);
IkReal x7495=((1.0)*x7488);
IkReal x7496=((1.0)*x7487);
evalcond[0]=(((x7487*x7490))+(((-1.0)*r22*x7495))+(((-1.0)*x7492*x7496)));
evalcond[1]=(((x7488*x7491))+(((-1.0)*x7493*x7495))+(((-1.0)*r02*x7496)));
evalcond[2]=((((-1.0)*x7489*x7495))+((x7488*x7494))+(((-1.0)*r12*x7496)));
evalcond[3]=(((x7487*x7489))+cj0+(((-1.0)*x7494*x7496))+(((-1.0)*r12*x7495)));
evalcond[4]=((1.0)+((x7488*x7492))+(((-1.0)*r22*x7496))+(((-1.0)*x7490*x7495)));
evalcond[5]=(((x7487*x7493))+(((-1.0)*sj0))+(((-1.0)*x7491*x7496))+(((-1.0)*r02*x7495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7497 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7497.valid){
continue;
}
CheckValue<IkReal> x7498=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7497.value)+(((1.5707963267949)*(x7498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7499=IKsin(j4);
IkReal x7500=IKcos(j4);
IkReal x7501=(r11*sj5);
IkReal x7502=(r21*sj5);
IkReal x7503=(cj5*r00);
IkReal x7504=(cj5*r20);
IkReal x7505=(r01*sj5);
IkReal x7506=(cj5*r10);
IkReal x7507=((1.0)*x7500);
IkReal x7508=((1.0)*x7499);
evalcond[0]=((((-1.0)*r22*x7507))+((x7499*x7502))+(((-1.0)*x7504*x7508)));
evalcond[1]=((((-1.0)*r02*x7508))+((x7500*x7503))+(((-1.0)*x7505*x7507)));
evalcond[2]=((((-1.0)*x7501*x7507))+((x7500*x7506))+(((-1.0)*r12*x7508)));
evalcond[3]=(((x7499*x7501))+cj0+(((-1.0)*x7506*x7508))+(((-1.0)*r12*x7507)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7508))+(((-1.0)*x7502*x7507))+((x7500*x7504)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7503*x7508))+((x7499*x7505))+(((-1.0)*r02*x7507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7509=IKcos(j0);
IkReal x7510=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x7510))+(((-0.392)*x7509)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7509))+(((-0.392)*x7510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7511=((1.0)*cj5);
IkReal x7512=((((-1.0)*r01*x7511))+(((-1.0)*r00*sj5)));
j4eval[0]=x7512;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7511)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7513=cj5*cj5;
IkReal x7514=((1.0)*r21);
IkReal x7515=(cj5*sj5);
IkReal x7516=((1.0)*r20);
IkReal x7517=((((-1.0)*r00*x7514*x7515))+((r00*r20*x7513))+((r01*r21))+(((-1.0)*r01*x7513*x7514))+((r02*r22))+(((-1.0)*r01*x7515*x7516)));
j4eval[0]=x7517;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7516))))));
j4eval[2]=IKsign(x7517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7518=cj5*cj5;
IkReal x7519=(r21*sj5);
IkReal x7520=(r11*r21);
IkReal x7521=((1.0)*cj5*r20);
IkReal x7522=(((r12*r22))+(((-1.0)*x7518*x7520))+(((-1.0)*r11*sj5*x7521))+(((-1.0)*cj5*r10*x7519))+x7520+((r10*r20*x7518)));
j4eval[0]=x7522;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7519))+(((-1.0)*sj0*x7521))))));
j4eval[2]=IKsign(x7522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7523=cj5*cj5;
IkReal x7524=(r21*sj5);
IkReal x7525=(r11*r21);
IkReal x7526=((1.0)*cj5*r20);
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7524))+(((-1.0)*sj0*x7526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
CheckValue<IkReal> x7528=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*cj5*r10*x7524))+(((-1.0)*r11*sj5*x7526))+(((-1.0)*x7523*x7525))+((r10*r20*x7523))+x7525)),-1);
if(!x7528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7527.value)+(((1.5707963267949)*(x7528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7529=IKsin(j4);
IkReal x7530=IKcos(j4);
IkReal x7531=(r11*sj5);
IkReal x7532=(cj5*r00);
IkReal x7533=(cj5*r10);
IkReal x7534=(r21*sj5);
IkReal x7535=(cj5*r20);
IkReal x7536=(r01*sj5);
IkReal x7537=((1.0)*x7530);
IkReal x7538=((1.0)*x7529);
evalcond[0]=((((-1.0)*r22*x7537))+(((-1.0)*x7535*x7538))+((x7529*x7534)));
evalcond[1]=(((x7530*x7535))+(((-1.0)*r22*x7538))+(((-1.0)*x7534*x7537)));
evalcond[2]=(cj0+(((-1.0)*r12*x7537))+(((-1.0)*x7533*x7538))+((x7529*x7531)));
evalcond[3]=(cj0+((x7530*x7532))+(((-1.0)*x7536*x7537))+(((-1.0)*r02*x7538)));
evalcond[4]=(sj0+(((-1.0)*r12*x7538))+((x7530*x7533))+(((-1.0)*x7531*x7537)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7532*x7538))+((x7529*x7536))+(((-1.0)*r02*x7537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7539=cj5*cj5;
IkReal x7540=((1.0)*r21);
IkReal x7541=(cj5*sj5);
IkReal x7542=((1.0)*r20);
CheckValue<IkReal> x7543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7540*x7541))+((r01*r21))+(((-1.0)*r01*x7539*x7540))+(((-1.0)*r01*x7541*x7542))+((r02*r22))+((r00*r20*x7539)))),-1);
if(!x7543.valid){
continue;
}
CheckValue<IkReal> x7544 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7543.value)))+(x7544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7545=IKsin(j4);
IkReal x7546=IKcos(j4);
IkReal x7547=(r11*sj5);
IkReal x7548=(cj5*r00);
IkReal x7549=(cj5*r10);
IkReal x7550=(r21*sj5);
IkReal x7551=(cj5*r20);
IkReal x7552=(r01*sj5);
IkReal x7553=((1.0)*x7546);
IkReal x7554=((1.0)*x7545);
evalcond[0]=(((x7545*x7550))+(((-1.0)*x7551*x7554))+(((-1.0)*r22*x7553)));
evalcond[1]=(((x7546*x7551))+(((-1.0)*x7550*x7553))+(((-1.0)*r22*x7554)));
evalcond[2]=(((x7545*x7547))+cj0+(((-1.0)*r12*x7553))+(((-1.0)*x7549*x7554)));
evalcond[3]=(((x7546*x7548))+cj0+(((-1.0)*x7552*x7553))+(((-1.0)*r02*x7554)));
evalcond[4]=(((x7546*x7549))+sj0+(((-1.0)*r12*x7554))+(((-1.0)*x7547*x7553)));
evalcond[5]=(((x7545*x7552))+(((-1.0)*sj0))+(((-1.0)*r02*x7553))+(((-1.0)*x7548*x7554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7555=((1.0)*cj5);
CheckValue<IkReal> x7556 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7556.valid){
continue;
}
CheckValue<IkReal> x7557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7555)))),-1);
if(!x7557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7556.value)+(((1.5707963267949)*(x7557.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7558=IKsin(j4);
IkReal x7559=IKcos(j4);
IkReal x7560=(r11*sj5);
IkReal x7561=(cj5*r00);
IkReal x7562=(cj5*r10);
IkReal x7563=(r21*sj5);
IkReal x7564=(cj5*r20);
IkReal x7565=(r01*sj5);
IkReal x7566=((1.0)*x7559);
IkReal x7567=((1.0)*x7558);
evalcond[0]=((((-1.0)*x7564*x7567))+(((-1.0)*r22*x7566))+((x7558*x7563)));
evalcond[1]=((((-1.0)*x7563*x7566))+(((-1.0)*r22*x7567))+((x7559*x7564)));
evalcond[2]=((((-1.0)*x7562*x7567))+cj0+(((-1.0)*r12*x7566))+((x7558*x7560)));
evalcond[3]=((((-1.0)*x7565*x7566))+(((-1.0)*r02*x7567))+cj0+((x7559*x7561)));
evalcond[4]=(sj0+((x7559*x7562))+(((-1.0)*r12*x7567))+(((-1.0)*x7560*x7566)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7566))+(((-1.0)*x7561*x7567))+((x7558*x7565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7568=cj1*cj1;
IkReal x7569=((500.0)*py);
IkReal x7570=(cj1*sj2);
IkReal x7571=(cj2*sj2);
IkReal x7572=(cj5*r01);
IkReal x7573=(cj2*sj1);
IkReal x7574=(cj1*sj1);
IkReal x7575=(r00*sj5);
IkReal x7576=((50.0)*r10*sj5);
IkReal x7577=((50.0)*cj5*r11);
CheckValue<IkReal> x7578=IKPowWithIntegerCheck(((((196.0)*x7571))+(((196.0)*x7574))+(((-392.0)*cj1*cj2*x7573))+(((-212.5)*sj2*x7568))+(((-212.5)*cj1*x7573))+(((-392.0)*x7568*x7571))),-1);
if(!x7578.valid){
continue;
}
CheckValue<IkReal> x7579=IKPowWithIntegerCheck(((((-1.0)*x7570))+(((-1.0)*x7573))),-1);
if(!x7579.valid){
continue;
}
if( IKabs(((x7578.value)*(((((-67.0)*x7572))+(((-67.0)*x7575))+(((-1.0)*x7569*x7573))+(((-1.0)*x7569*x7570))+(((-1.0)*x7573*x7577))+(((-1.0)*x7573*x7576))+(((-1.0)*x7570*x7576))+(((-1.0)*x7570*x7577)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7579.value)*((x7572+x7575)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7578.value)*(((((-67.0)*x7572))+(((-67.0)*x7575))+(((-1.0)*x7569*x7573))+(((-1.0)*x7569*x7570))+(((-1.0)*x7573*x7577))+(((-1.0)*x7573*x7576))+(((-1.0)*x7570*x7576))+(((-1.0)*x7570*x7577))))))+IKsqr(((x7579.value)*((x7572+x7575))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7578.value)*(((((-67.0)*x7572))+(((-67.0)*x7575))+(((-1.0)*x7569*x7573))+(((-1.0)*x7569*x7570))+(((-1.0)*x7573*x7577))+(((-1.0)*x7573*x7576))+(((-1.0)*x7570*x7576))+(((-1.0)*x7570*x7577))))), ((x7579.value)*((x7572+x7575))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7580=IKcos(j0);
IkReal x7581=IKsin(j0);
IkReal x7582=(r00*sj5);
IkReal x7583=(cj5*r11);
IkReal x7584=(r10*sj5);
IkReal x7585=((1.0)*cj2);
IkReal x7586=(cj5*r01);
IkReal x7587=((0.392)*sj2);
IkReal x7588=((0.425)*cj1);
IkReal x7589=((1.0)*cj1*sj2);
IkReal x7590=((0.392)*cj1*cj2);
IkReal x7591=(sj1*x7580);
IkReal x7592=(sj1*x7581);
evalcond[0]=((((-1.0)*x7582))+(((-1.0)*x7586))+(((-1.0)*x7580*x7589))+(((-1.0)*x7585*x7591)));
evalcond[1]=((((-1.0)*x7583))+(((-1.0)*x7584))+(((-1.0)*x7581*x7589))+(((-1.0)*x7585*x7592)));
evalcond[2]=((((-0.134)*x7581))+(((-1.0)*x7587*x7591))+(((-1.0)*px))+(((-0.1)*x7582))+(((-0.1)*x7586))+((x7580*x7590))+((x7580*x7588)));
evalcond[3]=(((x7581*x7590))+(((0.134)*x7580))+(((-1.0)*x7587*x7592))+(((-1.0)*py))+(((-0.1)*x7583))+(((-0.1)*x7584))+((x7581*x7588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7593=((1.0)*cj5);
IkReal x7594=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7593)));
j4eval[0]=x7594;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7593))))));
j4eval[2]=IKsign(x7594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7595=((1.0)*cj5);
IkReal x7596=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7595)));
j4eval[0]=x7596;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7595))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7597=((1.0)*sj0);
IkReal x7598=((1.0)*cj0);
IkReal x7599=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7599;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7598))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7597)))))+(IKabs(((((-1.0)*r12*x7597))+(((-1.0)*r02*x7598))))));
j4eval[2]=IKsign(x7599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7600=((-1.0)*r20);
IkReal x7602 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7602)==0){
continue;
}
IkReal x7601=pow(x7602,-0.5);
CheckValue<IkReal> x7603 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7600),IKFAST_ATAN2_MAGTHRESH);
if(!x7603.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7603.value));
IkReal gconst133=(r21*x7601);
IkReal gconst134=(x7600*x7601);
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7605=((-1.0)*r20);
IkReal x7606=x7601;
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7605),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
IkReal x7607=((-1.0)*(x7608.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7607;
IkReal gconst132=x7607;
IkReal gconst133=(r21*x7606);
IkReal gconst134=(x7605*x7606);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7609=((-1.0)*r20);
IkReal x7610=x7601;
CheckValue<IkReal> x7612 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7609),IKFAST_ATAN2_MAGTHRESH);
if(!x7612.valid){
continue;
}
IkReal x7611=((-1.0)*(x7612.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7611;
IkReal gconst132=x7611;
IkReal gconst133=(r21*x7610);
IkReal gconst134=(x7609*x7610);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7613=((-1.0)*r20);
IkReal x7614=x7601;
CheckValue<IkReal> x7616 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7613),IKFAST_ATAN2_MAGTHRESH);
if(!x7616.valid){
continue;
}
IkReal x7615=((-1.0)*(x7616.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7615;
IkReal gconst132=x7615;
IkReal gconst133=(r21*x7614);
IkReal gconst134=(x7613*x7614);
IkReal x7617=r22*r22;
CheckValue<IkReal> x7620=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7617))),-1);
if(!x7620.valid){
continue;
}
IkReal x7618=x7620.value;
IkReal x7619=((((2.0)*x7618*(r20*r20)*(r21*r21)))+((x7618*(r21*r21*r21*r21)))+((x7618*(r20*r20*r20*r20)))+x7617);
j4eval[0]=x7619;
j4eval[1]=IKsign(x7619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7621=(gconst133*r21);
IkReal x7622=(cj1*sj2);
IkReal x7623=(gconst134*r20);
IkReal x7624=(cj2*sj1);
CheckValue<IkReal> x7625 = IKatan2WithCheck(IkReal((((r22*x7624))+((r22*x7622)))),IkReal((((x7621*x7622))+((x7621*x7624))+(((-1.0)*x7622*x7623))+(((-1.0)*x7623*x7624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7625.valid){
continue;
}
CheckValue<IkReal> x7626=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7621*x7623))+(x7621*x7621)+(x7623*x7623))),-1);
if(!x7626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7625.value)+(((1.5707963267949)*(x7626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7627=IKsin(j4);
IkReal x7628=IKcos(j4);
IkReal x7629=(sj1*sj2);
IkReal x7630=(gconst133*r11);
IkReal x7631=(gconst133*r21);
IkReal x7632=(gconst133*r01);
IkReal x7633=((1.0)*x7628);
IkReal x7634=(gconst134*x7628);
IkReal x7635=((1.0)*x7627);
IkReal x7636=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7633))+(((-1.0)*gconst134*r20*x7635))+((x7627*x7631)));
evalcond[1]=((((-1.0)*gconst134*r10*x7635))+cj0+((x7627*x7630))+(((-1.0)*r12*x7633)));
evalcond[2]=((((-1.0)*sj0))+((x7627*x7632))+(((-1.0)*r02*x7633))+(((-1.0)*gconst134*r00*x7635)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7635))+((cj1*sj2))+(((-1.0)*x7631*x7633))+((r20*x7634)));
evalcond[4]=((((-1.0)*cj0*x7636))+((r00*x7634))+(((-1.0)*r02*x7635))+(((-1.0)*x7632*x7633))+((cj0*x7629)));
evalcond[5]=((((-1.0)*x7630*x7633))+((sj0*x7629))+((r10*x7634))+(((-1.0)*r12*x7635))+(((-1.0)*sj0*x7636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7637=((1.0)*gconst134);
CheckValue<IkReal> x7638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7637)))),-1);
if(!x7638.valid){
continue;
}
CheckValue<IkReal> x7639 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x7637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7638.value)))+(x7639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7640=IKsin(j4);
IkReal x7641=IKcos(j4);
IkReal x7642=(sj1*sj2);
IkReal x7643=(gconst133*r11);
IkReal x7644=(gconst133*r21);
IkReal x7645=(gconst133*r01);
IkReal x7646=((1.0)*x7641);
IkReal x7647=(gconst134*x7641);
IkReal x7648=((1.0)*x7640);
IkReal x7649=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7646))+((x7640*x7644))+(((-1.0)*gconst134*r20*x7648)));
evalcond[1]=(cj0+((x7640*x7643))+(((-1.0)*r12*x7646))+(((-1.0)*gconst134*r10*x7648)));
evalcond[2]=((((-1.0)*sj0))+((x7640*x7645))+(((-1.0)*r02*x7646))+(((-1.0)*gconst134*r00*x7648)));
evalcond[3]=((((-1.0)*r22*x7648))+((cj2*sj1))+(((-1.0)*x7644*x7646))+((cj1*sj2))+((r20*x7647)));
evalcond[4]=((((-1.0)*r02*x7648))+(((-1.0)*x7645*x7646))+(((-1.0)*cj0*x7649))+((r00*x7647))+((cj0*x7642)));
evalcond[5]=(((sj0*x7642))+(((-1.0)*sj0*x7649))+(((-1.0)*r12*x7648))+((r10*x7647))+(((-1.0)*x7643*x7646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7650=((1.0)*gconst134);
CheckValue<IkReal> x7651 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7650))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7651.valid){
continue;
}
CheckValue<IkReal> x7652=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7650)))),-1);
if(!x7652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7651.value)+(((1.5707963267949)*(x7652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7653=IKsin(j4);
IkReal x7654=IKcos(j4);
IkReal x7655=(sj1*sj2);
IkReal x7656=(gconst133*r11);
IkReal x7657=(gconst133*r21);
IkReal x7658=(gconst133*r01);
IkReal x7659=((1.0)*x7654);
IkReal x7660=(gconst134*x7654);
IkReal x7661=((1.0)*x7653);
IkReal x7662=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7659))+(((-1.0)*gconst134*r20*x7661))+((x7653*x7657)));
evalcond[1]=((((-1.0)*gconst134*r10*x7661))+cj0+(((-1.0)*r12*x7659))+((x7653*x7656)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7659))+(((-1.0)*gconst134*r00*x7661))+((x7653*x7658)));
evalcond[3]=(((cj2*sj1))+((r20*x7660))+((cj1*sj2))+(((-1.0)*r22*x7661))+(((-1.0)*x7657*x7659)));
evalcond[4]=((((-1.0)*cj0*x7662))+((r00*x7660))+(((-1.0)*r02*x7661))+((cj0*x7655))+(((-1.0)*x7658*x7659)));
evalcond[5]=((((-1.0)*r12*x7661))+((r10*x7660))+(((-1.0)*x7656*x7659))+(((-1.0)*sj0*x7662))+((sj0*x7655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7663=((-1.0)*r21);
IkReal x7665 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7665)==0){
continue;
}
IkReal x7664=pow(x7665,-0.5);
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal(x7663),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7666.value))));
IkReal gconst136=(x7663*x7664);
IkReal gconst137=((1.0)*r20*x7664);
CheckValue<IkReal> x7667 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7667.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7667.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7668=((-1.0)*r21);
CheckValue<IkReal> x7671 = IKatan2WithCheck(IkReal(x7668),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7671.valid){
continue;
}
IkReal x7669=((1.0)*(x7671.value));
IkReal x7670=x7664;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7669)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7669)));
IkReal gconst136=(x7668*x7670);
IkReal gconst137=((1.0)*r20*x7670);
IkReal x7672=r22*r22;
IkReal x7673=((1.0)*x7672);
CheckValue<IkReal> x7677=IKPowWithIntegerCheck(((-1.0)+x7672),-1);
if(!x7677.valid){
continue;
}
IkReal x7674=x7677.value;
if((((1.0)+(((-1.0)*x7673)))) < -0.00001)
continue;
IkReal x7675=IKsqrt(((1.0)+(((-1.0)*x7673))));
IkReal x7676=(cj0*x7674*x7675);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7673*x7676))+x7676))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7678=((-1.0)*r21);
CheckValue<IkReal> x7681 = IKatan2WithCheck(IkReal(x7678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7681.valid){
continue;
}
IkReal x7679=((1.0)*(x7681.value));
IkReal x7680=x7664;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7679)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7679)));
IkReal gconst136=(x7678*x7680);
IkReal gconst137=((1.0)*r20*x7680);
IkReal x7682=r22*r22;
IkReal x7683=((1.0)*x7682);
CheckValue<IkReal> x7687=IKPowWithIntegerCheck(((-1.0)+x7682),-1);
if(!x7687.valid){
continue;
}
IkReal x7684=x7687.value;
if((((1.0)+(((-1.0)*x7683)))) < -0.00001)
continue;
IkReal x7685=IKsqrt(((1.0)+(((-1.0)*x7683))));
IkReal x7686=(sj0*x7684*x7685);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7683*x7686))+x7686))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7688=((-1.0)*r21);
CheckValue<IkReal> x7691 = IKatan2WithCheck(IkReal(x7688),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7691.valid){
continue;
}
IkReal x7689=((1.0)*(x7691.value));
IkReal x7690=x7664;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7689)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7689)));
IkReal gconst136=(x7688*x7690);
IkReal gconst137=((1.0)*r20*x7690);
IkReal x7692=r22*r22;
IkReal x7693=(r12*sj0);
IkReal x7694=(cj0*r02);
CheckValue<IkReal> x7698=IKPowWithIntegerCheck(((-1.0)+x7692),-1);
if(!x7698.valid){
continue;
}
IkReal x7695=x7698.value;
if((((1.0)+(((-1.0)*x7692)))) < -0.00001)
continue;
IkReal x7696=IKsqrt(((1.0)+(((-1.0)*x7692))));
IkReal x7697=(r22*x7695*x7696);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7693*x7697))+((x7694*x7697)))))+(IKabs(((((-1.0)*x7694))+(((-1.0)*x7693))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7699=((1.0)*sj0);
IkReal x7700=((1.0)*cj0);
CheckValue<IkReal> x7701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7701.valid){
continue;
}
CheckValue<IkReal> x7702 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7699))+(((-1.0)*r02*x7700)))),IkReal(((((-1.0)*gconst136*r01*x7700))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7699))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7701.value)))+(x7702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7703=IKsin(j4);
IkReal x7704=IKcos(j4);
IkReal x7705=(gconst136*r01);
IkReal x7706=(gconst137*r10);
IkReal x7707=(sj1*sj2);
IkReal x7708=(gconst137*r20);
IkReal x7709=(gconst136*r11);
IkReal x7710=(gconst136*r21);
IkReal x7711=(gconst137*r00);
IkReal x7712=((1.0)*x7704);
IkReal x7713=((1.0)*cj1*cj2);
IkReal x7714=((1.0)*x7703);
evalcond[0]=(((x7703*x7710))+(((-1.0)*x7708*x7714))+(((-1.0)*r22*x7712)));
evalcond[1]=(((x7703*x7709))+cj0+(((-1.0)*x7706*x7714))+(((-1.0)*r12*x7712)));
evalcond[2]=((((-1.0)*x7711*x7714))+(((-1.0)*sj0))+((x7703*x7705))+(((-1.0)*r02*x7712)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7714))+((cj1*sj2))+((x7704*x7708))+(((-1.0)*x7710*x7712)));
evalcond[4]=((((-1.0)*cj0*x7713))+((cj0*x7707))+(((-1.0)*x7705*x7712))+(((-1.0)*r02*x7714))+((x7704*x7711)));
evalcond[5]=((((-1.0)*r12*x7714))+((sj0*x7707))+((x7704*x7706))+(((-1.0)*sj0*x7713))+(((-1.0)*x7709*x7712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7715=((1.0)*gconst137);
CheckValue<IkReal> x7716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7715))+(((-1.0)*gconst136*r10)))),-1);
if(!x7716.valid){
continue;
}
CheckValue<IkReal> x7717 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7715))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7716.value)))+(x7717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7718=IKsin(j4);
IkReal x7719=IKcos(j4);
IkReal x7720=(gconst136*r01);
IkReal x7721=(gconst137*r10);
IkReal x7722=(sj1*sj2);
IkReal x7723=(gconst137*r20);
IkReal x7724=(gconst136*r11);
IkReal x7725=(gconst136*r21);
IkReal x7726=(gconst137*r00);
IkReal x7727=((1.0)*x7719);
IkReal x7728=((1.0)*cj1*cj2);
IkReal x7729=((1.0)*x7718);
evalcond[0]=((((-1.0)*x7723*x7729))+((x7718*x7725))+(((-1.0)*r22*x7727)));
evalcond[1]=(cj0+((x7718*x7724))+(((-1.0)*x7721*x7729))+(((-1.0)*r12*x7727)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7726*x7729))+(((-1.0)*r02*x7727))+((x7718*x7720)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7725*x7727))+((cj1*sj2))+((x7719*x7723))+(((-1.0)*r22*x7729)));
evalcond[4]=((((-1.0)*r02*x7729))+((x7719*x7726))+(((-1.0)*cj0*x7728))+((cj0*x7722))+(((-1.0)*x7720*x7727)));
evalcond[5]=(((sj0*x7722))+(((-1.0)*x7724*x7727))+(((-1.0)*sj0*x7728))+((x7719*x7721))+(((-1.0)*r12*x7729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7730=((1.0)*gconst137);
CheckValue<IkReal> x7731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7730)))),-1);
if(!x7731.valid){
continue;
}
CheckValue<IkReal> x7732 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7730))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7731.value)))+(x7732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7733=IKsin(j4);
IkReal x7734=IKcos(j4);
IkReal x7735=(gconst136*r01);
IkReal x7736=(gconst137*r10);
IkReal x7737=(sj1*sj2);
IkReal x7738=(gconst137*r20);
IkReal x7739=(gconst136*r11);
IkReal x7740=(gconst136*r21);
IkReal x7741=(gconst137*r00);
IkReal x7742=((1.0)*x7734);
IkReal x7743=((1.0)*cj1*cj2);
IkReal x7744=((1.0)*x7733);
evalcond[0]=((((-1.0)*r22*x7742))+((x7733*x7740))+(((-1.0)*x7738*x7744)));
evalcond[1]=(((x7733*x7739))+cj0+(((-1.0)*r12*x7742))+(((-1.0)*x7736*x7744)));
evalcond[2]=((((-1.0)*sj0))+((x7733*x7735))+(((-1.0)*r02*x7742))+(((-1.0)*x7741*x7744)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7744))+((cj1*sj2))+(((-1.0)*x7740*x7742))+((x7734*x7738)));
evalcond[4]=((((-1.0)*r02*x7744))+((cj0*x7737))+(((-1.0)*x7735*x7742))+(((-1.0)*cj0*x7743))+((x7734*x7741)));
evalcond[5]=((((-1.0)*x7739*x7742))+(((-1.0)*r12*x7744))+((sj0*x7737))+((x7734*x7736))+(((-1.0)*sj0*x7743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7745=((-1.0)*r10);
IkReal x7747 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7747)==0){
continue;
}
IkReal x7746=pow(x7747,-0.5);
CheckValue<IkReal> x7748 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7745),IKFAST_ATAN2_MAGTHRESH);
if(!x7748.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7748.value));
IkReal gconst139=(r11*x7746);
IkReal gconst140=(x7745*x7746);
CheckValue<IkReal> x7749 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7749.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7749.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7750=((-1.0)*r10);
IkReal x7751=x7746;
CheckValue<IkReal> x7753 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7750),IKFAST_ATAN2_MAGTHRESH);
if(!x7753.valid){
continue;
}
IkReal x7752=((-1.0)*(x7753.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7752;
IkReal gconst138=x7752;
IkReal gconst139=(r11*x7751);
IkReal gconst140=(x7750*x7751);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7754=((1.0)*sj0);
IkReal x7755=((1.0)*gconst139);
CheckValue<IkReal> x7756 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7754)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7754))+(((-1.0)*cj0*r01*x7755))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7756.valid){
continue;
}
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7755)))),-1);
if(!x7757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7756.value)+(((1.5707963267949)*(x7757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7758=IKsin(j4);
IkReal x7759=IKcos(j4);
IkReal x7760=(gconst140*r00);
IkReal x7761=(sj1*sj2);
IkReal x7762=(gconst139*r11);
IkReal x7763=(gconst139*r01);
IkReal x7764=(gconst139*r21);
IkReal x7765=((1.0)*x7759);
IkReal x7766=((1.0)*x7758);
IkReal x7767=((1.0)*cj1*cj2);
IkReal x7768=(gconst140*x7759);
evalcond[0]=((((-1.0)*r22*x7765))+((x7758*x7764))+(((-1.0)*gconst140*r20*x7766)));
evalcond[1]=(cj0+((x7758*x7762))+(((-1.0)*r12*x7765))+(((-1.0)*gconst140*r10*x7766)));
evalcond[2]=((((-1.0)*x7760*x7766))+(((-1.0)*sj0))+(((-1.0)*r02*x7765))+((x7758*x7763)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7766))+((cj1*sj2))+(((-1.0)*x7764*x7765))+((r20*x7768)));
evalcond[4]=((((-1.0)*r02*x7766))+(((-1.0)*cj0*x7767))+((cj0*x7761))+(((-1.0)*x7763*x7765))+((x7759*x7760)));
evalcond[5]=(((sj0*x7761))+(((-1.0)*sj0*x7767))+(((-1.0)*r12*x7766))+(((-1.0)*x7762*x7765))+((r10*x7768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7769=((1.0)*gconst140);
CheckValue<IkReal> x7770 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7770.valid){
continue;
}
CheckValue<IkReal> x7771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7769))+(((-1.0)*gconst139*r00)))),-1);
if(!x7771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7770.value)+(((1.5707963267949)*(x7771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7772=IKsin(j4);
IkReal x7773=IKcos(j4);
IkReal x7774=(gconst140*r00);
IkReal x7775=(sj1*sj2);
IkReal x7776=(gconst139*r11);
IkReal x7777=(gconst139*r01);
IkReal x7778=(gconst139*r21);
IkReal x7779=((1.0)*x7773);
IkReal x7780=((1.0)*x7772);
IkReal x7781=((1.0)*cj1*cj2);
IkReal x7782=(gconst140*x7773);
evalcond[0]=((((-1.0)*r22*x7779))+((x7772*x7778))+(((-1.0)*gconst140*r20*x7780)));
evalcond[1]=(cj0+((x7772*x7776))+(((-1.0)*gconst140*r10*x7780))+(((-1.0)*r12*x7779)));
evalcond[2]=((((-1.0)*r02*x7779))+(((-1.0)*sj0))+((x7772*x7777))+(((-1.0)*x7774*x7780)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7778*x7779))+(((-1.0)*r22*x7780))+((r20*x7782)));
evalcond[4]=(((cj0*x7775))+(((-1.0)*x7777*x7779))+(((-1.0)*r02*x7780))+(((-1.0)*cj0*x7781))+((x7773*x7774)));
evalcond[5]=(((sj0*x7775))+(((-1.0)*x7776*x7779))+((r10*x7782))+(((-1.0)*sj0*x7781))+(((-1.0)*r12*x7780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7783=((-1.0)*r11);
IkReal x7785 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7785)==0){
continue;
}
IkReal x7784=pow(x7785,-0.5);
CheckValue<IkReal> x7786 = IKatan2WithCheck(IkReal(x7783),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7786.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7786.value))));
IkReal gconst142=(x7783*x7784);
IkReal gconst143=((1.0)*r10*x7784);
CheckValue<IkReal> x7787 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7787.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7787.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7788=((-1.0)*r11);
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(x7788),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
IkReal x7789=((1.0)*(x7791.value));
IkReal x7790=x7784;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7789)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7789)));
IkReal gconst142=(x7788*x7790);
IkReal gconst143=((1.0)*r10*x7790);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7792=((-1.0)*r11);
CheckValue<IkReal> x7795 = IKatan2WithCheck(IkReal(x7792),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7795.valid){
continue;
}
IkReal x7793=((1.0)*(x7795.value));
IkReal x7794=x7784;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7793)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7793)));
IkReal gconst142=(x7792*x7794);
IkReal gconst143=((1.0)*r10*x7794);
IkReal x7796=r12*r12;
IkReal x7797=((1.0)*sj0);
IkReal x7798=(cj0*r02);
IkReal x7799=x7784;
j4eval[0]=((IKabs(((((-1.0)*r12*x7797))+(((-1.0)*x7798)))))+(IKabs((((sj0*x7796*x7799))+((r12*x7798*x7799))+(((-1.0)*x7797*x7799))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7800=((-1.0)*r11);
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal(x7800),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
IkReal x7801=((1.0)*(x7803.value));
IkReal x7802=x7784;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7801)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7801)));
IkReal gconst142=(x7800*x7802);
IkReal gconst143=((1.0)*r10*x7802);
IkReal x7804=r12*r12;
IkReal x7805=(cj1*r22*sj2);
IkReal x7806=(cj2*r22*sj1);
CheckValue<IkReal> x7810=IKPowWithIntegerCheck(((-1.0)+x7804),-1);
if(!x7810.valid){
continue;
}
IkReal x7807=x7810.value;
if((((1.0)+(((-1.0)*x7804)))) < -0.00001)
continue;
IkReal x7808=IKsqrt(((1.0)+(((-1.0)*x7804))));
IkReal x7809=((1.0)*r12*x7807*x7808);
j4eval[0]=((IKabs(((((-1.0)*x7805*x7809))+(((-1.0)*x7806*x7809)))))+(IKabs((x7805+x7806))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7811=(gconst142*r21);
IkReal x7812=(cj1*sj2);
IkReal x7813=(cj2*sj1);
IkReal x7814=(gconst143*r20);
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal((((r22*x7812))+((r22*x7813)))),IkReal(((((-1.0)*x7813*x7814))+((x7811*x7812))+((x7811*x7813))+(((-1.0)*x7812*x7814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
CheckValue<IkReal> x7816=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7811*x7814))+(r22*r22)+(x7814*x7814)+(x7811*x7811))),-1);
if(!x7816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7815.value)+(((1.5707963267949)*(x7816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7817=IKsin(j4);
IkReal x7818=IKcos(j4);
IkReal x7819=(sj1*sj2);
IkReal x7820=(gconst143*r20);
IkReal x7821=((1.0)*x7818);
IkReal x7822=((1.0)*cj1*cj2);
IkReal x7823=((1.0)*x7817);
IkReal x7824=(gconst142*x7817);
IkReal x7825=(gconst143*x7818);
evalcond[0]=((((-1.0)*x7820*x7823))+((r21*x7824))+(((-1.0)*r22*x7821)));
evalcond[1]=(cj0+((r11*x7824))+(((-1.0)*r12*x7821))+(((-1.0)*gconst143*r10*x7823)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7821))+((r01*x7824))+(((-1.0)*gconst143*r00*x7823)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7821))+(((-1.0)*r22*x7823))+((x7818*x7820)));
evalcond[4]=((((-1.0)*gconst142*r01*x7821))+(((-1.0)*r02*x7823))+((r00*x7825))+(((-1.0)*cj0*x7822))+((cj0*x7819)));
evalcond[5]=(((r10*x7825))+(((-1.0)*gconst142*r11*x7821))+((sj0*x7819))+(((-1.0)*sj0*x7822))+(((-1.0)*r12*x7823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7826=((1.0)*sj0);
IkReal x7827=((1.0)*gconst142);
CheckValue<IkReal> x7828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7827))+(((-1.0)*gconst143*r21)))),-1);
if(!x7828.valid){
continue;
}
CheckValue<IkReal> x7829 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7826)))),IkReal(((((-1.0)*gconst142*r11*x7826))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7827))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7828.value)))+(x7829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7830=IKsin(j4);
IkReal x7831=IKcos(j4);
IkReal x7832=(sj1*sj2);
IkReal x7833=(gconst143*r20);
IkReal x7834=((1.0)*x7831);
IkReal x7835=((1.0)*cj1*cj2);
IkReal x7836=((1.0)*x7830);
IkReal x7837=(gconst142*x7830);
IkReal x7838=(gconst143*x7831);
evalcond[0]=(((r21*x7837))+(((-1.0)*r22*x7834))+(((-1.0)*x7833*x7836)));
evalcond[1]=((((-1.0)*gconst143*r10*x7836))+cj0+(((-1.0)*r12*x7834))+((r11*x7837)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7836))+(((-1.0)*r02*x7834))+((r01*x7837)));
evalcond[3]=(((x7831*x7833))+((cj2*sj1))+(((-1.0)*r22*x7836))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7834)));
evalcond[4]=((((-1.0)*cj0*x7835))+(((-1.0)*gconst142*r01*x7834))+((cj0*x7832))+(((-1.0)*r02*x7836))+((r00*x7838)));
evalcond[5]=(((r10*x7838))+(((-1.0)*r12*x7836))+(((-1.0)*sj0*x7835))+((sj0*x7832))+(((-1.0)*gconst142*r11*x7834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7839=((1.0)*gconst143);
CheckValue<IkReal> x7840 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7839))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7840.valid){
continue;
}
CheckValue<IkReal> x7841=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7839)))),-1);
if(!x7841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7840.value)+(((1.5707963267949)*(x7841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7842=IKsin(j4);
IkReal x7843=IKcos(j4);
IkReal x7844=(sj1*sj2);
IkReal x7845=(gconst143*r20);
IkReal x7846=((1.0)*x7843);
IkReal x7847=((1.0)*cj1*cj2);
IkReal x7848=((1.0)*x7842);
IkReal x7849=(gconst142*x7842);
IkReal x7850=(gconst143*x7843);
evalcond[0]=(((r21*x7849))+(((-1.0)*r22*x7846))+(((-1.0)*x7845*x7848)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7848))+(((-1.0)*r12*x7846))+((r11*x7849)));
evalcond[2]=((((-1.0)*gconst143*r00*x7848))+(((-1.0)*sj0))+(((-1.0)*r02*x7846))+((r01*x7849)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7848))+((x7843*x7845))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7846)));
evalcond[4]=((((-1.0)*cj0*x7847))+(((-1.0)*gconst142*r01*x7846))+((cj0*x7844))+(((-1.0)*r02*x7848))+((r00*x7850)));
evalcond[5]=((((-1.0)*gconst142*r11*x7846))+(((-1.0)*r12*x7848))+((r10*x7850))+(((-1.0)*sj0*x7847))+((sj0*x7844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7851=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7851;
j4eval[1]=IKsign(x7851);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7852=((1.0)*cj5);
IkReal x7853=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7852)));
j4eval[0]=x7853;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7852))))));
j4eval[2]=IKsign(x7853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7854=cj5*cj5;
IkReal x7855=r11*r11;
IkReal x7856=(r11*sj5);
IkReal x7857=(cj5*r10);
IkReal x7858=((r12*r12)+(((-2.0)*x7856*x7857))+(((-1.0)*x7854*x7855))+((x7854*(r10*r10)))+x7855);
j4eval[0]=x7858;
j4eval[1]=IKsign(x7858);
j4eval[2]=((IKabs(r12))+(IKabs((x7857+(((-1.0)*x7856))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7859=cj5*cj5;
IkReal x7860=r11*r11;
IkReal x7861=(cj5*r10);
IkReal x7862=(r11*sj5);
CheckValue<IkReal> x7863=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7861*x7862))+(((-1.0)*x7859*x7860))+x7860+((x7859*(r10*r10))))),-1);
if(!x7863.valid){
continue;
}
CheckValue<IkReal> x7864 = IKatan2WithCheck(IkReal((x7861+(((-1.0)*x7862)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7863.value)))+(x7864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7865=IKsin(j4);
IkReal x7866=IKcos(j4);
IkReal x7867=(cj5*r10);
IkReal x7868=(r01*sj5);
IkReal x7869=(cj5*r00);
IkReal x7870=(cj5*r20);
IkReal x7871=((1.0)*x7866);
IkReal x7872=((1.0)*x7865);
IkReal x7873=(sj5*x7865);
evalcond[0]=((((-1.0)*r22*x7871))+(((-1.0)*x7870*x7872))+((r21*x7873)));
evalcond[1]=(((x7865*x7868))+(((-1.0)*x7869*x7872))+(((-1.0)*r02*x7871)));
evalcond[2]=(((x7866*x7867))+(((-1.0)*r11*sj5*x7871))+(((-1.0)*r12*x7872)));
evalcond[3]=((1.0)+(((-1.0)*x7867*x7872))+((r11*x7873))+(((-1.0)*r12*x7871)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7872))+((x7866*x7870))+((cj1*sj2))+(((-1.0)*r21*sj5*x7871)));
evalcond[5]=(((x7866*x7869))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7868*x7871))+(((-1.0)*r02*x7872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7874=((1.0)*cj5);
CheckValue<IkReal> x7875 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7875.valid){
continue;
}
CheckValue<IkReal> x7876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7874))+(((-1.0)*r00*sj5)))),-1);
if(!x7876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7875.value)+(((1.5707963267949)*(x7876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7877=IKsin(j4);
IkReal x7878=IKcos(j4);
IkReal x7879=(cj5*r10);
IkReal x7880=(r01*sj5);
IkReal x7881=(cj5*r00);
IkReal x7882=(cj5*r20);
IkReal x7883=((1.0)*x7878);
IkReal x7884=((1.0)*x7877);
IkReal x7885=(sj5*x7877);
evalcond[0]=((((-1.0)*x7882*x7884))+(((-1.0)*r22*x7883))+((r21*x7885)));
evalcond[1]=((((-1.0)*r02*x7883))+((x7877*x7880))+(((-1.0)*x7881*x7884)));
evalcond[2]=(((x7878*x7879))+(((-1.0)*r11*sj5*x7883))+(((-1.0)*r12*x7884)));
evalcond[3]=((1.0)+((r11*x7885))+(((-1.0)*r12*x7883))+(((-1.0)*x7879*x7884)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7884))+((cj1*sj2))+((x7878*x7882))+(((-1.0)*r21*sj5*x7883)));
evalcond[5]=((((-1.0)*x7880*x7883))+(((-1.0)*r02*x7884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7878*x7881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7886=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7886.valid){
continue;
}
CheckValue<IkReal> x7887 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7886.value)))+(x7887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7888=IKsin(j4);
IkReal x7889=IKcos(j4);
IkReal x7890=(cj5*r10);
IkReal x7891=(r01*sj5);
IkReal x7892=(cj5*r00);
IkReal x7893=(cj5*r20);
IkReal x7894=((1.0)*x7889);
IkReal x7895=((1.0)*x7888);
IkReal x7896=(sj5*x7888);
evalcond[0]=(((r21*x7896))+(((-1.0)*r22*x7894))+(((-1.0)*x7893*x7895)));
evalcond[1]=(((x7888*x7891))+(((-1.0)*x7892*x7895))+(((-1.0)*r02*x7894)));
evalcond[2]=((((-1.0)*r11*sj5*x7894))+(((-1.0)*r12*x7895))+((x7889*x7890)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7894))+(((-1.0)*x7890*x7895))+((r11*x7896)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7894))+(((-1.0)*r22*x7895))+((x7889*x7893)));
evalcond[5]=((((-1.0)*x7891*x7894))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7889*x7892))+(((-1.0)*r02*x7895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7897=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7897;
j4eval[1]=IKsign(x7897);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7898=((1.0)*cj5);
IkReal x7899=((((-1.0)*r21*x7898))+(((-1.0)*r20*sj5)));
j4eval[0]=x7899;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7898))))));
j4eval[2]=IKsign(x7899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7900=cj5*cj5;
IkReal x7901=r11*r11;
IkReal x7902=(cj5*r10);
IkReal x7903=(r11*sj5);
IkReal x7904=((((-1.0)*x7901))+(((-1.0)*x7900*(r10*r10)))+(((-1.0)*(r12*r12)))+((x7900*x7901))+(((2.0)*x7902*x7903)));
j4eval[0]=x7904;
j4eval[1]=((IKabs(((((-1.0)*x7903))+x7902)))+(IKabs(r12)));
j4eval[2]=IKsign(x7904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7905=cj5*cj5;
IkReal x7906=r11*r11;
IkReal x7907=(cj5*r10);
IkReal x7908=(r11*sj5);
CheckValue<IkReal> x7909 = IKatan2WithCheck(IkReal(((((-1.0)*x7908))+x7907)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7909.valid){
continue;
}
CheckValue<IkReal> x7910=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7906))+(((2.0)*x7907*x7908))+(((-1.0)*x7905*(r10*r10)))+(((-1.0)*(r12*r12)))+((x7905*x7906)))),-1);
if(!x7910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7909.value)+(((1.5707963267949)*(x7910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7911=IKsin(j4);
IkReal x7912=IKcos(j4);
IkReal x7913=(cj5*r10);
IkReal x7914=(r01*sj5);
IkReal x7915=(cj5*r00);
IkReal x7916=(cj5*r20);
IkReal x7917=((1.0)*x7912);
IkReal x7918=((1.0)*x7911);
IkReal x7919=(sj5*x7911);
evalcond[0]=(((r21*x7919))+(((-1.0)*r22*x7917))+(((-1.0)*x7916*x7918)));
evalcond[1]=((((-1.0)*x7915*x7918))+((x7911*x7914))+(((-1.0)*r02*x7917)));
evalcond[2]=(((x7912*x7913))+(((-1.0)*r11*sj5*x7917))+(((-1.0)*r12*x7918)));
evalcond[3]=((-1.0)+(((-1.0)*x7913*x7918))+((r11*x7919))+(((-1.0)*r12*x7917)));
evalcond[4]=(((cj2*sj1))+((x7912*x7916))+((cj1*sj2))+(((-1.0)*r22*x7918))+(((-1.0)*r21*sj5*x7917)));
evalcond[5]=(((x7912*x7915))+(((-1.0)*r02*x7918))+(((-1.0)*sj1*sj2))+(((-1.0)*x7914*x7917))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7920=((1.0)*cj5);
CheckValue<IkReal> x7921 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7921.valid){
continue;
}
CheckValue<IkReal> x7922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7920))+(((-1.0)*r20*sj5)))),-1);
if(!x7922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7921.value)+(((1.5707963267949)*(x7922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7923=IKsin(j4);
IkReal x7924=IKcos(j4);
IkReal x7925=(cj5*r10);
IkReal x7926=(r01*sj5);
IkReal x7927=(cj5*r00);
IkReal x7928=(cj5*r20);
IkReal x7929=((1.0)*x7924);
IkReal x7930=((1.0)*x7923);
IkReal x7931=(sj5*x7923);
evalcond[0]=(((r21*x7931))+(((-1.0)*r22*x7929))+(((-1.0)*x7928*x7930)));
evalcond[1]=((((-1.0)*x7927*x7930))+(((-1.0)*r02*x7929))+((x7923*x7926)));
evalcond[2]=((((-1.0)*r11*sj5*x7929))+(((-1.0)*r12*x7930))+((x7924*x7925)));
evalcond[3]=((-1.0)+(((-1.0)*x7925*x7930))+((r11*x7931))+(((-1.0)*r12*x7929)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7930))+((cj1*sj2))+(((-1.0)*r21*sj5*x7929))+((x7924*x7928)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7930))+((cj1*cj2))+((x7924*x7927))+(((-1.0)*x7926*x7929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7932 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7932.valid){
continue;
}
CheckValue<IkReal> x7933=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7932.value)+(((1.5707963267949)*(x7933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7934=IKsin(j4);
IkReal x7935=IKcos(j4);
IkReal x7936=(cj5*r10);
IkReal x7937=(r01*sj5);
IkReal x7938=(cj5*r00);
IkReal x7939=(cj5*r20);
IkReal x7940=((1.0)*x7935);
IkReal x7941=((1.0)*x7934);
IkReal x7942=(sj5*x7934);
evalcond[0]=(((r21*x7942))+(((-1.0)*r22*x7940))+(((-1.0)*x7939*x7941)));
evalcond[1]=((((-1.0)*x7938*x7941))+(((-1.0)*r02*x7940))+((x7934*x7937)));
evalcond[2]=((((-1.0)*r11*sj5*x7940))+(((-1.0)*r12*x7941))+((x7935*x7936)));
evalcond[3]=((-1.0)+(((-1.0)*x7936*x7941))+((r11*x7942))+(((-1.0)*r12*x7940)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7941))+(((-1.0)*r21*sj5*x7940))+((cj1*sj2))+((x7935*x7939)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7941))+(((-1.0)*x7937*x7940))+((cj1*cj2))+((x7935*x7938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7943=((-1.0)*r00);
IkReal x7945 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7945)==0){
continue;
}
IkReal x7944=pow(x7945,-0.5);
CheckValue<IkReal> x7946 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7943),IKFAST_ATAN2_MAGTHRESH);
if(!x7946.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7946.value));
IkReal gconst145=(r01*x7944);
IkReal gconst146=(x7943*x7944);
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7947.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7948=((-1.0)*r00);
IkReal x7949=x7944;
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7948),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
IkReal x7950=((-1.0)*(x7951.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7950;
IkReal gconst144=x7950;
IkReal gconst145=(r01*x7949);
IkReal gconst146=(x7948*x7949);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7952=((1.0)*sj0);
IkReal x7953=((1.0)*gconst145);
CheckValue<IkReal> x7954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7953)))),-1);
if(!x7954.valid){
continue;
}
CheckValue<IkReal> x7955 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7952)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7952))+(((-1.0)*cj0*r01*x7953))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7954.value)))+(x7955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7956=IKsin(j4);
IkReal x7957=IKcos(j4);
IkReal x7958=(gconst146*r10);
IkReal x7959=(sj1*sj2);
IkReal x7960=(gconst146*r20);
IkReal x7961=(gconst146*r00);
IkReal x7962=((1.0)*x7957);
IkReal x7963=((1.0)*x7956);
IkReal x7964=(gconst145*x7956);
IkReal x7965=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7964))+(((-1.0)*x7960*x7963))+(((-1.0)*r22*x7962)));
evalcond[1]=(((r11*x7964))+cj0+(((-1.0)*x7958*x7963))+(((-1.0)*r12*x7962)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7964))+(((-1.0)*r02*x7962))+(((-1.0)*x7961*x7963)));
evalcond[3]=(((cj2*sj1))+((x7957*x7960))+(((-1.0)*r22*x7963))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7962)));
evalcond[4]=((((-1.0)*gconst145*r01*x7962))+((x7957*x7961))+((cj0*x7959))+(((-1.0)*cj0*x7965))+(((-1.0)*r02*x7963)));
evalcond[5]=((((-1.0)*sj0*x7965))+(((-1.0)*r12*x7963))+((sj0*x7959))+((x7957*x7958))+(((-1.0)*gconst145*r11*x7962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7966=((1.0)*gconst146);
CheckValue<IkReal> x7967 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7966))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7967.valid){
continue;
}
CheckValue<IkReal> x7968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7966)))),-1);
if(!x7968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7967.value)+(((1.5707963267949)*(x7968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7969=IKsin(j4);
IkReal x7970=IKcos(j4);
IkReal x7971=(gconst146*r10);
IkReal x7972=(sj1*sj2);
IkReal x7973=(gconst146*r20);
IkReal x7974=(gconst146*r00);
IkReal x7975=((1.0)*x7970);
IkReal x7976=((1.0)*x7969);
IkReal x7977=(gconst145*x7969);
IkReal x7978=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7975))+(((-1.0)*x7973*x7976))+((r21*x7977)));
evalcond[1]=(cj0+((r11*x7977))+(((-1.0)*r12*x7975))+(((-1.0)*x7971*x7976)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7977))+(((-1.0)*r02*x7975))+(((-1.0)*x7974*x7976)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7976))+((cj1*sj2))+((x7970*x7973))+(((-1.0)*gconst145*r21*x7975)));
evalcond[4]=((((-1.0)*gconst145*r01*x7975))+((x7970*x7974))+((cj0*x7972))+(((-1.0)*cj0*x7978))+(((-1.0)*r02*x7976)));
evalcond[5]=((((-1.0)*sj0*x7978))+((x7970*x7971))+(((-1.0)*r12*x7976))+((sj0*x7972))+(((-1.0)*gconst145*r11*x7975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7979=((-1.0)*r01);
IkReal x7981 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7981)==0){
continue;
}
IkReal x7980=pow(x7981,-0.5);
CheckValue<IkReal> x7982 = IKatan2WithCheck(IkReal(x7979),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7982.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7982.value))));
IkReal gconst148=(x7979*x7980);
IkReal gconst149=((1.0)*r00*x7980);
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7983.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7984=((-1.0)*r01);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal(x7984),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
IkReal x7985=((1.0)*(x7987.value));
IkReal x7986=x7980;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7985)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7985)));
IkReal gconst148=(x7984*x7986);
IkReal gconst149=((1.0)*r00*x7986);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7988=((-1.0)*r01);
CheckValue<IkReal> x7991 = IKatan2WithCheck(IkReal(x7988),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7991.valid){
continue;
}
IkReal x7989=((1.0)*(x7991.value));
IkReal x7990=x7980;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7989)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7989)));
IkReal gconst148=(x7988*x7990);
IkReal gconst149=((1.0)*r00*x7990);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7992=((-1.0)*r01);
CheckValue<IkReal> x7995 = IKatan2WithCheck(IkReal(x7992),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7995.valid){
continue;
}
IkReal x7993=((1.0)*(x7995.value));
IkReal x7994=x7980;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7993)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7993)));
IkReal gconst148=(x7992*x7994);
IkReal gconst149=((1.0)*r00*x7994);
IkReal x7996=r02*r02;
IkReal x7997=(r12*sj0);
IkReal x7998=((1.0)*cj0);
IkReal x7999=x7980;
j4eval[0]=((IKabs(((((-1.0)*x7998*x7999))+((r02*x7997*x7999))+((cj0*x7996*x7999)))))+(IKabs(((((-1.0)*x7997))+(((-1.0)*r02*x7998))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8000=((1.0)*sj0);
IkReal x8001=((1.0)*gconst148);
CheckValue<IkReal> x8002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8001))+(((-1.0)*gconst149*r21)))),-1);
if(!x8002.valid){
continue;
}
CheckValue<IkReal> x8003 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8000))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8000))+(((-1.0)*cj0*r01*x8001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8002.value)))+(x8003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8004=IKsin(j4);
IkReal x8005=IKcos(j4);
IkReal x8006=(gconst148*r11);
IkReal x8007=(sj1*sj2);
IkReal x8008=((1.0)*x8005);
IkReal x8009=(gconst149*x8005);
IkReal x8010=(gconst148*x8004);
IkReal x8011=((1.0)*cj1*cj2);
IkReal x8012=((1.0)*x8004);
evalcond[0]=((((-1.0)*gconst149*r20*x8012))+(((-1.0)*r22*x8008))+((r21*x8010)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8012))+(((-1.0)*r12*x8008))+((x8004*x8006)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8010))+(((-1.0)*gconst149*r00*x8012))+(((-1.0)*r02*x8008)));
evalcond[3]=((((-1.0)*r22*x8012))+((cj2*sj1))+(((-1.0)*gconst148*r21*x8008))+((cj1*sj2))+((r20*x8009)));
evalcond[4]=((((-1.0)*r02*x8012))+((r00*x8009))+((cj0*x8007))+(((-1.0)*cj0*x8011))+(((-1.0)*gconst148*r01*x8008)));
evalcond[5]=(((sj0*x8007))+(((-1.0)*x8006*x8008))+(((-1.0)*sj0*x8011))+(((-1.0)*r12*x8012))+((r10*x8009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8013=((1.0)*gconst149);
CheckValue<IkReal> x8014=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8013)))),-1);
if(!x8014.valid){
continue;
}
CheckValue<IkReal> x8015 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8013))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8014.value)))+(x8015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8016=IKsin(j4);
IkReal x8017=IKcos(j4);
IkReal x8018=(gconst148*r11);
IkReal x8019=(sj1*sj2);
IkReal x8020=((1.0)*x8017);
IkReal x8021=(gconst149*x8017);
IkReal x8022=(gconst148*x8016);
IkReal x8023=((1.0)*cj1*cj2);
IkReal x8024=((1.0)*x8016);
evalcond[0]=((((-1.0)*gconst149*r20*x8024))+((r21*x8022))+(((-1.0)*r22*x8020)));
evalcond[1]=((((-1.0)*r12*x8020))+cj0+(((-1.0)*gconst149*r10*x8024))+((x8016*x8018)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8020))+(((-1.0)*gconst149*r00*x8024))+((r01*x8022)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8020))+((cj1*sj2))+((r20*x8021))+(((-1.0)*r22*x8024)));
evalcond[4]=((((-1.0)*gconst148*r01*x8020))+((cj0*x8019))+(((-1.0)*r02*x8024))+((r00*x8021))+(((-1.0)*cj0*x8023)));
evalcond[5]=(((r10*x8021))+(((-1.0)*r12*x8024))+(((-1.0)*sj0*x8023))+((sj0*x8019))+(((-1.0)*x8018*x8020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8025=((1.0)*gconst149);
CheckValue<IkReal> x8026=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8025)))),-1);
if(!x8026.valid){
continue;
}
CheckValue<IkReal> x8027 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8026.value)))+(x8027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8028=IKsin(j4);
IkReal x8029=IKcos(j4);
IkReal x8030=(gconst148*r11);
IkReal x8031=(sj1*sj2);
IkReal x8032=((1.0)*x8029);
IkReal x8033=(gconst149*x8029);
IkReal x8034=(gconst148*x8028);
IkReal x8035=((1.0)*cj1*cj2);
IkReal x8036=((1.0)*x8028);
evalcond[0]=((((-1.0)*gconst149*r20*x8036))+((r21*x8034))+(((-1.0)*r22*x8032)));
evalcond[1]=(cj0+(((-1.0)*r12*x8032))+(((-1.0)*gconst149*r10*x8036))+((x8028*x8030)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8032))+(((-1.0)*gconst149*r00*x8036))+((r01*x8034)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8032))+((cj1*sj2))+((r20*x8033))+(((-1.0)*r22*x8036)));
evalcond[4]=((((-1.0)*gconst148*r01*x8032))+((cj0*x8031))+(((-1.0)*r02*x8036))+(((-1.0)*cj0*x8035))+((r00*x8033)));
evalcond[5]=((((-1.0)*sj0*x8035))+((r10*x8033))+(((-1.0)*r12*x8036))+((sj0*x8031))+(((-1.0)*x8030*x8032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8037=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8037;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8038=((1.0)*cj5);
IkReal x8039=((((-1.0)*r11*x8038))+(((-1.0)*r10*sj5)));
j4eval[0]=x8039;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8038)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8040=cj5*cj5;
IkReal x8041=r01*r01;
IkReal x8042=(r01*sj5);
IkReal x8043=(cj5*r00);
IkReal x8044=((((-1.0)*x8041))+(((-1.0)*(r02*r02)))+((x8040*x8041))+(((2.0)*x8042*x8043))+(((-1.0)*x8040*(r00*r00))));
j4eval[0]=x8044;
j4eval[1]=IKsign(x8044);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8042))+x8043))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8045=cj5*cj5;
IkReal x8046=r01*r01;
IkReal x8047=(r01*sj5);
IkReal x8048=(cj5*r00);
CheckValue<IkReal> x8049 = IKatan2WithCheck(IkReal(((((-1.0)*x8047))+x8048)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8049.valid){
continue;
}
CheckValue<IkReal> x8050=IKPowWithIntegerCheck(IKsign((((x8045*x8046))+(((-1.0)*x8046))+(((-1.0)*(r02*r02)))+(((-1.0)*x8045*(r00*r00)))+(((2.0)*x8047*x8048)))),-1);
if(!x8050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8049.value)+(((1.5707963267949)*(x8050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8051=IKsin(j4);
IkReal x8052=IKcos(j4);
IkReal x8053=(cj5*r10);
IkReal x8054=(r01*sj5);
IkReal x8055=(cj5*r00);
IkReal x8056=(cj5*r20);
IkReal x8057=((1.0)*x8052);
IkReal x8058=((1.0)*x8051);
IkReal x8059=(sj5*x8051);
evalcond[0]=((((-1.0)*x8056*x8058))+(((-1.0)*r22*x8057))+((r21*x8059)));
evalcond[1]=((((-1.0)*r12*x8057))+(((-1.0)*x8053*x8058))+((r11*x8059)));
evalcond[2]=((((-1.0)*r02*x8058))+((x8052*x8055))+(((-1.0)*x8054*x8057)));
evalcond[3]=((-1.0)+(((-1.0)*x8055*x8058))+(((-1.0)*r02*x8057))+((x8051*x8054)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8057))+(((-1.0)*r22*x8058))+((x8052*x8056)));
evalcond[5]=((((-1.0)*r12*x8058))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8057))+((x8052*x8053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8060=((1.0)*cj5);
CheckValue<IkReal> x8061 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8061.valid){
continue;
}
CheckValue<IkReal> x8062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8060)))),-1);
if(!x8062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8061.value)+(((1.5707963267949)*(x8062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8063=IKsin(j4);
IkReal x8064=IKcos(j4);
IkReal x8065=(cj5*r10);
IkReal x8066=(r01*sj5);
IkReal x8067=(cj5*r00);
IkReal x8068=(cj5*r20);
IkReal x8069=((1.0)*x8064);
IkReal x8070=((1.0)*x8063);
IkReal x8071=(sj5*x8063);
evalcond[0]=((((-1.0)*x8068*x8070))+((r21*x8071))+(((-1.0)*r22*x8069)));
evalcond[1]=((((-1.0)*r12*x8069))+(((-1.0)*x8065*x8070))+((r11*x8071)));
evalcond[2]=((((-1.0)*r02*x8070))+((x8064*x8067))+(((-1.0)*x8066*x8069)));
evalcond[3]=((-1.0)+((x8063*x8066))+(((-1.0)*x8067*x8070))+(((-1.0)*r02*x8069)));
evalcond[4]=(((cj2*sj1))+((x8064*x8068))+((cj1*sj2))+(((-1.0)*r22*x8070))+(((-1.0)*r21*sj5*x8069)));
evalcond[5]=(((x8064*x8065))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8069))+(((-1.0)*r12*x8070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8072=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8072.valid){
continue;
}
CheckValue<IkReal> x8073 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8072.value)))+(x8073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8074=IKsin(j4);
IkReal x8075=IKcos(j4);
IkReal x8076=(cj5*r10);
IkReal x8077=(r01*sj5);
IkReal x8078=(cj5*r00);
IkReal x8079=(cj5*r20);
IkReal x8080=((1.0)*x8075);
IkReal x8081=((1.0)*x8074);
IkReal x8082=(sj5*x8074);
evalcond[0]=((((-1.0)*x8079*x8081))+((r21*x8082))+(((-1.0)*r22*x8080)));
evalcond[1]=(((r11*x8082))+(((-1.0)*x8076*x8081))+(((-1.0)*r12*x8080)));
evalcond[2]=((((-1.0)*r02*x8081))+((x8075*x8078))+(((-1.0)*x8077*x8080)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8080))+(((-1.0)*x8078*x8081))+((x8074*x8077)));
evalcond[4]=(((cj2*sj1))+((x8075*x8079))+(((-1.0)*r21*sj5*x8080))+((cj1*sj2))+(((-1.0)*r22*x8081)));
evalcond[5]=(((x8075*x8076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8080))+(((-1.0)*r12*x8081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8083=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8083;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8084=((1.0)*cj5);
IkReal x8085=((((-1.0)*r21*x8084))+(((-1.0)*r20*sj5)));
j4eval[0]=x8085;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8084)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8086=cj5*cj5;
IkReal x8087=r01*r01;
IkReal x8088=(cj5*r00);
IkReal x8089=(r01*sj5);
IkReal x8090=((((-2.0)*x8088*x8089))+(((-1.0)*x8086*x8087))+x8087+(r02*r02)+((x8086*(r00*r00))));
j4eval[0]=x8090;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8089))+x8088))));
j4eval[2]=IKsign(x8090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8091=cj5*cj5;
IkReal x8092=r01*r01;
IkReal x8093=(r01*sj5);
IkReal x8094=(cj5*r00);
CheckValue<IkReal> x8095 = IKatan2WithCheck(IkReal(((((-1.0)*x8093))+x8094)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8095.valid){
continue;
}
CheckValue<IkReal> x8096=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8093*x8094))+((x8091*(r00*r00)))+(((-1.0)*x8091*x8092))+x8092+(r02*r02))),-1);
if(!x8096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8095.value)+(((1.5707963267949)*(x8096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8097=IKsin(j4);
IkReal x8098=IKcos(j4);
IkReal x8099=(cj5*r10);
IkReal x8100=(r01*sj5);
IkReal x8101=(cj5*r00);
IkReal x8102=(cj5*r20);
IkReal x8103=((1.0)*x8098);
IkReal x8104=((1.0)*x8097);
IkReal x8105=(sj5*x8097);
evalcond[0]=((((-1.0)*x8102*x8104))+(((-1.0)*r22*x8103))+((r21*x8105)));
evalcond[1]=((((-1.0)*x8099*x8104))+((r11*x8105))+(((-1.0)*r12*x8103)));
evalcond[2]=(((x8098*x8101))+(((-1.0)*r02*x8104))+(((-1.0)*x8100*x8103)));
evalcond[3]=((1.0)+(((-1.0)*x8101*x8104))+((x8097*x8100))+(((-1.0)*r02*x8103)));
evalcond[4]=((((-1.0)*r21*sj5*x8103))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8104))+((x8098*x8102)));
evalcond[5]=(((x8098*x8099))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8103))+(((-1.0)*r12*x8104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8106=((1.0)*cj5);
CheckValue<IkReal> x8107 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8107.valid){
continue;
}
CheckValue<IkReal> x8108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8106))+(((-1.0)*r20*sj5)))),-1);
if(!x8108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8107.value)+(((1.5707963267949)*(x8108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8109=IKsin(j4);
IkReal x8110=IKcos(j4);
IkReal x8111=(cj5*r10);
IkReal x8112=(r01*sj5);
IkReal x8113=(cj5*r00);
IkReal x8114=(cj5*r20);
IkReal x8115=((1.0)*x8110);
IkReal x8116=((1.0)*x8109);
IkReal x8117=(sj5*x8109);
evalcond[0]=((((-1.0)*x8114*x8116))+((r21*x8117))+(((-1.0)*r22*x8115)));
evalcond[1]=((((-1.0)*r12*x8115))+(((-1.0)*x8111*x8116))+((r11*x8117)));
evalcond[2]=((((-1.0)*x8112*x8115))+((x8110*x8113))+(((-1.0)*r02*x8116)));
evalcond[3]=((1.0)+(((-1.0)*x8113*x8116))+(((-1.0)*r02*x8115))+((x8109*x8112)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8115))+((x8110*x8114))+((cj1*sj2))+(((-1.0)*r22*x8116)));
evalcond[5]=((((-1.0)*r11*sj5*x8115))+((x8110*x8111))+(((-1.0)*r12*x8116))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8118 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8118.valid){
continue;
}
CheckValue<IkReal> x8119=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8118.value)+(((1.5707963267949)*(x8119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8120=IKsin(j4);
IkReal x8121=IKcos(j4);
IkReal x8122=(cj5*r10);
IkReal x8123=(r01*sj5);
IkReal x8124=(cj5*r00);
IkReal x8125=(cj5*r20);
IkReal x8126=((1.0)*x8121);
IkReal x8127=((1.0)*x8120);
IkReal x8128=(sj5*x8120);
evalcond[0]=((((-1.0)*x8125*x8127))+((r21*x8128))+(((-1.0)*r22*x8126)));
evalcond[1]=((((-1.0)*x8122*x8127))+(((-1.0)*r12*x8126))+((r11*x8128)));
evalcond[2]=(((x8121*x8124))+(((-1.0)*x8123*x8126))+(((-1.0)*r02*x8127)));
evalcond[3]=((1.0)+((x8120*x8123))+(((-1.0)*x8124*x8127))+(((-1.0)*r02*x8126)));
evalcond[4]=(((cj2*sj1))+((x8121*x8125))+(((-1.0)*r21*sj5*x8126))+((cj1*sj2))+(((-1.0)*r22*x8127)));
evalcond[5]=((((-1.0)*r11*sj5*x8126))+(((-1.0)*r12*x8127))+((x8121*x8122))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8129=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8129);
rxp1_1=(px*r21);
rxp1_2=(r11*x8129);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8130=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8130);
rxp1_1=(px*r21);
rxp1_2=(r11*x8130);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8131=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8131);
rxp1_1=(px*r21);
rxp1_2=(r11*x8131);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8134=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8134.valid){
continue;
}
IkReal x8132=x8134.value;
IkReal x8133=(sj0*x8132);
cj4array[0]=((((-1.0)*sj1*sj2*x8133))+((cj1*cj2*x8133)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8135=IKsin(j4);
IkReal x8136=IKcos(j4);
IkReal x8137=(r21*sj5);
IkReal x8138=(cj5*r20);
IkReal x8139=((1.0)*x8135);
IkReal x8140=((1.0)*x8136);
evalcond[0]=((-1.0)*r02*x8135);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8140)));
evalcond[2]=(((x8135*x8137))+(((-1.0)*x8138*x8139)));
evalcond[3]=((((-1.0)*cj5*r10*x8139))+((r11*sj5*x8135)));
evalcond[4]=(((cj2*sj1))+((x8136*x8138))+((cj1*sj2))+(((-1.0)*x8137*x8140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8143=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8143.valid){
continue;
}
IkReal x8141=x8143.value;
IkReal x8142=((1.0)*x8141);
cj4array[0]=((((-1.0)*cj2*sj1*x8142))+(((-1.0)*cj1*sj2*x8142)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8144=IKsin(j4);
IkReal x8145=IKcos(j4);
IkReal x8146=(r11*sj5);
IkReal x8147=((1.0)*sj0);
IkReal x8148=((1.0)*x8145);
IkReal x8149=((1.0)*cj5*x8144);
evalcond[0]=((-1.0)*r02*x8144);
evalcond[1]=((((-1.0)*r02*x8148))+(((-1.0)*x8147)));
evalcond[2]=((((-1.0)*r20*x8149))+((r21*sj5*x8144)));
evalcond[3]=((((-1.0)*r10*x8149))+((x8144*x8146)));
evalcond[4]=(((cj5*r10*x8145))+(((-1.0)*x8146*x8148))+(((-1.0)*cj1*cj2*x8147))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8150=IKPowWithIntegerCheck(r02,-1);
if(!x8150.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8150.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8151=IKsin(j4);
IkReal x8152=IKcos(j4);
IkReal x8153=(cj5*x8152);
IkReal x8154=(sj5*x8151);
IkReal x8155=((1.0)*sj5*x8152);
IkReal x8156=((1.0)*cj5*x8151);
evalcond[0]=((-1.0)*r02*x8151);
evalcond[1]=(((r21*x8154))+(((-1.0)*r20*x8156)));
evalcond[2]=((((-1.0)*r10*x8156))+((r11*x8154)));
evalcond[3]=(((cj2*sj1))+((r20*x8153))+((cj1*sj2))+(((-1.0)*r21*x8155)));
evalcond[4]=(((r10*x8153))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8157=((1.0)*sj0);
IkReal x8158=((1.0)*cj0);
CheckValue<IkReal> x8159 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8158))+(((-1.0)*r12*x8157)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8157))+(((-1.0)*r01*sj5*x8158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8159.valid){
continue;
}
CheckValue<IkReal> x8160=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8159.value)+(((1.5707963267949)*(x8160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8161=IKsin(j4);
IkReal x8162=IKcos(j4);
IkReal x8163=(cj5*r10);
IkReal x8164=(sj1*sj2);
IkReal x8165=(r01*sj5);
IkReal x8166=(cj5*r00);
IkReal x8167=(cj5*r20);
IkReal x8168=((1.0)*x8162);
IkReal x8169=((1.0)*cj1*cj2);
IkReal x8170=((1.0)*x8161);
IkReal x8171=(sj5*x8161);
evalcond[0]=(((r21*x8171))+(((-1.0)*x8167*x8170))+(((-1.0)*r22*x8168)));
evalcond[1]=(cj0+((r11*x8171))+(((-1.0)*r12*x8168))+(((-1.0)*x8163*x8170)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8168))+((x8161*x8165))+(((-1.0)*x8166*x8170)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8168))+((cj1*sj2))+(((-1.0)*r22*x8170))+((x8162*x8167)));
evalcond[4]=((((-1.0)*x8165*x8168))+((cj0*x8164))+((x8162*x8166))+(((-1.0)*r02*x8170))+(((-1.0)*cj0*x8169)));
evalcond[5]=((((-1.0)*r12*x8170))+((sj0*x8164))+((x8162*x8163))+(((-1.0)*r11*sj5*x8168))+(((-1.0)*sj0*x8169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8172=((1.0)*cj5);
CheckValue<IkReal> x8173=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8172))+(((-1.0)*r10*sj5)))),-1);
if(!x8173.valid){
continue;
}
CheckValue<IkReal> x8174 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8172))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8173.value)))+(x8174.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8175=IKsin(j4);
IkReal x8176=IKcos(j4);
IkReal x8177=(cj5*r10);
IkReal x8178=(sj1*sj2);
IkReal x8179=(r01*sj5);
IkReal x8180=(cj5*r00);
IkReal x8181=(cj5*r20);
IkReal x8182=((1.0)*x8176);
IkReal x8183=((1.0)*cj1*cj2);
IkReal x8184=((1.0)*x8175);
IkReal x8185=(sj5*x8175);
evalcond[0]=((((-1.0)*r22*x8182))+((r21*x8185))+(((-1.0)*x8181*x8184)));
evalcond[1]=(((r11*x8185))+cj0+(((-1.0)*r12*x8182))+(((-1.0)*x8177*x8184)));
evalcond[2]=((((-1.0)*r02*x8182))+(((-1.0)*sj0))+(((-1.0)*x8180*x8184))+((x8175*x8179)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8184))+((cj1*sj2))+(((-1.0)*r21*sj5*x8182))+((x8176*x8181)));
evalcond[4]=((((-1.0)*r02*x8184))+(((-1.0)*x8179*x8182))+((cj0*x8178))+((x8176*x8180))+(((-1.0)*cj0*x8183)));
evalcond[5]=(((sj0*x8178))+((x8176*x8177))+(((-1.0)*r12*x8184))+(((-1.0)*sj0*x8183))+(((-1.0)*r11*sj5*x8182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8186=((1.0)*cj5);
CheckValue<IkReal> x8187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8186))+(((-1.0)*r00*sj5)))),-1);
if(!x8187.valid){
continue;
}
CheckValue<IkReal> x8188 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8187.value)))+(x8188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8189=IKsin(j4);
IkReal x8190=IKcos(j4);
IkReal x8191=(cj5*r10);
IkReal x8192=(sj1*sj2);
IkReal x8193=(r01*sj5);
IkReal x8194=(cj5*r00);
IkReal x8195=(cj5*r20);
IkReal x8196=((1.0)*x8190);
IkReal x8197=((1.0)*cj1*cj2);
IkReal x8198=((1.0)*x8189);
IkReal x8199=(sj5*x8189);
evalcond[0]=(((r21*x8199))+(((-1.0)*r22*x8196))+(((-1.0)*x8195*x8198)));
evalcond[1]=(((r11*x8199))+cj0+(((-1.0)*r12*x8196))+(((-1.0)*x8191*x8198)));
evalcond[2]=((((-1.0)*r02*x8196))+(((-1.0)*sj0))+(((-1.0)*x8194*x8198))+((x8189*x8193)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8198))+((cj1*sj2))+((x8190*x8195))+(((-1.0)*r21*sj5*x8196)));
evalcond[4]=((((-1.0)*r02*x8198))+((x8190*x8194))+(((-1.0)*x8193*x8196))+(((-1.0)*cj0*x8197))+((cj0*x8192)));
evalcond[5]=(((sj0*x8192))+((x8190*x8191))+(((-1.0)*r12*x8198))+(((-1.0)*sj0*x8197))+(((-1.0)*r11*sj5*x8196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8200=cj5*cj5;
IkReal x8201=r21*r21;
IkReal x8202=(cj2*sj1);
IkReal x8203=(cj1*sj2);
IkReal x8204=(r21*sj5);
IkReal x8205=((1.0)*cj5*r20);
CheckValue<IkReal> x8206=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x8204))+((x8200*(r20*r20)))+(r22*r22)+(((-1.0)*x8200*x8201))+x8201)),-1);
if(!x8206.valid){
continue;
}
CheckValue<IkReal> x8207 = IKatan2WithCheck(IkReal((((r22*x8202))+((r22*x8203)))),IkReal(((((-1.0)*x8202*x8205))+((x8202*x8204))+((x8203*x8204))+(((-1.0)*x8203*x8205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8206.value)))+(x8207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8208=IKsin(j4);
IkReal x8209=IKcos(j4);
IkReal x8210=(r21*sj5);
IkReal x8211=(cj5*r20);
IkReal x8212=((1.0)*x8209);
IkReal x8213=((1.0)*x8208);
evalcond[0]=(((x8208*x8210))+(((-1.0)*x8211*x8213))+(((-1.0)*r22*x8212)));
evalcond[1]=(((cj2*sj1))+((x8209*x8211))+((cj1*sj2))+(((-1.0)*x8210*x8212))+(((-1.0)*r22*x8213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8214=(cj5*sj4);
IkReal x8215=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8215))+(((-1.0)*r00*x8214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8215))+((r10*x8214))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8215))+(((-1.0)*r00*x8214))))+IKsqr(((((-1.0)*r11*x8215))+((r10*x8214))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8215))+(((-1.0)*r00*x8214))), ((((-1.0)*r11*x8215))+((r10*x8214))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8216=IKcos(j0);
IkReal x8217=IKsin(j0);
IkReal x8218=(cj4*cj5);
IkReal x8219=((0.1)*sj5);
IkReal x8220=((0.392)*sj1);
IkReal x8221=(cj5*r11);
IkReal x8222=((1.0)*cj1);
IkReal x8223=(r11*sj5);
IkReal x8224=((1.0)*sj5);
IkReal x8225=((1.0)*sj4);
IkReal x8226=((0.392)*cj1);
IkReal x8227=((1.0)*sj1);
IkReal x8228=(cj5*r01);
IkReal x8229=((0.425)*cj1);
IkReal x8230=((1.0)*cj4);
IkReal x8231=(sj2*x8217);
IkReal x8232=(sj2*x8216);
IkReal x8233=(cj2*x8216);
IkReal x8234=(cj2*x8217);
evalcond[0]=((((-1.0)*cj5*r10*x8225))+(((-1.0)*r12*x8230))+((sj4*x8223))+x8216);
evalcond[1]=((((-1.0)*r02*x8230))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8225))+(((-1.0)*x8217)));
evalcond[2]=((((-1.0)*x8222*x8232))+(((-1.0)*x8228))+(((-1.0)*x8227*x8233))+(((-1.0)*r00*x8224)));
evalcond[3]=((((-1.0)*x8222*x8231))+(((-1.0)*x8221))+(((-1.0)*r10*x8224))+(((-1.0)*x8227*x8234)));
evalcond[4]=((((-1.0)*x8222*x8233))+(((-1.0)*r02*x8225))+((r00*x8218))+(((-1.0)*cj4*r01*x8224))+((sj1*x8232)));
evalcond[5]=((((-1.0)*x8222*x8234))+(((-1.0)*r12*x8225))+((r10*x8218))+((sj1*x8231))+(((-1.0)*x8223*x8230)));
evalcond[6]=((((-1.0)*r00*x8219))+(((-1.0)*x8220*x8232))+(((-1.0)*px))+(((-0.134)*x8217))+(((-0.1)*x8228))+((x8216*x8229))+((x8226*x8233)));
evalcond[7]=((((0.134)*x8216))+(((-1.0)*x8220*x8231))+((x8217*x8229))+(((-1.0)*py))+(((-0.1)*x8221))+(((-1.0)*r10*x8219))+((x8226*x8234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8235 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8235.valid){
continue;
}
CheckValue<IkReal> x8236=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8236.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8235.value)+(((1.5707963267949)*(x8236.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8237=IKcos(j0);
IkReal x8238=IKsin(j0);
IkReal x8239=(r00*sj5);
IkReal x8240=(cj5*r11);
IkReal x8241=(r10*sj5);
IkReal x8242=((1.0)*cj2);
IkReal x8243=(cj5*r01);
IkReal x8244=((0.392)*sj2);
IkReal x8245=((0.425)*cj1);
IkReal x8246=((1.0)*cj1*sj2);
IkReal x8247=((0.392)*cj1*cj2);
IkReal x8248=(sj1*x8237);
IkReal x8249=(sj1*x8238);
evalcond[0]=((((-1.0)*x8242*x8248))+(((-1.0)*x8237*x8246))+(((-1.0)*x8239))+(((-1.0)*x8243)));
evalcond[1]=((((-1.0)*x8242*x8249))+(((-1.0)*x8238*x8246))+(((-1.0)*x8240))+(((-1.0)*x8241)));
evalcond[2]=((((-1.0)*x8244*x8248))+(((-1.0)*px))+((x8237*x8247))+((x8237*x8245))+(((-0.1)*x8243))+(((-0.134)*x8238))+(((-0.1)*x8239)));
evalcond[3]=((((-1.0)*x8244*x8249))+(((0.134)*x8237))+(((-1.0)*py))+((x8238*x8247))+((x8238*x8245))+(((-0.1)*x8241))+(((-0.1)*x8240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8250=((1.0)*cj5);
IkReal x8251=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8250)));
j4eval[0]=x8251;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8250))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8252=((1.0)*cj5);
IkReal x8253=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8252)));
j4eval[0]=x8253;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8252))))));
j4eval[2]=IKsign(x8253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8254=((1.0)*sj0);
IkReal x8255=((1.0)*cj0);
IkReal x8256=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8256;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8254))+(((-1.0)*r01*sj5*x8255)))))+(IKabs(((((-1.0)*r12*x8254))+(((-1.0)*r02*x8255))))));
j4eval[2]=IKsign(x8256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8257=((-1.0)*r20);
IkReal x8259 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8259)==0){
continue;
}
IkReal x8258=pow(x8259,-0.5);
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8257),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8260.value));
IkReal gconst133=(r21*x8258);
IkReal gconst134=(x8257*x8258);
CheckValue<IkReal> x8261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8261.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8261.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8262=((-1.0)*r20);
IkReal x8263=x8258;
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8262),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
IkReal x8264=((-1.0)*(x8265.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8264;
IkReal gconst132=x8264;
IkReal gconst133=(r21*x8263);
IkReal gconst134=(x8262*x8263);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8266=((-1.0)*r20);
IkReal x8267=x8258;
CheckValue<IkReal> x8269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8266),IKFAST_ATAN2_MAGTHRESH);
if(!x8269.valid){
continue;
}
IkReal x8268=((-1.0)*(x8269.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8268;
IkReal gconst132=x8268;
IkReal gconst133=(r21*x8267);
IkReal gconst134=(x8266*x8267);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8270=((-1.0)*r20);
IkReal x8271=x8258;
CheckValue<IkReal> x8273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8270),IKFAST_ATAN2_MAGTHRESH);
if(!x8273.valid){
continue;
}
IkReal x8272=((-1.0)*(x8273.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8272;
IkReal gconst132=x8272;
IkReal gconst133=(r21*x8271);
IkReal gconst134=(x8270*x8271);
IkReal x8274=r22*r22;
CheckValue<IkReal> x8277=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8274))),-1);
if(!x8277.valid){
continue;
}
IkReal x8275=x8277.value;
IkReal x8276=((((2.0)*x8275*(r20*r20)*(r21*r21)))+((x8275*(r20*r20*r20*r20)))+((x8275*(r21*r21*r21*r21)))+x8274);
j4eval[0]=x8276;
j4eval[1]=IKsign(x8276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8278=(gconst133*r21);
IkReal x8279=(cj1*sj2);
IkReal x8280=(gconst134*r20);
IkReal x8281=(cj2*sj1);
CheckValue<IkReal> x8282=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8278*x8280))+(x8280*x8280)+(r22*r22)+(x8278*x8278))),-1);
if(!x8282.valid){
continue;
}
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal((((r22*x8279))+((r22*x8281)))),IkReal((((x8278*x8279))+(((-1.0)*x8280*x8281))+(((-1.0)*x8279*x8280))+((x8278*x8281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8282.value)))+(x8283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8284=IKsin(j4);
IkReal x8285=IKcos(j4);
IkReal x8286=(sj1*sj2);
IkReal x8287=(gconst133*r11);
IkReal x8288=(gconst133*r21);
IkReal x8289=(gconst133*r01);
IkReal x8290=((1.0)*x8285);
IkReal x8291=(gconst134*x8285);
IkReal x8292=((1.0)*x8284);
IkReal x8293=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8292))+(((-1.0)*r22*x8290))+((x8284*x8288)));
evalcond[1]=((((-1.0)*r12*x8290))+cj0+(((-1.0)*gconst134*r10*x8292))+((x8284*x8287)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8292))+((x8284*x8289))+(((-1.0)*r02*x8290)));
evalcond[3]=(((cj2*sj1))+((r20*x8291))+((cj1*sj2))+(((-1.0)*r22*x8292))+(((-1.0)*x8288*x8290)));
evalcond[4]=(((r00*x8291))+(((-1.0)*cj0*x8293))+((cj0*x8286))+(((-1.0)*x8289*x8290))+(((-1.0)*r02*x8292)));
evalcond[5]=((((-1.0)*r12*x8292))+((r10*x8291))+((sj0*x8286))+(((-1.0)*x8287*x8290))+(((-1.0)*sj0*x8293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8294=((1.0)*gconst134);
CheckValue<IkReal> x8295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8294))+(((-1.0)*gconst133*r10)))),-1);
if(!x8295.valid){
continue;
}
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8294))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8295.value)))+(x8296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8297=IKsin(j4);
IkReal x8298=IKcos(j4);
IkReal x8299=(sj1*sj2);
IkReal x8300=(gconst133*r11);
IkReal x8301=(gconst133*r21);
IkReal x8302=(gconst133*r01);
IkReal x8303=((1.0)*x8298);
IkReal x8304=(gconst134*x8298);
IkReal x8305=((1.0)*x8297);
IkReal x8306=((1.0)*cj1*cj2);
evalcond[0]=(((x8297*x8301))+(((-1.0)*r22*x8303))+(((-1.0)*gconst134*r20*x8305)));
evalcond[1]=(((x8297*x8300))+cj0+(((-1.0)*r12*x8303))+(((-1.0)*gconst134*r10*x8305)));
evalcond[2]=((((-1.0)*gconst134*r00*x8305))+((x8297*x8302))+(((-1.0)*sj0))+(((-1.0)*r02*x8303)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8305))+((cj1*sj2))+(((-1.0)*x8301*x8303))+((r20*x8304)));
evalcond[4]=(((r00*x8304))+(((-1.0)*x8302*x8303))+((cj0*x8299))+(((-1.0)*r02*x8305))+(((-1.0)*cj0*x8306)));
evalcond[5]=((((-1.0)*r12*x8305))+((r10*x8304))+((sj0*x8299))+(((-1.0)*x8300*x8303))+(((-1.0)*sj0*x8306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8307=((1.0)*gconst134);
CheckValue<IkReal> x8308=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8307)))),-1);
if(!x8308.valid){
continue;
}
CheckValue<IkReal> x8309 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8307))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8308.value)))+(x8309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8310=IKsin(j4);
IkReal x8311=IKcos(j4);
IkReal x8312=(sj1*sj2);
IkReal x8313=(gconst133*r11);
IkReal x8314=(gconst133*r21);
IkReal x8315=(gconst133*r01);
IkReal x8316=((1.0)*x8311);
IkReal x8317=(gconst134*x8311);
IkReal x8318=((1.0)*x8310);
IkReal x8319=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8316))+((x8310*x8314))+(((-1.0)*gconst134*r20*x8318)));
evalcond[1]=((((-1.0)*gconst134*r10*x8318))+cj0+((x8310*x8313))+(((-1.0)*r12*x8316)));
evalcond[2]=((((-1.0)*sj0))+((x8310*x8315))+(((-1.0)*r02*x8316))+(((-1.0)*gconst134*r00*x8318)));
evalcond[3]=(((cj2*sj1))+((r20*x8317))+((cj1*sj2))+(((-1.0)*r22*x8318))+(((-1.0)*x8314*x8316)));
evalcond[4]=(((r00*x8317))+(((-1.0)*r02*x8318))+((cj0*x8312))+(((-1.0)*x8315*x8316))+(((-1.0)*cj0*x8319)));
evalcond[5]=((((-1.0)*x8313*x8316))+(((-1.0)*sj0*x8319))+((r10*x8317))+((sj0*x8312))+(((-1.0)*r12*x8318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8320=((-1.0)*r21);
IkReal x8322 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8322)==0){
continue;
}
IkReal x8321=pow(x8322,-0.5);
CheckValue<IkReal> x8323 = IKatan2WithCheck(IkReal(x8320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8323.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8323.value))));
IkReal gconst136=(x8320*x8321);
IkReal gconst137=((1.0)*r20*x8321);
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8324.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8325=((-1.0)*r21);
CheckValue<IkReal> x8328 = IKatan2WithCheck(IkReal(x8325),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8328.valid){
continue;
}
IkReal x8326=((1.0)*(x8328.value));
IkReal x8327=x8321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8326)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8326)));
IkReal gconst136=(x8325*x8327);
IkReal gconst137=((1.0)*r20*x8327);
IkReal x8329=r22*r22;
IkReal x8330=((1.0)*x8329);
CheckValue<IkReal> x8334=IKPowWithIntegerCheck(((-1.0)+x8329),-1);
if(!x8334.valid){
continue;
}
IkReal x8331=x8334.value;
if((((1.0)+(((-1.0)*x8330)))) < -0.00001)
continue;
IkReal x8332=IKsqrt(((1.0)+(((-1.0)*x8330))));
IkReal x8333=(cj0*x8331*x8332);
j4eval[0]=((IKabs((x8333+(((-1.0)*x8330*x8333)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8335=((-1.0)*r21);
CheckValue<IkReal> x8338 = IKatan2WithCheck(IkReal(x8335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8338.valid){
continue;
}
IkReal x8336=((1.0)*(x8338.value));
IkReal x8337=x8321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8336)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8336)));
IkReal gconst136=(x8335*x8337);
IkReal gconst137=((1.0)*r20*x8337);
IkReal x8339=r22*r22;
IkReal x8340=((1.0)*x8339);
CheckValue<IkReal> x8344=IKPowWithIntegerCheck(((-1.0)+x8339),-1);
if(!x8344.valid){
continue;
}
IkReal x8341=x8344.value;
if((((1.0)+(((-1.0)*x8340)))) < -0.00001)
continue;
IkReal x8342=IKsqrt(((1.0)+(((-1.0)*x8340))));
IkReal x8343=(sj0*x8341*x8342);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8343+(((-1.0)*x8340*x8343))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8345=((-1.0)*r21);
CheckValue<IkReal> x8348 = IKatan2WithCheck(IkReal(x8345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8348.valid){
continue;
}
IkReal x8346=((1.0)*(x8348.value));
IkReal x8347=x8321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8346)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8346)));
IkReal gconst136=(x8345*x8347);
IkReal gconst137=((1.0)*r20*x8347);
IkReal x8349=r22*r22;
IkReal x8350=(r12*sj0);
IkReal x8351=(cj0*r02);
CheckValue<IkReal> x8355=IKPowWithIntegerCheck(((-1.0)+x8349),-1);
if(!x8355.valid){
continue;
}
IkReal x8352=x8355.value;
if((((1.0)+(((-1.0)*x8349)))) < -0.00001)
continue;
IkReal x8353=IKsqrt(((1.0)+(((-1.0)*x8349))));
IkReal x8354=(r22*x8352*x8353);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8350))+(((-1.0)*x8351)))))+(IKabs((((x8350*x8354))+((x8351*x8354))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8356=((1.0)*sj0);
IkReal x8357=((1.0)*cj0);
CheckValue<IkReal> x8358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8358.valid){
continue;
}
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8357))+(((-1.0)*r12*x8356)))),IkReal(((((-1.0)*gconst136*r11*x8356))+((gconst137*r10*sj0))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8358.value)))+(x8359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8360=IKsin(j4);
IkReal x8361=IKcos(j4);
IkReal x8362=(gconst136*r01);
IkReal x8363=(gconst137*r10);
IkReal x8364=(sj1*sj2);
IkReal x8365=(gconst137*r20);
IkReal x8366=(gconst136*r11);
IkReal x8367=(gconst136*r21);
IkReal x8368=(gconst137*r00);
IkReal x8369=((1.0)*x8361);
IkReal x8370=((1.0)*cj1*cj2);
IkReal x8371=((1.0)*x8360);
evalcond[0]=((((-1.0)*x8365*x8371))+(((-1.0)*r22*x8369))+((x8360*x8367)));
evalcond[1]=(cj0+(((-1.0)*r12*x8369))+((x8360*x8366))+(((-1.0)*x8363*x8371)));
evalcond[2]=((((-1.0)*x8368*x8371))+(((-1.0)*sj0))+(((-1.0)*r02*x8369))+((x8360*x8362)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8361*x8365))+(((-1.0)*r22*x8371))+(((-1.0)*x8367*x8369)));
evalcond[4]=((((-1.0)*x8362*x8369))+(((-1.0)*r02*x8371))+((x8361*x8368))+(((-1.0)*cj0*x8370))+((cj0*x8364)));
evalcond[5]=((((-1.0)*r12*x8371))+((x8361*x8363))+(((-1.0)*x8366*x8369))+((sj0*x8364))+(((-1.0)*sj0*x8370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8372=((1.0)*gconst137);
CheckValue<IkReal> x8373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8372)))),-1);
if(!x8373.valid){
continue;
}
CheckValue<IkReal> x8374 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8373.value)))+(x8374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8375=IKsin(j4);
IkReal x8376=IKcos(j4);
IkReal x8377=(gconst136*r01);
IkReal x8378=(gconst137*r10);
IkReal x8379=(sj1*sj2);
IkReal x8380=(gconst137*r20);
IkReal x8381=(gconst136*r11);
IkReal x8382=(gconst136*r21);
IkReal x8383=(gconst137*r00);
IkReal x8384=((1.0)*x8376);
IkReal x8385=((1.0)*cj1*cj2);
IkReal x8386=((1.0)*x8375);
evalcond[0]=((((-1.0)*x8380*x8386))+((x8375*x8382))+(((-1.0)*r22*x8384)));
evalcond[1]=(cj0+((x8375*x8381))+(((-1.0)*x8378*x8386))+(((-1.0)*r12*x8384)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8384))+(((-1.0)*x8383*x8386))+((x8375*x8377)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8382*x8384))+((cj1*sj2))+((x8376*x8380))+(((-1.0)*r22*x8386)));
evalcond[4]=((((-1.0)*r02*x8386))+((cj0*x8379))+(((-1.0)*cj0*x8385))+((x8376*x8383))+(((-1.0)*x8377*x8384)));
evalcond[5]=((((-1.0)*sj0*x8385))+(((-1.0)*x8381*x8384))+((sj0*x8379))+((x8376*x8378))+(((-1.0)*r12*x8386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8387=((1.0)*gconst137);
CheckValue<IkReal> x8388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8387)))),-1);
if(!x8388.valid){
continue;
}
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8388.value)))+(x8389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8390=IKsin(j4);
IkReal x8391=IKcos(j4);
IkReal x8392=(gconst136*r01);
IkReal x8393=(gconst137*r10);
IkReal x8394=(sj1*sj2);
IkReal x8395=(gconst137*r20);
IkReal x8396=(gconst136*r11);
IkReal x8397=(gconst136*r21);
IkReal x8398=(gconst137*r00);
IkReal x8399=((1.0)*x8391);
IkReal x8400=((1.0)*cj1*cj2);
IkReal x8401=((1.0)*x8390);
evalcond[0]=((((-1.0)*x8395*x8401))+((x8390*x8397))+(((-1.0)*r22*x8399)));
evalcond[1]=(cj0+(((-1.0)*x8393*x8401))+((x8390*x8396))+(((-1.0)*r12*x8399)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8399))+((x8390*x8392))+(((-1.0)*x8398*x8401)));
evalcond[3]=(((cj2*sj1))+((x8391*x8395))+((cj1*sj2))+(((-1.0)*r22*x8401))+(((-1.0)*x8397*x8399)));
evalcond[4]=((((-1.0)*cj0*x8400))+((x8391*x8398))+(((-1.0)*r02*x8401))+(((-1.0)*x8392*x8399))+((cj0*x8394)));
evalcond[5]=(((x8391*x8393))+(((-1.0)*sj0*x8400))+((sj0*x8394))+(((-1.0)*r12*x8401))+(((-1.0)*x8396*x8399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8402=((-1.0)*r10);
IkReal x8404 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8404)==0){
continue;
}
IkReal x8403=pow(x8404,-0.5);
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8402),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8405.value));
IkReal gconst139=(r11*x8403);
IkReal gconst140=(x8402*x8403);
CheckValue<IkReal> x8406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8406.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8406.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8407=((-1.0)*r10);
IkReal x8408=x8403;
CheckValue<IkReal> x8410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8407),IKFAST_ATAN2_MAGTHRESH);
if(!x8410.valid){
continue;
}
IkReal x8409=((-1.0)*(x8410.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8409;
IkReal gconst138=x8409;
IkReal gconst139=(r11*x8408);
IkReal gconst140=(x8407*x8408);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8411=((1.0)*sj0);
IkReal x8412=((1.0)*gconst139);
CheckValue<IkReal> x8413 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8411))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x8411))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8412))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8413.valid){
continue;
}
CheckValue<IkReal> x8414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8412)))),-1);
if(!x8414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8413.value)+(((1.5707963267949)*(x8414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8415=IKsin(j4);
IkReal x8416=IKcos(j4);
IkReal x8417=(gconst140*r00);
IkReal x8418=(sj1*sj2);
IkReal x8419=(gconst139*r11);
IkReal x8420=(gconst139*r01);
IkReal x8421=(gconst139*r21);
IkReal x8422=((1.0)*x8416);
IkReal x8423=((1.0)*x8415);
IkReal x8424=((1.0)*cj1*cj2);
IkReal x8425=(gconst140*x8416);
evalcond[0]=(((x8415*x8421))+(((-1.0)*r22*x8422))+(((-1.0)*gconst140*r20*x8423)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8423))+(((-1.0)*r12*x8422))+((x8415*x8419)));
evalcond[2]=((((-1.0)*sj0))+((x8415*x8420))+(((-1.0)*x8417*x8423))+(((-1.0)*r02*x8422)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8425))+(((-1.0)*x8421*x8422))+(((-1.0)*r22*x8423)));
evalcond[4]=((((-1.0)*cj0*x8424))+(((-1.0)*x8420*x8422))+(((-1.0)*r02*x8423))+((cj0*x8418))+((x8416*x8417)));
evalcond[5]=(((r10*x8425))+(((-1.0)*sj0*x8424))+((sj0*x8418))+(((-1.0)*x8419*x8422))+(((-1.0)*r12*x8423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8426=((1.0)*gconst140);
CheckValue<IkReal> x8427 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8427.valid){
continue;
}
CheckValue<IkReal> x8428=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8426)))),-1);
if(!x8428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8427.value)+(((1.5707963267949)*(x8428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8429=IKsin(j4);
IkReal x8430=IKcos(j4);
IkReal x8431=(gconst140*r00);
IkReal x8432=(sj1*sj2);
IkReal x8433=(gconst139*r11);
IkReal x8434=(gconst139*r01);
IkReal x8435=(gconst139*r21);
IkReal x8436=((1.0)*x8430);
IkReal x8437=((1.0)*x8429);
IkReal x8438=((1.0)*cj1*cj2);
IkReal x8439=(gconst140*x8430);
evalcond[0]=(((x8429*x8435))+(((-1.0)*gconst140*r20*x8437))+(((-1.0)*r22*x8436)));
evalcond[1]=(cj0+((x8429*x8433))+(((-1.0)*r12*x8436))+(((-1.0)*gconst140*r10*x8437)));
evalcond[2]=((((-1.0)*sj0))+((x8429*x8434))+(((-1.0)*x8431*x8437))+(((-1.0)*r02*x8436)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8435*x8436))+((cj1*sj2))+(((-1.0)*r22*x8437))+((r20*x8439)));
evalcond[4]=((((-1.0)*x8434*x8436))+(((-1.0)*r02*x8437))+(((-1.0)*cj0*x8438))+((cj0*x8432))+((x8430*x8431)));
evalcond[5]=((((-1.0)*sj0*x8438))+(((-1.0)*r12*x8437))+((sj0*x8432))+((r10*x8439))+(((-1.0)*x8433*x8436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8440=((-1.0)*r11);
IkReal x8442 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8442)==0){
continue;
}
IkReal x8441=pow(x8442,-0.5);
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal(x8440),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8443.value))));
IkReal gconst142=(x8440*x8441);
IkReal gconst143=((1.0)*r10*x8441);
CheckValue<IkReal> x8444 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8444.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8444.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8445=((-1.0)*r11);
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal(x8445),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
IkReal x8446=((1.0)*(x8448.value));
IkReal x8447=x8441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8446)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8446)));
IkReal gconst142=(x8445*x8447);
IkReal gconst143=((1.0)*r10*x8447);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8449=((-1.0)*r11);
CheckValue<IkReal> x8452 = IKatan2WithCheck(IkReal(x8449),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8452.valid){
continue;
}
IkReal x8450=((1.0)*(x8452.value));
IkReal x8451=x8441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8450)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8450)));
IkReal gconst142=(x8449*x8451);
IkReal gconst143=((1.0)*r10*x8451);
IkReal x8453=r12*r12;
IkReal x8454=((1.0)*sj0);
IkReal x8455=(cj0*r02);
IkReal x8456=x8441;
j4eval[0]=((IKabs(((((-1.0)*x8454*x8456))+((sj0*x8453*x8456))+((r12*x8455*x8456)))))+(IKabs(((((-1.0)*x8455))+(((-1.0)*r12*x8454))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8457=((-1.0)*r11);
CheckValue<IkReal> x8460 = IKatan2WithCheck(IkReal(x8457),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8460.valid){
continue;
}
IkReal x8458=((1.0)*(x8460.value));
IkReal x8459=x8441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8458)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8458)));
IkReal gconst142=(x8457*x8459);
IkReal gconst143=((1.0)*r10*x8459);
IkReal x8461=r12*r12;
IkReal x8462=(cj1*r22*sj2);
IkReal x8463=(cj2*r22*sj1);
CheckValue<IkReal> x8467=IKPowWithIntegerCheck(((-1.0)+x8461),-1);
if(!x8467.valid){
continue;
}
IkReal x8464=x8467.value;
if((((1.0)+(((-1.0)*x8461)))) < -0.00001)
continue;
IkReal x8465=IKsqrt(((1.0)+(((-1.0)*x8461))));
IkReal x8466=((1.0)*r12*x8464*x8465);
j4eval[0]=((IKabs(((((-1.0)*x8463*x8466))+(((-1.0)*x8462*x8466)))))+(IKabs((x8462+x8463))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8468=(gconst142*r21);
IkReal x8469=(cj1*sj2);
IkReal x8470=(cj2*sj1);
IkReal x8471=(gconst143*r20);
CheckValue<IkReal> x8472 = IKatan2WithCheck(IkReal((((r22*x8470))+((r22*x8469)))),IkReal(((((-1.0)*x8470*x8471))+((x8468*x8469))+((x8468*x8470))+(((-1.0)*x8469*x8471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8472.valid){
continue;
}
CheckValue<IkReal> x8473=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8468*x8468)+(((-2.0)*x8468*x8471))+(x8471*x8471))),-1);
if(!x8473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8472.value)+(((1.5707963267949)*(x8473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8474=IKsin(j4);
IkReal x8475=IKcos(j4);
IkReal x8476=(sj1*sj2);
IkReal x8477=(gconst143*r20);
IkReal x8478=((1.0)*x8475);
IkReal x8479=((1.0)*cj1*cj2);
IkReal x8480=((1.0)*x8474);
IkReal x8481=(gconst142*x8474);
IkReal x8482=(gconst143*x8475);
evalcond[0]=((((-1.0)*x8477*x8480))+(((-1.0)*r22*x8478))+((r21*x8481)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8480))+((r11*x8481))+(((-1.0)*r12*x8478)));
evalcond[2]=(((r01*x8481))+(((-1.0)*sj0))+(((-1.0)*r02*x8478))+(((-1.0)*gconst143*r00*x8480)));
evalcond[3]=(((x8475*x8477))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8480))+(((-1.0)*gconst142*r21*x8478)));
evalcond[4]=((((-1.0)*r02*x8480))+(((-1.0)*gconst142*r01*x8478))+((cj0*x8476))+(((-1.0)*cj0*x8479))+((r00*x8482)));
evalcond[5]=(((r10*x8482))+(((-1.0)*sj0*x8479))+(((-1.0)*r12*x8480))+(((-1.0)*gconst142*r11*x8478))+((sj0*x8476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8483=((1.0)*sj0);
IkReal x8484=((1.0)*gconst142);
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8483)))),IkReal(((((-1.0)*cj0*r01*x8484))+((cj0*gconst143*r00))+(((-1.0)*gconst142*r11*x8483))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
CheckValue<IkReal> x8486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8484))+(((-1.0)*gconst143*r21)))),-1);
if(!x8486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8485.value)+(((1.5707963267949)*(x8486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8487=IKsin(j4);
IkReal x8488=IKcos(j4);
IkReal x8489=(sj1*sj2);
IkReal x8490=(gconst143*r20);
IkReal x8491=((1.0)*x8488);
IkReal x8492=((1.0)*cj1*cj2);
IkReal x8493=((1.0)*x8487);
IkReal x8494=(gconst142*x8487);
IkReal x8495=(gconst143*x8488);
evalcond[0]=((((-1.0)*r22*x8491))+(((-1.0)*x8490*x8493))+((r21*x8494)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8493))+(((-1.0)*r12*x8491))+((r11*x8494)));
evalcond[2]=((((-1.0)*r02*x8491))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8493))+((r01*x8494)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8488*x8490))+(((-1.0)*r22*x8493))+(((-1.0)*gconst142*r21*x8491)));
evalcond[4]=(((r00*x8495))+((cj0*x8489))+(((-1.0)*cj0*x8492))+(((-1.0)*r02*x8493))+(((-1.0)*gconst142*r01*x8491)));
evalcond[5]=(((r10*x8495))+(((-1.0)*sj0*x8492))+(((-1.0)*gconst142*r11*x8491))+((sj0*x8489))+(((-1.0)*r12*x8493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8496=((1.0)*gconst143);
CheckValue<IkReal> x8497=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8496)))),-1);
if(!x8497.valid){
continue;
}
CheckValue<IkReal> x8498 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8496))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8497.value)))+(x8498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8499=IKsin(j4);
IkReal x8500=IKcos(j4);
IkReal x8501=(sj1*sj2);
IkReal x8502=(gconst143*r20);
IkReal x8503=((1.0)*x8500);
IkReal x8504=((1.0)*cj1*cj2);
IkReal x8505=((1.0)*x8499);
IkReal x8506=(gconst142*x8499);
IkReal x8507=(gconst143*x8500);
evalcond[0]=(((r21*x8506))+(((-1.0)*r22*x8503))+(((-1.0)*x8502*x8505)));
evalcond[1]=((((-1.0)*gconst143*r10*x8505))+cj0+((r11*x8506))+(((-1.0)*r12*x8503)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8505))+(((-1.0)*r02*x8503))+((r01*x8506)));
evalcond[3]=(((cj2*sj1))+((x8500*x8502))+(((-1.0)*gconst142*r21*x8503))+((cj1*sj2))+(((-1.0)*r22*x8505)));
evalcond[4]=(((cj0*x8501))+(((-1.0)*r02*x8505))+(((-1.0)*gconst142*r01*x8503))+(((-1.0)*cj0*x8504))+((r00*x8507)));
evalcond[5]=(((r10*x8507))+((sj0*x8501))+(((-1.0)*r12*x8505))+(((-1.0)*sj0*x8504))+(((-1.0)*gconst142*r11*x8503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8508=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8508;
j4eval[1]=IKsign(x8508);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8509=((1.0)*cj5);
IkReal x8510=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8509)));
j4eval[0]=x8510;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8509))))));
j4eval[2]=IKsign(x8510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8511=cj5*cj5;
IkReal x8512=r11*r11;
IkReal x8513=(r11*sj5);
IkReal x8514=(cj5*r10);
IkReal x8515=((r12*r12)+(((-2.0)*x8513*x8514))+x8512+(((-1.0)*x8511*x8512))+((x8511*(r10*r10))));
j4eval[0]=x8515;
j4eval[1]=IKsign(x8515);
j4eval[2]=((IKabs(r12))+(IKabs((x8514+(((-1.0)*x8513))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8516=cj5*cj5;
IkReal x8517=r11*r11;
IkReal x8518=(cj5*r10);
IkReal x8519=(r11*sj5);
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal((x8518+(((-1.0)*x8519)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
CheckValue<IkReal> x8521=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8518*x8519))+(r12*r12)+x8517+((x8516*(r10*r10)))+(((-1.0)*x8516*x8517)))),-1);
if(!x8521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8520.value)+(((1.5707963267949)*(x8521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8522=IKsin(j4);
IkReal x8523=IKcos(j4);
IkReal x8524=(cj5*r10);
IkReal x8525=(r01*sj5);
IkReal x8526=(cj5*r00);
IkReal x8527=(cj5*r20);
IkReal x8528=((1.0)*x8523);
IkReal x8529=((1.0)*x8522);
IkReal x8530=(sj5*x8522);
evalcond[0]=(((r21*x8530))+(((-1.0)*r22*x8528))+(((-1.0)*x8527*x8529)));
evalcond[1]=(((x8522*x8525))+(((-1.0)*x8526*x8529))+(((-1.0)*r02*x8528)));
evalcond[2]=((((-1.0)*r11*sj5*x8528))+((x8523*x8524))+(((-1.0)*r12*x8529)));
evalcond[3]=((1.0)+(((-1.0)*x8524*x8529))+(((-1.0)*r12*x8528))+((r11*x8530)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8528))+((cj1*sj2))+(((-1.0)*r22*x8529))+((x8523*x8527)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8529))+(((-1.0)*x8525*x8528))+((x8523*x8526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8531=((1.0)*cj5);
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8531))+(((-1.0)*r00*sj5)))),-1);
if(!x8532.valid){
continue;
}
CheckValue<IkReal> x8533 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8532.value)))+(x8533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8534=IKsin(j4);
IkReal x8535=IKcos(j4);
IkReal x8536=(cj5*r10);
IkReal x8537=(r01*sj5);
IkReal x8538=(cj5*r00);
IkReal x8539=(cj5*r20);
IkReal x8540=((1.0)*x8535);
IkReal x8541=((1.0)*x8534);
IkReal x8542=(sj5*x8534);
evalcond[0]=((((-1.0)*x8539*x8541))+(((-1.0)*r22*x8540))+((r21*x8542)));
evalcond[1]=((((-1.0)*r02*x8540))+((x8534*x8537))+(((-1.0)*x8538*x8541)));
evalcond[2]=(((x8535*x8536))+(((-1.0)*r11*sj5*x8540))+(((-1.0)*r12*x8541)));
evalcond[3]=((1.0)+(((-1.0)*x8536*x8541))+(((-1.0)*r12*x8540))+((r11*x8542)));
evalcond[4]=(((cj2*sj1))+((x8535*x8539))+((cj1*sj2))+(((-1.0)*r22*x8541))+(((-1.0)*r21*sj5*x8540)));
evalcond[5]=((((-1.0)*r02*x8541))+((x8535*x8538))+(((-1.0)*x8537*x8540))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8543=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8543.valid){
continue;
}
CheckValue<IkReal> x8544 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8543.value)))+(x8544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8545=IKsin(j4);
IkReal x8546=IKcos(j4);
IkReal x8547=(cj5*r10);
IkReal x8548=(r01*sj5);
IkReal x8549=(cj5*r00);
IkReal x8550=(cj5*r20);
IkReal x8551=((1.0)*x8546);
IkReal x8552=((1.0)*x8545);
IkReal x8553=(sj5*x8545);
evalcond[0]=(((r21*x8553))+(((-1.0)*r22*x8551))+(((-1.0)*x8550*x8552)));
evalcond[1]=((((-1.0)*x8549*x8552))+((x8545*x8548))+(((-1.0)*r02*x8551)));
evalcond[2]=((((-1.0)*r12*x8552))+((x8546*x8547))+(((-1.0)*r11*sj5*x8551)));
evalcond[3]=((1.0)+(((-1.0)*x8547*x8552))+(((-1.0)*r12*x8551))+((r11*x8553)));
evalcond[4]=(((cj2*sj1))+((x8546*x8550))+(((-1.0)*r22*x8552))+(((-1.0)*r21*sj5*x8551))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8548*x8551))+((x8546*x8549))+(((-1.0)*r02*x8552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8554=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8554;
j4eval[1]=IKsign(x8554);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8555=((1.0)*cj5);
IkReal x8556=((((-1.0)*r21*x8555))+(((-1.0)*r20*sj5)));
j4eval[0]=x8556;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8555))))));
j4eval[2]=IKsign(x8556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8557=cj5*cj5;
IkReal x8558=r11*r11;
IkReal x8559=(cj5*r10);
IkReal x8560=(r11*sj5);
IkReal x8561=((((2.0)*x8559*x8560))+(((-1.0)*x8557*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8557*x8558))+(((-1.0)*x8558)));
j4eval[0]=x8561;
j4eval[1]=((IKabs(r12))+(IKabs((x8559+(((-1.0)*x8560))))));
j4eval[2]=IKsign(x8561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8562=cj5*cj5;
IkReal x8563=r11*r11;
IkReal x8564=(cj5*r10);
IkReal x8565=(r11*sj5);
CheckValue<IkReal> x8566 = IKatan2WithCheck(IkReal((x8564+(((-1.0)*x8565)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8566.valid){
continue;
}
CheckValue<IkReal> x8567=IKPowWithIntegerCheck(IKsign((((x8562*x8563))+(((2.0)*x8564*x8565))+(((-1.0)*(r12*r12)))+(((-1.0)*x8563))+(((-1.0)*x8562*(r10*r10))))),-1);
if(!x8567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8566.value)+(((1.5707963267949)*(x8567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8568=IKsin(j4);
IkReal x8569=IKcos(j4);
IkReal x8570=(cj5*r10);
IkReal x8571=(r01*sj5);
IkReal x8572=(cj5*r00);
IkReal x8573=(cj5*r20);
IkReal x8574=((1.0)*x8569);
IkReal x8575=((1.0)*x8568);
IkReal x8576=(sj5*x8568);
evalcond[0]=(((r21*x8576))+(((-1.0)*x8573*x8575))+(((-1.0)*r22*x8574)));
evalcond[1]=((((-1.0)*x8572*x8575))+(((-1.0)*r02*x8574))+((x8568*x8571)));
evalcond[2]=((((-1.0)*r11*sj5*x8574))+(((-1.0)*r12*x8575))+((x8569*x8570)));
evalcond[3]=((-1.0)+((r11*x8576))+(((-1.0)*x8570*x8575))+(((-1.0)*r12*x8574)));
evalcond[4]=((((-1.0)*r21*sj5*x8574))+((cj2*sj1))+((cj1*sj2))+((x8569*x8573))+(((-1.0)*r22*x8575)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8571*x8574))+(((-1.0)*r02*x8575))+((cj1*cj2))+((x8569*x8572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8577=((1.0)*cj5);
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8577))+(((-1.0)*r20*sj5)))),-1);
if(!x8578.valid){
continue;
}
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8578.value)))+(x8579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8580=IKsin(j4);
IkReal x8581=IKcos(j4);
IkReal x8582=(cj5*r10);
IkReal x8583=(r01*sj5);
IkReal x8584=(cj5*r00);
IkReal x8585=(cj5*r20);
IkReal x8586=((1.0)*x8581);
IkReal x8587=((1.0)*x8580);
IkReal x8588=(sj5*x8580);
evalcond[0]=((((-1.0)*r22*x8586))+(((-1.0)*x8585*x8587))+((r21*x8588)));
evalcond[1]=((((-1.0)*x8584*x8587))+(((-1.0)*r02*x8586))+((x8580*x8583)));
evalcond[2]=(((x8581*x8582))+(((-1.0)*r12*x8587))+(((-1.0)*r11*sj5*x8586)));
evalcond[3]=((-1.0)+(((-1.0)*x8582*x8587))+((r11*x8588))+(((-1.0)*r12*x8586)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8587))+(((-1.0)*r21*sj5*x8586))+((cj1*sj2))+((x8581*x8585)));
evalcond[5]=((((-1.0)*x8583*x8586))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8587))+((x8581*x8584))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8589 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8589.valid){
continue;
}
CheckValue<IkReal> x8590=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8589.value)+(((1.5707963267949)*(x8590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8591=IKsin(j4);
IkReal x8592=IKcos(j4);
IkReal x8593=(cj5*r10);
IkReal x8594=(r01*sj5);
IkReal x8595=(cj5*r00);
IkReal x8596=(cj5*r20);
IkReal x8597=((1.0)*x8592);
IkReal x8598=((1.0)*x8591);
IkReal x8599=(sj5*x8591);
evalcond[0]=((((-1.0)*r22*x8597))+(((-1.0)*x8596*x8598))+((r21*x8599)));
evalcond[1]=((((-1.0)*r02*x8597))+((x8591*x8594))+(((-1.0)*x8595*x8598)));
evalcond[2]=((((-1.0)*r11*sj5*x8597))+(((-1.0)*r12*x8598))+((x8592*x8593)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8597))+(((-1.0)*x8593*x8598))+((r11*x8599)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8598))+((cj1*sj2))+(((-1.0)*r21*sj5*x8597))+((x8592*x8596)));
evalcond[5]=((((-1.0)*r02*x8598))+(((-1.0)*sj1*sj2))+((x8592*x8595))+((cj1*cj2))+(((-1.0)*x8594*x8597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8600=((-1.0)*r00);
IkReal x8602 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8602)==0){
continue;
}
IkReal x8601=pow(x8602,-0.5);
CheckValue<IkReal> x8603 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8600),IKFAST_ATAN2_MAGTHRESH);
if(!x8603.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8603.value));
IkReal gconst145=(r01*x8601);
IkReal gconst146=(x8600*x8601);
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8605=((-1.0)*r00);
IkReal x8606=x8601;
CheckValue<IkReal> x8608 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8605),IKFAST_ATAN2_MAGTHRESH);
if(!x8608.valid){
continue;
}
IkReal x8607=((-1.0)*(x8608.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8607;
IkReal gconst144=x8607;
IkReal gconst145=(r01*x8606);
IkReal gconst146=(x8605*x8606);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8609=((1.0)*sj0);
IkReal x8610=((1.0)*gconst145);
CheckValue<IkReal> x8611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8610))+(((-1.0)*gconst146*r21)))),-1);
if(!x8611.valid){
continue;
}
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8609))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8610))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8611.value)))+(x8612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8613=IKsin(j4);
IkReal x8614=IKcos(j4);
IkReal x8615=(gconst146*r10);
IkReal x8616=(sj1*sj2);
IkReal x8617=(gconst146*r20);
IkReal x8618=(gconst146*r00);
IkReal x8619=((1.0)*x8614);
IkReal x8620=((1.0)*x8613);
IkReal x8621=(gconst145*x8613);
IkReal x8622=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8621))+(((-1.0)*r22*x8619))+(((-1.0)*x8617*x8620)));
evalcond[1]=(cj0+(((-1.0)*r12*x8619))+(((-1.0)*x8615*x8620))+((r11*x8621)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8618*x8620))+(((-1.0)*r02*x8619))+((r01*x8621)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8619))+((cj1*sj2))+((x8614*x8617))+(((-1.0)*r22*x8620)));
evalcond[4]=((((-1.0)*gconst145*r01*x8619))+((x8614*x8618))+(((-1.0)*cj0*x8622))+((cj0*x8616))+(((-1.0)*r02*x8620)));
evalcond[5]=((((-1.0)*r12*x8620))+(((-1.0)*gconst145*r11*x8619))+((x8614*x8615))+(((-1.0)*sj0*x8622))+((sj0*x8616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8623=((1.0)*gconst146);
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8623))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
CheckValue<IkReal> x8625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8623))+(((-1.0)*gconst145*r10)))),-1);
if(!x8625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8624.value)+(((1.5707963267949)*(x8625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8626=IKsin(j4);
IkReal x8627=IKcos(j4);
IkReal x8628=(gconst146*r10);
IkReal x8629=(sj1*sj2);
IkReal x8630=(gconst146*r20);
IkReal x8631=(gconst146*r00);
IkReal x8632=((1.0)*x8627);
IkReal x8633=((1.0)*x8626);
IkReal x8634=(gconst145*x8626);
IkReal x8635=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8634))+(((-1.0)*r22*x8632))+(((-1.0)*x8630*x8633)));
evalcond[1]=((((-1.0)*x8628*x8633))+cj0+(((-1.0)*r12*x8632))+((r11*x8634)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8634))+(((-1.0)*r02*x8632))+(((-1.0)*x8631*x8633)));
evalcond[3]=(((cj2*sj1))+((x8627*x8630))+(((-1.0)*gconst145*r21*x8632))+((cj1*sj2))+(((-1.0)*r22*x8633)));
evalcond[4]=((((-1.0)*gconst145*r01*x8632))+((x8627*x8631))+((cj0*x8629))+(((-1.0)*cj0*x8635))+(((-1.0)*r02*x8633)));
evalcond[5]=(((x8627*x8628))+(((-1.0)*r12*x8633))+(((-1.0)*gconst145*r11*x8632))+((sj0*x8629))+(((-1.0)*sj0*x8635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8636=((-1.0)*r01);
IkReal x8638 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8638)==0){
continue;
}
IkReal x8637=pow(x8638,-0.5);
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(x8636),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8639.value))));
IkReal gconst148=(x8636*x8637);
IkReal gconst149=((1.0)*r00*x8637);
CheckValue<IkReal> x8640 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8640.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8640.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8641=((-1.0)*r01);
CheckValue<IkReal> x8644 = IKatan2WithCheck(IkReal(x8641),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8644.valid){
continue;
}
IkReal x8642=((1.0)*(x8644.value));
IkReal x8643=x8637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8642)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8642)));
IkReal gconst148=(x8641*x8643);
IkReal gconst149=((1.0)*r00*x8643);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8645=((-1.0)*r01);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(x8645),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
IkReal x8646=((1.0)*(x8648.value));
IkReal x8647=x8637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8646)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8646)));
IkReal gconst148=(x8645*x8647);
IkReal gconst149=((1.0)*r00*x8647);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8649=((-1.0)*r01);
CheckValue<IkReal> x8652 = IKatan2WithCheck(IkReal(x8649),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8652.valid){
continue;
}
IkReal x8650=((1.0)*(x8652.value));
IkReal x8651=x8637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8650)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8650)));
IkReal gconst148=(x8649*x8651);
IkReal gconst149=((1.0)*r00*x8651);
IkReal x8653=r02*r02;
IkReal x8654=(r12*sj0);
IkReal x8655=((1.0)*cj0);
IkReal x8656=x8637;
j4eval[0]=((IKabs(((((-1.0)*x8654))+(((-1.0)*r02*x8655)))))+(IKabs(((((-1.0)*x8655*x8656))+((cj0*x8653*x8656))+((r02*x8654*x8656))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8657=((1.0)*sj0);
IkReal x8658=((1.0)*gconst148);
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8657))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8658))+(((-1.0)*gconst148*r11*x8657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
CheckValue<IkReal> x8660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8658))+(((-1.0)*gconst149*r21)))),-1);
if(!x8660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8659.value)+(((1.5707963267949)*(x8660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8661=IKsin(j4);
IkReal x8662=IKcos(j4);
IkReal x8663=(gconst148*r11);
IkReal x8664=(sj1*sj2);
IkReal x8665=((1.0)*x8662);
IkReal x8666=(gconst149*x8662);
IkReal x8667=(gconst148*x8661);
IkReal x8668=((1.0)*cj1*cj2);
IkReal x8669=((1.0)*x8661);
evalcond[0]=((((-1.0)*r22*x8665))+(((-1.0)*gconst149*r20*x8669))+((r21*x8667)));
evalcond[1]=(cj0+(((-1.0)*r12*x8665))+((x8661*x8663))+(((-1.0)*gconst149*r10*x8669)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8665))+((r01*x8667))+(((-1.0)*gconst149*r00*x8669)));
evalcond[3]=(((cj2*sj1))+((r20*x8666))+((cj1*sj2))+(((-1.0)*r22*x8669))+(((-1.0)*gconst148*r21*x8665)));
evalcond[4]=(((cj0*x8664))+(((-1.0)*cj0*x8668))+(((-1.0)*r02*x8669))+((r00*x8666))+(((-1.0)*gconst148*r01*x8665)));
evalcond[5]=((((-1.0)*sj0*x8668))+((sj0*x8664))+(((-1.0)*r12*x8669))+((r10*x8666))+(((-1.0)*x8663*x8665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8670=((1.0)*gconst149);
CheckValue<IkReal> x8671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8670))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8671.valid){
continue;
}
CheckValue<IkReal> x8672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8670))+(((-1.0)*gconst148*r10)))),-1);
if(!x8672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8671.value)+(((1.5707963267949)*(x8672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8673=IKsin(j4);
IkReal x8674=IKcos(j4);
IkReal x8675=(gconst148*r11);
IkReal x8676=(sj1*sj2);
IkReal x8677=((1.0)*x8674);
IkReal x8678=(gconst149*x8674);
IkReal x8679=(gconst148*x8673);
IkReal x8680=((1.0)*cj1*cj2);
IkReal x8681=((1.0)*x8673);
evalcond[0]=((((-1.0)*r22*x8677))+(((-1.0)*gconst149*r20*x8681))+((r21*x8679)));
evalcond[1]=(cj0+(((-1.0)*r12*x8677))+((x8673*x8675))+(((-1.0)*gconst149*r10*x8681)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8677))+((r01*x8679))+(((-1.0)*gconst149*r00*x8681)));
evalcond[3]=(((r20*x8678))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8681))+(((-1.0)*gconst148*r21*x8677)));
evalcond[4]=((((-1.0)*gconst148*r01*x8677))+(((-1.0)*cj0*x8680))+((cj0*x8676))+(((-1.0)*r02*x8681))+((r00*x8678)));
evalcond[5]=((((-1.0)*r12*x8681))+(((-1.0)*x8675*x8677))+((r10*x8678))+(((-1.0)*sj0*x8680))+((sj0*x8676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8682=((1.0)*gconst149);
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8682))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
CheckValue<IkReal> x8684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8682))+(((-1.0)*gconst148*r00)))),-1);
if(!x8684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8683.value)+(((1.5707963267949)*(x8684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8685=IKsin(j4);
IkReal x8686=IKcos(j4);
IkReal x8687=(gconst148*r11);
IkReal x8688=(sj1*sj2);
IkReal x8689=((1.0)*x8686);
IkReal x8690=(gconst149*x8686);
IkReal x8691=(gconst148*x8685);
IkReal x8692=((1.0)*cj1*cj2);
IkReal x8693=((1.0)*x8685);
evalcond[0]=(((r21*x8691))+(((-1.0)*r22*x8689))+(((-1.0)*gconst149*r20*x8693)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8693))+(((-1.0)*r12*x8689))+((x8685*x8687)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8689))+((r01*x8691))+(((-1.0)*gconst149*r00*x8693)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8689))+((cj1*sj2))+((r20*x8690))+(((-1.0)*r22*x8693)));
evalcond[4]=((((-1.0)*cj0*x8692))+((r00*x8690))+(((-1.0)*r02*x8693))+(((-1.0)*gconst148*r01*x8689))+((cj0*x8688)));
evalcond[5]=((((-1.0)*sj0*x8692))+((r10*x8690))+(((-1.0)*r12*x8693))+(((-1.0)*x8687*x8689))+((sj0*x8688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8694=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8694;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8695=((1.0)*cj5);
IkReal x8696=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8695)));
j4eval[0]=x8696;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8695))))));
j4eval[2]=IKsign(x8696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8697=cj5*cj5;
IkReal x8698=r01*r01;
IkReal x8699=(r01*sj5);
IkReal x8700=(cj5*r00);
IkReal x8701=((((-1.0)*x8698))+(((-1.0)*(r02*r02)))+(((2.0)*x8699*x8700))+((x8697*x8698))+(((-1.0)*x8697*(r00*r00))));
j4eval[0]=x8701;
j4eval[1]=IKsign(x8701);
j4eval[2]=((IKabs(r02))+(IKabs((x8700+(((-1.0)*x8699))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8702=cj5*cj5;
IkReal x8703=r01*r01;
IkReal x8704=(r01*sj5);
IkReal x8705=(cj5*r00);
CheckValue<IkReal> x8706=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x8704*x8705))+(((-1.0)*x8703))+(((-1.0)*x8702*(r00*r00)))+((x8702*x8703)))),-1);
if(!x8706.valid){
continue;
}
CheckValue<IkReal> x8707 = IKatan2WithCheck(IkReal((x8705+(((-1.0)*x8704)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8706.value)))+(x8707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8708=IKsin(j4);
IkReal x8709=IKcos(j4);
IkReal x8710=(cj5*r10);
IkReal x8711=(r01*sj5);
IkReal x8712=(cj5*r00);
IkReal x8713=(cj5*r20);
IkReal x8714=((1.0)*x8709);
IkReal x8715=((1.0)*x8708);
IkReal x8716=(sj5*x8708);
evalcond[0]=((((-1.0)*x8713*x8715))+(((-1.0)*r22*x8714))+((r21*x8716)));
evalcond[1]=((((-1.0)*r12*x8714))+(((-1.0)*x8710*x8715))+((r11*x8716)));
evalcond[2]=(((x8709*x8712))+(((-1.0)*r02*x8715))+(((-1.0)*x8711*x8714)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8714))+((x8708*x8711))+(((-1.0)*x8712*x8715)));
evalcond[4]=(((cj2*sj1))+((x8709*x8713))+((cj1*sj2))+(((-1.0)*r22*x8715))+(((-1.0)*r21*sj5*x8714)));
evalcond[5]=(((x8709*x8710))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8715))+(((-1.0)*r11*sj5*x8714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8717=((1.0)*cj5);
CheckValue<IkReal> x8718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8717)))),-1);
if(!x8718.valid){
continue;
}
CheckValue<IkReal> x8719 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8717))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8718.value)))+(x8719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8720=IKsin(j4);
IkReal x8721=IKcos(j4);
IkReal x8722=(cj5*r10);
IkReal x8723=(r01*sj5);
IkReal x8724=(cj5*r00);
IkReal x8725=(cj5*r20);
IkReal x8726=((1.0)*x8721);
IkReal x8727=((1.0)*x8720);
IkReal x8728=(sj5*x8720);
evalcond[0]=(((r21*x8728))+(((-1.0)*r22*x8726))+(((-1.0)*x8725*x8727)));
evalcond[1]=(((r11*x8728))+(((-1.0)*x8722*x8727))+(((-1.0)*r12*x8726)));
evalcond[2]=((((-1.0)*x8723*x8726))+((x8721*x8724))+(((-1.0)*r02*x8727)));
evalcond[3]=((-1.0)+(((-1.0)*x8724*x8727))+((x8720*x8723))+(((-1.0)*r02*x8726)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8721*x8725))+(((-1.0)*r21*sj5*x8726))+(((-1.0)*r22*x8727)));
evalcond[5]=((((-1.0)*r11*sj5*x8726))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8721*x8722))+(((-1.0)*r12*x8727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8729.value)))+(x8730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKsin(j4);
IkReal x8732=IKcos(j4);
IkReal x8733=(cj5*r10);
IkReal x8734=(r01*sj5);
IkReal x8735=(cj5*r00);
IkReal x8736=(cj5*r20);
IkReal x8737=((1.0)*x8732);
IkReal x8738=((1.0)*x8731);
IkReal x8739=(sj5*x8731);
evalcond[0]=(((r21*x8739))+(((-1.0)*x8736*x8738))+(((-1.0)*r22*x8737)));
evalcond[1]=(((r11*x8739))+(((-1.0)*x8733*x8738))+(((-1.0)*r12*x8737)));
evalcond[2]=(((x8732*x8735))+(((-1.0)*x8734*x8737))+(((-1.0)*r02*x8738)));
evalcond[3]=((-1.0)+((x8731*x8734))+(((-1.0)*x8735*x8738))+(((-1.0)*r02*x8737)));
evalcond[4]=(((cj2*sj1))+((x8732*x8736))+((cj1*sj2))+(((-1.0)*r21*sj5*x8737))+(((-1.0)*r22*x8738)));
evalcond[5]=((((-1.0)*r11*sj5*x8737))+((x8732*x8733))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8740=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8740;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8741=((1.0)*cj5);
IkReal x8742=((((-1.0)*r21*x8741))+(((-1.0)*r20*sj5)));
j4eval[0]=x8742;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8741))+((r11*sj5))))));
j4eval[2]=IKsign(x8742);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8743=cj5*cj5;
IkReal x8744=r01*r01;
IkReal x8745=(cj5*r00);
IkReal x8746=(r01*sj5);
IkReal x8747=((((-1.0)*x8743*x8744))+x8744+((x8743*(r00*r00)))+(((-2.0)*x8745*x8746))+(r02*r02));
j4eval[0]=x8747;
j4eval[1]=((IKabs(r02))+(IKabs((x8745+(((-1.0)*x8746))))));
j4eval[2]=IKsign(x8747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8748=cj5*cj5;
IkReal x8749=r01*r01;
IkReal x8750=(r01*sj5);
IkReal x8751=(cj5*r00);
CheckValue<IkReal> x8752 = IKatan2WithCheck(IkReal((x8751+(((-1.0)*x8750)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8752.valid){
continue;
}
CheckValue<IkReal> x8753=IKPowWithIntegerCheck(IKsign((x8749+((x8748*(r00*r00)))+(((-1.0)*x8748*x8749))+(r02*r02)+(((-2.0)*x8750*x8751)))),-1);
if(!x8753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8752.value)+(((1.5707963267949)*(x8753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8754=IKsin(j4);
IkReal x8755=IKcos(j4);
IkReal x8756=(cj5*r10);
IkReal x8757=(r01*sj5);
IkReal x8758=(cj5*r00);
IkReal x8759=(cj5*r20);
IkReal x8760=((1.0)*x8755);
IkReal x8761=((1.0)*x8754);
IkReal x8762=(sj5*x8754);
evalcond[0]=((((-1.0)*x8759*x8761))+(((-1.0)*r22*x8760))+((r21*x8762)));
evalcond[1]=((((-1.0)*x8756*x8761))+(((-1.0)*r12*x8760))+((r11*x8762)));
evalcond[2]=((((-1.0)*x8757*x8760))+(((-1.0)*r02*x8761))+((x8755*x8758)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8760))+(((-1.0)*x8758*x8761))+((x8754*x8757)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8755*x8759))+(((-1.0)*r22*x8761))+(((-1.0)*r21*sj5*x8760)));
evalcond[5]=((((-1.0)*r11*sj5*x8760))+(((-1.0)*sj1*sj2))+((x8755*x8756))+(((-1.0)*r12*x8761))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8763=((1.0)*cj5);
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8763))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
CheckValue<IkReal> x8765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8763))+(((-1.0)*r20*sj5)))),-1);
if(!x8765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8764.value)+(((1.5707963267949)*(x8765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(cj5*r10);
IkReal x8769=(r01*sj5);
IkReal x8770=(cj5*r00);
IkReal x8771=(cj5*r20);
IkReal x8772=((1.0)*x8767);
IkReal x8773=((1.0)*x8766);
IkReal x8774=(sj5*x8766);
evalcond[0]=((((-1.0)*r22*x8772))+((r21*x8774))+(((-1.0)*x8771*x8773)));
evalcond[1]=((((-1.0)*x8768*x8773))+(((-1.0)*r12*x8772))+((r11*x8774)));
evalcond[2]=((((-1.0)*r02*x8773))+((x8767*x8770))+(((-1.0)*x8769*x8772)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8772))+((x8766*x8769))+(((-1.0)*x8770*x8773)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8767*x8771))+(((-1.0)*r22*x8773))+(((-1.0)*r21*sj5*x8772)));
evalcond[5]=((((-1.0)*r11*sj5*x8772))+(((-1.0)*sj1*sj2))+((x8767*x8768))+(((-1.0)*r12*x8773))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8775 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8775.valid){
continue;
}
CheckValue<IkReal> x8776=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8775.value)+(((1.5707963267949)*(x8776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8777=IKsin(j4);
IkReal x8778=IKcos(j4);
IkReal x8779=(cj5*r10);
IkReal x8780=(r01*sj5);
IkReal x8781=(cj5*r00);
IkReal x8782=(cj5*r20);
IkReal x8783=((1.0)*x8778);
IkReal x8784=((1.0)*x8777);
IkReal x8785=(sj5*x8777);
evalcond[0]=(((r21*x8785))+(((-1.0)*x8782*x8784))+(((-1.0)*r22*x8783)));
evalcond[1]=(((r11*x8785))+(((-1.0)*x8779*x8784))+(((-1.0)*r12*x8783)));
evalcond[2]=((((-1.0)*x8780*x8783))+((x8778*x8781))+(((-1.0)*r02*x8784)));
evalcond[3]=((1.0)+((x8777*x8780))+(((-1.0)*x8781*x8784))+(((-1.0)*r02*x8783)));
evalcond[4]=(((cj2*sj1))+((x8778*x8782))+((cj1*sj2))+(((-1.0)*r22*x8784))+(((-1.0)*r21*sj5*x8783)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x8778*x8779))+(((-1.0)*r12*x8784))+(((-1.0)*r11*sj5*x8783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8786=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8786);
rxp1_1=(px*r21);
rxp1_2=(r11*x8786);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8787=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8787);
rxp1_1=(px*r21);
rxp1_2=(r11*x8787);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8788=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8788);
rxp1_1=(px*r21);
rxp1_2=(r11*x8788);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8791=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8791.valid){
continue;
}
IkReal x8789=x8791.value;
IkReal x8790=(sj0*x8789);
cj4array[0]=((((-1.0)*sj1*sj2*x8790))+((cj1*cj2*x8790)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8792=IKsin(j4);
IkReal x8793=IKcos(j4);
IkReal x8794=(r21*sj5);
IkReal x8795=(cj5*r20);
IkReal x8796=((1.0)*x8792);
IkReal x8797=((1.0)*x8793);
evalcond[0]=((-1.0)*r02*x8792);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8797)));
evalcond[2]=((((-1.0)*x8795*x8796))+((x8792*x8794)));
evalcond[3]=(((r11*sj5*x8792))+(((-1.0)*cj5*r10*x8796)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8794*x8797))+((x8793*x8795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8800=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8800.valid){
continue;
}
IkReal x8798=x8800.value;
IkReal x8799=((1.0)*x8798);
cj4array[0]=((((-1.0)*cj1*sj2*x8799))+(((-1.0)*cj2*sj1*x8799)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8801=IKsin(j4);
IkReal x8802=IKcos(j4);
IkReal x8803=(r11*sj5);
IkReal x8804=((1.0)*sj0);
IkReal x8805=((1.0)*x8802);
IkReal x8806=((1.0)*cj5*x8801);
evalcond[0]=((-1.0)*r02*x8801);
evalcond[1]=((((-1.0)*r02*x8805))+(((-1.0)*x8804)));
evalcond[2]=((((-1.0)*r20*x8806))+((r21*sj5*x8801)));
evalcond[3]=((((-1.0)*r10*x8806))+((x8801*x8803)));
evalcond[4]=((((-1.0)*cj1*cj2*x8804))+(((-1.0)*x8803*x8805))+((sj0*sj1*sj2))+((cj5*r10*x8802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8807=IKPowWithIntegerCheck(r02,-1);
if(!x8807.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8807.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8808=IKsin(j4);
IkReal x8809=IKcos(j4);
IkReal x8810=(cj5*x8809);
IkReal x8811=(sj5*x8808);
IkReal x8812=((1.0)*sj5*x8809);
IkReal x8813=((1.0)*cj5*x8808);
evalcond[0]=((-1.0)*r02*x8808);
evalcond[1]=(((r21*x8811))+(((-1.0)*r20*x8813)));
evalcond[2]=((((-1.0)*r10*x8813))+((r11*x8811)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8812))+((cj1*sj2))+((r20*x8810)));
evalcond[4]=((((-1.0)*r11*x8812))+((r10*x8810))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8814=((1.0)*sj0);
IkReal x8815=((1.0)*cj0);
CheckValue<IkReal> x8816 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8814))+(((-1.0)*r02*x8815)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8815))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8816.valid){
continue;
}
CheckValue<IkReal> x8817=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8816.value)+(((1.5707963267949)*(x8817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8818=IKsin(j4);
IkReal x8819=IKcos(j4);
IkReal x8820=(cj5*r10);
IkReal x8821=(sj1*sj2);
IkReal x8822=(r01*sj5);
IkReal x8823=(cj5*r00);
IkReal x8824=(cj5*r20);
IkReal x8825=((1.0)*x8819);
IkReal x8826=((1.0)*cj1*cj2);
IkReal x8827=((1.0)*x8818);
IkReal x8828=(sj5*x8818);
evalcond[0]=(((r21*x8828))+(((-1.0)*x8824*x8827))+(((-1.0)*r22*x8825)));
evalcond[1]=((((-1.0)*r12*x8825))+cj0+((r11*x8828))+(((-1.0)*x8820*x8827)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8825))+((x8818*x8822))+(((-1.0)*x8823*x8827)));
evalcond[3]=(((cj2*sj1))+((x8819*x8824))+((cj1*sj2))+(((-1.0)*r21*sj5*x8825))+(((-1.0)*r22*x8827)));
evalcond[4]=(((x8819*x8823))+(((-1.0)*r02*x8827))+(((-1.0)*x8822*x8825))+(((-1.0)*cj0*x8826))+((cj0*x8821)));
evalcond[5]=((((-1.0)*r11*sj5*x8825))+((x8819*x8820))+(((-1.0)*r12*x8827))+(((-1.0)*sj0*x8826))+((sj0*x8821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8829=((1.0)*cj5);
CheckValue<IkReal> x8830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8829))+(((-1.0)*r10*sj5)))),-1);
if(!x8830.valid){
continue;
}
CheckValue<IkReal> x8831 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8829))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8830.value)))+(x8831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8832=IKsin(j4);
IkReal x8833=IKcos(j4);
IkReal x8834=(cj5*r10);
IkReal x8835=(sj1*sj2);
IkReal x8836=(r01*sj5);
IkReal x8837=(cj5*r00);
IkReal x8838=(cj5*r20);
IkReal x8839=((1.0)*x8833);
IkReal x8840=((1.0)*cj1*cj2);
IkReal x8841=((1.0)*x8832);
IkReal x8842=(sj5*x8832);
evalcond[0]=(((r21*x8842))+(((-1.0)*x8838*x8841))+(((-1.0)*r22*x8839)));
evalcond[1]=((((-1.0)*x8834*x8841))+cj0+((r11*x8842))+(((-1.0)*r12*x8839)));
evalcond[2]=((((-1.0)*sj0))+((x8832*x8836))+(((-1.0)*r02*x8839))+(((-1.0)*x8837*x8841)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8833*x8838))+(((-1.0)*r21*sj5*x8839))+(((-1.0)*r22*x8841)));
evalcond[4]=((((-1.0)*cj0*x8840))+((cj0*x8835))+((x8833*x8837))+(((-1.0)*r02*x8841))+(((-1.0)*x8836*x8839)));
evalcond[5]=(((x8833*x8834))+(((-1.0)*sj0*x8840))+((sj0*x8835))+(((-1.0)*r11*sj5*x8839))+(((-1.0)*r12*x8841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8843=((1.0)*cj5);
CheckValue<IkReal> x8844 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8844.valid){
continue;
}
CheckValue<IkReal> x8845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8843)))),-1);
if(!x8845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8844.value)+(((1.5707963267949)*(x8845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8846=IKsin(j4);
IkReal x8847=IKcos(j4);
IkReal x8848=(cj5*r10);
IkReal x8849=(sj1*sj2);
IkReal x8850=(r01*sj5);
IkReal x8851=(cj5*r00);
IkReal x8852=(cj5*r20);
IkReal x8853=((1.0)*x8847);
IkReal x8854=((1.0)*cj1*cj2);
IkReal x8855=((1.0)*x8846);
IkReal x8856=(sj5*x8846);
evalcond[0]=((((-1.0)*x8852*x8855))+(((-1.0)*r22*x8853))+((r21*x8856)));
evalcond[1]=(cj0+(((-1.0)*x8848*x8855))+(((-1.0)*r12*x8853))+((r11*x8856)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8851*x8855))+((x8846*x8850))+(((-1.0)*r02*x8853)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8855))+((cj1*sj2))+((x8847*x8852))+(((-1.0)*r21*sj5*x8853)));
evalcond[4]=(((cj0*x8849))+(((-1.0)*x8850*x8853))+((x8847*x8851))+(((-1.0)*cj0*x8854))+(((-1.0)*r02*x8855)));
evalcond[5]=((((-1.0)*r12*x8855))+(((-1.0)*r11*sj5*x8853))+((sj0*x8849))+((x8847*x8848))+(((-1.0)*sj0*x8854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8857=cj1*cj1;
IkReal x8858=cj2*cj2;
IkReal x8859=(r10*sj5);
IkReal x8860=(cj1*px);
IkReal x8861=((98000.0)*cj2);
IkReal x8862=(r00*sj5);
IkReal x8863=(cj5*r11);
IkReal x8864=(cj5*r01);
IkReal x8865=((10625.0)*cj1);
IkReal x8866=(sj1*sj2);
IkReal x8867=(cj1*py);
IkReal x8868=((9800.0)*x8866);
IkReal x8869=((9800.0)*cj1*cj2);
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal(((((-1.0)*x8863*x8868))+(((-98000.0)*py*x8866))+((x8859*x8869))+((x8859*x8865))+((x8861*x8867))+((x8863*x8869))+((x8863*x8865))+(((-3350.0)*x8862))+(((-3350.0)*x8864))+(((-33500.0)*px))+(((106250.0)*x8867))+(((-1.0)*x8859*x8868)))),IkReal((((x8860*x8861))+(((3350.0)*x8859))+(((3350.0)*x8863))+((x8864*x8865))+((x8864*x8869))+(((-1.0)*x8864*x8868))+((x8862*x8869))+((x8862*x8865))+(((33500.0)*py))+(((-98000.0)*px*x8866))+(((106250.0)*x8860))+(((-1.0)*x8862*x8868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
CheckValue<IkReal> x8871=IKPowWithIntegerCheck(IKsign(((42905.0)+(((76832.0)*x8857*x8858))+(((6740.25)*x8857))+(((-83300.0)*cj1*x8866))+(((83300.0)*cj2*x8857))+(((-38416.0)*x8858))+(((-76832.0)*cj1*cj2*x8866)))),-1);
if(!x8871.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8870.value)+(((1.5707963267949)*(x8871.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8872=IKcos(j0);
IkReal x8873=IKsin(j0);
IkReal x8874=((0.1)*sj5);
IkReal x8875=((0.425)*cj1);
IkReal x8876=((0.1)*cj5);
IkReal x8877=((0.392)*cj1*cj2);
IkReal x8878=((0.392)*sj1*sj2);
evalcond[0]=((((-1.0)*r01*x8876))+(((-1.0)*x8872*x8878))+((x8872*x8875))+((x8872*x8877))+(((-1.0)*px))+(((-0.134)*x8873))+(((-1.0)*r00*x8874)));
evalcond[1]=((((-1.0)*x8873*x8878))+((x8873*x8877))+((x8873*x8875))+(((-1.0)*py))+(((0.134)*x8872))+(((-1.0)*r10*x8874))+(((-1.0)*r11*x8876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8879=((1.0)*cj5);
IkReal x8880=((((-1.0)*r01*x8879))+(((-1.0)*r00*sj5)));
j4eval[0]=x8880;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8879))))));
j4eval[2]=IKsign(x8880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8881=((1.0)*cj5);
IkReal x8882=((((-1.0)*r11*x8881))+(((-1.0)*r10*sj5)));
j4eval[0]=x8882;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8881))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8883=((1.0)*sj0);
IkReal x8884=((1.0)*cj0);
IkReal x8885=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8885;
j4eval[1]=((IKabs(((((-1.0)*r12*x8883))+(((-1.0)*r02*x8884)))))+(IKabs(((((-1.0)*r01*sj5*x8884))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8883))))));
j4eval[2]=IKsign(x8885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8886=((-1.0)*r20);
IkReal x8888 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8888)==0){
continue;
}
IkReal x8887=pow(x8888,-0.5);
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8886),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8889.value));
IkReal gconst1=(r21*x8887);
IkReal gconst2=(x8886*x8887);
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8890.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8891=((-1.0)*r20);
IkReal x8892=x8887;
CheckValue<IkReal> x8894 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8891),IKFAST_ATAN2_MAGTHRESH);
if(!x8894.valid){
continue;
}
IkReal x8893=((-1.0)*(x8894.value));
sj5=gconst1;
cj5=gconst2;
j5=x8893;
IkReal gconst0=x8893;
IkReal gconst1=(r21*x8892);
IkReal gconst2=(x8891*x8892);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8895=((-1.0)*r20);
IkReal x8896=x8887;
CheckValue<IkReal> x8898 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8895),IKFAST_ATAN2_MAGTHRESH);
if(!x8898.valid){
continue;
}
IkReal x8897=((-1.0)*(x8898.value));
sj5=gconst1;
cj5=gconst2;
j5=x8897;
IkReal gconst0=x8897;
IkReal gconst1=(r21*x8896);
IkReal gconst2=(x8895*x8896);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8899=((-1.0)*r20);
IkReal x8900=x8887;
CheckValue<IkReal> x8902 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8899),IKFAST_ATAN2_MAGTHRESH);
if(!x8902.valid){
continue;
}
IkReal x8901=((-1.0)*(x8902.value));
sj5=gconst1;
cj5=gconst2;
j5=x8901;
IkReal gconst0=x8901;
IkReal gconst1=(r21*x8900);
IkReal gconst2=(x8899*x8900);
IkReal x8903=r22*r22;
CheckValue<IkReal> x8907=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8903))),-1);
if(!x8907.valid){
continue;
}
IkReal x8904=x8907.value;
IkReal x8905=(sj3*x8904);
IkReal x8906=(((x8905*(r20*r20*r20*r20)))+((x8905*(r21*r21*r21*r21)))+(((2.0)*x8905*(r20*r20)*(r21*r21)))+((sj3*x8903)));
j4eval[0]=x8906;
j4eval[1]=IKsign(x8906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8908=((-1.0)*r20);
IkReal x8909=x8887;
CheckValue<IkReal> x8911 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8908),IKFAST_ATAN2_MAGTHRESH);
if(!x8911.valid){
continue;
}
IkReal x8910=((-1.0)*(x8911.value));
sj5=gconst1;
cj5=gconst2;
j5=x8910;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8910;
IkReal gconst1=(r21*x8909);
IkReal gconst2=(x8908*x8909);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8912=((-1.0)*r20);
IkReal x8913=x8887;
CheckValue<IkReal> x8915 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8912),IKFAST_ATAN2_MAGTHRESH);
if(!x8915.valid){
continue;
}
IkReal x8914=((-1.0)*(x8915.value));
sj5=gconst1;
cj5=gconst2;
j5=x8914;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8914;
IkReal gconst1=(r21*x8913);
IkReal gconst2=(x8912*x8913);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8916=((-1.0)*r20);
IkReal x8917=x8887;
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8916),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
IkReal x8918=((-1.0)*(x8919.value));
sj5=gconst1;
cj5=gconst2;
j5=x8918;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8918;
IkReal gconst1=(r21*x8917);
IkReal gconst2=(x8916*x8917);
IkReal x8920=((1.0)*(r22*r22));
CheckValue<IkReal> x8924=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8920))),-1);
if(!x8924.valid){
continue;
}
IkReal x8921=x8924.value;
IkReal x8922=((1.0)*x8921);
IkReal x8923=((((-1.0)*x8920))+(((-2.0)*x8921*(r20*r20)*(r21*r21)))+(((-1.0)*x8922*(r20*r20*r20*r20)))+(((-1.0)*x8922*(r21*r21*r21*r21))));
j4eval[0]=x8923;
j4eval[1]=IKsign(x8923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8925=((-1.0)*r20);
IkReal x8926=x8887;
CheckValue<IkReal> x8928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8925),IKFAST_ATAN2_MAGTHRESH);
if(!x8928.valid){
continue;
}
IkReal x8927=((-1.0)*(x8928.value));
sj5=gconst1;
cj5=gconst2;
j5=x8927;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8927;
IkReal gconst1=(r21*x8926);
IkReal gconst2=(x8925*x8926);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8929=((-1.0)*r20);
IkReal x8930=x8887;
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8929),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
IkReal x8931=((-1.0)*(x8932.value));
sj5=gconst1;
cj5=gconst2;
j5=x8931;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8931;
IkReal gconst1=(r21*x8930);
IkReal gconst2=(x8929*x8930);
IkReal x8933=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8937=IKPowWithIntegerCheck(x8933,-1);
if(!x8937.valid){
continue;
}
IkReal x8934=x8937.value;
IkReal x8935=((1.0)*x8934);
IkReal x8936=((((-1.0)*x8935*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8934))+(((-1.0)*x8935*(r11*r11)*(r21*r21))));
j4eval[0]=x8936;
j4eval[1]=r12;
j4eval[2]=x8933;
j4eval[3]=IKsign(x8936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8938=((-1.0)*r20);
IkReal x8939=x8887;
CheckValue<IkReal> x8941 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8938),IKFAST_ATAN2_MAGTHRESH);
if(!x8941.valid){
continue;
}
IkReal x8940=((-1.0)*(x8941.value));
sj5=gconst1;
cj5=gconst2;
j5=x8940;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8940;
IkReal gconst1=(r21*x8939);
IkReal gconst2=(x8938*x8939);
IkReal x8942=r22*r22;
IkReal x8943=(cj1*r12*sj2);
IkReal x8944=(cj2*r12*sj1);
CheckValue<IkReal> x8948=IKPowWithIntegerCheck(((-1.0)+x8942),-1);
if(!x8948.valid){
continue;
}
IkReal x8945=x8948.value;
if((((1.0)+(((-1.0)*x8942)))) < -0.00001)
continue;
IkReal x8946=IKsqrt(((1.0)+(((-1.0)*x8942))));
IkReal x8947=(r22*x8945*x8946);
j4eval[0]=((IKabs((((x8944*x8947))+((x8943*x8947)))))+(IKabs(((((-1.0)*x8944))+(((-1.0)*x8943))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8949=(cj1*sj2);
IkReal x8950=(cj2*sj1);
IkReal x8951=((1.0)*r12);
IkReal x8952=(gconst1*r11);
IkReal x8953=((1.0)*gconst2*r10);
CheckValue<IkReal> x8954 = IKatan2WithCheck(IkReal((((x8950*x8952))+(((-1.0)*x8950*x8953))+(((-1.0)*x8949*x8953))+((x8949*x8952)))),IkReal(((((-1.0)*x8950*x8951))+(((-1.0)*x8949*x8951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8954.valid){
continue;
}
CheckValue<IkReal> x8955=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8954.value)+(((1.5707963267949)*(x8955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8956=IKcos(j4);
IkReal x8957=IKsin(j4);
IkReal x8958=((1.0)*x8956);
IkReal x8959=(gconst1*x8956);
IkReal x8960=(gconst1*x8957);
IkReal x8961=((1.0)*gconst2*x8957);
evalcond[0]=((((-1.0)*gconst2*r10*x8958))+((r12*x8957))+((r11*x8959)));
evalcond[1]=((((-1.0)*r22*x8958))+(((-1.0)*r20*x8961))+((r21*x8960)));
evalcond[2]=((((-1.0)*r00*x8961))+((r01*x8960))+(((-1.0)*r02*x8958)));
evalcond[3]=((1.0)+((r11*x8960))+(((-1.0)*r10*x8961))+(((-1.0)*r12*x8958)));
evalcond[4]=(((r22*x8957))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8958))+((r21*x8959)));
evalcond[5]=(((r02*x8957))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8959))+(((-1.0)*gconst2*r00*x8958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8962=(gconst2*r10);
IkReal x8963=(gconst1*r11);
CheckValue<IkReal> x8964 = IKatan2WithCheck(IkReal((x8963+(((-1.0)*x8962)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8964.valid){
continue;
}
CheckValue<IkReal> x8965=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8962*x8962)))+(((2.0)*x8962*x8963))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8963*x8963))))),-1);
if(!x8965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8964.value)+(((1.5707963267949)*(x8965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8966=IKcos(j4);
IkReal x8967=IKsin(j4);
IkReal x8968=((1.0)*x8966);
IkReal x8969=(gconst1*x8966);
IkReal x8970=(gconst1*x8967);
IkReal x8971=((1.0)*gconst2*x8967);
evalcond[0]=(((r11*x8969))+(((-1.0)*gconst2*r10*x8968))+((r12*x8967)));
evalcond[1]=(((r21*x8970))+(((-1.0)*r22*x8968))+(((-1.0)*r20*x8971)));
evalcond[2]=(((r01*x8970))+(((-1.0)*r02*x8968))+(((-1.0)*r00*x8971)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8971))+(((-1.0)*r12*x8968))+((r11*x8970)));
evalcond[4]=(((cj2*sj1))+((r22*x8967))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8968))+((r21*x8969)));
evalcond[5]=(((r02*x8967))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8969))+(((-1.0)*gconst2*r00*x8968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8972=((1.0)*gconst2);
CheckValue<IkReal> x8973=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8972)))),-1);
if(!x8973.valid){
continue;
}
CheckValue<IkReal> x8974 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8973.value)))+(x8974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8975=IKcos(j4);
IkReal x8976=IKsin(j4);
IkReal x8977=((1.0)*x8975);
IkReal x8978=(gconst1*x8975);
IkReal x8979=(gconst1*x8976);
IkReal x8980=((1.0)*gconst2*x8976);
evalcond[0]=(((r11*x8978))+((r12*x8976))+(((-1.0)*gconst2*r10*x8977)));
evalcond[1]=(((r21*x8979))+(((-1.0)*r22*x8977))+(((-1.0)*r20*x8980)));
evalcond[2]=(((r01*x8979))+(((-1.0)*r02*x8977))+(((-1.0)*r00*x8980)));
evalcond[3]=((1.0)+((r11*x8979))+(((-1.0)*r12*x8977))+(((-1.0)*r10*x8980)));
evalcond[4]=(((r21*x8978))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8977))+((cj1*sj2))+((r22*x8976)));
evalcond[5]=(((r01*x8978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8977))+((r02*x8976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8981=((-1.0)*r20);
IkReal x8982=x8887;
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8981),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
IkReal x8983=((-1.0)*(x8984.value));
sj5=gconst1;
cj5=gconst2;
j5=x8983;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8983;
IkReal gconst1=(r21*x8982);
IkReal gconst2=(x8981*x8982);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8985=((-1.0)*r20);
IkReal x8986=x8887;
CheckValue<IkReal> x8988 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8985),IKFAST_ATAN2_MAGTHRESH);
if(!x8988.valid){
continue;
}
IkReal x8987=((-1.0)*(x8988.value));
sj5=gconst1;
cj5=gconst2;
j5=x8987;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8987;
IkReal gconst1=(r21*x8986);
IkReal gconst2=(x8985*x8986);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8989=((-1.0)*r20);
IkReal x8990=x8887;
CheckValue<IkReal> x8992 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8989),IKFAST_ATAN2_MAGTHRESH);
if(!x8992.valid){
continue;
}
IkReal x8991=((-1.0)*(x8992.value));
sj5=gconst1;
cj5=gconst2;
j5=x8991;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8991;
IkReal gconst1=(r21*x8990);
IkReal gconst2=(x8989*x8990);
IkReal x8993=r22*r22;
IkReal x8994=(cj1*r12*sj2);
IkReal x8995=(cj2*r12*sj1);
CheckValue<IkReal> x8999=IKPowWithIntegerCheck(((-1.0)+x8993),-1);
if(!x8999.valid){
continue;
}
IkReal x8996=x8999.value;
if((((1.0)+(((-1.0)*x8993)))) < -0.00001)
continue;
IkReal x8997=IKsqrt(((1.0)+(((-1.0)*x8993))));
IkReal x8998=(r22*x8996*x8997);
j4eval[0]=((IKabs(((((-1.0)*x8994))+(((-1.0)*x8995)))))+(IKabs((((x8995*x8998))+((x8994*x8998))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9000=(cj1*sj2);
IkReal x9001=(cj2*sj1);
IkReal x9002=((1.0)*r12);
IkReal x9003=(gconst1*r11);
IkReal x9004=((1.0)*gconst2*r10);
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal((((x9001*x9003))+((x9000*x9003))+(((-1.0)*x9001*x9004))+(((-1.0)*x9000*x9004)))),IkReal(((((-1.0)*x9001*x9002))+(((-1.0)*x9000*x9002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9005.value)))+(x9006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9007=IKcos(j4);
IkReal x9008=IKsin(j4);
IkReal x9009=((1.0)*x9007);
IkReal x9010=(gconst1*x9007);
IkReal x9011=(gconst1*x9008);
IkReal x9012=((1.0)*gconst2*x9008);
evalcond[0]=((((-1.0)*gconst2*r10*x9009))+((r12*x9008))+((r11*x9010)));
evalcond[1]=((((-1.0)*r22*x9009))+(((-1.0)*r20*x9012))+((r21*x9011)));
evalcond[2]=((((-1.0)*r02*x9009))+(((-1.0)*r00*x9012))+((r01*x9011)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9012))+(((-1.0)*r12*x9009))+((r11*x9011)));
evalcond[4]=(((cj2*sj1))+((r22*x9008))+((cj1*sj2))+((r21*x9010))+(((-1.0)*gconst2*r20*x9009)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9008))+(((-1.0)*gconst2*r00*x9009))+((cj1*cj2))+((r01*x9010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9013=(gconst1*r11);
IkReal x9014=(gconst2*r10);
CheckValue<IkReal> x9015=IKPowWithIntegerCheck(IKsign(((x9013*x9013)+(r12*r12)+(x9014*x9014)+(((-2.0)*x9013*x9014)))),-1);
if(!x9015.valid){
continue;
}
CheckValue<IkReal> x9016 = IKatan2WithCheck(IkReal(((((-1.0)*x9014))+x9013)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9015.value)))+(x9016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9017=IKcos(j4);
IkReal x9018=IKsin(j4);
IkReal x9019=((1.0)*x9017);
IkReal x9020=(gconst1*x9017);
IkReal x9021=(gconst1*x9018);
IkReal x9022=((1.0)*gconst2*x9018);
evalcond[0]=(((r12*x9018))+((r11*x9020))+(((-1.0)*gconst2*r10*x9019)));
evalcond[1]=((((-1.0)*r22*x9019))+((r21*x9021))+(((-1.0)*r20*x9022)));
evalcond[2]=(((r01*x9021))+(((-1.0)*r02*x9019))+(((-1.0)*r00*x9022)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9019))+((r11*x9021))+(((-1.0)*r10*x9022)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9019))+((cj1*sj2))+((r21*x9020))+((r22*x9018)));
evalcond[5]=(((r01*x9020))+(((-1.0)*sj1*sj2))+((r02*x9018))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
CheckValue<IkReal> x9024=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9023.value)+(((1.5707963267949)*(x9024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9025=IKcos(j4);
IkReal x9026=IKsin(j4);
IkReal x9027=((1.0)*x9025);
IkReal x9028=(gconst1*x9025);
IkReal x9029=(gconst1*x9026);
IkReal x9030=((1.0)*gconst2*x9026);
evalcond[0]=((((-1.0)*gconst2*r10*x9027))+((r11*x9028))+((r12*x9026)));
evalcond[1]=(((r21*x9029))+(((-1.0)*r20*x9030))+(((-1.0)*r22*x9027)));
evalcond[2]=(((r01*x9029))+(((-1.0)*r00*x9030))+(((-1.0)*r02*x9027)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9030))+(((-1.0)*r12*x9027))+((r11*x9029)));
evalcond[4]=((((-1.0)*gconst2*r20*x9027))+((cj2*sj1))+((cj1*sj2))+((r21*x9028))+((r22*x9026)));
evalcond[5]=((((-1.0)*gconst2*r00*x9027))+((r01*x9028))+(((-1.0)*sj1*sj2))+((r02*x9026))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9031=((-1.0)*r20);
IkReal x9032=x8887;
CheckValue<IkReal> x9034 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9031),IKFAST_ATAN2_MAGTHRESH);
if(!x9034.valid){
continue;
}
IkReal x9033=((-1.0)*(x9034.value));
sj5=gconst1;
cj5=gconst2;
j5=x9033;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9033;
IkReal gconst1=(r21*x9032);
IkReal gconst2=(x9031*x9032);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9035=((-1.0)*r20);
IkReal x9036=x8887;
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9035),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
IkReal x9037=((-1.0)*(x9038.value));
sj5=gconst1;
cj5=gconst2;
j5=x9037;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9037;
IkReal gconst1=(r21*x9036);
IkReal gconst2=(x9035*x9036);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9039=((-1.0)*r20);
IkReal x9040=x8887;
CheckValue<IkReal> x9042 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9039),IKFAST_ATAN2_MAGTHRESH);
if(!x9042.valid){
continue;
}
IkReal x9041=((-1.0)*(x9042.value));
sj5=gconst1;
cj5=gconst2;
j5=x9041;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9041;
IkReal gconst1=(r21*x9040);
IkReal gconst2=(x9039*x9040);
IkReal x9043=r22*r22;
IkReal x9044=((1.0)*r02);
IkReal x9045=(cj1*sj2);
IkReal x9046=(cj2*sj1);
CheckValue<IkReal> x9050=IKPowWithIntegerCheck(((-1.0)+x9043),-1);
if(!x9050.valid){
continue;
}
IkReal x9047=x9050.value;
if((((1.0)+(((-1.0)*x9043)))) < -0.00001)
continue;
IkReal x9048=IKsqrt(((1.0)+(((-1.0)*x9043))));
IkReal x9049=(r02*r22*x9047*x9048);
j4eval[0]=((IKabs(((((-1.0)*x9044*x9046))+(((-1.0)*x9044*x9045)))))+(IKabs((((x9045*x9049))+((x9046*x9049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9051=(cj1*sj2);
IkReal x9052=(gconst1*r01);
IkReal x9053=((1.0)*r02);
IkReal x9054=(cj2*sj1);
IkReal x9055=((1.0)*gconst2*r00);
CheckValue<IkReal> x9056 = IKatan2WithCheck(IkReal((((x9051*x9052))+((x9052*x9054))+(((-1.0)*x9054*x9055))+(((-1.0)*x9051*x9055)))),IkReal(((((-1.0)*x9053*x9054))+(((-1.0)*x9051*x9053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9056.valid){
continue;
}
CheckValue<IkReal> x9057=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9056.value)+(((1.5707963267949)*(x9057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9058=IKcos(j4);
IkReal x9059=IKsin(j4);
IkReal x9060=((1.0)*x9058);
IkReal x9061=(gconst1*x9058);
IkReal x9062=(gconst1*x9059);
IkReal x9063=((1.0)*gconst2*x9059);
evalcond[0]=(((r01*x9061))+(((-1.0)*gconst2*r00*x9060))+((r02*x9059)));
evalcond[1]=((((-1.0)*r20*x9063))+((r21*x9062))+(((-1.0)*r22*x9060)));
evalcond[2]=(((r11*x9062))+(((-1.0)*r10*x9063))+(((-1.0)*r12*x9060)));
evalcond[3]=((-1.0)+((r01*x9062))+(((-1.0)*r02*x9060))+(((-1.0)*r00*x9063)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9060))+((r21*x9061))+((r22*x9059)));
evalcond[5]=(((r11*x9061))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9059))+(((-1.0)*gconst2*r10*x9060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9064=(gconst1*r01);
IkReal x9065=(gconst2*r00);
CheckValue<IkReal> x9066=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9064*x9065))+(x9064*x9064)+(x9065*x9065)+(r02*r02))),-1);
if(!x9066.valid){
continue;
}
CheckValue<IkReal> x9067 = IKatan2WithCheck(IkReal((x9064+(((-1.0)*x9065)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9066.value)))+(x9067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9068=IKcos(j4);
IkReal x9069=IKsin(j4);
IkReal x9070=((1.0)*x9068);
IkReal x9071=(gconst1*x9068);
IkReal x9072=(gconst1*x9069);
IkReal x9073=((1.0)*gconst2*x9069);
evalcond[0]=(((r02*x9069))+(((-1.0)*gconst2*r00*x9070))+((r01*x9071)));
evalcond[1]=(((r21*x9072))+(((-1.0)*r22*x9070))+(((-1.0)*r20*x9073)));
evalcond[2]=((((-1.0)*r12*x9070))+((r11*x9072))+(((-1.0)*r10*x9073)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9070))+(((-1.0)*r00*x9073))+((r01*x9072)));
evalcond[4]=(((cj2*sj1))+((r22*x9069))+((r21*x9071))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9070)));
evalcond[5]=(((r12*x9069))+(((-1.0)*gconst2*r10*x9070))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9074=((1.0)*gconst2);
CheckValue<IkReal> x9075 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9075.valid){
continue;
}
CheckValue<IkReal> x9076=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9074)))),-1);
if(!x9076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9075.value)+(((1.5707963267949)*(x9076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9077=IKcos(j4);
IkReal x9078=IKsin(j4);
IkReal x9079=((1.0)*x9077);
IkReal x9080=(gconst1*x9077);
IkReal x9081=(gconst1*x9078);
IkReal x9082=((1.0)*gconst2*x9078);
evalcond[0]=(((r01*x9080))+(((-1.0)*gconst2*r00*x9079))+((r02*x9078)));
evalcond[1]=((((-1.0)*r22*x9079))+((r21*x9081))+(((-1.0)*r20*x9082)));
evalcond[2]=(((r11*x9081))+(((-1.0)*r12*x9079))+(((-1.0)*r10*x9082)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9079))+(((-1.0)*r00*x9082))+((r01*x9081)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9080))+((r22*x9078))+(((-1.0)*gconst2*r20*x9079)));
evalcond[5]=(((r11*x9080))+(((-1.0)*gconst2*r10*x9079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9083=((-1.0)*r20);
IkReal x9084=x8887;
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9083),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
IkReal x9085=((-1.0)*(x9086.value));
sj5=gconst1;
cj5=gconst2;
j5=x9085;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9085;
IkReal gconst1=(r21*x9084);
IkReal gconst2=(x9083*x9084);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9087=((-1.0)*r20);
IkReal x9088=x8887;
CheckValue<IkReal> x9090 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9087),IKFAST_ATAN2_MAGTHRESH);
if(!x9090.valid){
continue;
}
IkReal x9089=((-1.0)*(x9090.value));
sj5=gconst1;
cj5=gconst2;
j5=x9089;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9089;
IkReal gconst1=(r21*x9088);
IkReal gconst2=(x9087*x9088);
IkReal x9091=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9095=IKPowWithIntegerCheck(x9091,-1);
if(!x9095.valid){
continue;
}
IkReal x9092=x9095.value;
IkReal x9093=((1.0)*x9092);
IkReal x9094=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9092))+(((-1.0)*x9093*(r00*r00)*(r20*r20)))+(((-1.0)*x9093*(r01*r01)*(r21*r21))));
j4eval[0]=x9094;
j4eval[1]=IKsign(x9094);
j4eval[2]=r02;
j4eval[3]=x9091;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9096=((-1.0)*r20);
IkReal x9097=x8887;
CheckValue<IkReal> x9099 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9096),IKFAST_ATAN2_MAGTHRESH);
if(!x9099.valid){
continue;
}
IkReal x9098=((-1.0)*(x9099.value));
sj5=gconst1;
cj5=gconst2;
j5=x9098;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9098;
IkReal gconst1=(r21*x9097);
IkReal gconst2=(x9096*x9097);
IkReal x9100=r22*r22;
IkReal x9101=((1.0)*r02);
IkReal x9102=(cj1*sj2);
IkReal x9103=(cj2*sj1);
CheckValue<IkReal> x9107=IKPowWithIntegerCheck(((-1.0)+x9100),-1);
if(!x9107.valid){
continue;
}
IkReal x9104=x9107.value;
if((((1.0)+(((-1.0)*x9100)))) < -0.00001)
continue;
IkReal x9105=IKsqrt(((1.0)+(((-1.0)*x9100))));
IkReal x9106=(r02*r22*x9104*x9105);
j4eval[0]=((IKabs((((x9103*x9106))+((x9102*x9106)))))+(IKabs(((((-1.0)*x9101*x9103))+(((-1.0)*x9101*x9102))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9108=(cj1*sj2);
IkReal x9109=(gconst1*r01);
IkReal x9110=((1.0)*r02);
IkReal x9111=(cj2*sj1);
IkReal x9112=((1.0)*gconst2*r00);
CheckValue<IkReal> x9113 = IKatan2WithCheck(IkReal((((x9108*x9109))+(((-1.0)*x9111*x9112))+(((-1.0)*x9108*x9112))+((x9109*x9111)))),IkReal(((((-1.0)*x9110*x9111))+(((-1.0)*x9108*x9110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9113.valid){
continue;
}
CheckValue<IkReal> x9114=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9113.value)+(((1.5707963267949)*(x9114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9115=IKcos(j4);
IkReal x9116=IKsin(j4);
IkReal x9117=((1.0)*x9115);
IkReal x9118=(gconst1*x9115);
IkReal x9119=(gconst1*x9116);
IkReal x9120=((1.0)*gconst2*x9116);
evalcond[0]=((((-1.0)*gconst2*r00*x9117))+((r01*x9118))+((r02*x9116)));
evalcond[1]=(((r21*x9119))+(((-1.0)*r20*x9120))+(((-1.0)*r22*x9117)));
evalcond[2]=(((r11*x9119))+(((-1.0)*r10*x9120))+(((-1.0)*r12*x9117)));
evalcond[3]=((1.0)+((r01*x9119))+(((-1.0)*r02*x9117))+(((-1.0)*r00*x9120)));
evalcond[4]=(((r21*x9118))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9117))+((r22*x9116)));
evalcond[5]=(((r12*x9116))+(((-1.0)*sj1*sj2))+((r11*x9118))+(((-1.0)*gconst2*r10*x9117))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9121=(gconst1*r01);
IkReal x9122=(gconst2*r00);
CheckValue<IkReal> x9123 = IKatan2WithCheck(IkReal((x9121+(((-1.0)*x9122)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9123.valid){
continue;
}
CheckValue<IkReal> x9124=IKPowWithIntegerCheck(IKsign(((((2.0)*x9121*x9122))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9121*x9121)))+(((-1.0)*(x9122*x9122))))),-1);
if(!x9124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9123.value)+(((1.5707963267949)*(x9124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9125=IKcos(j4);
IkReal x9126=IKsin(j4);
IkReal x9127=((1.0)*x9125);
IkReal x9128=(gconst1*x9125);
IkReal x9129=(gconst1*x9126);
IkReal x9130=((1.0)*gconst2*x9126);
evalcond[0]=((((-1.0)*gconst2*r00*x9127))+((r02*x9126))+((r01*x9128)));
evalcond[1]=((((-1.0)*r20*x9130))+(((-1.0)*r22*x9127))+((r21*x9129)));
evalcond[2]=((((-1.0)*r12*x9127))+(((-1.0)*r10*x9130))+((r11*x9129)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9127))+(((-1.0)*r00*x9130))+((r01*x9129)));
evalcond[4]=(((r22*x9126))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9127))+((cj1*sj2))+((r21*x9128)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9127))+((cj1*cj2))+((r11*x9128))+((r12*x9126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9131 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9131.valid){
continue;
}
CheckValue<IkReal> x9132=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9131.value)+(((1.5707963267949)*(x9132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9133=IKcos(j4);
IkReal x9134=IKsin(j4);
IkReal x9135=((1.0)*x9133);
IkReal x9136=(gconst1*x9133);
IkReal x9137=(gconst1*x9134);
IkReal x9138=((1.0)*gconst2*x9134);
evalcond[0]=(((r02*x9134))+(((-1.0)*gconst2*r00*x9135))+((r01*x9136)));
evalcond[1]=((((-1.0)*r22*x9135))+(((-1.0)*r20*x9138))+((r21*x9137)));
evalcond[2]=((((-1.0)*r12*x9135))+(((-1.0)*r10*x9138))+((r11*x9137)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9135))+(((-1.0)*r00*x9138))+((r01*x9137)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9134))+((r21*x9136))+(((-1.0)*gconst2*r20*x9135)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9135))+((r12*x9134))+((r11*x9136))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9139=((-1.0)*r20);
IkReal x9140=((-1.0)*px);
CheckValue<IkReal> x9142 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9139),IKFAST_ATAN2_MAGTHRESH);
if(!x9142.valid){
continue;
}
IkReal x9141=((-1.0)*(x9142.value));
sj5=gconst1;
cj5=gconst2;
j5=x9141;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9140);
rxp1_1=(px*r21);
rxp1_2=(r11*x9140);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9141;
IkReal gconst1=r21;
IkReal gconst2=x9139;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9143=((-1.0)*r20);
IkReal x9144=((-1.0)*px);
CheckValue<IkReal> x9146 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9143),IKFAST_ATAN2_MAGTHRESH);
if(!x9146.valid){
continue;
}
IkReal x9145=((-1.0)*(x9146.value));
sj5=gconst1;
cj5=gconst2;
j5=x9145;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9144);
rxp1_1=(px*r21);
rxp1_2=(r11*x9144);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9145;
IkReal gconst1=r21;
IkReal gconst2=x9143;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9147=((-1.0)*r20);
IkReal x9148=((-1.0)*px);
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9147),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
IkReal x9149=((-1.0)*(x9150.value));
sj5=gconst1;
cj5=gconst2;
j5=x9149;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9148);
rxp1_1=(px*r21);
rxp1_2=(r11*x9148);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9149;
IkReal gconst1=r21;
IkReal gconst2=x9147;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9153=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9153.valid){
continue;
}
IkReal x9151=x9153.value;
IkReal x9152=(sj0*x9151);
cj4array[0]=(((cj1*cj2*x9152))+(((-1.0)*sj1*sj2*x9152)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9154=IKsin(j4);
IkReal x9155=IKcos(j4);
IkReal x9156=((1.0)*gconst2);
IkReal x9157=(gconst1*r21);
evalcond[0]=(r02*x9154);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9155)));
evalcond[2]=((((-1.0)*r20*x9154*x9156))+((x9154*x9157)));
evalcond[3]=((((-1.0)*r10*x9154*x9156))+((gconst1*r11*x9154)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9155*x9157))+(((-1.0)*r20*x9155*x9156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9160=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9160.valid){
continue;
}
IkReal x9158=x9160.value;
IkReal x9159=((1.0)*x9158);
cj4array[0]=((((-1.0)*cj1*sj2*x9159))+(((-1.0)*cj2*sj1*x9159)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9161=IKsin(j4);
IkReal x9162=IKcos(j4);
IkReal x9163=((1.0)*sj0);
IkReal x9164=(gconst1*x9161);
IkReal x9165=((1.0)*x9162);
IkReal x9166=((1.0)*gconst2*x9161);
evalcond[0]=(r02*x9161);
evalcond[1]=((((-1.0)*r02*x9165))+(((-1.0)*x9163)));
evalcond[2]=(((r21*x9164))+(((-1.0)*r20*x9166)));
evalcond[3]=((((-1.0)*r10*x9166))+((r11*x9164)));
evalcond[4]=((((-1.0)*cj1*cj2*x9163))+(((-1.0)*gconst2*r10*x9165))+((gconst1*r11*x9162))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9167=IKPowWithIntegerCheck(r02,-1);
if(!x9167.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9167.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9168=IKsin(j4);
IkReal x9169=IKcos(j4);
IkReal x9170=(gconst1*r21);
IkReal x9171=(gconst1*r11);
IkReal x9172=((1.0)*gconst2*r10);
IkReal x9173=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9168);
evalcond[1]=((((-1.0)*x9168*x9173))+((x9168*x9170)));
evalcond[2]=((((-1.0)*x9168*x9172))+((x9168*x9171)));
evalcond[3]=(((x9169*x9170))+((cj2*sj1))+(((-1.0)*x9169*x9173))+((cj1*sj2)));
evalcond[4]=(((x9169*x9171))+(((-1.0)*x9169*x9172))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9174=(cj2*sj1);
IkReal x9175=(cj1*sj2);
IkReal x9176=(gconst1*r21);
IkReal x9177=((1.0)*gconst2*r20);
CheckValue<IkReal> x9178=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9177))+(((-1.0)*(r22*r22)))+(((2.0)*gconst2*r20*x9176))+(((-1.0)*(x9176*x9176))))),-1);
if(!x9178.valid){
continue;
}
CheckValue<IkReal> x9179 = IKatan2WithCheck(IkReal((((r22*x9175))+((r22*x9174)))),IkReal((((x9175*x9176))+((x9174*x9176))+(((-1.0)*x9175*x9177))+(((-1.0)*x9174*x9177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9178.value)))+(x9179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9180=IKsin(j4);
IkReal x9181=IKcos(j4);
IkReal x9182=(sj1*sj2);
IkReal x9183=(gconst2*r10);
IkReal x9184=(gconst2*r00);
IkReal x9185=(gconst2*r20);
IkReal x9186=((1.0)*x9181);
IkReal x9187=(gconst1*x9181);
IkReal x9188=((1.0)*cj1*cj2);
IkReal x9189=(gconst1*x9180);
IkReal x9190=((1.0)*x9180);
evalcond[0]=((((-1.0)*x9185*x9190))+(((-1.0)*r22*x9186))+((r21*x9189)));
evalcond[1]=((((-1.0)*r12*x9186))+((r11*x9189))+cj0+(((-1.0)*x9183*x9190)));
evalcond[2]=((((-1.0)*x9184*x9190))+(((-1.0)*sj0))+(((-1.0)*r02*x9186))+((r01*x9189)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9185*x9186))+((cj1*sj2))+((r22*x9180))+((r21*x9187)));
evalcond[4]=(((r02*x9180))+(((-1.0)*x9184*x9186))+(((-1.0)*cj0*x9188))+((cj0*x9182))+((r01*x9187)));
evalcond[5]=((((-1.0)*x9183*x9186))+((r11*x9187))+((r12*x9180))+((sj0*x9182))+(((-1.0)*sj0*x9188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9191=((1.0)*gconst2);
CheckValue<IkReal> x9192 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9191))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9192.valid){
continue;
}
CheckValue<IkReal> x9193=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9191)))),-1);
if(!x9193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9192.value)+(((1.5707963267949)*(x9193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9194=IKsin(j4);
IkReal x9195=IKcos(j4);
IkReal x9196=(sj1*sj2);
IkReal x9197=(gconst2*r10);
IkReal x9198=(gconst2*r00);
IkReal x9199=(gconst2*r20);
IkReal x9200=((1.0)*x9195);
IkReal x9201=(gconst1*x9195);
IkReal x9202=((1.0)*cj1*cj2);
IkReal x9203=(gconst1*x9194);
IkReal x9204=((1.0)*x9194);
evalcond[0]=(((r21*x9203))+(((-1.0)*x9199*x9204))+(((-1.0)*r22*x9200)));
evalcond[1]=((((-1.0)*x9197*x9204))+cj0+((r11*x9203))+(((-1.0)*r12*x9200)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9203))+(((-1.0)*r02*x9200))+(((-1.0)*x9198*x9204)));
evalcond[3]=(((cj2*sj1))+((r22*x9194))+((cj1*sj2))+((r21*x9201))+(((-1.0)*x9199*x9200)));
evalcond[4]=(((r01*x9201))+(((-1.0)*x9198*x9200))+(((-1.0)*cj0*x9202))+((r02*x9194))+((cj0*x9196)));
evalcond[5]=((((-1.0)*x9197*x9200))+((sj0*x9196))+((r11*x9201))+((r12*x9194))+(((-1.0)*sj0*x9202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9205=((1.0)*gconst2);
CheckValue<IkReal> x9206 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9206.valid){
continue;
}
CheckValue<IkReal> x9207=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9205)))),-1);
if(!x9207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9206.value)+(((1.5707963267949)*(x9207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9208=IKsin(j4);
IkReal x9209=IKcos(j4);
IkReal x9210=(sj1*sj2);
IkReal x9211=(gconst2*r10);
IkReal x9212=(gconst2*r00);
IkReal x9213=(gconst2*r20);
IkReal x9214=((1.0)*x9209);
IkReal x9215=(gconst1*x9209);
IkReal x9216=((1.0)*cj1*cj2);
IkReal x9217=(gconst1*x9208);
IkReal x9218=((1.0)*x9208);
evalcond[0]=((((-1.0)*x9213*x9218))+((r21*x9217))+(((-1.0)*r22*x9214)));
evalcond[1]=((((-1.0)*x9211*x9218))+cj0+((r11*x9217))+(((-1.0)*r12*x9214)));
evalcond[2]=((((-1.0)*x9212*x9218))+(((-1.0)*r02*x9214))+(((-1.0)*sj0))+((r01*x9217)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9213*x9214))+((r21*x9215))+((r22*x9208))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x9212*x9214))+(((-1.0)*cj0*x9216))+((r02*x9208))+((cj0*x9210))+((r01*x9215)));
evalcond[5]=((((-1.0)*x9211*x9214))+((sj0*x9210))+((r11*x9215))+((r12*x9208))+(((-1.0)*sj0*x9216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9219=((-1.0)*r20);
IkReal x9220=x8887;
CheckValue<IkReal> x9222 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9219),IKFAST_ATAN2_MAGTHRESH);
if(!x9222.valid){
continue;
}
IkReal x9221=((-1.0)*(x9222.value));
sj5=gconst1;
cj5=gconst2;
j5=x9221;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9221;
IkReal gconst1=(r21*x9220);
IkReal gconst2=(x9219*x9220);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9223=((-1.0)*r20);
IkReal x9224=x8887;
CheckValue<IkReal> x9226 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9223),IKFAST_ATAN2_MAGTHRESH);
if(!x9226.valid){
continue;
}
IkReal x9225=((-1.0)*(x9226.value));
sj5=gconst1;
cj5=gconst2;
j5=x9225;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9225;
IkReal gconst1=(r21*x9224);
IkReal gconst2=(x9223*x9224);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9227=((-1.0)*r20);
IkReal x9228=x8887;
CheckValue<IkReal> x9230 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9227),IKFAST_ATAN2_MAGTHRESH);
if(!x9230.valid){
continue;
}
IkReal x9229=((-1.0)*(x9230.value));
sj5=gconst1;
cj5=gconst2;
j5=x9229;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9229;
IkReal gconst1=(r21*x9228);
IkReal gconst2=(x9227*x9228);
IkReal x9231=r22*r22;
CheckValue<IkReal> x9234=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9231))),-1);
if(!x9234.valid){
continue;
}
IkReal x9232=x9234.value;
IkReal x9233=(x9231+((x9232*(r21*r21*r21*r21)))+((x9232*(r20*r20*r20*r20)))+(((2.0)*x9232*(r20*r20)*(r21*r21))));
j4eval[0]=x9233;
j4eval[1]=IKsign(x9233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9235=((-1.0)*r20);
IkReal x9236=x8887;
CheckValue<IkReal> x9238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9235),IKFAST_ATAN2_MAGTHRESH);
if(!x9238.valid){
continue;
}
IkReal x9237=((-1.0)*(x9238.value));
sj5=gconst1;
cj5=gconst2;
j5=x9237;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9237;
IkReal gconst1=(r21*x9236);
IkReal gconst2=(x9235*x9236);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9239=((-1.0)*r20);
IkReal x9240=x8887;
CheckValue<IkReal> x9242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9239),IKFAST_ATAN2_MAGTHRESH);
if(!x9242.valid){
continue;
}
IkReal x9241=((-1.0)*(x9242.value));
sj5=gconst1;
cj5=gconst2;
j5=x9241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9241;
IkReal gconst1=(r21*x9240);
IkReal gconst2=(x9239*x9240);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9243=((-1.0)*r20);
IkReal x9244=x8887;
CheckValue<IkReal> x9246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9243),IKFAST_ATAN2_MAGTHRESH);
if(!x9246.valid){
continue;
}
IkReal x9245=((-1.0)*(x9246.value));
sj5=gconst1;
cj5=gconst2;
j5=x9245;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9245;
IkReal gconst1=(r21*x9244);
IkReal gconst2=(x9243*x9244);
IkReal x9247=r22*r22;
IkReal x9248=(cj1*r12*sj2);
IkReal x9249=(cj2*r12*sj1);
CheckValue<IkReal> x9253=IKPowWithIntegerCheck(((-1.0)+x9247),-1);
if(!x9253.valid){
continue;
}
IkReal x9250=x9253.value;
if((((1.0)+(((-1.0)*x9247)))) < -0.00001)
continue;
IkReal x9251=IKsqrt(((1.0)+(((-1.0)*x9247))));
IkReal x9252=((1.0)*r22*x9250*x9251);
j4eval[0]=((IKabs(((((-1.0)*x9249*x9252))+(((-1.0)*x9248*x9252)))))+(IKabs((x9249+x9248))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9254=((1.0)*gconst1);
IkReal x9255=(cj2*sj1);
IkReal x9256=(gconst2*r10);
IkReal x9257=(cj1*sj2);
CheckValue<IkReal> x9258=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9254))+(((-1.0)*gconst2*r01)))),-1);
if(!x9258.valid){
continue;
}
CheckValue<IkReal> x9259 = IKatan2WithCheck(IkReal((((x9255*x9256))+(((-1.0)*r11*x9254*x9257))+(((-1.0)*r11*x9254*x9255))+((x9256*x9257)))),IkReal((((r12*x9257))+((r12*x9255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9258.value)))+(x9259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9260=IKsin(j4);
IkReal x9261=IKcos(j4);
IkReal x9262=((1.0)*x9261);
IkReal x9263=(gconst2*x9261);
IkReal x9264=(gconst1*x9260);
IkReal x9265=((1.0)*x9260);
evalcond[0]=((((-1.0)*gconst2*r20*x9265))+(((-1.0)*r22*x9262))+((r21*x9264)));
evalcond[1]=((((-1.0)*gconst2*r00*x9265))+((r01*x9264))+(((-1.0)*r02*x9262)));
evalcond[2]=((((-1.0)*gconst1*r11*x9262))+((r10*x9263))+(((-1.0)*r12*x9265)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9265))+(((-1.0)*r12*x9262))+((r11*x9264)));
evalcond[4]=((((-1.0)*gconst1*r21*x9262))+((cj2*sj1))+(((-1.0)*r22*x9265))+((cj1*sj2))+((r20*x9263)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9262))+((r00*x9263))+(((-1.0)*r02*x9265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9266=(gconst1*r11);
IkReal x9267=(gconst2*r10);
CheckValue<IkReal> x9268 = IKatan2WithCheck(IkReal((x9267+(((-1.0)*x9266)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9268.valid){
continue;
}
CheckValue<IkReal> x9269=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9266*x9267))+(r12*r12)+(x9266*x9266)+(x9267*x9267))),-1);
if(!x9269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9268.value)+(((1.5707963267949)*(x9269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9270=IKsin(j4);
IkReal x9271=IKcos(j4);
IkReal x9272=((1.0)*x9271);
IkReal x9273=(gconst2*x9271);
IkReal x9274=(gconst1*x9270);
IkReal x9275=((1.0)*x9270);
evalcond[0]=((((-1.0)*gconst2*r20*x9275))+(((-1.0)*r22*x9272))+((r21*x9274)));
evalcond[1]=((((-1.0)*gconst2*r00*x9275))+((r01*x9274))+(((-1.0)*r02*x9272)));
evalcond[2]=((((-1.0)*gconst1*r11*x9272))+((r10*x9273))+(((-1.0)*r12*x9275)));
evalcond[3]=((1.0)+((r11*x9274))+(((-1.0)*r12*x9272))+(((-1.0)*gconst2*r10*x9275)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9272))+(((-1.0)*r22*x9275))+((cj1*sj2))+((r20*x9273)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9272))+((r00*x9273))+(((-1.0)*r02*x9275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9276=((1.0)*gconst2);
CheckValue<IkReal> x9277 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9276))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9277.valid){
continue;
}
CheckValue<IkReal> x9278=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9276)))),-1);
if(!x9278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9277.value)+(((1.5707963267949)*(x9278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9279=IKsin(j4);
IkReal x9280=IKcos(j4);
IkReal x9281=((1.0)*x9280);
IkReal x9282=(gconst2*x9280);
IkReal x9283=(gconst1*x9279);
IkReal x9284=((1.0)*x9279);
evalcond[0]=((((-1.0)*gconst2*r20*x9284))+(((-1.0)*r22*x9281))+((r21*x9283)));
evalcond[1]=((((-1.0)*gconst2*r00*x9284))+((r01*x9283))+(((-1.0)*r02*x9281)));
evalcond[2]=((((-1.0)*r12*x9284))+(((-1.0)*gconst1*r11*x9281))+((r10*x9282)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9281))+((r11*x9283))+(((-1.0)*gconst2*r10*x9284)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9281))+((cj1*sj2))+(((-1.0)*r22*x9284))+((r20*x9282)));
evalcond[5]=((((-1.0)*gconst1*r01*x9281))+((r00*x9282))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9285=((-1.0)*r20);
IkReal x9286=x8887;
CheckValue<IkReal> x9288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9285),IKFAST_ATAN2_MAGTHRESH);
if(!x9288.valid){
continue;
}
IkReal x9287=((-1.0)*(x9288.value));
sj5=gconst1;
cj5=gconst2;
j5=x9287;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9287;
IkReal gconst1=(r21*x9286);
IkReal gconst2=(x9285*x9286);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9289=((-1.0)*r20);
IkReal x9290=x8887;
CheckValue<IkReal> x9292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9289),IKFAST_ATAN2_MAGTHRESH);
if(!x9292.valid){
continue;
}
IkReal x9291=((-1.0)*(x9292.value));
sj5=gconst1;
cj5=gconst2;
j5=x9291;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9291;
IkReal gconst1=(r21*x9290);
IkReal gconst2=(x9289*x9290);
IkReal x9293=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9297=IKPowWithIntegerCheck(x9293,-1);
if(!x9297.valid){
continue;
}
IkReal x9294=x9297.value;
IkReal x9295=((1.0)*x9294);
IkReal x9296=((((-1.0)*(r12*r12)))+(((-1.0)*x9295*(r11*r11)*(r21*r21)))+(((-1.0)*x9295*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9294)));
j4eval[0]=x9296;
j4eval[1]=r12;
j4eval[2]=x9293;
j4eval[3]=IKsign(x9296);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9298=((-1.0)*r20);
IkReal x9299=x8887;
CheckValue<IkReal> x9301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9298),IKFAST_ATAN2_MAGTHRESH);
if(!x9301.valid){
continue;
}
IkReal x9300=((-1.0)*(x9301.value));
sj5=gconst1;
cj5=gconst2;
j5=x9300;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9300;
IkReal gconst1=(r21*x9299);
IkReal gconst2=(x9298*x9299);
IkReal x9302=r22*r22;
IkReal x9303=(cj1*r12*sj2);
IkReal x9304=(cj2*r12*sj1);
CheckValue<IkReal> x9308=IKPowWithIntegerCheck(((-1.0)+x9302),-1);
if(!x9308.valid){
continue;
}
IkReal x9305=x9308.value;
if((((1.0)+(((-1.0)*x9302)))) < -0.00001)
continue;
IkReal x9306=IKsqrt(((1.0)+(((-1.0)*x9302))));
IkReal x9307=((1.0)*r22*x9305*x9306);
j4eval[0]=((IKabs(((((-1.0)*x9303*x9307))+(((-1.0)*x9304*x9307)))))+(IKabs((x9304+x9303))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9309=((1.0)*gconst1);
IkReal x9310=(cj2*sj1);
IkReal x9311=(gconst2*r10);
IkReal x9312=(cj1*sj2);
CheckValue<IkReal> x9313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9309))+(((-1.0)*gconst2*r01)))),-1);
if(!x9313.valid){
continue;
}
CheckValue<IkReal> x9314 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9309*x9310))+(((-1.0)*r11*x9309*x9312))+((x9311*x9312))+((x9310*x9311)))),IkReal((((r12*x9312))+((r12*x9310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9313.value)))+(x9314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9315=IKsin(j4);
IkReal x9316=IKcos(j4);
IkReal x9317=((1.0)*x9316);
IkReal x9318=(gconst2*x9316);
IkReal x9319=(gconst1*x9315);
IkReal x9320=((1.0)*x9315);
evalcond[0]=(((r21*x9319))+(((-1.0)*gconst2*r20*x9320))+(((-1.0)*r22*x9317)));
evalcond[1]=(((r01*x9319))+(((-1.0)*r02*x9317))+(((-1.0)*gconst2*r00*x9320)));
evalcond[2]=((((-1.0)*r12*x9320))+(((-1.0)*gconst1*r11*x9317))+((r10*x9318)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9320))+((r11*x9319))+(((-1.0)*r12*x9317)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9317))+(((-1.0)*r22*x9320))+((cj1*sj2))+((r20*x9318)));
evalcond[5]=((((-1.0)*r02*x9320))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9317))+((r00*x9318))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9321=(gconst1*r11);
IkReal x9322=(gconst2*r10);
CheckValue<IkReal> x9323 = IKatan2WithCheck(IkReal(((((-1.0)*x9321))+x9322)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9323.valid){
continue;
}
CheckValue<IkReal> x9324=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x9321*x9322))+(((-1.0)*(x9322*x9322)))+(((-1.0)*(x9321*x9321))))),-1);
if(!x9324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9323.value)+(((1.5707963267949)*(x9324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9325=IKsin(j4);
IkReal x9326=IKcos(j4);
IkReal x9327=((1.0)*x9326);
IkReal x9328=(gconst2*x9326);
IkReal x9329=(gconst1*x9325);
IkReal x9330=((1.0)*x9325);
evalcond[0]=((((-1.0)*r22*x9327))+(((-1.0)*gconst2*r20*x9330))+((r21*x9329)));
evalcond[1]=((((-1.0)*r02*x9327))+((r01*x9329))+(((-1.0)*gconst2*r00*x9330)));
evalcond[2]=((((-1.0)*r12*x9330))+((r10*x9328))+(((-1.0)*gconst1*r11*x9327)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9327))+(((-1.0)*gconst2*r10*x9330))+((r11*x9329)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9330))+((r20*x9328))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9327)));
evalcond[5]=((((-1.0)*gconst1*r01*x9327))+(((-1.0)*r02*x9330))+((r00*x9328))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9331 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9331.valid){
continue;
}
CheckValue<IkReal> x9332=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9331.value)+(((1.5707963267949)*(x9332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9333=IKsin(j4);
IkReal x9334=IKcos(j4);
IkReal x9335=((1.0)*x9334);
IkReal x9336=(gconst2*x9334);
IkReal x9337=(gconst1*x9333);
IkReal x9338=((1.0)*x9333);
evalcond[0]=((((-1.0)*r22*x9335))+(((-1.0)*gconst2*r20*x9338))+((r21*x9337)));
evalcond[1]=((((-1.0)*r02*x9335))+((r01*x9337))+(((-1.0)*gconst2*r00*x9338)));
evalcond[2]=((((-1.0)*r12*x9338))+((r10*x9336))+(((-1.0)*gconst1*r11*x9335)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9338))+(((-1.0)*r12*x9335))+((r11*x9337)));
evalcond[4]=(((cj2*sj1))+((r20*x9336))+(((-1.0)*r22*x9338))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9335)));
evalcond[5]=((((-1.0)*r02*x9338))+((r00*x9336))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9339=((-1.0)*r20);
IkReal x9340=x8887;
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9339),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
IkReal x9341=((-1.0)*(x9342.value));
sj5=gconst1;
cj5=gconst2;
j5=x9341;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9341;
IkReal gconst1=(r21*x9340);
IkReal gconst2=(x9339*x9340);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9343=((-1.0)*r20);
IkReal x9344=x8887;
CheckValue<IkReal> x9346 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9343),IKFAST_ATAN2_MAGTHRESH);
if(!x9346.valid){
continue;
}
IkReal x9345=((-1.0)*(x9346.value));
sj5=gconst1;
cj5=gconst2;
j5=x9345;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9345;
IkReal gconst1=(r21*x9344);
IkReal gconst2=(x9343*x9344);
IkReal x9347=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9351=IKPowWithIntegerCheck(x9347,-1);
if(!x9351.valid){
continue;
}
IkReal x9348=x9351.value;
IkReal x9349=((1.0)*x9348);
IkReal x9350=((((-1.0)*x9349*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9348))+(((-1.0)*x9349*(r00*r00)*(r20*r20))));
j4eval[0]=x9350;
j4eval[1]=IKsign(x9350);
j4eval[2]=r02;
j4eval[3]=x9347;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9352=((-1.0)*r20);
IkReal x9353=x8887;
CheckValue<IkReal> x9355 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9352),IKFAST_ATAN2_MAGTHRESH);
if(!x9355.valid){
continue;
}
IkReal x9354=((-1.0)*(x9355.value));
sj5=gconst1;
cj5=gconst2;
j5=x9354;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9354;
IkReal gconst1=(r21*x9353);
IkReal gconst2=(x9352*x9353);
IkReal x9356=r22*r22;
IkReal x9357=(cj1*r02*sj2);
IkReal x9358=(cj2*r02*sj1);
CheckValue<IkReal> x9362=IKPowWithIntegerCheck(((-1.0)+x9356),-1);
if(!x9362.valid){
continue;
}
IkReal x9359=x9362.value;
if((((1.0)+(((-1.0)*x9356)))) < -0.00001)
continue;
IkReal x9360=IKsqrt(((1.0)+(((-1.0)*x9356))));
IkReal x9361=((1.0)*r22*x9359*x9360);
j4eval[0]=((IKabs(((((-1.0)*x9358*x9361))+(((-1.0)*x9357*x9361)))))+(IKabs((x9357+x9358))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9363=(cj2*sj1);
IkReal x9364=(cj1*sj2);
IkReal x9365=(gconst2*r00);
IkReal x9366=((1.0)*gconst1*r01);
CheckValue<IkReal> x9367 = IKatan2WithCheck(IkReal((((x9364*x9365))+(((-1.0)*x9364*x9366))+((x9363*x9365))+(((-1.0)*x9363*x9366)))),IkReal((((r02*x9363))+((r02*x9364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9367.valid){
continue;
}
CheckValue<IkReal> x9368=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9367.value)+(((1.5707963267949)*(x9368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9369=IKsin(j4);
IkReal x9370=IKcos(j4);
IkReal x9371=(gconst1*r11);
IkReal x9372=(gconst1*r21);
IkReal x9373=(gconst1*r01);
IkReal x9374=((1.0)*x9370);
IkReal x9375=(gconst2*x9370);
IkReal x9376=((1.0)*x9369);
evalcond[0]=(((x9369*x9372))+(((-1.0)*r22*x9374))+(((-1.0)*gconst2*r20*x9376)));
evalcond[1]=((((-1.0)*gconst2*r10*x9376))+((x9369*x9371))+(((-1.0)*r12*x9374)));
evalcond[2]=((((-1.0)*x9373*x9374))+(((-1.0)*r02*x9376))+((r00*x9375)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9374))+(((-1.0)*gconst2*r00*x9376))+((x9369*x9373)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9372*x9374))+(((-1.0)*r22*x9376))+((r20*x9375)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9371*x9374))+(((-1.0)*r12*x9376))+((r10*x9375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9377=(gconst2*r00);
IkReal x9378=(gconst1*r01);
CheckValue<IkReal> x9379=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9378*x9378)))+(((2.0)*x9377*x9378))+(((-1.0)*(x9377*x9377))))),-1);
if(!x9379.valid){
continue;
}
CheckValue<IkReal> x9380 = IKatan2WithCheck(IkReal((x9377+(((-1.0)*x9378)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9379.value)))+(x9380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9381=IKsin(j4);
IkReal x9382=IKcos(j4);
IkReal x9383=(gconst1*r11);
IkReal x9384=(gconst1*r21);
IkReal x9385=(gconst1*r01);
IkReal x9386=((1.0)*x9382);
IkReal x9387=(gconst2*x9382);
IkReal x9388=((1.0)*x9381);
evalcond[0]=(((x9381*x9384))+(((-1.0)*gconst2*r20*x9388))+(((-1.0)*r22*x9386)));
evalcond[1]=(((x9381*x9383))+(((-1.0)*r12*x9386))+(((-1.0)*gconst2*r10*x9388)));
evalcond[2]=((((-1.0)*r02*x9388))+(((-1.0)*x9385*x9386))+((r00*x9387)));
evalcond[3]=((-1.0)+((x9381*x9385))+(((-1.0)*r02*x9386))+(((-1.0)*gconst2*r00*x9388)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9384*x9386))+(((-1.0)*r22*x9388))+((r20*x9387)));
evalcond[5]=(((r10*x9387))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9388))+(((-1.0)*x9383*x9386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9389=((1.0)*gconst2);
CheckValue<IkReal> x9390 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9389))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9390.valid){
continue;
}
CheckValue<IkReal> x9391=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9389)))),-1);
if(!x9391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9390.value)+(((1.5707963267949)*(x9391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9392=IKsin(j4);
IkReal x9393=IKcos(j4);
IkReal x9394=(gconst1*r11);
IkReal x9395=(gconst1*r21);
IkReal x9396=(gconst1*r01);
IkReal x9397=((1.0)*x9393);
IkReal x9398=(gconst2*x9393);
IkReal x9399=((1.0)*x9392);
evalcond[0]=(((x9392*x9395))+(((-1.0)*gconst2*r20*x9399))+(((-1.0)*r22*x9397)));
evalcond[1]=((((-1.0)*r12*x9397))+((x9392*x9394))+(((-1.0)*gconst2*r10*x9399)));
evalcond[2]=((((-1.0)*x9396*x9397))+(((-1.0)*r02*x9399))+((r00*x9398)));
evalcond[3]=((-1.0)+((x9392*x9396))+(((-1.0)*gconst2*r00*x9399))+(((-1.0)*r02*x9397)));
evalcond[4]=(((cj2*sj1))+((r20*x9398))+((cj1*sj2))+(((-1.0)*r22*x9399))+(((-1.0)*x9395*x9397)));
evalcond[5]=((((-1.0)*r12*x9399))+((r10*x9398))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9394*x9397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9400=((-1.0)*r20);
IkReal x9401=x8887;
CheckValue<IkReal> x9403 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9400),IKFAST_ATAN2_MAGTHRESH);
if(!x9403.valid){
continue;
}
IkReal x9402=((-1.0)*(x9403.value));
sj5=gconst1;
cj5=gconst2;
j5=x9402;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9402;
IkReal gconst1=(r21*x9401);
IkReal gconst2=(x9400*x9401);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9404=((-1.0)*r20);
IkReal x9405=x8887;
CheckValue<IkReal> x9407 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9404),IKFAST_ATAN2_MAGTHRESH);
if(!x9407.valid){
continue;
}
IkReal x9406=((-1.0)*(x9407.value));
sj5=gconst1;
cj5=gconst2;
j5=x9406;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9406;
IkReal gconst1=(r21*x9405);
IkReal gconst2=(x9404*x9405);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9408=((-1.0)*r20);
IkReal x9409=x8887;
CheckValue<IkReal> x9411 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9408),IKFAST_ATAN2_MAGTHRESH);
if(!x9411.valid){
continue;
}
IkReal x9410=((-1.0)*(x9411.value));
sj5=gconst1;
cj5=gconst2;
j5=x9410;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9410;
IkReal gconst1=(r21*x9409);
IkReal gconst2=(x9408*x9409);
IkReal x9412=r22*r22;
IkReal x9413=(cj1*r02*sj2);
IkReal x9414=(cj2*r02*sj1);
CheckValue<IkReal> x9418=IKPowWithIntegerCheck(((-1.0)+x9412),-1);
if(!x9418.valid){
continue;
}
IkReal x9415=x9418.value;
if((((1.0)+(((-1.0)*x9412)))) < -0.00001)
continue;
IkReal x9416=IKsqrt(((1.0)+(((-1.0)*x9412))));
IkReal x9417=((1.0)*r22*x9415*x9416);
j4eval[0]=((IKabs((x9413+x9414)))+(IKabs(((((-1.0)*x9414*x9417))+(((-1.0)*x9413*x9417))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9419=(cj2*sj1);
IkReal x9420=(cj1*sj2);
IkReal x9421=(gconst2*r00);
IkReal x9422=((1.0)*gconst1*r01);
CheckValue<IkReal> x9423=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9423.valid){
continue;
}
CheckValue<IkReal> x9424 = IKatan2WithCheck(IkReal((((x9419*x9421))+(((-1.0)*x9420*x9422))+((x9420*x9421))+(((-1.0)*x9419*x9422)))),IkReal((((r02*x9419))+((r02*x9420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9423.value)))+(x9424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9425=IKsin(j4);
IkReal x9426=IKcos(j4);
IkReal x9427=(gconst1*r11);
IkReal x9428=(gconst1*r21);
IkReal x9429=(gconst1*r01);
IkReal x9430=((1.0)*x9426);
IkReal x9431=(gconst2*x9426);
IkReal x9432=((1.0)*x9425);
evalcond[0]=(((x9425*x9428))+(((-1.0)*gconst2*r20*x9432))+(((-1.0)*r22*x9430)));
evalcond[1]=((((-1.0)*gconst2*r10*x9432))+((x9425*x9427))+(((-1.0)*r12*x9430)));
evalcond[2]=((((-1.0)*r02*x9432))+(((-1.0)*x9429*x9430))+((r00*x9431)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9432))+((x9425*x9429))+(((-1.0)*r02*x9430)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9428*x9430))+((r20*x9431))+(((-1.0)*r22*x9432)));
evalcond[5]=((((-1.0)*x9427*x9430))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9432))+((cj1*cj2))+((r10*x9431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9433=(gconst1*r01);
IkReal x9434=(gconst2*r00);
CheckValue<IkReal> x9435=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9433*x9434))+(x9433*x9433)+(x9434*x9434)+(r02*r02))),-1);
if(!x9435.valid){
continue;
}
CheckValue<IkReal> x9436 = IKatan2WithCheck(IkReal(((((-1.0)*x9433))+x9434)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9435.value)))+(x9436.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9437=IKsin(j4);
IkReal x9438=IKcos(j4);
IkReal x9439=(gconst1*r11);
IkReal x9440=(gconst1*r21);
IkReal x9441=(gconst1*r01);
IkReal x9442=((1.0)*x9438);
IkReal x9443=(gconst2*x9438);
IkReal x9444=((1.0)*x9437);
evalcond[0]=(((x9437*x9440))+(((-1.0)*gconst2*r20*x9444))+(((-1.0)*r22*x9442)));
evalcond[1]=(((x9437*x9439))+(((-1.0)*gconst2*r10*x9444))+(((-1.0)*r12*x9442)));
evalcond[2]=(((r00*x9443))+(((-1.0)*x9441*x9442))+(((-1.0)*r02*x9444)));
evalcond[3]=((1.0)+((x9437*x9441))+(((-1.0)*gconst2*r00*x9444))+(((-1.0)*r02*x9442)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9444))+(((-1.0)*x9440*x9442))+((r20*x9443)));
evalcond[5]=(((r10*x9443))+(((-1.0)*x9439*x9442))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x9444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9445 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9445.valid){
continue;
}
CheckValue<IkReal> x9446=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9445.value)+(((1.5707963267949)*(x9446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9447=IKsin(j4);
IkReal x9448=IKcos(j4);
IkReal x9449=(gconst1*r11);
IkReal x9450=(gconst1*r21);
IkReal x9451=(gconst1*r01);
IkReal x9452=((1.0)*x9448);
IkReal x9453=(gconst2*x9448);
IkReal x9454=((1.0)*x9447);
evalcond[0]=((((-1.0)*gconst2*r20*x9454))+(((-1.0)*r22*x9452))+((x9447*x9450)));
evalcond[1]=(((x9447*x9449))+(((-1.0)*gconst2*r10*x9454))+(((-1.0)*r12*x9452)));
evalcond[2]=((((-1.0)*x9451*x9452))+((r00*x9453))+(((-1.0)*r02*x9454)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9454))+(((-1.0)*r02*x9452))+((x9447*x9451)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9450*x9452))+((cj1*sj2))+(((-1.0)*r22*x9454))+((r20*x9453)));
evalcond[5]=(((r10*x9453))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x9449*x9452))+(((-1.0)*r12*x9454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9455=((-1.0)*r20);
IkReal x9456=((-1.0)*px);
CheckValue<IkReal> x9458 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9455),IKFAST_ATAN2_MAGTHRESH);
if(!x9458.valid){
continue;
}
IkReal x9457=((-1.0)*(x9458.value));
sj5=gconst1;
cj5=gconst2;
j5=x9457;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9456);
rxp1_1=(px*r21);
rxp1_2=(r11*x9456);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9457;
IkReal gconst1=r21;
IkReal gconst2=x9455;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9459=((-1.0)*r20);
IkReal x9460=((-1.0)*px);
CheckValue<IkReal> x9462 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9459),IKFAST_ATAN2_MAGTHRESH);
if(!x9462.valid){
continue;
}
IkReal x9461=((-1.0)*(x9462.value));
sj5=gconst1;
cj5=gconst2;
j5=x9461;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9460);
rxp1_1=(px*r21);
rxp1_2=(r11*x9460);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9461;
IkReal gconst1=r21;
IkReal gconst2=x9459;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9463=((-1.0)*r20);
IkReal x9464=((-1.0)*px);
CheckValue<IkReal> x9466 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9463),IKFAST_ATAN2_MAGTHRESH);
if(!x9466.valid){
continue;
}
IkReal x9465=((-1.0)*(x9466.value));
sj5=gconst1;
cj5=gconst2;
j5=x9465;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9464);
rxp1_1=(px*r21);
rxp1_2=(r11*x9464);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9465;
IkReal gconst1=r21;
IkReal gconst2=x9463;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9469=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9469.valid){
continue;
}
IkReal x9467=x9469.value;
IkReal x9468=(sj0*x9467);
cj4array[0]=(((cj1*cj2*x9468))+(((-1.0)*sj1*sj2*x9468)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9470=IKsin(j4);
IkReal x9471=IKcos(j4);
IkReal x9472=(gconst1*x9470);
IkReal x9473=((1.0)*x9471);
IkReal x9474=((1.0)*gconst2*x9470);
evalcond[0]=((-1.0)*r02*x9470);
evalcond[1]=((((-1.0)*r02*x9473))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x9472))+(((-1.0)*r20*x9474)));
evalcond[3]=((((-1.0)*r10*x9474))+((r11*x9472)));
evalcond[4]=(((cj2*sj1))+((gconst2*r20*x9471))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9477=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9477.valid){
continue;
}
IkReal x9475=x9477.value;
IkReal x9476=((1.0)*x9475);
cj4array[0]=((((-1.0)*cj2*sj1*x9476))+(((-1.0)*cj1*sj2*x9476)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9478=IKsin(j4);
IkReal x9479=IKcos(j4);
IkReal x9480=(gconst2*r10);
IkReal x9481=((1.0)*sj0);
IkReal x9482=(gconst1*r11);
IkReal x9483=((1.0)*x9478);
IkReal x9484=((1.0)*x9479);
evalcond[0]=((-1.0)*r02*x9478);
evalcond[1]=((((-1.0)*r02*x9484))+(((-1.0)*x9481)));
evalcond[2]=(((gconst1*r21*x9478))+(((-1.0)*gconst2*r20*x9483)));
evalcond[3]=(((x9478*x9482))+(((-1.0)*x9480*x9483)));
evalcond[4]=((((-1.0)*x9482*x9484))+((x9479*x9480))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9485=IKPowWithIntegerCheck(r02,-1);
if(!x9485.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9485.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9486=IKsin(j4);
IkReal x9487=IKcos(j4);
IkReal x9488=(gconst2*r10);
IkReal x9489=(gconst1*r11);
IkReal x9490=(gconst1*r21);
IkReal x9491=(gconst2*r20);
IkReal x9492=((1.0)*x9486);
IkReal x9493=((1.0)*x9487);
evalcond[0]=((-1.0)*r02*x9486);
evalcond[1]=((((-1.0)*x9491*x9492))+((x9486*x9490)));
evalcond[2]=(((x9486*x9489))+(((-1.0)*x9488*x9492)));
evalcond[3]=(((cj2*sj1))+((x9487*x9491))+((cj1*sj2))+(((-1.0)*x9490*x9493)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9489*x9493))+((x9487*x9488))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9494=(cj2*sj1);
IkReal x9495=(cj1*sj2);
IkReal x9496=(gconst1*r21);
IkReal x9497=((1.0)*gconst2*r20);
CheckValue<IkReal> x9498 = IKatan2WithCheck(IkReal((((r22*x9494))+((r22*x9495)))),IkReal(((((-1.0)*x9495*x9497))+(((-1.0)*x9494*x9497))+((x9495*x9496))+((x9494*x9496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9498.valid){
continue;
}
CheckValue<IkReal> x9499=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9496))+(x9496*x9496))),-1);
if(!x9499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9498.value)+(((1.5707963267949)*(x9499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9500=IKsin(j4);
IkReal x9501=IKcos(j4);
IkReal x9502=(gconst1*r11);
IkReal x9503=(sj1*sj2);
IkReal x9504=(gconst1*r21);
IkReal x9505=(gconst1*r01);
IkReal x9506=((1.0)*x9501);
IkReal x9507=(gconst2*x9501);
IkReal x9508=((1.0)*cj1*cj2);
IkReal x9509=((1.0)*x9500);
evalcond[0]=((((-1.0)*r22*x9506))+((x9500*x9504))+(((-1.0)*gconst2*r20*x9509)));
evalcond[1]=(cj0+((x9500*x9502))+(((-1.0)*r12*x9506))+(((-1.0)*gconst2*r10*x9509)));
evalcond[2]=((((-1.0)*sj0))+((x9500*x9505))+(((-1.0)*gconst2*r00*x9509))+(((-1.0)*r02*x9506)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9504*x9506))+((cj1*sj2))+(((-1.0)*r22*x9509))+((r20*x9507)));
evalcond[4]=((((-1.0)*x9505*x9506))+((cj0*x9503))+(((-1.0)*cj0*x9508))+(((-1.0)*r02*x9509))+((r00*x9507)));
evalcond[5]=(((r10*x9507))+(((-1.0)*r12*x9509))+(((-1.0)*sj0*x9508))+(((-1.0)*x9502*x9506))+((sj0*x9503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9510=((1.0)*gconst2);
CheckValue<IkReal> x9511=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9510)))),-1);
if(!x9511.valid){
continue;
}
CheckValue<IkReal> x9512 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9510))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9511.value)))+(x9512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9513=IKsin(j4);
IkReal x9514=IKcos(j4);
IkReal x9515=(gconst1*r11);
IkReal x9516=(sj1*sj2);
IkReal x9517=(gconst1*r21);
IkReal x9518=(gconst1*r01);
IkReal x9519=((1.0)*x9514);
IkReal x9520=(gconst2*x9514);
IkReal x9521=((1.0)*cj1*cj2);
IkReal x9522=((1.0)*x9513);
evalcond[0]=(((x9513*x9517))+(((-1.0)*r22*x9519))+(((-1.0)*gconst2*r20*x9522)));
evalcond[1]=((((-1.0)*gconst2*r10*x9522))+cj0+((x9513*x9515))+(((-1.0)*r12*x9519)));
evalcond[2]=((((-1.0)*r02*x9519))+(((-1.0)*sj0))+((x9513*x9518))+(((-1.0)*gconst2*r00*x9522)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9517*x9519))+((r20*x9520))+((cj1*sj2))+(((-1.0)*r22*x9522)));
evalcond[4]=((((-1.0)*cj0*x9521))+((cj0*x9516))+(((-1.0)*r02*x9522))+((r00*x9520))+(((-1.0)*x9518*x9519)));
evalcond[5]=((((-1.0)*r12*x9522))+((r10*x9520))+((sj0*x9516))+(((-1.0)*sj0*x9521))+(((-1.0)*x9515*x9519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9523=((1.0)*gconst2);
CheckValue<IkReal> x9524 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9523))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9524.valid){
continue;
}
CheckValue<IkReal> x9525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9523))+(((-1.0)*gconst1*r00)))),-1);
if(!x9525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9524.value)+(((1.5707963267949)*(x9525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9526=IKsin(j4);
IkReal x9527=IKcos(j4);
IkReal x9528=(gconst1*r11);
IkReal x9529=(sj1*sj2);
IkReal x9530=(gconst1*r21);
IkReal x9531=(gconst1*r01);
IkReal x9532=((1.0)*x9527);
IkReal x9533=(gconst2*x9527);
IkReal x9534=((1.0)*cj1*cj2);
IkReal x9535=((1.0)*x9526);
evalcond[0]=((((-1.0)*r22*x9532))+((x9526*x9530))+(((-1.0)*gconst2*r20*x9535)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9535))+((x9526*x9528))+(((-1.0)*r12*x9532)));
evalcond[2]=((((-1.0)*sj0))+((x9526*x9531))+(((-1.0)*gconst2*r00*x9535))+(((-1.0)*r02*x9532)));
evalcond[3]=(((cj2*sj1))+((r20*x9533))+(((-1.0)*r22*x9535))+((cj1*sj2))+(((-1.0)*x9530*x9532)));
evalcond[4]=((((-1.0)*x9531*x9532))+(((-1.0)*cj0*x9534))+((cj0*x9529))+(((-1.0)*r02*x9535))+((r00*x9533)));
evalcond[5]=(((sj0*x9529))+((r10*x9533))+(((-1.0)*sj0*x9534))+(((-1.0)*r12*x9535))+(((-1.0)*x9528*x9532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9536=((-1.0)*r20);
IkReal x9537=x8887;
CheckValue<IkReal> x9539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9536),IKFAST_ATAN2_MAGTHRESH);
if(!x9539.valid){
continue;
}
IkReal x9538=((-1.0)*(x9539.value));
sj5=gconst1;
cj5=gconst2;
j5=x9538;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9538;
IkReal gconst1=(r21*x9537);
IkReal gconst2=(x9536*x9537);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9540=((-1.0)*r20);
IkReal x9541=x8887;
CheckValue<IkReal> x9543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9540),IKFAST_ATAN2_MAGTHRESH);
if(!x9543.valid){
continue;
}
IkReal x9542=((-1.0)*(x9543.value));
sj5=gconst1;
cj5=gconst2;
j5=x9542;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9542;
IkReal gconst1=(r21*x9541);
IkReal gconst2=(x9540*x9541);
CheckValue<IkReal> x9551=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9551.valid){
continue;
}
IkReal x9544=x9551.value;
IkReal x9545=(sj3*x9544);
IkReal x9546=(r11*x9545);
IkReal x9547=(r00*x9545);
IkReal x9548=(r01*x9545);
IkReal x9549=(r10*x9545);
IkReal x9550=(r20*r21*x9545);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9547*(r20*r20)))+((r00*r20*r21*x9546))+((r10*r20*r21*x9548))+((r01*x9546*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9552=gconst2*gconst2;
IkReal x9553=gconst1*gconst1;
IkReal x9554=((1.0)*cj3);
IkReal x9555=((1.0)*sj3);
IkReal x9556=(r11*sj3);
IkReal x9557=(r10*sj3);
IkReal x9558=(gconst1*gconst2*r00);
IkReal x9559=(gconst1*gconst2*r01);
IkReal x9560=(r00*x9552);
IkReal x9561=(r01*x9553);
CheckValue<IkReal> x9562 = IKatan2WithCheck(IkReal((((gconst1*r02*x9557))+((gconst2*r02*x9556)))),IkReal(((((-1.0)*r11*x9555*x9560))+((x9556*x9559))+((x9557*x9561))+(((-1.0)*r10*x9555*x9558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9562.valid){
continue;
}
CheckValue<IkReal> x9563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9554*x9561))+(((-1.0)*r10*x9554*x9560))+(((-1.0)*r02*r12*x9554))+((cj3*r11*x9558))+((cj3*r10*x9559)))),-1);
if(!x9563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9562.value)+(((1.5707963267949)*(x9563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9564=IKsin(j4);
IkReal x9565=IKcos(j4);
IkReal x9566=(sj1*sj2);
IkReal x9567=(gconst1*sj3);
IkReal x9568=(cj3*gconst1);
IkReal x9569=(cj3*gconst2);
IkReal x9570=((1.0)*cj2);
IkReal x9571=(cj1*sj2);
IkReal x9572=(gconst2*sj3);
IkReal x9573=(cj1*x9570);
IkReal x9574=((1.0)*x9565);
IkReal x9575=((1.0)*x9564);
IkReal x9576=(gconst1*x9564);
IkReal x9577=(cj3*x9564);
IkReal x9578=(x9565*x9572);
evalcond[0]=((((-1.0)*gconst2*r20*x9575))+((r21*x9576))+(((-1.0)*r22*x9574)));
evalcond[1]=((((-1.0)*r02*x9574))+((r01*x9576))+(((-1.0)*gconst2*r00*x9575)));
evalcond[2]=((1.0)+((r11*x9576))+(((-1.0)*r12*x9574))+(((-1.0)*gconst2*r10*x9575)));
evalcond[3]=((((-1.0)*r10*x9569*x9574))+((r11*x9565*x9568))+((r11*x9572))+((r12*x9577))+((r10*x9567)));
evalcond[4]=((((-1.0)*r11*x9567*x9574))+((r11*x9569))+((r10*x9568))+(((-1.0)*r12*sj3*x9575))+((r10*x9578)));
evalcond[5]=(((cj2*sj1))+((r21*x9572))+((r22*x9577))+((r21*x9565*x9568))+x9571+(((-1.0)*r20*x9569*x9574))+((r20*x9567)));
evalcond[6]=(((r00*x9567))+(((-1.0)*x9573))+((r01*x9572))+(((-1.0)*r00*x9569*x9574))+x9566+((r02*x9577))+((r01*x9565*x9568)));
evalcond[7]=(((r21*x9569))+(((-1.0)*x9573))+(((-1.0)*r22*sj3*x9575))+x9566+(((-1.0)*r21*x9567*x9574))+((r20*x9578))+((r20*x9568)));
evalcond[8]=((((-1.0)*r02*sj3*x9575))+((r01*x9569))+((r00*x9568))+(((-1.0)*x9571))+((r00*x9578))+(((-1.0)*sj1*x9570))+(((-1.0)*r01*x9567*x9574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9579=gconst2*gconst2;
IkReal x9580=gconst1*gconst1;
IkReal x9581=(gconst2*r11);
IkReal x9582=(cj3*r02);
IkReal x9583=(gconst1*r01);
IkReal x9584=(cj3*r10);
IkReal x9585=(r10*sj3);
IkReal x9586=((1.0)*gconst1*r00);
IkReal x9587=(r01*x9580);
IkReal x9588=(r00*x9579);
CheckValue<IkReal> x9589 = IKatan2WithCheck(IkReal((((x9581*x9582))+((gconst1*r10*x9582)))),IkReal(((((-1.0)*cj3*r11*x9588))+((x9584*x9587))+(((-1.0)*gconst2*x9584*x9586))+((cj3*x9581*x9583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9589.valid){
continue;
}
CheckValue<IkReal> x9590=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9583*x9585))+((x9585*x9588))+(((-1.0)*sj3*x9581*x9586))+((r11*sj3*x9587)))),-1);
if(!x9590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9589.value)+(((1.5707963267949)*(x9590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9591=IKsin(j4);
IkReal x9592=IKcos(j4);
IkReal x9593=(sj1*sj2);
IkReal x9594=(gconst1*sj3);
IkReal x9595=(cj3*gconst1);
IkReal x9596=(cj3*gconst2);
IkReal x9597=((1.0)*cj2);
IkReal x9598=(cj1*sj2);
IkReal x9599=(gconst2*sj3);
IkReal x9600=(cj1*x9597);
IkReal x9601=((1.0)*x9592);
IkReal x9602=((1.0)*x9591);
IkReal x9603=(gconst1*x9591);
IkReal x9604=(cj3*x9591);
IkReal x9605=(x9592*x9599);
evalcond[0]=((((-1.0)*r22*x9601))+((r21*x9603))+(((-1.0)*gconst2*r20*x9602)));
evalcond[1]=(((r01*x9603))+(((-1.0)*r02*x9601))+(((-1.0)*gconst2*r00*x9602)));
evalcond[2]=((1.0)+((r11*x9603))+(((-1.0)*r12*x9601))+(((-1.0)*gconst2*r10*x9602)));
evalcond[3]=(((r11*x9599))+((r12*x9604))+((r11*x9592*x9595))+((r10*x9594))+(((-1.0)*r10*x9596*x9601)));
evalcond[4]=(((r11*x9596))+((r10*x9605))+(((-1.0)*r12*sj3*x9602))+((r10*x9595))+(((-1.0)*r11*x9594*x9601)));
evalcond[5]=(((r20*x9594))+((cj2*sj1))+((r21*x9592*x9595))+x9598+((r21*x9599))+((r22*x9604))+(((-1.0)*r20*x9596*x9601)));
evalcond[6]=(((r01*x9592*x9595))+((r01*x9599))+(((-1.0)*x9600))+((r00*x9594))+x9593+(((-1.0)*r00*x9596*x9601))+((r02*x9604)));
evalcond[7]=(((r20*x9595))+(((-1.0)*x9600))+(((-1.0)*r21*x9594*x9601))+((r20*x9605))+x9593+((r21*x9596))+(((-1.0)*r22*sj3*x9602)));
evalcond[8]=((((-1.0)*sj1*x9597))+(((-1.0)*r02*sj3*x9602))+((r01*x9596))+((r00*x9605))+((r00*x9595))+(((-1.0)*r01*x9594*x9601))+(((-1.0)*x9598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9606=((1.0)*gconst2);
CheckValue<IkReal> x9607 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9606))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9607.valid){
continue;
}
CheckValue<IkReal> x9608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9606))+(((-1.0)*gconst1*r00)))),-1);
if(!x9608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9607.value)+(((1.5707963267949)*(x9608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9609=IKsin(j4);
IkReal x9610=IKcos(j4);
IkReal x9611=(sj1*sj2);
IkReal x9612=(gconst1*sj3);
IkReal x9613=(cj3*gconst1);
IkReal x9614=(cj3*gconst2);
IkReal x9615=((1.0)*cj2);
IkReal x9616=(cj1*sj2);
IkReal x9617=(gconst2*sj3);
IkReal x9618=(cj1*x9615);
IkReal x9619=((1.0)*x9610);
IkReal x9620=((1.0)*x9609);
IkReal x9621=(gconst1*x9609);
IkReal x9622=(cj3*x9609);
IkReal x9623=(x9610*x9617);
evalcond[0]=((((-1.0)*r22*x9619))+((r21*x9621))+(((-1.0)*gconst2*r20*x9620)));
evalcond[1]=(((r01*x9621))+(((-1.0)*gconst2*r00*x9620))+(((-1.0)*r02*x9619)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9619))+((r11*x9621))+(((-1.0)*gconst2*r10*x9620)));
evalcond[3]=(((r11*x9610*x9613))+((r10*x9612))+((r12*x9622))+((r11*x9617))+(((-1.0)*r10*x9614*x9619)));
evalcond[4]=((((-1.0)*r11*x9612*x9619))+((r10*x9623))+((r10*x9613))+(((-1.0)*r12*sj3*x9620))+((r11*x9614)));
evalcond[5]=(((cj2*sj1))+((r20*x9612))+((r21*x9617))+((r22*x9622))+x9616+(((-1.0)*r20*x9614*x9619))+((r21*x9610*x9613)));
evalcond[6]=(((r00*x9612))+((r01*x9610*x9613))+((r01*x9617))+((r02*x9622))+x9611+(((-1.0)*x9618))+(((-1.0)*r00*x9614*x9619)));
evalcond[7]=((((-1.0)*r21*x9612*x9619))+((r20*x9613))+((r20*x9623))+(((-1.0)*r22*sj3*x9620))+((r21*x9614))+x9611+(((-1.0)*x9618)));
evalcond[8]=(((r00*x9623))+((r00*x9613))+((r01*x9614))+(((-1.0)*r01*x9612*x9619))+(((-1.0)*x9616))+(((-1.0)*r02*sj3*x9620))+(((-1.0)*sj1*x9615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9624=((-1.0)*r20);
IkReal x9625=x8887;
CheckValue<IkReal> x9627 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9624),IKFAST_ATAN2_MAGTHRESH);
if(!x9627.valid){
continue;
}
IkReal x9626=((-1.0)*(x9627.value));
sj5=gconst1;
cj5=gconst2;
j5=x9626;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9626;
IkReal gconst1=(r21*x9625);
IkReal gconst2=(x9624*x9625);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9628=((-1.0)*r20);
IkReal x9629=x8887;
CheckValue<IkReal> x9631 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9628),IKFAST_ATAN2_MAGTHRESH);
if(!x9631.valid){
continue;
}
IkReal x9630=((-1.0)*(x9631.value));
sj5=gconst1;
cj5=gconst2;
j5=x9630;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9630;
IkReal gconst1=(r21*x9629);
IkReal gconst2=(x9628*x9629);
CheckValue<IkReal> x9639=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9639.valid){
continue;
}
IkReal x9632=x9639.value;
IkReal x9633=(sj3*x9632);
IkReal x9634=(r11*x9633);
IkReal x9635=(r00*x9633);
IkReal x9636=(r01*x9633);
IkReal x9637=(r10*x9633);
IkReal x9638=(r20*r21*x9633);
j4eval[0]=IKsign((((r10*x9635*(r20*r20)))+((r02*r12*sj3))+((r00*r20*r21*x9634))+((r01*x9634*(r21*r21)))+((r10*r20*r21*x9636))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9640=gconst2*gconst2;
IkReal x9641=gconst1*gconst1;
IkReal x9642=((1.0)*cj3);
IkReal x9643=((1.0)*sj3);
IkReal x9644=(r11*sj3);
IkReal x9645=(r10*sj3);
IkReal x9646=(gconst1*gconst2*r00);
IkReal x9647=(gconst1*gconst2*r01);
IkReal x9648=(r00*x9640);
IkReal x9649=(r01*x9641);
CheckValue<IkReal> x9650=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9647))+(((-1.0)*r11*x9642*x9649))+(((-1.0)*r02*r12*x9642))+(((-1.0)*r10*x9642*x9648))+((cj3*r11*x9646)))),-1);
if(!x9650.valid){
continue;
}
CheckValue<IkReal> x9651 = IKatan2WithCheck(IkReal((((gconst1*r02*x9645))+((gconst2*r02*x9644)))),IkReal((((x9644*x9647))+(((-1.0)*r11*x9643*x9648))+((x9645*x9649))+(((-1.0)*r10*x9643*x9646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9650.value)))+(x9651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9652=IKsin(j4);
IkReal x9653=IKcos(j4);
IkReal x9654=(cj2*sj1);
IkReal x9655=(cj1*sj2);
IkReal x9656=(gconst1*sj3);
IkReal x9657=(cj3*gconst1);
IkReal x9658=(sj1*sj2);
IkReal x9659=(cj3*gconst2);
IkReal x9660=(cj1*cj2);
IkReal x9661=(gconst2*sj3);
IkReal x9662=((1.0)*x9653);
IkReal x9663=((1.0)*x9652);
IkReal x9664=(gconst1*x9652);
IkReal x9665=(cj3*x9652);
IkReal x9666=(x9654+x9655);
IkReal x9667=(x9653*x9661);
evalcond[0]=((((-1.0)*gconst2*r20*x9663))+((r21*x9664))+(((-1.0)*r22*x9662)));
evalcond[1]=(((r01*x9664))+(((-1.0)*gconst2*r00*x9663))+(((-1.0)*r02*x9662)));
evalcond[2]=((-1.0)+((r11*x9664))+(((-1.0)*r12*x9662))+(((-1.0)*gconst2*r10*x9663)));
evalcond[3]=(((r11*x9661))+((r12*x9665))+(((-1.0)*r10*x9659*x9662))+((r10*x9656))+((r11*x9653*x9657)));
evalcond[4]=(((r11*x9659))+(((-1.0)*r11*x9656*x9662))+((r10*x9667))+((r10*x9657))+(((-1.0)*r12*sj3*x9663)));
evalcond[5]=((((-1.0)*r20*x9659*x9662))+((r21*x9661))+((r20*x9656))+x9666+((r22*x9665))+((r21*x9653*x9657)));
evalcond[6]=((((-1.0)*r00*x9659*x9662))+((r00*x9656))+x9660+((r01*x9661))+(((-1.0)*x9658))+((r01*x9653*x9657))+((r02*x9665)));
evalcond[7]=((((-1.0)*r02*sj3*x9663))+((r00*x9667))+((r01*x9659))+((r00*x9657))+(((-1.0)*r01*x9656*x9662))+x9666);
evalcond[8]=(((r21*x9659))+((r20*x9657))+(((-1.0)*r21*x9656*x9662))+((r20*x9667))+x9658+(((-1.0)*x9660))+(((-1.0)*r22*sj3*x9663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9668=gconst2*gconst2;
IkReal x9669=gconst1*gconst1;
IkReal x9670=(gconst2*r11);
IkReal x9671=(cj3*r02);
IkReal x9672=(gconst1*r01);
IkReal x9673=(cj3*r10);
IkReal x9674=(r10*sj3);
IkReal x9675=((1.0)*gconst1*r00);
IkReal x9676=(r01*x9669);
IkReal x9677=(r00*x9668);
CheckValue<IkReal> x9678=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9672*x9674))+((r11*sj3*x9676))+(((-1.0)*sj3*x9670*x9675))+((x9674*x9677)))),-1);
if(!x9678.valid){
continue;
}
CheckValue<IkReal> x9679 = IKatan2WithCheck(IkReal((((gconst1*r10*x9671))+((x9670*x9671)))),IkReal(((((-1.0)*gconst2*x9673*x9675))+(((-1.0)*cj3*r11*x9677))+((x9673*x9676))+((cj3*x9670*x9672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9678.value)))+(x9679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9680=IKsin(j4);
IkReal x9681=IKcos(j4);
IkReal x9682=(cj2*sj1);
IkReal x9683=(cj1*sj2);
IkReal x9684=(gconst1*sj3);
IkReal x9685=(cj3*gconst1);
IkReal x9686=(sj1*sj2);
IkReal x9687=(cj3*gconst2);
IkReal x9688=(cj1*cj2);
IkReal x9689=(gconst2*sj3);
IkReal x9690=((1.0)*x9681);
IkReal x9691=((1.0)*x9680);
IkReal x9692=(gconst1*x9680);
IkReal x9693=(cj3*x9680);
IkReal x9694=(x9683+x9682);
IkReal x9695=(x9681*x9689);
evalcond[0]=(((r21*x9692))+(((-1.0)*r22*x9690))+(((-1.0)*gconst2*r20*x9691)));
evalcond[1]=((((-1.0)*gconst2*r00*x9691))+(((-1.0)*r02*x9690))+((r01*x9692)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9691))+(((-1.0)*r12*x9690))+((r11*x9692)));
evalcond[3]=(((r12*x9693))+((r11*x9681*x9685))+((r11*x9689))+((r10*x9684))+(((-1.0)*r10*x9687*x9690)));
evalcond[4]=((((-1.0)*r11*x9684*x9690))+((r10*x9695))+((r11*x9687))+(((-1.0)*r12*sj3*x9691))+((r10*x9685)));
evalcond[5]=(((r21*x9681*x9685))+(((-1.0)*r20*x9687*x9690))+((r22*x9693))+((r21*x9689))+x9694+((r20*x9684)));
evalcond[6]=((((-1.0)*r00*x9687*x9690))+(((-1.0)*x9686))+((r01*x9681*x9685))+((r02*x9693))+x9688+((r01*x9689))+((r00*x9684)));
evalcond[7]=((((-1.0)*r02*sj3*x9691))+x9694+(((-1.0)*r01*x9684*x9690))+((r01*x9687))+((r00*x9695))+((r00*x9685)));
evalcond[8]=((((-1.0)*x9688))+(((-1.0)*r22*sj3*x9691))+((r21*x9687))+x9686+(((-1.0)*r21*x9684*x9690))+((r20*x9685))+((r20*x9695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9696 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9696.valid){
continue;
}
CheckValue<IkReal> x9697=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9696.value)+(((1.5707963267949)*(x9697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9698=IKsin(j4);
IkReal x9699=IKcos(j4);
IkReal x9700=(cj2*sj1);
IkReal x9701=(cj1*sj2);
IkReal x9702=(gconst1*sj3);
IkReal x9703=(cj3*gconst1);
IkReal x9704=(sj1*sj2);
IkReal x9705=(cj3*gconst2);
IkReal x9706=(cj1*cj2);
IkReal x9707=(gconst2*sj3);
IkReal x9708=((1.0)*x9699);
IkReal x9709=((1.0)*x9698);
IkReal x9710=(gconst1*x9698);
IkReal x9711=(cj3*x9698);
IkReal x9712=(x9700+x9701);
IkReal x9713=(x9699*x9707);
evalcond[0]=((((-1.0)*r22*x9708))+((r21*x9710))+(((-1.0)*gconst2*r20*x9709)));
evalcond[1]=((((-1.0)*r02*x9708))+(((-1.0)*gconst2*r00*x9709))+((r01*x9710)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9709))+((r11*x9710))+(((-1.0)*r12*x9708)));
evalcond[3]=(((r10*x9702))+((r12*x9711))+(((-1.0)*r10*x9705*x9708))+((r11*x9707))+((r11*x9699*x9703)));
evalcond[4]=(((r10*x9703))+(((-1.0)*r12*sj3*x9709))+((r11*x9705))+(((-1.0)*r11*x9702*x9708))+((r10*x9713)));
evalcond[5]=(((r22*x9711))+((r20*x9702))+((r21*x9707))+x9712+((r21*x9699*x9703))+(((-1.0)*r20*x9705*x9708)));
evalcond[6]=((((-1.0)*x9704))+((r02*x9711))+((r01*x9707))+((r00*x9702))+x9706+(((-1.0)*r00*x9705*x9708))+((r01*x9699*x9703)));
evalcond[7]=((((-1.0)*r01*x9702*x9708))+((r01*x9705))+((r00*x9703))+x9712+(((-1.0)*r02*sj3*x9709))+((r00*x9713)));
evalcond[8]=((((-1.0)*x9706))+((r20*x9703))+((r21*x9705))+x9704+(((-1.0)*r22*sj3*x9709))+((r20*x9713))+(((-1.0)*r21*x9702*x9708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9714=((-1.0)*r20);
IkReal x9715=x8887;
CheckValue<IkReal> x9717 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9714),IKFAST_ATAN2_MAGTHRESH);
if(!x9717.valid){
continue;
}
IkReal x9716=((-1.0)*(x9717.value));
sj5=gconst1;
cj5=gconst2;
j5=x9716;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9716;
IkReal gconst1=(r21*x9715);
IkReal gconst2=(x9714*x9715);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9718=((-1.0)*r20);
IkReal x9719=x8887;
CheckValue<IkReal> x9721 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9718),IKFAST_ATAN2_MAGTHRESH);
if(!x9721.valid){
continue;
}
IkReal x9720=((-1.0)*(x9721.value));
sj5=gconst1;
cj5=gconst2;
j5=x9720;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9720;
IkReal gconst1=(r21*x9719);
IkReal gconst2=(x9718*x9719);
CheckValue<IkReal> x9729=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9729.valid){
continue;
}
IkReal x9722=x9729.value;
IkReal x9723=(sj3*x9722);
IkReal x9724=(r11*x9723);
IkReal x9725=(r00*x9723);
IkReal x9726=(r01*x9723);
IkReal x9727=(r10*x9723);
IkReal x9728=(r20*r21*x9723);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9725*(r20*r20)))+((r10*r20*r21*x9726))+((r01*x9724*(r21*r21)))+((r00*r20*r21*x9724))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9730=gconst1*gconst1;
IkReal x9731=gconst2*gconst2;
IkReal x9732=((1.0)*cj3);
IkReal x9733=(gconst2*r10);
IkReal x9734=(r01*sj3);
IkReal x9735=(gconst1*r00*sj3);
IkReal x9736=(gconst1*gconst2*r11);
IkReal x9737=(r10*x9731);
IkReal x9738=(r11*x9730);
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal((((gconst2*r12*x9734))+((r12*x9735)))),IkReal(((((-1.0)*x9734*x9737))+((x9734*x9736))+((r00*sj3*x9738))+(((-1.0)*x9733*x9735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
CheckValue<IkReal> x9740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9732))+((cj3*gconst1*r01*x9733))+((cj3*r00*x9736))+(((-1.0)*r00*x9732*x9737))+(((-1.0)*r01*x9732*x9738)))),-1);
if(!x9740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9739.value)+(((1.5707963267949)*(x9740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9741=IKsin(j4);
IkReal x9742=IKcos(j4);
IkReal x9743=(sj1*sj2);
IkReal x9744=(gconst1*sj3);
IkReal x9745=(cj3*gconst1);
IkReal x9746=(cj3*gconst2);
IkReal x9747=((1.0)*cj2);
IkReal x9748=(cj1*sj2);
IkReal x9749=(gconst2*sj3);
IkReal x9750=(cj1*x9747);
IkReal x9751=((1.0)*x9742);
IkReal x9752=((1.0)*x9741);
IkReal x9753=(gconst1*x9741);
IkReal x9754=(cj3*x9741);
IkReal x9755=(x9742*x9749);
evalcond[0]=(((r21*x9753))+(((-1.0)*r22*x9751))+(((-1.0)*gconst2*r20*x9752)));
evalcond[1]=(((r11*x9753))+(((-1.0)*gconst2*r10*x9752))+(((-1.0)*r12*x9751)));
evalcond[2]=((-1.0)+((r01*x9753))+(((-1.0)*r02*x9751))+(((-1.0)*gconst2*r00*x9752)));
evalcond[3]=(((r01*x9742*x9745))+(((-1.0)*r00*x9746*x9751))+((r02*x9754))+((r01*x9749))+((r00*x9744)));
evalcond[4]=(((r00*x9755))+(((-1.0)*r01*x9744*x9751))+((r01*x9746))+((r00*x9745))+(((-1.0)*r02*sj3*x9752)));
evalcond[5]=(((cj2*sj1))+((r21*x9749))+(((-1.0)*r20*x9746*x9751))+((r22*x9754))+x9748+((r20*x9744))+((r21*x9742*x9745)));
evalcond[6]=(((r11*x9749))+((r10*x9744))+(((-1.0)*r10*x9746*x9751))+x9743+((r11*x9742*x9745))+((r12*x9754))+(((-1.0)*x9750)));
evalcond[7]=(((r21*x9746))+x9743+((r20*x9745))+(((-1.0)*r22*sj3*x9752))+((r20*x9755))+(((-1.0)*r21*x9744*x9751))+(((-1.0)*x9750)));
evalcond[8]=(((r10*x9755))+((r11*x9746))+((r10*x9745))+(((-1.0)*r11*x9744*x9751))+(((-1.0)*r12*sj3*x9752))+(((-1.0)*x9748))+(((-1.0)*sj1*x9747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9756=gconst2*gconst2;
IkReal x9757=gconst1*gconst1;
IkReal x9758=(gconst1*r00);
IkReal x9759=(r11*sj3);
IkReal x9760=((1.0)*gconst2);
IkReal x9761=(cj3*r12);
IkReal x9762=(cj3*r11);
IkReal x9763=(gconst2*r01);
IkReal x9764=(cj3*r10);
IkReal x9765=(r10*sj3);
CheckValue<IkReal> x9766 = IKatan2WithCheck(IkReal((((x9761*x9763))+((x9758*x9761)))),IkReal((((gconst1*x9762*x9763))+((r00*x9757*x9762))+(((-1.0)*x9758*x9760*x9764))+(((-1.0)*r01*x9756*x9764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9766.valid){
continue;
}
CheckValue<IkReal> x9767=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9758*x9759*x9760))+((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9760*x9765))+((r00*x9756*x9765))+((r01*x9757*x9759)))),-1);
if(!x9767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9766.value)+(((1.5707963267949)*(x9767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9768=IKsin(j4);
IkReal x9769=IKcos(j4);
IkReal x9770=(sj1*sj2);
IkReal x9771=(gconst1*sj3);
IkReal x9772=(cj3*gconst1);
IkReal x9773=(cj3*gconst2);
IkReal x9774=((1.0)*cj2);
IkReal x9775=(cj1*sj2);
IkReal x9776=(gconst2*sj3);
IkReal x9777=(cj1*x9774);
IkReal x9778=((1.0)*x9769);
IkReal x9779=((1.0)*x9768);
IkReal x9780=(gconst1*x9768);
IkReal x9781=(cj3*x9768);
IkReal x9782=(x9769*x9776);
evalcond[0]=(((r21*x9780))+(((-1.0)*r22*x9778))+(((-1.0)*gconst2*r20*x9779)));
evalcond[1]=((((-1.0)*gconst2*r10*x9779))+((r11*x9780))+(((-1.0)*r12*x9778)));
evalcond[2]=((-1.0)+((r01*x9780))+(((-1.0)*gconst2*r00*x9779))+(((-1.0)*r02*x9778)));
evalcond[3]=(((r01*x9769*x9772))+((r01*x9776))+((r00*x9771))+(((-1.0)*r00*x9773*x9778))+((r02*x9781)));
evalcond[4]=(((r00*x9782))+((r01*x9773))+((r00*x9772))+(((-1.0)*r01*x9771*x9778))+(((-1.0)*r02*sj3*x9779)));
evalcond[5]=(((cj2*sj1))+((r21*x9769*x9772))+((r22*x9781))+(((-1.0)*r20*x9773*x9778))+x9775+((r21*x9776))+((r20*x9771)));
evalcond[6]=(((r11*x9769*x9772))+((r10*x9771))+x9770+((r12*x9781))+(((-1.0)*x9777))+((r11*x9776))+(((-1.0)*r10*x9773*x9778)));
evalcond[7]=((((-1.0)*r21*x9771*x9778))+x9770+((r21*x9773))+((r20*x9772))+((r20*x9782))+(((-1.0)*x9777))+(((-1.0)*r22*sj3*x9779)));
evalcond[8]=(((r10*x9772))+(((-1.0)*x9775))+((r10*x9782))+(((-1.0)*r12*sj3*x9779))+(((-1.0)*sj1*x9774))+((r11*x9773))+(((-1.0)*r11*x9771*x9778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9783=((1.0)*gconst2);
CheckValue<IkReal> x9784 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9783))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9784.valid){
continue;
}
CheckValue<IkReal> x9785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9783))+(((-1.0)*gconst1*r10)))),-1);
if(!x9785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9784.value)+(((1.5707963267949)*(x9785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9786=IKsin(j4);
IkReal x9787=IKcos(j4);
IkReal x9788=(sj1*sj2);
IkReal x9789=(gconst1*sj3);
IkReal x9790=(cj3*gconst1);
IkReal x9791=(cj3*gconst2);
IkReal x9792=((1.0)*cj2);
IkReal x9793=(cj1*sj2);
IkReal x9794=(gconst2*sj3);
IkReal x9795=(cj1*x9792);
IkReal x9796=((1.0)*x9787);
IkReal x9797=((1.0)*x9786);
IkReal x9798=(gconst1*x9786);
IkReal x9799=(cj3*x9786);
IkReal x9800=(x9787*x9794);
evalcond[0]=(((r21*x9798))+(((-1.0)*gconst2*r20*x9797))+(((-1.0)*r22*x9796)));
evalcond[1]=(((r11*x9798))+(((-1.0)*gconst2*r10*x9797))+(((-1.0)*r12*x9796)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9796))+(((-1.0)*gconst2*r00*x9797))+((r01*x9798)));
evalcond[3]=((((-1.0)*r00*x9791*x9796))+((r00*x9789))+((r02*x9799))+((r01*x9787*x9790))+((r01*x9794)));
evalcond[4]=(((r00*x9800))+(((-1.0)*r01*x9789*x9796))+(((-1.0)*r02*sj3*x9797))+((r00*x9790))+((r01*x9791)));
evalcond[5]=(((cj2*sj1))+((r21*x9787*x9790))+x9793+((r21*x9794))+((r20*x9789))+((r22*x9799))+(((-1.0)*r20*x9791*x9796)));
evalcond[6]=(((r11*x9794))+((r12*x9799))+(((-1.0)*x9795))+x9788+((r11*x9787*x9790))+((r10*x9789))+(((-1.0)*r10*x9791*x9796)));
evalcond[7]=(((r20*x9790))+(((-1.0)*r21*x9789*x9796))+(((-1.0)*x9795))+x9788+((r21*x9791))+(((-1.0)*r22*sj3*x9797))+((r20*x9800)));
evalcond[8]=(((r10*x9800))+(((-1.0)*sj1*x9792))+((r11*x9791))+((r10*x9790))+(((-1.0)*r12*sj3*x9797))+(((-1.0)*r11*x9789*x9796))+(((-1.0)*x9793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9801=((-1.0)*r20);
IkReal x9802=x8887;
CheckValue<IkReal> x9804 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9801),IKFAST_ATAN2_MAGTHRESH);
if(!x9804.valid){
continue;
}
IkReal x9803=((-1.0)*(x9804.value));
sj5=gconst1;
cj5=gconst2;
j5=x9803;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9803;
IkReal gconst1=(r21*x9802);
IkReal gconst2=(x9801*x9802);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9805=((-1.0)*r20);
IkReal x9806=x8887;
CheckValue<IkReal> x9808 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9805),IKFAST_ATAN2_MAGTHRESH);
if(!x9808.valid){
continue;
}
IkReal x9807=((-1.0)*(x9808.value));
sj5=gconst1;
cj5=gconst2;
j5=x9807;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9807;
IkReal gconst1=(r21*x9806);
IkReal gconst2=(x9805*x9806);
CheckValue<IkReal> x9816=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9816.valid){
continue;
}
IkReal x9809=x9816.value;
IkReal x9810=(sj3*x9809);
IkReal x9811=(r11*x9810);
IkReal x9812=(r00*x9810);
IkReal x9813=(r01*x9810);
IkReal x9814=(r10*x9810);
IkReal x9815=(r20*r21*x9810);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9813))+((r00*r20*r21*x9811))+((r10*x9812*(r20*r20)))+((r01*x9811*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9817=gconst1*gconst1;
IkReal x9818=gconst2*gconst2;
IkReal x9819=((1.0)*cj3);
IkReal x9820=(gconst2*r10);
IkReal x9821=(r01*sj3);
IkReal x9822=(gconst1*r00*sj3);
IkReal x9823=(gconst1*gconst2*r11);
IkReal x9824=(r10*x9818);
IkReal x9825=(r11*x9817);
CheckValue<IkReal> x9826 = IKatan2WithCheck(IkReal((((gconst2*r12*x9821))+((r12*x9822)))),IkReal((((x9821*x9823))+((r00*sj3*x9825))+(((-1.0)*x9820*x9822))+(((-1.0)*x9821*x9824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9826.valid){
continue;
}
CheckValue<IkReal> x9827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9819))+((cj3*gconst1*r01*x9820))+((cj3*r00*x9823))+(((-1.0)*r00*x9819*x9824))+(((-1.0)*r01*x9819*x9825)))),-1);
if(!x9827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9826.value)+(((1.5707963267949)*(x9827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9828=IKsin(j4);
IkReal x9829=IKcos(j4);
IkReal x9830=(cj2*sj1);
IkReal x9831=(cj1*sj2);
IkReal x9832=(gconst1*sj3);
IkReal x9833=(cj3*gconst1);
IkReal x9834=(sj1*sj2);
IkReal x9835=(cj3*gconst2);
IkReal x9836=(cj1*cj2);
IkReal x9837=(gconst2*sj3);
IkReal x9838=((1.0)*x9829);
IkReal x9839=((1.0)*x9828);
IkReal x9840=(gconst1*x9828);
IkReal x9841=(cj3*x9828);
IkReal x9842=(x9830+x9831);
IkReal x9843=(x9829*x9837);
evalcond[0]=((((-1.0)*r22*x9838))+(((-1.0)*gconst2*r20*x9839))+((r21*x9840)));
evalcond[1]=(((r11*x9840))+(((-1.0)*gconst2*r10*x9839))+(((-1.0)*r12*x9838)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9838))+((r01*x9840))+(((-1.0)*gconst2*r00*x9839)));
evalcond[3]=(((r00*x9832))+((r02*x9841))+((r01*x9837))+(((-1.0)*r00*x9835*x9838))+((r01*x9829*x9833)));
evalcond[4]=((((-1.0)*r02*sj3*x9839))+((r00*x9833))+(((-1.0)*r01*x9832*x9838))+((r01*x9835))+((r00*x9843)));
evalcond[5]=(((r21*x9837))+((r21*x9829*x9833))+(((-1.0)*r20*x9835*x9838))+((r20*x9832))+x9842+((r22*x9841)));
evalcond[6]=(((r11*x9837))+((r10*x9832))+(((-1.0)*r10*x9835*x9838))+(((-1.0)*x9834))+((r11*x9829*x9833))+((r12*x9841))+x9836);
evalcond[7]=(((r11*x9835))+((r10*x9843))+((r10*x9833))+(((-1.0)*r11*x9832*x9838))+(((-1.0)*r12*sj3*x9839))+x9842);
evalcond[8]=((((-1.0)*r21*x9832*x9838))+(((-1.0)*x9836))+((r21*x9835))+((r20*x9843))+(((-1.0)*r22*sj3*x9839))+((r20*x9833))+x9834);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9844=gconst2*gconst2;
IkReal x9845=gconst1*gconst1;
IkReal x9846=(gconst1*r00);
IkReal x9847=(r11*sj3);
IkReal x9848=((1.0)*gconst2);
IkReal x9849=(cj3*r12);
IkReal x9850=(cj3*r11);
IkReal x9851=(gconst2*r01);
IkReal x9852=(cj3*r10);
IkReal x9853=(r10*sj3);
CheckValue<IkReal> x9854 = IKatan2WithCheck(IkReal((((x9846*x9849))+((x9849*x9851)))),IkReal((((r00*x9845*x9850))+((gconst1*x9850*x9851))+(((-1.0)*x9846*x9848*x9852))+(((-1.0)*r01*x9844*x9852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9854.valid){
continue;
}
CheckValue<IkReal> x9855=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9844*x9853))+((r01*x9845*x9847))+(((-1.0)*gconst1*r01*x9848*x9853))+(((-1.0)*x9846*x9847*x9848)))),-1);
if(!x9855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9854.value)+(((1.5707963267949)*(x9855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9856=IKsin(j4);
IkReal x9857=IKcos(j4);
IkReal x9858=(cj2*sj1);
IkReal x9859=(cj1*sj2);
IkReal x9860=(gconst1*sj3);
IkReal x9861=(cj3*gconst1);
IkReal x9862=(sj1*sj2);
IkReal x9863=(cj3*gconst2);
IkReal x9864=(cj1*cj2);
IkReal x9865=(gconst2*sj3);
IkReal x9866=((1.0)*x9857);
IkReal x9867=((1.0)*x9856);
IkReal x9868=(gconst1*x9856);
IkReal x9869=(cj3*x9856);
IkReal x9870=(x9858+x9859);
IkReal x9871=(x9857*x9865);
evalcond[0]=((((-1.0)*r22*x9866))+((r21*x9868))+(((-1.0)*gconst2*r20*x9867)));
evalcond[1]=((((-1.0)*r12*x9866))+((r11*x9868))+(((-1.0)*gconst2*r10*x9867)));
evalcond[2]=((1.0)+((r01*x9868))+(((-1.0)*gconst2*r00*x9867))+(((-1.0)*r02*x9866)));
evalcond[3]=(((r00*x9860))+((r01*x9865))+((r02*x9869))+(((-1.0)*r00*x9863*x9866))+((r01*x9857*x9861)));
evalcond[4]=(((r00*x9861))+((r01*x9863))+(((-1.0)*r01*x9860*x9866))+((r00*x9871))+(((-1.0)*r02*sj3*x9867)));
evalcond[5]=(((r22*x9869))+((r21*x9857*x9861))+(((-1.0)*r20*x9863*x9866))+((r21*x9865))+((r20*x9860))+x9870);
evalcond[6]=(((r11*x9857*x9861))+((r11*x9865))+(((-1.0)*x9862))+((r12*x9869))+((r10*x9860))+x9864+(((-1.0)*r10*x9863*x9866)));
evalcond[7]=(((r10*x9871))+((r11*x9863))+((r10*x9861))+(((-1.0)*r12*sj3*x9867))+(((-1.0)*r11*x9860*x9866))+x9870);
evalcond[8]=((((-1.0)*r21*x9860*x9866))+((r20*x9871))+(((-1.0)*x9864))+((r21*x9863))+((r20*x9861))+x9862+(((-1.0)*r22*sj3*x9867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9872 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9872.valid){
continue;
}
CheckValue<IkReal> x9873=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9872.value)+(((1.5707963267949)*(x9873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9874=IKsin(j4);
IkReal x9875=IKcos(j4);
IkReal x9876=(cj2*sj1);
IkReal x9877=(cj1*sj2);
IkReal x9878=(gconst1*sj3);
IkReal x9879=(cj3*gconst1);
IkReal x9880=(sj1*sj2);
IkReal x9881=(cj3*gconst2);
IkReal x9882=(cj1*cj2);
IkReal x9883=(gconst2*sj3);
IkReal x9884=((1.0)*x9875);
IkReal x9885=((1.0)*x9874);
IkReal x9886=(gconst1*x9874);
IkReal x9887=(cj3*x9874);
IkReal x9888=(x9876+x9877);
IkReal x9889=(x9875*x9883);
evalcond[0]=((((-1.0)*r22*x9884))+((r21*x9886))+(((-1.0)*gconst2*r20*x9885)));
evalcond[1]=(((r11*x9886))+(((-1.0)*gconst2*r10*x9885))+(((-1.0)*r12*x9884)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9885))+((r01*x9886))+(((-1.0)*r02*x9884)));
evalcond[3]=(((r01*x9875*x9879))+((r01*x9883))+(((-1.0)*r00*x9881*x9884))+((r00*x9878))+((r02*x9887)));
evalcond[4]=(((r01*x9881))+((r00*x9889))+(((-1.0)*r01*x9878*x9884))+(((-1.0)*r02*sj3*x9885))+((r00*x9879)));
evalcond[5]=(((r21*x9883))+((r20*x9878))+((r22*x9887))+(((-1.0)*r20*x9881*x9884))+x9888+((r21*x9875*x9879)));
evalcond[6]=((((-1.0)*r10*x9881*x9884))+((r12*x9887))+((r10*x9878))+((r11*x9883))+((r11*x9875*x9879))+(((-1.0)*x9880))+x9882);
evalcond[7]=(((r10*x9879))+((r11*x9881))+(((-1.0)*r12*sj3*x9885))+((r10*x9889))+x9888+(((-1.0)*r11*x9878*x9884)));
evalcond[8]=((((-1.0)*r22*sj3*x9885))+((r20*x9889))+((r21*x9881))+((r20*x9879))+(((-1.0)*r21*x9878*x9884))+(((-1.0)*x9882))+x9880);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9890=((-1.0)*r20);
IkReal x9891=((-1.0)*px);
CheckValue<IkReal> x9893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9890),IKFAST_ATAN2_MAGTHRESH);
if(!x9893.valid){
continue;
}
IkReal x9892=((-1.0)*(x9893.value));
sj5=gconst1;
cj5=gconst2;
j5=x9892;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9891);
rxp1_1=(px*r21);
rxp1_2=(r11*x9891);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9892;
IkReal gconst1=r21;
IkReal gconst2=x9890;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9894=((-1.0)*r20);
IkReal x9895=((-1.0)*px);
CheckValue<IkReal> x9897 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9894),IKFAST_ATAN2_MAGTHRESH);
if(!x9897.valid){
continue;
}
IkReal x9896=((-1.0)*(x9897.value));
sj5=gconst1;
cj5=gconst2;
j5=x9896;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9895);
rxp1_1=(px*r21);
rxp1_2=(r11*x9895);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9896;
IkReal gconst1=r21;
IkReal gconst2=x9894;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9898=((-1.0)*r20);
IkReal x9899=((-1.0)*px);
CheckValue<IkReal> x9901 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9898),IKFAST_ATAN2_MAGTHRESH);
if(!x9901.valid){
continue;
}
IkReal x9900=((-1.0)*(x9901.value));
sj5=gconst1;
cj5=gconst2;
j5=x9900;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9899);
rxp1_1=(px*r21);
rxp1_2=(r11*x9899);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9900;
IkReal gconst1=r21;
IkReal gconst2=x9898;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9902=((-1.0)*r20);
IkReal x9903=((-1.0)*px);
CheckValue<IkReal> x9905 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9902),IKFAST_ATAN2_MAGTHRESH);
if(!x9905.valid){
continue;
}
IkReal x9904=((-1.0)*(x9905.value));
sj5=gconst1;
cj5=gconst2;
j5=x9904;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9903);
rxp1_1=(px*r21);
rxp1_2=(r11*x9903);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9904;
IkReal gconst1=r21;
IkReal gconst2=x9902;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9906=((-1.0)*r20);
IkReal x9907=((-1.0)*px);
CheckValue<IkReal> x9909 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9906),IKFAST_ATAN2_MAGTHRESH);
if(!x9909.valid){
continue;
}
IkReal x9908=((-1.0)*(x9909.value));
sj5=gconst1;
cj5=gconst2;
j5=x9908;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9907);
rxp1_1=(px*r21);
rxp1_2=(r11*x9907);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9908;
IkReal gconst1=r21;
IkReal gconst2=x9906;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9910=((-1.0)*r20);
IkReal x9911=((-1.0)*px);
CheckValue<IkReal> x9913 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9910),IKFAST_ATAN2_MAGTHRESH);
if(!x9913.valid){
continue;
}
IkReal x9912=((-1.0)*(x9913.value));
sj5=gconst1;
cj5=gconst2;
j5=x9912;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9911);
rxp1_1=(px*r21);
rxp1_2=(r11*x9911);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9912;
IkReal gconst1=r21;
IkReal gconst2=x9910;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9916=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9916.valid){
continue;
}
IkReal x9914=x9916.value;
IkReal x9915=(sj0*x9914);
cj4array[0]=(((cj1*sj2*x9915))+((cj2*sj1*x9915)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9917=IKsin(j4);
IkReal x9918=IKcos(j4);
IkReal x9919=(gconst1*x9917);
IkReal x9920=((1.0)*x9918);
IkReal x9921=((1.0)*gconst2*x9917);
evalcond[0]=((-1.0)*r02*x9917);
evalcond[1]=((((-1.0)*r02*x9920))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9921))+((r21*x9919)));
evalcond[3]=(((r11*x9919))+(((-1.0)*r10*x9921)));
evalcond[4]=((((-1.0)*gconst1*r21*x9920))+((gconst2*r20*x9918))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9923=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9923.valid){
continue;
}
IkReal x9922=x9923.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9922))+((cj1*cj2*x9922)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9924=IKsin(j4);
IkReal x9925=IKcos(j4);
IkReal x9926=(gconst2*r10);
IkReal x9927=((1.0)*sj0);
IkReal x9928=((1.0)*x9924);
IkReal x9929=(gconst1*x9924);
IkReal x9930=((1.0)*x9925);
evalcond[0]=((-1.0)*r02*x9924);
evalcond[1]=((((-1.0)*r02*x9930))+(((-1.0)*x9927)));
evalcond[2]=((((-1.0)*gconst2*r20*x9928))+((r21*x9929)));
evalcond[3]=((((-1.0)*x9926*x9928))+((r11*x9929)));
evalcond[4]=((((-1.0)*gconst1*r11*x9930))+(((-1.0)*cj2*sj1*x9927))+(((-1.0)*cj1*sj2*x9927))+((x9925*x9926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9931=IKPowWithIntegerCheck(r02,-1);
if(!x9931.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9931.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9932=IKsin(j4);
IkReal x9933=IKcos(j4);
IkReal x9934=(gconst2*r10);
IkReal x9935=((1.0)*sj0);
IkReal x9936=(gconst1*r11);
IkReal x9937=(gconst1*r21);
IkReal x9938=(gconst2*r20);
IkReal x9939=((1.0)*x9932);
IkReal x9940=((1.0)*x9933);
evalcond[0]=((-1.0)*r02*x9932);
evalcond[1]=((((-1.0)*x9938*x9939))+((x9932*x9937)));
evalcond[2]=((((-1.0)*x9934*x9939))+((x9932*x9936)));
evalcond[3]=(((x9933*x9938))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9937*x9940)));
evalcond[4]=((((-1.0)*cj2*sj1*x9935))+(((-1.0)*cj1*sj2*x9935))+((x9933*x9934))+(((-1.0)*x9936*x9940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9941=((-1.0)*r20);
IkReal x9942=((-1.0)*px);
CheckValue<IkReal> x9944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9941),IKFAST_ATAN2_MAGTHRESH);
if(!x9944.valid){
continue;
}
IkReal x9943=((-1.0)*(x9944.value));
sj5=gconst1;
cj5=gconst2;
j5=x9943;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9942);
rxp1_1=(px*r21);
rxp1_2=(r11*x9942);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9943;
IkReal gconst1=r21;
IkReal gconst2=x9941;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9945=((-1.0)*r20);
IkReal x9946=((-1.0)*px);
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9945),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
IkReal x9947=((-1.0)*(x9948.value));
sj5=gconst1;
cj5=gconst2;
j5=x9947;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9946);
rxp1_1=(px*r21);
rxp1_2=(r11*x9946);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9947;
IkReal gconst1=r21;
IkReal gconst2=x9945;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9949=((-1.0)*r20);
IkReal x9950=((-1.0)*px);
CheckValue<IkReal> x9952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9949),IKFAST_ATAN2_MAGTHRESH);
if(!x9952.valid){
continue;
}
IkReal x9951=((-1.0)*(x9952.value));
sj5=gconst1;
cj5=gconst2;
j5=x9951;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9950);
rxp1_1=(px*r21);
rxp1_2=(r11*x9950);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9951;
IkReal gconst1=r21;
IkReal gconst2=x9949;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9955=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9955.valid){
continue;
}
IkReal x9953=x9955.value;
IkReal x9954=(sj0*x9953);
cj4array[0]=(((cj1*sj2*x9954))+((cj2*sj1*x9954)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9956=IKsin(j4);
IkReal x9957=IKcos(j4);
IkReal x9958=((1.0)*gconst2);
IkReal x9959=(gconst1*r21);
evalcond[0]=(r02*x9956);
evalcond[1]=((((-1.0)*r02*x9957))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9956*x9958))+((x9956*x9959)));
evalcond[3]=((((-1.0)*r10*x9956*x9958))+((gconst1*r11*x9956)));
evalcond[4]=((((-1.0)*r20*x9957*x9958))+((x9957*x9959))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9961=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9961.valid){
continue;
}
IkReal x9960=x9961.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9960))+((cj1*cj2*x9960)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9962=IKsin(j4);
IkReal x9963=IKcos(j4);
IkReal x9964=((1.0)*sj0);
IkReal x9965=(gconst1*x9962);
IkReal x9966=((1.0)*x9963);
IkReal x9967=((1.0)*gconst2*x9962);
evalcond[0]=(r02*x9962);
evalcond[1]=((((-1.0)*x9964))+(((-1.0)*r02*x9966)));
evalcond[2]=(((r21*x9965))+(((-1.0)*r20*x9967)));
evalcond[3]=((((-1.0)*r10*x9967))+((r11*x9965)));
evalcond[4]=((((-1.0)*cj2*sj1*x9964))+(((-1.0)*cj1*sj2*x9964))+((gconst1*r11*x9963))+(((-1.0)*gconst2*r10*x9966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9968=IKPowWithIntegerCheck(r02,-1);
if(!x9968.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9968.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9969=IKsin(j4);
IkReal x9970=IKcos(j4);
IkReal x9971=(gconst1*r21);
IkReal x9972=((1.0)*sj0);
IkReal x9973=(gconst1*r11);
IkReal x9974=((1.0)*gconst2*r10);
IkReal x9975=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9969);
evalcond[1]=(((x9969*x9971))+(((-1.0)*x9969*x9975)));
evalcond[2]=(((x9969*x9973))+(((-1.0)*x9969*x9974)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9970*x9975))+((x9970*x9971)));
evalcond[4]=((((-1.0)*cj2*sj1*x9972))+(((-1.0)*cj1*sj2*x9972))+(((-1.0)*x9970*x9974))+((x9970*x9973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9977=IKPowWithIntegerCheck(r02,-1);
if(!x9977.valid){
continue;
}
IkReal x9976=x9977.value;
CheckValue<IkReal> x9978=IKPowWithIntegerCheck(cj3,-1);
if(!x9978.valid){
continue;
}
if( IKabs((x9976*(x9978.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9976)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9976*(x9978.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9976))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9976*(x9978.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9976));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9979=IKsin(j4);
IkReal x9980=IKcos(j4);
IkReal x9981=(gconst2*r10);
IkReal x9982=(gconst1*r11);
IkReal x9983=(sj1*sj2);
IkReal x9984=(gconst2*r20);
IkReal x9985=(cj2*sj1);
IkReal x9986=((1.0)*sj0);
IkReal x9987=(gconst1*r20);
IkReal x9988=(gconst2*r11);
IkReal x9989=(gconst1*r21);
IkReal x9990=((1.0)*cj0);
IkReal x9991=(gconst1*r10);
IkReal x9992=(cj1*sj2);
IkReal x9993=(gconst2*r21);
IkReal x9994=(sj3*x9980);
IkReal x9995=((1.0)*cj1*cj2);
IkReal x9996=(cj3*x9980);
IkReal x9997=(r02*x9979);
IkReal x9998=((1.0)*x9979);
evalcond[0]=((((-1.0)*r02*x9980))+(((-1.0)*x9986)));
evalcond[1]=((((-1.0)*x9984*x9998))+((x9979*x9989)));
evalcond[2]=(cj0+(((-1.0)*x9981*x9998))+((x9979*x9982)));
evalcond[3]=(((cj3*x9997))+((cj0*x9983))+(((-1.0)*cj1*cj2*x9990)));
evalcond[4]=((((-1.0)*x9990*x9992))+(((-1.0)*sj3*x9997))+(((-1.0)*x9985*x9990)));
evalcond[5]=((((-1.0)*x9984*x9996))+((x9989*x9996))+((sj3*x9987))+((sj3*x9993))+x9985+x9992);
evalcond[6]=(((cj3*x9987))+((cj3*x9993))+(((-1.0)*x9989*x9994))+((x9984*x9994))+x9983+(((-1.0)*x9995)));
evalcond[7]=(((x9982*x9996))+((sj0*x9983))+((sj3*x9988))+((sj3*x9991))+(((-1.0)*x9981*x9996))+(((-1.0)*cj1*cj2*x9986)));
evalcond[8]=(((cj3*x9988))+((cj3*x9991))+(((-1.0)*x9982*x9994))+(((-1.0)*x9986*x9992))+((x9981*x9994))+(((-1.0)*x9985*x9986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9999=((1.0)*sj3);
IkReal x10000=((1.0)*gconst2);
CheckValue<IkReal> x10001=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10000))),-1);
if(!x10001.valid){
continue;
}
CheckValue<IkReal> x10002=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10000))),-1);
if(!x10002.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10001.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10002.value)*(((((-1.0)*gconst1*r20*x9999))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9999)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10001.value)))+IKsqr(((x10002.value)*(((((-1.0)*gconst1*r20*x9999))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9999))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10001.value)), ((x10002.value)*(((((-1.0)*gconst1*r20*x9999))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9999))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10003=IKsin(j4);
IkReal x10004=IKcos(j4);
IkReal x10005=(gconst2*r10);
IkReal x10006=(gconst1*r11);
IkReal x10007=(sj1*sj2);
IkReal x10008=(gconst2*r20);
IkReal x10009=(cj2*sj1);
IkReal x10010=((1.0)*sj0);
IkReal x10011=(gconst1*r20);
IkReal x10012=(gconst2*r11);
IkReal x10013=(gconst1*r21);
IkReal x10014=((1.0)*cj0);
IkReal x10015=(gconst1*r10);
IkReal x10016=(cj1*sj2);
IkReal x10017=(gconst2*r21);
IkReal x10018=(sj3*x10004);
IkReal x10019=((1.0)*cj1*cj2);
IkReal x10020=(cj3*x10004);
IkReal x10021=(r02*x10003);
IkReal x10022=((1.0)*x10003);
evalcond[0]=((((-1.0)*r02*x10004))+(((-1.0)*x10010)));
evalcond[1]=((((-1.0)*x10008*x10022))+((x10003*x10013)));
evalcond[2]=(((x10003*x10006))+cj0+(((-1.0)*x10005*x10022)));
evalcond[3]=(((cj0*x10007))+(((-1.0)*cj1*cj2*x10014))+((cj3*x10021)));
evalcond[4]=((((-1.0)*sj3*x10021))+(((-1.0)*x10014*x10016))+(((-1.0)*x10009*x10014)));
evalcond[5]=(((x10013*x10020))+(((-1.0)*x10008*x10020))+x10016+x10009+((sj3*x10017))+((sj3*x10011)));
evalcond[6]=((((-1.0)*x10013*x10018))+((cj3*x10011))+((cj3*x10017))+x10007+(((-1.0)*x10019))+((x10008*x10018)));
evalcond[7]=(((x10006*x10020))+(((-1.0)*x10005*x10020))+(((-1.0)*cj1*cj2*x10010))+((sj3*x10015))+((sj3*x10012))+((sj0*x10007)));
evalcond[8]=((((-1.0)*x10006*x10018))+(((-1.0)*x10009*x10010))+((cj3*x10012))+((cj3*x10015))+(((-1.0)*x10010*x10016))+((x10005*x10018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10023=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10023.valid){
continue;
}
CheckValue<IkReal> x10024=IKPowWithIntegerCheck(r02,-1);
if(!x10024.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10023.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10024.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10023.value)))+IKsqr(((-1.0)*sj0*(x10024.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10023.value)), ((-1.0)*sj0*(x10024.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10025=IKsin(j4);
IkReal x10026=IKcos(j4);
IkReal x10027=(gconst2*r10);
IkReal x10028=(gconst1*r11);
IkReal x10029=(sj1*sj2);
IkReal x10030=(gconst2*r20);
IkReal x10031=(cj2*sj1);
IkReal x10032=((1.0)*sj0);
IkReal x10033=(gconst1*r20);
IkReal x10034=(gconst2*r11);
IkReal x10035=(gconst1*r21);
IkReal x10036=((1.0)*cj0);
IkReal x10037=(gconst1*r10);
IkReal x10038=(cj1*sj2);
IkReal x10039=(gconst2*r21);
IkReal x10040=(sj3*x10026);
IkReal x10041=((1.0)*cj1*cj2);
IkReal x10042=(cj3*x10026);
IkReal x10043=(r02*x10025);
IkReal x10044=((1.0)*x10025);
evalcond[0]=((((-1.0)*r02*x10026))+(((-1.0)*x10032)));
evalcond[1]=((((-1.0)*x10030*x10044))+((x10025*x10035)));
evalcond[2]=(((x10025*x10028))+cj0+(((-1.0)*x10027*x10044)));
evalcond[3]=(((cj0*x10029))+(((-1.0)*cj1*cj2*x10036))+((cj3*x10043)));
evalcond[4]=((((-1.0)*sj3*x10043))+(((-1.0)*x10031*x10036))+(((-1.0)*x10036*x10038)));
evalcond[5]=((((-1.0)*x10030*x10042))+((sj3*x10039))+((sj3*x10033))+x10038+x10031+((x10035*x10042)));
evalcond[6]=((((-1.0)*x10035*x10040))+x10029+((cj3*x10039))+((cj3*x10033))+(((-1.0)*x10041))+((x10030*x10040)));
evalcond[7]=(((sj0*x10029))+(((-1.0)*x10027*x10042))+((sj3*x10034))+((sj3*x10037))+((x10028*x10042))+(((-1.0)*cj1*cj2*x10032)));
evalcond[8]=((((-1.0)*x10028*x10040))+((x10027*x10040))+(((-1.0)*x10031*x10032))+((cj3*x10037))+((cj3*x10034))+(((-1.0)*x10032*x10038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10045=gconst1*gconst1;
IkReal x10046=r21*r21;
IkReal x10047=gconst2*gconst2;
IkReal x10048=r20*r20;
IkReal x10049=(gconst2*r20);
IkReal x10050=(cj1*cj2);
IkReal x10051=(sj1*sj2);
IkReal x10052=(gconst1*r21);
IkReal x10053=(cj3*gconst2);
IkReal x10054=(cj3*r20);
CheckValue<IkReal> x10055 = IKatan2WithCheck(IkReal((((r21*r22*x10053))+((gconst1*r22*x10054))+(((-1.0)*r22*x10050))+((r22*x10051)))),IkReal(((((-1.0)*r21*x10047*x10054))+(((-1.0)*x10050*x10052))+(((-1.0)*x10049*x10051))+((x10049*x10050))+((r21*x10045*x10054))+(((-1.0)*gconst1*x10048*x10053))+((gconst1*x10046*x10053))+((x10051*x10052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10055.valid){
continue;
}
CheckValue<IkReal> x10056=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10049*x10052))+((sj3*x10047*x10048))+((sj3*x10045*x10046)))),-1);
if(!x10056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10055.value)+(((1.5707963267949)*(x10056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10057=IKsin(j4);
IkReal x10058=IKcos(j4);
IkReal x10059=(cj3*gconst1);
IkReal x10060=(gconst1*r01);
IkReal x10061=(gconst1*r11);
IkReal x10062=(sj1*sj2);
IkReal x10063=(cj3*gconst2);
IkReal x10064=(gconst1*sj3);
IkReal x10065=(gconst2*sj3);
IkReal x10066=((1.0)*sj0);
IkReal x10067=(cj1*sj2);
IkReal x10068=((1.0)*x10058);
IkReal x10069=((1.0)*x10057);
IkReal x10070=((1.0)*cj1*cj2);
IkReal x10071=(cj3*x10057);
IkReal x10072=((1.0)*cj2*sj1);
IkReal x10073=(x10058*x10065);
evalcond[0]=(((gconst1*r21*x10057))+(((-1.0)*r22*x10068))+(((-1.0)*gconst2*r20*x10069)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10069))+((x10057*x10061))+(((-1.0)*r12*x10068)));
evalcond[2]=((((-1.0)*x10066))+(((-1.0)*gconst2*r00*x10069))+((x10057*x10060))+(((-1.0)*r02*x10068)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x10063*x10068))+((r21*x10058*x10059))+((r20*x10064))+x10067+((r22*x10071))+((r21*x10065)));
evalcond[4]=((((-1.0)*r22*sj3*x10069))+((r20*x10059))+((r20*x10073))+(((-1.0)*x10070))+(((-1.0)*r21*x10064*x10068))+x10062+((r21*x10063)));
evalcond[5]=((((-1.0)*cj0*x10070))+((r00*x10064))+(((-1.0)*r00*x10063*x10068))+((r01*x10058*x10059))+((r01*x10065))+((r02*x10071))+((cj0*x10062)));
evalcond[6]=(((r10*x10064))+((r12*x10071))+((r11*x10058*x10059))+(((-1.0)*cj1*cj2*x10066))+((sj0*x10062))+(((-1.0)*r10*x10063*x10068))+((r11*x10065)));
evalcond[7]=((((-1.0)*cj0*x10072))+((r00*x10073))+((r00*x10059))+((r01*x10063))+(((-1.0)*cj0*x10067))+(((-1.0)*sj3*x10060*x10068))+(((-1.0)*r02*sj3*x10069)));
evalcond[8]=(((r10*x10073))+(((-1.0)*x10066*x10067))+(((-1.0)*sj3*x10061*x10068))+((r10*x10059))+(((-1.0)*r12*sj3*x10069))+(((-1.0)*cj2*sj1*x10066))+((r11*x10063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10074=((1.0)*gconst2);
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10074))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
CheckValue<IkReal> x10076=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10074)))),-1);
if(!x10076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10075.value)+(((1.5707963267949)*(x10076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10077=IKsin(j4);
IkReal x10078=IKcos(j4);
IkReal x10079=(cj3*gconst1);
IkReal x10080=(gconst1*r01);
IkReal x10081=(gconst1*r11);
IkReal x10082=(sj1*sj2);
IkReal x10083=(cj3*gconst2);
IkReal x10084=(gconst1*sj3);
IkReal x10085=(gconst2*sj3);
IkReal x10086=((1.0)*sj0);
IkReal x10087=(cj1*sj2);
IkReal x10088=((1.0)*x10078);
IkReal x10089=((1.0)*x10077);
IkReal x10090=((1.0)*cj1*cj2);
IkReal x10091=(cj3*x10077);
IkReal x10092=((1.0)*cj2*sj1);
IkReal x10093=(x10078*x10085);
evalcond[0]=((((-1.0)*gconst2*r20*x10089))+((gconst1*r21*x10077))+(((-1.0)*r22*x10088)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10089))+(((-1.0)*r12*x10088))+((x10077*x10081)));
evalcond[2]=((((-1.0)*x10086))+(((-1.0)*r02*x10088))+(((-1.0)*gconst2*r00*x10089))+((x10077*x10080)));
evalcond[3]=(((cj2*sj1))+((r21*x10078*x10079))+((r20*x10084))+x10087+((r22*x10091))+((r21*x10085))+(((-1.0)*r20*x10083*x10088)));
evalcond[4]=(((r20*x10079))+(((-1.0)*r21*x10084*x10088))+x10082+((r21*x10083))+((r20*x10093))+(((-1.0)*x10090))+(((-1.0)*r22*sj3*x10089)));
evalcond[5]=(((r00*x10084))+((r01*x10085))+((r02*x10091))+((r01*x10078*x10079))+((cj0*x10082))+(((-1.0)*cj0*x10090))+(((-1.0)*r00*x10083*x10088)));
evalcond[6]=((((-1.0)*cj1*cj2*x10086))+((r12*x10091))+((sj0*x10082))+((r11*x10078*x10079))+(((-1.0)*r10*x10083*x10088))+((r10*x10084))+((r11*x10085)));
evalcond[7]=(((r01*x10083))+(((-1.0)*sj3*x10080*x10088))+((r00*x10079))+(((-1.0)*cj0*x10087))+(((-1.0)*r02*sj3*x10089))+(((-1.0)*cj0*x10092))+((r00*x10093)));
evalcond[8]=(((r10*x10079))+(((-1.0)*r12*sj3*x10089))+(((-1.0)*sj3*x10081*x10088))+(((-1.0)*x10086*x10087))+(((-1.0)*cj2*sj1*x10086))+((r10*x10093))+((r11*x10083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10094=((1.0)*gconst2);
CheckValue<IkReal> x10095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10094))+(((-1.0)*gconst1*r00)))),-1);
if(!x10095.valid){
continue;
}
CheckValue<IkReal> x10096 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10095.value)))+(x10096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10097=IKsin(j4);
IkReal x10098=IKcos(j4);
IkReal x10099=(cj3*gconst1);
IkReal x10100=(gconst1*r01);
IkReal x10101=(gconst1*r11);
IkReal x10102=(sj1*sj2);
IkReal x10103=(cj3*gconst2);
IkReal x10104=(gconst1*sj3);
IkReal x10105=(gconst2*sj3);
IkReal x10106=((1.0)*sj0);
IkReal x10107=(cj1*sj2);
IkReal x10108=((1.0)*x10098);
IkReal x10109=((1.0)*x10097);
IkReal x10110=((1.0)*cj1*cj2);
IkReal x10111=(cj3*x10097);
IkReal x10112=((1.0)*cj2*sj1);
IkReal x10113=(x10098*x10105);
evalcond[0]=((((-1.0)*gconst2*r20*x10109))+(((-1.0)*r22*x10108))+((gconst1*r21*x10097)));
evalcond[1]=((((-1.0)*r12*x10108))+cj0+((x10097*x10101))+(((-1.0)*gconst2*r10*x10109)));
evalcond[2]=(((x10097*x10100))+(((-1.0)*r02*x10108))+(((-1.0)*gconst2*r00*x10109))+(((-1.0)*x10106)));
evalcond[3]=(((r21*x10105))+((cj2*sj1))+((r20*x10104))+x10107+((r21*x10098*x10099))+(((-1.0)*r20*x10103*x10108))+((r22*x10111)));
evalcond[4]=(((r21*x10103))+((r20*x10113))+x10102+(((-1.0)*r22*sj3*x10109))+((r20*x10099))+(((-1.0)*x10110))+(((-1.0)*r21*x10104*x10108)));
evalcond[5]=(((cj0*x10102))+((r01*x10105))+((r00*x10104))+(((-1.0)*cj0*x10110))+(((-1.0)*r00*x10103*x10108))+((r02*x10111))+((r01*x10098*x10099)));
evalcond[6]=((((-1.0)*cj1*cj2*x10106))+((r11*x10098*x10099))+((sj0*x10102))+((r11*x10105))+((r12*x10111))+((r10*x10104))+(((-1.0)*r10*x10103*x10108)));
evalcond[7]=((((-1.0)*sj3*x10100*x10108))+((r01*x10103))+((r00*x10113))+(((-1.0)*cj0*x10112))+(((-1.0)*cj0*x10107))+(((-1.0)*r02*sj3*x10109))+((r00*x10099)));
evalcond[8]=((((-1.0)*x10106*x10107))+(((-1.0)*r12*sj3*x10109))+(((-1.0)*sj3*x10101*x10108))+(((-1.0)*cj2*sj1*x10106))+((r11*x10103))+((r10*x10099))+((r10*x10113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10114=((-1.0)*r21);
IkReal x10116 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10116)==0){
continue;
}
IkReal x10115=pow(x10116,-0.5);
CheckValue<IkReal> x10117 = IKatan2WithCheck(IkReal(x10114),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10117.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10117.value))));
IkReal gconst4=(x10114*x10115);
IkReal gconst5=((1.0)*r20*x10115);
CheckValue<IkReal> x10118 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10118.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10118.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10119=((-1.0)*r21);
CheckValue<IkReal> x10122 = IKatan2WithCheck(IkReal(x10119),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10122.valid){
continue;
}
IkReal x10120=((1.0)*(x10122.value));
IkReal x10121=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10120)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10120)));
IkReal gconst4=(x10119*x10121);
IkReal gconst5=((1.0)*r20*x10121);
IkReal x10123=r22*r22;
IkReal x10124=((1.0)*x10123);
CheckValue<IkReal> x10128=IKPowWithIntegerCheck(((-1.0)+x10123),-1);
if(!x10128.valid){
continue;
}
IkReal x10125=x10128.value;
if((((1.0)+(((-1.0)*x10124)))) < -0.00001)
continue;
IkReal x10126=IKsqrt(((1.0)+(((-1.0)*x10124))));
IkReal x10127=(cj0*x10125*x10126);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x10127+(((-1.0)*x10124*x10127))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10129=((-1.0)*r21);
CheckValue<IkReal> x10132 = IKatan2WithCheck(IkReal(x10129),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10132.valid){
continue;
}
IkReal x10130=((1.0)*(x10132.value));
IkReal x10131=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10130)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10130)));
IkReal gconst4=(x10129*x10131);
IkReal gconst5=((1.0)*r20*x10131);
IkReal x10133=r22*r22;
IkReal x10134=((1.0)*x10133);
CheckValue<IkReal> x10138=IKPowWithIntegerCheck(((-1.0)+x10133),-1);
if(!x10138.valid){
continue;
}
IkReal x10135=x10138.value;
if((((1.0)+(((-1.0)*x10134)))) < -0.00001)
continue;
IkReal x10136=IKsqrt(((1.0)+(((-1.0)*x10134))));
IkReal x10137=(sj0*x10135*x10136);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10137+(((-1.0)*x10134*x10137))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10139=((-1.0)*r21);
CheckValue<IkReal> x10142 = IKatan2WithCheck(IkReal(x10139),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10142.valid){
continue;
}
IkReal x10140=((1.0)*(x10142.value));
IkReal x10141=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10140)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10140)));
IkReal gconst4=(x10139*x10141);
IkReal gconst5=((1.0)*r20*x10141);
IkReal x10143=r22*r22;
IkReal x10144=(r12*sj0);
IkReal x10145=(cj0*r02);
CheckValue<IkReal> x10149=IKPowWithIntegerCheck(((-1.0)+x10143),-1);
if(!x10149.valid){
continue;
}
IkReal x10146=x10149.value;
if((((1.0)+(((-1.0)*x10143)))) < -0.00001)
continue;
IkReal x10147=IKsqrt(((1.0)+(((-1.0)*x10143))));
IkReal x10148=(r22*x10146*x10147);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10145))+(((-1.0)*x10144)))))+(IKabs((((x10145*x10148))+((x10144*x10148))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10150=((-1.0)*r21);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(x10150),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
IkReal x10151=((1.0)*(x10153.value));
IkReal x10152=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10151)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10151)));
IkReal gconst4=(x10150*x10152);
IkReal gconst5=((1.0)*r20*x10152);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10154=((-1.0)*r21);
CheckValue<IkReal> x10157 = IKatan2WithCheck(IkReal(x10154),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10157.valid){
continue;
}
IkReal x10155=((1.0)*(x10157.value));
IkReal x10156=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10155)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10155)));
IkReal gconst4=(x10154*x10156);
IkReal gconst5=((1.0)*r20*x10156);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10158=((-1.0)*r21);
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(x10158),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
IkReal x10159=((1.0)*(x10161.value));
IkReal x10160=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10159)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10159)));
IkReal gconst4=(x10158*x10160);
IkReal gconst5=((1.0)*r20*x10160);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10162=((-1.0)*r21);
CheckValue<IkReal> x10165 = IKatan2WithCheck(IkReal(x10162),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10165.valid){
continue;
}
IkReal x10163=((1.0)*(x10165.value));
IkReal x10164=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10163)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10163)));
IkReal gconst4=(x10162*x10164);
IkReal gconst5=((1.0)*r20*x10164);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10166=((-1.0)*r21);
CheckValue<IkReal> x10169 = IKatan2WithCheck(IkReal(x10166),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10169.valid){
continue;
}
IkReal x10167=((1.0)*(x10169.value));
IkReal x10168=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10167)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10167)));
IkReal gconst4=(x10166*x10168);
IkReal gconst5=((1.0)*r20*x10168);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10170=((-1.0)*r21);
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(x10170),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
IkReal x10171=((1.0)*(x10173.value));
IkReal x10172=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10171)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10171)));
IkReal gconst4=(x10170*x10172);
IkReal gconst5=((1.0)*r20*x10172);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10174=(gconst5*r10);
IkReal x10175=(gconst4*r11);
CheckValue<IkReal> x10176=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10174*x10174)+(((-2.0)*x10174*x10175))+(x10175*x10175))),-1);
if(!x10176.valid){
continue;
}
CheckValue<IkReal> x10177 = IKatan2WithCheck(IkReal(((((-1.0)*x10175))+x10174)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10176.value)))+(x10177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10178=IKsin(j4);
IkReal x10179=IKcos(j4);
IkReal x10180=(gconst4*r11);
IkReal x10181=((1.0)*cj1);
IkReal x10182=(gconst5*r10);
IkReal x10183=(gconst4*r01);
IkReal x10184=(gconst5*r00);
IkReal x10185=(gconst4*r21);
IkReal x10186=(gconst5*r20);
IkReal x10187=((1.0)*x10179);
IkReal x10188=((1.0)*x10178);
evalcond[0]=(((x10178*x10185))+(((-1.0)*x10186*x10188))+(((-1.0)*r22*x10187)));
evalcond[1]=(((x10178*x10183))+(((-1.0)*r02*x10187))+(((-1.0)*x10184*x10188)));
evalcond[2]=((((-1.0)*r12*x10188))+((x10179*x10182))+(((-1.0)*x10180*x10187)));
evalcond[3]=((1.0)+((x10178*x10180))+(((-1.0)*x10182*x10188))+(((-1.0)*r12*x10187)));
evalcond[4]=((((-1.0)*cj2*x10181))+((sj1*sj2))+(((-1.0)*x10185*x10187))+(((-1.0)*r22*x10188))+((x10179*x10186)));
evalcond[5]=((((-1.0)*r02*x10188))+(((-1.0)*x10183*x10187))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10181))+((x10179*x10184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10189=((1.0)*gconst5);
CheckValue<IkReal> x10190=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10189)))),-1);
if(!x10190.valid){
continue;
}
CheckValue<IkReal> x10191 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10189))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10190.value)))+(x10191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10192=IKsin(j4);
IkReal x10193=IKcos(j4);
IkReal x10194=(gconst4*r11);
IkReal x10195=((1.0)*cj1);
IkReal x10196=(gconst5*r10);
IkReal x10197=(gconst4*r01);
IkReal x10198=(gconst5*r00);
IkReal x10199=(gconst4*r21);
IkReal x10200=(gconst5*r20);
IkReal x10201=((1.0)*x10193);
IkReal x10202=((1.0)*x10192);
evalcond[0]=((((-1.0)*x10200*x10202))+(((-1.0)*r22*x10201))+((x10192*x10199)));
evalcond[1]=((((-1.0)*r02*x10201))+((x10192*x10197))+(((-1.0)*x10198*x10202)));
evalcond[2]=((((-1.0)*x10194*x10201))+((x10193*x10196))+(((-1.0)*r12*x10202)));
evalcond[3]=((1.0)+(((-1.0)*x10196*x10202))+((x10192*x10194))+(((-1.0)*r12*x10201)));
evalcond[4]=((((-1.0)*x10199*x10201))+(((-1.0)*cj2*x10195))+(((-1.0)*r22*x10202))+((sj1*sj2))+((x10193*x10200)));
evalcond[5]=((((-1.0)*r02*x10202))+(((-1.0)*x10197*x10201))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10195))+((x10193*x10198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
CheckValue<IkReal> x10204=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10203.value)+(((1.5707963267949)*(x10204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10205=IKsin(j4);
IkReal x10206=IKcos(j4);
IkReal x10207=(gconst4*r11);
IkReal x10208=((1.0)*cj1);
IkReal x10209=(gconst5*r10);
IkReal x10210=(gconst4*r01);
IkReal x10211=(gconst5*r00);
IkReal x10212=(gconst4*r21);
IkReal x10213=(gconst5*r20);
IkReal x10214=((1.0)*x10206);
IkReal x10215=((1.0)*x10205);
evalcond[0]=((((-1.0)*r22*x10214))+(((-1.0)*x10213*x10215))+((x10205*x10212)));
evalcond[1]=((((-1.0)*x10211*x10215))+((x10205*x10210))+(((-1.0)*r02*x10214)));
evalcond[2]=(((x10206*x10209))+(((-1.0)*x10207*x10214))+(((-1.0)*r12*x10215)));
evalcond[3]=((1.0)+((x10205*x10207))+(((-1.0)*r12*x10214))+(((-1.0)*x10209*x10215)));
evalcond[4]=((((-1.0)*x10212*x10214))+(((-1.0)*r22*x10215))+(((-1.0)*cj2*x10208))+((sj1*sj2))+((x10206*x10213)));
evalcond[5]=((((-1.0)*x10210*x10214))+(((-1.0)*cj2*sj1))+((x10206*x10211))+(((-1.0)*sj2*x10208))+(((-1.0)*r02*x10215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10216=((-1.0)*r21);
CheckValue<IkReal> x10219 = IKatan2WithCheck(IkReal(x10216),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10219.valid){
continue;
}
IkReal x10217=((1.0)*(x10219.value));
IkReal x10218=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10217)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10217)));
IkReal gconst4=(x10216*x10218);
IkReal gconst5=((1.0)*r20*x10218);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10220=((-1.0)*r21);
CheckValue<IkReal> x10223 = IKatan2WithCheck(IkReal(x10220),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10223.valid){
continue;
}
IkReal x10221=((1.0)*(x10223.value));
IkReal x10222=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10221)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10221)));
IkReal gconst4=(x10220*x10222);
IkReal gconst5=((1.0)*r20*x10222);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10224=((-1.0)*r21);
CheckValue<IkReal> x10227 = IKatan2WithCheck(IkReal(x10224),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10227.valid){
continue;
}
IkReal x10225=((1.0)*(x10227.value));
IkReal x10226=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10225)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10225)));
IkReal gconst4=(x10224*x10226);
IkReal gconst5=((1.0)*r20*x10226);
IkReal x10228=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10232=IKPowWithIntegerCheck(x10228,-1);
if(!x10232.valid){
continue;
}
IkReal x10229=x10232.value;
IkReal x10230=((1.0)*x10229);
IkReal x10231=((((-1.0)*x10230*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10229))+(((-1.0)*(r12*r12)))+(((-1.0)*x10230*(r11*r11)*(r21*r21))));
j4eval[0]=x10231;
j4eval[1]=r12;
j4eval[2]=x10228;
j4eval[3]=IKsign(x10231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10233=(gconst5*r10);
IkReal x10234=(gconst4*r11);
CheckValue<IkReal> x10235 = IKatan2WithCheck(IkReal((x10234+(((-1.0)*x10233)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10235.valid){
continue;
}
CheckValue<IkReal> x10236=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10233*x10233)))+(((-1.0)*(r12*r12)))+(((2.0)*x10233*x10234))+(((-1.0)*(x10234*x10234))))),-1);
if(!x10236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10235.value)+(((1.5707963267949)*(x10236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10237=IKcos(j4);
IkReal x10238=IKsin(j4);
IkReal x10239=(gconst4*r11);
IkReal x10240=(gconst5*r10);
IkReal x10241=((1.0)*cj1);
IkReal x10242=(gconst5*r00);
IkReal x10243=(gconst5*r20);
IkReal x10244=((1.0)*x10237);
IkReal x10245=(gconst4*x10237);
IkReal x10246=((1.0)*x10238);
IkReal x10247=(gconst4*x10238);
evalcond[0]=((((-1.0)*x10240*x10244))+((x10237*x10239))+((r12*x10238)));
evalcond[1]=(((r21*x10247))+(((-1.0)*r22*x10244))+(((-1.0)*x10243*x10246)));
evalcond[2]=(((r01*x10247))+(((-1.0)*x10242*x10246))+(((-1.0)*r02*x10244)));
evalcond[3]=((1.0)+(((-1.0)*x10240*x10246))+((x10238*x10239))+(((-1.0)*r12*x10244)));
evalcond[4]=((((-1.0)*cj2*x10241))+((r22*x10238))+((sj1*sj2))+((r21*x10245))+(((-1.0)*x10243*x10244)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10238))+(((-1.0)*sj2*x10241))+((r01*x10245))+(((-1.0)*x10242*x10244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10248=((1.0)*gconst5);
CheckValue<IkReal> x10249 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10248))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10249.valid){
continue;
}
CheckValue<IkReal> x10250=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10248)))),-1);
if(!x10250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10249.value)+(((1.5707963267949)*(x10250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10251=IKcos(j4);
IkReal x10252=IKsin(j4);
IkReal x10253=(gconst4*r11);
IkReal x10254=(gconst5*r10);
IkReal x10255=((1.0)*cj1);
IkReal x10256=(gconst5*r00);
IkReal x10257=(gconst5*r20);
IkReal x10258=((1.0)*x10251);
IkReal x10259=(gconst4*x10251);
IkReal x10260=((1.0)*x10252);
IkReal x10261=(gconst4*x10252);
evalcond[0]=(((r12*x10252))+(((-1.0)*x10254*x10258))+((x10251*x10253)));
evalcond[1]=((((-1.0)*x10257*x10260))+(((-1.0)*r22*x10258))+((r21*x10261)));
evalcond[2]=((((-1.0)*r02*x10258))+((r01*x10261))+(((-1.0)*x10256*x10260)));
evalcond[3]=((1.0)+(((-1.0)*x10254*x10260))+(((-1.0)*r12*x10258))+((x10252*x10253)));
evalcond[4]=(((r22*x10252))+(((-1.0)*cj2*x10255))+((sj1*sj2))+(((-1.0)*x10257*x10258))+((r21*x10259)));
evalcond[5]=(((r02*x10252))+(((-1.0)*cj2*sj1))+(((-1.0)*x10256*x10258))+(((-1.0)*sj2*x10255))+((r01*x10259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10262 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10262.valid){
continue;
}
CheckValue<IkReal> x10263=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10262.value)+(((1.5707963267949)*(x10263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10264=IKcos(j4);
IkReal x10265=IKsin(j4);
IkReal x10266=(gconst4*r11);
IkReal x10267=(gconst5*r10);
IkReal x10268=((1.0)*cj1);
IkReal x10269=(gconst5*r00);
IkReal x10270=(gconst5*r20);
IkReal x10271=((1.0)*x10264);
IkReal x10272=(gconst4*x10264);
IkReal x10273=((1.0)*x10265);
IkReal x10274=(gconst4*x10265);
evalcond[0]=(((r12*x10265))+((x10264*x10266))+(((-1.0)*x10267*x10271)));
evalcond[1]=((((-1.0)*r22*x10271))+((r21*x10274))+(((-1.0)*x10270*x10273)));
evalcond[2]=(((r01*x10274))+(((-1.0)*x10269*x10273))+(((-1.0)*r02*x10271)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10271))+((x10265*x10266))+(((-1.0)*x10267*x10273)));
evalcond[4]=(((r22*x10265))+((sj1*sj2))+((r21*x10272))+(((-1.0)*cj2*x10268))+(((-1.0)*x10270*x10271)));
evalcond[5]=(((r02*x10265))+((r01*x10272))+(((-1.0)*cj2*sj1))+(((-1.0)*x10269*x10271))+(((-1.0)*sj2*x10268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10275=((-1.0)*r21);
CheckValue<IkReal> x10278 = IKatan2WithCheck(IkReal(x10275),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10278.valid){
continue;
}
IkReal x10276=((1.0)*(x10278.value));
IkReal x10277=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10276)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10276)));
IkReal gconst4=(x10275*x10277);
IkReal gconst5=((1.0)*r20*x10277);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10279=((-1.0)*r21);
CheckValue<IkReal> x10282 = IKatan2WithCheck(IkReal(x10279),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10282.valid){
continue;
}
IkReal x10280=((1.0)*(x10282.value));
IkReal x10281=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10280)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10280)));
IkReal gconst4=(x10279*x10281);
IkReal gconst5=((1.0)*r20*x10281);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10283=((-1.0)*r21);
CheckValue<IkReal> x10286 = IKatan2WithCheck(IkReal(x10283),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10286.valid){
continue;
}
IkReal x10284=((1.0)*(x10286.value));
IkReal x10285=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10284)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10284)));
IkReal gconst4=(x10283*x10285);
IkReal gconst5=((1.0)*r20*x10285);
IkReal x10287=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10291=IKPowWithIntegerCheck(x10287,-1);
if(!x10291.valid){
continue;
}
IkReal x10288=x10291.value;
IkReal x10289=((1.0)*x10288);
IkReal x10290=((((-1.0)*x10289*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10288))+(((-1.0)*(r12*r12)))+(((-1.0)*x10289*(r10*r10)*(r20*r20))));
j4eval[0]=x10290;
j4eval[1]=r12;
j4eval[2]=x10287;
j4eval[3]=IKsign(x10290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10292=(gconst5*r10);
IkReal x10293=(gconst4*r11);
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(((((-1.0)*x10292))+x10293)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
CheckValue<IkReal> x10295=IKPowWithIntegerCheck(IKsign(((((2.0)*x10292*x10293))+(((-1.0)*(x10293*x10293)))+(((-1.0)*(x10292*x10292)))+(((-1.0)*(r12*r12))))),-1);
if(!x10295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10294.value)+(((1.5707963267949)*(x10295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10296=IKcos(j4);
IkReal x10297=IKsin(j4);
IkReal x10298=(gconst4*r11);
IkReal x10299=(gconst5*r10);
IkReal x10300=(gconst5*r00);
IkReal x10301=(gconst5*r20);
IkReal x10302=((1.0)*x10296);
IkReal x10303=(gconst4*x10296);
IkReal x10304=((1.0)*x10297);
IkReal x10305=(gconst4*x10297);
evalcond[0]=(((r12*x10297))+((x10296*x10298))+(((-1.0)*x10299*x10302)));
evalcond[1]=((((-1.0)*x10301*x10304))+(((-1.0)*r22*x10302))+((r21*x10305)));
evalcond[2]=((((-1.0)*r02*x10302))+(((-1.0)*x10300*x10304))+((r01*x10305)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10302))+((x10297*x10298))+(((-1.0)*x10299*x10304)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10301*x10302))+((cj1*sj2))+((r21*x10303))+((r22*x10297)));
evalcond[5]=((((-1.0)*x10300*x10302))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10303))+((r02*x10297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10306=((1.0)*gconst5);
CheckValue<IkReal> x10307 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10307.valid){
continue;
}
CheckValue<IkReal> x10308=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10306)))),-1);
if(!x10308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10307.value)+(((1.5707963267949)*(x10308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10309=IKcos(j4);
IkReal x10310=IKsin(j4);
IkReal x10311=(gconst4*r11);
IkReal x10312=(gconst5*r10);
IkReal x10313=(gconst5*r00);
IkReal x10314=(gconst5*r20);
IkReal x10315=((1.0)*x10309);
IkReal x10316=(gconst4*x10309);
IkReal x10317=((1.0)*x10310);
IkReal x10318=(gconst4*x10310);
evalcond[0]=((((-1.0)*x10312*x10315))+((r12*x10310))+((x10309*x10311)));
evalcond[1]=(((r21*x10318))+(((-1.0)*x10314*x10317))+(((-1.0)*r22*x10315)));
evalcond[2]=(((r01*x10318))+(((-1.0)*x10313*x10317))+(((-1.0)*r02*x10315)));
evalcond[3]=((1.0)+(((-1.0)*x10312*x10317))+(((-1.0)*r12*x10315))+((x10310*x10311)));
evalcond[4]=(((cj2*sj1))+((r21*x10316))+((cj1*sj2))+((r22*x10310))+(((-1.0)*x10314*x10315)));
evalcond[5]=(((r01*x10316))+(((-1.0)*x10313*x10315))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10319 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10319.valid){
continue;
}
CheckValue<IkReal> x10320=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10319.value)+(((1.5707963267949)*(x10320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10321=IKcos(j4);
IkReal x10322=IKsin(j4);
IkReal x10323=(gconst4*r11);
IkReal x10324=(gconst5*r10);
IkReal x10325=(gconst5*r00);
IkReal x10326=(gconst5*r20);
IkReal x10327=((1.0)*x10321);
IkReal x10328=(gconst4*x10321);
IkReal x10329=((1.0)*x10322);
IkReal x10330=(gconst4*x10322);
evalcond[0]=((((-1.0)*x10324*x10327))+((x10321*x10323))+((r12*x10322)));
evalcond[1]=((((-1.0)*r22*x10327))+((r21*x10330))+(((-1.0)*x10326*x10329)));
evalcond[2]=((((-1.0)*r02*x10327))+((r01*x10330))+(((-1.0)*x10325*x10329)));
evalcond[3]=((1.0)+(((-1.0)*x10324*x10329))+((x10322*x10323))+(((-1.0)*r12*x10327)));
evalcond[4]=(((cj2*sj1))+((r22*x10322))+((cj1*sj2))+((r21*x10328))+(((-1.0)*x10326*x10327)));
evalcond[5]=(((r02*x10322))+(((-1.0)*cj1*cj2))+((r01*x10328))+((sj1*sj2))+(((-1.0)*x10325*x10327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10331=((-1.0)*r21);
CheckValue<IkReal> x10334 = IKatan2WithCheck(IkReal(x10331),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10334.valid){
continue;
}
IkReal x10332=((1.0)*(x10334.value));
IkReal x10333=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10332)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10332)));
IkReal gconst4=(x10331*x10333);
IkReal gconst5=((1.0)*r20*x10333);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10335=((-1.0)*r21);
CheckValue<IkReal> x10338 = IKatan2WithCheck(IkReal(x10335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10338.valid){
continue;
}
IkReal x10336=((1.0)*(x10338.value));
IkReal x10337=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10336)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10336)));
IkReal gconst4=(x10335*x10337);
IkReal gconst5=((1.0)*r20*x10337);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10339=((-1.0)*r21);
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal(x10339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
IkReal x10340=((1.0)*(x10342.value));
IkReal x10341=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10340)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10340)));
IkReal gconst4=(x10339*x10341);
IkReal gconst5=((1.0)*r20*x10341);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10343=(gconst5*r10);
IkReal x10344=(gconst4*r11);
CheckValue<IkReal> x10345 = IKatan2WithCheck(IkReal((x10343+(((-1.0)*x10344)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10345.valid){
continue;
}
CheckValue<IkReal> x10346=IKPowWithIntegerCheck(IKsign(((x10344*x10344)+(r12*r12)+(((-2.0)*x10343*x10344))+(x10343*x10343))),-1);
if(!x10346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10345.value)+(((1.5707963267949)*(x10346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10347=IKsin(j4);
IkReal x10348=IKcos(j4);
IkReal x10349=(gconst4*r11);
IkReal x10350=(gconst5*r10);
IkReal x10351=(gconst4*r01);
IkReal x10352=(gconst5*r00);
IkReal x10353=(gconst4*r21);
IkReal x10354=(gconst5*r20);
IkReal x10355=((1.0)*x10348);
IkReal x10356=((1.0)*x10347);
evalcond[0]=((((-1.0)*r22*x10355))+(((-1.0)*x10354*x10356))+((x10347*x10353)));
evalcond[1]=((((-1.0)*x10352*x10356))+((x10347*x10351))+(((-1.0)*r02*x10355)));
evalcond[2]=(((x10348*x10350))+(((-1.0)*r12*x10356))+(((-1.0)*x10349*x10355)));
evalcond[3]=((1.0)+((x10347*x10349))+(((-1.0)*x10350*x10356))+(((-1.0)*r12*x10355)));
evalcond[4]=(((cj2*sj1))+((x10348*x10354))+((cj1*sj2))+(((-1.0)*r22*x10356))+(((-1.0)*x10353*x10355)));
evalcond[5]=(((x10348*x10352))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10351*x10355))+(((-1.0)*r02*x10356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10357=((1.0)*gconst5);
CheckValue<IkReal> x10358 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10358.valid){
continue;
}
CheckValue<IkReal> x10359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10357)))),-1);
if(!x10359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10358.value)+(((1.5707963267949)*(x10359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10360=IKsin(j4);
IkReal x10361=IKcos(j4);
IkReal x10362=(gconst4*r11);
IkReal x10363=(gconst5*r10);
IkReal x10364=(gconst4*r01);
IkReal x10365=(gconst5*r00);
IkReal x10366=(gconst4*r21);
IkReal x10367=(gconst5*r20);
IkReal x10368=((1.0)*x10361);
IkReal x10369=((1.0)*x10360);
evalcond[0]=(((x10360*x10366))+(((-1.0)*x10367*x10369))+(((-1.0)*r22*x10368)));
evalcond[1]=((((-1.0)*r02*x10368))+(((-1.0)*x10365*x10369))+((x10360*x10364)));
evalcond[2]=(((x10361*x10363))+(((-1.0)*x10362*x10368))+(((-1.0)*r12*x10369)));
evalcond[3]=((1.0)+(((-1.0)*x10363*x10369))+(((-1.0)*r12*x10368))+((x10360*x10362)));
evalcond[4]=(((cj2*sj1))+((x10361*x10367))+((cj1*sj2))+(((-1.0)*x10366*x10368))+(((-1.0)*r22*x10369)));
evalcond[5]=(((x10361*x10365))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10369))+(((-1.0)*x10364*x10368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10370 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10370.valid){
continue;
}
CheckValue<IkReal> x10371=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10370.value)+(((1.5707963267949)*(x10371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10372=IKsin(j4);
IkReal x10373=IKcos(j4);
IkReal x10374=(gconst4*r11);
IkReal x10375=(gconst5*r10);
IkReal x10376=(gconst4*r01);
IkReal x10377=(gconst5*r00);
IkReal x10378=(gconst4*r21);
IkReal x10379=(gconst5*r20);
IkReal x10380=((1.0)*x10373);
IkReal x10381=((1.0)*x10372);
evalcond[0]=((((-1.0)*x10379*x10381))+((x10372*x10378))+(((-1.0)*r22*x10380)));
evalcond[1]=((((-1.0)*x10377*x10381))+(((-1.0)*r02*x10380))+((x10372*x10376)));
evalcond[2]=((((-1.0)*x10374*x10380))+((x10373*x10375))+(((-1.0)*r12*x10381)));
evalcond[3]=((1.0)+(((-1.0)*x10375*x10381))+((x10372*x10374))+(((-1.0)*r12*x10380)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10373*x10379))+(((-1.0)*x10378*x10380))+(((-1.0)*r22*x10381)));
evalcond[5]=((((-1.0)*x10376*x10380))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10381))+((x10373*x10377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10382=gconst4*gconst4;
IkReal x10383=gconst5*gconst5;
IkReal x10384=(r10*r21);
IkReal x10385=((1.0)*cj3);
IkReal x10386=(r11*r21);
IkReal x10387=(r11*r20);
IkReal x10388=(r22*sj3);
IkReal x10389=(gconst4*r10);
IkReal x10390=((1.0)*sj3);
IkReal x10391=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10392 = IKatan2WithCheck(IkReal((((gconst5*r11*x10388))+((x10388*x10389)))),IkReal(((((-1.0)*gconst5*r20*x10389*x10390))+(((-1.0)*x10383*x10387*x10390))+((sj3*x10382*x10384))+((gconst4*gconst5*sj3*x10386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10392.valid){
continue;
}
CheckValue<IkReal> x10393=IKPowWithIntegerCheck(IKsign((((x10384*x10391))+(((-1.0)*r12*r22*x10385))+((x10387*x10391))+(((-1.0)*x10382*x10385*x10386))+(((-1.0)*r10*r20*x10383*x10385)))),-1);
if(!x10393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10392.value)+(((1.5707963267949)*(x10393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10394=IKsin(j4);
IkReal x10395=IKcos(j4);
IkReal x10396=(sj1*sj2);
IkReal x10397=(gconst5*sj3);
IkReal x10398=(cj3*gconst5);
IkReal x10399=(gconst4*r11);
IkReal x10400=((1.0)*cj1);
IkReal x10401=(gconst4*r01);
IkReal x10402=(cj2*sj1);
IkReal x10403=(gconst4*r21);
IkReal x10404=(gconst4*sj3);
IkReal x10405=(cj3*gconst4);
IkReal x10406=(cj2*x10400);
IkReal x10407=((1.0)*x10395);
IkReal x10408=((1.0)*x10394);
IkReal x10409=(cj3*x10394);
IkReal x10410=(cj3*x10395);
evalcond[0]=((((-1.0)*gconst5*r20*x10408))+(((-1.0)*r22*x10407))+((x10394*x10403)));
evalcond[1]=(((x10394*x10401))+(((-1.0)*r02*x10407))+(((-1.0)*gconst5*r00*x10408)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10408))+((x10394*x10399))+(((-1.0)*r12*x10407)));
evalcond[3]=(((r11*x10397))+((x10399*x10410))+((r12*x10409))+(((-1.0)*r10*x10398*x10407))+((r10*x10404)));
evalcond[4]=(((r11*x10398))+((r10*x10395*x10397))+(((-1.0)*r12*sj3*x10408))+((r10*x10405))+(((-1.0)*sj3*x10399*x10407)));
evalcond[5]=(((r22*x10409))+((r21*x10397))+((cj1*sj2))+(((-1.0)*r20*x10398*x10407))+((r20*x10404))+((x10403*x10410))+x10402);
evalcond[6]=(((r01*x10397))+((x10401*x10410))+((r00*x10404))+((r02*x10409))+(((-1.0)*r00*x10398*x10407))+(((-1.0)*x10406))+x10396);
evalcond[7]=((((-1.0)*r22*sj3*x10408))+((r21*x10398))+(((-1.0)*x10406))+x10396+((r20*x10405))+(((-1.0)*sj3*x10403*x10407))+((r20*x10395*x10397)));
evalcond[8]=(((r01*x10398))+((r00*x10405))+(((-1.0)*sj2*x10400))+((r00*x10395*x10397))+(((-1.0)*sj3*x10401*x10407))+(((-1.0)*x10402))+(((-1.0)*r02*sj3*x10408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10411=((1.0)*gconst5);
CheckValue<IkReal> x10412=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10411)))),-1);
if(!x10412.valid){
continue;
}
CheckValue<IkReal> x10413 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10411))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10412.value)))+(x10413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10414=IKsin(j4);
IkReal x10415=IKcos(j4);
IkReal x10416=(sj1*sj2);
IkReal x10417=(gconst5*sj3);
IkReal x10418=(cj3*gconst5);
IkReal x10419=(gconst4*r11);
IkReal x10420=((1.0)*cj1);
IkReal x10421=(gconst4*r01);
IkReal x10422=(cj2*sj1);
IkReal x10423=(gconst4*r21);
IkReal x10424=(gconst4*sj3);
IkReal x10425=(cj3*gconst4);
IkReal x10426=(cj2*x10420);
IkReal x10427=((1.0)*x10415);
IkReal x10428=((1.0)*x10414);
IkReal x10429=(cj3*x10414);
IkReal x10430=(cj3*x10415);
evalcond[0]=(((x10414*x10423))+(((-1.0)*gconst5*r20*x10428))+(((-1.0)*r22*x10427)));
evalcond[1]=((((-1.0)*gconst5*r00*x10428))+((x10414*x10421))+(((-1.0)*r02*x10427)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10428))+((x10414*x10419))+(((-1.0)*r12*x10427)));
evalcond[3]=((((-1.0)*r10*x10418*x10427))+((x10419*x10430))+((r12*x10429))+((r11*x10417))+((r10*x10424)));
evalcond[4]=(((r10*x10415*x10417))+(((-1.0)*r12*sj3*x10428))+((r11*x10418))+((r10*x10425))+(((-1.0)*sj3*x10419*x10427)));
evalcond[5]=((((-1.0)*r20*x10418*x10427))+((r21*x10417))+((cj1*sj2))+((r22*x10429))+((x10423*x10430))+x10422+((r20*x10424)));
evalcond[6]=(((r00*x10424))+((x10421*x10430))+((r01*x10417))+(((-1.0)*r00*x10418*x10427))+((r02*x10429))+(((-1.0)*x10426))+x10416);
evalcond[7]=(((r21*x10418))+((r20*x10415*x10417))+(((-1.0)*sj3*x10423*x10427))+(((-1.0)*x10426))+x10416+((r20*x10425))+(((-1.0)*r22*sj3*x10428)));
evalcond[8]=(((r00*x10425))+((r01*x10418))+(((-1.0)*sj3*x10421*x10427))+(((-1.0)*sj2*x10420))+(((-1.0)*x10422))+(((-1.0)*r02*sj3*x10428))+((r00*x10415*x10417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10431 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10431.valid){
continue;
}
CheckValue<IkReal> x10432=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10431.value)+(((1.5707963267949)*(x10432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10433=IKsin(j4);
IkReal x10434=IKcos(j4);
IkReal x10435=(sj1*sj2);
IkReal x10436=(gconst5*sj3);
IkReal x10437=(cj3*gconst5);
IkReal x10438=(gconst4*r11);
IkReal x10439=((1.0)*cj1);
IkReal x10440=(gconst4*r01);
IkReal x10441=(cj2*sj1);
IkReal x10442=(gconst4*r21);
IkReal x10443=(gconst4*sj3);
IkReal x10444=(cj3*gconst4);
IkReal x10445=(cj2*x10439);
IkReal x10446=((1.0)*x10434);
IkReal x10447=((1.0)*x10433);
IkReal x10448=(cj3*x10433);
IkReal x10449=(cj3*x10434);
evalcond[0]=((((-1.0)*gconst5*r20*x10447))+((x10433*x10442))+(((-1.0)*r22*x10446)));
evalcond[1]=((((-1.0)*r02*x10446))+(((-1.0)*gconst5*r00*x10447))+((x10433*x10440)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10446))+((x10433*x10438))+(((-1.0)*gconst5*r10*x10447)));
evalcond[3]=(((x10438*x10449))+((r12*x10448))+(((-1.0)*r10*x10437*x10446))+((r11*x10436))+((r10*x10443)));
evalcond[4]=((((-1.0)*sj3*x10438*x10446))+(((-1.0)*r12*sj3*x10447))+((r10*x10434*x10436))+((r11*x10437))+((r10*x10444)));
evalcond[5]=(((r22*x10448))+((x10442*x10449))+((cj1*sj2))+((r20*x10443))+x10441+(((-1.0)*r20*x10437*x10446))+((r21*x10436)));
evalcond[6]=(((r01*x10436))+(((-1.0)*x10445))+((r02*x10448))+(((-1.0)*r00*x10437*x10446))+((r00*x10443))+x10435+((x10440*x10449)));
evalcond[7]=((((-1.0)*r22*sj3*x10447))+(((-1.0)*sj3*x10442*x10446))+(((-1.0)*x10445))+((r20*x10434*x10436))+((r20*x10444))+x10435+((r21*x10437)));
evalcond[8]=((((-1.0)*x10441))+((r01*x10437))+(((-1.0)*r02*sj3*x10447))+(((-1.0)*sj2*x10439))+((r00*x10444))+(((-1.0)*sj3*x10440*x10446))+((r00*x10434*x10436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10450=((-1.0)*r21);
CheckValue<IkReal> x10453 = IKatan2WithCheck(IkReal(x10450),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10453.valid){
continue;
}
IkReal x10451=((1.0)*(x10453.value));
IkReal x10452=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10451)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10451)));
IkReal gconst4=(x10450*x10452);
IkReal gconst5=((1.0)*r20*x10452);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10454=((-1.0)*r21);
CheckValue<IkReal> x10457 = IKatan2WithCheck(IkReal(x10454),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10457.valid){
continue;
}
IkReal x10455=((1.0)*(x10457.value));
IkReal x10456=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10455)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10455)));
IkReal gconst4=(x10454*x10456);
IkReal gconst5=((1.0)*r20*x10456);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10458=((-1.0)*r21);
CheckValue<IkReal> x10461 = IKatan2WithCheck(IkReal(x10458),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10461.valid){
continue;
}
IkReal x10459=((1.0)*(x10461.value));
IkReal x10460=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10459)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10459)));
IkReal gconst4=(x10458*x10460);
IkReal gconst5=((1.0)*r20*x10460);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10462=((-1.0)*r21);
CheckValue<IkReal> x10465 = IKatan2WithCheck(IkReal(x10462),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10465.valid){
continue;
}
IkReal x10463=((1.0)*(x10465.value));
IkReal x10464=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10463)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10463)));
IkReal gconst4=(x10462*x10464);
IkReal gconst5=((1.0)*r20*x10464);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10466=((-1.0)*r21);
CheckValue<IkReal> x10469 = IKatan2WithCheck(IkReal(x10466),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10469.valid){
continue;
}
IkReal x10467=((1.0)*(x10469.value));
IkReal x10468=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10467)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10467)));
IkReal gconst4=(x10466*x10468);
IkReal gconst5=((1.0)*r20*x10468);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10470=((-1.0)*r21);
CheckValue<IkReal> x10473 = IKatan2WithCheck(IkReal(x10470),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10473.valid){
continue;
}
IkReal x10471=((1.0)*(x10473.value));
IkReal x10472=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10471)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10471)));
IkReal gconst4=(x10470*x10472);
IkReal gconst5=((1.0)*r20*x10472);
IkReal x10474=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10478=IKPowWithIntegerCheck(x10474,-1);
if(!x10478.valid){
continue;
}
IkReal x10475=x10478.value;
IkReal x10476=((1.0)*x10475);
IkReal x10477=((((-1.0)*(r12*r12)))+(((-1.0)*x10476*(r10*r10)*(r20*r20)))+(((-1.0)*x10476*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10475)));
j4eval[0]=x10477;
j4eval[1]=r12;
j4eval[2]=x10474;
j4eval[3]=IKsign(x10477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10479=(gconst5*r10);
IkReal x10480=(gconst4*r11);
CheckValue<IkReal> x10481 = IKatan2WithCheck(IkReal(((((-1.0)*x10480))+x10479)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10481.valid){
continue;
}
CheckValue<IkReal> x10482=IKPowWithIntegerCheck(IKsign(((((2.0)*x10479*x10480))+(((-1.0)*(x10479*x10479)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10480*x10480))))),-1);
if(!x10482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10481.value)+(((1.5707963267949)*(x10482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10483=IKsin(j4);
IkReal x10484=IKcos(j4);
IkReal x10485=(gconst4*r11);
IkReal x10486=(gconst5*r10);
IkReal x10487=(gconst4*r01);
IkReal x10488=(gconst5*r00);
IkReal x10489=(gconst4*r21);
IkReal x10490=(gconst5*r20);
IkReal x10491=((1.0)*x10484);
IkReal x10492=((1.0)*x10483);
evalcond[0]=((((-1.0)*x10490*x10492))+(((-1.0)*r22*x10491))+((x10483*x10489)));
evalcond[1]=((((-1.0)*x10488*x10492))+((x10483*x10487))+(((-1.0)*r02*x10491)));
evalcond[2]=((((-1.0)*x10485*x10491))+(((-1.0)*r12*x10492))+((x10484*x10486)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10491))+((x10483*x10485))+(((-1.0)*x10486*x10492)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10492))+((x10484*x10488))+(((-1.0)*x10487*x10491)));
evalcond[5]=((((-1.0)*x10489*x10491))+(((-1.0)*r22*x10492))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10484*x10490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10493=((1.0)*gconst5);
CheckValue<IkReal> x10494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10493))+(((-1.0)*gconst4*r20)))),-1);
if(!x10494.valid){
continue;
}
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10494.value)))+(x10495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10496=IKsin(j4);
IkReal x10497=IKcos(j4);
IkReal x10498=(gconst4*r11);
IkReal x10499=(gconst5*r10);
IkReal x10500=(gconst4*r01);
IkReal x10501=(gconst5*r00);
IkReal x10502=(gconst4*r21);
IkReal x10503=(gconst5*r20);
IkReal x10504=((1.0)*x10497);
IkReal x10505=((1.0)*x10496);
evalcond[0]=((((-1.0)*r22*x10504))+((x10496*x10502))+(((-1.0)*x10503*x10505)));
evalcond[1]=((((-1.0)*x10501*x10505))+((x10496*x10500))+(((-1.0)*r02*x10504)));
evalcond[2]=((((-1.0)*x10498*x10504))+((x10497*x10499))+(((-1.0)*r12*x10505)));
evalcond[3]=((-1.0)+((x10496*x10498))+(((-1.0)*r12*x10504))+(((-1.0)*x10499*x10505)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10497*x10501))+(((-1.0)*r02*x10505))+(((-1.0)*x10500*x10504)));
evalcond[5]=((((-1.0)*r22*x10505))+(((-1.0)*x10502*x10504))+((x10497*x10503))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10506=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10506.valid){
continue;
}
CheckValue<IkReal> x10507 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10506.value)))+(x10507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10508=IKsin(j4);
IkReal x10509=IKcos(j4);
IkReal x10510=(gconst4*r11);
IkReal x10511=(gconst5*r10);
IkReal x10512=(gconst4*r01);
IkReal x10513=(gconst5*r00);
IkReal x10514=(gconst4*r21);
IkReal x10515=(gconst5*r20);
IkReal x10516=((1.0)*x10509);
IkReal x10517=((1.0)*x10508);
evalcond[0]=((((-1.0)*r22*x10516))+(((-1.0)*x10515*x10517))+((x10508*x10514)));
evalcond[1]=((((-1.0)*r02*x10516))+(((-1.0)*x10513*x10517))+((x10508*x10512)));
evalcond[2]=(((x10509*x10511))+(((-1.0)*x10510*x10516))+(((-1.0)*r12*x10517)));
evalcond[3]=((-1.0)+(((-1.0)*x10511*x10517))+(((-1.0)*r12*x10516))+((x10508*x10510)));
evalcond[4]=(((cj2*sj1))+((x10509*x10513))+(((-1.0)*r02*x10517))+((cj1*sj2))+(((-1.0)*x10512*x10516)));
evalcond[5]=(((x10509*x10515))+(((-1.0)*r22*x10517))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10514*x10516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10518=((-1.0)*r21);
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(x10518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
IkReal x10519=((1.0)*(x10521.value));
IkReal x10520=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10519)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10519)));
IkReal gconst4=(x10518*x10520);
IkReal gconst5=((1.0)*r20*x10520);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10522=((-1.0)*r21);
CheckValue<IkReal> x10525 = IKatan2WithCheck(IkReal(x10522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10525.valid){
continue;
}
IkReal x10523=((1.0)*(x10525.value));
IkReal x10524=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10523)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10523)));
IkReal gconst4=(x10522*x10524);
IkReal gconst5=((1.0)*r20*x10524);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10526=((-1.0)*r21);
CheckValue<IkReal> x10529 = IKatan2WithCheck(IkReal(x10526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10529.valid){
continue;
}
IkReal x10527=((1.0)*(x10529.value));
IkReal x10528=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10527)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10527)));
IkReal gconst4=(x10526*x10528);
IkReal gconst5=((1.0)*r20*x10528);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10530=(gconst5*r10);
IkReal x10531=(gconst4*r11);
CheckValue<IkReal> x10532 = IKatan2WithCheck(IkReal(((((-1.0)*x10530))+x10531)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10532.valid){
continue;
}
CheckValue<IkReal> x10533=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10530*x10531))+(x10531*x10531)+(x10530*x10530))),-1);
if(!x10533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10532.value)+(((1.5707963267949)*(x10533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10534=IKcos(j4);
IkReal x10535=IKsin(j4);
IkReal x10536=(gconst4*r11);
IkReal x10537=(gconst5*r10);
IkReal x10538=(gconst5*r00);
IkReal x10539=(gconst5*r20);
IkReal x10540=((1.0)*x10534);
IkReal x10541=(gconst4*x10534);
IkReal x10542=((1.0)*x10535);
IkReal x10543=(gconst4*x10535);
evalcond[0]=(((x10534*x10536))+((r12*x10535))+(((-1.0)*x10537*x10540)));
evalcond[1]=((((-1.0)*x10539*x10542))+(((-1.0)*r22*x10540))+((r21*x10543)));
evalcond[2]=((((-1.0)*x10538*x10542))+(((-1.0)*r02*x10540))+((r01*x10543)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10540))+(((-1.0)*x10537*x10542))+((x10535*x10536)));
evalcond[4]=(((cj2*sj1))+((r02*x10535))+(((-1.0)*x10538*x10540))+((cj1*sj2))+((r01*x10541)));
evalcond[5]=(((r22*x10535))+(((-1.0)*x10539*x10540))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10544=((1.0)*gconst5);
CheckValue<IkReal> x10545=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10544)))),-1);
if(!x10545.valid){
continue;
}
CheckValue<IkReal> x10546 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10544))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10545.value)))+(x10546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10547=IKcos(j4);
IkReal x10548=IKsin(j4);
IkReal x10549=(gconst4*r11);
IkReal x10550=(gconst5*r10);
IkReal x10551=(gconst5*r00);
IkReal x10552=(gconst5*r20);
IkReal x10553=((1.0)*x10547);
IkReal x10554=(gconst4*x10547);
IkReal x10555=((1.0)*x10548);
IkReal x10556=(gconst4*x10548);
evalcond[0]=(((r12*x10548))+(((-1.0)*x10550*x10553))+((x10547*x10549)));
evalcond[1]=(((r21*x10556))+(((-1.0)*x10552*x10555))+(((-1.0)*r22*x10553)));
evalcond[2]=((((-1.0)*x10551*x10555))+(((-1.0)*r02*x10553))+((r01*x10556)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10553))+((x10548*x10549))+(((-1.0)*x10550*x10555)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10551*x10553))+((cj1*sj2))+((r02*x10548))+((r01*x10554)));
evalcond[5]=(((r22*x10548))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10554))+(((-1.0)*x10552*x10553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10557=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10557.valid){
continue;
}
CheckValue<IkReal> x10558 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10557.value)))+(x10558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10559=IKcos(j4);
IkReal x10560=IKsin(j4);
IkReal x10561=(gconst4*r11);
IkReal x10562=(gconst5*r10);
IkReal x10563=(gconst5*r00);
IkReal x10564=(gconst5*r20);
IkReal x10565=((1.0)*x10559);
IkReal x10566=(gconst4*x10559);
IkReal x10567=((1.0)*x10560);
IkReal x10568=(gconst4*x10560);
evalcond[0]=((((-1.0)*x10562*x10565))+((r12*x10560))+((x10559*x10561)));
evalcond[1]=((((-1.0)*r22*x10565))+((r21*x10568))+(((-1.0)*x10564*x10567)));
evalcond[2]=(((r01*x10568))+(((-1.0)*x10563*x10567))+(((-1.0)*r02*x10565)));
evalcond[3]=((-1.0)+(((-1.0)*x10562*x10567))+(((-1.0)*r12*x10565))+((x10560*x10561)));
evalcond[4]=(((r01*x10566))+((cj2*sj1))+(((-1.0)*x10563*x10565))+((cj1*sj2))+((r02*x10560)));
evalcond[5]=(((r21*x10566))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10564*x10565))+((r22*x10560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10569=((-1.0)*r21);
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(x10569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
IkReal x10570=((1.0)*(x10572.value));
IkReal x10571=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10570)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10570)));
IkReal gconst4=(x10569*x10571);
IkReal gconst5=((1.0)*r20*x10571);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10573=((-1.0)*r21);
CheckValue<IkReal> x10576 = IKatan2WithCheck(IkReal(x10573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10576.valid){
continue;
}
IkReal x10574=((1.0)*(x10576.value));
IkReal x10575=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10574)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10574)));
IkReal gconst4=(x10573*x10575);
IkReal gconst5=((1.0)*r20*x10575);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10577=((-1.0)*r21);
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(x10577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
IkReal x10578=((1.0)*(x10580.value));
IkReal x10579=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10578)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10578)));
IkReal gconst4=(x10577*x10579);
IkReal gconst5=((1.0)*r20*x10579);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10581=(gconst5*r10);
IkReal x10582=(gconst4*r11);
CheckValue<IkReal> x10583 = IKatan2WithCheck(IkReal((x10582+(((-1.0)*x10581)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10583.valid){
continue;
}
CheckValue<IkReal> x10584=IKPowWithIntegerCheck(IKsign(((x10581*x10581)+(r12*r12)+(((-2.0)*x10581*x10582))+(x10582*x10582))),-1);
if(!x10584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10583.value)+(((1.5707963267949)*(x10584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10585=IKcos(j4);
IkReal x10586=IKsin(j4);
IkReal x10587=(gconst5*r10);
IkReal x10588=(gconst5*r00);
IkReal x10589=(gconst5*r20);
IkReal x10590=((1.0)*x10585);
IkReal x10591=(gconst4*x10586);
IkReal x10592=(gconst4*x10585);
IkReal x10593=((1.0)*x10586);
evalcond[0]=(((r12*x10586))+(((-1.0)*x10587*x10590))+((r11*x10592)));
evalcond[1]=(((r21*x10591))+(((-1.0)*r22*x10590))+(((-1.0)*x10589*x10593)));
evalcond[2]=((((-1.0)*r02*x10590))+((r01*x10591))+(((-1.0)*x10588*x10593)));
evalcond[3]=((-1.0)+(((-1.0)*x10587*x10593))+(((-1.0)*r12*x10590))+((r11*x10591)));
evalcond[4]=(((r21*x10592))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10589*x10590))+((r22*x10586)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10592))+(((-1.0)*x10588*x10590))+((r02*x10586))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10594=((1.0)*gconst5);
CheckValue<IkReal> x10595 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10595.valid){
continue;
}
CheckValue<IkReal> x10596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10594))+(((-1.0)*gconst4*r20)))),-1);
if(!x10596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10595.value)+(((1.5707963267949)*(x10596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10597=IKcos(j4);
IkReal x10598=IKsin(j4);
IkReal x10599=(gconst5*r10);
IkReal x10600=(gconst5*r00);
IkReal x10601=(gconst5*r20);
IkReal x10602=((1.0)*x10597);
IkReal x10603=(gconst4*x10598);
IkReal x10604=(gconst4*x10597);
IkReal x10605=((1.0)*x10598);
evalcond[0]=(((r11*x10604))+((r12*x10598))+(((-1.0)*x10599*x10602)));
evalcond[1]=(((r21*x10603))+(((-1.0)*r22*x10602))+(((-1.0)*x10601*x10605)));
evalcond[2]=(((r01*x10603))+(((-1.0)*x10600*x10605))+(((-1.0)*r02*x10602)));
evalcond[3]=((-1.0)+((r11*x10603))+(((-1.0)*r12*x10602))+(((-1.0)*x10599*x10605)));
evalcond[4]=(((cj2*sj1))+((r21*x10604))+((cj1*sj2))+((r22*x10598))+(((-1.0)*x10601*x10602)));
evalcond[5]=(((r01*x10604))+(((-1.0)*x10600*x10602))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10606=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10606.valid){
continue;
}
CheckValue<IkReal> x10607 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10606.value)))+(x10607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10608=IKcos(j4);
IkReal x10609=IKsin(j4);
IkReal x10610=(gconst5*r10);
IkReal x10611=(gconst5*r00);
IkReal x10612=(gconst5*r20);
IkReal x10613=((1.0)*x10608);
IkReal x10614=(gconst4*x10609);
IkReal x10615=(gconst4*x10608);
IkReal x10616=((1.0)*x10609);
evalcond[0]=(((r12*x10609))+(((-1.0)*x10610*x10613))+((r11*x10615)));
evalcond[1]=((((-1.0)*r22*x10613))+(((-1.0)*x10612*x10616))+((r21*x10614)));
evalcond[2]=((((-1.0)*x10611*x10616))+(((-1.0)*r02*x10613))+((r01*x10614)));
evalcond[3]=((-1.0)+(((-1.0)*x10610*x10616))+(((-1.0)*r12*x10613))+((r11*x10614)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10609))+(((-1.0)*x10612*x10613))+((r21*x10615)));
evalcond[5]=((((-1.0)*x10611*x10613))+((r02*x10609))+(((-1.0)*sj1*sj2))+((r01*x10615))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10617=((-1.0)*r21);
CheckValue<IkReal> x10620 = IKatan2WithCheck(IkReal(x10617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10620.valid){
continue;
}
IkReal x10618=((1.0)*(x10620.value));
IkReal x10619=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10618)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10618)));
IkReal gconst4=(x10617*x10619);
IkReal gconst5=((1.0)*r20*x10619);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10621=((-1.0)*r21);
CheckValue<IkReal> x10624 = IKatan2WithCheck(IkReal(x10621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10624.valid){
continue;
}
IkReal x10622=((1.0)*(x10624.value));
IkReal x10623=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10622)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10622)));
IkReal gconst4=(x10621*x10623);
IkReal gconst5=((1.0)*r20*x10623);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10625=((-1.0)*r21);
CheckValue<IkReal> x10628 = IKatan2WithCheck(IkReal(x10625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10628.valid){
continue;
}
IkReal x10626=((1.0)*(x10628.value));
IkReal x10627=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10626)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10626)));
IkReal gconst4=(x10625*x10627);
IkReal gconst5=((1.0)*r20*x10627);
IkReal x10629=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10633=IKPowWithIntegerCheck(x10629,-1);
if(!x10633.valid){
continue;
}
IkReal x10630=x10633.value;
IkReal x10631=((1.0)*x10630);
IkReal x10632=((((-1.0)*x10631*(r10*r10)*(r20*r20)))+(((-1.0)*x10631*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10630))+(((-1.0)*(r12*r12))));
j4eval[0]=x10632;
j4eval[1]=r12;
j4eval[2]=x10629;
j4eval[3]=IKsign(x10632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10634=(gconst5*r10);
IkReal x10635=(gconst4*r11);
CheckValue<IkReal> x10636=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10634*x10634)))+(((-1.0)*(r12*r12)))+(((2.0)*x10634*x10635))+(((-1.0)*(x10635*x10635))))),-1);
if(!x10636.valid){
continue;
}
CheckValue<IkReal> x10637 = IKatan2WithCheck(IkReal(((((-1.0)*x10635))+x10634)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10636.value)))+(x10637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10638=IKsin(j4);
IkReal x10639=IKcos(j4);
IkReal x10640=(gconst4*r11);
IkReal x10641=(gconst5*r10);
IkReal x10642=(gconst5*r00);
IkReal x10643=(gconst5*r20);
IkReal x10644=((1.0)*x10639);
IkReal x10645=(gconst4*x10638);
IkReal x10646=((1.0)*x10638);
evalcond[0]=(((r21*x10645))+(((-1.0)*r22*x10644))+(((-1.0)*x10643*x10646)));
evalcond[1]=((((-1.0)*r02*x10644))+((r01*x10645))+(((-1.0)*x10642*x10646)));
evalcond[2]=((((-1.0)*x10640*x10644))+((x10639*x10641))+(((-1.0)*r12*x10646)));
evalcond[3]=((-1.0)+(((-1.0)*x10641*x10646))+((x10638*x10640))+(((-1.0)*r12*x10644)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10639*x10643))+(((-1.0)*r22*x10646))+(((-1.0)*gconst4*r21*x10644)));
evalcond[5]=((((-1.0)*r02*x10646))+(((-1.0)*sj1*sj2))+((x10639*x10642))+(((-1.0)*gconst4*r01*x10644))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10647=((1.0)*gconst5);
CheckValue<IkReal> x10648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10647))+(((-1.0)*gconst4*r20)))),-1);
if(!x10648.valid){
continue;
}
CheckValue<IkReal> x10649 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10647))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10648.value)))+(x10649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10650=IKsin(j4);
IkReal x10651=IKcos(j4);
IkReal x10652=(gconst4*r11);
IkReal x10653=(gconst5*r10);
IkReal x10654=(gconst5*r00);
IkReal x10655=(gconst5*r20);
IkReal x10656=((1.0)*x10651);
IkReal x10657=(gconst4*x10650);
IkReal x10658=((1.0)*x10650);
evalcond[0]=((((-1.0)*r22*x10656))+(((-1.0)*x10655*x10658))+((r21*x10657)));
evalcond[1]=((((-1.0)*x10654*x10658))+(((-1.0)*r02*x10656))+((r01*x10657)));
evalcond[2]=((((-1.0)*r12*x10658))+((x10651*x10653))+(((-1.0)*x10652*x10656)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10656))+(((-1.0)*x10653*x10658))+((x10650*x10652)));
evalcond[4]=((((-1.0)*gconst4*r21*x10656))+((cj2*sj1))+(((-1.0)*r22*x10658))+((cj1*sj2))+((x10651*x10655)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10651*x10654))+(((-1.0)*r02*x10658))+(((-1.0)*gconst4*r01*x10656))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10659=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10659.valid){
continue;
}
CheckValue<IkReal> x10660 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10659.value)))+(x10660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10661=IKsin(j4);
IkReal x10662=IKcos(j4);
IkReal x10663=(gconst4*r11);
IkReal x10664=(gconst5*r10);
IkReal x10665=(gconst5*r00);
IkReal x10666=(gconst5*r20);
IkReal x10667=((1.0)*x10662);
IkReal x10668=(gconst4*x10661);
IkReal x10669=((1.0)*x10661);
evalcond[0]=((((-1.0)*r22*x10667))+(((-1.0)*x10666*x10669))+((r21*x10668)));
evalcond[1]=((((-1.0)*x10665*x10669))+(((-1.0)*r02*x10667))+((r01*x10668)));
evalcond[2]=((((-1.0)*r12*x10669))+(((-1.0)*x10663*x10667))+((x10662*x10664)));
evalcond[3]=((-1.0)+((x10661*x10663))+(((-1.0)*r12*x10667))+(((-1.0)*x10664*x10669)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10667))+(((-1.0)*r22*x10669))+((x10662*x10666)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10669))+((cj1*cj2))+((x10662*x10665))+(((-1.0)*gconst4*r01*x10667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10670=((-1.0)*r21);
IkReal x10671=((-1.0)*px);
CheckValue<IkReal> x10673 = IKatan2WithCheck(IkReal(x10670),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10673.valid){
continue;
}
IkReal x10672=((1.0)*(x10673.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10672)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10671);
rxp1_1=(px*r21);
rxp1_2=(r11*x10671);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10672)));
IkReal gconst4=x10670;
IkReal gconst5=((1.0)*r20);
IkReal x10674=((1.0)*cj3);
IkReal x10675=(r10*r20);
IkReal x10676=(r11*r21);
j4eval[0]=((((-1.0)*x10676))+(((-1.0)*x10675)));
j4eval[1]=((((-1.0)*x10674*x10676))+(((-1.0)*x10674*x10675)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10677=((-1.0)*r21);
IkReal x10678=((-1.0)*px);
CheckValue<IkReal> x10680 = IKatan2WithCheck(IkReal(x10677),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10680.valid){
continue;
}
IkReal x10679=((1.0)*(x10680.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10679)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10678);
rxp1_1=(px*r21);
rxp1_2=(r11*x10678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10679)));
IkReal gconst4=x10677;
IkReal gconst5=((1.0)*r20);
IkReal x10681=((1.0)*r11*r21);
IkReal x10682=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10681))+(((-1.0)*x10682)));
j4eval[1]=(((sj3*x10682))+((sj3*x10681)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10683=((-1.0)*r21);
IkReal x10684=((-1.0)*px);
CheckValue<IkReal> x10686 = IKatan2WithCheck(IkReal(x10683),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10686.valid){
continue;
}
IkReal x10685=((1.0)*(x10686.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10685)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10684);
rxp1_1=(px*r21);
rxp1_2=(r11*x10684);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10685)));
IkReal gconst4=x10683;
IkReal gconst5=((1.0)*r20);
IkReal x10687=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10687))+(((-1.0)*r11*r21*x10687)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10688=((1.0)*r10);
CheckValue<IkReal> x10689=IKPowWithIntegerCheck(cj3,-1);
if(!x10689.valid){
continue;
}
CheckValue<IkReal> x10690=IKPowWithIntegerCheck(r02,-1);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10688))),-1);
if(!x10691.valid){
continue;
}
if( IKabs(((x10689.value)*(x10690.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10691.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10688)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10689.value)*(x10690.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10691.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10688))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10689.value)*(x10690.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10691.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10688))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10692=IKsin(j4);
IkReal x10693=IKcos(j4);
IkReal x10694=(cj2*sj1);
IkReal x10695=(cj1*sj2);
IkReal x10696=(gconst5*sj3);
IkReal x10697=(gconst4*r11);
IkReal x10698=(sj1*sj2);
IkReal x10699=((1.0)*gconst5);
IkReal x10700=(cj1*cj2);
IkReal x10701=(gconst4*r21);
IkReal x10702=(cj3*gconst4);
IkReal x10703=(gconst4*sj3);
IkReal x10704=(cj3*gconst5);
IkReal x10705=(r20*x10693);
IkReal x10706=(r10*x10693);
IkReal x10707=(cj3*x10693);
IkReal x10708=(r02*x10692);
IkReal x10709=(x10695+x10694);
IkReal x10710=((1.0)*sj3*x10693);
evalcond[0]=((-1.0)*r02*x10693);
evalcond[1]=((((-1.0)*r20*x10692*x10699))+((x10692*x10701)));
evalcond[2]=(((cj3*x10708))+(((-1.0)*x10698))+x10700);
evalcond[3]=(x10709+(((-1.0)*sj3*x10708)));
evalcond[4]=((-1.0)+((x10692*x10697))+(((-1.0)*r10*x10692*x10699)));
evalcond[5]=(((r11*x10696))+((r10*x10703))+((x10697*x10707))+(((-1.0)*cj3*x10699*x10706)));
evalcond[6]=(((r11*x10704))+((x10696*x10706))+((r10*x10702))+(((-1.0)*x10697*x10710)));
evalcond[7]=(((r21*x10696))+((x10701*x10707))+(((-1.0)*cj3*x10699*x10705))+x10709+((r20*x10703)));
evalcond[8]=((((-1.0)*x10700))+((x10696*x10705))+((r21*x10704))+((r20*x10702))+x10698+(((-1.0)*x10701*x10710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10711=((1.0)*gconst5);
IkReal x10712=(gconst4*r11);
CheckValue<IkReal> x10713=IKPowWithIntegerCheck(((((-1.0)*r10*x10711))+x10712),-1);
if(!x10713.valid){
continue;
}
CheckValue<IkReal> x10714=IKPowWithIntegerCheck(((((-1.0)*sj3*x10712))+((gconst5*r10*sj3))),-1);
if(!x10714.valid){
continue;
}
if( IKabs(x10713.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10714.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10711)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10713.value)+IKsqr(((x10714.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10711))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10713.value, ((x10714.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10711))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10715=IKsin(j4);
IkReal x10716=IKcos(j4);
IkReal x10717=(cj2*sj1);
IkReal x10718=(cj1*sj2);
IkReal x10719=(gconst5*sj3);
IkReal x10720=(gconst4*r11);
IkReal x10721=(sj1*sj2);
IkReal x10722=((1.0)*gconst5);
IkReal x10723=(cj1*cj2);
IkReal x10724=(gconst4*r21);
IkReal x10725=(cj3*gconst4);
IkReal x10726=(gconst4*sj3);
IkReal x10727=(cj3*gconst5);
IkReal x10728=(r20*x10716);
IkReal x10729=(r10*x10716);
IkReal x10730=(cj3*x10716);
IkReal x10731=(r02*x10715);
IkReal x10732=(x10717+x10718);
IkReal x10733=((1.0)*sj3*x10716);
evalcond[0]=((-1.0)*r02*x10716);
evalcond[1]=(((x10715*x10724))+(((-1.0)*r20*x10715*x10722)));
evalcond[2]=((((-1.0)*x10721))+x10723+((cj3*x10731)));
evalcond[3]=((((-1.0)*sj3*x10731))+x10732);
evalcond[4]=((-1.0)+((x10715*x10720))+(((-1.0)*r10*x10715*x10722)));
evalcond[5]=(((r10*x10726))+((r11*x10719))+((x10720*x10730))+(((-1.0)*cj3*x10722*x10729)));
evalcond[6]=(((r10*x10725))+(((-1.0)*x10720*x10733))+((x10719*x10729))+((r11*x10727)));
evalcond[7]=(((x10724*x10730))+(((-1.0)*cj3*x10722*x10728))+((r21*x10719))+((r20*x10726))+x10732);
evalcond[8]=((((-1.0)*x10724*x10733))+((x10719*x10728))+((r21*x10727))+(((-1.0)*x10723))+((r20*x10725))+x10721);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10734=((1.0)*sj3);
IkReal x10735=(gconst4*r11);
IkReal x10736=((1.0)*gconst5*r10);
CheckValue<IkReal> x10737=IKPowWithIntegerCheck(((((-1.0)*x10736))+x10735),-1);
if(!x10737.valid){
continue;
}
CheckValue<IkReal> x10738=IKPowWithIntegerCheck(((((-1.0)*cj3*x10736))+((cj3*x10735))),-1);
if(!x10738.valid){
continue;
}
if( IKabs(x10737.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10738.value)*(((((-1.0)*gconst4*r10*x10734))+(((-1.0)*gconst5*r11*x10734)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10737.value)+IKsqr(((x10738.value)*(((((-1.0)*gconst4*r10*x10734))+(((-1.0)*gconst5*r11*x10734))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10737.value, ((x10738.value)*(((((-1.0)*gconst4*r10*x10734))+(((-1.0)*gconst5*r11*x10734))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10739=IKsin(j4);
IkReal x10740=IKcos(j4);
IkReal x10741=(cj2*sj1);
IkReal x10742=(cj1*sj2);
IkReal x10743=(gconst5*sj3);
IkReal x10744=(gconst4*r11);
IkReal x10745=(sj1*sj2);
IkReal x10746=((1.0)*gconst5);
IkReal x10747=(cj1*cj2);
IkReal x10748=(gconst4*r21);
IkReal x10749=(cj3*gconst4);
IkReal x10750=(gconst4*sj3);
IkReal x10751=(cj3*gconst5);
IkReal x10752=(r20*x10740);
IkReal x10753=(r10*x10740);
IkReal x10754=(cj3*x10740);
IkReal x10755=(r02*x10739);
IkReal x10756=(x10741+x10742);
IkReal x10757=((1.0)*sj3*x10740);
evalcond[0]=((-1.0)*r02*x10740);
evalcond[1]=(((x10739*x10748))+(((-1.0)*r20*x10739*x10746)));
evalcond[2]=((((-1.0)*x10745))+((cj3*x10755))+x10747);
evalcond[3]=((((-1.0)*sj3*x10755))+x10756);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10739*x10746))+((x10739*x10744)));
evalcond[5]=(((r10*x10750))+(((-1.0)*cj3*x10746*x10753))+((r11*x10743))+((x10744*x10754)));
evalcond[6]=(((x10743*x10753))+((r10*x10749))+(((-1.0)*x10744*x10757))+((r11*x10751)));
evalcond[7]=(((x10748*x10754))+(((-1.0)*cj3*x10746*x10752))+((r20*x10750))+x10756+((r21*x10743)));
evalcond[8]=((((-1.0)*x10747))+((x10743*x10752))+((r20*x10749))+(((-1.0)*x10748*x10757))+x10745+((r21*x10751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10758=gconst4*gconst4;
IkReal x10759=gconst5*gconst5;
IkReal x10760=(r10*r21);
IkReal x10761=((1.0)*cj3);
IkReal x10762=(r11*r21);
IkReal x10763=(r11*r20);
IkReal x10764=(r22*sj3);
IkReal x10765=(gconst4*r10);
IkReal x10766=((1.0)*sj3);
IkReal x10767=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10768 = IKatan2WithCheck(IkReal((((x10764*x10765))+((gconst5*r11*x10764)))),IkReal((((gconst4*gconst5*sj3*x10762))+((sj3*x10758*x10760))+(((-1.0)*x10759*x10763*x10766))+(((-1.0)*gconst5*r20*x10765*x10766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10768.valid){
continue;
}
CheckValue<IkReal> x10769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10761))+(((-1.0)*r10*r20*x10759*x10761))+((x10760*x10767))+((x10763*x10767))+(((-1.0)*x10758*x10761*x10762)))),-1);
if(!x10769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10768.value)+(((1.5707963267949)*(x10769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10770=IKsin(j4);
IkReal x10771=IKcos(j4);
IkReal x10772=(cj2*sj1);
IkReal x10773=(cj1*sj2);
IkReal x10774=(gconst5*sj3);
IkReal x10775=(gconst4*r11);
IkReal x10776=(sj1*sj2);
IkReal x10777=(gconst5*r10);
IkReal x10778=(cj1*cj2);
IkReal x10779=(gconst4*r01);
IkReal x10780=(gconst4*r21);
IkReal x10781=(gconst5*r00);
IkReal x10782=(gconst4*sj3);
IkReal x10783=(cj3*gconst5);
IkReal x10784=(cj3*gconst4);
IkReal x10785=((1.0)*x10771);
IkReal x10786=((1.0)*x10770);
IkReal x10787=(cj3*x10770);
IkReal x10788=(cj3*x10771);
IkReal x10789=(x10772+x10773);
evalcond[0]=(((x10770*x10780))+(((-1.0)*gconst5*r20*x10786))+(((-1.0)*r22*x10785)));
evalcond[1]=(((x10770*x10779))+(((-1.0)*r02*x10785))+(((-1.0)*x10781*x10786)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10785))+((x10770*x10775))+(((-1.0)*x10777*x10786)));
evalcond[3]=(((r11*x10774))+(((-1.0)*cj3*x10777*x10785))+((x10775*x10788))+((r12*x10787))+((r10*x10782)));
evalcond[4]=(((r11*x10783))+(((-1.0)*sj3*x10775*x10785))+(((-1.0)*r12*sj3*x10786))+((r10*x10771*x10774))+((r10*x10784)));
evalcond[5]=(((r22*x10787))+(((-1.0)*r20*x10783*x10785))+((r20*x10782))+((x10780*x10788))+((r21*x10774))+x10789);
evalcond[6]=(((x10779*x10788))+(((-1.0)*x10776))+((r02*x10787))+((r01*x10774))+((r00*x10782))+x10778+(((-1.0)*cj3*x10781*x10785)));
evalcond[7]=((((-1.0)*sj3*x10779*x10785))+(((-1.0)*r02*sj3*x10786))+((r01*x10783))+((r00*x10784))+((r00*x10771*x10774))+x10789);
evalcond[8]=(((r21*x10783))+(((-1.0)*sj3*x10780*x10785))+(((-1.0)*x10778))+(((-1.0)*r22*sj3*x10786))+((r20*x10784))+((r20*x10771*x10774))+x10776);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10790=((1.0)*gconst5);
CheckValue<IkReal> x10791 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10790))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10791.valid){
continue;
}
CheckValue<IkReal> x10792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10790))+(((-1.0)*gconst4*r20)))),-1);
if(!x10792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10791.value)+(((1.5707963267949)*(x10792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10793=IKsin(j4);
IkReal x10794=IKcos(j4);
IkReal x10795=(cj2*sj1);
IkReal x10796=(cj1*sj2);
IkReal x10797=(gconst5*sj3);
IkReal x10798=(gconst4*r11);
IkReal x10799=(sj1*sj2);
IkReal x10800=(gconst5*r10);
IkReal x10801=(cj1*cj2);
IkReal x10802=(gconst4*r01);
IkReal x10803=(gconst4*r21);
IkReal x10804=(gconst5*r00);
IkReal x10805=(gconst4*sj3);
IkReal x10806=(cj3*gconst5);
IkReal x10807=(cj3*gconst4);
IkReal x10808=((1.0)*x10794);
IkReal x10809=((1.0)*x10793);
IkReal x10810=(cj3*x10793);
IkReal x10811=(cj3*x10794);
IkReal x10812=(x10796+x10795);
evalcond[0]=((((-1.0)*r22*x10808))+((x10793*x10803))+(((-1.0)*gconst5*r20*x10809)));
evalcond[1]=((((-1.0)*x10804*x10809))+(((-1.0)*r02*x10808))+((x10793*x10802)));
evalcond[2]=((-1.0)+(((-1.0)*x10800*x10809))+(((-1.0)*r12*x10808))+((x10793*x10798)));
evalcond[3]=(((x10798*x10811))+((r10*x10805))+((r11*x10797))+(((-1.0)*cj3*x10800*x10808))+((r12*x10810)));
evalcond[4]=(((r10*x10807))+(((-1.0)*r12*sj3*x10809))+((r10*x10794*x10797))+((r11*x10806))+(((-1.0)*sj3*x10798*x10808)));
evalcond[5]=(((r22*x10810))+((r20*x10805))+((r21*x10797))+(((-1.0)*r20*x10806*x10808))+((x10803*x10811))+x10812);
evalcond[6]=(((r02*x10810))+((r00*x10805))+(((-1.0)*cj3*x10804*x10808))+((x10802*x10811))+(((-1.0)*x10799))+((r01*x10797))+x10801);
evalcond[7]=((((-1.0)*r02*sj3*x10809))+((r01*x10806))+((r00*x10807))+(((-1.0)*sj3*x10802*x10808))+((r00*x10794*x10797))+x10812);
evalcond[8]=(((r20*x10807))+(((-1.0)*sj3*x10803*x10808))+((r21*x10806))+(((-1.0)*x10801))+((r20*x10794*x10797))+x10799+(((-1.0)*r22*sj3*x10809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10813=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10813.valid){
continue;
}
CheckValue<IkReal> x10814 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10813.value)))+(x10814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10815=IKsin(j4);
IkReal x10816=IKcos(j4);
IkReal x10817=(cj2*sj1);
IkReal x10818=(cj1*sj2);
IkReal x10819=(gconst5*sj3);
IkReal x10820=(gconst4*r11);
IkReal x10821=(sj1*sj2);
IkReal x10822=(gconst5*r10);
IkReal x10823=(cj1*cj2);
IkReal x10824=(gconst4*r01);
IkReal x10825=(gconst4*r21);
IkReal x10826=(gconst5*r00);
IkReal x10827=(gconst4*sj3);
IkReal x10828=(cj3*gconst5);
IkReal x10829=(cj3*gconst4);
IkReal x10830=((1.0)*x10816);
IkReal x10831=((1.0)*x10815);
IkReal x10832=(cj3*x10815);
IkReal x10833=(cj3*x10816);
IkReal x10834=(x10817+x10818);
evalcond[0]=(((x10815*x10825))+(((-1.0)*gconst5*r20*x10831))+(((-1.0)*r22*x10830)));
evalcond[1]=(((x10815*x10824))+(((-1.0)*x10826*x10831))+(((-1.0)*r02*x10830)));
evalcond[2]=((-1.0)+((x10815*x10820))+(((-1.0)*x10822*x10831))+(((-1.0)*r12*x10830)));
evalcond[3]=(((x10820*x10833))+(((-1.0)*cj3*x10822*x10830))+((r10*x10827))+((r12*x10832))+((r11*x10819)));
evalcond[4]=((((-1.0)*sj3*x10820*x10830))+(((-1.0)*r12*sj3*x10831))+((r10*x10829))+((r10*x10816*x10819))+((r11*x10828)));
evalcond[5]=(((x10825*x10833))+((r22*x10832))+(((-1.0)*r20*x10828*x10830))+((r20*x10827))+((r21*x10819))+x10834);
evalcond[6]=((((-1.0)*cj3*x10826*x10830))+(((-1.0)*x10821))+((r02*x10832))+((x10824*x10833))+((r01*x10819))+((r00*x10827))+x10823);
evalcond[7]=((((-1.0)*r02*sj3*x10831))+(((-1.0)*sj3*x10824*x10830))+((r00*x10829))+((r00*x10816*x10819))+((r01*x10828))+x10834);
evalcond[8]=(((r21*x10828))+(((-1.0)*x10823))+(((-1.0)*sj3*x10825*x10830))+(((-1.0)*r22*sj3*x10831))+((r20*x10829))+((r20*x10816*x10819))+x10821);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10835=((-1.0)*r21);
CheckValue<IkReal> x10838 = IKatan2WithCheck(IkReal(x10835),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10838.valid){
continue;
}
IkReal x10836=((1.0)*(x10838.value));
IkReal x10837=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10836)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10836)));
IkReal gconst4=(x10835*x10837);
IkReal gconst5=((1.0)*r20*x10837);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10839=((-1.0)*r21);
CheckValue<IkReal> x10842 = IKatan2WithCheck(IkReal(x10839),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10842.valid){
continue;
}
IkReal x10840=((1.0)*(x10842.value));
IkReal x10841=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10840)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10840)));
IkReal gconst4=(x10839*x10841);
IkReal gconst5=((1.0)*r20*x10841);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10843=((-1.0)*r21);
CheckValue<IkReal> x10846 = IKatan2WithCheck(IkReal(x10843),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10846.valid){
continue;
}
IkReal x10844=((1.0)*(x10846.value));
IkReal x10845=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10844)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10844)));
IkReal gconst4=(x10843*x10845);
IkReal gconst5=((1.0)*r20*x10845);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10847=((-1.0)*r21);
CheckValue<IkReal> x10850 = IKatan2WithCheck(IkReal(x10847),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10850.valid){
continue;
}
IkReal x10848=((1.0)*(x10850.value));
IkReal x10849=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10848)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10848)));
IkReal gconst4=(x10847*x10849);
IkReal gconst5=((1.0)*r20*x10849);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10851=((-1.0)*r21);
CheckValue<IkReal> x10854 = IKatan2WithCheck(IkReal(x10851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10854.valid){
continue;
}
IkReal x10852=((1.0)*(x10854.value));
IkReal x10853=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10852)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10852)));
IkReal gconst4=(x10851*x10853);
IkReal gconst5=((1.0)*r20*x10853);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10855=((-1.0)*r21);
CheckValue<IkReal> x10858 = IKatan2WithCheck(IkReal(x10855),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10858.valid){
continue;
}
IkReal x10856=((1.0)*(x10858.value));
IkReal x10857=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10856)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10856)));
IkReal gconst4=(x10855*x10857);
IkReal gconst5=((1.0)*r20*x10857);
IkReal x10859=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10863=IKPowWithIntegerCheck(x10859,-1);
if(!x10863.valid){
continue;
}
IkReal x10860=x10863.value;
IkReal x10861=((1.0)*x10860);
IkReal x10862=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10860))+(((-1.0)*x10861*(r01*r01)*(r21*r21)))+(((-1.0)*x10861*(r00*r00)*(r20*r20))));
j4eval[0]=x10862;
j4eval[1]=r02;
j4eval[2]=x10859;
j4eval[3]=IKsign(x10862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10864=(gconst5*r00);
IkReal x10865=(gconst4*r01);
CheckValue<IkReal> x10866 = IKatan2WithCheck(IkReal(((((-1.0)*x10865))+x10864)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10866.valid){
continue;
}
CheckValue<IkReal> x10867=IKPowWithIntegerCheck(IKsign(((((2.0)*x10864*x10865))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10865*x10865)))+(((-1.0)*(x10864*x10864))))),-1);
if(!x10867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10866.value)+(((1.5707963267949)*(x10867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10868=IKsin(j4);
IkReal x10869=IKcos(j4);
IkReal x10870=(gconst4*r11);
IkReal x10871=((1.0)*cj1);
IkReal x10872=(gconst5*r10);
IkReal x10873=(gconst4*r01);
IkReal x10874=(gconst5*r00);
IkReal x10875=(gconst4*r21);
IkReal x10876=(gconst5*r20);
IkReal x10877=((1.0)*x10869);
IkReal x10878=((1.0)*x10868);
evalcond[0]=((((-1.0)*r22*x10877))+(((-1.0)*x10876*x10878))+((x10868*x10875)));
evalcond[1]=((((-1.0)*r12*x10877))+((x10868*x10870))+(((-1.0)*x10872*x10878)));
evalcond[2]=((((-1.0)*x10873*x10877))+(((-1.0)*r02*x10878))+((x10869*x10874)));
evalcond[3]=((-1.0)+(((-1.0)*x10874*x10878))+(((-1.0)*r02*x10877))+((x10868*x10873)));
evalcond[4]=((((-1.0)*r22*x10878))+((sj1*sj2))+(((-1.0)*x10875*x10877))+((x10869*x10876))+(((-1.0)*cj2*x10871)));
evalcond[5]=((((-1.0)*x10870*x10877))+(((-1.0)*r12*x10878))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10871))+((x10869*x10872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10879=((1.0)*gconst5);
CheckValue<IkReal> x10880 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10879))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10880.valid){
continue;
}
CheckValue<IkReal> x10881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10879))+(((-1.0)*gconst4*r10)))),-1);
if(!x10881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10880.value)+(((1.5707963267949)*(x10881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10882=IKsin(j4);
IkReal x10883=IKcos(j4);
IkReal x10884=(gconst4*r11);
IkReal x10885=((1.0)*cj1);
IkReal x10886=(gconst5*r10);
IkReal x10887=(gconst4*r01);
IkReal x10888=(gconst5*r00);
IkReal x10889=(gconst4*r21);
IkReal x10890=(gconst5*r20);
IkReal x10891=((1.0)*x10883);
IkReal x10892=((1.0)*x10882);
evalcond[0]=(((x10882*x10889))+(((-1.0)*x10890*x10892))+(((-1.0)*r22*x10891)));
evalcond[1]=(((x10882*x10884))+(((-1.0)*x10886*x10892))+(((-1.0)*r12*x10891)));
evalcond[2]=(((x10883*x10888))+(((-1.0)*r02*x10892))+(((-1.0)*x10887*x10891)));
evalcond[3]=((-1.0)+((x10882*x10887))+(((-1.0)*x10888*x10892))+(((-1.0)*r02*x10891)));
evalcond[4]=(((x10883*x10890))+(((-1.0)*x10889*x10891))+((sj1*sj2))+(((-1.0)*cj2*x10885))+(((-1.0)*r22*x10892)));
evalcond[5]=((((-1.0)*x10884*x10891))+((x10883*x10886))+(((-1.0)*sj2*x10885))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10893 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10893.valid){
continue;
}
CheckValue<IkReal> x10894=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10893.value)+(((1.5707963267949)*(x10894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10895=IKsin(j4);
IkReal x10896=IKcos(j4);
IkReal x10897=(gconst4*r11);
IkReal x10898=((1.0)*cj1);
IkReal x10899=(gconst5*r10);
IkReal x10900=(gconst4*r01);
IkReal x10901=(gconst5*r00);
IkReal x10902=(gconst4*r21);
IkReal x10903=(gconst5*r20);
IkReal x10904=((1.0)*x10896);
IkReal x10905=((1.0)*x10895);
evalcond[0]=(((x10895*x10902))+(((-1.0)*r22*x10904))+(((-1.0)*x10903*x10905)));
evalcond[1]=(((x10895*x10897))+(((-1.0)*x10899*x10905))+(((-1.0)*r12*x10904)));
evalcond[2]=((((-1.0)*x10900*x10904))+((x10896*x10901))+(((-1.0)*r02*x10905)));
evalcond[3]=((-1.0)+((x10895*x10900))+(((-1.0)*x10901*x10905))+(((-1.0)*r02*x10904)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10905))+(((-1.0)*cj2*x10898))+((x10896*x10903))+(((-1.0)*x10902*x10904)));
evalcond[5]=((((-1.0)*sj2*x10898))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10905))+((x10896*x10899))+(((-1.0)*x10897*x10904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10906=((-1.0)*r21);
CheckValue<IkReal> x10909 = IKatan2WithCheck(IkReal(x10906),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10909.valid){
continue;
}
IkReal x10907=((1.0)*(x10909.value));
IkReal x10908=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10907)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10907)));
IkReal gconst4=(x10906*x10908);
IkReal gconst5=((1.0)*r20*x10908);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10910=((-1.0)*r21);
CheckValue<IkReal> x10913 = IKatan2WithCheck(IkReal(x10910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10913.valid){
continue;
}
IkReal x10911=((1.0)*(x10913.value));
IkReal x10912=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10911)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10911)));
IkReal gconst4=(x10910*x10912);
IkReal gconst5=((1.0)*r20*x10912);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10914=((-1.0)*r21);
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal(x10914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
IkReal x10915=((1.0)*(x10917.value));
IkReal x10916=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10915)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10915)));
IkReal gconst4=(x10914*x10916);
IkReal gconst5=((1.0)*r20*x10916);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10918=(gconst4*r01);
IkReal x10919=(gconst5*r00);
CheckValue<IkReal> x10920=IKPowWithIntegerCheck(IKsign(((x10919*x10919)+(x10918*x10918)+(r02*r02)+(((-2.0)*x10918*x10919)))),-1);
if(!x10920.valid){
continue;
}
CheckValue<IkReal> x10921 = IKatan2WithCheck(IkReal((x10918+(((-1.0)*x10919)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10920.value)))+(x10921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10922=IKcos(j4);
IkReal x10923=IKsin(j4);
IkReal x10924=(gconst4*r11);
IkReal x10925=(gconst5*r10);
IkReal x10926=((1.0)*cj1);
IkReal x10927=(gconst5*r00);
IkReal x10928=(gconst5*r20);
IkReal x10929=((1.0)*x10922);
IkReal x10930=(gconst4*x10922);
IkReal x10931=((1.0)*x10923);
IkReal x10932=(gconst4*x10923);
evalcond[0]=(((r02*x10923))+(((-1.0)*x10927*x10929))+((r01*x10930)));
evalcond[1]=((((-1.0)*r22*x10929))+((r21*x10932))+(((-1.0)*x10928*x10931)));
evalcond[2]=((((-1.0)*x10925*x10931))+(((-1.0)*r12*x10929))+((x10923*x10924)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10929))+(((-1.0)*x10927*x10931))+((r01*x10932)));
evalcond[4]=(((sj1*sj2))+((r21*x10930))+((r22*x10923))+(((-1.0)*x10928*x10929))+(((-1.0)*cj2*x10926)));
evalcond[5]=((((-1.0)*sj2*x10926))+(((-1.0)*cj2*sj1))+((r12*x10923))+(((-1.0)*x10925*x10929))+((x10922*x10924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10933=((1.0)*gconst5);
CheckValue<IkReal> x10934 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10933))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10934.valid){
continue;
}
CheckValue<IkReal> x10935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10933))+(((-1.0)*gconst4*r10)))),-1);
if(!x10935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10934.value)+(((1.5707963267949)*(x10935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10936=IKcos(j4);
IkReal x10937=IKsin(j4);
IkReal x10938=(gconst4*r11);
IkReal x10939=(gconst5*r10);
IkReal x10940=((1.0)*cj1);
IkReal x10941=(gconst5*r00);
IkReal x10942=(gconst5*r20);
IkReal x10943=((1.0)*x10936);
IkReal x10944=(gconst4*x10936);
IkReal x10945=((1.0)*x10937);
IkReal x10946=(gconst4*x10937);
evalcond[0]=(((r02*x10937))+((r01*x10944))+(((-1.0)*x10941*x10943)));
evalcond[1]=(((r21*x10946))+(((-1.0)*x10942*x10945))+(((-1.0)*r22*x10943)));
evalcond[2]=((((-1.0)*x10939*x10945))+(((-1.0)*r12*x10943))+((x10937*x10938)));
evalcond[3]=((-1.0)+((r01*x10946))+(((-1.0)*x10941*x10945))+(((-1.0)*r02*x10943)));
evalcond[4]=(((r21*x10944))+((sj1*sj2))+((r22*x10937))+(((-1.0)*x10942*x10943))+(((-1.0)*cj2*x10940)));
evalcond[5]=((((-1.0)*x10939*x10943))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10940))+((r12*x10937))+((x10936*x10938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10947 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10947.valid){
continue;
}
CheckValue<IkReal> x10948=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10947.value)+(((1.5707963267949)*(x10948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10949=IKcos(j4);
IkReal x10950=IKsin(j4);
IkReal x10951=(gconst4*r11);
IkReal x10952=(gconst5*r10);
IkReal x10953=((1.0)*cj1);
IkReal x10954=(gconst5*r00);
IkReal x10955=(gconst5*r20);
IkReal x10956=((1.0)*x10949);
IkReal x10957=(gconst4*x10949);
IkReal x10958=((1.0)*x10950);
IkReal x10959=(gconst4*x10950);
evalcond[0]=(((r02*x10950))+((r01*x10957))+(((-1.0)*x10954*x10956)));
evalcond[1]=((((-1.0)*r22*x10956))+((r21*x10959))+(((-1.0)*x10955*x10958)));
evalcond[2]=(((x10950*x10951))+(((-1.0)*r12*x10956))+(((-1.0)*x10952*x10958)));
evalcond[3]=((-1.0)+((r01*x10959))+(((-1.0)*r02*x10956))+(((-1.0)*x10954*x10958)));
evalcond[4]=((((-1.0)*cj2*x10953))+((r22*x10950))+((sj1*sj2))+((r21*x10957))+(((-1.0)*x10955*x10956)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10949*x10951))+(((-1.0)*sj2*x10953))+(((-1.0)*x10952*x10956))+((r12*x10950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10960=((-1.0)*r21);
CheckValue<IkReal> x10963 = IKatan2WithCheck(IkReal(x10960),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10963.valid){
continue;
}
IkReal x10961=((1.0)*(x10963.value));
IkReal x10962=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10961)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10961)));
IkReal gconst4=(x10960*x10962);
IkReal gconst5=((1.0)*r20*x10962);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10964=((-1.0)*r21);
CheckValue<IkReal> x10967 = IKatan2WithCheck(IkReal(x10964),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10967.valid){
continue;
}
IkReal x10965=((1.0)*(x10967.value));
IkReal x10966=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10965)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10965)));
IkReal gconst4=(x10964*x10966);
IkReal gconst5=((1.0)*r20*x10966);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10968=((-1.0)*r21);
CheckValue<IkReal> x10971 = IKatan2WithCheck(IkReal(x10968),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10971.valid){
continue;
}
IkReal x10969=((1.0)*(x10971.value));
IkReal x10970=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10969)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10969)));
IkReal gconst4=(x10968*x10970);
IkReal gconst5=((1.0)*r20*x10970);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10972=(gconst4*r01);
IkReal x10973=(gconst5*r00);
CheckValue<IkReal> x10974=IKPowWithIntegerCheck(IKsign(((x10972*x10972)+(((-2.0)*x10972*x10973))+(x10973*x10973)+(r02*r02))),-1);
if(!x10974.valid){
continue;
}
CheckValue<IkReal> x10975 = IKatan2WithCheck(IkReal(((((-1.0)*x10973))+x10972)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10974.value)))+(x10975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10976=IKcos(j4);
IkReal x10977=IKsin(j4);
IkReal x10978=(gconst4*r11);
IkReal x10979=(gconst5*r10);
IkReal x10980=(gconst5*r00);
IkReal x10981=(gconst5*r20);
IkReal x10982=((1.0)*x10976);
IkReal x10983=(gconst4*x10976);
IkReal x10984=((1.0)*x10977);
IkReal x10985=(gconst4*x10977);
evalcond[0]=(((r02*x10977))+((r01*x10983))+(((-1.0)*x10980*x10982)));
evalcond[1]=(((r21*x10985))+(((-1.0)*r22*x10982))+(((-1.0)*x10981*x10984)));
evalcond[2]=(((x10977*x10978))+(((-1.0)*r12*x10982))+(((-1.0)*x10979*x10984)));
evalcond[3]=((-1.0)+((r01*x10985))+(((-1.0)*r02*x10982))+(((-1.0)*x10980*x10984)));
evalcond[4]=(((cj2*sj1))+((r21*x10983))+((cj1*sj2))+((r22*x10977))+(((-1.0)*x10981*x10982)));
evalcond[5]=(((x10976*x10978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10979*x10982))+((r12*x10977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10986=((1.0)*gconst5);
CheckValue<IkReal> x10987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10986))+(((-1.0)*gconst4*r10)))),-1);
if(!x10987.valid){
continue;
}
CheckValue<IkReal> x10988 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10986))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10987.value)))+(x10988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10989=IKcos(j4);
IkReal x10990=IKsin(j4);
IkReal x10991=(gconst4*r11);
IkReal x10992=(gconst5*r10);
IkReal x10993=(gconst5*r00);
IkReal x10994=(gconst5*r20);
IkReal x10995=((1.0)*x10989);
IkReal x10996=(gconst4*x10989);
IkReal x10997=((1.0)*x10990);
IkReal x10998=(gconst4*x10990);
evalcond[0]=(((r01*x10996))+(((-1.0)*x10993*x10995))+((r02*x10990)));
evalcond[1]=(((r21*x10998))+(((-1.0)*r22*x10995))+(((-1.0)*x10994*x10997)));
evalcond[2]=((((-1.0)*x10992*x10997))+(((-1.0)*r12*x10995))+((x10990*x10991)));
evalcond[3]=((-1.0)+((r01*x10998))+(((-1.0)*x10993*x10997))+(((-1.0)*r02*x10995)));
evalcond[4]=(((cj2*sj1))+((r22*x10990))+((r21*x10996))+((cj1*sj2))+(((-1.0)*x10994*x10995)));
evalcond[5]=(((r12*x10990))+(((-1.0)*x10992*x10995))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10989*x10991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10999 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10999.valid){
continue;
}
CheckValue<IkReal> x11000=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10999.value)+(((1.5707963267949)*(x11000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11001=IKcos(j4);
IkReal x11002=IKsin(j4);
IkReal x11003=(gconst4*r11);
IkReal x11004=(gconst5*r10);
IkReal x11005=(gconst5*r00);
IkReal x11006=(gconst5*r20);
IkReal x11007=((1.0)*x11001);
IkReal x11008=(gconst4*x11001);
IkReal x11009=((1.0)*x11002);
IkReal x11010=(gconst4*x11002);
evalcond[0]=(((r02*x11002))+(((-1.0)*x11005*x11007))+((r01*x11008)));
evalcond[1]=((((-1.0)*r22*x11007))+((r21*x11010))+(((-1.0)*x11006*x11009)));
evalcond[2]=(((x11002*x11003))+(((-1.0)*x11004*x11009))+(((-1.0)*r12*x11007)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11007))+(((-1.0)*x11005*x11009))+((r01*x11010)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11008))+((r22*x11002))+(((-1.0)*x11006*x11007)));
evalcond[5]=(((x11001*x11003))+(((-1.0)*x11004*x11007))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11011=((-1.0)*r21);
CheckValue<IkReal> x11014 = IKatan2WithCheck(IkReal(x11011),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11014.valid){
continue;
}
IkReal x11012=((1.0)*(x11014.value));
IkReal x11013=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11012)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11012)));
IkReal gconst4=(x11011*x11013);
IkReal gconst5=((1.0)*r20*x11013);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11015=((-1.0)*r21);
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal(x11015),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
IkReal x11016=((1.0)*(x11018.value));
IkReal x11017=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11016)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11016)));
IkReal gconst4=(x11015*x11017);
IkReal gconst5=((1.0)*r20*x11017);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11019=((-1.0)*r21);
CheckValue<IkReal> x11022 = IKatan2WithCheck(IkReal(x11019),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11022.valid){
continue;
}
IkReal x11020=((1.0)*(x11022.value));
IkReal x11021=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11020)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11020)));
IkReal gconst4=(x11019*x11021);
IkReal gconst5=((1.0)*r20*x11021);
IkReal x11023=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11027=IKPowWithIntegerCheck(x11023,-1);
if(!x11027.valid){
continue;
}
IkReal x11024=x11027.value;
IkReal x11025=((1.0)*x11024);
IkReal x11026=((((-1.0)*x11025*(r00*r00)*(r20*r20)))+(((-1.0)*x11025*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11024)));
j4eval[0]=x11026;
j4eval[1]=r02;
j4eval[2]=x11023;
j4eval[3]=IKsign(x11026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11028=(gconst5*r00);
IkReal x11029=(gconst4*r01);
CheckValue<IkReal> x11030=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11029*x11029)))+(((-1.0)*(r02*r02)))+(((2.0)*x11028*x11029))+(((-1.0)*(x11028*x11028))))),-1);
if(!x11030.valid){
continue;
}
CheckValue<IkReal> x11031 = IKatan2WithCheck(IkReal(((((-1.0)*x11029))+x11028)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11030.value)))+(x11031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11032=IKsin(j4);
IkReal x11033=IKcos(j4);
IkReal x11034=(gconst4*r11);
IkReal x11035=(gconst5*r10);
IkReal x11036=(gconst4*r01);
IkReal x11037=(gconst5*r00);
IkReal x11038=(gconst4*r21);
IkReal x11039=(gconst5*r20);
IkReal x11040=((1.0)*x11033);
IkReal x11041=((1.0)*x11032);
evalcond[0]=((((-1.0)*r22*x11040))+(((-1.0)*x11039*x11041))+((x11032*x11038)));
evalcond[1]=((((-1.0)*r12*x11040))+(((-1.0)*x11035*x11041))+((x11032*x11034)));
evalcond[2]=(((x11033*x11037))+(((-1.0)*x11036*x11040))+(((-1.0)*r02*x11041)));
evalcond[3]=((-1.0)+(((-1.0)*x11037*x11041))+(((-1.0)*r02*x11040))+((x11032*x11036)));
evalcond[4]=(((cj2*sj1))+((x11033*x11039))+(((-1.0)*r22*x11041))+((cj1*sj2))+(((-1.0)*x11038*x11040)));
evalcond[5]=(((x11033*x11035))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11041))+(((-1.0)*x11034*x11040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11042=((1.0)*gconst5);
CheckValue<IkReal> x11043 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11042))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11043.valid){
continue;
}
CheckValue<IkReal> x11044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11042))+(((-1.0)*gconst4*r10)))),-1);
if(!x11044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11043.value)+(((1.5707963267949)*(x11044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11045=IKsin(j4);
IkReal x11046=IKcos(j4);
IkReal x11047=(gconst4*r11);
IkReal x11048=(gconst5*r10);
IkReal x11049=(gconst4*r01);
IkReal x11050=(gconst5*r00);
IkReal x11051=(gconst4*r21);
IkReal x11052=(gconst5*r20);
IkReal x11053=((1.0)*x11046);
IkReal x11054=((1.0)*x11045);
evalcond[0]=((((-1.0)*r22*x11053))+(((-1.0)*x11052*x11054))+((x11045*x11051)));
evalcond[1]=((((-1.0)*r12*x11053))+((x11045*x11047))+(((-1.0)*x11048*x11054)));
evalcond[2]=(((x11046*x11050))+(((-1.0)*x11049*x11053))+(((-1.0)*r02*x11054)));
evalcond[3]=((-1.0)+((x11045*x11049))+(((-1.0)*x11050*x11054))+(((-1.0)*r02*x11053)));
evalcond[4]=(((cj2*sj1))+((x11046*x11052))+(((-1.0)*r22*x11054))+((cj1*sj2))+(((-1.0)*x11051*x11053)));
evalcond[5]=((((-1.0)*r12*x11054))+((x11046*x11048))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11047*x11053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11055 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11055.valid){
continue;
}
CheckValue<IkReal> x11056=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11055.value)+(((1.5707963267949)*(x11056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11057=IKsin(j4);
IkReal x11058=IKcos(j4);
IkReal x11059=(gconst4*r11);
IkReal x11060=(gconst5*r10);
IkReal x11061=(gconst4*r01);
IkReal x11062=(gconst5*r00);
IkReal x11063=(gconst4*r21);
IkReal x11064=(gconst5*r20);
IkReal x11065=((1.0)*x11058);
IkReal x11066=((1.0)*x11057);
evalcond[0]=((((-1.0)*r22*x11065))+(((-1.0)*x11064*x11066))+((x11057*x11063)));
evalcond[1]=((((-1.0)*x11060*x11066))+(((-1.0)*r12*x11065))+((x11057*x11059)));
evalcond[2]=(((x11058*x11062))+(((-1.0)*r02*x11066))+(((-1.0)*x11061*x11065)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11065))+(((-1.0)*x11062*x11066))+((x11057*x11061)));
evalcond[4]=((((-1.0)*r22*x11066))+((cj2*sj1))+((x11058*x11064))+((cj1*sj2))+(((-1.0)*x11063*x11065)));
evalcond[5]=(((x11058*x11060))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11066))+(((-1.0)*x11059*x11065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11067=gconst4*gconst4;
IkReal x11068=gconst5*gconst5;
IkReal x11069=(r01*r20);
IkReal x11070=(gconst4*sj3);
IkReal x11071=(r01*r21);
IkReal x11072=((1.0)*cj3);
IkReal x11073=(r00*r21);
IkReal x11074=(r00*r20);
IkReal x11075=(cj3*gconst4*gconst5);
IkReal x11076=((1.0)*x11068);
CheckValue<IkReal> x11077=IKPowWithIntegerCheck(IKsign((((x11069*x11075))+(((-1.0)*x11067*x11071*x11072))+((x11073*x11075))+(((-1.0)*r02*r22*x11072))+(((-1.0)*x11068*x11072*x11074)))),-1);
if(!x11077.valid){
continue;
}
CheckValue<IkReal> x11078 = IKatan2WithCheck(IkReal((((r00*r22*x11070))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11067*x11073))+(((-1.0)*gconst5*x11070*x11074))+((gconst5*x11070*x11071))+(((-1.0)*sj3*x11069*x11076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11077.value)))+(x11078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11079=IKsin(j4);
IkReal x11080=IKcos(j4);
IkReal x11081=(sj1*sj2);
IkReal x11082=(gconst5*sj3);
IkReal x11083=(gconst4*r11);
IkReal x11084=(gconst5*r10);
IkReal x11085=((1.0)*cj1);
IkReal x11086=(gconst4*r01);
IkReal x11087=(cj2*sj1);
IkReal x11088=(gconst5*r00);
IkReal x11089=(gconst4*sj3);
IkReal x11090=(cj3*gconst5);
IkReal x11091=(cj3*gconst4);
IkReal x11092=(gconst4*r21);
IkReal x11093=(cj2*x11085);
IkReal x11094=((1.0)*x11080);
IkReal x11095=((1.0)*x11079);
IkReal x11096=(cj3*x11079);
IkReal x11097=(cj3*x11080);
evalcond[0]=((((-1.0)*r22*x11094))+(((-1.0)*gconst5*r20*x11095))+((x11079*x11092)));
evalcond[1]=(((x11079*x11083))+(((-1.0)*r12*x11094))+(((-1.0)*x11084*x11095)));
evalcond[2]=((-1.0)+((x11079*x11086))+(((-1.0)*r02*x11094))+(((-1.0)*x11088*x11095)));
evalcond[3]=(((r02*x11096))+((r01*x11082))+((r00*x11089))+((x11086*x11097))+(((-1.0)*cj3*x11088*x11094)));
evalcond[4]=((((-1.0)*sj3*x11086*x11094))+(((-1.0)*r02*sj3*x11095))+((r00*x11091))+((r01*x11090))+((r00*x11080*x11082)));
evalcond[5]=(((r21*x11080*x11091))+((r21*x11082))+((cj1*sj2))+(((-1.0)*r20*x11090*x11094))+x11087+((r22*x11096))+((r20*x11089)));
evalcond[6]=(((x11083*x11097))+(((-1.0)*x11093))+((r12*x11096))+x11081+((r10*x11089))+((r11*x11082))+(((-1.0)*cj3*x11084*x11094)));
evalcond[7]=((((-1.0)*x11093))+((r20*x11091))+x11081+(((-1.0)*r22*sj3*x11095))+(((-1.0)*r21*x11089*x11094))+((r20*x11080*x11082))+((r21*x11090)));
evalcond[8]=((((-1.0)*sj2*x11085))+((r10*x11080*x11082))+(((-1.0)*sj3*x11083*x11094))+(((-1.0)*x11087))+(((-1.0)*r12*sj3*x11095))+((r11*x11090))+((r10*x11091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11098=((1.0)*gconst5);
CheckValue<IkReal> x11099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11098))+(((-1.0)*gconst4*r10)))),-1);
if(!x11099.valid){
continue;
}
CheckValue<IkReal> x11100 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11098))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11099.value)))+(x11100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11101=IKsin(j4);
IkReal x11102=IKcos(j4);
IkReal x11103=(sj1*sj2);
IkReal x11104=(gconst5*sj3);
IkReal x11105=(gconst4*r11);
IkReal x11106=(gconst5*r10);
IkReal x11107=((1.0)*cj1);
IkReal x11108=(gconst4*r01);
IkReal x11109=(cj2*sj1);
IkReal x11110=(gconst5*r00);
IkReal x11111=(gconst4*sj3);
IkReal x11112=(cj3*gconst5);
IkReal x11113=(cj3*gconst4);
IkReal x11114=(gconst4*r21);
IkReal x11115=(cj2*x11107);
IkReal x11116=((1.0)*x11102);
IkReal x11117=((1.0)*x11101);
IkReal x11118=(cj3*x11101);
IkReal x11119=(cj3*x11102);
evalcond[0]=((((-1.0)*gconst5*r20*x11117))+((x11101*x11114))+(((-1.0)*r22*x11116)));
evalcond[1]=(((x11101*x11105))+(((-1.0)*r12*x11116))+(((-1.0)*x11106*x11117)));
evalcond[2]=((-1.0)+((x11101*x11108))+(((-1.0)*r02*x11116))+(((-1.0)*x11110*x11117)));
evalcond[3]=(((r02*x11118))+((r00*x11111))+(((-1.0)*cj3*x11110*x11116))+((r01*x11104))+((x11108*x11119)));
evalcond[4]=((((-1.0)*r02*sj3*x11117))+((r00*x11102*x11104))+((r00*x11113))+(((-1.0)*sj3*x11108*x11116))+((r01*x11112)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x11112*x11116))+x11109+((r21*x11104))+((r20*x11111))+((r21*x11102*x11113))+((r22*x11118)));
evalcond[6]=(((x11105*x11119))+((r10*x11111))+x11103+((r11*x11104))+(((-1.0)*x11115))+((r12*x11118))+(((-1.0)*cj3*x11106*x11116)));
evalcond[7]=(((r20*x11102*x11104))+x11103+((r21*x11112))+(((-1.0)*r22*sj3*x11117))+((r20*x11113))+(((-1.0)*x11115))+(((-1.0)*r21*x11111*x11116)));
evalcond[8]=((((-1.0)*x11109))+(((-1.0)*sj3*x11105*x11116))+(((-1.0)*r12*sj3*x11117))+((r10*x11113))+((r10*x11102*x11104))+(((-1.0)*sj2*x11107))+((r11*x11112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11120 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11120.valid){
continue;
}
CheckValue<IkReal> x11121=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11120.value)+(((1.5707963267949)*(x11121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11122=IKsin(j4);
IkReal x11123=IKcos(j4);
IkReal x11124=(sj1*sj2);
IkReal x11125=(gconst5*sj3);
IkReal x11126=(gconst4*r11);
IkReal x11127=(gconst5*r10);
IkReal x11128=((1.0)*cj1);
IkReal x11129=(gconst4*r01);
IkReal x11130=(cj2*sj1);
IkReal x11131=(gconst5*r00);
IkReal x11132=(gconst4*sj3);
IkReal x11133=(cj3*gconst5);
IkReal x11134=(cj3*gconst4);
IkReal x11135=(gconst4*r21);
IkReal x11136=(cj2*x11128);
IkReal x11137=((1.0)*x11123);
IkReal x11138=((1.0)*x11122);
IkReal x11139=(cj3*x11122);
IkReal x11140=(cj3*x11123);
evalcond[0]=(((x11122*x11135))+(((-1.0)*r22*x11137))+(((-1.0)*gconst5*r20*x11138)));
evalcond[1]=(((x11122*x11126))+(((-1.0)*x11127*x11138))+(((-1.0)*r12*x11137)));
evalcond[2]=((-1.0)+(((-1.0)*x11131*x11138))+((x11122*x11129))+(((-1.0)*r02*x11137)));
evalcond[3]=(((r02*x11139))+(((-1.0)*cj3*x11131*x11137))+((x11129*x11140))+((r01*x11125))+((r00*x11132)));
evalcond[4]=((((-1.0)*r02*sj3*x11138))+((r00*x11123*x11125))+(((-1.0)*sj3*x11129*x11137))+((r01*x11133))+((r00*x11134)));
evalcond[5]=(((r22*x11139))+((r21*x11125))+(((-1.0)*r20*x11133*x11137))+((r21*x11123*x11134))+((cj1*sj2))+x11130+((r20*x11132)));
evalcond[6]=(((x11126*x11140))+x11124+((r10*x11132))+((r11*x11125))+(((-1.0)*x11136))+(((-1.0)*cj3*x11127*x11137))+((r12*x11139)));
evalcond[7]=((((-1.0)*r21*x11132*x11137))+((r21*x11133))+x11124+(((-1.0)*r22*sj3*x11138))+((r20*x11134))+(((-1.0)*x11136))+((r20*x11123*x11125)));
evalcond[8]=((((-1.0)*x11130))+(((-1.0)*r12*sj3*x11138))+((r10*x11123*x11125))+(((-1.0)*sj3*x11126*x11137))+((r10*x11134))+((r11*x11133))+(((-1.0)*sj2*x11128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11141=((-1.0)*r21);
CheckValue<IkReal> x11144 = IKatan2WithCheck(IkReal(x11141),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11144.valid){
continue;
}
IkReal x11142=((1.0)*(x11144.value));
IkReal x11143=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11142)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11142)));
IkReal gconst4=(x11141*x11143);
IkReal gconst5=((1.0)*r20*x11143);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11145=((-1.0)*r21);
CheckValue<IkReal> x11148 = IKatan2WithCheck(IkReal(x11145),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11148.valid){
continue;
}
IkReal x11146=((1.0)*(x11148.value));
IkReal x11147=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11146)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11146)));
IkReal gconst4=(x11145*x11147);
IkReal gconst5=((1.0)*r20*x11147);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11149=((-1.0)*r21);
CheckValue<IkReal> x11152 = IKatan2WithCheck(IkReal(x11149),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11152.valid){
continue;
}
IkReal x11150=((1.0)*(x11152.value));
IkReal x11151=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11150)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11150)));
IkReal gconst4=(x11149*x11151);
IkReal gconst5=((1.0)*r20*x11151);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11153=((-1.0)*r21);
CheckValue<IkReal> x11156 = IKatan2WithCheck(IkReal(x11153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11156.valid){
continue;
}
IkReal x11154=((1.0)*(x11156.value));
IkReal x11155=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11154)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11154)));
IkReal gconst4=(x11153*x11155);
IkReal gconst5=((1.0)*r20*x11155);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11157=((-1.0)*r21);
CheckValue<IkReal> x11160 = IKatan2WithCheck(IkReal(x11157),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11160.valid){
continue;
}
IkReal x11158=((1.0)*(x11160.value));
IkReal x11159=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11158)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11158)));
IkReal gconst4=(x11157*x11159);
IkReal gconst5=((1.0)*r20*x11159);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11161=((-1.0)*r21);
CheckValue<IkReal> x11164 = IKatan2WithCheck(IkReal(x11161),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11164.valid){
continue;
}
IkReal x11162=((1.0)*(x11164.value));
IkReal x11163=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11162)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11162)));
IkReal gconst4=(x11161*x11163);
IkReal gconst5=((1.0)*r20*x11163);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11165=(gconst5*r00);
IkReal x11166=(gconst4*r01);
CheckValue<IkReal> x11167 = IKatan2WithCheck(IkReal((x11165+(((-1.0)*x11166)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11167.valid){
continue;
}
CheckValue<IkReal> x11168=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11165*x11166))+(x11166*x11166)+(x11165*x11165)+(r02*r02))),-1);
if(!x11168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11167.value)+(((1.5707963267949)*(x11168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11169=IKsin(j4);
IkReal x11170=IKcos(j4);
IkReal x11171=(gconst4*r11);
IkReal x11172=(gconst5*r10);
IkReal x11173=(gconst4*r01);
IkReal x11174=(gconst5*r00);
IkReal x11175=(gconst4*r21);
IkReal x11176=(gconst5*r20);
IkReal x11177=((1.0)*x11170);
IkReal x11178=((1.0)*x11169);
evalcond[0]=((((-1.0)*x11176*x11178))+((x11169*x11175))+(((-1.0)*r22*x11177)));
evalcond[1]=(((x11169*x11171))+(((-1.0)*x11172*x11178))+(((-1.0)*r12*x11177)));
evalcond[2]=((((-1.0)*x11173*x11177))+((x11170*x11174))+(((-1.0)*r02*x11178)));
evalcond[3]=((1.0)+(((-1.0)*x11174*x11178))+((x11169*x11173))+(((-1.0)*r02*x11177)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11178))+(((-1.0)*x11171*x11177))+((x11170*x11172)));
evalcond[5]=((((-1.0)*x11175*x11177))+(((-1.0)*r22*x11178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11170*x11176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11179=((1.0)*gconst5);
CheckValue<IkReal> x11180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11179))+(((-1.0)*gconst4*r20)))),-1);
if(!x11180.valid){
continue;
}
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11179))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11180.value)))+(x11181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11182=IKsin(j4);
IkReal x11183=IKcos(j4);
IkReal x11184=(gconst4*r11);
IkReal x11185=(gconst5*r10);
IkReal x11186=(gconst4*r01);
IkReal x11187=(gconst5*r00);
IkReal x11188=(gconst4*r21);
IkReal x11189=(gconst5*r20);
IkReal x11190=((1.0)*x11183);
IkReal x11191=((1.0)*x11182);
evalcond[0]=((((-1.0)*r22*x11190))+((x11182*x11188))+(((-1.0)*x11189*x11191)));
evalcond[1]=((((-1.0)*r12*x11190))+(((-1.0)*x11185*x11191))+((x11182*x11184)));
evalcond[2]=((((-1.0)*x11186*x11190))+(((-1.0)*r02*x11191))+((x11183*x11187)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11190))+((x11182*x11186))+(((-1.0)*x11187*x11191)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11191))+((x11183*x11185))+((cj1*sj2))+(((-1.0)*x11184*x11190)));
evalcond[5]=((((-1.0)*r22*x11191))+((x11183*x11189))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11188*x11190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11192=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11192.valid){
continue;
}
CheckValue<IkReal> x11193 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11192.value)))+(x11193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11194=IKsin(j4);
IkReal x11195=IKcos(j4);
IkReal x11196=(gconst4*r11);
IkReal x11197=(gconst5*r10);
IkReal x11198=(gconst4*r01);
IkReal x11199=(gconst5*r00);
IkReal x11200=(gconst4*r21);
IkReal x11201=(gconst5*r20);
IkReal x11202=((1.0)*x11195);
IkReal x11203=((1.0)*x11194);
evalcond[0]=((((-1.0)*r22*x11202))+((x11194*x11200))+(((-1.0)*x11201*x11203)));
evalcond[1]=((((-1.0)*x11197*x11203))+((x11194*x11196))+(((-1.0)*r12*x11202)));
evalcond[2]=((((-1.0)*x11198*x11202))+((x11195*x11199))+(((-1.0)*r02*x11203)));
evalcond[3]=((1.0)+(((-1.0)*x11199*x11203))+((x11194*x11198))+(((-1.0)*r02*x11202)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11196*x11202))+((cj1*sj2))+(((-1.0)*r12*x11203))+((x11195*x11197)));
evalcond[5]=((((-1.0)*r22*x11203))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11195*x11201))+(((-1.0)*x11200*x11202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11204=((-1.0)*r21);
CheckValue<IkReal> x11207 = IKatan2WithCheck(IkReal(x11204),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11207.valid){
continue;
}
IkReal x11205=((1.0)*(x11207.value));
IkReal x11206=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11205)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11205)));
IkReal gconst4=(x11204*x11206);
IkReal gconst5=((1.0)*r20*x11206);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11208=((-1.0)*r21);
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(x11208),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
IkReal x11209=((1.0)*(x11211.value));
IkReal x11210=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11209)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11209)));
IkReal gconst4=(x11208*x11210);
IkReal gconst5=((1.0)*r20*x11210);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11212=((-1.0)*r21);
CheckValue<IkReal> x11215 = IKatan2WithCheck(IkReal(x11212),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11215.valid){
continue;
}
IkReal x11213=((1.0)*(x11215.value));
IkReal x11214=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11213)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11213)));
IkReal gconst4=(x11212*x11214);
IkReal gconst5=((1.0)*r20*x11214);
IkReal x11216=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11220=IKPowWithIntegerCheck(x11216,-1);
if(!x11220.valid){
continue;
}
IkReal x11217=x11220.value;
IkReal x11218=((1.0)*x11217);
IkReal x11219=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11217))+(((-1.0)*x11218*(r01*r01)*(r21*r21)))+(((-1.0)*x11218*(r00*r00)*(r20*r20))));
j4eval[0]=x11219;
j4eval[1]=IKsign(x11219);
j4eval[2]=r02;
j4eval[3]=x11216;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11221=(gconst4*r01);
IkReal x11222=(gconst5*r00);
CheckValue<IkReal> x11223=IKPowWithIntegerCheck(IKsign(((((2.0)*x11221*x11222))+(((-1.0)*(x11221*x11221)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11222*x11222))))),-1);
if(!x11223.valid){
continue;
}
CheckValue<IkReal> x11224 = IKatan2WithCheck(IkReal((x11221+(((-1.0)*x11222)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11223.value)))+(x11224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11225=IKcos(j4);
IkReal x11226=IKsin(j4);
IkReal x11227=(gconst4*r11);
IkReal x11228=(gconst5*r10);
IkReal x11229=(gconst5*r00);
IkReal x11230=(gconst5*r20);
IkReal x11231=((1.0)*x11225);
IkReal x11232=(gconst4*x11225);
IkReal x11233=((1.0)*x11226);
IkReal x11234=(gconst4*x11226);
evalcond[0]=(((r02*x11226))+(((-1.0)*x11229*x11231))+((r01*x11232)));
evalcond[1]=((((-1.0)*x11230*x11233))+((r21*x11234))+(((-1.0)*r22*x11231)));
evalcond[2]=((((-1.0)*x11228*x11233))+((x11226*x11227))+(((-1.0)*r12*x11231)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11231))+(((-1.0)*x11229*x11233))+((r01*x11234)));
evalcond[4]=(((cj2*sj1))+((r12*x11226))+((cj1*sj2))+(((-1.0)*x11228*x11231))+((x11225*x11227)));
evalcond[5]=((((-1.0)*x11230*x11231))+((r22*x11226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11235=((1.0)*gconst5);
CheckValue<IkReal> x11236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11235))+(((-1.0)*gconst4*r20)))),-1);
if(!x11236.valid){
continue;
}
CheckValue<IkReal> x11237 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11236.value)))+(x11237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11238=IKcos(j4);
IkReal x11239=IKsin(j4);
IkReal x11240=(gconst4*r11);
IkReal x11241=(gconst5*r10);
IkReal x11242=(gconst5*r00);
IkReal x11243=(gconst5*r20);
IkReal x11244=((1.0)*x11238);
IkReal x11245=(gconst4*x11238);
IkReal x11246=((1.0)*x11239);
IkReal x11247=(gconst4*x11239);
evalcond[0]=(((r02*x11239))+(((-1.0)*x11242*x11244))+((r01*x11245)));
evalcond[1]=((((-1.0)*x11243*x11246))+((r21*x11247))+(((-1.0)*r22*x11244)));
evalcond[2]=(((x11239*x11240))+(((-1.0)*x11241*x11246))+(((-1.0)*r12*x11244)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11244))+(((-1.0)*x11242*x11246))+((r01*x11247)));
evalcond[4]=(((cj2*sj1))+((x11238*x11240))+((cj1*sj2))+((r12*x11239))+(((-1.0)*x11241*x11244)));
evalcond[5]=(((r22*x11239))+(((-1.0)*x11243*x11244))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11248=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11248.valid){
continue;
}
CheckValue<IkReal> x11249 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11248.value)))+(x11249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11250=IKcos(j4);
IkReal x11251=IKsin(j4);
IkReal x11252=(gconst4*r11);
IkReal x11253=(gconst5*r10);
IkReal x11254=(gconst5*r00);
IkReal x11255=(gconst5*r20);
IkReal x11256=((1.0)*x11250);
IkReal x11257=(gconst4*x11250);
IkReal x11258=((1.0)*x11251);
IkReal x11259=(gconst4*x11251);
evalcond[0]=(((r02*x11251))+((r01*x11257))+(((-1.0)*x11254*x11256)));
evalcond[1]=(((r21*x11259))+(((-1.0)*r22*x11256))+(((-1.0)*x11255*x11258)));
evalcond[2]=((((-1.0)*x11253*x11258))+((x11251*x11252))+(((-1.0)*r12*x11256)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11256))+((r01*x11259))+(((-1.0)*x11254*x11258)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11250*x11252))+((r12*x11251))+(((-1.0)*x11253*x11256)));
evalcond[5]=(((r22*x11251))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11257))+(((-1.0)*x11255*x11256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11260=((-1.0)*r21);
CheckValue<IkReal> x11263 = IKatan2WithCheck(IkReal(x11260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11263.valid){
continue;
}
IkReal x11261=((1.0)*(x11263.value));
IkReal x11262=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11261)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11261)));
IkReal gconst4=(x11260*x11262);
IkReal gconst5=((1.0)*r20*x11262);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11264=((-1.0)*r21);
CheckValue<IkReal> x11267 = IKatan2WithCheck(IkReal(x11264),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11267.valid){
continue;
}
IkReal x11265=((1.0)*(x11267.value));
IkReal x11266=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11265)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11265)));
IkReal gconst4=(x11264*x11266);
IkReal gconst5=((1.0)*r20*x11266);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11268=((-1.0)*r21);
CheckValue<IkReal> x11271 = IKatan2WithCheck(IkReal(x11268),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11271.valid){
continue;
}
IkReal x11269=((1.0)*(x11271.value));
IkReal x11270=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11269)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11269)));
IkReal gconst4=(x11268*x11270);
IkReal gconst5=((1.0)*r20*x11270);
IkReal x11272=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11276=IKPowWithIntegerCheck(x11272,-1);
if(!x11276.valid){
continue;
}
IkReal x11273=x11276.value;
IkReal x11274=((1.0)*x11273);
IkReal x11275=((((-1.0)*x11274*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11274*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11273)));
j4eval[0]=x11275;
j4eval[1]=IKsign(x11275);
j4eval[2]=r02;
j4eval[3]=x11272;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11277=(gconst4*r01);
IkReal x11278=(gconst5*r00);
CheckValue<IkReal> x11279=IKPowWithIntegerCheck(IKsign(((((2.0)*x11277*x11278))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11278*x11278)))+(((-1.0)*(x11277*x11277))))),-1);
if(!x11279.valid){
continue;
}
CheckValue<IkReal> x11280 = IKatan2WithCheck(IkReal((x11277+(((-1.0)*x11278)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11279.value)))+(x11280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11281=IKcos(j4);
IkReal x11282=IKsin(j4);
IkReal x11283=(gconst5*r10);
IkReal x11284=(gconst5*r00);
IkReal x11285=(gconst5*r20);
IkReal x11286=((1.0)*x11281);
IkReal x11287=(gconst4*x11282);
IkReal x11288=(gconst4*x11281);
IkReal x11289=((1.0)*x11282);
evalcond[0]=((((-1.0)*x11284*x11286))+((r02*x11282))+((r01*x11288)));
evalcond[1]=((((-1.0)*r22*x11286))+((r21*x11287))+(((-1.0)*x11285*x11289)));
evalcond[2]=((((-1.0)*r12*x11286))+(((-1.0)*x11283*x11289))+((r11*x11287)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11286))+(((-1.0)*x11284*x11289))+((r01*x11287)));
evalcond[4]=(((cj2*sj1))+((r22*x11282))+((cj1*sj2))+((r21*x11288))+(((-1.0)*x11285*x11286)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11283*x11286))+((r12*x11282))+((cj1*cj2))+((r11*x11288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11290=((1.0)*gconst5);
CheckValue<IkReal> x11291 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11290))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11291.valid){
continue;
}
CheckValue<IkReal> x11292=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11290))+(((-1.0)*gconst4*r20)))),-1);
if(!x11292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11291.value)+(((1.5707963267949)*(x11292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11293=IKcos(j4);
IkReal x11294=IKsin(j4);
IkReal x11295=(gconst5*r10);
IkReal x11296=(gconst5*r00);
IkReal x11297=(gconst5*r20);
IkReal x11298=((1.0)*x11293);
IkReal x11299=(gconst4*x11294);
IkReal x11300=(gconst4*x11293);
IkReal x11301=((1.0)*x11294);
evalcond[0]=(((r01*x11300))+((r02*x11294))+(((-1.0)*x11296*x11298)));
evalcond[1]=((((-1.0)*r22*x11298))+(((-1.0)*x11297*x11301))+((r21*x11299)));
evalcond[2]=(((r11*x11299))+(((-1.0)*x11295*x11301))+(((-1.0)*r12*x11298)));
evalcond[3]=((1.0)+((r01*x11299))+(((-1.0)*r02*x11298))+(((-1.0)*x11296*x11301)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11297*x11298))+((r21*x11300))+((r22*x11294)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11295*x11298))+((r11*x11300))+((cj1*cj2))+((r12*x11294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11302=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11302.valid){
continue;
}
CheckValue<IkReal> x11303 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11302.value)))+(x11303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11304=IKcos(j4);
IkReal x11305=IKsin(j4);
IkReal x11306=(gconst5*r10);
IkReal x11307=(gconst5*r00);
IkReal x11308=(gconst5*r20);
IkReal x11309=((1.0)*x11304);
IkReal x11310=(gconst4*x11305);
IkReal x11311=(gconst4*x11304);
IkReal x11312=((1.0)*x11305);
evalcond[0]=(((r02*x11305))+(((-1.0)*x11307*x11309))+((r01*x11311)));
evalcond[1]=(((r21*x11310))+(((-1.0)*x11308*x11312))+(((-1.0)*r22*x11309)));
evalcond[2]=(((r11*x11310))+(((-1.0)*x11306*x11312))+(((-1.0)*r12*x11309)));
evalcond[3]=((1.0)+(((-1.0)*x11307*x11312))+(((-1.0)*r02*x11309))+((r01*x11310)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11311))+((r22*x11305))+(((-1.0)*x11308*x11309)));
evalcond[5]=(((r11*x11311))+(((-1.0)*sj1*sj2))+((r12*x11305))+(((-1.0)*x11306*x11309))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11313=((-1.0)*r21);
CheckValue<IkReal> x11316 = IKatan2WithCheck(IkReal(x11313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11316.valid){
continue;
}
IkReal x11314=((1.0)*(x11316.value));
IkReal x11315=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11314)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11314)));
IkReal gconst4=(x11313*x11315);
IkReal gconst5=((1.0)*r20*x11315);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11317=((-1.0)*r21);
CheckValue<IkReal> x11320 = IKatan2WithCheck(IkReal(x11317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11320.valid){
continue;
}
IkReal x11318=((1.0)*(x11320.value));
IkReal x11319=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11318)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11318)));
IkReal gconst4=(x11317*x11319);
IkReal gconst5=((1.0)*r20*x11319);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11321=((-1.0)*r21);
CheckValue<IkReal> x11324 = IKatan2WithCheck(IkReal(x11321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11324.valid){
continue;
}
IkReal x11322=((1.0)*(x11324.value));
IkReal x11323=x10115;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11322)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11322)));
IkReal gconst4=(x11321*x11323);
IkReal gconst5=((1.0)*r20*x11323);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11325=(gconst5*r00);
IkReal x11326=(gconst4*r01);
CheckValue<IkReal> x11327 = IKatan2WithCheck(IkReal((x11325+(((-1.0)*x11326)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11327.valid){
continue;
}
CheckValue<IkReal> x11328=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11325*x11326))+(x11325*x11325)+(r02*r02)+(x11326*x11326))),-1);
if(!x11328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11327.value)+(((1.5707963267949)*(x11328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11329=IKsin(j4);
IkReal x11330=IKcos(j4);
IkReal x11331=(gconst4*r11);
IkReal x11332=(gconst5*r10);
IkReal x11333=(gconst5*r00);
IkReal x11334=(gconst5*r20);
IkReal x11335=((1.0)*x11330);
IkReal x11336=(gconst4*x11329);
IkReal x11337=((1.0)*x11329);
evalcond[0]=((((-1.0)*r22*x11335))+(((-1.0)*x11334*x11337))+((r21*x11336)));
evalcond[1]=((((-1.0)*r12*x11335))+((x11329*x11331))+(((-1.0)*x11332*x11337)));
evalcond[2]=(((x11330*x11333))+(((-1.0)*gconst4*r01*x11335))+(((-1.0)*r02*x11337)));
evalcond[3]=((1.0)+(((-1.0)*x11333*x11337))+((r01*x11336))+(((-1.0)*r02*x11335)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11337))+(((-1.0)*gconst4*r21*x11335))+((x11330*x11334)));
evalcond[5]=((((-1.0)*r12*x11337))+(((-1.0)*sj1*sj2))+(((-1.0)*x11331*x11335))+((x11330*x11332))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11338=((1.0)*gconst5);
CheckValue<IkReal> x11339 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11339.valid){
continue;
}
CheckValue<IkReal> x11340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11338))+(((-1.0)*gconst4*r20)))),-1);
if(!x11340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11339.value)+(((1.5707963267949)*(x11340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11341=IKsin(j4);
IkReal x11342=IKcos(j4);
IkReal x11343=(gconst4*r11);
IkReal x11344=(gconst5*r10);
IkReal x11345=(gconst5*r00);
IkReal x11346=(gconst5*r20);
IkReal x11347=((1.0)*x11342);
IkReal x11348=(gconst4*x11341);
IkReal x11349=((1.0)*x11341);
evalcond[0]=((((-1.0)*x11346*x11349))+(((-1.0)*r22*x11347))+((r21*x11348)));
evalcond[1]=(((x11341*x11343))+(((-1.0)*x11344*x11349))+(((-1.0)*r12*x11347)));
evalcond[2]=(((x11342*x11345))+(((-1.0)*gconst4*r01*x11347))+(((-1.0)*r02*x11349)));
evalcond[3]=((1.0)+(((-1.0)*x11345*x11349))+((r01*x11348))+(((-1.0)*r02*x11347)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11349))+(((-1.0)*gconst4*r21*x11347))+((x11342*x11346)));
evalcond[5]=((((-1.0)*x11343*x11347))+(((-1.0)*sj1*sj2))+((x11342*x11344))+((cj1*cj2))+(((-1.0)*r12*x11349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11350=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11350.valid){
continue;
}
CheckValue<IkReal> x11351 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11350.value)))+(x11351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11352=IKsin(j4);
IkReal x11353=IKcos(j4);
IkReal x11354=(gconst4*r11);
IkReal x11355=(gconst5*r10);
IkReal x11356=(gconst5*r00);
IkReal x11357=(gconst5*r20);
IkReal x11358=((1.0)*x11353);
IkReal x11359=(gconst4*x11352);
IkReal x11360=((1.0)*x11352);
evalcond[0]=((((-1.0)*x11357*x11360))+(((-1.0)*r22*x11358))+((r21*x11359)));
evalcond[1]=((((-1.0)*r12*x11358))+(((-1.0)*x11355*x11360))+((x11352*x11354)));
evalcond[2]=(((x11353*x11356))+(((-1.0)*r02*x11360))+(((-1.0)*gconst4*r01*x11358)));
evalcond[3]=((1.0)+(((-1.0)*x11356*x11360))+((r01*x11359))+(((-1.0)*r02*x11358)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11360))+((x11353*x11357))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11358)));
evalcond[5]=(((x11353*x11355))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11360))+((cj1*cj2))+(((-1.0)*x11354*x11358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11361=((-1.0)*r21);
IkReal x11362=((-1.0)*r20);
CheckValue<IkReal> x11364 = IKatan2WithCheck(IkReal(x11361),IkReal(x11362),IKFAST_ATAN2_MAGTHRESH);
if(!x11364.valid){
continue;
}
IkReal x11363=((1.0)*(x11364.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11363)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11362);
rxp0_2=(py*r00);
rxp1_0=(py*x11361);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11363)));
IkReal gconst4=x11361;
IkReal gconst5=((1.0)*r20);
IkReal x11365=((1.0)*r01*r21);
IkReal x11366=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11366))+(((-1.0)*x11365)));
j4eval[1]=((((-1.0)*cj3*x11365))+(((-1.0)*cj3*x11366)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11367=((-1.0)*r21);
IkReal x11368=((-1.0)*r20);
CheckValue<IkReal> x11370 = IKatan2WithCheck(IkReal(x11367),IkReal(x11368),IKFAST_ATAN2_MAGTHRESH);
if(!x11370.valid){
continue;
}
IkReal x11369=((1.0)*(x11370.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11369)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11368);
rxp0_2=(py*r00);
rxp1_0=(py*x11367);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11369)));
IkReal gconst4=x11367;
IkReal gconst5=((1.0)*r20);
IkReal x11371=((1.0)*r01*r21);
IkReal x11372=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11371))+(((-1.0)*x11372)));
j4eval[1]=(((sj3*x11371))+((sj3*x11372)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11373=((-1.0)*r21);
IkReal x11374=((-1.0)*r20);
CheckValue<IkReal> x11376 = IKatan2WithCheck(IkReal(x11373),IkReal(x11374),IKFAST_ATAN2_MAGTHRESH);
if(!x11376.valid){
continue;
}
IkReal x11375=((1.0)*(x11376.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11375)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11374);
rxp0_2=(py*r00);
rxp1_0=(py*x11373);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11375)));
IkReal gconst4=x11373;
IkReal gconst5=((1.0)*r20);
IkReal x11377=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11377))+(((-1.0)*r01*r21*x11377)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11378=((1.0)*gconst5);
CheckValue<IkReal> x11379=IKPowWithIntegerCheck(cj3,-1);
if(!x11379.valid){
continue;
}
CheckValue<IkReal> x11380=IKPowWithIntegerCheck(r12,-1);
if(!x11380.valid){
continue;
}
CheckValue<IkReal> x11381=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11378))),-1);
if(!x11381.valid){
continue;
}
if( IKabs(((x11379.value)*(x11380.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11381.value)*(((((-1.0)*r01*sj3*x11378))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11379.value)*(x11380.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11381.value)*(((((-1.0)*r01*sj3*x11378))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11379.value)*(x11380.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11381.value)*(((((-1.0)*r01*sj3*x11378))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11382=IKsin(j4);
IkReal x11383=IKcos(j4);
IkReal x11384=(cj2*sj1);
IkReal x11385=(cj1*sj2);
IkReal x11386=(sj1*sj2);
IkReal x11387=(gconst5*sj3);
IkReal x11388=(gconst5*r00);
IkReal x11389=(cj3*gconst5);
IkReal x11390=(gconst4*sj3);
IkReal x11391=(cj3*gconst4);
IkReal x11392=(cj1*cj2);
IkReal x11393=((1.0)*x11382);
IkReal x11394=(gconst4*x11382);
IkReal x11395=((1.0)*x11383);
IkReal x11396=(x11384+x11385);
IkReal x11397=(x11383*x11387);
IkReal x11398=(x11383*x11391);
evalcond[0]=((-1.0)*r12*x11383);
evalcond[1]=((((-1.0)*gconst5*r20*x11393))+((r21*x11394)));
evalcond[2]=(((cj3*r12*x11382))+x11392+(((-1.0)*x11386)));
evalcond[3]=((((-1.0)*r12*sj3*x11393))+x11396);
evalcond[4]=((1.0)+((r01*x11394))+(((-1.0)*x11388*x11393)));
evalcond[5]=(((r00*x11390))+((r01*x11398))+((r01*x11387))+(((-1.0)*cj3*x11388*x11395)));
evalcond[6]=(((r00*x11391))+((r00*x11397))+(((-1.0)*r01*x11390*x11395))+((r01*x11389)));
evalcond[7]=((((-1.0)*r20*x11389*x11395))+((r20*x11390))+x11396+((r21*x11387))+((r21*x11398)));
evalcond[8]=(((r20*x11397))+((r20*x11391))+(((-1.0)*r21*x11390*x11395))+x11386+(((-1.0)*x11392))+((r21*x11389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11399=((1.0)*gconst4);
IkReal x11400=(gconst5*r00);
CheckValue<IkReal> x11401=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11400))),-1);
if(!x11401.valid){
continue;
}
CheckValue<IkReal> x11402=IKPowWithIntegerCheck((((sj3*x11400))+(((-1.0)*r01*sj3*x11399))),-1);
if(!x11402.valid){
continue;
}
if( IKabs(((-1.0)*(x11401.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11402.value)*(((((-1.0)*cj3*r00*x11399))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11401.value)))+IKsqr(((x11402.value)*(((((-1.0)*cj3*r00*x11399))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11401.value)), ((x11402.value)*(((((-1.0)*cj3*r00*x11399))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11403=IKsin(j4);
IkReal x11404=IKcos(j4);
IkReal x11405=(cj2*sj1);
IkReal x11406=(cj1*sj2);
IkReal x11407=(sj1*sj2);
IkReal x11408=(gconst5*sj3);
IkReal x11409=(gconst5*r00);
IkReal x11410=(cj3*gconst5);
IkReal x11411=(gconst4*sj3);
IkReal x11412=(cj3*gconst4);
IkReal x11413=(cj1*cj2);
IkReal x11414=((1.0)*x11403);
IkReal x11415=(gconst4*x11403);
IkReal x11416=((1.0)*x11404);
IkReal x11417=(x11405+x11406);
IkReal x11418=(x11404*x11408);
IkReal x11419=(x11404*x11412);
evalcond[0]=((-1.0)*r12*x11404);
evalcond[1]=((((-1.0)*gconst5*r20*x11414))+((r21*x11415)));
evalcond[2]=(x11413+((cj3*r12*x11403))+(((-1.0)*x11407)));
evalcond[3]=(x11417+(((-1.0)*r12*sj3*x11414)));
evalcond[4]=((1.0)+((r01*x11415))+(((-1.0)*x11409*x11414)));
evalcond[5]=(((r01*x11419))+((r00*x11411))+(((-1.0)*cj3*x11409*x11416))+((r01*x11408)));
evalcond[6]=(((r01*x11410))+((r00*x11418))+((r00*x11412))+(((-1.0)*r01*x11411*x11416)));
evalcond[7]=(((r21*x11408))+x11417+((r21*x11419))+(((-1.0)*r20*x11410*x11416))+((r20*x11411)));
evalcond[8]=(x11407+((r21*x11410))+(((-1.0)*x11413))+(((-1.0)*r21*x11411*x11416))+((r20*x11412))+((r20*x11418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11420=((1.0)*gconst5);
IkReal x11421=(gconst4*r01);
CheckValue<IkReal> x11422=IKPowWithIntegerCheck((x11421+(((-1.0)*r00*x11420))),-1);
if(!x11422.valid){
continue;
}
CheckValue<IkReal> x11423=IKPowWithIntegerCheck((((cj3*x11421))+(((-1.0)*cj3*r00*x11420))),-1);
if(!x11423.valid){
continue;
}
if( IKabs(((-1.0)*(x11422.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11423.value)*(((((-1.0)*r01*sj3*x11420))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11422.value)))+IKsqr(((x11423.value)*(((((-1.0)*r01*sj3*x11420))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11422.value)), ((x11423.value)*(((((-1.0)*r01*sj3*x11420))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11424=IKsin(j4);
IkReal x11425=IKcos(j4);
IkReal x11426=(cj2*sj1);
IkReal x11427=(cj1*sj2);
IkReal x11428=(sj1*sj2);
IkReal x11429=(gconst5*sj3);
IkReal x11430=(gconst5*r00);
IkReal x11431=(cj3*gconst5);
IkReal x11432=(gconst4*sj3);
IkReal x11433=(cj3*gconst4);
IkReal x11434=(cj1*cj2);
IkReal x11435=((1.0)*x11424);
IkReal x11436=(gconst4*x11424);
IkReal x11437=((1.0)*x11425);
IkReal x11438=(x11427+x11426);
IkReal x11439=(x11425*x11429);
IkReal x11440=(x11425*x11433);
evalcond[0]=((-1.0)*r12*x11425);
evalcond[1]=(((r21*x11436))+(((-1.0)*gconst5*r20*x11435)));
evalcond[2]=(x11434+((cj3*r12*x11424))+(((-1.0)*x11428)));
evalcond[3]=(x11438+(((-1.0)*r12*sj3*x11435)));
evalcond[4]=((1.0)+((r01*x11436))+(((-1.0)*x11430*x11435)));
evalcond[5]=((((-1.0)*cj3*x11430*x11437))+((r01*x11429))+((r00*x11432))+((r01*x11440)));
evalcond[6]=(((r01*x11431))+((r00*x11433))+((r00*x11439))+(((-1.0)*r01*x11432*x11437)));
evalcond[7]=(((r20*x11432))+x11438+(((-1.0)*r20*x11431*x11437))+((r21*x11429))+((r21*x11440)));
evalcond[8]=(((r20*x11433))+((r20*x11439))+x11428+(((-1.0)*r21*x11432*x11437))+((r21*x11431))+(((-1.0)*x11434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11441=gconst4*gconst4;
IkReal x11442=gconst5*gconst5;
IkReal x11443=(r01*r20);
IkReal x11444=(gconst4*sj3);
IkReal x11445=(r01*r21);
IkReal x11446=((1.0)*cj3);
IkReal x11447=(r00*r21);
IkReal x11448=(r00*r20);
IkReal x11449=(cj3*gconst4*gconst5);
IkReal x11450=((1.0)*x11442);
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal((((r00*r22*x11444))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11441*x11447))+((gconst5*x11444*x11445))+(((-1.0)*gconst5*x11444*x11448))+(((-1.0)*sj3*x11443*x11450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(IKsign((((x11447*x11449))+(((-1.0)*r02*r22*x11446))+((x11443*x11449))+(((-1.0)*x11442*x11446*x11448))+(((-1.0)*x11441*x11445*x11446)))),-1);
if(!x11452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11451.value)+(((1.5707963267949)*(x11452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11453=IKsin(j4);
IkReal x11454=IKcos(j4);
IkReal x11455=(cj2*sj1);
IkReal x11456=(cj1*sj2);
IkReal x11457=(gconst5*sj3);
IkReal x11458=(gconst4*r11);
IkReal x11459=(sj1*sj2);
IkReal x11460=(gconst5*r10);
IkReal x11461=(cj1*cj2);
IkReal x11462=(gconst4*r01);
IkReal x11463=(gconst5*r00);
IkReal x11464=(gconst4*sj3);
IkReal x11465=(cj3*gconst5);
IkReal x11466=(cj3*gconst4);
IkReal x11467=(gconst4*r21);
IkReal x11468=((1.0)*x11454);
IkReal x11469=((1.0)*x11453);
IkReal x11470=(cj3*x11453);
IkReal x11471=(cj3*x11454);
IkReal x11472=(x11456+x11455);
evalcond[0]=((((-1.0)*gconst5*r20*x11469))+(((-1.0)*r22*x11468))+((x11453*x11467)));
evalcond[1]=((((-1.0)*r12*x11468))+((x11453*x11458))+(((-1.0)*x11460*x11469)));
evalcond[2]=((1.0)+(((-1.0)*x11463*x11469))+(((-1.0)*r02*x11468))+((x11453*x11462)));
evalcond[3]=((((-1.0)*cj3*x11463*x11468))+((r01*x11457))+((r02*x11470))+((x11462*x11471))+((r00*x11464)));
evalcond[4]=(((r01*x11465))+(((-1.0)*r02*sj3*x11469))+(((-1.0)*sj3*x11462*x11468))+((r00*x11454*x11457))+((r00*x11466)));
evalcond[5]=(x11472+((r21*x11457))+((r22*x11470))+((r20*x11464))+((r21*x11454*x11466))+(((-1.0)*r20*x11465*x11468)));
evalcond[6]=(((r12*x11470))+x11461+(((-1.0)*cj3*x11460*x11468))+((x11458*x11471))+((r10*x11464))+(((-1.0)*x11459))+((r11*x11457)));
evalcond[7]=(x11472+((r11*x11465))+((r10*x11466))+(((-1.0)*r12*sj3*x11469))+((r10*x11454*x11457))+(((-1.0)*sj3*x11458*x11468)));
evalcond[8]=(((r20*x11454*x11457))+x11459+(((-1.0)*r21*x11464*x11468))+(((-1.0)*r22*sj3*x11469))+((r20*x11466))+((r21*x11465))+(((-1.0)*x11461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11473=((1.0)*gconst5);
CheckValue<IkReal> x11474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11473))+(((-1.0)*gconst4*r20)))),-1);
if(!x11474.valid){
continue;
}
CheckValue<IkReal> x11475 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11474.value)))+(x11475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11476=IKsin(j4);
IkReal x11477=IKcos(j4);
IkReal x11478=(cj2*sj1);
IkReal x11479=(cj1*sj2);
IkReal x11480=(gconst5*sj3);
IkReal x11481=(gconst4*r11);
IkReal x11482=(sj1*sj2);
IkReal x11483=(gconst5*r10);
IkReal x11484=(cj1*cj2);
IkReal x11485=(gconst4*r01);
IkReal x11486=(gconst5*r00);
IkReal x11487=(gconst4*sj3);
IkReal x11488=(cj3*gconst5);
IkReal x11489=(cj3*gconst4);
IkReal x11490=(gconst4*r21);
IkReal x11491=((1.0)*x11477);
IkReal x11492=((1.0)*x11476);
IkReal x11493=(cj3*x11476);
IkReal x11494=(cj3*x11477);
IkReal x11495=(x11478+x11479);
evalcond[0]=(((x11476*x11490))+(((-1.0)*gconst5*r20*x11492))+(((-1.0)*r22*x11491)));
evalcond[1]=((((-1.0)*x11483*x11492))+(((-1.0)*r12*x11491))+((x11476*x11481)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11491))+((x11476*x11485))+(((-1.0)*x11486*x11492)));
evalcond[3]=((((-1.0)*cj3*x11486*x11491))+((r02*x11493))+((x11485*x11494))+((r00*x11487))+((r01*x11480)));
evalcond[4]=(((r00*x11477*x11480))+((r00*x11489))+((r01*x11488))+(((-1.0)*sj3*x11485*x11491))+(((-1.0)*r02*sj3*x11492)));
evalcond[5]=(((r22*x11493))+((r20*x11487))+x11495+((r21*x11477*x11489))+(((-1.0)*r20*x11488*x11491))+((r21*x11480)));
evalcond[6]=(x11484+(((-1.0)*x11482))+((r12*x11493))+((r11*x11480))+((r10*x11487))+((x11481*x11494))+(((-1.0)*cj3*x11483*x11491)));
evalcond[7]=(x11495+((r11*x11488))+(((-1.0)*r12*sj3*x11492))+(((-1.0)*sj3*x11481*x11491))+((r10*x11489))+((r10*x11477*x11480)));
evalcond[8]=(((r20*x11477*x11480))+((r20*x11489))+x11482+(((-1.0)*r22*sj3*x11492))+(((-1.0)*x11484))+(((-1.0)*r21*x11487*x11491))+((r21*x11488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11496=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11496.valid){
continue;
}
CheckValue<IkReal> x11497 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11496.value)))+(x11497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11498=IKsin(j4);
IkReal x11499=IKcos(j4);
IkReal x11500=(cj2*sj1);
IkReal x11501=(cj1*sj2);
IkReal x11502=(gconst5*sj3);
IkReal x11503=(gconst4*r11);
IkReal x11504=(sj1*sj2);
IkReal x11505=(gconst5*r10);
IkReal x11506=(cj1*cj2);
IkReal x11507=(gconst4*r01);
IkReal x11508=(gconst5*r00);
IkReal x11509=(gconst4*sj3);
IkReal x11510=(cj3*gconst5);
IkReal x11511=(cj3*gconst4);
IkReal x11512=(gconst4*r21);
IkReal x11513=((1.0)*x11499);
IkReal x11514=((1.0)*x11498);
IkReal x11515=(cj3*x11498);
IkReal x11516=(cj3*x11499);
IkReal x11517=(x11500+x11501);
evalcond[0]=((((-1.0)*r22*x11513))+((x11498*x11512))+(((-1.0)*gconst5*r20*x11514)));
evalcond[1]=(((x11498*x11503))+(((-1.0)*r12*x11513))+(((-1.0)*x11505*x11514)));
evalcond[2]=((1.0)+((x11498*x11507))+(((-1.0)*x11508*x11514))+(((-1.0)*r02*x11513)));
evalcond[3]=((((-1.0)*cj3*x11508*x11513))+((r00*x11509))+((r01*x11502))+((r02*x11515))+((x11507*x11516)));
evalcond[4]=(((r01*x11510))+(((-1.0)*sj3*x11507*x11513))+((r00*x11499*x11502))+(((-1.0)*r02*sj3*x11514))+((r00*x11511)));
evalcond[5]=((((-1.0)*r20*x11510*x11513))+((r21*x11499*x11511))+x11517+((r21*x11502))+((r22*x11515))+((r20*x11509)));
evalcond[6]=(x11506+(((-1.0)*cj3*x11505*x11513))+((r11*x11502))+((r10*x11509))+(((-1.0)*x11504))+((r12*x11515))+((x11503*x11516)));
evalcond[7]=(x11517+(((-1.0)*sj3*x11503*x11513))+((r10*x11499*x11502))+(((-1.0)*r12*sj3*x11514))+((r10*x11511))+((r11*x11510)));
evalcond[8]=(x11504+((r20*x11511))+((r20*x11499*x11502))+(((-1.0)*r22*sj3*x11514))+(((-1.0)*r21*x11509*x11513))+(((-1.0)*x11506))+((r21*x11510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11518=((-1.0)*r21);
IkReal x11519=((-1.0)*px);
CheckValue<IkReal> x11521 = IKatan2WithCheck(IkReal(x11518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11521.valid){
continue;
}
IkReal x11520=((1.0)*(x11521.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11520)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11519);
rxp1_1=(px*r21);
rxp1_2=(r11*x11519);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11520)));
IkReal gconst4=x11518;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11522=((-1.0)*r21);
IkReal x11523=((-1.0)*px);
CheckValue<IkReal> x11525 = IKatan2WithCheck(IkReal(x11522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11525.valid){
continue;
}
IkReal x11524=((1.0)*(x11525.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11524)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11523);
rxp1_1=(px*r21);
rxp1_2=(r11*x11523);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11524)));
IkReal gconst4=x11522;
IkReal gconst5=((1.0)*r20);
IkReal x11526=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11526*(r10*r10)))+(((-1.0)*x11526*(r21*r21)))+(((-1.0)*x11526)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11527=((-1.0)*r21);
IkReal x11528=((-1.0)*px);
CheckValue<IkReal> x11530 = IKatan2WithCheck(IkReal(x11527),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11530.valid){
continue;
}
IkReal x11529=((1.0)*(x11530.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11529)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11528);
rxp1_1=(px*r21);
rxp1_2=(r11*x11528);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11529)));
IkReal gconst4=x11527;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11531=((-1.0)*r21);
IkReal x11532=((-1.0)*px);
CheckValue<IkReal> x11534 = IKatan2WithCheck(IkReal(x11531),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11534.valid){
continue;
}
IkReal x11533=((1.0)*(x11534.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11533)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11532);
rxp1_1=(px*r21);
rxp1_2=(r11*x11532);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11533)));
IkReal gconst4=x11531;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11535=((-1.0)*r21);
IkReal x11536=((-1.0)*px);
CheckValue<IkReal> x11538 = IKatan2WithCheck(IkReal(x11535),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11538.valid){
continue;
}
IkReal x11537=((1.0)*(x11538.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11537)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11536);
rxp1_1=(px*r21);
rxp1_2=(r11*x11536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11537)));
IkReal gconst4=x11535;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11539=((-1.0)*r21);
IkReal x11540=((-1.0)*px);
CheckValue<IkReal> x11542 = IKatan2WithCheck(IkReal(x11539),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11542.valid){
continue;
}
IkReal x11541=((1.0)*(x11542.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11541)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11540);
rxp1_1=(px*r21);
rxp1_2=(r11*x11540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11541)));
IkReal gconst4=x11539;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11545=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11545.valid){
continue;
}
IkReal x11543=x11545.value;
IkReal x11544=(sj0*x11543);
cj4array[0]=(((cj1*sj2*x11544))+((cj2*sj1*x11544)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11546=IKsin(j4);
IkReal x11547=IKcos(j4);
IkReal x11548=(gconst5*r20);
IkReal x11549=(gconst4*x11546);
IkReal x11550=((1.0)*x11547);
IkReal x11551=((1.0)*x11546);
evalcond[0]=((-1.0)*r02*x11546);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11550)));
evalcond[2]=((((-1.0)*x11548*x11551))+((r21*x11549)));
evalcond[3]=((((-1.0)*gconst5*r10*x11551))+((r11*x11549)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11550))+((x11547*x11548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11553=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11553.valid){
continue;
}
IkReal x11552=x11553.value;
cj4array[0]=(((cj1*cj2*x11552))+(((-1.0)*sj1*sj2*x11552)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11554=IKsin(j4);
IkReal x11555=IKcos(j4);
IkReal x11556=(gconst5*r10);
IkReal x11557=((1.0)*sj0);
IkReal x11558=(gconst4*x11554);
IkReal x11559=((1.0)*x11555);
IkReal x11560=((1.0)*x11554);
evalcond[0]=((-1.0)*r02*x11554);
evalcond[1]=((((-1.0)*x11557))+(((-1.0)*r02*x11559)));
evalcond[2]=(((r21*x11558))+(((-1.0)*gconst5*r20*x11560)));
evalcond[3]=(((r11*x11558))+(((-1.0)*x11556*x11560)));
evalcond[4]=((((-1.0)*cj1*sj2*x11557))+(((-1.0)*gconst4*r11*x11559))+((x11555*x11556))+(((-1.0)*cj2*sj1*x11557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11561=IKPowWithIntegerCheck(r02,-1);
if(!x11561.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11561.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11562=IKsin(j4);
IkReal x11563=IKcos(j4);
IkReal x11564=((1.0)*sj0);
IkReal x11565=(gconst5*x11563);
IkReal x11566=(gconst4*x11562);
IkReal x11567=((1.0)*gconst4*x11563);
IkReal x11568=((1.0)*gconst5*x11562);
evalcond[0]=((-1.0)*r02*x11562);
evalcond[1]=((((-1.0)*r20*x11568))+((r21*x11566)));
evalcond[2]=(((r11*x11566))+(((-1.0)*r10*x11568)));
evalcond[3]=(((r20*x11565))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11567)));
evalcond[4]=(((r10*x11565))+(((-1.0)*cj2*sj1*x11564))+(((-1.0)*cj1*sj2*x11564))+(((-1.0)*r11*x11567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11569=((-1.0)*r21);
IkReal x11570=((-1.0)*px);
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(x11569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11571=((1.0)*(x11572.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11571)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11570);
rxp1_1=(px*r21);
rxp1_2=(r11*x11570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11571)));
IkReal gconst4=x11569;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11573=((-1.0)*r21);
IkReal x11574=((-1.0)*px);
CheckValue<IkReal> x11576 = IKatan2WithCheck(IkReal(x11573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11576.valid){
continue;
}
IkReal x11575=((1.0)*(x11576.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11575)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11574);
rxp1_1=(px*r21);
rxp1_2=(r11*x11574);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11575)));
IkReal gconst4=x11573;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11577=((-1.0)*r21);
IkReal x11578=((-1.0)*px);
CheckValue<IkReal> x11580 = IKatan2WithCheck(IkReal(x11577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11580.valid){
continue;
}
IkReal x11579=((1.0)*(x11580.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11579)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11578);
rxp1_1=(px*r21);
rxp1_2=(r11*x11578);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11579)));
IkReal gconst4=x11577;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11583=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11583.valid){
continue;
}
IkReal x11581=x11583.value;
IkReal x11582=(sj0*x11581);
cj4array[0]=(((cj2*sj1*x11582))+((cj1*sj2*x11582)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11584=IKsin(j4);
IkReal x11585=IKcos(j4);
IkReal x11586=(gconst5*r20);
IkReal x11587=(gconst4*x11584);
IkReal x11588=((1.0)*x11585);
IkReal x11589=((1.0)*x11584);
evalcond[0]=(r02*x11584);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11588)));
evalcond[2]=((((-1.0)*x11586*x11589))+((r21*x11587)));
evalcond[3]=((((-1.0)*gconst5*r10*x11589))+((r11*x11587)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11586*x11588))+((gconst4*r21*x11585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11591=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11591.valid){
continue;
}
IkReal x11590=x11591.value;
cj4array[0]=(((cj1*cj2*x11590))+(((-1.0)*sj1*sj2*x11590)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11592=IKsin(j4);
IkReal x11593=IKcos(j4);
IkReal x11594=(gconst4*r11);
IkReal x11595=((1.0)*sj0);
IkReal x11596=(gconst5*r10);
IkReal x11597=((1.0)*x11593);
IkReal x11598=((1.0)*x11592);
evalcond[0]=(r02*x11592);
evalcond[1]=((((-1.0)*x11595))+(((-1.0)*r02*x11597)));
evalcond[2]=(((gconst4*r21*x11592))+(((-1.0)*gconst5*r20*x11598)));
evalcond[3]=(((x11592*x11594))+(((-1.0)*x11596*x11598)));
evalcond[4]=((((-1.0)*cj2*sj1*x11595))+(((-1.0)*x11596*x11597))+(((-1.0)*cj1*sj2*x11595))+((x11593*x11594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11599=IKPowWithIntegerCheck(r02,-1);
if(!x11599.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11599.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11600=IKsin(j4);
IkReal x11601=IKcos(j4);
IkReal x11602=(gconst4*r11);
IkReal x11603=((1.0)*cj1);
IkReal x11604=(gconst4*r21);
IkReal x11605=((1.0)*gconst5*x11601);
IkReal x11606=((1.0)*gconst5*x11600);
evalcond[0]=(r02*x11600);
evalcond[1]=((((-1.0)*r20*x11606))+((x11600*x11604)));
evalcond[2]=((((-1.0)*r10*x11606))+((x11600*x11602)));
evalcond[3]=((((-1.0)*r20*x11605))+((sj1*sj2))+((x11601*x11604))+(((-1.0)*cj2*x11603)));
evalcond[4]=((((-1.0)*sj0*sj2*x11603))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11605))+((x11601*x11602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11608=IKPowWithIntegerCheck(r02,-1);
if(!x11608.valid){
continue;
}
IkReal x11607=x11608.value;
CheckValue<IkReal> x11609=IKPowWithIntegerCheck(cj3,-1);
if(!x11609.valid){
continue;
}
if( IKabs((x11607*(x11609.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11607)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11607*(x11609.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11607))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11607*(x11609.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11607));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11610=IKsin(j4);
IkReal x11611=IKcos(j4);
IkReal x11612=(gconst5*sj3);
IkReal x11613=(gconst4*r11);
IkReal x11614=(sj1*sj2);
IkReal x11615=((1.0)*gconst5);
IkReal x11616=(cj2*sj1);
IkReal x11617=((1.0)*sj0);
IkReal x11618=((1.0)*cj0);
IkReal x11619=(gconst4*r21);
IkReal x11620=(cj1*sj2);
IkReal x11621=(cj3*gconst4);
IkReal x11622=(gconst4*sj3);
IkReal x11623=(cj3*gconst5);
IkReal x11624=(r20*x11611);
IkReal x11625=((1.0)*cj1*cj2);
IkReal x11626=(r10*x11611);
IkReal x11627=(cj3*x11611);
IkReal x11628=(r02*x11610);
IkReal x11629=((1.0)*sj3*x11611);
evalcond[0]=((((-1.0)*x11617))+(((-1.0)*r02*x11611)));
evalcond[1]=(((x11610*x11619))+(((-1.0)*r20*x11610*x11615)));
evalcond[2]=(((x11610*x11613))+cj0+(((-1.0)*r10*x11610*x11615)));
evalcond[3]=((((-1.0)*cj1*cj2*x11618))+((cj3*x11628))+((cj0*x11614)));
evalcond[4]=((((-1.0)*sj3*x11628))+(((-1.0)*x11616*x11618))+(((-1.0)*x11618*x11620)));
evalcond[5]=(x11616+x11620+((x11619*x11627))+((r21*x11612))+(((-1.0)*cj3*x11615*x11624))+((r20*x11622)));
evalcond[6]=((((-1.0)*x11619*x11629))+x11614+((x11612*x11624))+(((-1.0)*x11625))+((r21*x11623))+((r20*x11621)));
evalcond[7]=((((-1.0)*cj1*cj2*x11617))+((x11613*x11627))+((r11*x11612))+((sj0*x11614))+(((-1.0)*cj3*x11615*x11626))+((r10*x11622)));
evalcond[8]=(((x11612*x11626))+((r11*x11623))+(((-1.0)*x11616*x11617))+(((-1.0)*x11617*x11620))+(((-1.0)*x11613*x11629))+((r10*x11621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11630=((1.0)*gconst5);
CheckValue<IkReal> x11631=IKPowWithIntegerCheck(((((-1.0)*r10*x11630))+((gconst4*r11))),-1);
if(!x11631.valid){
continue;
}
CheckValue<IkReal> x11632=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11630))),-1);
if(!x11632.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11631.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11632.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11630))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11631.value)))+IKsqr(((x11632.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11630))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11631.value)), ((x11632.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11630))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11633=IKsin(j4);
IkReal x11634=IKcos(j4);
IkReal x11635=(gconst5*sj3);
IkReal x11636=(gconst4*r11);
IkReal x11637=(sj1*sj2);
IkReal x11638=((1.0)*gconst5);
IkReal x11639=(cj2*sj1);
IkReal x11640=((1.0)*sj0);
IkReal x11641=((1.0)*cj0);
IkReal x11642=(gconst4*r21);
IkReal x11643=(cj1*sj2);
IkReal x11644=(cj3*gconst4);
IkReal x11645=(gconst4*sj3);
IkReal x11646=(cj3*gconst5);
IkReal x11647=(r20*x11634);
IkReal x11648=((1.0)*cj1*cj2);
IkReal x11649=(r10*x11634);
IkReal x11650=(cj3*x11634);
IkReal x11651=(r02*x11633);
IkReal x11652=((1.0)*sj3*x11634);
evalcond[0]=((((-1.0)*r02*x11634))+(((-1.0)*x11640)));
evalcond[1]=((((-1.0)*r20*x11633*x11638))+((x11633*x11642)));
evalcond[2]=(cj0+((x11633*x11636))+(((-1.0)*r10*x11633*x11638)));
evalcond[3]=((((-1.0)*cj1*cj2*x11641))+((cj3*x11651))+((cj0*x11637)));
evalcond[4]=((((-1.0)*sj3*x11651))+(((-1.0)*x11641*x11643))+(((-1.0)*x11639*x11641)));
evalcond[5]=(x11639+x11643+((x11642*x11650))+(((-1.0)*cj3*x11638*x11647))+((r21*x11635))+((r20*x11645)));
evalcond[6]=(((x11635*x11647))+x11637+(((-1.0)*x11642*x11652))+((r21*x11646))+((r20*x11644))+(((-1.0)*x11648)));
evalcond[7]=(((r11*x11635))+(((-1.0)*cj1*cj2*x11640))+((r10*x11645))+((x11636*x11650))+(((-1.0)*cj3*x11638*x11649))+((sj0*x11637)));
evalcond[8]=(((x11635*x11649))+(((-1.0)*x11640*x11643))+((r11*x11646))+(((-1.0)*x11639*x11640))+((r10*x11644))+(((-1.0)*x11636*x11652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11653=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11653.valid){
continue;
}
CheckValue<IkReal> x11654=IKPowWithIntegerCheck(r02,-1);
if(!x11654.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11653.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11654.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11653.value)))+IKsqr(((-1.0)*sj0*(x11654.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11653.value)), ((-1.0)*sj0*(x11654.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11655=IKsin(j4);
IkReal x11656=IKcos(j4);
IkReal x11657=(gconst5*sj3);
IkReal x11658=(gconst4*r11);
IkReal x11659=(sj1*sj2);
IkReal x11660=((1.0)*gconst5);
IkReal x11661=(cj2*sj1);
IkReal x11662=((1.0)*sj0);
IkReal x11663=((1.0)*cj0);
IkReal x11664=(gconst4*r21);
IkReal x11665=(cj1*sj2);
IkReal x11666=(cj3*gconst4);
IkReal x11667=(gconst4*sj3);
IkReal x11668=(cj3*gconst5);
IkReal x11669=(r20*x11656);
IkReal x11670=((1.0)*cj1*cj2);
IkReal x11671=(r10*x11656);
IkReal x11672=(cj3*x11656);
IkReal x11673=(r02*x11655);
IkReal x11674=((1.0)*sj3*x11656);
evalcond[0]=((((-1.0)*x11662))+(((-1.0)*r02*x11656)));
evalcond[1]=((((-1.0)*r20*x11655*x11660))+((x11655*x11664)));
evalcond[2]=(cj0+((x11655*x11658))+(((-1.0)*r10*x11655*x11660)));
evalcond[3]=(((cj0*x11659))+((cj3*x11673))+(((-1.0)*cj1*cj2*x11663)));
evalcond[4]=((((-1.0)*sj3*x11673))+(((-1.0)*x11663*x11665))+(((-1.0)*x11661*x11663)));
evalcond[5]=(x11665+x11661+(((-1.0)*cj3*x11660*x11669))+((r20*x11667))+((r21*x11657))+((x11664*x11672)));
evalcond[6]=(((r21*x11668))+x11659+((r20*x11666))+(((-1.0)*x11664*x11674))+((x11657*x11669))+(((-1.0)*x11670)));
evalcond[7]=(((r11*x11657))+((x11658*x11672))+((sj0*x11659))+(((-1.0)*cj3*x11660*x11671))+(((-1.0)*cj1*cj2*x11662))+((r10*x11667)));
evalcond[8]=(((r11*x11668))+(((-1.0)*x11662*x11665))+((r10*x11666))+(((-1.0)*x11658*x11674))+((x11657*x11671))+(((-1.0)*x11661*x11662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11675=((1.0)*sj0);
IkReal x11676=((1.0)*gconst4);
CheckValue<IkReal> x11677 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11675)))),IkReal(((((-1.0)*cj0*r01*x11676))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11675))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11677.valid){
continue;
}
CheckValue<IkReal> x11678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11676))+(((-1.0)*gconst5*r21)))),-1);
if(!x11678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11677.value)+(((1.5707963267949)*(x11678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11679=IKsin(j4);
IkReal x11680=IKcos(j4);
IkReal x11681=(gconst5*sj3);
IkReal x11682=(cj3*gconst5);
IkReal x11683=(gconst4*r11);
IkReal x11684=(sj1*sj2);
IkReal x11685=(cj2*sj1);
IkReal x11686=((1.0)*sj0);
IkReal x11687=(gconst4*r01);
IkReal x11688=(gconst4*r21);
IkReal x11689=((1.0)*cj0);
IkReal x11690=(cj1*sj2);
IkReal x11691=(gconst4*sj3);
IkReal x11692=(cj3*gconst4);
IkReal x11693=((1.0)*x11680);
IkReal x11694=((1.0)*cj1*cj2);
IkReal x11695=(cj3*x11679);
IkReal x11696=(cj3*x11680);
IkReal x11697=((1.0)*gconst5*x11679);
IkReal x11698=((1.0)*sj3*x11679);
evalcond[0]=((((-1.0)*r22*x11693))+(((-1.0)*r20*x11697))+((x11679*x11688)));
evalcond[1]=(cj0+((x11679*x11683))+(((-1.0)*r12*x11693))+(((-1.0)*r10*x11697)));
evalcond[2]=((((-1.0)*x11686))+(((-1.0)*r02*x11693))+((x11679*x11687))+(((-1.0)*r00*x11697)));
evalcond[3]=(x11685+x11690+((r20*x11691))+((r21*x11681))+((x11688*x11696))+((r22*x11695))+(((-1.0)*r20*x11682*x11693)));
evalcond[4]=((((-1.0)*r22*x11698))+x11684+(((-1.0)*sj3*x11688*x11693))+((r20*x11680*x11681))+((r20*x11692))+((r21*x11682))+(((-1.0)*x11694)));
evalcond[5]=(((x11687*x11696))+((r00*x11691))+((cj0*x11684))+(((-1.0)*cj1*cj2*x11689))+(((-1.0)*r00*x11682*x11693))+((r02*x11695))+((r01*x11681)));
evalcond[6]=(((sj0*x11684))+((r11*x11681))+((x11683*x11696))+((r12*x11695))+((r10*x11691))+(((-1.0)*cj1*cj2*x11686))+(((-1.0)*r10*x11682*x11693)));
evalcond[7]=((((-1.0)*x11689*x11690))+((r00*x11680*x11681))+(((-1.0)*sj3*x11687*x11693))+((r00*x11692))+(((-1.0)*r02*x11698))+(((-1.0)*x11685*x11689))+((r01*x11682)));
evalcond[8]=((((-1.0)*x11686*x11690))+((r11*x11682))+(((-1.0)*x11685*x11686))+((r10*x11692))+(((-1.0)*sj3*x11683*x11693))+(((-1.0)*r12*x11698))+((r10*x11680*x11681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11699=((1.0)*gconst5);
CheckValue<IkReal> x11700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11699))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11700.valid){
continue;
}
CheckValue<IkReal> x11701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11699))+(((-1.0)*gconst4*r10)))),-1);
if(!x11701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11700.value)+(((1.5707963267949)*(x11701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11702=IKsin(j4);
IkReal x11703=IKcos(j4);
IkReal x11704=(gconst5*sj3);
IkReal x11705=(cj3*gconst5);
IkReal x11706=(gconst4*r11);
IkReal x11707=(sj1*sj2);
IkReal x11708=(cj2*sj1);
IkReal x11709=((1.0)*sj0);
IkReal x11710=(gconst4*r01);
IkReal x11711=(gconst4*r21);
IkReal x11712=((1.0)*cj0);
IkReal x11713=(cj1*sj2);
IkReal x11714=(gconst4*sj3);
IkReal x11715=(cj3*gconst4);
IkReal x11716=((1.0)*x11703);
IkReal x11717=((1.0)*cj1*cj2);
IkReal x11718=(cj3*x11702);
IkReal x11719=(cj3*x11703);
IkReal x11720=((1.0)*gconst5*x11702);
IkReal x11721=((1.0)*sj3*x11702);
evalcond[0]=(((x11702*x11711))+(((-1.0)*r20*x11720))+(((-1.0)*r22*x11716)));
evalcond[1]=(cj0+(((-1.0)*r10*x11720))+((x11702*x11706))+(((-1.0)*r12*x11716)));
evalcond[2]=(((x11702*x11710))+(((-1.0)*r00*x11720))+(((-1.0)*x11709))+(((-1.0)*r02*x11716)));
evalcond[3]=(x11713+x11708+(((-1.0)*r20*x11705*x11716))+((r21*x11704))+((r20*x11714))+((x11711*x11719))+((r22*x11718)));
evalcond[4]=(x11707+(((-1.0)*x11717))+((r20*x11703*x11704))+((r21*x11705))+((r20*x11715))+(((-1.0)*r22*x11721))+(((-1.0)*sj3*x11711*x11716)));
evalcond[5]=(((r00*x11714))+((r01*x11704))+((r02*x11718))+(((-1.0)*r00*x11705*x11716))+((cj0*x11707))+(((-1.0)*cj1*cj2*x11712))+((x11710*x11719)));
evalcond[6]=(((x11706*x11719))+(((-1.0)*r10*x11705*x11716))+((r10*x11714))+((sj0*x11707))+(((-1.0)*cj1*cj2*x11709))+((r11*x11704))+((r12*x11718)));
evalcond[7]=((((-1.0)*sj3*x11710*x11716))+(((-1.0)*x11708*x11712))+((r00*x11715))+((r01*x11705))+(((-1.0)*x11712*x11713))+((r00*x11703*x11704))+(((-1.0)*r02*x11721)));
evalcond[8]=(((r10*x11703*x11704))+(((-1.0)*x11709*x11713))+(((-1.0)*sj3*x11706*x11716))+(((-1.0)*r12*x11721))+((r10*x11715))+((r11*x11705))+(((-1.0)*x11708*x11709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11722=((1.0)*gconst5);
CheckValue<IkReal> x11723=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11722)))),-1);
if(!x11723.valid){
continue;
}
CheckValue<IkReal> x11724 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11722))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11723.value)))+(x11724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11725=IKsin(j4);
IkReal x11726=IKcos(j4);
IkReal x11727=(gconst5*sj3);
IkReal x11728=(cj3*gconst5);
IkReal x11729=(gconst4*r11);
IkReal x11730=(sj1*sj2);
IkReal x11731=(cj2*sj1);
IkReal x11732=((1.0)*sj0);
IkReal x11733=(gconst4*r01);
IkReal x11734=(gconst4*r21);
IkReal x11735=((1.0)*cj0);
IkReal x11736=(cj1*sj2);
IkReal x11737=(gconst4*sj3);
IkReal x11738=(cj3*gconst4);
IkReal x11739=((1.0)*x11726);
IkReal x11740=((1.0)*cj1*cj2);
IkReal x11741=(cj3*x11725);
IkReal x11742=(cj3*x11726);
IkReal x11743=((1.0)*gconst5*x11725);
IkReal x11744=((1.0)*sj3*x11725);
evalcond[0]=((((-1.0)*r20*x11743))+(((-1.0)*r22*x11739))+((x11725*x11734)));
evalcond[1]=(cj0+(((-1.0)*r10*x11743))+(((-1.0)*r12*x11739))+((x11725*x11729)));
evalcond[2]=((((-1.0)*r00*x11743))+(((-1.0)*x11732))+(((-1.0)*r02*x11739))+((x11725*x11733)));
evalcond[3]=(x11736+x11731+((x11734*x11742))+((r20*x11737))+((r22*x11741))+(((-1.0)*r20*x11728*x11739))+((r21*x11727)));
evalcond[4]=(x11730+(((-1.0)*x11740))+((r20*x11738))+(((-1.0)*r22*x11744))+((r20*x11726*x11727))+((r21*x11728))+(((-1.0)*sj3*x11734*x11739)));
evalcond[5]=(((r00*x11737))+((cj0*x11730))+((r01*x11727))+((x11733*x11742))+(((-1.0)*cj1*cj2*x11735))+((r02*x11741))+(((-1.0)*r00*x11728*x11739)));
evalcond[6]=(((sj0*x11730))+((x11729*x11742))+(((-1.0)*r10*x11728*x11739))+(((-1.0)*cj1*cj2*x11732))+((r10*x11737))+((r11*x11727))+((r12*x11741)));
evalcond[7]=(((r00*x11738))+((r01*x11728))+(((-1.0)*x11731*x11735))+((r00*x11726*x11727))+(((-1.0)*r02*x11744))+(((-1.0)*x11735*x11736))+(((-1.0)*sj3*x11733*x11739)));
evalcond[8]=(((r10*x11726*x11727))+(((-1.0)*sj3*x11729*x11739))+(((-1.0)*r12*x11744))+((r10*x11738))+(((-1.0)*x11731*x11732))+(((-1.0)*x11732*x11736))+((r11*x11728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11745=((-1.0)*r10);
IkReal x11747 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11747)==0){
continue;
}
IkReal x11746=pow(x11747,-0.5);
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11745),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11748.value));
IkReal gconst7=(r11*x11746);
IkReal gconst8=(x11745*x11746);
CheckValue<IkReal> x11749 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11749.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11749.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11750=((-1.0)*r10);
IkReal x11751=x11746;
CheckValue<IkReal> x11753 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11750),IKFAST_ATAN2_MAGTHRESH);
if(!x11753.valid){
continue;
}
IkReal x11752=((-1.0)*(x11753.value));
sj5=gconst7;
cj5=gconst8;
j5=x11752;
IkReal gconst6=x11752;
IkReal gconst7=(r11*x11751);
IkReal gconst8=(x11750*x11751);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11754=((1.0)*sj0);
IkReal x11755=((1.0)*gconst7);
CheckValue<IkReal> x11756 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11754))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst7*r11*x11754))+((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11755))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11756.valid){
continue;
}
CheckValue<IkReal> x11757=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x11755)))),-1);
if(!x11757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11756.value)+(((1.5707963267949)*(x11757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11758=IKsin(j4);
IkReal x11759=IKcos(j4);
IkReal x11760=(gconst7*sj3);
IkReal x11761=(cj3*gconst8);
IkReal x11762=(cj3*gconst7);
IkReal x11763=(sj1*sj2);
IkReal x11764=(cj2*sj1);
IkReal x11765=((1.0)*sj0);
IkReal x11766=((1.0)*cj0);
IkReal x11767=(gconst8*sj3);
IkReal x11768=(cj1*sj2);
IkReal x11769=((1.0)*x11759);
IkReal x11770=((1.0)*x11758);
IkReal x11771=((1.0)*cj1*cj2);
IkReal x11772=(cj3*x11758);
IkReal x11773=(gconst7*x11758);
IkReal x11774=(x11759*x11767);
evalcond[0]=((((-1.0)*gconst8*r20*x11770))+(((-1.0)*r22*x11769))+((r21*x11773)));
evalcond[1]=((((-1.0)*r12*x11769))+cj0+((r11*x11773))+(((-1.0)*gconst8*r10*x11770)));
evalcond[2]=((((-1.0)*r02*x11769))+((r01*x11773))+(((-1.0)*x11765))+(((-1.0)*gconst8*r00*x11770)));
evalcond[3]=(x11768+x11764+((r20*x11760))+((r21*x11759*x11762))+(((-1.0)*r20*x11761*x11769))+((r22*x11772))+((r21*x11767)));
evalcond[4]=(x11763+((r20*x11762))+((r20*x11774))+(((-1.0)*r21*x11760*x11769))+(((-1.0)*r22*sj3*x11770))+(((-1.0)*x11771))+((r21*x11761)));
evalcond[5]=(((cj0*x11763))+(((-1.0)*cj1*cj2*x11766))+(((-1.0)*r00*x11761*x11769))+((r01*x11759*x11762))+((r02*x11772))+((r00*x11760))+((r01*x11767)));
evalcond[6]=((((-1.0)*cj1*cj2*x11765))+((r11*x11767))+((r12*x11772))+((r10*x11760))+((r11*x11759*x11762))+(((-1.0)*r10*x11761*x11769))+((sj0*x11763)));
evalcond[7]=((((-1.0)*x11766*x11768))+(((-1.0)*r02*sj3*x11770))+(((-1.0)*x11764*x11766))+(((-1.0)*r01*x11760*x11769))+((r00*x11774))+((r00*x11762))+((r01*x11761)));
evalcond[8]=((((-1.0)*r11*x11760*x11769))+((r11*x11761))+((r10*x11774))+(((-1.0)*x11765*x11768))+((r10*x11762))+(((-1.0)*r12*sj3*x11770))+(((-1.0)*x11764*x11765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11775=((1.0)*gconst8);
CheckValue<IkReal> x11776 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11776.valid){
continue;
}
CheckValue<IkReal> x11777=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11775)))),-1);
if(!x11777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11776.value)+(((1.5707963267949)*(x11777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11778=IKsin(j4);
IkReal x11779=IKcos(j4);
IkReal x11780=(gconst7*sj3);
IkReal x11781=(cj3*gconst8);
IkReal x11782=(cj3*gconst7);
IkReal x11783=(sj1*sj2);
IkReal x11784=(cj2*sj1);
IkReal x11785=((1.0)*sj0);
IkReal x11786=((1.0)*cj0);
IkReal x11787=(gconst8*sj3);
IkReal x11788=(cj1*sj2);
IkReal x11789=((1.0)*x11779);
IkReal x11790=((1.0)*x11778);
IkReal x11791=((1.0)*cj1*cj2);
IkReal x11792=(cj3*x11778);
IkReal x11793=(gconst7*x11778);
IkReal x11794=(x11779*x11787);
evalcond[0]=((((-1.0)*gconst8*r20*x11790))+(((-1.0)*r22*x11789))+((r21*x11793)));
evalcond[1]=(cj0+((r11*x11793))+(((-1.0)*r12*x11789))+(((-1.0)*gconst8*r10*x11790)));
evalcond[2]=((((-1.0)*gconst8*r00*x11790))+((r01*x11793))+(((-1.0)*r02*x11789))+(((-1.0)*x11785)));
evalcond[3]=(((r21*x11787))+x11784+x11788+((r20*x11780))+(((-1.0)*r20*x11781*x11789))+((r21*x11779*x11782))+((r22*x11792)));
evalcond[4]=(((r21*x11781))+x11783+(((-1.0)*r21*x11780*x11789))+((r20*x11782))+((r20*x11794))+(((-1.0)*r22*sj3*x11790))+(((-1.0)*x11791)));
evalcond[5]=(((cj0*x11783))+(((-1.0)*cj1*cj2*x11786))+((r02*x11792))+(((-1.0)*r00*x11781*x11789))+((r01*x11779*x11782))+((r00*x11780))+((r01*x11787)));
evalcond[6]=(((r12*x11792))+((r11*x11787))+((r11*x11779*x11782))+(((-1.0)*cj1*cj2*x11785))+((r10*x11780))+((sj0*x11783))+(((-1.0)*r10*x11781*x11789)));
evalcond[7]=((((-1.0)*r02*sj3*x11790))+(((-1.0)*x11786*x11788))+(((-1.0)*x11784*x11786))+(((-1.0)*r01*x11780*x11789))+((r00*x11794))+((r00*x11782))+((r01*x11781)));
evalcond[8]=(((r11*x11781))+(((-1.0)*x11785*x11788))+((r10*x11794))+((r10*x11782))+(((-1.0)*x11784*x11785))+(((-1.0)*r11*x11780*x11789))+(((-1.0)*r12*sj3*x11790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11795=((-1.0)*r11);
IkReal x11797 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11797)==0){
continue;
}
IkReal x11796=pow(x11797,-0.5);
CheckValue<IkReal> x11798 = IKatan2WithCheck(IkReal(x11795),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11798.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11798.value))));
IkReal gconst10=(x11795*x11796);
IkReal gconst11=((1.0)*r10*x11796);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11799.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11800=((-1.0)*r11);
CheckValue<IkReal> x11803 = IKatan2WithCheck(IkReal(x11800),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11803.valid){
continue;
}
IkReal x11801=((1.0)*(x11803.value));
IkReal x11802=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11801)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11801)));
IkReal gconst10=(x11800*x11802);
IkReal gconst11=((1.0)*r10*x11802);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11804=((-1.0)*r11);
CheckValue<IkReal> x11807 = IKatan2WithCheck(IkReal(x11804),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11807.valid){
continue;
}
IkReal x11805=((1.0)*(x11807.value));
IkReal x11806=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11805)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11805)));
IkReal gconst10=(x11804*x11806);
IkReal gconst11=((1.0)*r10*x11806);
IkReal x11808=r12*r12;
IkReal x11809=((1.0)*sj0);
IkReal x11810=(cj0*r02);
IkReal x11811=x11796;
j4eval[0]=((IKabs(((((-1.0)*x11810))+(((-1.0)*r12*x11809)))))+(IKabs(((((-1.0)*x11809*x11811))+((r12*x11810*x11811))+((sj0*x11808*x11811))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11812=((-1.0)*r11);
CheckValue<IkReal> x11815 = IKatan2WithCheck(IkReal(x11812),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11815.valid){
continue;
}
IkReal x11813=((1.0)*(x11815.value));
IkReal x11814=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11813)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11813)));
IkReal gconst10=(x11812*x11814);
IkReal gconst11=((1.0)*r10*x11814);
IkReal x11816=((1.0)*cj3);
CheckValue<IkReal> x11821=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11821.valid){
continue;
}
IkReal x11817=x11821.value;
IkReal x11818=(cj3*x11817);
IkReal x11819=(x11816*x11817);
IkReal x11820=((((-1.0)*x11819*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11818))+(((-1.0)*x11816*(r22*r22)))+(((-1.0)*x11819*(r10*r10)*(r20*r20))));
j4eval[0]=x11820;
j4eval[1]=IKsign(x11820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11822=((-1.0)*r11);
CheckValue<IkReal> x11825 = IKatan2WithCheck(IkReal(x11822),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11825.valid){
continue;
}
IkReal x11823=((1.0)*(x11825.value));
IkReal x11824=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11823)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11823)));
IkReal gconst10=(x11822*x11824);
IkReal gconst11=((1.0)*r10*x11824);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11826=((-1.0)*r11);
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(x11826),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
IkReal x11827=((1.0)*(x11829.value));
IkReal x11828=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11827)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11827)));
IkReal gconst10=(x11826*x11828);
IkReal gconst11=((1.0)*r10*x11828);
IkReal x11830=r12*r12;
IkReal x11831=((1.0)*sj0);
IkReal x11832=(cj0*r02);
IkReal x11833=x11796;
j4eval[0]=((IKabs(((((-1.0)*r12*x11831))+(((-1.0)*x11832)))))+(IKabs((((r12*x11832*x11833))+(((-1.0)*x11831*x11833))+((sj0*x11830*x11833))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11834=((-1.0)*r11);
CheckValue<IkReal> x11837 = IKatan2WithCheck(IkReal(x11834),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11837.valid){
continue;
}
IkReal x11835=((1.0)*(x11837.value));
IkReal x11836=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11835)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11835)));
IkReal gconst10=(x11834*x11836);
IkReal gconst11=((1.0)*r10*x11836);
IkReal x11838=r12*r12;
IkReal x11839=(cj1*cj2*r22);
IkReal x11840=(r22*sj1*sj2);
CheckValue<IkReal> x11844=IKPowWithIntegerCheck(((-1.0)+x11838),-1);
if(!x11844.valid){
continue;
}
IkReal x11841=x11844.value;
if((((1.0)+(((-1.0)*x11838)))) < -0.00001)
continue;
IkReal x11842=IKsqrt(((1.0)+(((-1.0)*x11838))));
IkReal x11843=(r12*x11841*x11842);
j4eval[0]=((IKabs(((((-1.0)*x11839))+x11840)))+(IKabs((((x11839*x11843))+(((-1.0)*x11840*x11843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11845=((-1.0)*r11);
CheckValue<IkReal> x11848 = IKatan2WithCheck(IkReal(x11845),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11848.valid){
continue;
}
IkReal x11846=((1.0)*(x11848.value));
IkReal x11847=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11846)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11846)));
IkReal gconst10=(x11845*x11847);
IkReal gconst11=((1.0)*r10*x11847);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11849=((-1.0)*r11);
CheckValue<IkReal> x11852 = IKatan2WithCheck(IkReal(x11849),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11852.valid){
continue;
}
IkReal x11850=((1.0)*(x11852.value));
IkReal x11851=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11850)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11850)));
IkReal gconst10=(x11849*x11851);
IkReal gconst11=((1.0)*r10*x11851);
IkReal x11853=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11857=IKPowWithIntegerCheck(x11853,-1);
if(!x11857.valid){
continue;
}
IkReal x11854=x11857.value;
IkReal x11855=((1.0)*x11854);
IkReal x11856=((((-1.0)*(r02*r02)))+(((-1.0)*x11855*(r01*r01)*(r11*r11)))+(((-1.0)*x11855*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11854)));
j4eval[0]=x11856;
j4eval[1]=IKsign(x11856);
j4eval[2]=r02;
j4eval[3]=x11853;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11858=((-1.0)*r11);
CheckValue<IkReal> x11861 = IKatan2WithCheck(IkReal(x11858),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11861.valid){
continue;
}
IkReal x11859=((1.0)*(x11861.value));
IkReal x11860=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11859)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11859)));
IkReal gconst10=(x11858*x11860);
IkReal gconst11=((1.0)*r10*x11860);
IkReal x11862=r12*r12;
IkReal x11863=(cj1*cj2*r22);
IkReal x11864=(r22*sj1*sj2);
CheckValue<IkReal> x11868=IKPowWithIntegerCheck(((-1.0)+x11862),-1);
if(!x11868.valid){
continue;
}
IkReal x11865=x11868.value;
if((((1.0)+(((-1.0)*x11862)))) < -0.00001)
continue;
IkReal x11866=IKsqrt(((1.0)+(((-1.0)*x11862))));
IkReal x11867=(r12*x11865*x11866);
j4eval[0]=((IKabs((((x11863*x11867))+(((-1.0)*x11864*x11867)))))+(IKabs(((((-1.0)*x11863))+x11864))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11869=(gconst10*r21);
IkReal x11870=(gconst11*r20);
IkReal x11871=(sj1*sj2);
IkReal x11872=(cj1*cj2);
CheckValue<IkReal> x11873 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11872))+((r22*x11871)))),IkReal((((x11869*x11871))+((x11870*x11872))+(((-1.0)*x11869*x11872))+(((-1.0)*x11870*x11871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11873.valid){
continue;
}
CheckValue<IkReal> x11874=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11869*x11870))+(r22*r22)+(x11870*x11870)+(x11869*x11869))),-1);
if(!x11874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11873.value)+(((1.5707963267949)*(x11874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11875=IKsin(j4);
IkReal x11876=IKcos(j4);
IkReal x11877=((1.0)*cj2);
IkReal x11878=((1.0)*x11876);
IkReal x11879=(gconst10*x11875);
IkReal x11880=((1.0)*x11875);
IkReal x11881=(gconst11*x11876);
IkReal x11882=(gconst11*x11880);
evalcond[0]=((((-1.0)*r22*x11878))+((r21*x11879))+(((-1.0)*r20*x11882)));
evalcond[1]=(((r11*x11879))+(((-1.0)*r12*x11878))+(((-1.0)*r10*x11882)));
evalcond[2]=(((r00*x11881))+(((-1.0)*gconst10*r01*x11878))+(((-1.0)*r02*x11880)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11882))+((r01*x11879))+(((-1.0)*r02*x11878)));
evalcond[4]=((((-1.0)*gconst10*r21*x11878))+(((-1.0)*cj1*x11877))+(((-1.0)*r22*x11880))+((sj1*sj2))+((r20*x11881)));
evalcond[5]=((((-1.0)*sj1*x11877))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11878))+((r10*x11881))+(((-1.0)*r12*x11880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11883=(gconst11*r00);
IkReal x11884=(gconst10*r01);
CheckValue<IkReal> x11885 = IKatan2WithCheck(IkReal(((((-1.0)*x11884))+x11883)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11885.valid){
continue;
}
CheckValue<IkReal> x11886=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11883*x11883)))+(((2.0)*x11883*x11884))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11884*x11884))))),-1);
if(!x11886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11885.value)+(((1.5707963267949)*(x11886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11887=IKsin(j4);
IkReal x11888=IKcos(j4);
IkReal x11889=((1.0)*cj2);
IkReal x11890=((1.0)*x11888);
IkReal x11891=(gconst10*x11887);
IkReal x11892=((1.0)*x11887);
IkReal x11893=(gconst11*x11888);
IkReal x11894=(gconst11*x11892);
evalcond[0]=((((-1.0)*r20*x11894))+(((-1.0)*r22*x11890))+((r21*x11891)));
evalcond[1]=((((-1.0)*r10*x11894))+(((-1.0)*r12*x11890))+((r11*x11891)));
evalcond[2]=((((-1.0)*gconst10*r01*x11890))+((r00*x11893))+(((-1.0)*r02*x11892)));
evalcond[3]=((-1.0)+((r01*x11891))+(((-1.0)*r00*x11894))+(((-1.0)*r02*x11890)));
evalcond[4]=((((-1.0)*r22*x11892))+((sj1*sj2))+((r20*x11893))+(((-1.0)*cj1*x11889))+(((-1.0)*gconst10*r21*x11890)));
evalcond[5]=((((-1.0)*gconst10*r11*x11890))+(((-1.0)*r12*x11892))+(((-1.0)*cj1*sj2))+((r10*x11893))+(((-1.0)*sj1*x11889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11895 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11895.valid){
continue;
}
CheckValue<IkReal> x11896=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11895.value)+(((1.5707963267949)*(x11896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11897=IKsin(j4);
IkReal x11898=IKcos(j4);
IkReal x11899=((1.0)*cj2);
IkReal x11900=((1.0)*x11898);
IkReal x11901=(gconst10*x11897);
IkReal x11902=((1.0)*x11897);
IkReal x11903=(gconst11*x11898);
IkReal x11904=(gconst11*x11902);
evalcond[0]=((((-1.0)*r22*x11900))+(((-1.0)*r20*x11904))+((r21*x11901)));
evalcond[1]=((((-1.0)*r12*x11900))+(((-1.0)*r10*x11904))+((r11*x11901)));
evalcond[2]=((((-1.0)*r02*x11902))+((r00*x11903))+(((-1.0)*gconst10*r01*x11900)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11900))+(((-1.0)*r00*x11904))+((r01*x11901)));
evalcond[4]=((((-1.0)*cj1*x11899))+(((-1.0)*r22*x11902))+(((-1.0)*gconst10*r21*x11900))+((sj1*sj2))+((r20*x11903)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x11902))+(((-1.0)*gconst10*r11*x11900))+((r10*x11903))+(((-1.0)*sj1*x11899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11905=((-1.0)*r11);
CheckValue<IkReal> x11908 = IKatan2WithCheck(IkReal(x11905),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11908.valid){
continue;
}
IkReal x11906=((1.0)*(x11908.value));
IkReal x11907=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11906)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11906)));
IkReal gconst10=(x11905*x11907);
IkReal gconst11=((1.0)*r10*x11907);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11909=((-1.0)*r11);
CheckValue<IkReal> x11912 = IKatan2WithCheck(IkReal(x11909),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11912.valid){
continue;
}
IkReal x11910=((1.0)*(x11912.value));
IkReal x11911=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11910)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11910)));
IkReal gconst10=(x11909*x11911);
IkReal gconst11=((1.0)*r10*x11911);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11913=((-1.0)*r11);
CheckValue<IkReal> x11916 = IKatan2WithCheck(IkReal(x11913),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11916.valid){
continue;
}
IkReal x11914=((1.0)*(x11916.value));
IkReal x11915=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11914)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11914)));
IkReal gconst10=(x11913*x11915);
IkReal gconst11=((1.0)*r10*x11915);
IkReal x11917=r12*r12;
CheckValue<IkReal> x11920=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11917))),-1);
if(!x11920.valid){
continue;
}
IkReal x11918=x11920.value;
IkReal x11919=((1.0)*x11918);
j4eval[0]=IKsign((x11917+((x11919*(r10*r10*r10*r10)))+(((2.0)*x11918*(r10*r10)*(r11*r11)))+((x11919*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11921=(cj2*sj1);
IkReal x11922=(gconst10*r11);
IkReal x11923=(gconst11*r10);
IkReal x11924=(cj1*sj2);
CheckValue<IkReal> x11925 = IKatan2WithCheck(IkReal((((r12*x11921))+((r12*x11924)))),IkReal(((((-1.0)*x11923*x11924))+((x11921*x11922))+(((-1.0)*x11921*x11923))+((x11922*x11924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11925.valid){
continue;
}
CheckValue<IkReal> x11926=IKPowWithIntegerCheck(IKsign(((x11923*x11923)+(r12*r12)+(x11922*x11922)+(((-2.0)*x11922*x11923)))),-1);
if(!x11926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11925.value)+(((1.5707963267949)*(x11926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11927=IKsin(j4);
IkReal x11928=IKcos(j4);
IkReal x11929=((1.0)*x11928);
IkReal x11930=(gconst10*x11927);
IkReal x11931=((1.0)*x11927);
IkReal x11932=(gconst11*x11928);
IkReal x11933=(gconst11*x11931);
evalcond[0]=(((r21*x11930))+(((-1.0)*r22*x11929))+(((-1.0)*r20*x11933)));
evalcond[1]=((((-1.0)*r10*x11933))+((r11*x11930))+(((-1.0)*r12*x11929)));
evalcond[2]=((((-1.0)*r02*x11931))+((r00*x11932))+(((-1.0)*gconst10*r01*x11929)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11929))+(((-1.0)*r00*x11933))+((r01*x11930)));
evalcond[4]=(((cj2*sj1))+((r10*x11932))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11929))+(((-1.0)*r12*x11931)));
evalcond[5]=(((r20*x11932))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11931))+(((-1.0)*gconst10*r21*x11929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11934=(gconst11*r00);
IkReal x11935=(gconst10*r01);
CheckValue<IkReal> x11936 = IKatan2WithCheck(IkReal((x11934+(((-1.0)*x11935)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11936.valid){
continue;
}
CheckValue<IkReal> x11937=IKPowWithIntegerCheck(IKsign(((x11935*x11935)+(x11934*x11934)+(((-2.0)*x11934*x11935))+(r02*r02))),-1);
if(!x11937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11936.value)+(((1.5707963267949)*(x11937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11938=IKsin(j4);
IkReal x11939=IKcos(j4);
IkReal x11940=((1.0)*x11939);
IkReal x11941=(gconst10*x11938);
IkReal x11942=((1.0)*x11938);
IkReal x11943=(gconst11*x11939);
IkReal x11944=(gconst11*x11942);
evalcond[0]=((((-1.0)*r20*x11944))+(((-1.0)*r22*x11940))+((r21*x11941)));
evalcond[1]=(((r11*x11941))+(((-1.0)*r12*x11940))+(((-1.0)*r10*x11944)));
evalcond[2]=((((-1.0)*r02*x11942))+((r00*x11943))+(((-1.0)*gconst10*r01*x11940)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11940))+(((-1.0)*r00*x11944))+((r01*x11941)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11940))+((cj1*sj2))+((r10*x11943))+(((-1.0)*r12*x11942)));
evalcond[5]=((((-1.0)*gconst10*r21*x11940))+((r20*x11943))+(((-1.0)*r22*x11942))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11945=((1.0)*gconst11);
CheckValue<IkReal> x11946 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11946.valid){
continue;
}
CheckValue<IkReal> x11947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11945))+(((-1.0)*gconst10*r20)))),-1);
if(!x11947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11946.value)+(((1.5707963267949)*(x11947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11948=IKsin(j4);
IkReal x11949=IKcos(j4);
IkReal x11950=((1.0)*x11949);
IkReal x11951=(gconst10*x11948);
IkReal x11952=((1.0)*x11948);
IkReal x11953=(gconst11*x11949);
IkReal x11954=(gconst11*x11952);
evalcond[0]=((((-1.0)*r20*x11954))+((r21*x11951))+(((-1.0)*r22*x11950)));
evalcond[1]=((((-1.0)*r12*x11950))+((r11*x11951))+(((-1.0)*r10*x11954)));
evalcond[2]=((((-1.0)*gconst10*r01*x11950))+(((-1.0)*r02*x11952))+((r00*x11953)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11950))+(((-1.0)*r00*x11954))+((r01*x11951)));
evalcond[4]=((((-1.0)*r12*x11952))+((cj2*sj1))+(((-1.0)*gconst10*r11*x11950))+((cj1*sj2))+((r10*x11953)));
evalcond[5]=((((-1.0)*gconst10*r21*x11950))+((r20*x11953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11955=((-1.0)*r11);
IkReal x11956=((-1.0)*r10);
CheckValue<IkReal> x11958 = IKatan2WithCheck(IkReal(x11955),IkReal(x11956),IKFAST_ATAN2_MAGTHRESH);
if(!x11958.valid){
continue;
}
IkReal x11957=((1.0)*(x11958.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11957)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11956);
rxp1_1=(px*r21);
rxp1_2=(px*x11955);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11957)));
IkReal gconst10=x11955;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11959=((-1.0)*r11);
IkReal x11960=((-1.0)*r10);
CheckValue<IkReal> x11962 = IKatan2WithCheck(IkReal(x11959),IkReal(x11960),IKFAST_ATAN2_MAGTHRESH);
if(!x11962.valid){
continue;
}
IkReal x11961=((1.0)*(x11962.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11961)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11960);
rxp1_1=(px*r21);
rxp1_2=(px*x11959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11961)));
IkReal gconst10=x11959;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11963=((-1.0)*r11);
IkReal x11964=((-1.0)*r10);
CheckValue<IkReal> x11966 = IKatan2WithCheck(IkReal(x11963),IkReal(x11964),IKFAST_ATAN2_MAGTHRESH);
if(!x11966.valid){
continue;
}
IkReal x11965=((1.0)*(x11966.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11965)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11964);
rxp1_1=(px*r21);
rxp1_2=(px*x11963);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11965)));
IkReal gconst10=x11963;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11969=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11969.valid){
continue;
}
IkReal x11967=x11969.value;
IkReal x11968=(sj0*x11967);
cj4array[0]=(((cj1*sj2*x11968))+((cj2*sj1*x11968)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11970=IKsin(j4);
IkReal x11971=IKcos(j4);
IkReal x11972=(gconst10*r21);
IkReal x11973=(gconst11*r20);
IkReal x11974=((1.0)*x11970);
IkReal x11975=((1.0)*x11971);
evalcond[0]=((-1.0)*r02*x11970);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11975)));
evalcond[2]=(((x11970*x11972))+(((-1.0)*x11973*x11974)));
evalcond[3]=((((-1.0)*gconst11*r10*x11974))+((gconst10*r11*x11970)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11971*x11973))+(((-1.0)*x11972*x11975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11977=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11977.valid){
continue;
}
IkReal x11976=x11977.value;
cj4array[0]=(((cj1*cj2*x11976))+(((-1.0)*sj1*sj2*x11976)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11978=IKsin(j4);
IkReal x11979=IKcos(j4);
IkReal x11980=((1.0)*sj0);
IkReal x11981=(gconst10*x11978);
IkReal x11982=((1.0)*x11979);
IkReal x11983=((1.0)*gconst11*x11978);
evalcond[0]=((-1.0)*r02*x11978);
evalcond[1]=((((-1.0)*r02*x11982))+(((-1.0)*x11980)));
evalcond[2]=(((r21*x11981))+(((-1.0)*r20*x11983)));
evalcond[3]=((((-1.0)*r10*x11983))+((r11*x11981)));
evalcond[4]=((((-1.0)*gconst10*r11*x11982))+(((-1.0)*cj2*sj1*x11980))+(((-1.0)*cj1*sj2*x11980))+((gconst11*r10*x11979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11984=IKPowWithIntegerCheck(r02,-1);
if(!x11984.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11984.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11985=IKsin(j4);
IkReal x11986=IKcos(j4);
IkReal x11987=(gconst10*r21);
IkReal x11988=((1.0)*sj0);
IkReal x11989=(gconst10*r11);
IkReal x11990=(gconst11*x11986);
IkReal x11991=((1.0)*x11986);
IkReal x11992=((1.0)*gconst11*x11985);
evalcond[0]=((-1.0)*r02*x11985);
evalcond[1]=(((x11985*x11987))+(((-1.0)*r20*x11992)));
evalcond[2]=((((-1.0)*r10*x11992))+((x11985*x11989)));
evalcond[3]=(((r20*x11990))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11987*x11991)));
evalcond[4]=((((-1.0)*x11989*x11991))+(((-1.0)*cj2*sj1*x11988))+(((-1.0)*cj1*sj2*x11988))+((r10*x11990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11993=((1.0)*gconst11);
CheckValue<IkReal> x11994 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11993))+((gconst10*r11*sj0))+(((-1.0)*cj0*r00*x11993))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11994.valid){
continue;
}
CheckValue<IkReal> x11995=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11994.value)+(((1.5707963267949)*(x11995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11996=IKsin(j4);
IkReal x11997=IKcos(j4);
IkReal x11998=((1.0)*cj2);
IkReal x11999=((1.0)*sj0);
IkReal x12000=(cj1*sj2);
IkReal x12001=(gconst10*x11996);
IkReal x12002=((1.0)*x11997);
IkReal x12003=(gconst11*x11997);
IkReal x12004=((1.0)*x11996);
IkReal x12005=(gconst11*x12004);
evalcond[0]=(((r21*x12001))+(((-1.0)*r20*x12005)));
evalcond[1]=((((-1.0)*r10*x12005))+cj0+(((-1.0)*r12*x12002))+((r11*x12001)));
evalcond[2]=(((r20*x12003))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12002))+(((-1.0)*cj1*x11998)));
evalcond[3]=((((-1.0)*r00*x12005))+((r01*x12001))+(((-1.0)*r02*x12002))+(((-1.0)*x11999)));
evalcond[4]=((((-1.0)*gconst10*r01*x12002))+((r00*x12003))+(((-1.0)*r02*x12004))+(((-1.0)*cj0*sj1*x11998))+(((-1.0)*cj0*x12000)));
evalcond[5]=((((-1.0)*x11999*x12000))+(((-1.0)*gconst10*r11*x12002))+(((-1.0)*r12*x12004))+((r10*x12003))+(((-1.0)*sj0*sj1*x11998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12006=(gconst10*r21);
IkReal x12007=(gconst11*r20);
IkReal x12008=(sj1*sj2);
IkReal x12009=(cj1*cj2);
CheckValue<IkReal> x12010 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12009))+((r22*x12008)))),IkReal(((((-1.0)*x12007*x12008))+((x12006*x12008))+(((-1.0)*x12006*x12009))+((x12007*x12009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12010.valid){
continue;
}
CheckValue<IkReal> x12011=IKPowWithIntegerCheck(IKsign(((x12007*x12007)+(r22*r22)+(x12006*x12006)+(((-2.0)*x12006*x12007)))),-1);
if(!x12011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12010.value)+(((1.5707963267949)*(x12011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12012=IKsin(j4);
IkReal x12013=IKcos(j4);
IkReal x12014=((1.0)*cj2);
IkReal x12015=((1.0)*sj0);
IkReal x12016=(cj1*sj2);
IkReal x12017=((1.0)*x12013);
IkReal x12018=(gconst10*x12012);
IkReal x12019=((1.0)*x12012);
IkReal x12020=(gconst11*x12013);
IkReal x12021=(gconst11*x12019);
evalcond[0]=((((-1.0)*r20*x12021))+((r21*x12018))+(((-1.0)*r22*x12017)));
evalcond[1]=(cj0+((r11*x12018))+(((-1.0)*r12*x12017))+(((-1.0)*r10*x12021)));
evalcond[2]=((((-1.0)*r02*x12017))+(((-1.0)*r00*x12021))+(((-1.0)*x12015))+((r01*x12018)));
evalcond[3]=((((-1.0)*gconst10*r21*x12017))+((r20*x12020))+(((-1.0)*cj1*x12014))+((sj1*sj2))+(((-1.0)*r22*x12019)));
evalcond[4]=((((-1.0)*r02*x12019))+(((-1.0)*cj0*sj1*x12014))+(((-1.0)*cj0*x12016))+((r00*x12020))+(((-1.0)*gconst10*r01*x12017)));
evalcond[5]=((((-1.0)*r12*x12019))+(((-1.0)*x12015*x12016))+(((-1.0)*sj0*sj1*x12014))+(((-1.0)*gconst10*r11*x12017))+((r10*x12020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12022=((1.0)*sj0);
IkReal x12023=((1.0)*gconst10);
CheckValue<IkReal> x12024 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12022)))),IkReal(((((-1.0)*gconst10*r11*x12022))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12024.valid){
continue;
}
CheckValue<IkReal> x12025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12023))+(((-1.0)*gconst11*r21)))),-1);
if(!x12025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12024.value)+(((1.5707963267949)*(x12025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12026=IKsin(j4);
IkReal x12027=IKcos(j4);
IkReal x12028=((1.0)*cj2);
IkReal x12029=((1.0)*sj0);
IkReal x12030=(cj1*sj2);
IkReal x12031=((1.0)*x12027);
IkReal x12032=(gconst10*x12026);
IkReal x12033=((1.0)*x12026);
IkReal x12034=(gconst11*x12027);
IkReal x12035=(gconst11*x12033);
evalcond[0]=((((-1.0)*r20*x12035))+((r21*x12032))+(((-1.0)*r22*x12031)));
evalcond[1]=(cj0+(((-1.0)*r12*x12031))+((r11*x12032))+(((-1.0)*r10*x12035)));
evalcond[2]=((((-1.0)*x12029))+((r01*x12032))+(((-1.0)*r02*x12031))+(((-1.0)*r00*x12035)));
evalcond[3]=((((-1.0)*cj1*x12028))+((r20*x12034))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12031))+(((-1.0)*r22*x12033)));
evalcond[4]=((((-1.0)*gconst10*r01*x12031))+((r00*x12034))+(((-1.0)*r02*x12033))+(((-1.0)*cj0*sj1*x12028))+(((-1.0)*cj0*x12030)));
evalcond[5]=((((-1.0)*x12029*x12030))+(((-1.0)*gconst10*r11*x12031))+(((-1.0)*r12*x12033))+((r10*x12034))+(((-1.0)*sj0*sj1*x12028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12036=((1.0)*gconst11);
CheckValue<IkReal> x12037=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12036)))),-1);
if(!x12037.valid){
continue;
}
CheckValue<IkReal> x12038 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12037.value)))+(x12038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12039=IKsin(j4);
IkReal x12040=IKcos(j4);
IkReal x12041=((1.0)*cj2);
IkReal x12042=((1.0)*sj0);
IkReal x12043=(cj1*sj2);
IkReal x12044=((1.0)*x12040);
IkReal x12045=(gconst10*x12039);
IkReal x12046=((1.0)*x12039);
IkReal x12047=(gconst11*x12040);
IkReal x12048=(gconst11*x12046);
evalcond[0]=((((-1.0)*r20*x12048))+((r21*x12045))+(((-1.0)*r22*x12044)));
evalcond[1]=((((-1.0)*r12*x12044))+cj0+((r11*x12045))+(((-1.0)*r10*x12048)));
evalcond[2]=((((-1.0)*r00*x12048))+(((-1.0)*x12042))+((r01*x12045))+(((-1.0)*r02*x12044)));
evalcond[3]=((((-1.0)*cj1*x12041))+((sj1*sj2))+((r20*x12047))+(((-1.0)*gconst10*r21*x12044))+(((-1.0)*r22*x12046)));
evalcond[4]=((((-1.0)*cj0*x12043))+(((-1.0)*gconst10*r01*x12044))+((r00*x12047))+(((-1.0)*r02*x12046))+(((-1.0)*cj0*sj1*x12041)));
evalcond[5]=(((r10*x12047))+(((-1.0)*r12*x12046))+(((-1.0)*sj0*sj1*x12041))+(((-1.0)*gconst10*r11*x12044))+(((-1.0)*x12042*x12043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12049=((-1.0)*r11);
CheckValue<IkReal> x12052 = IKatan2WithCheck(IkReal(x12049),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12052.valid){
continue;
}
IkReal x12050=((1.0)*(x12052.value));
IkReal x12051=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12050)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12050)));
IkReal gconst10=(x12049*x12051);
IkReal gconst11=((1.0)*r10*x12051);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12053=((-1.0)*r11);
CheckValue<IkReal> x12056 = IKatan2WithCheck(IkReal(x12053),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12056.valid){
continue;
}
IkReal x12054=((1.0)*(x12056.value));
IkReal x12055=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12054)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12054)));
IkReal gconst10=(x12053*x12055);
IkReal gconst11=((1.0)*r10*x12055);
IkReal x12057=r12*r12;
IkReal x12058=((1.0)*sj0);
IkReal x12059=(cj0*r02);
IkReal x12060=x11796;
j4eval[0]=((IKabs(((((-1.0)*x12059))+(((-1.0)*r12*x12058)))))+(IKabs((((sj0*x12057*x12060))+((r12*x12059*x12060))+(((-1.0)*x12058*x12060))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12061=((-1.0)*r11);
CheckValue<IkReal> x12064 = IKatan2WithCheck(IkReal(x12061),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12064.valid){
continue;
}
IkReal x12062=((1.0)*(x12064.value));
IkReal x12063=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12062)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12062)));
IkReal gconst10=(x12061*x12063);
IkReal gconst11=((1.0)*r10*x12063);
IkReal x12065=r12*r12;
IkReal x12066=((1.0)+(((-1.0)*x12065)));
IkReal x12067=(r22*sj1*sj2);
IkReal x12068=(cj1*cj2*r22);
CheckValue<IkReal> x12075=IKPowWithIntegerCheck(x12066,-1);
if(!x12075.valid){
continue;
}
IkReal x12069=x12075.value;
CheckValue<IkReal> x12076=IKPowWithIntegerCheck(((-1.0)+x12065),-1);
if(!x12076.valid){
continue;
}
IkReal x12070=x12076.value;
IkReal x12071=((1.0)*x12069);
if((x12066) < -0.00001)
continue;
IkReal x12072=IKsqrt(x12066);
IkReal x12073=(r12*x12070*x12072);
IkReal x12074=((((-1.0)*x12071*(r11*r11)*(r21*r21)))+(((-1.0)*x12071*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12069)));
j4eval[0]=x12074;
j4eval[1]=((IKabs(((((-1.0)*x12068))+x12067)))+(IKabs((((x12068*x12073))+(((-1.0)*x12067*x12073))))));
j4eval[2]=IKsign(x12074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12077=((-1.0)*r11);
CheckValue<IkReal> x12080 = IKatan2WithCheck(IkReal(x12077),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12080.valid){
continue;
}
IkReal x12078=((1.0)*(x12080.value));
IkReal x12079=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12078)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12078)));
IkReal gconst10=(x12077*x12079);
IkReal gconst11=((1.0)*r10*x12079);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12081=((-1.0)*r11);
CheckValue<IkReal> x12084 = IKatan2WithCheck(IkReal(x12081),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12084.valid){
continue;
}
IkReal x12082=((1.0)*(x12084.value));
IkReal x12083=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12082)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12082)));
IkReal gconst10=(x12081*x12083);
IkReal gconst11=((1.0)*r10*x12083);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12085=((-1.0)*r11);
CheckValue<IkReal> x12088 = IKatan2WithCheck(IkReal(x12085),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12088.valid){
continue;
}
IkReal x12086=((1.0)*(x12088.value));
IkReal x12087=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12086)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12086)));
IkReal gconst10=(x12085*x12087);
IkReal gconst11=((1.0)*r10*x12087);
IkReal x12089=(cj1*r02*sj2);
IkReal x12090=(cj2*r02*sj1);
IkReal x12091=x11796;
IkReal x12092=(r12*x12091);
j4eval[0]=((IKabs((x12090+x12089)))+(IKabs((((x12089*x12092))+((x12090*x12092))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12093=(cj1*sj2);
IkReal x12094=(cj2*sj1);
IkReal x12095=(gconst11*r00);
IkReal x12096=((1.0)*gconst10*r01);
CheckValue<IkReal> x12097=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12097.valid){
continue;
}
CheckValue<IkReal> x12098 = IKatan2WithCheck(IkReal(((((-1.0)*x12093*x12096))+((x12094*x12095))+(((-1.0)*x12094*x12096))+((x12093*x12095)))),IkReal((((r02*x12094))+((r02*x12093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12097.value)))+(x12098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12099=IKcos(j4);
IkReal x12100=IKsin(j4);
IkReal x12101=((1.0)*cj2);
IkReal x12102=((1.0)*x12099);
IkReal x12103=(gconst10*x12099);
IkReal x12104=(gconst10*x12100);
IkReal x12105=((1.0)*gconst11*x12100);
evalcond[0]=(((r02*x12100))+((r01*x12103))+(((-1.0)*gconst11*r00*x12102)));
evalcond[1]=((((-1.0)*r22*x12102))+(((-1.0)*r20*x12105))+((r21*x12104)));
evalcond[2]=((((-1.0)*r12*x12102))+(((-1.0)*r10*x12105))+((r11*x12104)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12105))+((r01*x12104))+(((-1.0)*r02*x12102)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x12101))+(((-1.0)*gconst11*r20*x12102))+((r22*x12100))+((r21*x12103)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12101))+((r12*x12100))+((r11*x12103))+(((-1.0)*gconst11*r10*x12102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12106=(gconst10*r01);
IkReal x12107=(gconst11*r00);
CheckValue<IkReal> x12108=IKPowWithIntegerCheck(IKsign(((x12107*x12107)+(((-2.0)*x12106*x12107))+(x12106*x12106)+(r02*r02))),-1);
if(!x12108.valid){
continue;
}
CheckValue<IkReal> x12109 = IKatan2WithCheck(IkReal((x12106+(((-1.0)*x12107)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12108.value)))+(x12109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12110=IKcos(j4);
IkReal x12111=IKsin(j4);
IkReal x12112=((1.0)*cj2);
IkReal x12113=((1.0)*x12110);
IkReal x12114=(gconst10*x12110);
IkReal x12115=(gconst10*x12111);
IkReal x12116=((1.0)*gconst11*x12111);
evalcond[0]=(((r02*x12111))+((r01*x12114))+(((-1.0)*gconst11*r00*x12113)));
evalcond[1]=((((-1.0)*r22*x12113))+(((-1.0)*r20*x12116))+((r21*x12115)));
evalcond[2]=((((-1.0)*r12*x12113))+(((-1.0)*r10*x12116))+((r11*x12115)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12116))+((r01*x12115))+(((-1.0)*r02*x12113)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst11*r20*x12113))+(((-1.0)*cj1*x12112))+((r21*x12114))+((r22*x12111)));
evalcond[5]=((((-1.0)*gconst11*r10*x12113))+(((-1.0)*sj1*x12112))+(((-1.0)*cj1*sj2))+((r12*x12111))+((r11*x12114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12117 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12117.valid){
continue;
}
CheckValue<IkReal> x12118=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12117.value)+(((1.5707963267949)*(x12118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12119=IKcos(j4);
IkReal x12120=IKsin(j4);
IkReal x12121=((1.0)*cj2);
IkReal x12122=((1.0)*x12119);
IkReal x12123=(gconst10*x12119);
IkReal x12124=(gconst10*x12120);
IkReal x12125=((1.0)*gconst11*x12120);
evalcond[0]=(((r01*x12123))+(((-1.0)*gconst11*r00*x12122))+((r02*x12120)));
evalcond[1]=((((-1.0)*r20*x12125))+((r21*x12124))+(((-1.0)*r22*x12122)));
evalcond[2]=((((-1.0)*r12*x12122))+(((-1.0)*r10*x12125))+((r11*x12124)));
evalcond[3]=((-1.0)+((r01*x12124))+(((-1.0)*r02*x12122))+(((-1.0)*r00*x12125)));
evalcond[4]=(((r21*x12123))+(((-1.0)*cj1*x12121))+((sj1*sj2))+((r22*x12120))+(((-1.0)*gconst11*r20*x12122)));
evalcond[5]=((((-1.0)*sj1*x12121))+((r12*x12120))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12122))+((r11*x12123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12126=((-1.0)*r11);
CheckValue<IkReal> x12129 = IKatan2WithCheck(IkReal(x12126),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12129.valid){
continue;
}
IkReal x12127=((1.0)*(x12129.value));
IkReal x12128=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12127)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12127)));
IkReal gconst10=(x12126*x12128);
IkReal gconst11=((1.0)*r10*x12128);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12130=((-1.0)*r11);
CheckValue<IkReal> x12133 = IKatan2WithCheck(IkReal(x12130),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12133.valid){
continue;
}
IkReal x12131=((1.0)*(x12133.value));
IkReal x12132=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12131)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12131)));
IkReal gconst10=(x12130*x12132);
IkReal gconst11=((1.0)*r10*x12132);
IkReal x12134=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12138=IKPowWithIntegerCheck(x12134,-1);
if(!x12138.valid){
continue;
}
IkReal x12135=x12138.value;
IkReal x12136=((1.0)*x12135);
IkReal x12137=((((-1.0)*x12136*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12135))+(((-1.0)*x12136*(r00*r00)*(r10*r10))));
j4eval[0]=x12137;
j4eval[1]=r02;
j4eval[2]=x12134;
j4eval[3]=IKsign(x12137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12139=((-1.0)*r11);
CheckValue<IkReal> x12142 = IKatan2WithCheck(IkReal(x12139),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12142.valid){
continue;
}
IkReal x12140=((1.0)*(x12142.value));
IkReal x12141=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12140)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12140)));
IkReal gconst10=(x12139*x12141);
IkReal gconst11=((1.0)*r10*x12141);
IkReal x12143=r12*r12;
IkReal x12144=((1.0)*r02);
IkReal x12145=(cj1*sj2);
IkReal x12146=(cj2*sj1);
CheckValue<IkReal> x12150=IKPowWithIntegerCheck(((-1.0)+x12143),-1);
if(!x12150.valid){
continue;
}
IkReal x12147=x12150.value;
if((((1.0)+(((-1.0)*x12143)))) < -0.00001)
continue;
IkReal x12148=IKsqrt(((1.0)+(((-1.0)*x12143))));
IkReal x12149=(r12*x12147*x12148);
j4eval[0]=((IKabs(((((-1.0)*x12144*x12145*x12149))+(((-1.0)*x12144*x12146*x12149)))))+(IKabs(((((-1.0)*x12144*x12146))+(((-1.0)*x12144*x12145))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12151=(cj1*sj2);
IkReal x12152=(gconst10*r01);
IkReal x12153=(cj2*sj1);
IkReal x12154=((1.0)*r02);
IkReal x12155=((1.0)*gconst11*r00);
CheckValue<IkReal> x12156=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12156.valid){
continue;
}
CheckValue<IkReal> x12157 = IKatan2WithCheck(IkReal(((((-1.0)*x12153*x12155))+((x12151*x12152))+(((-1.0)*x12151*x12155))+((x12152*x12153)))),IkReal(((((-1.0)*x12153*x12154))+(((-1.0)*x12151*x12154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12156.value)))+(x12157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12158=IKcos(j4);
IkReal x12159=IKsin(j4);
IkReal x12160=((1.0)*x12158);
IkReal x12161=(gconst10*x12158);
IkReal x12162=(gconst10*x12159);
IkReal x12163=((1.0)*gconst11*x12159);
evalcond[0]=((((-1.0)*gconst11*r00*x12160))+((r02*x12159))+((r01*x12161)));
evalcond[1]=(((r21*x12162))+(((-1.0)*r22*x12160))+(((-1.0)*r20*x12163)));
evalcond[2]=((((-1.0)*r10*x12163))+((r11*x12162))+(((-1.0)*r12*x12160)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12163))+((r01*x12162))+(((-1.0)*r02*x12160)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12160))+((cj1*sj2))+((r12*x12159))+((r11*x12161)));
evalcond[5]=(((r21*x12161))+((r22*x12159))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12164=(gconst10*r01);
IkReal x12165=(gconst11*r00);
CheckValue<IkReal> x12166=IKPowWithIntegerCheck(IKsign(((((2.0)*x12164*x12165))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12165*x12165)))+(((-1.0)*(x12164*x12164))))),-1);
if(!x12166.valid){
continue;
}
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(((((-1.0)*x12165))+x12164)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12166.value)))+(x12167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12168=IKcos(j4);
IkReal x12169=IKsin(j4);
IkReal x12170=((1.0)*x12168);
IkReal x12171=(gconst10*x12168);
IkReal x12172=(gconst10*x12169);
IkReal x12173=((1.0)*gconst11*x12169);
evalcond[0]=(((r02*x12169))+(((-1.0)*gconst11*r00*x12170))+((r01*x12171)));
evalcond[1]=(((r21*x12172))+(((-1.0)*r22*x12170))+(((-1.0)*r20*x12173)));
evalcond[2]=((((-1.0)*r10*x12173))+((r11*x12172))+(((-1.0)*r12*x12170)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12173))+((r01*x12172))+(((-1.0)*r02*x12170)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12170))+((cj1*sj2))+((r11*x12171))+((r12*x12169)));
evalcond[5]=(((r21*x12171))+(((-1.0)*gconst11*r20*x12170))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12174=((1.0)*gconst11);
CheckValue<IkReal> x12175 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12175.valid){
continue;
}
CheckValue<IkReal> x12176=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12174)))),-1);
if(!x12176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12175.value)+(((1.5707963267949)*(x12176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12177=IKcos(j4);
IkReal x12178=IKsin(j4);
IkReal x12179=((1.0)*x12177);
IkReal x12180=(gconst10*x12177);
IkReal x12181=(gconst10*x12178);
IkReal x12182=((1.0)*gconst11*x12178);
evalcond[0]=((((-1.0)*gconst11*r00*x12179))+((r01*x12180))+((r02*x12178)));
evalcond[1]=((((-1.0)*r22*x12179))+((r21*x12181))+(((-1.0)*r20*x12182)));
evalcond[2]=(((r11*x12181))+(((-1.0)*r10*x12182))+(((-1.0)*r12*x12179)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12182))+((r01*x12181))+(((-1.0)*r02*x12179)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12179))+((r11*x12180))+((cj1*sj2))+((r12*x12178)));
evalcond[5]=((((-1.0)*gconst11*r20*x12179))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12180))+((r22*x12178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12183=((-1.0)*r11);
IkReal x12184=((-1.0)*r10);
CheckValue<IkReal> x12186 = IKatan2WithCheck(IkReal(x12183),IkReal(x12184),IKFAST_ATAN2_MAGTHRESH);
if(!x12186.valid){
continue;
}
IkReal x12185=((1.0)*(x12186.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12185)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12184);
rxp1_1=(px*r21);
rxp1_2=(px*x12183);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12185)));
IkReal gconst10=x12183;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12187=((-1.0)*r11);
IkReal x12188=((-1.0)*r10);
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal(x12187),IkReal(x12188),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
IkReal x12189=((1.0)*(x12190.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12189)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12188);
rxp1_1=(px*r21);
rxp1_2=(px*x12187);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12189)));
IkReal gconst10=x12187;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12191=((-1.0)*r11);
IkReal x12192=((-1.0)*r10);
CheckValue<IkReal> x12194 = IKatan2WithCheck(IkReal(x12191),IkReal(x12192),IKFAST_ATAN2_MAGTHRESH);
if(!x12194.valid){
continue;
}
IkReal x12193=((1.0)*(x12194.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12193)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12192);
rxp1_1=(px*r21);
rxp1_2=(px*x12191);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12193)));
IkReal gconst10=x12191;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12197=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12197.valid){
continue;
}
IkReal x12195=x12197.value;
IkReal x12196=(sj0*x12195);
cj4array[0]=(((cj2*sj1*x12196))+((cj1*sj2*x12196)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12198=IKsin(j4);
IkReal x12199=IKcos(j4);
IkReal x12200=(gconst10*r21);
IkReal x12201=((1.0)*x12199);
IkReal x12202=((1.0)*gconst11*x12198);
evalcond[0]=(r02*x12198);
evalcond[1]=((((-1.0)*r02*x12201))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x12202))+((x12198*x12200)));
evalcond[3]=(((gconst10*r11*x12198))+(((-1.0)*r10*x12202)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12201))+((x12199*x12200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12204=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12204.valid){
continue;
}
IkReal x12203=x12204.value;
cj4array[0]=(((cj1*cj2*x12203))+(((-1.0)*sj1*sj2*x12203)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12205=IKsin(j4);
IkReal x12206=IKcos(j4);
IkReal x12207=((1.0)*sj0);
IkReal x12208=(gconst10*x12205);
IkReal x12209=((1.0)*x12206);
IkReal x12210=((1.0)*gconst11*x12205);
evalcond[0]=(r02*x12205);
evalcond[1]=((((-1.0)*r02*x12209))+(((-1.0)*x12207)));
evalcond[2]=(((r21*x12208))+(((-1.0)*r20*x12210)));
evalcond[3]=((((-1.0)*r10*x12210))+((r11*x12208)));
evalcond[4]=((((-1.0)*gconst11*r10*x12209))+(((-1.0)*cj2*sj1*x12207))+(((-1.0)*cj1*sj2*x12207))+((gconst10*r11*x12206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12211=IKPowWithIntegerCheck(r02,-1);
if(!x12211.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12211.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12212=IKsin(j4);
IkReal x12213=IKcos(j4);
IkReal x12214=(gconst10*r21);
IkReal x12215=((1.0)*cj1);
IkReal x12216=(gconst10*r11);
IkReal x12217=((1.0)*gconst11*x12212);
IkReal x12218=((1.0)*gconst11*x12213);
evalcond[0]=(r02*x12212);
evalcond[1]=(((x12212*x12214))+(((-1.0)*r20*x12217)));
evalcond[2]=(((x12212*x12216))+(((-1.0)*r10*x12217)));
evalcond[3]=(((x12213*x12214))+((sj1*sj2))+(((-1.0)*cj2*x12215))+(((-1.0)*r20*x12218)));
evalcond[4]=(((x12213*x12216))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12215))+(((-1.0)*r10*x12218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12219=((1.0)*gconst11);
CheckValue<IkReal> x12220 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12219))+(((-1.0)*r10*sj0*x12219))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12220.valid){
continue;
}
CheckValue<IkReal> x12221=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12220.value)+(((1.5707963267949)*(x12221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12222=IKsin(j4);
IkReal x12223=IKcos(j4);
IkReal x12224=((1.0)*gconst11);
IkReal x12225=((1.0)*cj2);
IkReal x12226=((1.0)*sj0);
IkReal x12227=(cj1*sj2);
IkReal x12228=(gconst10*x12223);
IkReal x12229=(gconst10*x12222);
IkReal x12230=((1.0)*x12223);
evalcond[0]=(((r21*x12229))+(((-1.0)*r20*x12222*x12224)));
evalcond[1]=(((r11*x12229))+(((-1.0)*r12*x12230))+cj0+(((-1.0)*r10*x12222*x12224)));
evalcond[2]=((((-1.0)*cj1*x12225))+((sj1*sj2))+((r21*x12228))+(((-1.0)*r20*x12223*x12224)));
evalcond[3]=((((-1.0)*r00*x12222*x12224))+(((-1.0)*x12226))+(((-1.0)*r02*x12230))+((r01*x12229)));
evalcond[4]=(((r02*x12222))+(((-1.0)*r00*x12223*x12224))+((r01*x12228))+(((-1.0)*cj0*sj1*x12225))+(((-1.0)*cj0*x12227)));
evalcond[5]=(((r11*x12228))+(((-1.0)*sj0*sj1*x12225))+(((-1.0)*x12226*x12227))+(((-1.0)*r10*x12223*x12224))+((r12*x12222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12231=(gconst10*r21);
IkReal x12232=(gconst11*r20);
IkReal x12233=(sj1*sj2);
IkReal x12234=(cj1*cj2);
CheckValue<IkReal> x12235=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12232*x12232)))+(((2.0)*x12231*x12232))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12231*x12231))))),-1);
if(!x12235.valid){
continue;
}
CheckValue<IkReal> x12236 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12234))+((r22*x12233)))),IkReal(((((-1.0)*x12232*x12233))+((x12231*x12233))+((x12232*x12234))+(((-1.0)*x12231*x12234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12235.value)))+(x12236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12237=IKsin(j4);
IkReal x12238=IKcos(j4);
IkReal x12239=((1.0)*cj2);
IkReal x12240=((1.0)*sj0);
IkReal x12241=(cj1*sj2);
IkReal x12242=((1.0)*x12238);
IkReal x12243=(gconst10*x12238);
IkReal x12244=(gconst10*x12237);
IkReal x12245=((1.0)*gconst11*x12237);
evalcond[0]=((((-1.0)*r20*x12245))+(((-1.0)*r22*x12242))+((r21*x12244)));
evalcond[1]=((((-1.0)*r12*x12242))+(((-1.0)*r10*x12245))+cj0+((r11*x12244)));
evalcond[2]=(((r01*x12244))+(((-1.0)*x12240))+(((-1.0)*r02*x12242))+(((-1.0)*r00*x12245)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x12239))+((r22*x12237))+(((-1.0)*gconst11*r20*x12242))+((r21*x12243)));
evalcond[4]=((((-1.0)*cj0*sj1*x12239))+(((-1.0)*gconst11*r00*x12242))+((r01*x12243))+((r02*x12237))+(((-1.0)*cj0*x12241)));
evalcond[5]=(((r11*x12243))+((r12*x12237))+(((-1.0)*gconst11*r10*x12242))+(((-1.0)*sj0*sj1*x12239))+(((-1.0)*x12240*x12241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12246=((1.0)*sj0);
IkReal x12247=((1.0)*gconst10);
CheckValue<IkReal> x12248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12247))+(((-1.0)*gconst11*r21)))),-1);
if(!x12248.valid){
continue;
}
CheckValue<IkReal> x12249 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12246))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12246))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12247))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12248.value)))+(x12249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12250=IKsin(j4);
IkReal x12251=IKcos(j4);
IkReal x12252=((1.0)*cj2);
IkReal x12253=((1.0)*sj0);
IkReal x12254=(cj1*sj2);
IkReal x12255=((1.0)*x12251);
IkReal x12256=(gconst10*x12251);
IkReal x12257=(gconst10*x12250);
IkReal x12258=((1.0)*gconst11*x12250);
evalcond[0]=((((-1.0)*r20*x12258))+((r21*x12257))+(((-1.0)*r22*x12255)));
evalcond[1]=(cj0+(((-1.0)*r12*x12255))+((r11*x12257))+(((-1.0)*r10*x12258)));
evalcond[2]=(((r01*x12257))+(((-1.0)*r02*x12255))+(((-1.0)*x12253))+(((-1.0)*r00*x12258)));
evalcond[3]=((((-1.0)*gconst11*r20*x12255))+((r22*x12250))+((sj1*sj2))+((r21*x12256))+(((-1.0)*cj1*x12252)));
evalcond[4]=((((-1.0)*gconst11*r00*x12255))+(((-1.0)*cj0*sj1*x12252))+((r01*x12256))+(((-1.0)*cj0*x12254))+((r02*x12250)));
evalcond[5]=(((r12*x12250))+((r11*x12256))+(((-1.0)*x12253*x12254))+(((-1.0)*gconst11*r10*x12255))+(((-1.0)*sj0*sj1*x12252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12259=((1.0)*gconst11);
CheckValue<IkReal> x12260 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12259))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12260.valid){
continue;
}
CheckValue<IkReal> x12261=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12259)))),-1);
if(!x12261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12260.value)+(((1.5707963267949)*(x12261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12262=IKsin(j4);
IkReal x12263=IKcos(j4);
IkReal x12264=((1.0)*cj2);
IkReal x12265=((1.0)*sj0);
IkReal x12266=(cj1*sj2);
IkReal x12267=((1.0)*x12263);
IkReal x12268=(gconst10*x12263);
IkReal x12269=(gconst10*x12262);
IkReal x12270=((1.0)*gconst11*x12262);
evalcond[0]=(((r21*x12269))+(((-1.0)*r22*x12267))+(((-1.0)*r20*x12270)));
evalcond[1]=((((-1.0)*r12*x12267))+cj0+((r11*x12269))+(((-1.0)*r10*x12270)));
evalcond[2]=(((r01*x12269))+(((-1.0)*r00*x12270))+(((-1.0)*r02*x12267))+(((-1.0)*x12265)));
evalcond[3]=((((-1.0)*gconst11*r20*x12267))+((sj1*sj2))+((r21*x12268))+(((-1.0)*cj1*x12264))+((r22*x12262)));
evalcond[4]=((((-1.0)*gconst11*r00*x12267))+(((-1.0)*cj0*sj1*x12264))+((r01*x12268))+(((-1.0)*cj0*x12266))+((r02*x12262)));
evalcond[5]=(((r12*x12262))+((r11*x12268))+(((-1.0)*x12265*x12266))+(((-1.0)*gconst11*r10*x12267))+(((-1.0)*sj0*sj1*x12264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12271=((-1.0)*r11);
CheckValue<IkReal> x12274 = IKatan2WithCheck(IkReal(x12271),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12274.valid){
continue;
}
IkReal x12272=((1.0)*(x12274.value));
IkReal x12273=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12272)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12272)));
IkReal gconst10=(x12271*x12273);
IkReal gconst11=((1.0)*r10*x12273);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12275=gconst10*gconst10;
IkReal x12276=gconst11*gconst11;
IkReal x12277=(gconst10*r21);
IkReal x12278=(cj3*r00);
IkReal x12279=(r00*sj3);
IkReal x12280=((1.0)*gconst11);
IkReal x12281=(gconst10*r20);
IkReal x12282=(r01*sj3);
IkReal x12283=(cj3*gconst11*r01);
IkReal x12284=(r21*x12275);
IkReal x12285=(r20*x12276);
CheckValue<IkReal> x12286 = IKatan2WithCheck(IkReal((((r22*x12283))+((gconst10*r22*x12278)))),IkReal(((((-1.0)*x12278*x12280*x12281))+((x12277*x12283))+((x12278*x12284))+(((-1.0)*cj3*r01*x12285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12286.valid){
continue;
}
CheckValue<IkReal> x12287=IKPowWithIntegerCheck(IKsign((((x12279*x12285))+(((-1.0)*x12280*x12281*x12282))+((x12282*x12284))+(((-1.0)*x12277*x12279*x12280))+((r02*r22*sj3)))),-1);
if(!x12287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12286.value)+(((1.5707963267949)*(x12287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12288=IKsin(j4);
IkReal x12289=IKcos(j4);
IkReal x12290=(sj1*sj2);
IkReal x12291=(gconst10*sj3);
IkReal x12292=(cj3*gconst10);
IkReal x12293=(gconst11*r20);
IkReal x12294=(gconst11*r21);
IkReal x12295=(gconst11*r00);
IkReal x12296=(cj3*gconst11);
IkReal x12297=(gconst11*r10);
IkReal x12298=((1.0)*cj1);
IkReal x12299=(cj2*sj1);
IkReal x12300=(gconst11*sj3);
IkReal x12301=(cj2*x12298);
IkReal x12302=((1.0)*x12289);
IkReal x12303=((1.0)*x12288);
IkReal x12304=(gconst10*x12288);
IkReal x12305=(cj3*x12288);
IkReal x12306=(sj3*x12289);
evalcond[0]=(((r21*x12304))+(((-1.0)*x12293*x12303))+(((-1.0)*r22*x12302)));
evalcond[1]=((((-1.0)*x12297*x12303))+((r11*x12304))+(((-1.0)*r12*x12302)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12302))+((r01*x12304))+(((-1.0)*x12295*x12303)));
evalcond[3]=((((-1.0)*cj3*x12295*x12302))+((r01*x12289*x12292))+((r00*x12291))+((r01*x12300))+((r02*x12305)));
evalcond[4]=((((-1.0)*r01*x12291*x12302))+((r01*x12296))+((r00*x12292))+((x12295*x12306))+(((-1.0)*r02*sj3*x12303)));
evalcond[5]=((((-1.0)*cj3*x12293*x12302))+((r20*x12291))+((cj1*sj2))+x12299+((sj3*x12294))+((r22*x12305))+((r21*x12289*x12292)));
evalcond[6]=((((-1.0)*r10*x12296*x12302))+((r10*x12291))+((r11*x12300))+x12290+((r11*x12289*x12292))+((r12*x12305))+(((-1.0)*x12301)));
evalcond[7]=(((x12293*x12306))+(((-1.0)*r22*sj3*x12303))+((r20*x12292))+((cj3*x12294))+x12290+(((-1.0)*r21*x12291*x12302))+(((-1.0)*x12301)));
evalcond[8]=((((-1.0)*r12*sj3*x12303))+((r10*x12292))+((r11*x12296))+(((-1.0)*sj2*x12298))+(((-1.0)*r11*x12291*x12302))+(((-1.0)*x12299))+((x12297*x12306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12307 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12307.valid){
continue;
}
CheckValue<IkReal> x12308=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12307.value)+(((1.5707963267949)*(x12308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12309=IKsin(j4);
IkReal x12310=IKcos(j4);
IkReal x12311=(sj1*sj2);
IkReal x12312=(gconst10*sj3);
IkReal x12313=(cj3*gconst10);
IkReal x12314=(gconst11*r20);
IkReal x12315=(gconst11*r21);
IkReal x12316=(gconst11*r00);
IkReal x12317=(cj3*gconst11);
IkReal x12318=(gconst11*r10);
IkReal x12319=((1.0)*cj1);
IkReal x12320=(cj2*sj1);
IkReal x12321=(gconst11*sj3);
IkReal x12322=(cj2*x12319);
IkReal x12323=((1.0)*x12310);
IkReal x12324=((1.0)*x12309);
IkReal x12325=(gconst10*x12309);
IkReal x12326=(cj3*x12309);
IkReal x12327=(sj3*x12310);
evalcond[0]=((((-1.0)*r22*x12323))+((r21*x12325))+(((-1.0)*x12314*x12324)));
evalcond[1]=((((-1.0)*r12*x12323))+((r11*x12325))+(((-1.0)*x12318*x12324)));
evalcond[2]=((-1.0)+((r01*x12325))+(((-1.0)*x12316*x12324))+(((-1.0)*r02*x12323)));
evalcond[3]=(((r01*x12310*x12313))+((r01*x12321))+((r00*x12312))+(((-1.0)*cj3*x12316*x12323))+((r02*x12326)));
evalcond[4]=(((x12316*x12327))+(((-1.0)*r01*x12312*x12323))+((r00*x12313))+((r01*x12317))+(((-1.0)*r02*sj3*x12324)));
evalcond[5]=((((-1.0)*cj3*x12314*x12323))+((sj3*x12315))+((r21*x12310*x12313))+((cj1*sj2))+x12320+((r22*x12326))+((r20*x12312)));
evalcond[6]=(((r10*x12312))+x12311+(((-1.0)*x12322))+((r12*x12326))+(((-1.0)*r10*x12317*x12323))+((r11*x12321))+((r11*x12310*x12313)));
evalcond[7]=(((x12314*x12327))+x12311+(((-1.0)*x12322))+(((-1.0)*r22*sj3*x12324))+(((-1.0)*r21*x12312*x12323))+((r20*x12313))+((cj3*x12315)));
evalcond[8]=((((-1.0)*sj2*x12319))+(((-1.0)*r11*x12312*x12323))+((r10*x12313))+((r11*x12317))+(((-1.0)*r12*sj3*x12324))+((x12318*x12327))+(((-1.0)*x12320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12328=((-1.0)*r11);
CheckValue<IkReal> x12331 = IKatan2WithCheck(IkReal(x12328),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12331.valid){
continue;
}
IkReal x12329=((1.0)*(x12331.value));
IkReal x12330=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12329)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12329)));
IkReal gconst10=(x12328*x12330);
IkReal gconst11=((1.0)*r10*x12330);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12332=gconst10*gconst10;
IkReal x12333=gconst11*gconst11;
IkReal x12334=(gconst10*r21);
IkReal x12335=(cj3*r00);
IkReal x12336=(r00*sj3);
IkReal x12337=((1.0)*gconst11);
IkReal x12338=(gconst10*r20);
IkReal x12339=(r01*sj3);
IkReal x12340=(cj3*gconst11*r01);
IkReal x12341=(r21*x12332);
IkReal x12342=(r20*x12333);
CheckValue<IkReal> x12343 = IKatan2WithCheck(IkReal((((r22*x12340))+((gconst10*r22*x12335)))),IkReal(((((-1.0)*x12335*x12337*x12338))+((x12335*x12341))+(((-1.0)*cj3*r01*x12342))+((x12334*x12340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12343.valid){
continue;
}
CheckValue<IkReal> x12344=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12337*x12338*x12339))+((x12336*x12342))+(((-1.0)*x12334*x12336*x12337))+((x12339*x12341))+((r02*r22*sj3)))),-1);
if(!x12344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12343.value)+(((1.5707963267949)*(x12344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12345=IKsin(j4);
IkReal x12346=IKcos(j4);
IkReal x12347=(cj2*sj1);
IkReal x12348=(cj1*sj2);
IkReal x12349=(gconst10*sj3);
IkReal x12350=(cj3*gconst10);
IkReal x12351=(gconst11*r20);
IkReal x12352=(gconst11*r21);
IkReal x12353=(gconst11*r00);
IkReal x12354=(sj1*sj2);
IkReal x12355=(cj3*gconst11);
IkReal x12356=(gconst11*r10);
IkReal x12357=(cj1*cj2);
IkReal x12358=(gconst11*sj3);
IkReal x12359=((1.0)*x12346);
IkReal x12360=((1.0)*x12345);
IkReal x12361=(gconst10*x12345);
IkReal x12362=(cj3*x12345);
IkReal x12363=(sj3*x12346);
IkReal x12364=(x12348+x12347);
evalcond[0]=(((r21*x12361))+(((-1.0)*x12351*x12360))+(((-1.0)*r22*x12359)));
evalcond[1]=(((r11*x12361))+(((-1.0)*r12*x12359))+(((-1.0)*x12356*x12360)));
evalcond[2]=((1.0)+(((-1.0)*x12353*x12360))+(((-1.0)*r02*x12359))+((r01*x12361)));
evalcond[3]=((((-1.0)*cj3*x12353*x12359))+((r00*x12349))+((r01*x12358))+((r01*x12346*x12350))+((r02*x12362)));
evalcond[4]=(((x12353*x12363))+(((-1.0)*r02*sj3*x12360))+(((-1.0)*r01*x12349*x12359))+((r01*x12355))+((r00*x12350)));
evalcond[5]=(((r20*x12349))+((r21*x12346*x12350))+x12364+((sj3*x12352))+((r22*x12362))+(((-1.0)*cj3*x12351*x12359)));
evalcond[6]=((((-1.0)*x12354))+(((-1.0)*r10*x12355*x12359))+x12357+((r11*x12358))+((r10*x12349))+((r11*x12346*x12350))+((r12*x12362)));
evalcond[7]=(x12364+(((-1.0)*r11*x12349*x12359))+((r11*x12355))+((x12356*x12363))+((r10*x12350))+(((-1.0)*r12*sj3*x12360)));
evalcond[8]=((((-1.0)*x12357))+((r20*x12350))+x12354+((cj3*x12352))+(((-1.0)*r21*x12349*x12359))+((x12351*x12363))+(((-1.0)*r22*sj3*x12360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12365=((1.0)*gconst11);
CheckValue<IkReal> x12366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12365))+(((-1.0)*gconst10*r20)))),-1);
if(!x12366.valid){
continue;
}
CheckValue<IkReal> x12367 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12366.value)))+(x12367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12368=IKsin(j4);
IkReal x12369=IKcos(j4);
IkReal x12370=(cj2*sj1);
IkReal x12371=(cj1*sj2);
IkReal x12372=(gconst10*sj3);
IkReal x12373=(cj3*gconst10);
IkReal x12374=(gconst11*r20);
IkReal x12375=(gconst11*r21);
IkReal x12376=(gconst11*r00);
IkReal x12377=(sj1*sj2);
IkReal x12378=(cj3*gconst11);
IkReal x12379=(gconst11*r10);
IkReal x12380=(cj1*cj2);
IkReal x12381=(gconst11*sj3);
IkReal x12382=((1.0)*x12369);
IkReal x12383=((1.0)*x12368);
IkReal x12384=(gconst10*x12368);
IkReal x12385=(cj3*x12368);
IkReal x12386=(sj3*x12369);
IkReal x12387=(x12370+x12371);
evalcond[0]=(((r21*x12384))+(((-1.0)*r22*x12382))+(((-1.0)*x12374*x12383)));
evalcond[1]=(((r11*x12384))+(((-1.0)*x12379*x12383))+(((-1.0)*r12*x12382)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12382))+(((-1.0)*x12376*x12383))+((r01*x12384)));
evalcond[3]=(((r02*x12385))+(((-1.0)*cj3*x12376*x12382))+((r01*x12381))+((r01*x12369*x12373))+((r00*x12372)));
evalcond[4]=(((x12376*x12386))+(((-1.0)*r02*sj3*x12383))+(((-1.0)*r01*x12372*x12382))+((r01*x12378))+((r00*x12373)));
evalcond[5]=(((r21*x12369*x12373))+x12387+((sj3*x12375))+(((-1.0)*cj3*x12374*x12382))+((r20*x12372))+((r22*x12385)));
evalcond[6]=(((r11*x12369*x12373))+((r12*x12385))+((r11*x12381))+((r10*x12372))+x12380+(((-1.0)*x12377))+(((-1.0)*r10*x12378*x12382)));
evalcond[7]=(((r11*x12378))+(((-1.0)*r11*x12372*x12382))+((r10*x12373))+x12387+(((-1.0)*r12*sj3*x12383))+((x12379*x12386)));
evalcond[8]=(x12377+(((-1.0)*r22*sj3*x12383))+(((-1.0)*r21*x12372*x12382))+((cj3*x12375))+(((-1.0)*x12380))+((x12374*x12386))+((r20*x12373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12388=((-1.0)*r11);
IkReal x12389=((-1.0)*r10);
CheckValue<IkReal> x12391 = IKatan2WithCheck(IkReal(x12388),IkReal(x12389),IKFAST_ATAN2_MAGTHRESH);
if(!x12391.valid){
continue;
}
IkReal x12390=((1.0)*(x12391.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12390)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12389);
rxp1_1=(px*r21);
rxp1_2=(px*x12388);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12390)));
IkReal gconst10=x12388;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12392=((-1.0)*r11);
IkReal x12393=((-1.0)*r10);
CheckValue<IkReal> x12395 = IKatan2WithCheck(IkReal(x12392),IkReal(x12393),IKFAST_ATAN2_MAGTHRESH);
if(!x12395.valid){
continue;
}
IkReal x12394=((1.0)*(x12395.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12394)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12393);
rxp1_1=(px*r21);
rxp1_2=(px*x12392);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12394)));
IkReal gconst10=x12392;
IkReal gconst11=((1.0)*r10);
IkReal x12396=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x12396))+(((-1.0)*r11*r21*x12396)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12397=((-1.0)*r11);
IkReal x12398=((-1.0)*r10);
CheckValue<IkReal> x12400 = IKatan2WithCheck(IkReal(x12397),IkReal(x12398),IKFAST_ATAN2_MAGTHRESH);
if(!x12400.valid){
continue;
}
IkReal x12399=((1.0)*(x12400.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12399)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12398);
rxp1_1=(px*r21);
rxp1_2=(px*x12397);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12399)));
IkReal gconst10=x12397;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12402=IKPowWithIntegerCheck(r02,-1);
if(!x12402.valid){
continue;
}
IkReal x12401=x12402.value;
CheckValue<IkReal> x12403=IKPowWithIntegerCheck(cj3,-1);
if(!x12403.valid){
continue;
}
if( IKabs((x12401*(x12403.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12401)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12401*(x12403.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12401))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12401*(x12403.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12401));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12404=IKsin(j4);
IkReal x12405=IKcos(j4);
IkReal x12406=(cj3*r10);
IkReal x12407=((1.0)*gconst11);
IkReal x12408=(sj1*sj2);
IkReal x12409=(gconst11*sj3);
IkReal x12410=(cj3*r11);
IkReal x12411=(cj2*sj1);
IkReal x12412=(gconst10*r20);
IkReal x12413=(gconst10*sj3);
IkReal x12414=((1.0)*cj0);
IkReal x12415=((1.0)*sj0);
IkReal x12416=(cj1*sj2);
IkReal x12417=(cj3*r21);
IkReal x12418=((1.0)*cj1*cj2);
IkReal x12419=(r20*x12405);
IkReal x12420=(gconst10*x12404);
IkReal x12421=(gconst10*x12405);
IkReal x12422=(r02*x12404);
IkReal x12423=((1.0)*x12405);
evalcond[0]=((((-1.0)*x12415))+(((-1.0)*r02*x12423)));
evalcond[1]=(((r21*x12420))+(((-1.0)*r20*x12404*x12407)));
evalcond[2]=((((-1.0)*r10*x12404*x12407))+cj0+((r11*x12420)));
evalcond[3]=((((-1.0)*cj1*cj2*x12414))+((cj3*x12422))+((cj0*x12408)));
evalcond[4]=((((-1.0)*x12411*x12414))+(((-1.0)*sj3*x12422))+(((-1.0)*x12414*x12416)));
evalcond[5]=(((sj3*x12412))+(((-1.0)*cj3*x12407*x12419))+((r21*x12409))+((x12417*x12421))+x12411+x12416);
evalcond[6]=(((cj3*x12412))+((gconst11*x12417))+((x12409*x12419))+(((-1.0)*x12418))+(((-1.0)*r21*x12413*x12423))+x12408);
evalcond[7]=(((r10*x12413))+(((-1.0)*cj1*cj2*x12415))+(((-1.0)*x12405*x12406*x12407))+((sj0*x12408))+((x12410*x12421))+((r11*x12409)));
evalcond[8]=(((gconst11*x12410))+(((-1.0)*x12415*x12416))+(((-1.0)*x12411*x12415))+((gconst10*x12406))+((r10*x12405*x12409))+(((-1.0)*r11*x12413*x12423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12424=((1.0)*r20);
IkReal x12425=((1.0)*gconst11);
CheckValue<IkReal> x12426=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12425))),-1);
if(!x12426.valid){
continue;
}
CheckValue<IkReal> x12427=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12424))+((cj3*gconst10*r21))),-1);
if(!x12427.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12426.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12427.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12425))+(((-1.0)*gconst10*sj3*x12424)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12426.value)))+IKsqr(((x12427.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12425))+(((-1.0)*gconst10*sj3*x12424))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12426.value)), ((x12427.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12425))+(((-1.0)*gconst10*sj3*x12424))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12428=IKsin(j4);
IkReal x12429=IKcos(j4);
IkReal x12430=(cj3*r10);
IkReal x12431=((1.0)*gconst11);
IkReal x12432=(sj1*sj2);
IkReal x12433=(gconst11*sj3);
IkReal x12434=(cj3*r11);
IkReal x12435=(cj2*sj1);
IkReal x12436=(gconst10*r20);
IkReal x12437=(gconst10*sj3);
IkReal x12438=((1.0)*cj0);
IkReal x12439=((1.0)*sj0);
IkReal x12440=(cj1*sj2);
IkReal x12441=(cj3*r21);
IkReal x12442=((1.0)*cj1*cj2);
IkReal x12443=(r20*x12429);
IkReal x12444=(gconst10*x12428);
IkReal x12445=(gconst10*x12429);
IkReal x12446=(r02*x12428);
IkReal x12447=((1.0)*x12429);
evalcond[0]=((((-1.0)*r02*x12447))+(((-1.0)*x12439)));
evalcond[1]=(((r21*x12444))+(((-1.0)*r20*x12428*x12431)));
evalcond[2]=(cj0+(((-1.0)*r10*x12428*x12431))+((r11*x12444)));
evalcond[3]=(((cj0*x12432))+((cj3*x12446))+(((-1.0)*cj1*cj2*x12438)));
evalcond[4]=((((-1.0)*x12435*x12438))+(((-1.0)*x12438*x12440))+(((-1.0)*sj3*x12446)));
evalcond[5]=(((r21*x12433))+((x12441*x12445))+(((-1.0)*cj3*x12431*x12443))+x12435+x12440+((sj3*x12436)));
evalcond[6]=((((-1.0)*x12442))+(((-1.0)*r21*x12437*x12447))+((cj3*x12436))+((x12433*x12443))+x12432+((gconst11*x12441)));
evalcond[7]=((((-1.0)*x12429*x12430*x12431))+((sj0*x12432))+((x12434*x12445))+((r10*x12437))+(((-1.0)*cj1*cj2*x12439))+((r11*x12433)));
evalcond[8]=(((r10*x12429*x12433))+((gconst10*x12430))+(((-1.0)*x12435*x12439))+(((-1.0)*r11*x12437*x12447))+(((-1.0)*x12439*x12440))+((gconst11*x12434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12448=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12448.valid){
continue;
}
CheckValue<IkReal> x12449=IKPowWithIntegerCheck(r02,-1);
if(!x12449.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12448.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12449.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12448.value)))+IKsqr(((-1.0)*sj0*(x12449.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12448.value)), ((-1.0)*sj0*(x12449.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12450=IKsin(j4);
IkReal x12451=IKcos(j4);
IkReal x12452=(cj3*r10);
IkReal x12453=((1.0)*gconst11);
IkReal x12454=(sj1*sj2);
IkReal x12455=(gconst11*sj3);
IkReal x12456=(cj3*r11);
IkReal x12457=(cj2*sj1);
IkReal x12458=(gconst10*r20);
IkReal x12459=(gconst10*sj3);
IkReal x12460=((1.0)*cj0);
IkReal x12461=((1.0)*sj0);
IkReal x12462=(cj1*sj2);
IkReal x12463=(cj3*r21);
IkReal x12464=((1.0)*cj1*cj2);
IkReal x12465=(r20*x12451);
IkReal x12466=(gconst10*x12450);
IkReal x12467=(gconst10*x12451);
IkReal x12468=(r02*x12450);
IkReal x12469=((1.0)*x12451);
evalcond[0]=((((-1.0)*r02*x12469))+(((-1.0)*x12461)));
evalcond[1]=(((r21*x12466))+(((-1.0)*r20*x12450*x12453)));
evalcond[2]=((((-1.0)*r10*x12450*x12453))+cj0+((r11*x12466)));
evalcond[3]=(((cj3*x12468))+((cj0*x12454))+(((-1.0)*cj1*cj2*x12460)));
evalcond[4]=((((-1.0)*sj3*x12468))+(((-1.0)*x12460*x12462))+(((-1.0)*x12457*x12460)));
evalcond[5]=(((x12463*x12467))+((sj3*x12458))+(((-1.0)*cj3*x12453*x12465))+x12462+x12457+((r21*x12455)));
evalcond[6]=((((-1.0)*r21*x12459*x12469))+((gconst11*x12463))+((x12455*x12465))+((cj3*x12458))+(((-1.0)*x12464))+x12454);
evalcond[7]=((((-1.0)*x12451*x12452*x12453))+((r11*x12455))+((x12456*x12467))+((sj0*x12454))+(((-1.0)*cj1*cj2*x12461))+((r10*x12459)));
evalcond[8]=((((-1.0)*x12457*x12461))+((r10*x12451*x12455))+(((-1.0)*r11*x12459*x12469))+(((-1.0)*x12461*x12462))+((gconst10*x12452))+((gconst11*x12456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12470=((-1.0)*r11);
CheckValue<IkReal> x12473 = IKatan2WithCheck(IkReal(x12470),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12473.valid){
continue;
}
IkReal x12471=((1.0)*(x12473.value));
IkReal x12472=x11796;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12471)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12471)));
IkReal gconst10=(x12470*x12472);
IkReal gconst11=((1.0)*r10*x12472);
IkReal x12474=r12*r12;
IkReal x12475=((1.0)*sj0);
IkReal x12476=(cj0*r02);
IkReal x12477=x11796;
j4eval[0]=((IKabs((((sj0*x12474*x12477))+((r12*x12476*x12477))+(((-1.0)*x12475*x12477)))))+(IKabs(((((-1.0)*x12476))+(((-1.0)*r12*x12475))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12478=((1.0)*r12);
IkReal x12479=(sj1*sj2);
IkReal x12480=((1.0)*r21);
IkReal x12481=(cj3*gconst11);
IkReal x12482=(r11*sj3);
IkReal x12483=(gconst11*r20);
IkReal x12484=((1.0)*sj3);
IkReal x12485=(cj1*cj2);
IkReal x12486=(gconst10*r21*sj3);
IkReal x12487=(cj3*gconst10*r20);
CheckValue<IkReal> x12488=IKPowWithIntegerCheck(((((-1.0)*x12480*x12482*(gconst10*gconst10)))+((gconst10*x12482*x12483))+(((-1.0)*gconst11*r10*x12483*x12484))+((gconst11*r10*x12486))),-1);
if(!x12488.valid){
continue;
}
CheckValue<IkReal> x12489=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12480))+((sj3*x12483))),-1);
if(!x12489.valid){
continue;
}
if( IKabs(((x12488.value)*(((((-1.0)*cj0*x12483*x12484))+(((-1.0)*x12478*x12487))+((cj0*x12486))+((r12*x12485))+(((-1.0)*r21*x12478*x12481))+(((-1.0)*x12478*x12479)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12489.value)*(((((-1.0)*x12479))+(((-1.0)*x12480*x12481))+(((-1.0)*x12487))+x12485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12488.value)*(((((-1.0)*cj0*x12483*x12484))+(((-1.0)*x12478*x12487))+((cj0*x12486))+((r12*x12485))+(((-1.0)*r21*x12478*x12481))+(((-1.0)*x12478*x12479))))))+IKsqr(((x12489.value)*(((((-1.0)*x12479))+(((-1.0)*x12480*x12481))+(((-1.0)*x12487))+x12485))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12488.value)*(((((-1.0)*cj0*x12483*x12484))+(((-1.0)*x12478*x12487))+((cj0*x12486))+((r12*x12485))+(((-1.0)*r21*x12478*x12481))+(((-1.0)*x12478*x12479))))), ((x12489.value)*(((((-1.0)*x12479))+(((-1.0)*x12480*x12481))+(((-1.0)*x12487))+x12485))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12490=IKsin(j4);
IkReal x12491=IKcos(j4);
IkReal x12492=(cj3*r10);
IkReal x12493=(gconst11*r20);
IkReal x12494=(gconst11*sj3);
IkReal x12495=(sj1*sj2);
IkReal x12496=(cj3*r11);
IkReal x12497=(r10*sj3);
IkReal x12498=(gconst10*r01);
IkReal x12499=(gconst10*sj3);
IkReal x12500=(cj2*sj1);
IkReal x12501=((1.0)*sj0);
IkReal x12502=(cj1*sj2);
IkReal x12503=(gconst10*r21);
IkReal x12504=(cj3*gconst10);
IkReal x12505=(cj3*gconst11);
IkReal x12506=((1.0)*cj0);
IkReal x12507=((1.0)*x12490);
IkReal x12508=((1.0)*cj1*cj2);
IkReal x12509=(gconst11*x12491);
IkReal x12510=(sj3*x12491);
IkReal x12511=(gconst10*x12490);
IkReal x12512=((1.0)*x12491);
IkReal x12513=(cj3*x12491);
IkReal x12514=(cj3*x12490);
evalcond[0]=((((-1.0)*x12493*x12507))+((x12490*x12503)));
evalcond[1]=((((-1.0)*r12*x12512))+cj0+(((-1.0)*gconst11*r10*x12507))+((r11*x12511)));
evalcond[2]=((((-1.0)*gconst11*r00*x12507))+(((-1.0)*x12501))+(((-1.0)*r02*x12512))+((x12490*x12498)));
evalcond[3]=(((r20*x12499))+((r21*x12494))+(((-1.0)*cj3*x12493*x12512))+((x12503*x12513))+x12500+x12502);
evalcond[4]=((((-1.0)*x12508))+((x12493*x12510))+((r20*x12504))+((r21*x12505))+x12495+(((-1.0)*r21*x12499*x12512)));
evalcond[5]=(((r00*x12499))+((r01*x12494))+((x12498*x12513))+(((-1.0)*r00*x12505*x12512))+(((-1.0)*cj1*cj2*x12506))+((cj0*x12495))+((r02*x12514)));
evalcond[6]=(((r12*x12514))+((sj0*x12495))+(((-1.0)*cj1*cj2*x12501))+((gconst10*x12497))+((gconst10*x12491*x12496))+(((-1.0)*x12492*x12509))+((r11*x12494)));
evalcond[7]=((((-1.0)*r02*sj3*x12507))+((r01*x12505))+((r00*x12504))+(((-1.0)*x12498*x12510))+((r00*x12491*x12494))+(((-1.0)*x12500*x12506))+(((-1.0)*x12502*x12506)));
evalcond[8]=(((r10*x12491*x12494))+((gconst11*x12496))+(((-1.0)*x12501*x12502))+(((-1.0)*r12*sj3*x12507))+((gconst10*x12492))+(((-1.0)*x12500*x12501))+(((-1.0)*r11*x12499*x12512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12515=((1.0)*sj0);
IkReal x12516=((1.0)*gconst10);
CheckValue<IkReal> x12517=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12516)))),-1);
if(!x12517.valid){
continue;
}
CheckValue<IkReal> x12518 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12515))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12516))+(((-1.0)*gconst10*r11*x12515))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12517.value)))+(x12518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12519=IKsin(j4);
IkReal x12520=IKcos(j4);
IkReal x12521=(cj3*r10);
IkReal x12522=(gconst11*r20);
IkReal x12523=(gconst11*sj3);
IkReal x12524=(sj1*sj2);
IkReal x12525=(cj3*r11);
IkReal x12526=(r10*sj3);
IkReal x12527=(gconst10*r01);
IkReal x12528=(gconst10*sj3);
IkReal x12529=(cj2*sj1);
IkReal x12530=((1.0)*sj0);
IkReal x12531=(cj1*sj2);
IkReal x12532=(gconst10*r21);
IkReal x12533=(cj3*gconst10);
IkReal x12534=(cj3*gconst11);
IkReal x12535=((1.0)*cj0);
IkReal x12536=((1.0)*x12519);
IkReal x12537=((1.0)*cj1*cj2);
IkReal x12538=(gconst11*x12520);
IkReal x12539=(sj3*x12520);
IkReal x12540=(gconst10*x12519);
IkReal x12541=((1.0)*x12520);
IkReal x12542=(cj3*x12520);
IkReal x12543=(cj3*x12519);
evalcond[0]=(((x12519*x12532))+(((-1.0)*x12522*x12536)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12536))+((r11*x12540))+(((-1.0)*r12*x12541)));
evalcond[2]=((((-1.0)*gconst11*r00*x12536))+(((-1.0)*x12530))+((x12519*x12527))+(((-1.0)*r02*x12541)));
evalcond[3]=((((-1.0)*cj3*x12522*x12541))+((r21*x12523))+((r20*x12528))+((x12532*x12542))+x12529+x12531);
evalcond[4]=(((r20*x12533))+((r21*x12534))+(((-1.0)*r21*x12528*x12541))+x12524+((x12522*x12539))+(((-1.0)*x12537)));
evalcond[5]=(((cj0*x12524))+((x12527*x12542))+(((-1.0)*cj1*cj2*x12535))+((r02*x12543))+((r01*x12523))+(((-1.0)*r00*x12534*x12541))+((r00*x12528)));
evalcond[6]=(((sj0*x12524))+((r12*x12543))+(((-1.0)*x12521*x12538))+((gconst10*x12520*x12525))+(((-1.0)*cj1*cj2*x12530))+((gconst10*x12526))+((r11*x12523)));
evalcond[7]=(((r00*x12533))+((r00*x12520*x12523))+(((-1.0)*x12527*x12539))+(((-1.0)*x12531*x12535))+(((-1.0)*r02*sj3*x12536))+(((-1.0)*x12529*x12535))+((r01*x12534)));
evalcond[8]=(((r10*x12520*x12523))+(((-1.0)*x12530*x12531))+(((-1.0)*r11*x12528*x12541))+((gconst11*x12525))+((gconst10*x12521))+(((-1.0)*r12*sj3*x12536))+(((-1.0)*x12529*x12530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12544=gconst10*gconst10;
IkReal x12545=r21*r21;
IkReal x12546=gconst11*gconst11;
IkReal x12547=r20*r20;
IkReal x12548=((1.0)*cj3);
IkReal x12549=(r20*sj3);
IkReal x12550=(gconst10*gconst11);
IkReal x12551=(cj2*sj1);
IkReal x12552=(gconst10*r21);
IkReal x12553=(cj1*sj2);
IkReal x12554=((1.0)*gconst11*r20);
CheckValue<IkReal> x12555 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x12549))+((r22*x12553))+((r22*x12551)))),IkReal(((((-1.0)*sj3*x12547*x12550))+((r21*x12544*x12549))+((x12551*x12552))+(((-1.0)*x12553*x12554))+((sj3*x12545*x12550))+(((-1.0)*r21*x12546*x12549))+((x12552*x12553))+(((-1.0)*x12551*x12554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12555.valid){
continue;
}
CheckValue<IkReal> x12556=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*r20*r21*x12550))+(((-1.0)*x12546*x12547*x12548))+(((-1.0)*x12544*x12545*x12548))+(((-1.0)*x12548*(r22*r22))))),-1);
if(!x12556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12555.value)+(((1.5707963267949)*(x12556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12557=IKsin(j4);
IkReal x12558=IKcos(j4);
IkReal x12559=(cj3*r10);
IkReal x12560=(gconst11*r20);
IkReal x12561=(gconst11*sj3);
IkReal x12562=(sj1*sj2);
IkReal x12563=(gconst11*r00);
IkReal x12564=(cj3*r11);
IkReal x12565=(gconst10*sj3);
IkReal x12566=(cj2*sj1);
IkReal x12567=(cj3*r01);
IkReal x12568=((1.0)*sj0);
IkReal x12569=(cj1*sj2);
IkReal x12570=(cj3*r21);
IkReal x12571=(cj3*gconst10);
IkReal x12572=((1.0)*cj0);
IkReal x12573=((1.0)*x12558);
IkReal x12574=((1.0)*x12557);
IkReal x12575=((1.0)*cj1*cj2);
IkReal x12576=(cj3*x12557);
IkReal x12577=(gconst10*x12557);
IkReal x12578=(gconst10*x12558);
evalcond[0]=(((r21*x12577))+(((-1.0)*x12560*x12574))+(((-1.0)*r22*x12573)));
evalcond[1]=((((-1.0)*gconst11*r10*x12574))+cj0+(((-1.0)*r12*x12573))+((r11*x12577)));
evalcond[2]=((((-1.0)*x12563*x12574))+(((-1.0)*r02*x12573))+((r01*x12577))+(((-1.0)*x12568)));
evalcond[3]=(((r22*x12576))+((r20*x12565))+((x12570*x12578))+((r21*x12561))+x12569+x12566+(((-1.0)*cj3*x12560*x12573)));
evalcond[4]=(((gconst11*x12570))+(((-1.0)*x12575))+((sj3*x12558*x12560))+(((-1.0)*r22*sj3*x12574))+((r20*x12571))+x12562+(((-1.0)*r21*x12565*x12573)));
evalcond[5]=(((r02*x12576))+((x12567*x12578))+((r01*x12561))+((r00*x12565))+(((-1.0)*cj3*x12563*x12573))+(((-1.0)*cj1*cj2*x12572))+((cj0*x12562)));
evalcond[6]=(((r11*x12561))+(((-1.0)*gconst11*x12559*x12573))+((sj0*x12562))+((r12*x12576))+((r10*x12565))+(((-1.0)*cj1*cj2*x12568))+((x12564*x12578)));
evalcond[7]=((((-1.0)*r01*x12565*x12573))+((gconst11*x12567))+(((-1.0)*x12569*x12572))+((r00*x12571))+(((-1.0)*x12566*x12572))+(((-1.0)*r02*sj3*x12574))+((r00*x12558*x12561)));
evalcond[8]=(((gconst11*x12564))+((gconst10*x12559))+(((-1.0)*x12566*x12568))+(((-1.0)*r11*x12565*x12573))+(((-1.0)*r12*sj3*x12574))+(((-1.0)*x12568*x12569))+((r10*x12558*x12561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12579=((1.0)*sj0);
IkReal x12580=((1.0)*gconst10);
CheckValue<IkReal> x12581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12580))+(((-1.0)*gconst11*r21)))),-1);
if(!x12581.valid){
continue;
}
CheckValue<IkReal> x12582 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12579)))),IkReal(((((-1.0)*gconst10*r11*x12579))+(((-1.0)*cj0*r01*x12580))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12581.value)))+(x12582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12583=IKsin(j4);
IkReal x12584=IKcos(j4);
IkReal x12585=(cj3*r10);
IkReal x12586=(gconst11*r20);
IkReal x12587=(gconst11*sj3);
IkReal x12588=(sj1*sj2);
IkReal x12589=(gconst11*r00);
IkReal x12590=(cj3*r11);
IkReal x12591=(gconst10*sj3);
IkReal x12592=(cj2*sj1);
IkReal x12593=(cj3*r01);
IkReal x12594=((1.0)*sj0);
IkReal x12595=(cj1*sj2);
IkReal x12596=(cj3*r21);
IkReal x12597=(cj3*gconst10);
IkReal x12598=((1.0)*cj0);
IkReal x12599=((1.0)*x12584);
IkReal x12600=((1.0)*x12583);
IkReal x12601=((1.0)*cj1*cj2);
IkReal x12602=(cj3*x12583);
IkReal x12603=(gconst10*x12583);
IkReal x12604=(gconst10*x12584);
evalcond[0]=((((-1.0)*r22*x12599))+((r21*x12603))+(((-1.0)*x12586*x12600)));
evalcond[1]=(cj0+((r11*x12603))+(((-1.0)*r12*x12599))+(((-1.0)*gconst11*r10*x12600)));
evalcond[2]=(((r01*x12603))+(((-1.0)*r02*x12599))+(((-1.0)*x12594))+(((-1.0)*x12589*x12600)));
evalcond[3]=((((-1.0)*cj3*x12586*x12599))+((r21*x12587))+((r22*x12602))+x12595+x12592+((x12596*x12604))+((r20*x12591)));
evalcond[4]=((((-1.0)*r22*sj3*x12600))+((gconst11*x12596))+(((-1.0)*x12601))+((sj3*x12584*x12586))+(((-1.0)*r21*x12591*x12599))+x12588+((r20*x12597)));
evalcond[5]=((((-1.0)*cj3*x12589*x12599))+((r01*x12587))+((cj0*x12588))+((r00*x12591))+(((-1.0)*cj1*cj2*x12598))+((r02*x12602))+((x12593*x12604)));
evalcond[6]=(((sj0*x12588))+(((-1.0)*gconst11*x12585*x12599))+((x12590*x12604))+((r12*x12602))+(((-1.0)*cj1*cj2*x12594))+((r11*x12587))+((r10*x12591)));
evalcond[7]=(((r00*x12597))+((gconst11*x12593))+(((-1.0)*r02*sj3*x12600))+(((-1.0)*x12595*x12598))+(((-1.0)*r01*x12591*x12599))+((r00*x12584*x12587))+(((-1.0)*x12592*x12598)));
evalcond[8]=(((gconst11*x12590))+(((-1.0)*r11*x12591*x12599))+((r10*x12584*x12587))+((gconst10*x12585))+(((-1.0)*x12592*x12594))+(((-1.0)*r12*sj3*x12600))+(((-1.0)*x12594*x12595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12605=((1.0)*gconst11);
CheckValue<IkReal> x12606=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12605)))),-1);
if(!x12606.valid){
continue;
}
CheckValue<IkReal> x12607 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12606.value)))+(x12607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12608=IKsin(j4);
IkReal x12609=IKcos(j4);
IkReal x12610=(cj3*r10);
IkReal x12611=(gconst11*r20);
IkReal x12612=(gconst11*sj3);
IkReal x12613=(sj1*sj2);
IkReal x12614=(gconst11*r00);
IkReal x12615=(cj3*r11);
IkReal x12616=(gconst10*sj3);
IkReal x12617=(cj2*sj1);
IkReal x12618=(cj3*r01);
IkReal x12619=((1.0)*sj0);
IkReal x12620=(cj1*sj2);
IkReal x12621=(cj3*r21);
IkReal x12622=(cj3*gconst10);
IkReal x12623=((1.0)*cj0);
IkReal x12624=((1.0)*x12609);
IkReal x12625=((1.0)*x12608);
IkReal x12626=((1.0)*cj1*cj2);
IkReal x12627=(cj3*x12608);
IkReal x12628=(gconst10*x12608);
IkReal x12629=(gconst10*x12609);
evalcond[0]=((((-1.0)*r22*x12624))+((r21*x12628))+(((-1.0)*x12611*x12625)));
evalcond[1]=(cj0+(((-1.0)*r12*x12624))+(((-1.0)*gconst11*r10*x12625))+((r11*x12628)));
evalcond[2]=((((-1.0)*r02*x12624))+((r01*x12628))+(((-1.0)*x12619))+(((-1.0)*x12614*x12625)));
evalcond[3]=(((r22*x12627))+(((-1.0)*cj3*x12611*x12624))+((x12621*x12629))+((r21*x12612))+((r20*x12616))+x12620+x12617);
evalcond[4]=(((sj3*x12609*x12611))+(((-1.0)*x12626))+((gconst11*x12621))+x12613+((r20*x12622))+(((-1.0)*r21*x12616*x12624))+(((-1.0)*r22*sj3*x12625)));
evalcond[5]=(((r02*x12627))+((x12618*x12629))+(((-1.0)*cj1*cj2*x12623))+((r00*x12616))+(((-1.0)*cj3*x12614*x12624))+((r01*x12612))+((cj0*x12613)));
evalcond[6]=((((-1.0)*gconst11*x12610*x12624))+((sj0*x12613))+((x12615*x12629))+((r11*x12612))+((r12*x12627))+(((-1.0)*cj1*cj2*x12619))+((r10*x12616)));
evalcond[7]=((((-1.0)*x12620*x12623))+((gconst11*x12618))+(((-1.0)*r01*x12616*x12624))+((r00*x12609*x12612))+(((-1.0)*r02*sj3*x12625))+(((-1.0)*x12617*x12623))+((r00*x12622)));
evalcond[8]=(((gconst11*x12615))+((r10*x12609*x12612))+(((-1.0)*r11*x12616*x12624))+((gconst10*x12610))+(((-1.0)*x12617*x12619))+(((-1.0)*x12619*x12620))+(((-1.0)*r12*sj3*x12625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12630=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12630;
j4eval[1]=IKsign(x12630);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12631=((1.0)*cj5);
IkReal x12632=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12631)));
j4eval[0]=x12632;
j4eval[1]=((IKabs(((((-1.0)*r20*x12631))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12633=cj5*cj5;
IkReal x12634=(cj3*r21);
IkReal x12635=(cj5*sj5);
IkReal x12636=((1.0)*cj3);
IkReal x12637=((((-1.0)*r12*r22*x12636))+(((-1.0)*r11*x12634))+((cj3*r11*r20*x12635))+((r10*x12634*x12635))+(((-1.0)*r10*r20*x12633*x12636))+((r11*x12633*x12634)));
j4eval[0]=x12637;
j4eval[1]=IKsign(x12637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12638=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12638;
j4eval[1]=IKsign(x12638);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12639=((1.0)*cj5);
IkReal x12640=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12639)));
j4eval[0]=x12640;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12639))+((r21*sj5))))));
j4eval[2]=IKsign(x12640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12641=cj5*cj5;
IkReal x12642=r11*r11;
IkReal x12643=(r11*sj5);
IkReal x12644=(cj5*r10);
IkReal x12645=((r12*r12)+((x12641*(r10*r10)))+(((-2.0)*x12643*x12644))+(((-1.0)*x12641*x12642))+x12642);
j4eval[0]=x12645;
j4eval[1]=IKsign(x12645);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12643))+x12644))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12646=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12646);
rxp1_1=(px*r21);
rxp1_2=(r11*x12646);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12647=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12647);
rxp1_1=(px*r21);
rxp1_2=(r11*x12647);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12648=((1.0)*sj1);
CheckValue<IkReal> x12649=IKPowWithIntegerCheck(r02,-1);
if(!x12649.valid){
continue;
}
CheckValue<IkReal> x12650=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12650.valid){
continue;
}
if( IKabs(((x12649.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12648)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12650.value)*(((((-1.0)*sj2*x12648))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12649.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12648))))))+IKsqr(((x12650.value)*(((((-1.0)*sj2*x12648))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12649.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12648))))), ((x12650.value)*(((((-1.0)*sj2*x12648))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12651=IKsin(j4);
IkReal x12652=IKcos(j4);
IkReal x12653=(cj5*r20);
IkReal x12654=((1.0)*cj2);
IkReal x12655=(cj5*r10);
IkReal x12656=((1.0)*x12651);
IkReal x12657=(sj5*x12651);
IkReal x12658=((1.0)*sj5*x12652);
evalcond[0]=((-1.0)*r02*x12652);
evalcond[1]=(((r21*x12657))+(((-1.0)*x12653*x12656)));
evalcond[2]=(((x12652*x12655))+(((-1.0)*r11*x12658)));
evalcond[3]=((1.0)+((r11*x12657))+(((-1.0)*x12655*x12656)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12656))+(((-1.0)*sj1*x12654)));
evalcond[5]=(((x12652*x12653))+(((-1.0)*cj1*x12654))+((sj1*sj2))+(((-1.0)*r21*x12658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12659=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12659.valid){
continue;
}
CheckValue<IkReal> x12660=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12660.valid){
continue;
}
if( IKabs(((-1.0)*(x12659.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12660.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12659.value)))+IKsqr(((x12660.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12659.value)), ((x12660.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12661=IKsin(j4);
IkReal x12662=IKcos(j4);
IkReal x12663=(cj5*r20);
IkReal x12664=((1.0)*cj2);
IkReal x12665=(cj5*r10);
IkReal x12666=((1.0)*x12661);
IkReal x12667=(sj5*x12661);
IkReal x12668=((1.0)*sj5*x12662);
evalcond[0]=((-1.0)*r02*x12662);
evalcond[1]=(((r21*x12667))+(((-1.0)*x12663*x12666)));
evalcond[2]=(((x12662*x12665))+(((-1.0)*r11*x12668)));
evalcond[3]=((1.0)+(((-1.0)*x12665*x12666))+((r11*x12667)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12666))+(((-1.0)*sj1*x12664)));
evalcond[5]=((((-1.0)*cj1*x12664))+((sj1*sj2))+((x12662*x12663))+(((-1.0)*r21*x12668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12669=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12669);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12669);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12670=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12670);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12670);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12671=IKPowWithIntegerCheck(r22,-1);
if(!x12671.valid){
continue;
}
CheckValue<IkReal> x12672=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12672.valid){
continue;
}
if( IKabs(((x12671.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12672.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12671.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12672.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12671.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12672.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12673=IKsin(j4);
IkReal x12674=IKcos(j4);
IkReal x12675=((1.0)*cj2);
IkReal x12676=(cj5*x12674);
IkReal x12677=(sj5*x12673);
IkReal x12678=((1.0)*sj5*x12674);
IkReal x12679=((1.0)*cj5*x12673);
evalcond[0]=((-1.0)*r22*x12674);
evalcond[1]=((((-1.0)*r00*x12679))+((r01*x12677)));
evalcond[2]=((((-1.0)*cj1*x12675))+(((-1.0)*r22*x12673))+((sj1*sj2)));
evalcond[3]=(((r10*x12676))+(((-1.0)*r11*x12678)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12679))+((r11*x12677)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x12678))+((r00*x12676))+(((-1.0)*sj1*x12675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12680=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12680.valid){
continue;
}
CheckValue<IkReal> x12681=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12681.valid){
continue;
}
if( IKabs(((-1.0)*(x12680.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12681.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12680.value)))+IKsqr(((x12681.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12680.value)), ((x12681.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12682=IKsin(j4);
IkReal x12683=IKcos(j4);
IkReal x12684=((1.0)*cj2);
IkReal x12685=(cj5*x12683);
IkReal x12686=(sj5*x12682);
IkReal x12687=((1.0)*sj5*x12683);
IkReal x12688=((1.0)*cj5*x12682);
evalcond[0]=((-1.0)*r22*x12683);
evalcond[1]=(((r01*x12686))+(((-1.0)*r00*x12688)));
evalcond[2]=((((-1.0)*cj1*x12684))+((sj1*sj2))+(((-1.0)*r22*x12682)));
evalcond[3]=(((r10*x12685))+(((-1.0)*r11*x12687)));
evalcond[4]=((1.0)+((r11*x12686))+(((-1.0)*r10*x12688)));
evalcond[5]=((((-1.0)*sj1*x12684))+((r00*x12685))+(((-1.0)*r01*x12687))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12689=cj5*cj5;
IkReal x12690=r11*r11;
IkReal x12691=(cj5*r10);
IkReal x12692=(r11*sj5);
CheckValue<IkReal> x12693 = IKatan2WithCheck(IkReal((x12691+(((-1.0)*x12692)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12693.valid){
continue;
}
CheckValue<IkReal> x12694=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x12689*x12690))+((x12689*(r10*r10)))+x12690+(((-2.0)*x12691*x12692)))),-1);
if(!x12694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12693.value)+(((1.5707963267949)*(x12694.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12695=IKsin(j4);
IkReal x12696=IKcos(j4);
IkReal x12697=(cj5*r10);
IkReal x12698=(r01*sj5);
IkReal x12699=((1.0)*cj2);
IkReal x12700=(cj5*r00);
IkReal x12701=(cj5*r20);
IkReal x12702=((1.0)*x12696);
IkReal x12703=((1.0)*x12695);
IkReal x12704=(sj5*x12695);
evalcond[0]=(((r21*x12704))+(((-1.0)*x12701*x12703))+(((-1.0)*r22*x12702)));
evalcond[1]=(((x12695*x12698))+(((-1.0)*x12700*x12703))+(((-1.0)*r02*x12702)));
evalcond[2]=(((x12696*x12697))+(((-1.0)*r11*sj5*x12702))+(((-1.0)*r12*x12703)));
evalcond[3]=((1.0)+((r11*x12704))+(((-1.0)*x12697*x12703))+(((-1.0)*r12*x12702)));
evalcond[4]=((((-1.0)*cj1*x12699))+(((-1.0)*r21*sj5*x12702))+((x12696*x12701))+((sj1*sj2))+(((-1.0)*r22*x12703)));
evalcond[5]=(((x12696*x12700))+(((-1.0)*x12698*x12702))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12699))+(((-1.0)*r02*x12703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12705=((1.0)*cj5);
CheckValue<IkReal> x12706 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12706.valid){
continue;
}
CheckValue<IkReal> x12707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12705))+(((-1.0)*r00*sj5)))),-1);
if(!x12707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12706.value)+(((1.5707963267949)*(x12707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12708=IKsin(j4);
IkReal x12709=IKcos(j4);
IkReal x12710=(cj5*r10);
IkReal x12711=(r01*sj5);
IkReal x12712=((1.0)*cj2);
IkReal x12713=(cj5*r00);
IkReal x12714=(cj5*r20);
IkReal x12715=((1.0)*x12709);
IkReal x12716=((1.0)*x12708);
IkReal x12717=(sj5*x12708);
evalcond[0]=(((r21*x12717))+(((-1.0)*r22*x12715))+(((-1.0)*x12714*x12716)));
evalcond[1]=(((x12708*x12711))+(((-1.0)*x12713*x12716))+(((-1.0)*r02*x12715)));
evalcond[2]=((((-1.0)*r12*x12716))+((x12709*x12710))+(((-1.0)*r11*sj5*x12715)));
evalcond[3]=((1.0)+(((-1.0)*x12710*x12716))+(((-1.0)*r12*x12715))+((r11*x12717)));
evalcond[4]=(((x12709*x12714))+((sj1*sj2))+(((-1.0)*r22*x12716))+(((-1.0)*cj1*x12712))+(((-1.0)*r21*sj5*x12715)));
evalcond[5]=((((-1.0)*sj1*x12712))+((x12709*x12713))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12716))+(((-1.0)*x12711*x12715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12718=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12718.valid){
continue;
}
CheckValue<IkReal> x12719 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12718.value)))+(x12719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12720=IKsin(j4);
IkReal x12721=IKcos(j4);
IkReal x12722=(cj5*r10);
IkReal x12723=(r01*sj5);
IkReal x12724=((1.0)*cj2);
IkReal x12725=(cj5*r00);
IkReal x12726=(cj5*r20);
IkReal x12727=((1.0)*x12721);
IkReal x12728=((1.0)*x12720);
IkReal x12729=(sj5*x12720);
evalcond[0]=(((r21*x12729))+(((-1.0)*r22*x12727))+(((-1.0)*x12726*x12728)));
evalcond[1]=((((-1.0)*r02*x12727))+(((-1.0)*x12725*x12728))+((x12720*x12723)));
evalcond[2]=(((x12721*x12722))+(((-1.0)*r11*sj5*x12727))+(((-1.0)*r12*x12728)));
evalcond[3]=((1.0)+((r11*x12729))+(((-1.0)*x12722*x12728))+(((-1.0)*r12*x12727)));
evalcond[4]=(((x12721*x12726))+(((-1.0)*r22*x12728))+((sj1*sj2))+(((-1.0)*r21*sj5*x12727))+(((-1.0)*cj1*x12724)));
evalcond[5]=(((x12721*x12725))+(((-1.0)*r02*x12728))+(((-1.0)*sj1*x12724))+(((-1.0)*x12723*x12727))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12730=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12730;
j4eval[1]=IKsign(x12730);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12731=((1.0)*cj5);
IkReal x12732=((((-1.0)*r01*x12731))+(((-1.0)*r00*sj5)));
j4eval[0]=x12732;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12731))))));
j4eval[2]=IKsign(x12732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12733=(sj1*sj2);
IkReal x12734=(cj5*r10);
IkReal x12735=(r11*sj5);
IkReal x12736=(cj1*cj2);
IkReal x12737=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12737;
j4eval[1]=((IKabs((((r12*x12736))+(((-1.0)*r12*x12733)))))+(IKabs((((x12733*x12735))+((x12734*x12736))+(((-1.0)*x12735*x12736))+(((-1.0)*x12733*x12734))))));
j4eval[2]=IKsign(x12737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12738=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12738);
rxp1_1=(px*r21);
rxp1_2=(r11*x12738);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12739=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12739);
rxp1_1=(px*r21);
rxp1_2=(r11*x12739);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12740=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12740)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12740)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12741=((1.0)*cj5);
CheckValue<IkReal> x12742=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12741))),-1);
if(!x12742.valid){
continue;
}
CheckValue<IkReal> x12743=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12741))),-1);
if(!x12743.valid){
continue;
}
if( IKabs(((-1.0)*(x12742.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12743.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12742.value)))+IKsqr(((x12743.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12742.value)), ((x12743.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12744=IKsin(j4);
IkReal x12745=IKcos(j4);
IkReal x12746=((1.0)*cj2);
IkReal x12747=(r21*sj5);
IkReal x12748=(r11*sj5);
IkReal x12749=((1.0)*cj5*x12744);
IkReal x12750=((1.0)*cj5*x12745);
evalcond[0]=((-1.0)*r02*x12745);
evalcond[1]=(((x12744*x12747))+(((-1.0)*r20*x12749)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12746))+((r02*x12744)));
evalcond[3]=(((x12745*x12748))+(((-1.0)*r10*x12750)));
evalcond[4]=((1.0)+((x12744*x12748))+(((-1.0)*r10*x12749)));
evalcond[5]=(((x12745*x12747))+((sj1*sj2))+(((-1.0)*cj1*x12746))+(((-1.0)*r20*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12751=IKPowWithIntegerCheck(r02,-1);
if(!x12751.valid){
continue;
}
CheckValue<IkReal> x12752=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12752.valid){
continue;
}
if( IKabs(((x12751.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12752.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12751.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12752.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12751.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12752.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12753=IKsin(j4);
IkReal x12754=IKcos(j4);
IkReal x12755=((1.0)*cj2);
IkReal x12756=(r21*sj5);
IkReal x12757=(r11*sj5);
IkReal x12758=((1.0)*cj5*x12753);
IkReal x12759=((1.0)*cj5*x12754);
evalcond[0]=((-1.0)*r02*x12754);
evalcond[1]=(((x12753*x12756))+(((-1.0)*r20*x12758)));
evalcond[2]=((((-1.0)*sj1*x12755))+(((-1.0)*cj1*sj2))+((r02*x12753)));
evalcond[3]=(((x12754*x12757))+(((-1.0)*r10*x12759)));
evalcond[4]=((1.0)+((x12753*x12757))+(((-1.0)*r10*x12758)));
evalcond[5]=(((x12754*x12756))+((sj1*sj2))+(((-1.0)*r20*x12759))+(((-1.0)*cj1*x12755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12760=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12760;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12761=((1.0)*cj5);
IkReal x12762=((((-1.0)*r21*x12761))+(((-1.0)*r20*sj5)));
j4eval[0]=x12762;
j4eval[1]=((IKabs(((((-1.0)*r10*x12761))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12763=cj5*cj5;
IkReal x12764=(r11*r21);
IkReal x12765=((1.0)*r20);
IkReal x12766=(cj5*sj5);
IkReal x12767=(((x12763*x12764))+(((-1.0)*r12*r22))+(((-1.0)*x12764))+((r10*r21*x12766))+((r11*r20*x12766))+(((-1.0)*r10*x12763*x12765)));
j4eval[0]=x12767;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12765))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12768=cj5*cj5;
IkReal x12769=(r21*sj5);
IkReal x12770=(r11*r21);
IkReal x12771=((1.0)*r20);
CheckValue<IkReal> x12772 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12771))+x12769)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12772.valid){
continue;
}
CheckValue<IkReal> x12773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x12769))+((x12768*x12770))+(((-1.0)*x12770))+(((-1.0)*r10*x12768*x12771))+((cj5*r11*r20*sj5)))),-1);
if(!x12773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12772.value)+(((1.5707963267949)*(x12773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12774=IKcos(j4);
IkReal x12775=IKsin(j4);
IkReal x12776=(cj5*r00);
IkReal x12777=(cj5*r20);
IkReal x12778=(cj5*r10);
IkReal x12779=((1.0)*x12774);
IkReal x12780=((1.0)*x12775);
IkReal x12781=(sj5*x12774);
IkReal x12782=(sj5*x12775);
evalcond[0]=((((-1.0)*x12777*x12779))+((r21*x12781))+((r22*x12775)));
evalcond[1]=(((r11*x12781))+((r12*x12775))+(((-1.0)*x12778*x12779)));
evalcond[2]=((((-1.0)*r22*x12779))+((r21*x12782))+(((-1.0)*x12777*x12780)));
evalcond[3]=(((r01*x12782))+(((-1.0)*r02*x12779))+(((-1.0)*x12776*x12780)));
evalcond[4]=((-1.0)+(((-1.0)*x12776*x12779))+((r01*x12781))+((r02*x12775)));
evalcond[5]=((1.0)+(((-1.0)*x12778*x12780))+((r11*x12782))+(((-1.0)*r12*x12779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12783=((1.0)*cj5);
CheckValue<IkReal> x12784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12783))+(((-1.0)*r20*sj5)))),-1);
if(!x12784.valid){
continue;
}
CheckValue<IkReal> x12785 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12783)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12784.value)))+(x12785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12786=IKcos(j4);
IkReal x12787=IKsin(j4);
IkReal x12788=(cj5*r00);
IkReal x12789=(cj5*r20);
IkReal x12790=(cj5*r10);
IkReal x12791=((1.0)*x12786);
IkReal x12792=((1.0)*x12787);
IkReal x12793=(sj5*x12786);
IkReal x12794=(sj5*x12787);
evalcond[0]=((((-1.0)*x12789*x12791))+((r22*x12787))+((r21*x12793)));
evalcond[1]=(((r11*x12793))+((r12*x12787))+(((-1.0)*x12790*x12791)));
evalcond[2]=((((-1.0)*r22*x12791))+(((-1.0)*x12789*x12792))+((r21*x12794)));
evalcond[3]=((((-1.0)*r02*x12791))+((r01*x12794))+(((-1.0)*x12788*x12792)));
evalcond[4]=((-1.0)+((r01*x12793))+(((-1.0)*x12788*x12791))+((r02*x12787)));
evalcond[5]=((1.0)+((r11*x12794))+(((-1.0)*r12*x12791))+(((-1.0)*x12790*x12792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12795 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12795.valid){
continue;
}
CheckValue<IkReal> x12796=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12795.value)+(((1.5707963267949)*(x12796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12797=IKcos(j4);
IkReal x12798=IKsin(j4);
IkReal x12799=(cj5*r00);
IkReal x12800=(cj5*r20);
IkReal x12801=(cj5*r10);
IkReal x12802=((1.0)*x12797);
IkReal x12803=((1.0)*x12798);
IkReal x12804=(sj5*x12797);
IkReal x12805=(sj5*x12798);
evalcond[0]=((((-1.0)*x12800*x12802))+((r21*x12804))+((r22*x12798)));
evalcond[1]=(((r11*x12804))+((r12*x12798))+(((-1.0)*x12801*x12802)));
evalcond[2]=((((-1.0)*x12800*x12803))+((r21*x12805))+(((-1.0)*r22*x12802)));
evalcond[3]=((((-1.0)*x12799*x12803))+(((-1.0)*r02*x12802))+((r01*x12805)));
evalcond[4]=((-1.0)+((r02*x12798))+(((-1.0)*x12799*x12802))+((r01*x12804)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12802))+((r11*x12805))+(((-1.0)*x12801*x12803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12806=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12806;
j4eval[1]=IKsign(x12806);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12807=((1.0)*cj5);
IkReal x12808=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12807)));
j4eval[0]=x12808;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12807))))));
j4eval[2]=IKsign(x12808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12809=cj5*cj5;
IkReal x12810=(r11*r21);
IkReal x12811=((1.0)*r20);
IkReal x12812=(cj5*sj5);
IkReal x12813=((((-1.0)*r10*x12809*x12811))+(((-1.0)*r12*r22))+((r11*r20*x12812))+(((-1.0)*x12810))+((x12809*x12810))+((r10*r21*x12812)));
j4eval[0]=x12813;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12811))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12814=cj5*cj5;
IkReal x12815=(r21*sj5);
IkReal x12816=(r11*r21);
IkReal x12817=((1.0)*r20);
CheckValue<IkReal> x12818 = IKatan2WithCheck(IkReal((x12815+(((-1.0)*cj5*x12817)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12818.valid){
continue;
}
CheckValue<IkReal> x12819=IKPowWithIntegerCheck(IKsign((((x12814*x12816))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12814*x12817))+(((-1.0)*x12816))+((cj5*r10*x12815))+((cj5*r11*r20*sj5)))),-1);
if(!x12819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12818.value)+(((1.5707963267949)*(x12819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12820=IKcos(j4);
IkReal x12821=IKsin(j4);
IkReal x12822=(cj5*r00);
IkReal x12823=(cj5*r20);
IkReal x12824=(cj5*r10);
IkReal x12825=((1.0)*x12820);
IkReal x12826=((1.0)*x12821);
IkReal x12827=(sj5*x12820);
IkReal x12828=(sj5*x12821);
evalcond[0]=(((r22*x12821))+((r21*x12827))+(((-1.0)*x12823*x12825)));
evalcond[1]=((((-1.0)*x12824*x12825))+((r12*x12821))+((r11*x12827)));
evalcond[2]=((((-1.0)*r22*x12825))+((r21*x12828))+(((-1.0)*x12823*x12826)));
evalcond[3]=((((-1.0)*r02*x12825))+((r01*x12828))+(((-1.0)*x12822*x12826)));
evalcond[4]=((1.0)+((r01*x12827))+(((-1.0)*x12822*x12825))+((r02*x12821)));
evalcond[5]=((1.0)+(((-1.0)*x12824*x12826))+(((-1.0)*r12*x12825))+((r11*x12828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12829=((1.0)*cj5);
CheckValue<IkReal> x12830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12829)))),-1);
if(!x12830.valid){
continue;
}
CheckValue<IkReal> x12831 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12829)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12830.value)))+(x12831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12832=IKcos(j4);
IkReal x12833=IKsin(j4);
IkReal x12834=(cj5*r00);
IkReal x12835=(cj5*r20);
IkReal x12836=(cj5*r10);
IkReal x12837=((1.0)*x12832);
IkReal x12838=((1.0)*x12833);
IkReal x12839=(sj5*x12832);
IkReal x12840=(sj5*x12833);
evalcond[0]=(((r21*x12839))+((r22*x12833))+(((-1.0)*x12835*x12837)));
evalcond[1]=(((r12*x12833))+((r11*x12839))+(((-1.0)*x12836*x12837)));
evalcond[2]=((((-1.0)*r22*x12837))+((r21*x12840))+(((-1.0)*x12835*x12838)));
evalcond[3]=(((r01*x12840))+(((-1.0)*r02*x12837))+(((-1.0)*x12834*x12838)));
evalcond[4]=((1.0)+((r02*x12833))+((r01*x12839))+(((-1.0)*x12834*x12837)));
evalcond[5]=((1.0)+(((-1.0)*x12836*x12838))+((r11*x12840))+(((-1.0)*r12*x12837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12841=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12841.valid){
continue;
}
CheckValue<IkReal> x12842 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12841.value)))+(x12842.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12843=IKcos(j4);
IkReal x12844=IKsin(j4);
IkReal x12845=(cj5*r00);
IkReal x12846=(cj5*r20);
IkReal x12847=(cj5*r10);
IkReal x12848=((1.0)*x12843);
IkReal x12849=((1.0)*x12844);
IkReal x12850=(sj5*x12843);
IkReal x12851=(sj5*x12844);
evalcond[0]=(((r22*x12844))+((r21*x12850))+(((-1.0)*x12846*x12848)));
evalcond[1]=(((r11*x12850))+((r12*x12844))+(((-1.0)*x12847*x12848)));
evalcond[2]=((((-1.0)*r22*x12848))+((r21*x12851))+(((-1.0)*x12846*x12849)));
evalcond[3]=((((-1.0)*r02*x12848))+((r01*x12851))+(((-1.0)*x12845*x12849)));
evalcond[4]=((1.0)+((r01*x12850))+(((-1.0)*x12845*x12848))+((r02*x12844)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12848))+((r11*x12851))+(((-1.0)*x12847*x12849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12852=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12852;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12853=((1.0)*cj5);
IkReal x12854=((((-1.0)*r21*x12853))+(((-1.0)*r20*sj5)));
j4eval[0]=x12854;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12853))))));
j4eval[2]=IKsign(x12854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12855=cj5*cj5;
IkReal x12856=(r11*r21);
IkReal x12857=((1.0)*r20);
IkReal x12858=(cj5*sj5);
IkReal x12859=(((x12855*x12856))+((r11*r20*x12858))+(((-1.0)*r12*r22))+(((-1.0)*x12856))+((r10*r21*x12858))+(((-1.0)*r10*x12855*x12857)));
j4eval[0]=x12859;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12857)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12860=cj5*cj5;
IkReal x12861=(r21*sj5);
IkReal x12862=(r11*r21);
IkReal x12863=((1.0)*r20);
CheckValue<IkReal> x12864=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12862))+(((-1.0)*r12*r22))+((cj5*r10*x12861))+(((-1.0)*r10*x12860*x12863))+((x12860*x12862))+((cj5*r11*r20*sj5)))),-1);
if(!x12864.valid){
continue;
}
CheckValue<IkReal> x12865 = IKatan2WithCheck(IkReal((x12861+(((-1.0)*cj5*x12863)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12864.value)))+(x12865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12866=IKcos(j4);
IkReal x12867=IKsin(j4);
IkReal x12868=(cj5*r00);
IkReal x12869=(cj5*r20);
IkReal x12870=(cj5*r10);
IkReal x12871=((1.0)*x12866);
IkReal x12872=((1.0)*x12867);
IkReal x12873=(sj5*x12866);
IkReal x12874=(sj5*x12867);
evalcond[0]=((((-1.0)*x12869*x12871))+((r21*x12873))+((r22*x12867)));
evalcond[1]=(((r12*x12867))+((r11*x12873))+(((-1.0)*x12870*x12871)));
evalcond[2]=((((-1.0)*r22*x12871))+(((-1.0)*x12869*x12872))+((r21*x12874)));
evalcond[3]=(((r01*x12874))+(((-1.0)*x12868*x12872))+(((-1.0)*r02*x12871)));
evalcond[4]=((-1.0)+((r01*x12873))+(((-1.0)*x12868*x12871))+((r02*x12867)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12871))+((r11*x12874))+(((-1.0)*x12870*x12872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12875=((1.0)*cj5);
CheckValue<IkReal> x12876 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12875)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12876.valid){
continue;
}
CheckValue<IkReal> x12877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12875))+(((-1.0)*r20*sj5)))),-1);
if(!x12877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12876.value)+(((1.5707963267949)*(x12877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12878=IKcos(j4);
IkReal x12879=IKsin(j4);
IkReal x12880=(cj5*r00);
IkReal x12881=(cj5*r20);
IkReal x12882=(cj5*r10);
IkReal x12883=((1.0)*x12878);
IkReal x12884=((1.0)*x12879);
IkReal x12885=(sj5*x12878);
IkReal x12886=(sj5*x12879);
evalcond[0]=(((r22*x12879))+(((-1.0)*x12881*x12883))+((r21*x12885)));
evalcond[1]=((((-1.0)*x12882*x12883))+((r12*x12879))+((r11*x12885)));
evalcond[2]=((((-1.0)*r22*x12883))+(((-1.0)*x12881*x12884))+((r21*x12886)));
evalcond[3]=((((-1.0)*r02*x12883))+((r01*x12886))+(((-1.0)*x12880*x12884)));
evalcond[4]=((-1.0)+((r01*x12885))+((r02*x12879))+(((-1.0)*x12880*x12883)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12883))+(((-1.0)*x12882*x12884))+((r11*x12886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12887 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12887.valid){
continue;
}
CheckValue<IkReal> x12888=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12887.value)+(((1.5707963267949)*(x12888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12889=IKcos(j4);
IkReal x12890=IKsin(j4);
IkReal x12891=(cj5*r00);
IkReal x12892=(cj5*r20);
IkReal x12893=(cj5*r10);
IkReal x12894=((1.0)*x12889);
IkReal x12895=((1.0)*x12890);
IkReal x12896=(sj5*x12889);
IkReal x12897=(sj5*x12890);
evalcond[0]=((((-1.0)*x12892*x12894))+((r21*x12896))+((r22*x12890)));
evalcond[1]=((((-1.0)*x12893*x12894))+((r12*x12890))+((r11*x12896)));
evalcond[2]=((((-1.0)*x12892*x12895))+(((-1.0)*r22*x12894))+((r21*x12897)));
evalcond[3]=((((-1.0)*x12891*x12895))+((r01*x12897))+(((-1.0)*r02*x12894)));
evalcond[4]=((-1.0)+(((-1.0)*x12891*x12894))+((r01*x12896))+((r02*x12890)));
evalcond[5]=((1.0)+(((-1.0)*x12893*x12895))+((r11*x12897))+(((-1.0)*r12*x12894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12898=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12898;
j4eval[1]=IKsign(x12898);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12899=((1.0)*cj5);
IkReal x12900=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12899)));
j4eval[0]=x12900;
j4eval[1]=((IKabs(((((-1.0)*r20*x12899))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12901=cj5*cj5;
IkReal x12902=(r11*r21);
IkReal x12903=((1.0)*r20);
IkReal x12904=(cj5*sj5);
IkReal x12905=((((-1.0)*r12*r22))+(((-1.0)*x12902))+((r11*r20*x12904))+(((-1.0)*r10*x12901*x12903))+((r10*r21*x12904))+((x12901*x12902)));
j4eval[0]=x12905;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12903))))));
j4eval[2]=IKsign(x12905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12906=cj5*cj5;
IkReal x12907=(r21*sj5);
IkReal x12908=(r11*r21);
IkReal x12909=((1.0)*r20);
CheckValue<IkReal> x12910 = IKatan2WithCheck(IkReal((x12907+(((-1.0)*cj5*x12909)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12910.valid){
continue;
}
CheckValue<IkReal> x12911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12908))+(((-1.0)*r10*x12906*x12909))+((x12906*x12908))+((cj5*r10*x12907))+((cj5*r11*r20*sj5)))),-1);
if(!x12911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12910.value)+(((1.5707963267949)*(x12911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12912=IKcos(j4);
IkReal x12913=IKsin(j4);
IkReal x12914=(cj5*r00);
IkReal x12915=(cj5*r20);
IkReal x12916=(cj5*r10);
IkReal x12917=((1.0)*x12912);
IkReal x12918=((1.0)*x12913);
IkReal x12919=(sj5*x12912);
IkReal x12920=(sj5*x12913);
evalcond[0]=((((-1.0)*x12915*x12917))+((r21*x12919))+((r22*x12913)));
evalcond[1]=((((-1.0)*x12916*x12917))+((r12*x12913))+((r11*x12919)));
evalcond[2]=((((-1.0)*x12915*x12918))+(((-1.0)*r22*x12917))+((r21*x12920)));
evalcond[3]=((((-1.0)*r02*x12917))+(((-1.0)*x12914*x12918))+((r01*x12920)));
evalcond[4]=((1.0)+((r02*x12913))+(((-1.0)*x12914*x12917))+((r01*x12919)));
evalcond[5]=((1.0)+((r11*x12920))+(((-1.0)*x12916*x12918))+(((-1.0)*r12*x12917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12921=((1.0)*cj5);
CheckValue<IkReal> x12922 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12921))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12922.valid){
continue;
}
CheckValue<IkReal> x12923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12921)))),-1);
if(!x12923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12922.value)+(((1.5707963267949)*(x12923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12924=IKcos(j4);
IkReal x12925=IKsin(j4);
IkReal x12926=(cj5*r00);
IkReal x12927=(cj5*r20);
IkReal x12928=(cj5*r10);
IkReal x12929=((1.0)*x12924);
IkReal x12930=((1.0)*x12925);
IkReal x12931=(sj5*x12924);
IkReal x12932=(sj5*x12925);
evalcond[0]=((((-1.0)*x12927*x12929))+((r22*x12925))+((r21*x12931)));
evalcond[1]=(((r11*x12931))+((r12*x12925))+(((-1.0)*x12928*x12929)));
evalcond[2]=((((-1.0)*x12927*x12930))+((r21*x12932))+(((-1.0)*r22*x12929)));
evalcond[3]=((((-1.0)*r02*x12929))+(((-1.0)*x12926*x12930))+((r01*x12932)));
evalcond[4]=((1.0)+(((-1.0)*x12926*x12929))+((r02*x12925))+((r01*x12931)));
evalcond[5]=((1.0)+((r11*x12932))+(((-1.0)*x12928*x12930))+(((-1.0)*r12*x12929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12933=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12933.valid){
continue;
}
CheckValue<IkReal> x12934 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12933.value)))+(x12934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12935=IKcos(j4);
IkReal x12936=IKsin(j4);
IkReal x12937=(cj5*r00);
IkReal x12938=(cj5*r20);
IkReal x12939=(cj5*r10);
IkReal x12940=((1.0)*x12935);
IkReal x12941=((1.0)*x12936);
IkReal x12942=(sj5*x12935);
IkReal x12943=(sj5*x12936);
evalcond[0]=(((r21*x12942))+((r22*x12936))+(((-1.0)*x12938*x12940)));
evalcond[1]=((((-1.0)*x12939*x12940))+((r12*x12936))+((r11*x12942)));
evalcond[2]=(((r21*x12943))+(((-1.0)*r22*x12940))+(((-1.0)*x12938*x12941)));
evalcond[3]=((((-1.0)*x12937*x12941))+((r01*x12943))+(((-1.0)*r02*x12940)));
evalcond[4]=((1.0)+(((-1.0)*x12937*x12940))+((r02*x12936))+((r01*x12942)));
evalcond[5]=((1.0)+(((-1.0)*x12939*x12941))+((r11*x12943))+(((-1.0)*r12*x12940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12944=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12944;
j4eval[1]=IKsign(x12944);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12945=((1.0)*cj5);
IkReal x12946=((((-1.0)*r11*x12945))+(((-1.0)*r10*sj5)));
j4eval[0]=x12946;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12945)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12947=cj5*cj5;
IkReal x12948=(r11*r21);
IkReal x12949=((1.0)*r20);
IkReal x12950=(cj5*sj5);
IkReal x12951=((((-1.0)*r12*r22))+((x12947*x12948))+((r10*r21*x12950))+((r11*r20*x12950))+(((-1.0)*x12948))+(((-1.0)*r10*x12947*x12949)));
j4eval[0]=x12951;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12949))+((r21*sj5))))));
j4eval[2]=IKsign(x12951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12952=cj5*cj5;
IkReal x12953=(r21*sj5);
IkReal x12954=(r11*r21);
IkReal x12955=((1.0)*r20);
CheckValue<IkReal> x12956 = IKatan2WithCheck(IkReal((x12953+(((-1.0)*cj5*x12955)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12956.valid){
continue;
}
CheckValue<IkReal> x12957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12952*x12955))+(((-1.0)*r12*r22))+(((-1.0)*x12954))+((cj5*r10*x12953))+((x12952*x12954))+((cj5*r11*r20*sj5)))),-1);
if(!x12957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12956.value)+(((1.5707963267949)*(x12957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12958=IKcos(j4);
IkReal x12959=IKsin(j4);
IkReal x12960=(cj5*r00);
IkReal x12961=(cj5*r20);
IkReal x12962=(cj5*r10);
IkReal x12963=((1.0)*x12958);
IkReal x12964=((1.0)*x12959);
IkReal x12965=(sj5*x12958);
IkReal x12966=(sj5*x12959);
evalcond[0]=(((r22*x12959))+(((-1.0)*x12961*x12963))+((r21*x12965)));
evalcond[1]=((((-1.0)*x12962*x12963))+((r12*x12959))+((r11*x12965)));
evalcond[2]=((((-1.0)*x12961*x12964))+(((-1.0)*r22*x12963))+((r21*x12966)));
evalcond[3]=(((r01*x12966))+(((-1.0)*x12960*x12964))+(((-1.0)*r02*x12963)));
evalcond[4]=((1.0)+((r01*x12965))+(((-1.0)*x12960*x12963))+((r02*x12959)));
evalcond[5]=((1.0)+(((-1.0)*x12962*x12964))+(((-1.0)*r12*x12963))+((r11*x12966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12967=((1.0)*cj5);
CheckValue<IkReal> x12968 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12967)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12968.valid){
continue;
}
CheckValue<IkReal> x12969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12967)))),-1);
if(!x12969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12968.value)+(((1.5707963267949)*(x12969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12970=IKcos(j4);
IkReal x12971=IKsin(j4);
IkReal x12972=(cj5*r00);
IkReal x12973=(cj5*r20);
IkReal x12974=(cj5*r10);
IkReal x12975=((1.0)*x12970);
IkReal x12976=((1.0)*x12971);
IkReal x12977=(sj5*x12970);
IkReal x12978=(sj5*x12971);
evalcond[0]=((((-1.0)*x12973*x12975))+((r22*x12971))+((r21*x12977)));
evalcond[1]=((((-1.0)*x12974*x12975))+((r11*x12977))+((r12*x12971)));
evalcond[2]=((((-1.0)*x12973*x12976))+(((-1.0)*r22*x12975))+((r21*x12978)));
evalcond[3]=(((r01*x12978))+(((-1.0)*r02*x12975))+(((-1.0)*x12972*x12976)));
evalcond[4]=((1.0)+((r01*x12977))+((r02*x12971))+(((-1.0)*x12972*x12975)));
evalcond[5]=((1.0)+(((-1.0)*x12974*x12976))+(((-1.0)*r12*x12975))+((r11*x12978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12979=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12979.valid){
continue;
}
CheckValue<IkReal> x12980 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12979.value)))+(x12980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12981=IKcos(j4);
IkReal x12982=IKsin(j4);
IkReal x12983=(cj5*r00);
IkReal x12984=(cj5*r20);
IkReal x12985=(cj5*r10);
IkReal x12986=((1.0)*x12981);
IkReal x12987=((1.0)*x12982);
IkReal x12988=(sj5*x12981);
IkReal x12989=(sj5*x12982);
evalcond[0]=(((r22*x12982))+((r21*x12988))+(((-1.0)*x12984*x12986)));
evalcond[1]=(((r11*x12988))+((r12*x12982))+(((-1.0)*x12985*x12986)));
evalcond[2]=((((-1.0)*r22*x12986))+((r21*x12989))+(((-1.0)*x12984*x12987)));
evalcond[3]=((((-1.0)*x12983*x12987))+((r01*x12989))+(((-1.0)*r02*x12986)));
evalcond[4]=((1.0)+(((-1.0)*x12983*x12986))+((r01*x12988))+((r02*x12982)));
evalcond[5]=((1.0)+((r11*x12989))+(((-1.0)*r12*x12986))+(((-1.0)*x12985*x12987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12990=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12990;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12991=((1.0)*cj5);
IkReal x12992=((((-1.0)*r21*x12991))+(((-1.0)*r20*sj5)));
j4eval[0]=x12992;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12991))+((r11*sj5))))));
j4eval[2]=IKsign(x12992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12993=cj5*cj5;
IkReal x12994=(r11*r21);
IkReal x12995=((1.0)*r20);
IkReal x12996=(cj5*sj5);
IkReal x12997=(((r10*r21*x12996))+(((-1.0)*r12*r22))+((x12993*x12994))+((r11*r20*x12996))+(((-1.0)*x12994))+(((-1.0)*r10*x12993*x12995)));
j4eval[0]=x12997;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12995)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12998=cj5*cj5;
IkReal x12999=(r21*sj5);
IkReal x13000=(r11*r21);
IkReal x13001=((1.0)*r20);
CheckValue<IkReal> x13002 = IKatan2WithCheck(IkReal((x12999+(((-1.0)*cj5*x13001)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13002.valid){
continue;
}
CheckValue<IkReal> x13003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x13000))+(((-1.0)*r10*x12998*x13001))+((cj5*r10*x12999))+((x12998*x13000))+((cj5*r11*r20*sj5)))),-1);
if(!x13003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13002.value)+(((1.5707963267949)*(x13003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13004=IKcos(j4);
IkReal x13005=IKsin(j4);
IkReal x13006=(cj5*r00);
IkReal x13007=(cj5*r20);
IkReal x13008=(cj5*r10);
IkReal x13009=((1.0)*x13004);
IkReal x13010=((1.0)*x13005);
IkReal x13011=(sj5*x13004);
IkReal x13012=(sj5*x13005);
evalcond[0]=(((r21*x13011))+((r22*x13005))+(((-1.0)*x13007*x13009)));
evalcond[1]=((((-1.0)*x13008*x13009))+((r12*x13005))+((r11*x13011)));
evalcond[2]=(((r21*x13012))+(((-1.0)*r22*x13009))+(((-1.0)*x13007*x13010)));
evalcond[3]=(((r01*x13012))+(((-1.0)*r02*x13009))+(((-1.0)*x13006*x13010)));
evalcond[4]=((-1.0)+((r01*x13011))+((r02*x13005))+(((-1.0)*x13006*x13009)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13009))+(((-1.0)*x13008*x13010))+((r11*x13012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13013=((1.0)*cj5);
CheckValue<IkReal> x13014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13013))+(((-1.0)*r20*sj5)))),-1);
if(!x13014.valid){
continue;
}
CheckValue<IkReal> x13015 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13013))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13014.value)))+(x13015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13016=IKcos(j4);
IkReal x13017=IKsin(j4);
IkReal x13018=(cj5*r00);
IkReal x13019=(cj5*r20);
IkReal x13020=(cj5*r10);
IkReal x13021=((1.0)*x13016);
IkReal x13022=((1.0)*x13017);
IkReal x13023=(sj5*x13016);
IkReal x13024=(sj5*x13017);
evalcond[0]=(((r21*x13023))+(((-1.0)*x13019*x13021))+((r22*x13017)));
evalcond[1]=(((r11*x13023))+((r12*x13017))+(((-1.0)*x13020*x13021)));
evalcond[2]=((((-1.0)*r22*x13021))+((r21*x13024))+(((-1.0)*x13019*x13022)));
evalcond[3]=(((r01*x13024))+(((-1.0)*x13018*x13022))+(((-1.0)*r02*x13021)));
evalcond[4]=((-1.0)+((r01*x13023))+(((-1.0)*x13018*x13021))+((r02*x13017)));
evalcond[5]=((1.0)+((r11*x13024))+(((-1.0)*x13020*x13022))+(((-1.0)*r12*x13021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13025 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13025.valid){
continue;
}
CheckValue<IkReal> x13026=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13025.value)+(((1.5707963267949)*(x13026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13027=IKcos(j4);
IkReal x13028=IKsin(j4);
IkReal x13029=(cj5*r00);
IkReal x13030=(cj5*r20);
IkReal x13031=(cj5*r10);
IkReal x13032=((1.0)*x13027);
IkReal x13033=((1.0)*x13028);
IkReal x13034=(sj5*x13027);
IkReal x13035=(sj5*x13028);
evalcond[0]=((((-1.0)*x13030*x13032))+((r21*x13034))+((r22*x13028)));
evalcond[1]=((((-1.0)*x13031*x13032))+((r11*x13034))+((r12*x13028)));
evalcond[2]=((((-1.0)*x13030*x13033))+(((-1.0)*r22*x13032))+((r21*x13035)));
evalcond[3]=((((-1.0)*r02*x13032))+(((-1.0)*x13029*x13033))+((r01*x13035)));
evalcond[4]=((-1.0)+(((-1.0)*x13029*x13032))+((r02*x13028))+((r01*x13034)));
evalcond[5]=((1.0)+(((-1.0)*x13031*x13033))+((r11*x13035))+(((-1.0)*r12*x13032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13036=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13036;
j4eval[1]=IKsign(x13036);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13037=((1.0)*cj5);
IkReal x13038=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13037)));
j4eval[0]=x13038;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13037))+((r21*sj5))))));
j4eval[2]=IKsign(x13038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13039=cj5*cj5;
IkReal x13040=(r11*r21);
IkReal x13041=((1.0)*r20);
IkReal x13042=(cj5*sj5);
IkReal x13043=((((-1.0)*x13040))+((r11*r20*x13042))+(((-1.0)*r12*r22))+((r10*r21*x13042))+(((-1.0)*r10*x13039*x13041))+((x13039*x13040)));
j4eval[0]=x13043;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x13041))+((r21*sj5))))));
j4eval[2]=IKsign(x13043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13044=cj5*cj5;
IkReal x13045=(r21*sj5);
IkReal x13046=(r11*r21);
IkReal x13047=((1.0)*r20);
CheckValue<IkReal> x13048=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13046))+((x13044*x13046))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13044*x13047))+((cj5*r10*x13045))+((cj5*r11*r20*sj5)))),-1);
if(!x13048.valid){
continue;
}
CheckValue<IkReal> x13049 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13047))+x13045)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13048.value)))+(x13049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13050=IKcos(j4);
IkReal x13051=IKsin(j4);
IkReal x13052=(cj5*r00);
IkReal x13053=(cj5*r20);
IkReal x13054=(cj5*r10);
IkReal x13055=((1.0)*x13050);
IkReal x13056=((1.0)*x13051);
IkReal x13057=(sj5*x13050);
IkReal x13058=(sj5*x13051);
evalcond[0]=(((r21*x13057))+((r22*x13051))+(((-1.0)*x13053*x13055)));
evalcond[1]=(((r12*x13051))+(((-1.0)*x13054*x13055))+((r11*x13057)));
evalcond[2]=(((r21*x13058))+(((-1.0)*r22*x13055))+(((-1.0)*x13053*x13056)));
evalcond[3]=((((-1.0)*r02*x13055))+((r01*x13058))+(((-1.0)*x13052*x13056)));
evalcond[4]=((1.0)+((r02*x13051))+((r01*x13057))+(((-1.0)*x13052*x13055)));
evalcond[5]=((1.0)+(((-1.0)*x13054*x13056))+(((-1.0)*r12*x13055))+((r11*x13058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13059=((1.0)*cj5);
CheckValue<IkReal> x13060 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13059))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13060.valid){
continue;
}
CheckValue<IkReal> x13061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13059)))),-1);
if(!x13061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13060.value)+(((1.5707963267949)*(x13061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13062=IKcos(j4);
IkReal x13063=IKsin(j4);
IkReal x13064=(cj5*r00);
IkReal x13065=(cj5*r20);
IkReal x13066=(cj5*r10);
IkReal x13067=((1.0)*x13062);
IkReal x13068=((1.0)*x13063);
IkReal x13069=(sj5*x13062);
IkReal x13070=(sj5*x13063);
evalcond[0]=(((r22*x13063))+((r21*x13069))+(((-1.0)*x13065*x13067)));
evalcond[1]=(((r12*x13063))+(((-1.0)*x13066*x13067))+((r11*x13069)));
evalcond[2]=(((r21*x13070))+(((-1.0)*r22*x13067))+(((-1.0)*x13065*x13068)));
evalcond[3]=(((r01*x13070))+(((-1.0)*x13064*x13068))+(((-1.0)*r02*x13067)));
evalcond[4]=((1.0)+((r02*x13063))+(((-1.0)*x13064*x13067))+((r01*x13069)));
evalcond[5]=((1.0)+(((-1.0)*x13066*x13068))+((r11*x13070))+(((-1.0)*r12*x13067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13071=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13071.valid){
continue;
}
CheckValue<IkReal> x13072 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13071.value)))+(x13072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13073=IKcos(j4);
IkReal x13074=IKsin(j4);
IkReal x13075=(cj5*r00);
IkReal x13076=(cj5*r20);
IkReal x13077=(cj5*r10);
IkReal x13078=((1.0)*x13073);
IkReal x13079=((1.0)*x13074);
IkReal x13080=(sj5*x13073);
IkReal x13081=(sj5*x13074);
evalcond[0]=((((-1.0)*x13076*x13078))+((r22*x13074))+((r21*x13080)));
evalcond[1]=(((r11*x13080))+((r12*x13074))+(((-1.0)*x13077*x13078)));
evalcond[2]=((((-1.0)*x13076*x13079))+(((-1.0)*r22*x13078))+((r21*x13081)));
evalcond[3]=((((-1.0)*r02*x13078))+(((-1.0)*x13075*x13079))+((r01*x13081)));
evalcond[4]=((1.0)+((r02*x13074))+(((-1.0)*x13075*x13078))+((r01*x13080)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13078))+((r11*x13081))+(((-1.0)*x13077*x13079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13082=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13082;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13083=((1.0)*cj5);
IkReal x13084=((((-1.0)*r21*x13083))+(((-1.0)*r20*sj5)));
j4eval[0]=x13084;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x13083)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13085=cj5*cj5;
IkReal x13086=(r11*r21);
IkReal x13087=((1.0)*r20);
IkReal x13088=(cj5*sj5);
IkReal x13089=((((-1.0)*r12*r22))+((r11*r20*x13088))+((r10*r21*x13088))+((x13085*x13086))+(((-1.0)*r10*x13085*x13087))+(((-1.0)*x13086)));
j4eval[0]=x13089;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13087)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13090=cj5*cj5;
IkReal x13091=(r21*sj5);
IkReal x13092=(r11*r21);
IkReal x13093=((1.0)*r20);
CheckValue<IkReal> x13094=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13091))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13090*x13093))+((x13090*x13092))+(((-1.0)*x13092))+((cj5*r11*r20*sj5)))),-1);
if(!x13094.valid){
continue;
}
CheckValue<IkReal> x13095 = IKatan2WithCheck(IkReal((x13091+(((-1.0)*cj5*x13093)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13094.value)))+(x13095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13096=IKcos(j4);
IkReal x13097=IKsin(j4);
IkReal x13098=(cj5*r00);
IkReal x13099=(cj5*r20);
IkReal x13100=(cj5*r10);
IkReal x13101=((1.0)*x13096);
IkReal x13102=((1.0)*x13097);
IkReal x13103=(sj5*x13096);
IkReal x13104=(sj5*x13097);
evalcond[0]=((((-1.0)*x13099*x13101))+((r22*x13097))+((r21*x13103)));
evalcond[1]=((((-1.0)*x13100*x13101))+((r12*x13097))+((r11*x13103)));
evalcond[2]=((((-1.0)*x13099*x13102))+((r21*x13104))+(((-1.0)*r22*x13101)));
evalcond[3]=(((r01*x13104))+(((-1.0)*x13098*x13102))+(((-1.0)*r02*x13101)));
evalcond[4]=((-1.0)+((r02*x13097))+((r01*x13103))+(((-1.0)*x13098*x13101)));
evalcond[5]=((1.0)+(((-1.0)*x13100*x13102))+(((-1.0)*r12*x13101))+((r11*x13104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13105=((1.0)*cj5);
CheckValue<IkReal> x13106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13105))+(((-1.0)*r20*sj5)))),-1);
if(!x13106.valid){
continue;
}
CheckValue<IkReal> x13107 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13105)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13106.value)))+(x13107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13108=IKcos(j4);
IkReal x13109=IKsin(j4);
IkReal x13110=(cj5*r00);
IkReal x13111=(cj5*r20);
IkReal x13112=(cj5*r10);
IkReal x13113=((1.0)*x13108);
IkReal x13114=((1.0)*x13109);
IkReal x13115=(sj5*x13108);
IkReal x13116=(sj5*x13109);
evalcond[0]=(((r21*x13115))+((r22*x13109))+(((-1.0)*x13111*x13113)));
evalcond[1]=((((-1.0)*x13112*x13113))+((r12*x13109))+((r11*x13115)));
evalcond[2]=(((r21*x13116))+(((-1.0)*x13111*x13114))+(((-1.0)*r22*x13113)));
evalcond[3]=((((-1.0)*r02*x13113))+(((-1.0)*x13110*x13114))+((r01*x13116)));
evalcond[4]=((-1.0)+((r02*x13109))+(((-1.0)*x13110*x13113))+((r01*x13115)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13113))+(((-1.0)*x13112*x13114))+((r11*x13116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13117 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13117.valid){
continue;
}
CheckValue<IkReal> x13118=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13117.value)+(((1.5707963267949)*(x13118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13119=IKcos(j4);
IkReal x13120=IKsin(j4);
IkReal x13121=(cj5*r00);
IkReal x13122=(cj5*r20);
IkReal x13123=(cj5*r10);
IkReal x13124=((1.0)*x13119);
IkReal x13125=((1.0)*x13120);
IkReal x13126=(sj5*x13119);
IkReal x13127=(sj5*x13120);
evalcond[0]=((((-1.0)*x13122*x13124))+((r22*x13120))+((r21*x13126)));
evalcond[1]=((((-1.0)*x13123*x13124))+((r11*x13126))+((r12*x13120)));
evalcond[2]=((((-1.0)*x13122*x13125))+(((-1.0)*r22*x13124))+((r21*x13127)));
evalcond[3]=((((-1.0)*r02*x13124))+(((-1.0)*x13121*x13125))+((r01*x13127)));
evalcond[4]=((-1.0)+(((-1.0)*x13121*x13124))+((r01*x13126))+((r02*x13120)));
evalcond[5]=((1.0)+(((-1.0)*x13123*x13125))+((r11*x13127))+(((-1.0)*r12*x13124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13128=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13128);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13128);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13129=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13129);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13129);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13130=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13130))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13130)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13131=((1.0)*cj5);
CheckValue<IkReal> x13132=IKPowWithIntegerCheck(((((-1.0)*r10*x13131))+((r11*sj5))),-1);
if(!x13132.valid){
continue;
}
CheckValue<IkReal> x13133=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13131))),-1);
if(!x13133.valid){
continue;
}
if( IKabs(((-1.0)*(x13132.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13133.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13132.value)))+IKsqr(((x13133.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13132.value)), ((x13133.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13134=IKsin(j4);
IkReal x13135=IKcos(j4);
IkReal x13136=((1.0)*cj5);
IkReal x13137=((1.0)*cj2);
IkReal x13138=(sj5*x13135);
IkReal x13139=(sj5*x13134);
evalcond[0]=((-1.0)*r22*x13135);
evalcond[1]=((((-1.0)*cj1*x13137))+((sj1*sj2))+((r22*x13134)));
evalcond[2]=(((r01*x13139))+(((-1.0)*r00*x13134*x13136)));
evalcond[3]=((((-1.0)*r10*x13135*x13136))+((r11*x13138)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13134*x13136))+((r11*x13139)));
evalcond[5]=(((r01*x13138))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13135*x13136))+(((-1.0)*sj1*x13137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13140=IKPowWithIntegerCheck(r22,-1);
if(!x13140.valid){
continue;
}
CheckValue<IkReal> x13141=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13141.valid){
continue;
}
if( IKabs(((x13140.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13141.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13140.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13141.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13140.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13141.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13142=IKsin(j4);
IkReal x13143=IKcos(j4);
IkReal x13144=((1.0)*cj5);
IkReal x13145=((1.0)*cj2);
IkReal x13146=(sj5*x13143);
IkReal x13147=(sj5*x13142);
evalcond[0]=((-1.0)*r22*x13143);
evalcond[1]=(((r22*x13142))+((sj1*sj2))+(((-1.0)*cj1*x13145)));
evalcond[2]=((((-1.0)*r00*x13142*x13144))+((r01*x13147)));
evalcond[3]=((((-1.0)*r10*x13143*x13144))+((r11*x13146)));
evalcond[4]=((1.0)+((r11*x13147))+(((-1.0)*r10*x13142*x13144)));
evalcond[5]=((((-1.0)*r00*x13143*x13144))+(((-1.0)*sj1*x13145))+(((-1.0)*cj1*sj2))+((r01*x13146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13148=(sj1*sj2);
IkReal x13149=(cj5*r10);
IkReal x13150=(r11*sj5);
IkReal x13151=(cj1*cj2);
CheckValue<IkReal> x13152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13152.valid){
continue;
}
CheckValue<IkReal> x13153 = IKatan2WithCheck(IkReal((((x13149*x13151))+(((-1.0)*x13148*x13149))+(((-1.0)*x13150*x13151))+((x13148*x13150)))),IkReal((((r12*x13151))+(((-1.0)*r12*x13148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13152.value)))+(x13153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13154=IKcos(j4);
IkReal x13155=IKsin(j4);
IkReal x13156=(cj5*r00);
IkReal x13157=(cj5*r10);
IkReal x13158=(r21*sj5);
IkReal x13159=((1.0)*cj2);
IkReal x13160=(cj5*r20);
IkReal x13161=((1.0)*x13154);
IkReal x13162=((1.0)*x13155);
IkReal x13163=(sj5*x13155);
IkReal x13164=(sj5*x13154);
evalcond[0]=((((-1.0)*x13157*x13161))+((r11*x13164))+((r12*x13155)));
evalcond[1]=((((-1.0)*x13160*x13162))+((x13155*x13158))+(((-1.0)*r22*x13161)));
evalcond[2]=(((r01*x13163))+(((-1.0)*x13156*x13162))+(((-1.0)*r02*x13161)));
evalcond[3]=((1.0)+(((-1.0)*x13157*x13162))+(((-1.0)*r12*x13161))+((r11*x13163)));
evalcond[4]=((((-1.0)*x13160*x13161))+((sj1*sj2))+((x13154*x13158))+(((-1.0)*cj1*x13159))+((r22*x13155)));
evalcond[5]=((((-1.0)*sj1*x13159))+((r02*x13155))+((r01*x13164))+(((-1.0)*x13156*x13161))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13165=((1.0)*cj5);
CheckValue<IkReal> x13166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13165))+(((-1.0)*r00*sj5)))),-1);
if(!x13166.valid){
continue;
}
CheckValue<IkReal> x13167 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13165))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13166.value)))+(x13167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13168=IKcos(j4);
IkReal x13169=IKsin(j4);
IkReal x13170=(cj5*r00);
IkReal x13171=(cj5*r10);
IkReal x13172=(r21*sj5);
IkReal x13173=((1.0)*cj2);
IkReal x13174=(cj5*r20);
IkReal x13175=((1.0)*x13168);
IkReal x13176=((1.0)*x13169);
IkReal x13177=(sj5*x13169);
IkReal x13178=(sj5*x13168);
evalcond[0]=((((-1.0)*x13171*x13175))+((r11*x13178))+((r12*x13169)));
evalcond[1]=((((-1.0)*r22*x13175))+((x13169*x13172))+(((-1.0)*x13174*x13176)));
evalcond[2]=(((r01*x13177))+(((-1.0)*x13170*x13176))+(((-1.0)*r02*x13175)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13175))+(((-1.0)*x13171*x13176))+((r11*x13177)));
evalcond[4]=((((-1.0)*cj1*x13173))+((r22*x13169))+((sj1*sj2))+((x13168*x13172))+(((-1.0)*x13174*x13175)));
evalcond[5]=(((r01*x13178))+(((-1.0)*sj1*x13173))+(((-1.0)*cj1*sj2))+((r02*x13169))+(((-1.0)*x13170*x13175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13179=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13179.valid){
continue;
}
CheckValue<IkReal> x13180 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13179.value)))+(x13180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13181=IKcos(j4);
IkReal x13182=IKsin(j4);
IkReal x13183=(cj5*r00);
IkReal x13184=(cj5*r10);
IkReal x13185=(r21*sj5);
IkReal x13186=((1.0)*cj2);
IkReal x13187=(cj5*r20);
IkReal x13188=((1.0)*x13181);
IkReal x13189=((1.0)*x13182);
IkReal x13190=(sj5*x13182);
IkReal x13191=(sj5*x13181);
evalcond[0]=(((r12*x13182))+((r11*x13191))+(((-1.0)*x13184*x13188)));
evalcond[1]=(((x13182*x13185))+(((-1.0)*r22*x13188))+(((-1.0)*x13187*x13189)));
evalcond[2]=((((-1.0)*x13183*x13189))+(((-1.0)*r02*x13188))+((r01*x13190)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13188))+((r11*x13190))+(((-1.0)*x13184*x13189)));
evalcond[4]=(((r22*x13182))+((sj1*sj2))+(((-1.0)*cj1*x13186))+((x13181*x13185))+(((-1.0)*x13187*x13188)));
evalcond[5]=(((r02*x13182))+(((-1.0)*x13183*x13188))+(((-1.0)*cj1*sj2))+((r01*x13191))+(((-1.0)*sj1*x13186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13192=((-1.0)*r00);
IkReal x13194 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13194)==0){
continue;
}
IkReal x13193=pow(x13194,-0.5);
CheckValue<IkReal> x13195 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13192),IKFAST_ATAN2_MAGTHRESH);
if(!x13195.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13195.value));
IkReal gconst19=(r01*x13193);
IkReal gconst20=(x13192*x13193);
CheckValue<IkReal> x13196 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13196.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13196.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13197=((-1.0)*r00);
IkReal x13198=x13193;
CheckValue<IkReal> x13200 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13197),IKFAST_ATAN2_MAGTHRESH);
if(!x13200.valid){
continue;
}
IkReal x13199=((-1.0)*(x13200.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13199;
IkReal gconst18=x13199;
IkReal gconst19=(r01*x13198);
IkReal gconst20=(x13197*x13198);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13201=((-1.0)*r00);
IkReal x13202=x13193;
CheckValue<IkReal> x13204 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13201),IKFAST_ATAN2_MAGTHRESH);
if(!x13204.valid){
continue;
}
IkReal x13203=((-1.0)*(x13204.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13203;
IkReal gconst18=x13203;
IkReal gconst19=(r01*x13202);
IkReal gconst20=(x13201*x13202);
CheckValue<IkReal> x13212=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13212.valid){
continue;
}
IkReal x13205=x13212.value;
IkReal x13206=(sj3*x13205);
IkReal x13207=(r11*x13206);
IkReal x13208=(r21*x13206);
IkReal x13209=(r20*x13206);
IkReal x13210=(r10*x13206);
IkReal x13211=(r00*r01*x13206);
j4eval[0]=IKsign((((r10*x13209*(r00*r00)))+((r21*x13207*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x13208))+((r00*r01*r20*x13207))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13213=gconst19*gconst19;
IkReal x13214=gconst20*gconst20;
IkReal x13215=(gconst20*sj3);
IkReal x13216=((1.0)*cj3);
IkReal x13217=(r10*sj3);
IkReal x13218=(gconst19*r21);
IkReal x13219=(r11*r20);
IkReal x13220=(cj3*gconst20);
IkReal x13221=((1.0)*r10*r20);
IkReal x13222=(r21*x13213);
CheckValue<IkReal> x13223=IKPowWithIntegerCheck(IKsign((((r10*x13218*x13220))+(((-1.0)*r10*r20*x13214*x13216))+((gconst19*x13219*x13220))+(((-1.0)*r11*x13216*x13222))+(((-1.0)*r12*r22*x13216)))),-1);
if(!x13223.valid){
continue;
}
CheckValue<IkReal> x13224 = IKatan2WithCheck(IkReal((((gconst19*r22*x13217))+((r11*r22*x13215)))),IkReal((((x13217*x13222))+(((-1.0)*gconst19*x13215*x13221))+((r11*x13215*x13218))+(((-1.0)*sj3*x13214*x13219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13223.value)))+(x13224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13225=IKsin(j4);
IkReal x13226=IKcos(j4);
IkReal x13227=(sj1*sj2);
IkReal x13228=(gconst20*sj3);
IkReal x13229=(gconst19*r21);
IkReal x13230=(gconst20*r10);
IkReal x13231=(cj3*gconst19);
IkReal x13232=(gconst19*sj3);
IkReal x13233=((1.0)*cj1);
IkReal x13234=(cj3*gconst20);
IkReal x13235=(cj2*sj1);
IkReal x13236=(cj2*x13233);
IkReal x13237=((1.0)*x13226);
IkReal x13238=((1.0)*x13225);
IkReal x13239=(cj3*x13225);
IkReal x13240=(gconst19*x13225);
evalcond[0]=((((-1.0)*gconst20*r20*x13238))+((x13225*x13229))+(((-1.0)*r22*x13237)));
evalcond[1]=((((-1.0)*r02*x13237))+((r01*x13240))+(((-1.0)*gconst20*r00*x13238)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13237))+((r11*x13240))+(((-1.0)*x13230*x13238)));
evalcond[3]=(((r10*x13232))+((r11*x13228))+((r12*x13239))+((r11*x13226*x13231))+(((-1.0)*cj3*x13230*x13237)));
evalcond[4]=(((r10*x13226*x13228))+((r10*x13231))+((r11*x13234))+(((-1.0)*r12*sj3*x13238))+(((-1.0)*r11*x13232*x13237)));
evalcond[5]=(((r20*x13232))+((r21*x13228))+((cj1*sj2))+((r22*x13239))+((cj3*x13226*x13229))+(((-1.0)*r20*x13234*x13237))+x13235);
evalcond[6]=(((r01*x13226*x13231))+((r02*x13239))+(((-1.0)*r00*x13234*x13237))+((r01*x13228))+x13227+(((-1.0)*x13236))+((r00*x13232)));
evalcond[7]=(((r20*x13231))+(((-1.0)*r22*sj3*x13238))+(((-1.0)*sj3*x13229*x13237))+((r20*x13226*x13228))+((r21*x13234))+x13227+(((-1.0)*x13236)));
evalcond[8]=(((r00*x13226*x13228))+((r01*x13234))+(((-1.0)*r01*x13232*x13237))+(((-1.0)*x13235))+(((-1.0)*r02*sj3*x13238))+(((-1.0)*sj2*x13233))+((r00*x13231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13241=gconst19*gconst19;
IkReal x13242=gconst20*gconst20;
IkReal x13243=(r21*sj3);
IkReal x13244=(cj3*r11);
IkReal x13245=(gconst19*gconst20);
IkReal x13246=((1.0)*r10);
IkReal x13247=(cj3*r10);
IkReal x13248=(r20*x13242);
CheckValue<IkReal> x13249 = IKatan2WithCheck(IkReal((((gconst19*r22*x13247))+((gconst20*r22*x13244)))),IkReal((((r21*x13244*x13245))+(((-1.0)*x13244*x13248))+(((-1.0)*cj3*r20*x13245*x13246))+((r21*x13241*x13247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13249.valid){
continue;
}
CheckValue<IkReal> x13250=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13243*x13245*x13246))+((r11*x13241*x13243))+((r12*r22*sj3))+((r10*sj3*x13248))+(((-1.0)*r11*r20*sj3*x13245)))),-1);
if(!x13250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13249.value)+(((1.5707963267949)*(x13250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13251=IKsin(j4);
IkReal x13252=IKcos(j4);
IkReal x13253=(sj1*sj2);
IkReal x13254=(gconst20*sj3);
IkReal x13255=(gconst19*r21);
IkReal x13256=(gconst20*r10);
IkReal x13257=(cj3*gconst19);
IkReal x13258=(gconst19*sj3);
IkReal x13259=((1.0)*cj1);
IkReal x13260=(cj3*gconst20);
IkReal x13261=(cj2*sj1);
IkReal x13262=(cj2*x13259);
IkReal x13263=((1.0)*x13252);
IkReal x13264=((1.0)*x13251);
IkReal x13265=(cj3*x13251);
IkReal x13266=(gconst19*x13251);
evalcond[0]=((((-1.0)*r22*x13263))+(((-1.0)*gconst20*r20*x13264))+((x13251*x13255)));
evalcond[1]=((((-1.0)*gconst20*r00*x13264))+((r01*x13266))+(((-1.0)*r02*x13263)));
evalcond[2]=((1.0)+((r11*x13266))+(((-1.0)*x13256*x13264))+(((-1.0)*r12*x13263)));
evalcond[3]=(((r10*x13258))+((r12*x13265))+((r11*x13254))+(((-1.0)*cj3*x13256*x13263))+((r11*x13252*x13257)));
evalcond[4]=(((r11*x13260))+((r10*x13257))+(((-1.0)*r11*x13258*x13263))+((r10*x13252*x13254))+(((-1.0)*r12*sj3*x13264)));
evalcond[5]=(((r21*x13254))+((cj1*sj2))+(((-1.0)*r20*x13260*x13263))+((r22*x13265))+x13261+((cj3*x13252*x13255))+((r20*x13258)));
evalcond[6]=((((-1.0)*x13262))+((r01*x13252*x13257))+(((-1.0)*r00*x13260*x13263))+((r01*x13254))+((r00*x13258))+((r02*x13265))+x13253);
evalcond[7]=((((-1.0)*sj3*x13255*x13263))+((r20*x13252*x13254))+(((-1.0)*x13262))+((r21*x13260))+(((-1.0)*r22*sj3*x13264))+x13253+((r20*x13257)));
evalcond[8]=((((-1.0)*x13261))+((r01*x13260))+(((-1.0)*r02*sj3*x13264))+((r00*x13257))+(((-1.0)*sj2*x13259))+((r00*x13252*x13254))+(((-1.0)*r01*x13258*x13263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13267 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13267.valid){
continue;
}
CheckValue<IkReal> x13268=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13267.value)+(((1.5707963267949)*(x13268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13269=IKsin(j4);
IkReal x13270=IKcos(j4);
IkReal x13271=(sj1*sj2);
IkReal x13272=(gconst20*sj3);
IkReal x13273=(gconst19*r21);
IkReal x13274=(gconst20*r10);
IkReal x13275=(cj3*gconst19);
IkReal x13276=(gconst19*sj3);
IkReal x13277=((1.0)*cj1);
IkReal x13278=(cj3*gconst20);
IkReal x13279=(cj2*sj1);
IkReal x13280=(cj2*x13277);
IkReal x13281=((1.0)*x13270);
IkReal x13282=((1.0)*x13269);
IkReal x13283=(cj3*x13269);
IkReal x13284=(gconst19*x13269);
evalcond[0]=((((-1.0)*r22*x13281))+(((-1.0)*gconst20*r20*x13282))+((x13269*x13273)));
evalcond[1]=((((-1.0)*gconst20*r00*x13282))+(((-1.0)*r02*x13281))+((r01*x13284)));
evalcond[2]=((1.0)+((r11*x13284))+(((-1.0)*x13274*x13282))+(((-1.0)*r12*x13281)));
evalcond[3]=(((r12*x13283))+((r11*x13272))+((r10*x13276))+(((-1.0)*cj3*x13274*x13281))+((r11*x13270*x13275)));
evalcond[4]=(((r11*x13278))+((r10*x13275))+((r10*x13270*x13272))+(((-1.0)*r12*sj3*x13282))+(((-1.0)*r11*x13276*x13281)));
evalcond[5]=(((r21*x13272))+((r20*x13276))+((cj1*sj2))+((cj3*x13270*x13273))+((r22*x13283))+x13279+(((-1.0)*r20*x13278*x13281)));
evalcond[6]=(((r01*x13270*x13275))+((r01*x13272))+(((-1.0)*r00*x13278*x13281))+((r00*x13276))+((r02*x13283))+x13271+(((-1.0)*x13280)));
evalcond[7]=(((r21*x13278))+(((-1.0)*sj3*x13273*x13281))+((r20*x13270*x13272))+((r20*x13275))+(((-1.0)*r22*sj3*x13282))+x13271+(((-1.0)*x13280)));
evalcond[8]=(((r00*x13270*x13272))+(((-1.0)*x13279))+((r01*x13278))+(((-1.0)*sj2*x13277))+((r00*x13275))+(((-1.0)*r01*x13276*x13281))+(((-1.0)*r02*sj3*x13282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13285=((-1.0)*r01);
IkReal x13287 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13287)==0){
continue;
}
IkReal x13286=pow(x13287,-0.5);
CheckValue<IkReal> x13288 = IKatan2WithCheck(IkReal(x13285),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13288.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13288.value))));
IkReal gconst22=(x13285*x13286);
IkReal gconst23=((1.0)*r00*x13286);
CheckValue<IkReal> x13289 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13289.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13289.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13290=((-1.0)*r01);
CheckValue<IkReal> x13293 = IKatan2WithCheck(IkReal(x13290),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13293.valid){
continue;
}
IkReal x13291=((1.0)*(x13293.value));
IkReal x13292=x13286;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13291)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13291)));
IkReal gconst22=(x13290*x13292);
IkReal gconst23=((1.0)*r00*x13292);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13294=((-1.0)*r01);
CheckValue<IkReal> x13297 = IKatan2WithCheck(IkReal(x13294),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13297.valid){
continue;
}
IkReal x13295=((1.0)*(x13297.value));
IkReal x13296=x13286;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13295)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13295)));
IkReal gconst22=(x13294*x13296);
IkReal gconst23=((1.0)*r00*x13296);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13298=gconst22*gconst22;
IkReal x13299=gconst23*gconst23;
IkReal x13300=(r21*sj3);
IkReal x13301=((1.0)*cj3);
IkReal x13302=(gconst23*r11);
IkReal x13303=(r22*sj3);
IkReal x13304=(gconst22*r10);
IkReal x13305=((1.0)*r20*sj3);
CheckValue<IkReal> x13306 = IKatan2WithCheck(IkReal((((x13303*x13304))+((x13302*x13303)))),IkReal((((r10*x13298*x13300))+(((-1.0)*r11*x13299*x13305))+((gconst22*x13300*x13302))+(((-1.0)*gconst23*x13304*x13305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13306.valid){
continue;
}
CheckValue<IkReal> x13307=IKPowWithIntegerCheck(IKsign((((cj3*gconst23*r21*x13304))+((cj3*gconst22*r20*x13302))+(((-1.0)*r10*r20*x13299*x13301))+(((-1.0)*r11*r21*x13298*x13301))+(((-1.0)*r12*r22*x13301)))),-1);
if(!x13307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13306.value)+(((1.5707963267949)*(x13307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13308=IKsin(j4);
IkReal x13309=IKcos(j4);
IkReal x13310=(sj1*sj2);
IkReal x13311=(gconst23*sj3);
IkReal x13312=(gconst22*sj3);
IkReal x13313=(cj2*sj1);
IkReal x13314=((1.0)*cj1);
IkReal x13315=(cj3*gconst23);
IkReal x13316=(cj3*gconst22);
IkReal x13317=(cj2*x13314);
IkReal x13318=((1.0)*x13309);
IkReal x13319=(cj3*x13308);
IkReal x13320=(gconst22*x13308);
IkReal x13321=((1.0)*sj3*x13308);
IkReal x13322=(x13309*x13316);
IkReal x13323=((1.0)*gconst23*x13308);
evalcond[0]=(((r21*x13320))+(((-1.0)*r20*x13323))+(((-1.0)*r22*x13318)));
evalcond[1]=((((-1.0)*r00*x13323))+(((-1.0)*r02*x13318))+((r01*x13320)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13323))+((r11*x13320))+(((-1.0)*r12*x13318)));
evalcond[3]=(((r11*x13311))+((r10*x13312))+(((-1.0)*r10*x13315*x13318))+((r11*x13322))+((r12*x13319)));
evalcond[4]=((((-1.0)*r12*x13321))+((r11*x13315))+((r10*x13316))+((r10*x13309*x13311))+(((-1.0)*r11*x13312*x13318)));
evalcond[5]=(((r20*x13312))+((cj1*sj2))+(((-1.0)*r20*x13315*x13318))+((r22*x13319))+((r21*x13322))+((r21*x13311))+x13313);
evalcond[6]=(((r01*x13311))+((r00*x13312))+((r01*x13322))+(((-1.0)*r00*x13315*x13318))+(((-1.0)*x13317))+x13310+((r02*x13319)));
evalcond[7]=((((-1.0)*r22*x13321))+((r20*x13316))+(((-1.0)*r21*x13312*x13318))+(((-1.0)*x13317))+((r21*x13315))+x13310+((r20*x13309*x13311)));
evalcond[8]=((((-1.0)*r02*x13321))+(((-1.0)*sj2*x13314))+((r01*x13315))+((r00*x13309*x13311))+((r00*x13316))+(((-1.0)*r01*x13312*x13318))+(((-1.0)*x13313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13324=((1.0)*gconst23);
CheckValue<IkReal> x13325=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13324)))),-1);
if(!x13325.valid){
continue;
}
CheckValue<IkReal> x13326 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13325.value)))+(x13326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13327=IKsin(j4);
IkReal x13328=IKcos(j4);
IkReal x13329=(sj1*sj2);
IkReal x13330=(gconst23*sj3);
IkReal x13331=(gconst22*sj3);
IkReal x13332=(cj2*sj1);
IkReal x13333=((1.0)*cj1);
IkReal x13334=(cj3*gconst23);
IkReal x13335=(cj3*gconst22);
IkReal x13336=(cj2*x13333);
IkReal x13337=((1.0)*x13328);
IkReal x13338=(cj3*x13327);
IkReal x13339=(gconst22*x13327);
IkReal x13340=((1.0)*sj3*x13327);
IkReal x13341=(x13328*x13335);
IkReal x13342=((1.0)*gconst23*x13327);
evalcond[0]=((((-1.0)*r22*x13337))+((r21*x13339))+(((-1.0)*r20*x13342)));
evalcond[1]=(((r01*x13339))+(((-1.0)*r00*x13342))+(((-1.0)*r02*x13337)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13337))+(((-1.0)*r10*x13342))+((r11*x13339)));
evalcond[3]=(((r10*x13331))+(((-1.0)*r10*x13334*x13337))+((r11*x13341))+((r12*x13338))+((r11*x13330)));
evalcond[4]=((((-1.0)*r11*x13331*x13337))+((r10*x13335))+((r10*x13328*x13330))+(((-1.0)*r12*x13340))+((r11*x13334)));
evalcond[5]=((((-1.0)*r20*x13334*x13337))+((r22*x13338))+((cj1*sj2))+((r21*x13341))+((r20*x13331))+((r21*x13330))+x13332);
evalcond[6]=((((-1.0)*x13336))+((r02*x13338))+((r00*x13331))+((r01*x13330))+((r01*x13341))+(((-1.0)*r00*x13334*x13337))+x13329);
evalcond[7]=((((-1.0)*x13336))+(((-1.0)*r21*x13331*x13337))+((r20*x13335))+((r21*x13334))+((r20*x13328*x13330))+(((-1.0)*r22*x13340))+x13329);
evalcond[8]=((((-1.0)*sj2*x13333))+(((-1.0)*x13332))+(((-1.0)*r02*x13340))+((r00*x13328*x13330))+((r00*x13335))+((r01*x13334))+(((-1.0)*r01*x13331*x13337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13343=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13343.valid){
continue;
}
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13343.value)))+(x13344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13345=IKsin(j4);
IkReal x13346=IKcos(j4);
IkReal x13347=(sj1*sj2);
IkReal x13348=(gconst23*sj3);
IkReal x13349=(gconst22*sj3);
IkReal x13350=(cj2*sj1);
IkReal x13351=((1.0)*cj1);
IkReal x13352=(cj3*gconst23);
IkReal x13353=(cj3*gconst22);
IkReal x13354=(cj2*x13351);
IkReal x13355=((1.0)*x13346);
IkReal x13356=(cj3*x13345);
IkReal x13357=(gconst22*x13345);
IkReal x13358=((1.0)*sj3*x13345);
IkReal x13359=(x13346*x13353);
IkReal x13360=((1.0)*gconst23*x13345);
evalcond[0]=((((-1.0)*r22*x13355))+(((-1.0)*r20*x13360))+((r21*x13357)));
evalcond[1]=((((-1.0)*r02*x13355))+(((-1.0)*r00*x13360))+((r01*x13357)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13360))+(((-1.0)*r12*x13355))+((r11*x13357)));
evalcond[3]=(((r10*x13349))+((r11*x13348))+(((-1.0)*r10*x13352*x13355))+((r11*x13359))+((r12*x13356)));
evalcond[4]=(((r10*x13346*x13348))+(((-1.0)*r12*x13358))+(((-1.0)*r11*x13349*x13355))+((r10*x13353))+((r11*x13352)));
evalcond[5]=(((r22*x13356))+(((-1.0)*r20*x13352*x13355))+((cj1*sj2))+((r21*x13348))+((r21*x13359))+((r20*x13349))+x13350);
evalcond[6]=(((r02*x13356))+(((-1.0)*r00*x13352*x13355))+((r01*x13359))+((r00*x13349))+((r01*x13348))+(((-1.0)*x13354))+x13347);
evalcond[7]=((((-1.0)*r22*x13358))+((r20*x13353))+(((-1.0)*r21*x13349*x13355))+((r21*x13352))+((r20*x13346*x13348))+(((-1.0)*x13354))+x13347);
evalcond[8]=((((-1.0)*r02*x13358))+(((-1.0)*x13350))+((r01*x13352))+((r00*x13353))+(((-1.0)*r01*x13349*x13355))+(((-1.0)*sj2*x13351))+((r00*x13346*x13348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13362 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13362)==0){
continue;
}
IkReal x13361=pow(x13362,-0.5);
CheckValue<IkReal> x13363 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13363.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13363.value));
IkReal gconst25=((-1.0)*r21*x13361);
IkReal gconst26=(r20*x13361);
CheckValue<IkReal> x13364 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13364.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13364.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13367 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13367.valid){
continue;
}
IkReal x13365=((-1.0)*(x13367.value));
IkReal x13366=x13361;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13365;
IkReal gconst24=x13365;
IkReal gconst25=((-1.0)*r21*x13366);
IkReal gconst26=(r20*x13366);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13370 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13370.valid){
continue;
}
IkReal x13368=((-1.0)*(x13370.value));
IkReal x13369=x13361;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13368;
IkReal gconst24=x13368;
IkReal gconst25=((-1.0)*r21*x13369);
IkReal gconst26=(r20*x13369);
CheckValue<IkReal> x13378=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13378.valid){
continue;
}
IkReal x13371=x13378.value;
IkReal x13372=(sj3*x13371);
IkReal x13373=(r11*x13372);
IkReal x13374=(r00*x13372);
IkReal x13375=(r01*x13372);
IkReal x13376=(r10*x13372);
IkReal x13377=(r20*r21*x13372);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x13373*(r21*r21)))+((r10*x13374*(r20*r20)))+((r00*r20*r21*x13373))+((r10*r20*r21*x13375))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13379=gconst25*gconst25;
IkReal x13380=gconst26*gconst26;
IkReal x13381=(r00*r11);
IkReal x13382=(r01*r10);
IkReal x13383=(r02*sj3);
IkReal x13384=(gconst25*r10);
IkReal x13385=(gconst26*r11);
IkReal x13386=((1.0)*sj3);
IkReal x13387=((1.0)*cj3);
IkReal x13388=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r11*x13379*x13387))+(((-1.0)*r02*r12*x13387))+((x13382*x13388))+((x13381*x13388))+(((-1.0)*r00*r10*x13380*x13387)))),-1);
if(!x13389.valid){
continue;
}
CheckValue<IkReal> x13390 = IKatan2WithCheck(IkReal((((x13383*x13384))+((x13383*x13385)))),IkReal((((sj3*x13379*x13382))+(((-1.0)*x13380*x13381*x13386))+((gconst25*r01*sj3*x13385))+(((-1.0)*gconst26*r00*x13384*x13386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13389.value)))+(x13390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13391=IKsin(j4);
IkReal x13392=IKcos(j4);
IkReal x13393=(sj1*sj2);
IkReal x13394=(gconst26*sj3);
IkReal x13395=(gconst25*sj3);
IkReal x13396=(gconst26*r10);
IkReal x13397=(gconst25*r11);
IkReal x13398=(cj3*gconst25);
IkReal x13399=((1.0)*cj2);
IkReal x13400=(cj1*sj2);
IkReal x13401=(gconst26*r00);
IkReal x13402=(gconst26*r20);
IkReal x13403=(cj3*gconst26);
IkReal x13404=(cj1*x13399);
IkReal x13405=((1.0)*x13392);
IkReal x13406=((1.0)*x13391);
IkReal x13407=(cj3*x13391);
IkReal x13408=(gconst25*x13391);
evalcond[0]=(((r21*x13408))+(((-1.0)*x13402*x13406))+(((-1.0)*r22*x13405)));
evalcond[1]=((((-1.0)*r02*x13405))+((r01*x13408))+(((-1.0)*x13401*x13406)));
evalcond[2]=((1.0)+((x13391*x13397))+(((-1.0)*x13396*x13406))+(((-1.0)*r12*x13405)));
evalcond[3]=(((r11*x13394))+((r10*x13395))+((r12*x13407))+((cj3*x13392*x13397))+(((-1.0)*cj3*x13396*x13405)));
evalcond[4]=(((r10*x13398))+((r11*x13403))+(((-1.0)*r11*x13395*x13405))+((r10*x13392*x13394))+(((-1.0)*r12*sj3*x13406)));
evalcond[5]=(x13400+((cj2*sj1))+(((-1.0)*cj3*x13402*x13405))+((r21*x13394))+((r21*x13392*x13398))+((r20*x13395))+((r22*x13407)));
evalcond[6]=(((r01*x13392*x13398))+(((-1.0)*cj3*x13401*x13405))+((r00*x13395))+(((-1.0)*x13404))+((r01*x13394))+((r02*x13407))+x13393);
evalcond[7]=(((r20*x13392*x13394))+(((-1.0)*r22*sj3*x13406))+((r20*x13398))+((r21*x13403))+(((-1.0)*x13404))+(((-1.0)*r21*x13395*x13405))+x13393);
evalcond[8]=(((r01*x13403))+(((-1.0)*r01*x13395*x13405))+((r00*x13392*x13394))+(((-1.0)*r02*sj3*x13406))+((r00*x13398))+(((-1.0)*x13400))+(((-1.0)*sj1*x13399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13409=gconst26*gconst26;
IkReal x13410=gconst25*gconst25;
IkReal x13411=(r01*r10);
IkReal x13412=(cj3*r11);
IkReal x13413=(gconst25*gconst26);
IkReal x13414=(cj3*r10);
IkReal x13415=(r00*x13409);
IkReal x13416=((1.0)*sj3*x13413);
CheckValue<IkReal> x13417=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13415))+((r02*r12*sj3))+(((-1.0)*x13411*x13416))+((r01*r11*sj3*x13410))+(((-1.0)*r00*r11*x13416)))),-1);
if(!x13417.valid){
continue;
}
CheckValue<IkReal> x13418 = IKatan2WithCheck(IkReal((((gconst25*r02*x13414))+((gconst26*r02*x13412)))),IkReal(((((-1.0)*x13412*x13415))+((cj3*x13410*x13411))+((r01*x13412*x13413))+(((-1.0)*r00*x13413*x13414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13417.value)))+(x13418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13419=IKsin(j4);
IkReal x13420=IKcos(j4);
IkReal x13421=(sj1*sj2);
IkReal x13422=(gconst26*sj3);
IkReal x13423=(gconst25*sj3);
IkReal x13424=(gconst26*r10);
IkReal x13425=(gconst25*r11);
IkReal x13426=(cj3*gconst25);
IkReal x13427=((1.0)*cj2);
IkReal x13428=(cj1*sj2);
IkReal x13429=(gconst26*r00);
IkReal x13430=(gconst26*r20);
IkReal x13431=(cj3*gconst26);
IkReal x13432=(cj1*x13427);
IkReal x13433=((1.0)*x13420);
IkReal x13434=((1.0)*x13419);
IkReal x13435=(cj3*x13419);
IkReal x13436=(gconst25*x13419);
evalcond[0]=((((-1.0)*r22*x13433))+(((-1.0)*x13430*x13434))+((r21*x13436)));
evalcond[1]=(((r01*x13436))+(((-1.0)*x13429*x13434))+(((-1.0)*r02*x13433)));
evalcond[2]=((1.0)+((x13419*x13425))+(((-1.0)*r12*x13433))+(((-1.0)*x13424*x13434)));
evalcond[3]=(((cj3*x13420*x13425))+(((-1.0)*cj3*x13424*x13433))+((r11*x13422))+((r12*x13435))+((r10*x13423)));
evalcond[4]=(((r10*x13420*x13422))+(((-1.0)*r11*x13423*x13433))+((r11*x13431))+(((-1.0)*r12*sj3*x13434))+((r10*x13426)));
evalcond[5]=(x13428+((cj2*sj1))+((r21*x13420*x13426))+((r22*x13435))+((r21*x13422))+(((-1.0)*cj3*x13430*x13433))+((r20*x13423)));
evalcond[6]=(x13421+(((-1.0)*x13432))+((r02*x13435))+((r01*x13420*x13426))+(((-1.0)*cj3*x13429*x13433))+((r00*x13423))+((r01*x13422)));
evalcond[7]=(x13421+(((-1.0)*x13432))+((r20*x13420*x13422))+(((-1.0)*r21*x13423*x13433))+((r21*x13431))+(((-1.0)*r22*sj3*x13434))+((r20*x13426)));
evalcond[8]=(((r01*x13431))+((r00*x13420*x13422))+(((-1.0)*x13428))+(((-1.0)*sj1*x13427))+(((-1.0)*r01*x13423*x13433))+(((-1.0)*r02*sj3*x13434))+((r00*x13426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13437=((1.0)*gconst26);
CheckValue<IkReal> x13438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13437))+(((-1.0)*gconst25*r00)))),-1);
if(!x13438.valid){
continue;
}
CheckValue<IkReal> x13439 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13437))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13438.value)))+(x13439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13440=IKsin(j4);
IkReal x13441=IKcos(j4);
IkReal x13442=(sj1*sj2);
IkReal x13443=(gconst26*sj3);
IkReal x13444=(gconst25*sj3);
IkReal x13445=(gconst26*r10);
IkReal x13446=(gconst25*r11);
IkReal x13447=(cj3*gconst25);
IkReal x13448=((1.0)*cj2);
IkReal x13449=(cj1*sj2);
IkReal x13450=(gconst26*r00);
IkReal x13451=(gconst26*r20);
IkReal x13452=(cj3*gconst26);
IkReal x13453=(cj1*x13448);
IkReal x13454=((1.0)*x13441);
IkReal x13455=((1.0)*x13440);
IkReal x13456=(cj3*x13440);
IkReal x13457=(gconst25*x13440);
evalcond[0]=((((-1.0)*r22*x13454))+((r21*x13457))+(((-1.0)*x13451*x13455)));
evalcond[1]=((((-1.0)*r02*x13454))+(((-1.0)*x13450*x13455))+((r01*x13457)));
evalcond[2]=((1.0)+(((-1.0)*x13445*x13455))+((x13440*x13446))+(((-1.0)*r12*x13454)));
evalcond[3]=(((r12*x13456))+(((-1.0)*cj3*x13445*x13454))+((r10*x13444))+((cj3*x13441*x13446))+((r11*x13443)));
evalcond[4]=((((-1.0)*r11*x13444*x13454))+((r10*x13441*x13443))+((r11*x13452))+(((-1.0)*r12*sj3*x13455))+((r10*x13447)));
evalcond[5]=(x13449+((cj2*sj1))+(((-1.0)*cj3*x13451*x13454))+((r20*x13444))+((r22*x13456))+((r21*x13441*x13447))+((r21*x13443)));
evalcond[6]=(x13442+(((-1.0)*cj3*x13450*x13454))+((r01*x13441*x13447))+(((-1.0)*x13453))+((r00*x13444))+((r01*x13443))+((r02*x13456)));
evalcond[7]=(x13442+((r21*x13452))+((r20*x13441*x13443))+(((-1.0)*x13453))+(((-1.0)*r21*x13444*x13454))+((r20*x13447))+(((-1.0)*r22*sj3*x13455)));
evalcond[8]=((((-1.0)*r02*sj3*x13455))+(((-1.0)*r01*x13444*x13454))+((r00*x13447))+((r00*x13441*x13443))+(((-1.0)*x13449))+((r01*x13452))+(((-1.0)*sj1*x13448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13459 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13459)==0){
continue;
}
IkReal x13458=pow(x13459,-0.5);
CheckValue<IkReal> x13460 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13460.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13460.value))));
IkReal gconst28=((1.0)*r21*x13458);
IkReal gconst29=((-1.0)*r20*x13458);
CheckValue<IkReal> x13461 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13461.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13461.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13464 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13464.valid){
continue;
}
IkReal x13462=((1.0)*(x13464.value));
IkReal x13463=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13462)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13462)));
IkReal gconst28=((1.0)*r21*x13463);
IkReal gconst29=((-1.0)*r20*x13463);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13467 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13467.valid){
continue;
}
IkReal x13465=((1.0)*(x13467.value));
IkReal x13466=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13465)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13465)));
IkReal gconst28=((1.0)*r21*x13466);
IkReal gconst29=((-1.0)*r20*x13466);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13470 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13470.valid){
continue;
}
IkReal x13468=((1.0)*(x13470.value));
IkReal x13469=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13468)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13468)));
IkReal gconst28=((1.0)*r21*x13469);
IkReal gconst29=((-1.0)*r20*x13469);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13473 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13473.valid){
continue;
}
IkReal x13471=((1.0)*(x13473.value));
IkReal x13472=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13471)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13471)));
IkReal gconst28=((1.0)*r21*x13472);
IkReal gconst29=((-1.0)*r20*x13472);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13476 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13476.valid){
continue;
}
IkReal x13474=((1.0)*(x13476.value));
IkReal x13475=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13474)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13474)));
IkReal gconst28=((1.0)*r21*x13475);
IkReal gconst29=((-1.0)*r20*x13475);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13479 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13479.valid){
continue;
}
IkReal x13477=((1.0)*(x13479.value));
IkReal x13478=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13477)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13477)));
IkReal gconst28=((1.0)*r21*x13478);
IkReal gconst29=((-1.0)*r20*x13478);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13480=(gconst29*r10);
IkReal x13481=(gconst28*r11);
CheckValue<IkReal> x13482 = IKatan2WithCheck(IkReal((x13480+(((-1.0)*x13481)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13482.valid){
continue;
}
CheckValue<IkReal> x13483=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13480*x13480)+(x13481*x13481)+(((-2.0)*x13480*x13481)))),-1);
if(!x13483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13482.value)+(((1.5707963267949)*(x13483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13484=IKsin(j4);
IkReal x13485=IKcos(j4);
IkReal x13486=(gconst28*r11);
IkReal x13487=((1.0)*cj2);
IkReal x13488=((1.0)*x13485);
IkReal x13489=(gconst29*x13485);
IkReal x13490=(gconst28*x13484);
IkReal x13491=((1.0)*x13484);
IkReal x13492=(gconst29*x13491);
evalcond[0]=((((-1.0)*r20*x13492))+(((-1.0)*r22*x13488))+((r21*x13490)));
evalcond[1]=((((-1.0)*r00*x13492))+(((-1.0)*r02*x13488))+((r01*x13490)));
evalcond[2]=((((-1.0)*r12*x13491))+(((-1.0)*x13486*x13488))+((r10*x13489)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13488))+(((-1.0)*r10*x13492))+((x13484*x13486)));
evalcond[4]=((((-1.0)*r22*x13491))+((sj1*sj2))+((r20*x13489))+(((-1.0)*cj1*x13487))+(((-1.0)*gconst28*r21*x13488)));
evalcond[5]=((((-1.0)*sj1*x13487))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13491))+((r00*x13489))+(((-1.0)*gconst28*r01*x13488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13493=((1.0)*gconst29);
CheckValue<IkReal> x13494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13493))+(((-1.0)*gconst28*r00)))),-1);
if(!x13494.valid){
continue;
}
CheckValue<IkReal> x13495 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13493))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13494.value)))+(x13495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13496=IKsin(j4);
IkReal x13497=IKcos(j4);
IkReal x13498=(gconst28*r11);
IkReal x13499=((1.0)*cj2);
IkReal x13500=((1.0)*x13497);
IkReal x13501=(gconst29*x13497);
IkReal x13502=(gconst28*x13496);
IkReal x13503=((1.0)*x13496);
IkReal x13504=(gconst29*x13503);
evalcond[0]=((((-1.0)*r20*x13504))+((r21*x13502))+(((-1.0)*r22*x13500)));
evalcond[1]=((((-1.0)*r00*x13504))+(((-1.0)*r02*x13500))+((r01*x13502)));
evalcond[2]=(((r10*x13501))+(((-1.0)*r12*x13503))+(((-1.0)*x13498*x13500)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13500))+((x13496*x13498))+(((-1.0)*r10*x13504)));
evalcond[4]=(((r20*x13501))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13500))+(((-1.0)*cj1*x13499))+(((-1.0)*r22*x13503)));
evalcond[5]=((((-1.0)*gconst28*r01*x13500))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13503))+(((-1.0)*sj1*x13499))+((r00*x13501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13505=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13505.valid){
continue;
}
CheckValue<IkReal> x13506 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13505.value)))+(x13506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13507=IKsin(j4);
IkReal x13508=IKcos(j4);
IkReal x13509=(gconst28*r11);
IkReal x13510=((1.0)*cj2);
IkReal x13511=((1.0)*x13508);
IkReal x13512=(gconst29*x13508);
IkReal x13513=(gconst28*x13507);
IkReal x13514=((1.0)*x13507);
IkReal x13515=(gconst29*x13514);
evalcond[0]=(((r21*x13513))+(((-1.0)*r22*x13511))+(((-1.0)*r20*x13515)));
evalcond[1]=((((-1.0)*r00*x13515))+((r01*x13513))+(((-1.0)*r02*x13511)));
evalcond[2]=((((-1.0)*r12*x13514))+(((-1.0)*x13509*x13511))+((r10*x13512)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13511))+((x13507*x13509))+(((-1.0)*r10*x13515)));
evalcond[4]=((((-1.0)*r22*x13514))+((r20*x13512))+(((-1.0)*cj1*x13510))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13511)));
evalcond[5]=((((-1.0)*sj1*x13510))+(((-1.0)*gconst28*r01*x13511))+(((-1.0)*cj1*sj2))+((r00*x13512))+(((-1.0)*r02*x13514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13518 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13518.valid){
continue;
}
IkReal x13516=((1.0)*(x13518.value));
IkReal x13517=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13516)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13516)));
IkReal gconst28=((1.0)*r21*x13517);
IkReal gconst29=((-1.0)*r20*x13517);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13521 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13521.valid){
continue;
}
IkReal x13519=((1.0)*(x13521.value));
IkReal x13520=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13519)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13519)));
IkReal gconst28=((1.0)*r21*x13520);
IkReal gconst29=((-1.0)*r20*x13520);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13524 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13524.valid){
continue;
}
IkReal x13522=((1.0)*(x13524.value));
IkReal x13523=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13522)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13522)));
IkReal gconst28=((1.0)*r21*x13523);
IkReal gconst29=((-1.0)*r20*x13523);
IkReal x13525=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13529=IKPowWithIntegerCheck(x13525,-1);
if(!x13529.valid){
continue;
}
IkReal x13526=x13529.value;
IkReal x13527=((1.0)*x13526);
IkReal x13528=((((-2.0)*r10*r11*r20*r21*x13526))+(((-1.0)*(r12*r12)))+(((-1.0)*x13527*(r11*r11)*(r21*r21)))+(((-1.0)*x13527*(r10*r10)*(r20*r20))));
j4eval[0]=x13528;
j4eval[1]=r12;
j4eval[2]=x13525;
j4eval[3]=IKsign(x13528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13530=(gconst28*r11);
IkReal x13531=(gconst29*r10);
CheckValue<IkReal> x13532 = IKatan2WithCheck(IkReal((x13530+(((-1.0)*x13531)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13532.valid){
continue;
}
CheckValue<IkReal> x13533=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13531*x13531)))+(((2.0)*x13530*x13531))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13530*x13530))))),-1);
if(!x13533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13532.value)+(((1.5707963267949)*(x13533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13534=IKcos(j4);
IkReal x13535=IKsin(j4);
IkReal x13536=(gconst29*r10);
IkReal x13537=(gconst29*r20);
IkReal x13538=(gconst28*r21);
IkReal x13539=((1.0)*cj2);
IkReal x13540=(gconst29*r00);
IkReal x13541=((1.0)*x13534);
IkReal x13542=((1.0)*x13535);
IkReal x13543=(gconst28*x13534);
IkReal x13544=(gconst28*x13535);
evalcond[0]=((((-1.0)*x13536*x13541))+((r11*x13543))+((r12*x13535)));
evalcond[1]=(((x13535*x13538))+(((-1.0)*r22*x13541))+(((-1.0)*x13537*x13542)));
evalcond[2]=((((-1.0)*x13540*x13542))+((r01*x13544))+(((-1.0)*r02*x13541)));
evalcond[3]=((1.0)+(((-1.0)*x13536*x13542))+((r11*x13544))+(((-1.0)*r12*x13541)));
evalcond[4]=((((-1.0)*cj1*x13539))+((sj1*sj2))+((r22*x13535))+((x13534*x13538))+(((-1.0)*x13537*x13541)));
evalcond[5]=((((-1.0)*x13540*x13541))+(((-1.0)*sj1*x13539))+((r01*x13543))+((r02*x13535))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13545=((1.0)*gconst29);
CheckValue<IkReal> x13546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13545))+(((-1.0)*gconst28*r00)))),-1);
if(!x13546.valid){
continue;
}
CheckValue<IkReal> x13547 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13546.value)))+(x13547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13548=IKcos(j4);
IkReal x13549=IKsin(j4);
IkReal x13550=(gconst29*r10);
IkReal x13551=(gconst29*r20);
IkReal x13552=(gconst28*r21);
IkReal x13553=((1.0)*cj2);
IkReal x13554=(gconst29*r00);
IkReal x13555=((1.0)*x13548);
IkReal x13556=((1.0)*x13549);
IkReal x13557=(gconst28*x13548);
IkReal x13558=(gconst28*x13549);
evalcond[0]=(((r12*x13549))+((r11*x13557))+(((-1.0)*x13550*x13555)));
evalcond[1]=((((-1.0)*x13551*x13556))+(((-1.0)*r22*x13555))+((x13549*x13552)));
evalcond[2]=(((r01*x13558))+(((-1.0)*r02*x13555))+(((-1.0)*x13554*x13556)));
evalcond[3]=((1.0)+((r11*x13558))+(((-1.0)*x13550*x13556))+(((-1.0)*r12*x13555)));
evalcond[4]=((((-1.0)*x13551*x13555))+((r22*x13549))+((sj1*sj2))+((x13548*x13552))+(((-1.0)*cj1*x13553)));
evalcond[5]=(((r01*x13557))+(((-1.0)*cj1*sj2))+(((-1.0)*x13554*x13555))+(((-1.0)*sj1*x13553))+((r02*x13549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13559=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13559.valid){
continue;
}
CheckValue<IkReal> x13560 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13559.value)))+(x13560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13561=IKcos(j4);
IkReal x13562=IKsin(j4);
IkReal x13563=(gconst29*r10);
IkReal x13564=(gconst29*r20);
IkReal x13565=(gconst28*r21);
IkReal x13566=((1.0)*cj2);
IkReal x13567=(gconst29*r00);
IkReal x13568=((1.0)*x13561);
IkReal x13569=((1.0)*x13562);
IkReal x13570=(gconst28*x13561);
IkReal x13571=(gconst28*x13562);
evalcond[0]=((((-1.0)*x13563*x13568))+((r11*x13570))+((r12*x13562)));
evalcond[1]=(((x13562*x13565))+(((-1.0)*x13564*x13569))+(((-1.0)*r22*x13568)));
evalcond[2]=((((-1.0)*x13567*x13569))+(((-1.0)*r02*x13568))+((r01*x13571)));
evalcond[3]=((1.0)+(((-1.0)*x13563*x13569))+(((-1.0)*r12*x13568))+((r11*x13571)));
evalcond[4]=(((x13561*x13565))+((sj1*sj2))+(((-1.0)*cj1*x13566))+(((-1.0)*x13564*x13568))+((r22*x13562)));
evalcond[5]=((((-1.0)*x13567*x13568))+(((-1.0)*sj1*x13566))+(((-1.0)*cj1*sj2))+((r02*x13562))+((r01*x13570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13574 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13574.valid){
continue;
}
IkReal x13572=((1.0)*(x13574.value));
IkReal x13573=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13572)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13572)));
IkReal gconst28=((1.0)*r21*x13573);
IkReal gconst29=((-1.0)*r20*x13573);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13577 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13577.valid){
continue;
}
IkReal x13575=((1.0)*(x13577.value));
IkReal x13576=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13575)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13575)));
IkReal gconst28=((1.0)*r21*x13576);
IkReal gconst29=((-1.0)*r20*x13576);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13580 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13580.valid){
continue;
}
IkReal x13578=((1.0)*(x13580.value));
IkReal x13579=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13578)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13578)));
IkReal gconst28=((1.0)*r21*x13579);
IkReal gconst29=((-1.0)*r20*x13579);
IkReal x13581=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13585=IKPowWithIntegerCheck(x13581,-1);
if(!x13585.valid){
continue;
}
IkReal x13582=x13585.value;
IkReal x13583=((1.0)*x13582);
IkReal x13584=((((-2.0)*r10*r11*r20*r21*x13582))+(((-1.0)*x13583*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13583*(r10*r10)*(r20*r20))));
j4eval[0]=x13584;
j4eval[1]=r12;
j4eval[2]=x13581;
j4eval[3]=IKsign(x13584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13586=(gconst28*r11);
IkReal x13587=(gconst29*r10);
CheckValue<IkReal> x13588=IKPowWithIntegerCheck(IKsign(((((2.0)*x13586*x13587))+(((-1.0)*(x13587*x13587)))+(((-1.0)*(x13586*x13586)))+(((-1.0)*(r12*r12))))),-1);
if(!x13588.valid){
continue;
}
CheckValue<IkReal> x13589 = IKatan2WithCheck(IkReal((x13586+(((-1.0)*x13587)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13588.value)))+(x13589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13590=IKcos(j4);
IkReal x13591=IKsin(j4);
IkReal x13592=(gconst29*r10);
IkReal x13593=(gconst29*r20);
IkReal x13594=(gconst28*r21);
IkReal x13595=(gconst29*r00);
IkReal x13596=((1.0)*x13590);
IkReal x13597=((1.0)*x13591);
IkReal x13598=(gconst28*x13590);
IkReal x13599=(gconst28*x13591);
evalcond[0]=((((-1.0)*x13592*x13596))+((r11*x13598))+((r12*x13591)));
evalcond[1]=(((x13591*x13594))+(((-1.0)*x13593*x13597))+(((-1.0)*r22*x13596)));
evalcond[2]=(((r01*x13599))+(((-1.0)*r02*x13596))+(((-1.0)*x13595*x13597)));
evalcond[3]=((1.0)+(((-1.0)*x13592*x13597))+((r11*x13599))+(((-1.0)*r12*x13596)));
evalcond[4]=(((cj2*sj1))+((r22*x13591))+((cj1*sj2))+(((-1.0)*x13593*x13596))+((x13590*x13594)));
evalcond[5]=(((r01*x13598))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13591))+(((-1.0)*x13595*x13596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13600=((1.0)*gconst29);
CheckValue<IkReal> x13601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13600))+(((-1.0)*gconst28*r00)))),-1);
if(!x13601.valid){
continue;
}
CheckValue<IkReal> x13602 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13601.value)))+(x13602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13603=IKcos(j4);
IkReal x13604=IKsin(j4);
IkReal x13605=(gconst29*r10);
IkReal x13606=(gconst29*r20);
IkReal x13607=(gconst28*r21);
IkReal x13608=(gconst29*r00);
IkReal x13609=((1.0)*x13603);
IkReal x13610=((1.0)*x13604);
IkReal x13611=(gconst28*x13603);
IkReal x13612=(gconst28*x13604);
evalcond[0]=(((r12*x13604))+(((-1.0)*x13605*x13609))+((r11*x13611)));
evalcond[1]=((((-1.0)*x13606*x13610))+((x13604*x13607))+(((-1.0)*r22*x13609)));
evalcond[2]=((((-1.0)*x13608*x13610))+(((-1.0)*r02*x13609))+((r01*x13612)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13609))+((r11*x13612))+(((-1.0)*x13605*x13610)));
evalcond[4]=(((cj2*sj1))+((x13603*x13607))+((cj1*sj2))+((r22*x13604))+(((-1.0)*x13606*x13609)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13611))+((r02*x13604))+(((-1.0)*x13608*x13609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13613=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13613.valid){
continue;
}
CheckValue<IkReal> x13614 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13613.value)))+(x13614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13615=IKcos(j4);
IkReal x13616=IKsin(j4);
IkReal x13617=(gconst29*r10);
IkReal x13618=(gconst29*r20);
IkReal x13619=(gconst28*r21);
IkReal x13620=(gconst29*r00);
IkReal x13621=((1.0)*x13615);
IkReal x13622=((1.0)*x13616);
IkReal x13623=(gconst28*x13615);
IkReal x13624=(gconst28*x13616);
evalcond[0]=(((r11*x13623))+(((-1.0)*x13617*x13621))+((r12*x13616)));
evalcond[1]=((((-1.0)*r22*x13621))+(((-1.0)*x13618*x13622))+((x13616*x13619)));
evalcond[2]=((((-1.0)*x13620*x13622))+((r01*x13624))+(((-1.0)*r02*x13621)));
evalcond[3]=((1.0)+((r11*x13624))+(((-1.0)*x13617*x13622))+(((-1.0)*r12*x13621)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13615*x13619))+(((-1.0)*x13618*x13621))+((r22*x13616)));
evalcond[5]=((((-1.0)*x13620*x13621))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13623))+((r02*x13616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13627 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13627.valid){
continue;
}
IkReal x13625=((1.0)*(x13627.value));
IkReal x13626=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13625)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13625)));
IkReal gconst28=((1.0)*r21*x13626);
IkReal gconst29=((-1.0)*r20*x13626);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13630 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13630.valid){
continue;
}
IkReal x13628=((1.0)*(x13630.value));
IkReal x13629=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13628)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13628)));
IkReal gconst28=((1.0)*r21*x13629);
IkReal gconst29=((-1.0)*r20*x13629);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13633 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13633.valid){
continue;
}
IkReal x13631=((1.0)*(x13633.value));
IkReal x13632=x13458;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13631)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13631)));
IkReal gconst28=((1.0)*r21*x13632);
IkReal gconst29=((-1.0)*r20*x13632);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13634=(gconst29*r10);
IkReal x13635=(gconst28*r11);
CheckValue<IkReal> x13636=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13634*x13634)+(((-2.0)*x13634*x13635))+(x13635*x13635))),-1);
if(!x13636.valid){
continue;
}
CheckValue<IkReal> x13637 = IKatan2WithCheck(IkReal(((((-1.0)*x13635))+x13634)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13636.value)))+(x13637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13638=IKsin(j4);
IkReal x13639=IKcos(j4);
IkReal x13640=(gconst28*r11);
IkReal x13641=((1.0)*x13639);
IkReal x13642=(gconst29*x13639);
IkReal x13643=(gconst28*x13638);
IkReal x13644=((1.0)*x13638);
IkReal x13645=(gconst29*x13644);
evalcond[0]=((((-1.0)*r20*x13645))+(((-1.0)*r22*x13641))+((r21*x13643)));
evalcond[1]=((((-1.0)*r00*x13645))+((r01*x13643))+(((-1.0)*r02*x13641)));
evalcond[2]=((((-1.0)*r12*x13644))+(((-1.0)*x13640*x13641))+((r10*x13642)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13645))+(((-1.0)*r12*x13641))+((x13638*x13640)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13641))+((cj1*sj2))+((r20*x13642))+(((-1.0)*r22*x13644)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13642))+(((-1.0)*gconst28*r01*x13641))+(((-1.0)*r02*x13644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13646=((1.0)*gconst29);
CheckValue<IkReal> x13647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13646)))),-1);
if(!x13647.valid){
continue;
}
CheckValue<IkReal> x13648 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13646))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13647.value)))+(x13648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13649=IKsin(j4);
IkReal x13650=IKcos(j4);
IkReal x13651=(gconst28*r11);
IkReal x13652=((1.0)*x13650);
IkReal x13653=(gconst29*x13650);
IkReal x13654=(gconst28*x13649);
IkReal x13655=((1.0)*x13649);
IkReal x13656=(gconst29*x13655);
evalcond[0]=((((-1.0)*r20*x13656))+(((-1.0)*r22*x13652))+((r21*x13654)));
evalcond[1]=((((-1.0)*r00*x13656))+((r01*x13654))+(((-1.0)*r02*x13652)));
evalcond[2]=(((r10*x13653))+(((-1.0)*x13651*x13652))+(((-1.0)*r12*x13655)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13652))+(((-1.0)*r10*x13656))+((x13649*x13651)));
evalcond[4]=(((r20*x13653))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13655))+(((-1.0)*gconst28*r21*x13652)));
evalcond[5]=(((r00*x13653))+(((-1.0)*gconst28*r01*x13652))+(((-1.0)*r02*x13655))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13657=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13657.valid){
continue;
}
CheckValue<IkReal> x13658 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13657.value)))+(x13658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13659=IKsin(j4);
IkReal x13660=IKcos(j4);
IkReal x13661=(gconst28*r11);
IkReal x13662=((1.0)*x13660);
IkReal x13663=(gconst29*x13660);
IkReal x13664=(gconst28*x13659);
IkReal x13665=((1.0)*x13659);
IkReal x13666=(gconst29*x13665);
evalcond[0]=((((-1.0)*r22*x13662))+(((-1.0)*r20*x13666))+((r21*x13664)));
evalcond[1]=((((-1.0)*r00*x13666))+((r01*x13664))+(((-1.0)*r02*x13662)));
evalcond[2]=((((-1.0)*r12*x13665))+(((-1.0)*x13661*x13662))+((r10*x13663)));
evalcond[3]=((1.0)+((x13659*x13661))+(((-1.0)*r12*x13662))+(((-1.0)*r10*x13666)));
evalcond[4]=((((-1.0)*r22*x13665))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13662))+((r20*x13663)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13663))+(((-1.0)*r02*x13665))+(((-1.0)*gconst28*r01*x13662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13667=gconst28*gconst28;
IkReal x13668=gconst29*gconst29;
IkReal x13669=(r11*r21);
IkReal x13670=(gconst29*sj3);
IkReal x13671=((1.0)*cj3);
IkReal x13672=(r10*r20);
IkReal x13673=(r10*r21);
IkReal x13674=(r11*r20);
IkReal x13675=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13676=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13667*x13669*x13671))+(((-1.0)*x13668*x13671*x13672))+((x13674*x13675))+(((-1.0)*r12*r22*x13671))+((x13673*x13675)))),-1);
if(!x13676.valid){
continue;
}
CheckValue<IkReal> x13677 = IKatan2WithCheck(IkReal((((r11*r22*x13670))+((gconst28*r10*r22*sj3)))),IkReal((((gconst28*x13669*x13670))+((sj3*x13667*x13673))+(((-1.0)*gconst28*x13670*x13672))+(((-1.0)*sj3*x13668*x13674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13676.value)))+(x13677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13678=IKsin(j4);
IkReal x13679=IKcos(j4);
IkReal x13680=(sj1*sj2);
IkReal x13681=(gconst29*r20);
IkReal x13682=(gconst28*r20);
IkReal x13683=((1.0)*cj2);
IkReal x13684=(r11*sj3);
IkReal x13685=(cj1*sj2);
IkReal x13686=(gconst29*r01);
IkReal x13687=(gconst29*r10);
IkReal x13688=(cj3*gconst28);
IkReal x13689=(cj3*gconst29);
IkReal x13690=(gconst28*sj3);
IkReal x13691=(gconst29*r00);
IkReal x13692=(cj1*x13683);
IkReal x13693=((1.0)*x13679);
IkReal x13694=((1.0)*x13678);
IkReal x13695=(gconst28*x13678);
IkReal x13696=(cj3*x13678);
IkReal x13697=(sj3*x13679);
evalcond[0]=((((-1.0)*x13681*x13694))+((r21*x13695))+(((-1.0)*r22*x13693)));
evalcond[1]=(((r01*x13695))+(((-1.0)*r02*x13693))+(((-1.0)*x13691*x13694)));
evalcond[2]=((1.0)+(((-1.0)*x13687*x13694))+((r11*x13695))+(((-1.0)*r12*x13693)));
evalcond[3]=(((r11*x13679*x13688))+((gconst29*x13684))+((r10*x13690))+(((-1.0)*cj3*x13687*x13693))+((r12*x13696)));
evalcond[4]=(((r11*x13689))+(((-1.0)*r12*sj3*x13694))+((r10*x13688))+(((-1.0)*gconst28*x13684*x13693))+((x13687*x13697)));
evalcond[5]=(((cj2*sj1))+x13685+((gconst29*r21*sj3))+(((-1.0)*cj3*x13681*x13693))+((r22*x13696))+((r21*x13679*x13688))+((sj3*x13682)));
evalcond[6]=(((r00*x13690))+x13680+(((-1.0)*x13692))+((r01*x13679*x13688))+(((-1.0)*r00*x13689*x13693))+((r02*x13696))+((sj3*x13686)));
evalcond[7]=((((-1.0)*r22*sj3*x13694))+x13680+(((-1.0)*x13692))+((cj3*x13682))+(((-1.0)*r21*x13690*x13693))+((r21*x13689))+((x13681*x13697)));
evalcond[8]=((((-1.0)*sj1*x13683))+((cj3*x13686))+(((-1.0)*x13685))+((r00*x13688))+(((-1.0)*r01*x13690*x13693))+((x13691*x13697))+(((-1.0)*r02*sj3*x13694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13698=((1.0)*gconst29);
CheckValue<IkReal> x13699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13698)))),-1);
if(!x13699.valid){
continue;
}
CheckValue<IkReal> x13700 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13698))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13699.value)))+(x13700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13701=IKsin(j4);
IkReal x13702=IKcos(j4);
IkReal x13703=(sj1*sj2);
IkReal x13704=(gconst29*r20);
IkReal x13705=(gconst28*r20);
IkReal x13706=((1.0)*cj2);
IkReal x13707=(r11*sj3);
IkReal x13708=(cj1*sj2);
IkReal x13709=(gconst29*r01);
IkReal x13710=(gconst29*r10);
IkReal x13711=(cj3*gconst28);
IkReal x13712=(cj3*gconst29);
IkReal x13713=(gconst28*sj3);
IkReal x13714=(gconst29*r00);
IkReal x13715=(cj1*x13706);
IkReal x13716=((1.0)*x13702);
IkReal x13717=((1.0)*x13701);
IkReal x13718=(gconst28*x13701);
IkReal x13719=(cj3*x13701);
IkReal x13720=(sj3*x13702);
evalcond[0]=(((r21*x13718))+(((-1.0)*r22*x13716))+(((-1.0)*x13704*x13717)));
evalcond[1]=((((-1.0)*x13714*x13717))+((r01*x13718))+(((-1.0)*r02*x13716)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13716))+((r11*x13718))+(((-1.0)*x13710*x13717)));
evalcond[3]=((((-1.0)*cj3*x13710*x13716))+((r12*x13719))+((gconst29*x13707))+((r10*x13713))+((r11*x13702*x13711)));
evalcond[4]=(((r10*x13711))+((x13710*x13720))+((r11*x13712))+(((-1.0)*r12*sj3*x13717))+(((-1.0)*gconst28*x13707*x13716)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13705))+x13708+(((-1.0)*cj3*x13704*x13716))+((r21*x13702*x13711))+((r22*x13719)));
evalcond[6]=(((sj3*x13709))+x13703+((r01*x13702*x13711))+((r00*x13713))+(((-1.0)*r00*x13712*x13716))+((r02*x13719))+(((-1.0)*x13715)));
evalcond[7]=(((r21*x13712))+x13703+((x13704*x13720))+((cj3*x13705))+(((-1.0)*r21*x13713*x13716))+(((-1.0)*r22*sj3*x13717))+(((-1.0)*x13715)));
evalcond[8]=((((-1.0)*sj1*x13706))+(((-1.0)*x13708))+((r00*x13711))+((cj3*x13709))+((x13714*x13720))+(((-1.0)*r01*x13713*x13716))+(((-1.0)*r02*sj3*x13717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13721=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13721.valid){
continue;
}
CheckValue<IkReal> x13722 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13721.value)))+(x13722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13723=IKsin(j4);
IkReal x13724=IKcos(j4);
IkReal x13725=(sj1*sj2);
IkReal x13726=(gconst29*r20);
IkReal x13727=(gconst28*r20);
IkReal x13728=((1.0)*cj2);
IkReal x13729=(r11*sj3);
IkReal x13730=(cj1*sj2);
IkReal x13731=(gconst29*r01);
IkReal x13732=(gconst29*r10);
IkReal x13733=(cj3*gconst28);
IkReal x13734=(cj3*gconst29);
IkReal x13735=(gconst28*sj3);
IkReal x13736=(gconst29*r00);
IkReal x13737=(cj1*x13728);
IkReal x13738=((1.0)*x13724);
IkReal x13739=((1.0)*x13723);
IkReal x13740=(gconst28*x13723);
IkReal x13741=(cj3*x13723);
IkReal x13742=(sj3*x13724);
evalcond[0]=((((-1.0)*r22*x13738))+(((-1.0)*x13726*x13739))+((r21*x13740)));
evalcond[1]=(((r01*x13740))+(((-1.0)*r02*x13738))+(((-1.0)*x13736*x13739)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13738))+(((-1.0)*x13732*x13739))+((r11*x13740)));
evalcond[3]=(((r10*x13735))+((r11*x13724*x13733))+((gconst29*x13729))+((r12*x13741))+(((-1.0)*cj3*x13732*x13738)));
evalcond[4]=(((r10*x13733))+((r11*x13734))+(((-1.0)*r12*sj3*x13739))+((x13732*x13742))+(((-1.0)*gconst28*x13729*x13738)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13730+((r21*x13724*x13733))+((r22*x13741))+(((-1.0)*cj3*x13726*x13738))+((sj3*x13727)));
evalcond[6]=(((r00*x13735))+(((-1.0)*r00*x13734*x13738))+x13725+(((-1.0)*x13737))+((sj3*x13731))+((r01*x13724*x13733))+((r02*x13741)));
evalcond[7]=(((x13726*x13742))+x13725+(((-1.0)*x13737))+(((-1.0)*r21*x13735*x13738))+((r21*x13734))+((cj3*x13727))+(((-1.0)*r22*sj3*x13739)));
evalcond[8]=(((r00*x13733))+((x13736*x13742))+(((-1.0)*r02*sj3*x13739))+(((-1.0)*sj1*x13728))+(((-1.0)*r01*x13735*x13738))+(((-1.0)*x13730))+((cj3*x13731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13743=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13743);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13743);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13744=(r11*sj5);
IkReal x13745=((1.0)*cj5*r10);
j4eval[0]=(x13744+(((-1.0)*x13745)));
j4eval[1]=((((-1.0)*cj3*x13745))+((cj3*x13744)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13746=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13746);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13746);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13747=(cj5*r10);
IkReal x13748=(r11*sj5);
j4eval[0]=(x13748+(((-1.0)*x13747)));
j4eval[1]=((((-1.0)*sj3*x13748))+((sj3*x13747)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13749=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13749);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13749);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13750=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13750);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13750);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13751=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13751)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13751)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13752=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13752);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13752);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13753=((1.0)*sj1);
CheckValue<IkReal> x13754=IKPowWithIntegerCheck(r22,-1);
if(!x13754.valid){
continue;
}
CheckValue<IkReal> x13755=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13755.valid){
continue;
}
if( IKabs(((x13754.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13753)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13755.value)*((((cj1*cj2))+(((-1.0)*sj2*x13753)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13754.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13753))))))+IKsqr(((x13755.value)*((((cj1*cj2))+(((-1.0)*sj2*x13753))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13754.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13753))))), ((x13755.value)*((((cj1*cj2))+(((-1.0)*sj2*x13753))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13756=IKsin(j4);
IkReal x13757=IKcos(j4);
IkReal x13758=((1.0)*cj5);
IkReal x13759=(sj5*x13757);
IkReal x13760=(sj5*x13756);
evalcond[0]=((-1.0)*r22*x13757);
evalcond[1]=(((cj2*sj1))+((r22*x13756))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13756*x13758))+((r01*x13760)));
evalcond[3]=(((r11*x13759))+(((-1.0)*r10*x13757*x13758)));
evalcond[4]=((1.0)+((r11*x13760))+(((-1.0)*r10*x13756*x13758)));
evalcond[5]=((((-1.0)*r00*x13757*x13758))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13761=((1.0)*cj5);
CheckValue<IkReal> x13762=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13761))),-1);
if(!x13762.valid){
continue;
}
CheckValue<IkReal> x13763=IKPowWithIntegerCheck(((((-1.0)*r00*x13761))+((r01*sj5))),-1);
if(!x13763.valid){
continue;
}
if( IKabs(((-1.0)*(x13762.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13763.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13762.value)))+IKsqr(((x13763.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13762.value)), ((x13763.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13764=IKsin(j4);
IkReal x13765=IKcos(j4);
IkReal x13766=((1.0)*cj5);
IkReal x13767=(sj5*x13765);
IkReal x13768=(sj5*x13764);
evalcond[0]=((-1.0)*r22*x13765);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13764)));
evalcond[2]=((((-1.0)*r00*x13764*x13766))+((r01*x13768)));
evalcond[3]=(((r11*x13767))+(((-1.0)*r10*x13765*x13766)));
evalcond[4]=((1.0)+((r11*x13768))+(((-1.0)*r10*x13764*x13766)));
evalcond[5]=(((r01*x13767))+(((-1.0)*r00*x13765*x13766))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13769=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13769);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13769);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13770=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13770);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13770);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13771=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13771.valid){
continue;
}
CheckValue<IkReal> x13772=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13772.valid){
continue;
}
if( IKabs(((-1.0)*(x13771.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13772.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13771.value)))+IKsqr(((x13772.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13771.value)), ((x13772.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13773=IKsin(j4);
IkReal x13774=IKcos(j4);
IkReal x13775=(cj5*x13774);
IkReal x13776=(sj5*x13773);
IkReal x13777=((1.0)*cj5*x13773);
IkReal x13778=((1.0)*sj5*x13774);
evalcond[0]=((-1.0)*r22*x13774);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13773))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13777))+((r01*x13776)));
evalcond[3]=(((r10*x13775))+(((-1.0)*r11*x13778)));
evalcond[4]=((1.0)+((r11*x13776))+(((-1.0)*r10*x13777)));
evalcond[5]=((((-1.0)*r01*x13778))+((r00*x13775))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13779=IKPowWithIntegerCheck(r22,-1);
if(!x13779.valid){
continue;
}
CheckValue<IkReal> x13780=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13780.valid){
continue;
}
if( IKabs(((x13779.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13780.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13779.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13780.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13779.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13780.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13781=IKsin(j4);
IkReal x13782=IKcos(j4);
IkReal x13783=(cj5*x13782);
IkReal x13784=(sj5*x13781);
IkReal x13785=((1.0)*cj5*x13781);
IkReal x13786=((1.0)*sj5*x13782);
evalcond[0]=((-1.0)*r22*x13782);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13781))+((cj1*sj2)));
evalcond[2]=(((r01*x13784))+(((-1.0)*r00*x13785)));
evalcond[3]=((((-1.0)*r11*x13786))+((r10*x13783)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13785))+((r11*x13784)));
evalcond[5]=(((r00*x13783))+(((-1.0)*r01*x13786))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13787=((1.0)*r10);
CheckValue<IkReal> x13788=IKPowWithIntegerCheck(cj3,-1);
if(!x13788.valid){
continue;
}
CheckValue<IkReal> x13789=IKPowWithIntegerCheck(r22,-1);
if(!x13789.valid){
continue;
}
CheckValue<IkReal> x13790=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13787))+((cj3*r11*sj5))),-1);
if(!x13790.valid){
continue;
}
if( IKabs(((x13788.value)*(x13789.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13790.value)*(((((-1.0)*sj3*sj5*x13787))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13788.value)*(x13789.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13790.value)*(((((-1.0)*sj3*sj5*x13787))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13788.value)*(x13789.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13790.value)*(((((-1.0)*sj3*sj5*x13787))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13791=IKsin(j4);
IkReal x13792=IKcos(j4);
IkReal x13793=(sj1*sj2);
IkReal x13794=(r11*sj5);
IkReal x13795=(r00*sj3);
IkReal x13796=(cj5*r01);
IkReal x13797=((1.0)*cj1);
IkReal x13798=(cj3*sj5);
IkReal x13799=(cj5*r11);
IkReal x13800=(r10*sj3);
IkReal x13801=(cj2*sj1);
IkReal x13802=((1.0)*cj5);
IkReal x13803=((1.0)*sj3);
IkReal x13804=(r01*sj5);
IkReal x13805=(cj2*x13797);
IkReal x13806=(cj3*x13792);
IkReal x13807=(r22*x13791);
IkReal x13808=(cj5*x13792);
IkReal x13809=(x13791*x13802);
evalcond[0]=((-1.0)*r22*x13792);
evalcond[1]=(x13801+((cj1*sj2))+((cj3*x13807)));
evalcond[2]=((((-1.0)*r00*x13809))+((x13791*x13804)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13809))+((x13791*x13794)));
evalcond[4]=((((-1.0)*x13805))+x13793+(((-1.0)*x13803*x13807)));
evalcond[5]=(((sj5*x13800))+((x13794*x13806))+(((-1.0)*r10*x13802*x13806))+((sj3*x13799)));
evalcond[6]=((((-1.0)*x13792*x13794*x13803))+((cj3*x13799))+((r10*x13798))+((x13800*x13808)));
evalcond[7]=((((-1.0)*x13805))+x13793+((r01*x13792*x13798))+((sj3*x13796))+((sj5*x13795))+(((-1.0)*r00*x13802*x13806)));
evalcond[8]=((((-1.0)*x13792*x13803*x13804))+((r00*x13798))+(((-1.0)*x13801))+((x13795*x13808))+(((-1.0)*sj2*x13797))+((cj3*x13796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13810=(cj5*r10);
IkReal x13811=((1.0)*r11);
CheckValue<IkReal> x13812=IKPowWithIntegerCheck(((((-1.0)*x13810))+((r11*sj5))),-1);
if(!x13812.valid){
continue;
}
CheckValue<IkReal> x13813=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13811))+((sj3*x13810))),-1);
if(!x13813.valid){
continue;
}
if( IKabs(((-1.0)*(x13812.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13813.value)*(((((-1.0)*cj3*cj5*x13811))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13812.value)))+IKsqr(((x13813.value)*(((((-1.0)*cj3*cj5*x13811))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13812.value)), ((x13813.value)*(((((-1.0)*cj3*cj5*x13811))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13814=IKsin(j4);
IkReal x13815=IKcos(j4);
IkReal x13816=(sj1*sj2);
IkReal x13817=(r11*sj5);
IkReal x13818=(r00*sj3);
IkReal x13819=(cj5*r01);
IkReal x13820=((1.0)*cj1);
IkReal x13821=(cj3*sj5);
IkReal x13822=(cj5*r11);
IkReal x13823=(r10*sj3);
IkReal x13824=(cj2*sj1);
IkReal x13825=((1.0)*cj5);
IkReal x13826=((1.0)*sj3);
IkReal x13827=(r01*sj5);
IkReal x13828=(cj2*x13820);
IkReal x13829=(cj3*x13815);
IkReal x13830=(r22*x13814);
IkReal x13831=(cj5*x13815);
IkReal x13832=(x13814*x13825);
evalcond[0]=((-1.0)*r22*x13815);
evalcond[1]=(x13824+((cj1*sj2))+((cj3*x13830)));
evalcond[2]=(((x13814*x13827))+(((-1.0)*r00*x13832)));
evalcond[3]=((1.0)+((x13814*x13817))+(((-1.0)*r10*x13832)));
evalcond[4]=((((-1.0)*x13828))+x13816+(((-1.0)*x13826*x13830)));
evalcond[5]=((((-1.0)*r10*x13825*x13829))+((x13817*x13829))+((sj3*x13822))+((sj5*x13823)));
evalcond[6]=(((r10*x13821))+(((-1.0)*x13815*x13817*x13826))+((cj3*x13822))+((x13823*x13831)));
evalcond[7]=((((-1.0)*x13828))+((r01*x13815*x13821))+x13816+((sj3*x13819))+(((-1.0)*r00*x13825*x13829))+((sj5*x13818)));
evalcond[8]=(((x13818*x13831))+(((-1.0)*x13815*x13826*x13827))+((r00*x13821))+(((-1.0)*sj2*x13820))+(((-1.0)*x13824))+((cj3*x13819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13833=((1.0)*sj3);
IkReal x13834=(r11*sj5);
IkReal x13835=((1.0)*cj5*r10);
CheckValue<IkReal> x13836=IKPowWithIntegerCheck(((((-1.0)*x13835))+x13834),-1);
if(!x13836.valid){
continue;
}
CheckValue<IkReal> x13837=IKPowWithIntegerCheck(((((-1.0)*cj3*x13835))+((cj3*x13834))),-1);
if(!x13837.valid){
continue;
}
if( IKabs(((-1.0)*(x13836.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13837.value)*(((((-1.0)*r10*sj5*x13833))+(((-1.0)*cj5*r11*x13833)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13836.value)))+IKsqr(((x13837.value)*(((((-1.0)*r10*sj5*x13833))+(((-1.0)*cj5*r11*x13833))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13836.value)), ((x13837.value)*(((((-1.0)*r10*sj5*x13833))+(((-1.0)*cj5*r11*x13833))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13838=IKsin(j4);
IkReal x13839=IKcos(j4);
IkReal x13840=(sj1*sj2);
IkReal x13841=(r11*sj5);
IkReal x13842=(r00*sj3);
IkReal x13843=(cj5*r01);
IkReal x13844=((1.0)*cj1);
IkReal x13845=(cj3*sj5);
IkReal x13846=(cj5*r11);
IkReal x13847=(r10*sj3);
IkReal x13848=(cj2*sj1);
IkReal x13849=((1.0)*cj5);
IkReal x13850=((1.0)*sj3);
IkReal x13851=(r01*sj5);
IkReal x13852=(cj2*x13844);
IkReal x13853=(cj3*x13839);
IkReal x13854=(r22*x13838);
IkReal x13855=(cj5*x13839);
IkReal x13856=(x13838*x13849);
evalcond[0]=((-1.0)*r22*x13839);
evalcond[1]=(x13848+((cj1*sj2))+((cj3*x13854)));
evalcond[2]=(((x13838*x13851))+(((-1.0)*r00*x13856)));
evalcond[3]=((1.0)+((x13838*x13841))+(((-1.0)*r10*x13856)));
evalcond[4]=(x13840+(((-1.0)*x13850*x13854))+(((-1.0)*x13852)));
evalcond[5]=(((sj5*x13847))+((x13841*x13853))+((sj3*x13846))+(((-1.0)*r10*x13849*x13853)));
evalcond[6]=((((-1.0)*x13839*x13841*x13850))+((r10*x13845))+((x13847*x13855))+((cj3*x13846)));
evalcond[7]=(((r01*x13839*x13845))+x13840+((sj5*x13842))+((sj3*x13843))+(((-1.0)*r00*x13849*x13853))+(((-1.0)*x13852)));
evalcond[8]=((((-1.0)*sj2*x13844))+((x13842*x13855))+(((-1.0)*x13839*x13850*x13851))+(((-1.0)*x13848))+((cj3*x13843))+((r00*x13845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13857=cj5*cj5;
IkReal x13858=((1.0)*cj3);
IkReal x13859=(r10*r21);
IkReal x13860=(cj5*sj5);
IkReal x13861=(r11*r21);
IkReal x13862=(r11*r20);
IkReal x13863=(r22*sj3);
IkReal x13864=(r10*r20);
IkReal x13865=((1.0)*sj3*x13857);
CheckValue<IkReal> x13866=IKPowWithIntegerCheck(IKsign((((cj3*x13857*x13861))+(((-1.0)*r12*r22*x13858))+(((-1.0)*x13858*x13861))+((cj3*x13859*x13860))+(((-1.0)*x13857*x13858*x13864))+((cj3*x13860*x13862)))),-1);
if(!x13866.valid){
continue;
}
CheckValue<IkReal> x13867 = IKatan2WithCheck(IkReal((((cj5*r11*x13863))+((r10*sj5*x13863)))),IkReal(((((-1.0)*sj3*x13860*x13864))+((sj3*x13860*x13861))+(((-1.0)*x13862*x13865))+((sj3*x13859))+(((-1.0)*x13859*x13865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13866.value)))+(x13867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13868=IKsin(j4);
IkReal x13869=IKcos(j4);
IkReal x13870=(sj1*sj2);
IkReal x13871=(cj5*sj3);
IkReal x13872=(cj5*r10);
IkReal x13873=(r00*sj5);
IkReal x13874=(r11*sj5);
IkReal x13875=(cj3*cj5);
IkReal x13876=((1.0)*cj1);
IkReal x13877=(cj3*sj5);
IkReal x13878=(r21*sj5);
IkReal x13879=(cj2*sj1);
IkReal x13880=(sj3*sj5);
IkReal x13881=(r01*sj5);
IkReal x13882=(cj2*x13876);
IkReal x13883=((1.0)*x13869);
IkReal x13884=((1.0)*x13868);
IkReal x13885=(cj3*x13868);
IkReal x13886=(cj3*x13869);
evalcond[0]=((((-1.0)*cj5*r20*x13884))+(((-1.0)*r22*x13883))+((x13868*x13878)));
evalcond[1]=((((-1.0)*r02*x13883))+((x13868*x13881))+(((-1.0)*cj5*r00*x13884)));
evalcond[2]=((1.0)+((x13868*x13874))+(((-1.0)*x13872*x13884))+(((-1.0)*r12*x13883)));
evalcond[3]=((((-1.0)*cj3*x13872*x13883))+((r10*x13880))+((r11*x13871))+((r12*x13885))+((x13874*x13886)));
evalcond[4]=(((r11*x13875))+((r10*x13869*x13871))+(((-1.0)*sj3*x13874*x13883))+((r10*x13877))+(((-1.0)*r12*sj3*x13884)));
evalcond[5]=(x13879+((cj1*sj2))+((r21*x13871))+((r20*x13880))+(((-1.0)*r20*x13875*x13883))+((r21*x13869*x13877))+((r22*x13885)));
evalcond[6]=(((sj3*x13873))+x13870+(((-1.0)*r00*x13875*x13883))+((r02*x13885))+((r01*x13869*x13877))+((r01*x13871))+(((-1.0)*x13882)));
evalcond[7]=((((-1.0)*sj3*x13878*x13883))+(((-1.0)*r22*sj3*x13884))+x13870+((r20*x13869*x13871))+((r21*x13875))+((r20*x13877))+(((-1.0)*x13882)));
evalcond[8]=(((cj3*x13873))+(((-1.0)*x13879))+(((-1.0)*r01*x13880*x13883))+(((-1.0)*sj2*x13876))+((r01*x13875))+(((-1.0)*r02*sj3*x13884))+((r00*x13869*x13871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13887=((1.0)*cj5);
CheckValue<IkReal> x13888 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13888.valid){
continue;
}
CheckValue<IkReal> x13889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13887))+(((-1.0)*r00*sj5)))),-1);
if(!x13889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13888.value)+(((1.5707963267949)*(x13889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13890=IKsin(j4);
IkReal x13891=IKcos(j4);
IkReal x13892=(sj1*sj2);
IkReal x13893=(cj5*sj3);
IkReal x13894=(cj5*r10);
IkReal x13895=(r00*sj5);
IkReal x13896=(r11*sj5);
IkReal x13897=(cj3*cj5);
IkReal x13898=((1.0)*cj1);
IkReal x13899=(cj3*sj5);
IkReal x13900=(r21*sj5);
IkReal x13901=(cj2*sj1);
IkReal x13902=(sj3*sj5);
IkReal x13903=(r01*sj5);
IkReal x13904=(cj2*x13898);
IkReal x13905=((1.0)*x13891);
IkReal x13906=((1.0)*x13890);
IkReal x13907=(cj3*x13890);
IkReal x13908=(cj3*x13891);
evalcond[0]=((((-1.0)*cj5*r20*x13906))+(((-1.0)*r22*x13905))+((x13890*x13900)));
evalcond[1]=((((-1.0)*cj5*r00*x13906))+((x13890*x13903))+(((-1.0)*r02*x13905)));
evalcond[2]=((1.0)+(((-1.0)*x13894*x13906))+((x13890*x13896))+(((-1.0)*r12*x13905)));
evalcond[3]=(((r10*x13902))+((r12*x13907))+(((-1.0)*cj3*x13894*x13905))+((x13896*x13908))+((r11*x13893)));
evalcond[4]=(((r10*x13891*x13893))+(((-1.0)*r12*sj3*x13906))+((r10*x13899))+(((-1.0)*sj3*x13896*x13905))+((r11*x13897)));
evalcond[5]=(((r22*x13907))+((cj1*sj2))+x13901+((r20*x13902))+((r21*x13893))+(((-1.0)*r20*x13897*x13905))+((r21*x13891*x13899)));
evalcond[6]=(((r02*x13907))+x13892+((sj3*x13895))+((r01*x13891*x13899))+(((-1.0)*r00*x13897*x13905))+((r01*x13893))+(((-1.0)*x13904)));
evalcond[7]=((((-1.0)*r22*sj3*x13906))+x13892+((r20*x13899))+((r21*x13897))+(((-1.0)*sj3*x13900*x13905))+(((-1.0)*x13904))+((r20*x13891*x13893)));
evalcond[8]=((((-1.0)*sj2*x13898))+((r00*x13891*x13893))+((cj3*x13895))+(((-1.0)*x13901))+(((-1.0)*r01*x13902*x13905))+(((-1.0)*r02*sj3*x13906))+((r01*x13897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13909=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13909.valid){
continue;
}
CheckValue<IkReal> x13910 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13909.value)))+(x13910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13911=IKsin(j4);
IkReal x13912=IKcos(j4);
IkReal x13913=(sj1*sj2);
IkReal x13914=(cj5*sj3);
IkReal x13915=(cj5*r10);
IkReal x13916=(r00*sj5);
IkReal x13917=(r11*sj5);
IkReal x13918=(cj3*cj5);
IkReal x13919=((1.0)*cj1);
IkReal x13920=(cj3*sj5);
IkReal x13921=(r21*sj5);
IkReal x13922=(cj2*sj1);
IkReal x13923=(sj3*sj5);
IkReal x13924=(r01*sj5);
IkReal x13925=(cj2*x13919);
IkReal x13926=((1.0)*x13912);
IkReal x13927=((1.0)*x13911);
IkReal x13928=(cj3*x13911);
IkReal x13929=(cj3*x13912);
evalcond[0]=((((-1.0)*r22*x13926))+((x13911*x13921))+(((-1.0)*cj5*r20*x13927)));
evalcond[1]=((((-1.0)*cj5*r00*x13927))+((x13911*x13924))+(((-1.0)*r02*x13926)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13926))+(((-1.0)*x13915*x13927))+((x13911*x13917)));
evalcond[3]=(((r10*x13923))+(((-1.0)*cj3*x13915*x13926))+((r11*x13914))+((x13917*x13929))+((r12*x13928)));
evalcond[4]=((((-1.0)*sj3*x13917*x13926))+((r10*x13912*x13914))+((r10*x13920))+(((-1.0)*r12*sj3*x13927))+((r11*x13918)));
evalcond[5]=((((-1.0)*r20*x13918*x13926))+((r20*x13923))+((cj1*sj2))+x13922+((r22*x13928))+((r21*x13914))+((r21*x13912*x13920)));
evalcond[6]=(x13913+(((-1.0)*r00*x13918*x13926))+(((-1.0)*x13925))+((sj3*x13916))+((r01*x13914))+((r02*x13928))+((r01*x13912*x13920)));
evalcond[7]=(((r20*x13920))+x13913+(((-1.0)*sj3*x13921*x13926))+(((-1.0)*x13925))+((r21*x13918))+((r20*x13912*x13914))+(((-1.0)*r22*sj3*x13927)));
evalcond[8]=((((-1.0)*x13922))+(((-1.0)*sj2*x13919))+((r00*x13912*x13914))+((cj3*x13916))+((r01*x13918))+(((-1.0)*r01*x13923*x13926))+(((-1.0)*r02*sj3*x13927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13930=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13930;
j4eval[1]=IKsign(x13930);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13931=((1.0)*cj5);
IkReal x13932=((((-1.0)*r21*x13931))+(((-1.0)*r20*sj5)));
j4eval[0]=x13932;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x13931)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13933=cj5*cj5;
IkReal x13934=(cj3*r21);
IkReal x13935=(cj5*sj5);
IkReal x13936=((1.0)*cj3);
IkReal x13937=((((-1.0)*r12*r22*x13936))+((r11*x13933*x13934))+(((-1.0)*r11*x13934))+((cj3*r11*r20*x13935))+(((-1.0)*r10*r20*x13933*x13936))+((r10*x13934*x13935)));
j4eval[0]=x13937;
j4eval[1]=IKsign(x13937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13938=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13938;
j4eval[1]=IKsign(x13938);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13939=((1.0)*cj5);
IkReal x13940=((((-1.0)*r21*x13939))+(((-1.0)*r20*sj5)));
j4eval[0]=x13940;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13939))))));
j4eval[2]=IKsign(x13940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13941=cj5*cj5;
IkReal x13942=r11*r11;
IkReal x13943=(cj5*r10);
IkReal x13944=(r11*sj5);
IkReal x13945=((((-1.0)*x13942))+((x13941*x13942))+(((-1.0)*(r12*r12)))+(((-1.0)*x13941*(r10*r10)))+(((2.0)*x13943*x13944)));
j4eval[0]=x13945;
j4eval[1]=((IKabs(((((-1.0)*x13944))+x13943)))+(IKabs(r12)));
j4eval[2]=IKsign(x13945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13946=cj5*cj5;
IkReal x13947=r11*r11;
IkReal x13948=(cj5*r10);
IkReal x13949=(r11*sj5);
CheckValue<IkReal> x13950 = IKatan2WithCheck(IkReal(((((-1.0)*x13949))+x13948)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13950.valid){
continue;
}
CheckValue<IkReal> x13951=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13947))+(((2.0)*x13948*x13949))+(((-1.0)*(r12*r12)))+((x13946*x13947))+(((-1.0)*x13946*(r10*r10))))),-1);
if(!x13951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13950.value)+(((1.5707963267949)*(x13951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13952=IKsin(j4);
IkReal x13953=IKcos(j4);
IkReal x13954=(cj5*r10);
IkReal x13955=(r01*sj5);
IkReal x13956=(cj5*r00);
IkReal x13957=(cj5*r20);
IkReal x13958=((1.0)*x13953);
IkReal x13959=((1.0)*x13952);
IkReal x13960=(sj5*x13952);
evalcond[0]=((((-1.0)*x13957*x13959))+(((-1.0)*r22*x13958))+((r21*x13960)));
evalcond[1]=((((-1.0)*x13956*x13959))+(((-1.0)*r02*x13958))+((x13952*x13955)));
evalcond[2]=((((-1.0)*r11*sj5*x13958))+((x13953*x13954))+(((-1.0)*r12*x13959)));
evalcond[3]=((-1.0)+((r11*x13960))+(((-1.0)*r12*x13958))+(((-1.0)*x13954*x13959)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13955*x13958))+((cj1*sj2))+(((-1.0)*r02*x13959))+((x13953*x13956)));
evalcond[5]=((((-1.0)*r21*sj5*x13958))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13953*x13957))+(((-1.0)*r22*x13959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13961=((1.0)*cj5);
CheckValue<IkReal> x13962 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13962.valid){
continue;
}
CheckValue<IkReal> x13963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13961))+(((-1.0)*r20*sj5)))),-1);
if(!x13963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13962.value)+(((1.5707963267949)*(x13963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13964=IKsin(j4);
IkReal x13965=IKcos(j4);
IkReal x13966=(cj5*r10);
IkReal x13967=(r01*sj5);
IkReal x13968=(cj5*r00);
IkReal x13969=(cj5*r20);
IkReal x13970=((1.0)*x13965);
IkReal x13971=((1.0)*x13964);
IkReal x13972=(sj5*x13964);
evalcond[0]=((((-1.0)*x13969*x13971))+(((-1.0)*r22*x13970))+((r21*x13972)));
evalcond[1]=((((-1.0)*r02*x13970))+(((-1.0)*x13968*x13971))+((x13964*x13967)));
evalcond[2]=((((-1.0)*r12*x13971))+(((-1.0)*r11*sj5*x13970))+((x13965*x13966)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13970))+((r11*x13972))+(((-1.0)*x13966*x13971)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13971))+((cj1*sj2))+((x13965*x13968))+(((-1.0)*x13967*x13970)));
evalcond[5]=((((-1.0)*r22*x13971))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13970))+((x13965*x13969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13973 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13973.valid){
continue;
}
CheckValue<IkReal> x13974=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13973.value)+(((1.5707963267949)*(x13974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13975=IKsin(j4);
IkReal x13976=IKcos(j4);
IkReal x13977=(cj5*r10);
IkReal x13978=(r01*sj5);
IkReal x13979=(cj5*r00);
IkReal x13980=(cj5*r20);
IkReal x13981=((1.0)*x13976);
IkReal x13982=((1.0)*x13975);
IkReal x13983=(sj5*x13975);
evalcond[0]=(((r21*x13983))+(((-1.0)*r22*x13981))+(((-1.0)*x13980*x13982)));
evalcond[1]=((((-1.0)*x13979*x13982))+(((-1.0)*r02*x13981))+((x13975*x13978)));
evalcond[2]=((((-1.0)*r11*sj5*x13981))+((x13976*x13977))+(((-1.0)*r12*x13982)));
evalcond[3]=((-1.0)+((r11*x13983))+(((-1.0)*x13977*x13982))+(((-1.0)*r12*x13981)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13978*x13981))+((cj1*sj2))+(((-1.0)*r02*x13982))+((x13976*x13979)));
evalcond[5]=(((x13976*x13980))+(((-1.0)*r21*sj5*x13981))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13984=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13984;
j4eval[1]=IKsign(x13984);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13985=((1.0)*cj5);
IkReal x13986=((((-1.0)*r21*x13985))+(((-1.0)*r20*sj5)));
j4eval[0]=x13986;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13985))))));
j4eval[2]=IKsign(x13986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13987=cj5*cj5;
IkReal x13988=r11*r11;
IkReal x13989=(r11*sj5);
IkReal x13990=(cj5*r10);
IkReal x13991=((r12*r12)+((x13987*(r10*r10)))+x13988+(((-2.0)*x13989*x13990))+(((-1.0)*x13987*x13988)));
j4eval[0]=x13991;
j4eval[1]=IKsign(x13991);
j4eval[2]=((IKabs(r12))+(IKabs((x13989+(((-1.0)*x13990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13992=cj5*cj5;
IkReal x13993=r11*r11;
IkReal x13994=(cj5*r10);
IkReal x13995=(r11*sj5);
CheckValue<IkReal> x13996 = IKatan2WithCheck(IkReal((x13995+(((-1.0)*x13994)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13996.valid){
continue;
}
CheckValue<IkReal> x13997=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13993+(((-2.0)*x13994*x13995))+((x13992*(r10*r10)))+(((-1.0)*x13992*x13993)))),-1);
if(!x13997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13996.value)+(((1.5707963267949)*(x13997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13998=IKcos(j4);
IkReal x13999=IKsin(j4);
IkReal x14000=(cj5*r00);
IkReal x14001=(cj5*r10);
IkReal x14002=(r21*sj5);
IkReal x14003=(cj5*r20);
IkReal x14004=((1.0)*x13998);
IkReal x14005=((1.0)*x13999);
IkReal x14006=(sj5*x13999);
IkReal x14007=(sj5*x13998);
evalcond[0]=(((r12*x13999))+((r11*x14007))+(((-1.0)*x14001*x14004)));
evalcond[1]=((((-1.0)*x14003*x14005))+((x13999*x14002))+(((-1.0)*r22*x14004)));
evalcond[2]=((((-1.0)*x14000*x14005))+(((-1.0)*r02*x14004))+((r01*x14006)));
evalcond[3]=((-1.0)+((r11*x14006))+(((-1.0)*r12*x14004))+(((-1.0)*x14001*x14005)));
evalcond[4]=((((-1.0)*x14000*x14004))+((cj2*sj1))+((cj1*sj2))+((r02*x13999))+((r01*x14007)));
evalcond[5]=(((r22*x13999))+((x13998*x14002))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14003*x14004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14008=((1.0)*cj5);
CheckValue<IkReal> x14009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14008))+(((-1.0)*r20*sj5)))),-1);
if(!x14009.valid){
continue;
}
CheckValue<IkReal> x14010 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14008))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14009.value)))+(x14010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14011=IKcos(j4);
IkReal x14012=IKsin(j4);
IkReal x14013=(cj5*r00);
IkReal x14014=(cj5*r10);
IkReal x14015=(r21*sj5);
IkReal x14016=(cj5*r20);
IkReal x14017=((1.0)*x14011);
IkReal x14018=((1.0)*x14012);
IkReal x14019=(sj5*x14012);
IkReal x14020=(sj5*x14011);
evalcond[0]=(((r11*x14020))+(((-1.0)*x14014*x14017))+((r12*x14012)));
evalcond[1]=(((x14012*x14015))+(((-1.0)*x14016*x14018))+(((-1.0)*r22*x14017)));
evalcond[2]=((((-1.0)*r02*x14017))+((r01*x14019))+(((-1.0)*x14013*x14018)));
evalcond[3]=((-1.0)+(((-1.0)*x14014*x14018))+((r11*x14019))+(((-1.0)*r12*x14017)));
evalcond[4]=(((cj2*sj1))+((r01*x14020))+((r02*x14012))+((cj1*sj2))+(((-1.0)*x14013*x14017)));
evalcond[5]=(((x14011*x14015))+(((-1.0)*cj1*cj2))+((r22*x14012))+((sj1*sj2))+(((-1.0)*x14016*x14017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14021 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14021.valid){
continue;
}
CheckValue<IkReal> x14022=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14021.value)+(((1.5707963267949)*(x14022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14023=IKcos(j4);
IkReal x14024=IKsin(j4);
IkReal x14025=(cj5*r00);
IkReal x14026=(cj5*r10);
IkReal x14027=(r21*sj5);
IkReal x14028=(cj5*r20);
IkReal x14029=((1.0)*x14023);
IkReal x14030=((1.0)*x14024);
IkReal x14031=(sj5*x14024);
IkReal x14032=(sj5*x14023);
evalcond[0]=(((r11*x14032))+(((-1.0)*x14026*x14029))+((r12*x14024)));
evalcond[1]=(((x14024*x14027))+(((-1.0)*x14028*x14030))+(((-1.0)*r22*x14029)));
evalcond[2]=(((r01*x14031))+(((-1.0)*r02*x14029))+(((-1.0)*x14025*x14030)));
evalcond[3]=((-1.0)+((r11*x14031))+(((-1.0)*r12*x14029))+(((-1.0)*x14026*x14030)));
evalcond[4]=(((r01*x14032))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14025*x14029))+((r02*x14024)));
evalcond[5]=(((r22*x14024))+((x14023*x14027))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14028*x14029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14034 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14034)==0){
continue;
}
IkReal x14033=pow(x14034,-0.5);
CheckValue<IkReal> x14035 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14035.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14035.value));
IkReal gconst37=((-1.0)*r01*x14033);
IkReal gconst38=(r00*x14033);
CheckValue<IkReal> x14036 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14036.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14036.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14039 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14039.valid){
continue;
}
IkReal x14037=((-1.0)*(x14039.value));
IkReal x14038=x14033;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14037;
IkReal gconst36=x14037;
IkReal gconst37=((-1.0)*r01*x14038);
IkReal gconst38=(r00*x14038);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14042 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14042.valid){
continue;
}
IkReal x14040=((-1.0)*(x14042.value));
IkReal x14041=x14033;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14040;
IkReal gconst36=x14040;
IkReal gconst37=((-1.0)*r01*x14041);
IkReal gconst38=(r00*x14041);
CheckValue<IkReal> x14050=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14050.valid){
continue;
}
IkReal x14043=x14050.value;
IkReal x14044=(sj3*x14043);
IkReal x14045=(r11*x14044);
IkReal x14046=(r21*x14044);
IkReal x14047=(r20*x14044);
IkReal x14048=(r10*x14044);
IkReal x14049=(r00*r01*x14044);
j4eval[0]=IKsign((((r10*x14047*(r00*r00)))+((r00*r01*r10*x14046))+((r00*r01*r20*x14045))+((r12*r22*sj3))+((r21*x14045*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14051=gconst38*gconst38;
IkReal x14052=gconst37*gconst37;
IkReal x14053=((1.0)*cj3);
IkReal x14054=(r11*r20);
IkReal x14055=(r10*sj3);
IkReal x14056=(gconst37*gconst38);
IkReal x14057=(r11*sj3);
IkReal x14058=(r21*x14052);
IkReal x14059=(cj3*x14056);
CheckValue<IkReal> x14060 = IKatan2WithCheck(IkReal((((gconst37*r22*x14055))+((gconst38*r22*x14057)))),IkReal((((r21*x14056*x14057))+(((-1.0)*r20*x14055*x14056))+(((-1.0)*sj3*x14051*x14054))+((x14055*x14058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14060.valid){
continue;
}
CheckValue<IkReal> x14061=IKPowWithIntegerCheck(IKsign((((r10*r21*x14059))+((x14054*x14059))+(((-1.0)*r11*x14053*x14058))+(((-1.0)*r12*r22*x14053))+(((-1.0)*r10*r20*x14051*x14053)))),-1);
if(!x14061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14060.value)+(((1.5707963267949)*(x14061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14062=IKsin(j4);
IkReal x14063=IKcos(j4);
IkReal x14064=(cj2*sj1);
IkReal x14065=(cj1*sj2);
IkReal x14066=(gconst38*r21);
IkReal x14067=(cj3*r20);
IkReal x14068=(gconst38*r10);
IkReal x14069=(cj3*gconst37);
IkReal x14070=(sj1*sj2);
IkReal x14071=(gconst38*r00);
IkReal x14072=(cj1*cj2);
IkReal x14073=(gconst37*sj3);
IkReal x14074=(gconst38*r20);
IkReal x14075=(gconst38*r01);
IkReal x14076=(gconst38*r11);
IkReal x14077=((1.0)*x14063);
IkReal x14078=((1.0)*x14062);
IkReal x14079=(cj3*x14062);
IkReal x14080=(sj3*x14063);
IkReal x14081=(gconst37*x14062);
IkReal x14082=(x14064+x14065);
evalcond[0]=((((-1.0)*r22*x14077))+(((-1.0)*x14074*x14078))+((r21*x14081)));
evalcond[1]=(((r01*x14081))+(((-1.0)*x14071*x14078))+(((-1.0)*r02*x14077)));
evalcond[2]=((-1.0)+(((-1.0)*x14068*x14078))+((r11*x14081))+(((-1.0)*r12*x14077)));
evalcond[3]=(((r11*x14063*x14069))+((sj3*x14076))+(((-1.0)*cj3*x14068*x14077))+((r10*x14073))+((r12*x14079)));
evalcond[4]=(((x14068*x14080))+(((-1.0)*r11*x14073*x14077))+((r10*x14069))+(((-1.0)*r12*sj3*x14078))+((cj3*x14076)));
evalcond[5]=((((-1.0)*gconst38*x14067*x14077))+((r22*x14079))+((sj3*x14066))+((r20*x14073))+((r21*x14063*x14069))+x14082);
evalcond[6]=(((r02*x14079))+((r01*x14063*x14069))+((sj3*x14075))+((r00*x14073))+(((-1.0)*x14070))+(((-1.0)*cj3*x14071*x14077))+x14072);
evalcond[7]=((((-1.0)*r01*x14073*x14077))+(((-1.0)*r02*sj3*x14078))+((x14071*x14080))+((r00*x14069))+x14082+((cj3*x14075)));
evalcond[8]=(((cj3*x14066))+(((-1.0)*r22*sj3*x14078))+((gconst37*x14067))+(((-1.0)*x14072))+(((-1.0)*r21*x14073*x14077))+x14070+((x14074*x14080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14083=gconst38*gconst38;
IkReal x14084=gconst37*gconst37;
IkReal x14085=(gconst37*r10);
IkReal x14086=(cj3*r22);
IkReal x14087=((1.0)*gconst38);
IkReal x14088=(r21*sj3);
IkReal x14089=(gconst38*r11);
IkReal x14090=(cj3*r20);
IkReal x14091=(cj3*r21);
IkReal x14092=(r20*sj3);
CheckValue<IkReal> x14093=IKPowWithIntegerCheck(IKsign((((r10*x14083*x14092))+((r12*r22*sj3))+(((-1.0)*gconst37*r11*x14087*x14092))+(((-1.0)*x14085*x14087*x14088))+((r11*x14084*x14088)))),-1);
if(!x14093.valid){
continue;
}
CheckValue<IkReal> x14094 = IKatan2WithCheck(IkReal((((x14086*x14089))+((x14085*x14086)))),IkReal(((((-1.0)*r11*x14083*x14090))+((r10*x14084*x14091))+((gconst37*x14089*x14091))+(((-1.0)*x14085*x14087*x14090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14093.value)))+(x14094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14095=IKsin(j4);
IkReal x14096=IKcos(j4);
IkReal x14097=(cj2*sj1);
IkReal x14098=(cj1*sj2);
IkReal x14099=(gconst38*r21);
IkReal x14100=(cj3*r20);
IkReal x14101=(gconst38*r10);
IkReal x14102=(cj3*gconst37);
IkReal x14103=(sj1*sj2);
IkReal x14104=(gconst38*r00);
IkReal x14105=(cj1*cj2);
IkReal x14106=(gconst37*sj3);
IkReal x14107=(gconst38*r20);
IkReal x14108=(gconst38*r01);
IkReal x14109=(gconst38*r11);
IkReal x14110=((1.0)*x14096);
IkReal x14111=((1.0)*x14095);
IkReal x14112=(cj3*x14095);
IkReal x14113=(sj3*x14096);
IkReal x14114=(gconst37*x14095);
IkReal x14115=(x14097+x14098);
evalcond[0]=((((-1.0)*r22*x14110))+(((-1.0)*x14107*x14111))+((r21*x14114)));
evalcond[1]=(((r01*x14114))+(((-1.0)*x14104*x14111))+(((-1.0)*r02*x14110)));
evalcond[2]=((-1.0)+((r11*x14114))+(((-1.0)*x14101*x14111))+(((-1.0)*r12*x14110)));
evalcond[3]=(((sj3*x14109))+((r11*x14096*x14102))+((r10*x14106))+((r12*x14112))+(((-1.0)*cj3*x14101*x14110)));
evalcond[4]=(((cj3*x14109))+((r10*x14102))+((x14101*x14113))+(((-1.0)*r11*x14106*x14110))+(((-1.0)*r12*sj3*x14111)));
evalcond[5]=(((sj3*x14099))+(((-1.0)*gconst38*x14100*x14110))+((r22*x14112))+((r21*x14096*x14102))+x14115+((r20*x14106)));
evalcond[6]=(((r02*x14112))+((sj3*x14108))+((r00*x14106))+(((-1.0)*cj3*x14104*x14110))+(((-1.0)*x14103))+((r01*x14096*x14102))+x14105);
evalcond[7]=(((r00*x14102))+((cj3*x14108))+(((-1.0)*r02*sj3*x14111))+(((-1.0)*r01*x14106*x14110))+x14115+((x14104*x14113)));
evalcond[8]=((((-1.0)*r21*x14106*x14110))+(((-1.0)*x14105))+x14103+((cj3*x14099))+((gconst37*x14100))+((x14107*x14113))+(((-1.0)*r22*sj3*x14111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14116=((1.0)*gconst38);
CheckValue<IkReal> x14117 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14116))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14117.valid){
continue;
}
CheckValue<IkReal> x14118=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14116)))),-1);
if(!x14118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14117.value)+(((1.5707963267949)*(x14118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14119=IKsin(j4);
IkReal x14120=IKcos(j4);
IkReal x14121=(cj2*sj1);
IkReal x14122=(cj1*sj2);
IkReal x14123=(gconst38*r21);
IkReal x14124=(cj3*r20);
IkReal x14125=(gconst38*r10);
IkReal x14126=(cj3*gconst37);
IkReal x14127=(sj1*sj2);
IkReal x14128=(gconst38*r00);
IkReal x14129=(cj1*cj2);
IkReal x14130=(gconst37*sj3);
IkReal x14131=(gconst38*r20);
IkReal x14132=(gconst38*r01);
IkReal x14133=(gconst38*r11);
IkReal x14134=((1.0)*x14120);
IkReal x14135=((1.0)*x14119);
IkReal x14136=(cj3*x14119);
IkReal x14137=(sj3*x14120);
IkReal x14138=(gconst37*x14119);
IkReal x14139=(x14121+x14122);
evalcond[0]=(((r21*x14138))+(((-1.0)*x14131*x14135))+(((-1.0)*r22*x14134)));
evalcond[1]=((((-1.0)*r02*x14134))+(((-1.0)*x14128*x14135))+((r01*x14138)));
evalcond[2]=((-1.0)+((r11*x14138))+(((-1.0)*x14125*x14135))+(((-1.0)*r12*x14134)));
evalcond[3]=((((-1.0)*cj3*x14125*x14134))+((sj3*x14133))+((r10*x14130))+((r12*x14136))+((r11*x14120*x14126)));
evalcond[4]=((((-1.0)*r12*sj3*x14135))+((r10*x14126))+((x14125*x14137))+((cj3*x14133))+(((-1.0)*r11*x14130*x14134)));
evalcond[5]=(((r20*x14130))+((r21*x14120*x14126))+((r22*x14136))+x14139+(((-1.0)*gconst38*x14124*x14134))+((sj3*x14123)));
evalcond[6]=(((sj3*x14132))+((r02*x14136))+((r01*x14120*x14126))+(((-1.0)*x14127))+x14129+(((-1.0)*cj3*x14128*x14134))+((r00*x14130)));
evalcond[7]=(((x14128*x14137))+(((-1.0)*r02*sj3*x14135))+(((-1.0)*r01*x14130*x14134))+((r00*x14126))+x14139+((cj3*x14132)));
evalcond[8]=(((cj3*x14123))+(((-1.0)*r21*x14130*x14134))+(((-1.0)*r22*sj3*x14135))+(((-1.0)*x14129))+x14127+((gconst37*x14124))+((x14131*x14137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14141 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14141)==0){
continue;
}
IkReal x14140=pow(x14141,-0.5);
CheckValue<IkReal> x14142 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14142.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14142.value))));
IkReal gconst40=((1.0)*r01*x14140);
IkReal gconst41=((-1.0)*r00*x14140);
CheckValue<IkReal> x14143 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14143.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14143.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14146 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14146.valid){
continue;
}
IkReal x14144=((1.0)*(x14146.value));
IkReal x14145=x14140;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14144)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14144)));
IkReal gconst40=((1.0)*r01*x14145);
IkReal gconst41=((-1.0)*r00*x14145);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14149 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14149.valid){
continue;
}
IkReal x14147=((1.0)*(x14149.value));
IkReal x14148=x14140;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14147)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14147)));
IkReal gconst40=((1.0)*r01*x14148);
IkReal gconst41=((-1.0)*r00*x14148);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14150=gconst41*gconst41;
IkReal x14151=gconst40*gconst40;
IkReal x14152=(gconst40*r10);
IkReal x14153=(r22*sj3);
IkReal x14154=(r11*sj3);
IkReal x14155=((1.0)*cj3);
IkReal x14156=(gconst41*r21);
IkReal x14157=(gconst41*r20);
IkReal x14158=(r21*x14151);
IkReal x14159=((1.0)*r20*x14150);
CheckValue<IkReal> x14160 = IKatan2WithCheck(IkReal((((gconst41*r11*x14153))+((x14152*x14153)))),IkReal(((((-1.0)*x14154*x14159))+(((-1.0)*sj3*x14152*x14157))+((r10*sj3*x14158))+((gconst40*x14154*x14156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14160.valid){
continue;
}
CheckValue<IkReal> x14161=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14157))+(((-1.0)*r10*r20*x14150*x14155))+(((-1.0)*r11*x14155*x14158))+(((-1.0)*r12*r22*x14155))+((cj3*x14152*x14156)))),-1);
if(!x14161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14160.value)+(((1.5707963267949)*(x14161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14162=IKsin(j4);
IkReal x14163=IKcos(j4);
IkReal x14164=(cj2*sj1);
IkReal x14165=(cj1*sj2);
IkReal x14166=(gconst40*sj3);
IkReal x14167=(gconst41*sj3);
IkReal x14168=(gconst41*r20);
IkReal x14169=(cj3*gconst41);
IkReal x14170=(sj1*sj2);
IkReal x14171=(cj1*cj2);
IkReal x14172=(cj3*gconst40);
IkReal x14173=((1.0)*x14163);
IkReal x14174=((1.0)*x14162);
IkReal x14175=(cj3*x14162);
IkReal x14176=(gconst40*x14162);
IkReal x14177=(x14165+x14164);
IkReal x14178=(x14163*x14172);
evalcond[0]=((((-1.0)*x14168*x14174))+((r21*x14176))+(((-1.0)*r22*x14173)));
evalcond[1]=(((r01*x14176))+(((-1.0)*r02*x14173))+(((-1.0)*gconst41*r00*x14174)));
evalcond[2]=((-1.0)+((r11*x14176))+(((-1.0)*gconst41*r10*x14174))+(((-1.0)*r12*x14173)));
evalcond[3]=(((r10*x14166))+((r11*x14178))+((r12*x14175))+((r11*x14167))+(((-1.0)*r10*x14169*x14173)));
evalcond[4]=(((r10*x14163*x14167))+(((-1.0)*r12*sj3*x14174))+(((-1.0)*r11*x14166*x14173))+((r11*x14169))+((r10*x14172)));
evalcond[5]=(((r22*x14175))+((r21*x14178))+(((-1.0)*cj3*x14168*x14173))+x14177+((r21*x14167))+((r20*x14166)));
evalcond[6]=(((r01*x14178))+(((-1.0)*r00*x14169*x14173))+(((-1.0)*x14170))+((r02*x14175))+((r00*x14166))+((r01*x14167))+x14171);
evalcond[7]=(((r00*x14172))+((r00*x14163*x14167))+((r01*x14169))+x14177+(((-1.0)*r01*x14166*x14173))+(((-1.0)*r02*sj3*x14174)));
evalcond[8]=((((-1.0)*r21*x14166*x14173))+((r20*x14163*x14167))+((r20*x14172))+(((-1.0)*x14171))+x14170+((r21*x14169))+(((-1.0)*r22*sj3*x14174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14179=((1.0)*gconst41);
CheckValue<IkReal> x14180=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r20))+(((-1.0)*r21*x14179)))),-1);
if(!x14180.valid){
continue;
}
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14179))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14180.value)))+(x14181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14182=IKsin(j4);
IkReal x14183=IKcos(j4);
IkReal x14184=(cj2*sj1);
IkReal x14185=(cj1*sj2);
IkReal x14186=(gconst40*sj3);
IkReal x14187=(gconst41*sj3);
IkReal x14188=(gconst41*r20);
IkReal x14189=(cj3*gconst41);
IkReal x14190=(sj1*sj2);
IkReal x14191=(cj1*cj2);
IkReal x14192=(cj3*gconst40);
IkReal x14193=((1.0)*x14183);
IkReal x14194=((1.0)*x14182);
IkReal x14195=(cj3*x14182);
IkReal x14196=(gconst40*x14182);
IkReal x14197=(x14185+x14184);
IkReal x14198=(x14183*x14192);
evalcond[0]=((((-1.0)*r22*x14193))+((r21*x14196))+(((-1.0)*x14188*x14194)));
evalcond[1]=((((-1.0)*gconst41*r00*x14194))+(((-1.0)*r02*x14193))+((r01*x14196)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14193))+((r11*x14196))+(((-1.0)*gconst41*r10*x14194)));
evalcond[3]=((((-1.0)*r10*x14189*x14193))+((r11*x14198))+((r12*x14195))+((r11*x14187))+((r10*x14186)));
evalcond[4]=(((r10*x14192))+(((-1.0)*r12*sj3*x14194))+((r10*x14183*x14187))+(((-1.0)*r11*x14186*x14193))+((r11*x14189)));
evalcond[5]=(((r20*x14186))+(((-1.0)*cj3*x14188*x14193))+((r22*x14195))+((r21*x14187))+x14197+((r21*x14198)));
evalcond[6]=((((-1.0)*x14190))+((r02*x14195))+((r01*x14187))+((r00*x14186))+((r01*x14198))+x14191+(((-1.0)*r00*x14189*x14193)));
evalcond[7]=(((r00*x14183*x14187))+(((-1.0)*r01*x14186*x14193))+((r01*x14189))+((r00*x14192))+x14197+(((-1.0)*r02*sj3*x14194)));
evalcond[8]=((((-1.0)*x14191))+(((-1.0)*r22*sj3*x14194))+(((-1.0)*r21*x14186*x14193))+((r20*x14183*x14187))+((r21*x14189))+x14190+((r20*x14192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14199 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14199.valid){
continue;
}
CheckValue<IkReal> x14200=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14199.value)+(((1.5707963267949)*(x14200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14201=IKsin(j4);
IkReal x14202=IKcos(j4);
IkReal x14203=(cj2*sj1);
IkReal x14204=(cj1*sj2);
IkReal x14205=(gconst40*sj3);
IkReal x14206=(gconst41*sj3);
IkReal x14207=(gconst41*r20);
IkReal x14208=(cj3*gconst41);
IkReal x14209=(sj1*sj2);
IkReal x14210=(cj1*cj2);
IkReal x14211=(cj3*gconst40);
IkReal x14212=((1.0)*x14202);
IkReal x14213=((1.0)*x14201);
IkReal x14214=(cj3*x14201);
IkReal x14215=(gconst40*x14201);
IkReal x14216=(x14203+x14204);
IkReal x14217=(x14202*x14211);
evalcond[0]=((((-1.0)*x14207*x14213))+(((-1.0)*r22*x14212))+((r21*x14215)));
evalcond[1]=((((-1.0)*gconst41*r00*x14213))+(((-1.0)*r02*x14212))+((r01*x14215)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14212))+((r11*x14215))+(((-1.0)*gconst41*r10*x14213)));
evalcond[3]=(((r11*x14217))+((r12*x14214))+((r10*x14205))+(((-1.0)*r10*x14208*x14212))+((r11*x14206)));
evalcond[4]=(((r10*x14202*x14206))+(((-1.0)*r11*x14205*x14212))+((r10*x14211))+(((-1.0)*r12*sj3*x14213))+((r11*x14208)));
evalcond[5]=(((r22*x14214))+((r20*x14205))+((r21*x14206))+((r21*x14217))+x14216+(((-1.0)*cj3*x14207*x14212)));
evalcond[6]=((((-1.0)*r00*x14208*x14212))+((r01*x14217))+((r00*x14205))+((r01*x14206))+(((-1.0)*x14209))+((r02*x14214))+x14210);
evalcond[7]=((((-1.0)*r02*sj3*x14213))+((r00*x14202*x14206))+(((-1.0)*r01*x14205*x14212))+((r00*x14211))+((r01*x14208))+x14216);
evalcond[8]=((((-1.0)*r21*x14205*x14212))+((r20*x14202*x14206))+((r21*x14208))+(((-1.0)*r22*sj3*x14213))+(((-1.0)*x14210))+((r20*x14211))+x14209);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14218=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14218);
rxp1_1=(px*r21);
rxp1_2=(r11*x14218);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14219=(r11*sj5);
IkReal x14220=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14220))+x14219);
j4eval[1]=((((-1.0)*cj3*x14220))+((cj3*x14219)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14221=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14221);
rxp1_1=(px*r21);
rxp1_2=(r11*x14221);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14222=(cj5*r10);
IkReal x14223=(r11*sj5);
j4eval[0]=((((-1.0)*x14222))+x14223);
j4eval[1]=((((-1.0)*sj3*x14223))+((sj3*x14222)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14224=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14224);
rxp1_1=(px*r21);
rxp1_2=(r11*x14224);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14225=((1.0)*r10);
CheckValue<IkReal> x14226=IKPowWithIntegerCheck(cj3,-1);
if(!x14226.valid){
continue;
}
CheckValue<IkReal> x14227=IKPowWithIntegerCheck(r02,-1);
if(!x14227.valid){
continue;
}
CheckValue<IkReal> x14228=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14225))),-1);
if(!x14228.valid){
continue;
}
if( IKabs(((x14226.value)*(x14227.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14228.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14225)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14226.value)*(x14227.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14228.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14225))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14226.value)*(x14227.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14228.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14225))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14229=IKsin(j4);
IkReal x14230=IKcos(j4);
IkReal x14231=(cj2*sj1);
IkReal x14232=(cj1*sj2);
IkReal x14233=(cj5*r10);
IkReal x14234=(sj1*sj2);
IkReal x14235=(cj5*sj3);
IkReal x14236=(r11*sj5);
IkReal x14237=(cj3*sj5);
IkReal x14238=(r21*sj5);
IkReal x14239=(cj1*cj2);
IkReal x14240=(cj3*cj5);
IkReal x14241=(sj3*sj5);
IkReal x14242=((1.0)*x14229);
IkReal x14243=(r20*x14230);
IkReal x14244=(cj3*x14230);
IkReal x14245=(sj3*x14230);
IkReal x14246=(x14231+x14232);
evalcond[0]=((-1.0)*r02*x14230);
evalcond[1]=(((x14229*x14238))+(((-1.0)*cj5*r20*x14242)));
evalcond[2]=((((-1.0)*x14234))+x14239+((cj3*r02*x14229)));
evalcond[3]=((((-1.0)*r02*sj3*x14242))+x14246);
evalcond[4]=((-1.0)+((x14229*x14236))+(((-1.0)*x14233*x14242)));
evalcond[5]=(((x14236*x14244))+(((-1.0)*x14233*x14244))+((r10*x14241))+((r11*x14235)));
evalcond[6]=(((r10*x14237))+((x14233*x14245))+((r11*x14240))+(((-1.0)*x14236*x14245)));
evalcond[7]=(((r21*x14235))+((r21*x14230*x14237))+((r20*x14241))+(((-1.0)*x14240*x14243))+x14246);
evalcond[8]=(((r21*x14240))+((x14235*x14243))+((r20*x14237))+(((-1.0)*x14238*x14245))+(((-1.0)*x14239))+x14234);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14247=(cj5*r10);
IkReal x14248=((1.0)*r11);
CheckValue<IkReal> x14249=IKPowWithIntegerCheck(((((-1.0)*x14247))+((r11*sj5))),-1);
if(!x14249.valid){
continue;
}
CheckValue<IkReal> x14250=IKPowWithIntegerCheck((((sj3*x14247))+(((-1.0)*sj3*sj5*x14248))),-1);
if(!x14250.valid){
continue;
}
if( IKabs(x14249.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14250.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14248)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14249.value)+IKsqr(((x14250.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14248))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14249.value, ((x14250.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14248))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14251=IKsin(j4);
IkReal x14252=IKcos(j4);
IkReal x14253=(cj2*sj1);
IkReal x14254=(cj1*sj2);
IkReal x14255=(cj5*r10);
IkReal x14256=(sj1*sj2);
IkReal x14257=(cj5*sj3);
IkReal x14258=(r11*sj5);
IkReal x14259=(cj3*sj5);
IkReal x14260=(r21*sj5);
IkReal x14261=(cj1*cj2);
IkReal x14262=(cj3*cj5);
IkReal x14263=(sj3*sj5);
IkReal x14264=((1.0)*x14251);
IkReal x14265=(r20*x14252);
IkReal x14266=(cj3*x14252);
IkReal x14267=(sj3*x14252);
IkReal x14268=(x14254+x14253);
evalcond[0]=((-1.0)*r02*x14252);
evalcond[1]=(((x14251*x14260))+(((-1.0)*cj5*r20*x14264)));
evalcond[2]=(((cj3*r02*x14251))+x14261+(((-1.0)*x14256)));
evalcond[3]=((((-1.0)*r02*sj3*x14264))+x14268);
evalcond[4]=((-1.0)+(((-1.0)*x14255*x14264))+((x14251*x14258)));
evalcond[5]=((((-1.0)*x14255*x14266))+((r11*x14257))+((x14258*x14266))+((r10*x14263)));
evalcond[6]=(((r11*x14262))+((r10*x14259))+(((-1.0)*x14258*x14267))+((x14255*x14267)));
evalcond[7]=((((-1.0)*x14262*x14265))+((r21*x14257))+((r20*x14263))+((r21*x14252*x14259))+x14268);
evalcond[8]=(((r21*x14262))+(((-1.0)*x14261))+(((-1.0)*x14260*x14267))+((r20*x14259))+((x14257*x14265))+x14256);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14269=((1.0)*r10);
IkReal x14270=(r11*sj5);
CheckValue<IkReal> x14271=IKPowWithIntegerCheck(((((-1.0)*cj5*x14269))+x14270),-1);
if(!x14271.valid){
continue;
}
CheckValue<IkReal> x14272=IKPowWithIntegerCheck((((cj3*x14270))+(((-1.0)*cj3*cj5*x14269))),-1);
if(!x14272.valid){
continue;
}
if( IKabs(x14271.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14272.value)*(((((-1.0)*sj3*sj5*x14269))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14271.value)+IKsqr(((x14272.value)*(((((-1.0)*sj3*sj5*x14269))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14271.value, ((x14272.value)*(((((-1.0)*sj3*sj5*x14269))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14273=IKsin(j4);
IkReal x14274=IKcos(j4);
IkReal x14275=(cj2*sj1);
IkReal x14276=(cj1*sj2);
IkReal x14277=(cj5*r10);
IkReal x14278=(sj1*sj2);
IkReal x14279=(cj5*sj3);
IkReal x14280=(r11*sj5);
IkReal x14281=(cj3*sj5);
IkReal x14282=(r21*sj5);
IkReal x14283=(cj1*cj2);
IkReal x14284=(cj3*cj5);
IkReal x14285=(sj3*sj5);
IkReal x14286=((1.0)*x14273);
IkReal x14287=(r20*x14274);
IkReal x14288=(cj3*x14274);
IkReal x14289=(sj3*x14274);
IkReal x14290=(x14275+x14276);
evalcond[0]=((-1.0)*r02*x14274);
evalcond[1]=(((x14273*x14282))+(((-1.0)*cj5*r20*x14286)));
evalcond[2]=((((-1.0)*x14278))+((cj3*r02*x14273))+x14283);
evalcond[3]=((((-1.0)*r02*sj3*x14286))+x14290);
evalcond[4]=((-1.0)+((x14273*x14280))+(((-1.0)*x14277*x14286)));
evalcond[5]=(((r10*x14285))+((r11*x14279))+((x14280*x14288))+(((-1.0)*x14277*x14288)));
evalcond[6]=(((r10*x14281))+((r11*x14284))+(((-1.0)*x14280*x14289))+((x14277*x14289)));
evalcond[7]=(((r21*x14274*x14281))+((r21*x14279))+x14290+((r20*x14285))+(((-1.0)*x14284*x14287)));
evalcond[8]=(((r21*x14284))+(((-1.0)*x14282*x14289))+((x14279*x14287))+(((-1.0)*x14283))+x14278+((r20*x14281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14291=cj5*cj5;
IkReal x14292=((1.0)*cj3);
IkReal x14293=(r10*r21);
IkReal x14294=(cj5*sj5);
IkReal x14295=(r11*r21);
IkReal x14296=(r11*r20);
IkReal x14297=(r22*sj3);
IkReal x14298=(r10*r20);
IkReal x14299=((1.0)*sj3*x14291);
CheckValue<IkReal> x14300=IKPowWithIntegerCheck(IKsign((((cj3*x14291*x14295))+((cj3*x14294*x14296))+(((-1.0)*x14292*x14295))+(((-1.0)*x14291*x14292*x14298))+(((-1.0)*r12*r22*x14292))+((cj3*x14293*x14294)))),-1);
if(!x14300.valid){
continue;
}
CheckValue<IkReal> x14301 = IKatan2WithCheck(IkReal((((r10*sj5*x14297))+((cj5*r11*x14297)))),IkReal(((((-1.0)*x14293*x14299))+(((-1.0)*sj3*x14294*x14298))+((sj3*x14293))+(((-1.0)*x14296*x14299))+((sj3*x14294*x14295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14300.value)))+(x14301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14302=IKsin(j4);
IkReal x14303=IKcos(j4);
IkReal x14304=(cj2*sj1);
IkReal x14305=(cj1*sj2);
IkReal x14306=(cj5*sj3);
IkReal x14307=(cj5*r10);
IkReal x14308=(r00*sj5);
IkReal x14309=(sj1*sj2);
IkReal x14310=(r11*sj5);
IkReal x14311=(cj3*cj5);
IkReal x14312=(cj3*sj5);
IkReal x14313=(r21*sj5);
IkReal x14314=(cj1*cj2);
IkReal x14315=(sj3*sj5);
IkReal x14316=(r01*sj5);
IkReal x14317=((1.0)*x14303);
IkReal x14318=((1.0)*x14302);
IkReal x14319=(cj3*x14302);
IkReal x14320=(cj3*x14303);
IkReal x14321=(x14305+x14304);
evalcond[0]=((((-1.0)*r22*x14317))+(((-1.0)*cj5*r20*x14318))+((x14302*x14313)));
evalcond[1]=((((-1.0)*r02*x14317))+((x14302*x14316))+(((-1.0)*cj5*r00*x14318)));
evalcond[2]=((-1.0)+(((-1.0)*x14307*x14318))+((x14302*x14310))+(((-1.0)*r12*x14317)));
evalcond[3]=(((r11*x14306))+(((-1.0)*cj3*x14307*x14317))+((x14310*x14320))+((r12*x14319))+((r10*x14315)));
evalcond[4]=(((r11*x14311))+((r10*x14303*x14306))+(((-1.0)*r12*sj3*x14318))+(((-1.0)*sj3*x14310*x14317))+((r10*x14312)));
evalcond[5]=(((r21*x14303*x14312))+(((-1.0)*r20*x14311*x14317))+((r20*x14315))+x14321+((r21*x14306))+((r22*x14319)));
evalcond[6]=((((-1.0)*r00*x14311*x14317))+((r02*x14319))+((r01*x14306))+(((-1.0)*x14309))+x14314+((r01*x14303*x14312))+((sj3*x14308)));
evalcond[7]=(((r00*x14303*x14306))+(((-1.0)*r01*x14315*x14317))+(((-1.0)*r02*sj3*x14318))+((r01*x14311))+x14321+((cj3*x14308)));
evalcond[8]=(((r20*x14303*x14306))+(((-1.0)*x14314))+(((-1.0)*sj3*x14313*x14317))+((r20*x14312))+((r21*x14311))+x14309+(((-1.0)*r22*sj3*x14318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14322=((1.0)*cj5);
CheckValue<IkReal> x14323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14322))+(((-1.0)*r20*sj5)))),-1);
if(!x14323.valid){
continue;
}
CheckValue<IkReal> x14324 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14323.value)))+(x14324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14325=IKsin(j4);
IkReal x14326=IKcos(j4);
IkReal x14327=(cj2*sj1);
IkReal x14328=(cj1*sj2);
IkReal x14329=(cj5*sj3);
IkReal x14330=(cj5*r10);
IkReal x14331=(r00*sj5);
IkReal x14332=(sj1*sj2);
IkReal x14333=(r11*sj5);
IkReal x14334=(cj3*cj5);
IkReal x14335=(cj3*sj5);
IkReal x14336=(r21*sj5);
IkReal x14337=(cj1*cj2);
IkReal x14338=(sj3*sj5);
IkReal x14339=(r01*sj5);
IkReal x14340=((1.0)*x14326);
IkReal x14341=((1.0)*x14325);
IkReal x14342=(cj3*x14325);
IkReal x14343=(cj3*x14326);
IkReal x14344=(x14327+x14328);
evalcond[0]=(((x14325*x14336))+(((-1.0)*r22*x14340))+(((-1.0)*cj5*r20*x14341)));
evalcond[1]=(((x14325*x14339))+(((-1.0)*cj5*r00*x14341))+(((-1.0)*r02*x14340)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14340))+((x14325*x14333))+(((-1.0)*x14330*x14341)));
evalcond[3]=(((x14333*x14343))+((r11*x14329))+((r12*x14342))+((r10*x14338))+(((-1.0)*cj3*x14330*x14340)));
evalcond[4]=(((r10*x14326*x14329))+(((-1.0)*sj3*x14333*x14340))+((r11*x14334))+(((-1.0)*r12*sj3*x14341))+((r10*x14335)));
evalcond[5]=(((r20*x14338))+(((-1.0)*r20*x14334*x14340))+((r22*x14342))+((r21*x14326*x14335))+((r21*x14329))+x14344);
evalcond[6]=(((r01*x14329))+(((-1.0)*x14332))+((r02*x14342))+x14337+((r01*x14326*x14335))+((sj3*x14331))+(((-1.0)*r00*x14334*x14340)));
evalcond[7]=(((r00*x14326*x14329))+(((-1.0)*r01*x14338*x14340))+(((-1.0)*r02*sj3*x14341))+((r01*x14334))+x14344+((cj3*x14331)));
evalcond[8]=(((r20*x14335))+(((-1.0)*sj3*x14336*x14340))+(((-1.0)*x14337))+x14332+((r21*x14334))+(((-1.0)*r22*sj3*x14341))+((r20*x14326*x14329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14345 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14345.valid){
continue;
}
CheckValue<IkReal> x14346=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14345.value)+(((1.5707963267949)*(x14346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14347=IKsin(j4);
IkReal x14348=IKcos(j4);
IkReal x14349=(cj2*sj1);
IkReal x14350=(cj1*sj2);
IkReal x14351=(cj5*sj3);
IkReal x14352=(cj5*r10);
IkReal x14353=(r00*sj5);
IkReal x14354=(sj1*sj2);
IkReal x14355=(r11*sj5);
IkReal x14356=(cj3*cj5);
IkReal x14357=(cj3*sj5);
IkReal x14358=(r21*sj5);
IkReal x14359=(cj1*cj2);
IkReal x14360=(sj3*sj5);
IkReal x14361=(r01*sj5);
IkReal x14362=((1.0)*x14348);
IkReal x14363=((1.0)*x14347);
IkReal x14364=(cj3*x14347);
IkReal x14365=(cj3*x14348);
IkReal x14366=(x14349+x14350);
evalcond[0]=(((x14347*x14358))+(((-1.0)*r22*x14362))+(((-1.0)*cj5*r20*x14363)));
evalcond[1]=((((-1.0)*r02*x14362))+(((-1.0)*cj5*r00*x14363))+((x14347*x14361)));
evalcond[2]=((-1.0)+((x14347*x14355))+(((-1.0)*x14352*x14363))+(((-1.0)*r12*x14362)));
evalcond[3]=(((r10*x14360))+((r11*x14351))+((r12*x14364))+((x14355*x14365))+(((-1.0)*cj3*x14352*x14362)));
evalcond[4]=(((r11*x14356))+(((-1.0)*r12*sj3*x14363))+((r10*x14357))+(((-1.0)*sj3*x14355*x14362))+((r10*x14348*x14351)));
evalcond[5]=((((-1.0)*r20*x14356*x14362))+((r20*x14360))+((r21*x14348*x14357))+((r21*x14351))+x14366+((r22*x14364)));
evalcond[6]=(((sj3*x14353))+((r02*x14364))+(((-1.0)*r00*x14356*x14362))+(((-1.0)*x14354))+((r01*x14351))+((r01*x14348*x14357))+x14359);
evalcond[7]=(((cj3*x14353))+((r00*x14348*x14351))+((r01*x14356))+(((-1.0)*r02*sj3*x14363))+x14366+(((-1.0)*r01*x14360*x14362)));
evalcond[8]=(((r20*x14348*x14351))+((r20*x14357))+(((-1.0)*x14359))+(((-1.0)*sj3*x14358*x14362))+((r21*x14356))+x14354+(((-1.0)*r22*sj3*x14363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14367=((-1.0)*r00);
IkReal x14369 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14369)==0){
continue;
}
IkReal x14368=pow(x14369,-0.5);
CheckValue<IkReal> x14370 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14367),IKFAST_ATAN2_MAGTHRESH);
if(!x14370.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14370.value));
IkReal gconst13=(r01*x14368);
IkReal gconst14=(x14367*x14368);
CheckValue<IkReal> x14371 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14371.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14371.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14372=((-1.0)*r00);
IkReal x14373=x14368;
CheckValue<IkReal> x14375 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14372),IKFAST_ATAN2_MAGTHRESH);
if(!x14375.valid){
continue;
}
IkReal x14374=((-1.0)*(x14375.value));
sj5=gconst13;
cj5=gconst14;
j5=x14374;
IkReal gconst12=x14374;
IkReal gconst13=(r01*x14373);
IkReal gconst14=(x14372*x14373);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14376=((1.0)*sj0);
IkReal x14377=((1.0)*cj0);
CheckValue<IkReal> x14378 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14376))+(((-1.0)*r02*x14377)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14376))+(((-1.0)*gconst13*r01*x14377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14378.valid){
continue;
}
CheckValue<IkReal> x14379=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14378.value)+(((1.5707963267949)*(x14379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14380=IKsin(j4);
IkReal x14381=IKcos(j4);
IkReal x14382=((1.0)*r22);
IkReal x14383=((1.0)*r12);
IkReal x14384=(gconst13*sj3);
IkReal x14385=(gconst13*r01);
IkReal x14386=(sj1*sj2);
IkReal x14387=(gconst14*sj3);
IkReal x14388=(cj2*sj1);
IkReal x14389=((1.0)*sj0);
IkReal x14390=(cj3*gconst13);
IkReal x14391=(cj3*gconst14);
IkReal x14392=((1.0)*cj0);
IkReal x14393=((1.0)*gconst14);
IkReal x14394=(cj1*sj2);
IkReal x14395=(sj3*x14380);
IkReal x14396=((1.0)*cj1*cj2);
IkReal x14397=(cj3*x14381);
IkReal x14398=(cj3*x14380);
IkReal x14399=(gconst13*x14380);
IkReal x14400=((1.0)*x14381);
IkReal x14401=(x14380*x14393);
evalcond[0]=(((r21*x14399))+(((-1.0)*x14381*x14382))+(((-1.0)*r20*x14401)));
evalcond[1]=(cj0+(((-1.0)*r10*x14401))+((r11*x14399))+(((-1.0)*x14381*x14383)));
evalcond[2]=((((-1.0)*x14389))+(((-1.0)*r02*x14400))+((x14380*x14385))+(((-1.0)*r00*x14401)));
evalcond[3]=(((r20*x14384))+((r21*x14387))+((r22*x14398))+(((-1.0)*r20*x14391*x14400))+x14388+x14394+((r21*x14381*x14390)));
evalcond[4]=(((r21*x14391))+((r20*x14381*x14387))+(((-1.0)*r21*x14384*x14400))+(((-1.0)*x14382*x14395))+x14386+((r20*x14390))+(((-1.0)*x14396)));
evalcond[5]=(((cj0*x14386))+(((-1.0)*cj1*cj2*x14392))+((r00*x14384))+((r01*x14387))+((x14385*x14397))+(((-1.0)*r00*x14391*x14400))+((r02*x14398)));
evalcond[6]=(((sj0*x14386))+(((-1.0)*cj1*cj2*x14389))+((r12*x14398))+((r10*x14384))+((r11*x14387))+(((-1.0)*r10*x14391*x14400))+((r11*x14381*x14390)));
evalcond[7]=((((-1.0)*x14392*x14394))+((r01*x14391))+((r00*x14390))+(((-1.0)*r01*x14384*x14400))+(((-1.0)*x14388*x14392))+(((-1.0)*r02*x14395))+((r00*x14381*x14387)));
evalcond[8]=(((r10*x14381*x14387))+(((-1.0)*r11*x14384*x14400))+(((-1.0)*x14383*x14395))+((r10*x14390))+((r11*x14391))+(((-1.0)*x14389*x14394))+(((-1.0)*x14388*x14389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14402=((1.0)*gconst14);
CheckValue<IkReal> x14403=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14402)))),-1);
if(!x14403.valid){
continue;
}
CheckValue<IkReal> x14404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x14402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14403.value)))+(x14404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14405=IKsin(j4);
IkReal x14406=IKcos(j4);
IkReal x14407=((1.0)*r22);
IkReal x14408=((1.0)*r12);
IkReal x14409=(gconst13*sj3);
IkReal x14410=(gconst13*r01);
IkReal x14411=(sj1*sj2);
IkReal x14412=(gconst14*sj3);
IkReal x14413=(cj2*sj1);
IkReal x14414=((1.0)*sj0);
IkReal x14415=(cj3*gconst13);
IkReal x14416=(cj3*gconst14);
IkReal x14417=((1.0)*cj0);
IkReal x14418=((1.0)*gconst14);
IkReal x14419=(cj1*sj2);
IkReal x14420=(sj3*x14405);
IkReal x14421=((1.0)*cj1*cj2);
IkReal x14422=(cj3*x14406);
IkReal x14423=(cj3*x14405);
IkReal x14424=(gconst13*x14405);
IkReal x14425=((1.0)*x14406);
IkReal x14426=(x14405*x14418);
evalcond[0]=((((-1.0)*x14406*x14407))+((r21*x14424))+(((-1.0)*r20*x14426)));
evalcond[1]=((((-1.0)*r10*x14426))+cj0+((r11*x14424))+(((-1.0)*x14406*x14408)));
evalcond[2]=(((x14405*x14410))+(((-1.0)*x14414))+(((-1.0)*r02*x14425))+(((-1.0)*r00*x14426)));
evalcond[3]=((((-1.0)*r20*x14416*x14425))+((r21*x14412))+x14413+x14419+((r21*x14406*x14415))+((r22*x14423))+((r20*x14409)));
evalcond[4]=(((r21*x14416))+((r20*x14406*x14412))+(((-1.0)*x14407*x14420))+x14411+(((-1.0)*r21*x14409*x14425))+(((-1.0)*x14421))+((r20*x14415)));
evalcond[5]=((((-1.0)*cj1*cj2*x14417))+((cj0*x14411))+((x14410*x14422))+((r00*x14409))+(((-1.0)*r00*x14416*x14425))+((r01*x14412))+((r02*x14423)));
evalcond[6]=(((r10*x14409))+((r11*x14406*x14415))+(((-1.0)*cj1*cj2*x14414))+(((-1.0)*r10*x14416*x14425))+((r11*x14412))+((r12*x14423))+((sj0*x14411)));
evalcond[7]=((((-1.0)*x14417*x14419))+(((-1.0)*x14413*x14417))+((r00*x14415))+(((-1.0)*r01*x14409*x14425))+((r01*x14416))+((r00*x14406*x14412))+(((-1.0)*r02*x14420)));
evalcond[8]=(((r11*x14416))+(((-1.0)*r11*x14409*x14425))+(((-1.0)*x14413*x14414))+(((-1.0)*x14414*x14419))+(((-1.0)*x14408*x14420))+((r10*x14415))+((r10*x14406*x14412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14427=((-1.0)*r01);
IkReal x14429 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14429)==0){
continue;
}
IkReal x14428=pow(x14429,-0.5);
CheckValue<IkReal> x14430 = IKatan2WithCheck(IkReal(x14427),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14430.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14430.value))));
IkReal gconst16=(x14427*x14428);
IkReal gconst17=((1.0)*r00*x14428);
CheckValue<IkReal> x14431 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14431.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14431.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14432=((-1.0)*r01);
CheckValue<IkReal> x14435 = IKatan2WithCheck(IkReal(x14432),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14435.valid){
continue;
}
IkReal x14433=((1.0)*(x14435.value));
IkReal x14434=x14428;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14433)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14433)));
IkReal gconst16=(x14432*x14434);
IkReal gconst17=((1.0)*r00*x14434);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14436=((-1.0)*r01);
CheckValue<IkReal> x14439 = IKatan2WithCheck(IkReal(x14436),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14439.valid){
continue;
}
IkReal x14437=((1.0)*(x14439.value));
IkReal x14438=x14428;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14437)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14437)));
IkReal gconst16=(x14436*x14438);
IkReal gconst17=((1.0)*r00*x14438);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14440=((-1.0)*r01);
CheckValue<IkReal> x14443 = IKatan2WithCheck(IkReal(x14440),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14443.valid){
continue;
}
IkReal x14441=((1.0)*(x14443.value));
IkReal x14442=x14428;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14441)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14441)));
IkReal gconst16=(x14440*x14442);
IkReal gconst17=((1.0)*r00*x14442);
IkReal x14444=r02*r02;
IkReal x14445=(r12*sj0);
IkReal x14446=((1.0)*cj0);
IkReal x14447=x14428;
j4eval[0]=((IKabs(((((-1.0)*x14445))+(((-1.0)*r02*x14446)))))+(IKabs(((((-1.0)*x14446*x14447))+((cj0*x14444*x14447))+((r02*x14445*x14447))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14448=((-1.0)*r01);
CheckValue<IkReal> x14451 = IKatan2WithCheck(IkReal(x14448),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14451.valid){
continue;
}
IkReal x14449=((1.0)*(x14451.value));
IkReal x14450=x14428;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14449)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14449)));
IkReal gconst16=(x14448*x14450);
IkReal gconst17=((1.0)*r00*x14450);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14452=((-1.0)*r01);
CheckValue<IkReal> x14455 = IKatan2WithCheck(IkReal(x14452),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14455.valid){
continue;
}
IkReal x14453=((1.0)*(x14455.value));
IkReal x14454=x14428;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14453)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14453)));
IkReal gconst16=(x14452*x14454);
IkReal gconst17=((1.0)*r00*x14454);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14456=gconst16*gconst16;
IkReal x14457=gconst17*gconst17;
IkReal x14458=(r11*sj3);
IkReal x14459=(cj3*r10);
IkReal x14460=((1.0)*cj3);
IkReal x14461=(r10*sj3);
IkReal x14462=(gconst16*gconst17);
IkReal x14463=(r21*x14456);
IkReal x14464=((1.0)*r20*x14457);
CheckValue<IkReal> x14465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14460))+((cj3*r11*r20*x14462))+(((-1.0)*r11*x14460*x14463))+((r21*x14459*x14462))+(((-1.0)*x14459*x14464)))),-1);
if(!x14465.valid){
continue;
}
CheckValue<IkReal> x14466 = IKatan2WithCheck(IkReal((((gconst16*r22*x14461))+((gconst17*r22*x14458)))),IkReal((((x14461*x14463))+(((-1.0)*x14458*x14464))+(((-1.0)*r20*x14461*x14462))+((r21*x14458*x14462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14465.value)))+(x14466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14467=IKsin(j4);
IkReal x14468=IKcos(j4);
IkReal x14469=(cj2*sj1);
IkReal x14470=(cj1*sj2);
IkReal x14471=(gconst16*r21);
IkReal x14472=(cj3*gconst17);
IkReal x14473=(gconst16*r20);
IkReal x14474=(sj1*sj2);
IkReal x14475=(gconst17*r20);
IkReal x14476=(gconst17*sj3);
IkReal x14477=(gconst16*r10);
IkReal x14478=(cj1*cj2);
IkReal x14479=(gconst16*sj3);
IkReal x14480=((1.0)*x14468);
IkReal x14481=((1.0)*x14467);
IkReal x14482=(gconst16*x14467);
IkReal x14483=(cj3*x14468);
IkReal x14484=(cj3*x14467);
IkReal x14485=(x14470+x14469);
evalcond[0]=((((-1.0)*r22*x14480))+(((-1.0)*x14475*x14481))+((x14467*x14471)));
evalcond[1]=((((-1.0)*gconst17*r00*x14481))+(((-1.0)*r02*x14480))+((r01*x14482)));
evalcond[2]=((-1.0)+((r11*x14482))+(((-1.0)*gconst17*r10*x14481))+(((-1.0)*r12*x14480)));
evalcond[3]=(((sj3*x14477))+((r12*x14484))+((r11*x14476))+(((-1.0)*r10*x14472*x14480))+((gconst16*r11*x14483)));
evalcond[4]=((((-1.0)*r11*x14479*x14480))+((r10*x14468*x14476))+((r11*x14472))+(((-1.0)*r12*sj3*x14481))+((cj3*x14477)));
evalcond[5]=(((sj3*x14473))+((r21*x14476))+((r22*x14484))+(((-1.0)*r20*x14472*x14480))+x14485+((x14471*x14483)));
evalcond[6]=(((r00*x14479))+((r02*x14484))+((r01*x14476))+(((-1.0)*x14474))+(((-1.0)*r00*x14472*x14480))+x14478+((gconst16*r01*x14483)));
evalcond[7]=((((-1.0)*r02*sj3*x14481))+((r01*x14472))+x14485+(((-1.0)*r01*x14479*x14480))+((cj3*gconst16*r00))+((r00*x14468*x14476)));
evalcond[8]=(((r21*x14472))+(((-1.0)*r22*sj3*x14481))+(((-1.0)*sj3*x14471*x14480))+(((-1.0)*x14478))+((sj3*x14468*x14475))+x14474+((cj3*x14473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14486=((1.0)*gconst17);
CheckValue<IkReal> x14487 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14487.valid){
continue;
}
CheckValue<IkReal> x14488=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14486)))),-1);
if(!x14488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14487.value)+(((1.5707963267949)*(x14488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14489=IKsin(j4);
IkReal x14490=IKcos(j4);
IkReal x14491=(cj2*sj1);
IkReal x14492=(cj1*sj2);
IkReal x14493=(gconst16*r21);
IkReal x14494=(cj3*gconst17);
IkReal x14495=(gconst16*r20);
IkReal x14496=(sj1*sj2);
IkReal x14497=(gconst17*r20);
IkReal x14498=(gconst17*sj3);
IkReal x14499=(gconst16*r10);
IkReal x14500=(cj1*cj2);
IkReal x14501=(gconst16*sj3);
IkReal x14502=((1.0)*x14490);
IkReal x14503=((1.0)*x14489);
IkReal x14504=(gconst16*x14489);
IkReal x14505=(cj3*x14490);
IkReal x14506=(cj3*x14489);
IkReal x14507=(x14491+x14492);
evalcond[0]=((((-1.0)*x14497*x14503))+(((-1.0)*r22*x14502))+((x14489*x14493)));
evalcond[1]=((((-1.0)*r02*x14502))+(((-1.0)*gconst17*r00*x14503))+((r01*x14504)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14502))+((r11*x14504))+(((-1.0)*gconst17*r10*x14503)));
evalcond[3]=(((r11*x14498))+((gconst16*r11*x14505))+((sj3*x14499))+(((-1.0)*r10*x14494*x14502))+((r12*x14506)));
evalcond[4]=(((r11*x14494))+((r10*x14490*x14498))+((cj3*x14499))+(((-1.0)*r11*x14501*x14502))+(((-1.0)*r12*sj3*x14503)));
evalcond[5]=(((r21*x14498))+((sj3*x14495))+((x14493*x14505))+((r22*x14506))+(((-1.0)*r20*x14494*x14502))+x14507);
evalcond[6]=((((-1.0)*x14496))+((r02*x14506))+x14500+((gconst16*r01*x14505))+(((-1.0)*r00*x14494*x14502))+((r00*x14501))+((r01*x14498)));
evalcond[7]=((((-1.0)*r01*x14501*x14502))+x14507+((r01*x14494))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14503))+((r00*x14490*x14498)));
evalcond[8]=(((r21*x14494))+(((-1.0)*sj3*x14493*x14502))+(((-1.0)*x14500))+((sj3*x14490*x14497))+x14496+((cj3*x14495))+(((-1.0)*r22*sj3*x14503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14508=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14508.valid){
continue;
}
CheckValue<IkReal> x14509 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14508.value)))+(x14509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14510=IKsin(j4);
IkReal x14511=IKcos(j4);
IkReal x14512=(cj2*sj1);
IkReal x14513=(cj1*sj2);
IkReal x14514=(gconst16*r21);
IkReal x14515=(cj3*gconst17);
IkReal x14516=(gconst16*r20);
IkReal x14517=(sj1*sj2);
IkReal x14518=(gconst17*r20);
IkReal x14519=(gconst17*sj3);
IkReal x14520=(gconst16*r10);
IkReal x14521=(cj1*cj2);
IkReal x14522=(gconst16*sj3);
IkReal x14523=((1.0)*x14511);
IkReal x14524=((1.0)*x14510);
IkReal x14525=(gconst16*x14510);
IkReal x14526=(cj3*x14511);
IkReal x14527=(cj3*x14510);
IkReal x14528=(x14512+x14513);
evalcond[0]=((((-1.0)*r22*x14523))+(((-1.0)*x14518*x14524))+((x14510*x14514)));
evalcond[1]=((((-1.0)*gconst17*r00*x14524))+((r01*x14525))+(((-1.0)*r02*x14523)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14524))+((r11*x14525))+(((-1.0)*r12*x14523)));
evalcond[3]=(((sj3*x14520))+((r11*x14519))+((r12*x14527))+((gconst16*r11*x14526))+(((-1.0)*r10*x14515*x14523)));
evalcond[4]=((((-1.0)*r12*sj3*x14524))+((r11*x14515))+((cj3*x14520))+((r10*x14511*x14519))+(((-1.0)*r11*x14522*x14523)));
evalcond[5]=(((r22*x14527))+((sj3*x14516))+((x14514*x14526))+x14528+((r21*x14519))+(((-1.0)*r20*x14515*x14523)));
evalcond[6]=(((gconst16*r01*x14526))+((r00*x14522))+((r01*x14519))+x14521+(((-1.0)*r00*x14515*x14523))+((r02*x14527))+(((-1.0)*x14517)));
evalcond[7]=(((r00*x14511*x14519))+((r01*x14515))+(((-1.0)*r01*x14522*x14523))+x14528+(((-1.0)*r02*sj3*x14524))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14521))+((sj3*x14511*x14518))+(((-1.0)*sj3*x14514*x14523))+((cj3*x14516))+x14517+(((-1.0)*r22*sj3*x14524))+((r21*x14515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14529=((-1.0)*r01);
CheckValue<IkReal> x14532 = IKatan2WithCheck(IkReal(x14529),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14532.valid){
continue;
}
IkReal x14530=((1.0)*(x14532.value));
IkReal x14531=x14428;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14530)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14530)));
IkReal gconst16=(x14529*x14531);
IkReal gconst17=((1.0)*r00*x14531);
IkReal x14533=r02*r02;
IkReal x14534=(r12*sj0);
IkReal x14535=((1.0)*cj0);
IkReal x14536=x14428;
j4eval[0]=((IKabs(((((-1.0)*x14535*x14536))+((r02*x14534*x14536))+((cj0*x14533*x14536)))))+(IKabs(((((-1.0)*x14534))+(((-1.0)*r02*x14535))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14537=((1.0)*r12);
IkReal x14538=(sj1*sj2);
IkReal x14539=(cj1*cj2);
IkReal x14540=((1.0)*sj3);
IkReal x14541=(gconst16*r21);
IkReal x14542=(cj3*gconst16*r20);
IkReal x14543=(gconst17*r20*sj3);
IkReal x14544=(cj3*gconst17*r21);
CheckValue<IkReal> x14545=IKPowWithIntegerCheck((((gconst16*r11*x14543))+(((-1.0)*r10*r20*x14540*(gconst17*gconst17)))+(((-1.0)*gconst16*r11*x14540*x14541))+((gconst17*r10*sj3*x14541))),-1);
if(!x14545.valid){
continue;
}
CheckValue<IkReal> x14546=IKPowWithIntegerCheck(((((-1.0)*x14540*x14541))+x14543),-1);
if(!x14546.valid){
continue;
}
if( IKabs(((x14545.value)*((((cj0*sj3*x14541))+((r12*x14539))+(((-1.0)*cj0*gconst17*r20*x14540))+(((-1.0)*x14537*x14544))+(((-1.0)*x14537*x14542))+(((-1.0)*x14537*x14538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14546.value)*(((((-1.0)*x14538))+(((-1.0)*x14544))+(((-1.0)*x14542))+x14539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14545.value)*((((cj0*sj3*x14541))+((r12*x14539))+(((-1.0)*cj0*gconst17*r20*x14540))+(((-1.0)*x14537*x14544))+(((-1.0)*x14537*x14542))+(((-1.0)*x14537*x14538))))))+IKsqr(((x14546.value)*(((((-1.0)*x14538))+(((-1.0)*x14544))+(((-1.0)*x14542))+x14539))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14545.value)*((((cj0*sj3*x14541))+((r12*x14539))+(((-1.0)*cj0*gconst17*r20*x14540))+(((-1.0)*x14537*x14544))+(((-1.0)*x14537*x14542))+(((-1.0)*x14537*x14538))))), ((x14546.value)*(((((-1.0)*x14538))+(((-1.0)*x14544))+(((-1.0)*x14542))+x14539))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14547=IKsin(j4);
IkReal x14548=IKcos(j4);
IkReal x14549=((1.0)*gconst17);
IkReal x14550=(gconst17*sj3);
IkReal x14551=(gconst16*r21);
IkReal x14552=(cj3*gconst17);
IkReal x14553=(sj1*sj2);
IkReal x14554=((1.0)*sj0);
IkReal x14555=(gconst16*sj3);
IkReal x14556=(cj3*gconst16);
IkReal x14557=(cj2*sj1);
IkReal x14558=((1.0)*cj0);
IkReal x14559=((1.0)*sj3);
IkReal x14560=(cj1*sj2);
IkReal x14561=(cj3*x14548);
IkReal x14562=(gconst16*x14547);
IkReal x14563=((1.0)*x14548);
IkReal x14564=((1.0)*cj1*cj2);
IkReal x14565=(r02*x14547);
IkReal x14566=(r12*x14547);
evalcond[0]=((((-1.0)*r20*x14547*x14549))+((x14547*x14551)));
evalcond[1]=(cj0+(((-1.0)*r10*x14547*x14549))+(((-1.0)*r12*x14563))+((r11*x14562)));
evalcond[2]=(((r01*x14562))+(((-1.0)*r00*x14547*x14549))+(((-1.0)*r02*x14563))+(((-1.0)*x14554)));
evalcond[3]=((((-1.0)*r20*x14549*x14561))+((r20*x14555))+x14557+x14560+((x14551*x14561))+((r21*x14550)));
evalcond[4]=((((-1.0)*x14548*x14551*x14559))+((r20*x14556))+((r20*x14548*x14550))+(((-1.0)*x14564))+x14553+((r21*x14552)));
evalcond[5]=((((-1.0)*cj1*cj2*x14558))+((cj3*x14565))+((r01*x14548*x14556))+((r01*x14550))+(((-1.0)*r00*x14549*x14561))+((r00*x14555))+((cj0*x14553)));
evalcond[6]=((((-1.0)*r10*x14549*x14561))+(((-1.0)*cj1*cj2*x14554))+((r11*x14548*x14556))+((sj0*x14553))+((cj3*x14566))+((r10*x14555))+((r11*x14550)));
evalcond[7]=((((-1.0)*r01*x14555*x14563))+(((-1.0)*x14559*x14565))+(((-1.0)*x14558*x14560))+((r00*x14548*x14550))+((r01*x14552))+(((-1.0)*x14557*x14558))+((r00*x14556)));
evalcond[8]=((((-1.0)*r11*x14555*x14563))+(((-1.0)*x14554*x14557))+((r10*x14548*x14550))+(((-1.0)*x14554*x14560))+(((-1.0)*x14559*x14566))+((r10*x14556))+((r11*x14552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14567=((1.0)*sj0);
IkReal x14568=((1.0)*cj0);
CheckValue<IkReal> x14569=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14569.valid){
continue;
}
CheckValue<IkReal> x14570 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14568))+(((-1.0)*r12*x14567)))),IkReal(((((-1.0)*gconst16*r01*x14568))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14569.value)))+(x14570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14571=IKsin(j4);
IkReal x14572=IKcos(j4);
IkReal x14573=((1.0)*gconst17);
IkReal x14574=(gconst17*sj3);
IkReal x14575=(gconst16*r21);
IkReal x14576=(cj3*gconst17);
IkReal x14577=(sj1*sj2);
IkReal x14578=((1.0)*sj0);
IkReal x14579=(gconst16*sj3);
IkReal x14580=(cj3*gconst16);
IkReal x14581=(cj2*sj1);
IkReal x14582=((1.0)*cj0);
IkReal x14583=((1.0)*sj3);
IkReal x14584=(cj1*sj2);
IkReal x14585=(cj3*x14572);
IkReal x14586=(gconst16*x14571);
IkReal x14587=((1.0)*x14572);
IkReal x14588=((1.0)*cj1*cj2);
IkReal x14589=(r02*x14571);
IkReal x14590=(r12*x14571);
evalcond[0]=(((x14571*x14575))+(((-1.0)*r20*x14571*x14573)));
evalcond[1]=(cj0+(((-1.0)*r10*x14571*x14573))+(((-1.0)*r12*x14587))+((r11*x14586)));
evalcond[2]=((((-1.0)*r00*x14571*x14573))+(((-1.0)*r02*x14587))+(((-1.0)*x14578))+((r01*x14586)));
evalcond[3]=(((r21*x14574))+((x14575*x14585))+((r20*x14579))+(((-1.0)*r20*x14573*x14585))+x14584+x14581);
evalcond[4]=(((r21*x14576))+((r20*x14580))+(((-1.0)*x14572*x14575*x14583))+(((-1.0)*x14588))+x14577+((r20*x14572*x14574)));
evalcond[5]=(((cj3*x14589))+((cj0*x14577))+((r01*x14572*x14580))+(((-1.0)*cj1*cj2*x14582))+(((-1.0)*r00*x14573*x14585))+((r01*x14574))+((r00*x14579)));
evalcond[6]=((((-1.0)*r10*x14573*x14585))+((cj3*x14590))+((r11*x14572*x14580))+(((-1.0)*cj1*cj2*x14578))+((r11*x14574))+((sj0*x14577))+((r10*x14579)));
evalcond[7]=((((-1.0)*r01*x14579*x14587))+(((-1.0)*x14583*x14589))+((r00*x14572*x14574))+((r00*x14580))+(((-1.0)*x14582*x14584))+(((-1.0)*x14581*x14582))+((r01*x14576)));
evalcond[8]=((((-1.0)*r11*x14579*x14587))+(((-1.0)*x14583*x14590))+(((-1.0)*x14578*x14581))+(((-1.0)*x14578*x14584))+((r10*x14580))+((r11*x14576))+((r10*x14572*x14574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14591=((1.0)*sj0);
IkReal x14592=((1.0)*cj0);
CheckValue<IkReal> x14593 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14592))+(((-1.0)*r12*x14591)))),IkReal(((((-1.0)*gconst16*r01*x14592))+(((-1.0)*gconst16*r11*x14591))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14593.valid){
continue;
}
CheckValue<IkReal> x14594=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14593.value)+(((1.5707963267949)*(x14594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14595=IKsin(j4);
IkReal x14596=IKcos(j4);
IkReal x14597=(cj3*gconst17);
IkReal x14598=(gconst16*r21);
IkReal x14599=(gconst17*sj3);
IkReal x14600=(gconst16*r20);
IkReal x14601=(sj1*sj2);
IkReal x14602=(gconst16*r10);
IkReal x14603=(cj2*sj1);
IkReal x14604=(gconst16*sj3);
IkReal x14605=((1.0)*cj0);
IkReal x14606=((1.0)*sj0);
IkReal x14607=(cj1*sj2);
IkReal x14608=((1.0)*x14596);
IkReal x14609=(gconst16*x14595);
IkReal x14610=(cj3*x14596);
IkReal x14611=(cj3*x14595);
IkReal x14612=((1.0)*cj1*cj2);
IkReal x14613=((1.0)*gconst17*x14595);
IkReal x14614=((1.0)*sj3*x14595);
evalcond[0]=((((-1.0)*r20*x14613))+(((-1.0)*r22*x14608))+((x14595*x14598)));
evalcond[1]=(cj0+(((-1.0)*r10*x14613))+(((-1.0)*r12*x14608))+((r11*x14609)));
evalcond[2]=(((r01*x14609))+(((-1.0)*r00*x14613))+(((-1.0)*r02*x14608))+(((-1.0)*x14606)));
evalcond[3]=(((r21*x14599))+((r22*x14611))+(((-1.0)*r20*x14597*x14608))+x14607+x14603+((x14598*x14610))+((sj3*x14600)));
evalcond[4]=((((-1.0)*r22*x14614))+(((-1.0)*sj3*x14598*x14608))+((r21*x14597))+((cj3*x14600))+x14601+(((-1.0)*x14612))+((r20*x14596*x14599)));
evalcond[5]=(((gconst16*r01*x14610))+((r02*x14611))+((cj0*x14601))+(((-1.0)*cj1*cj2*x14605))+((r00*x14604))+(((-1.0)*r00*x14597*x14608))+((r01*x14599)));
evalcond[6]=(((gconst16*r11*x14610))+((sj0*x14601))+(((-1.0)*cj1*cj2*x14606))+(((-1.0)*r10*x14597*x14608))+((sj3*x14602))+((r11*x14599))+((r12*x14611)));
evalcond[7]=(((r00*x14596*x14599))+(((-1.0)*r01*x14604*x14608))+(((-1.0)*x14605*x14607))+((r01*x14597))+(((-1.0)*r02*x14614))+((cj3*gconst16*r00))+(((-1.0)*x14603*x14605)));
evalcond[8]=(((r10*x14596*x14599))+(((-1.0)*r11*x14604*x14608))+(((-1.0)*r12*x14614))+(((-1.0)*x14606*x14607))+((cj3*x14602))+((r11*x14597))+(((-1.0)*x14603*x14606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14615=((1.0)*gconst17);
CheckValue<IkReal> x14616 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14616.valid){
continue;
}
CheckValue<IkReal> x14617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14615)))),-1);
if(!x14617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14616.value)+(((1.5707963267949)*(x14617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14618=IKsin(j4);
IkReal x14619=IKcos(j4);
IkReal x14620=(cj3*gconst17);
IkReal x14621=(gconst16*r21);
IkReal x14622=(gconst17*sj3);
IkReal x14623=(gconst16*r20);
IkReal x14624=(sj1*sj2);
IkReal x14625=(gconst16*r10);
IkReal x14626=(cj2*sj1);
IkReal x14627=(gconst16*sj3);
IkReal x14628=((1.0)*cj0);
IkReal x14629=((1.0)*sj0);
IkReal x14630=(cj1*sj2);
IkReal x14631=((1.0)*x14619);
IkReal x14632=(gconst16*x14618);
IkReal x14633=(cj3*x14619);
IkReal x14634=(cj3*x14618);
IkReal x14635=((1.0)*cj1*cj2);
IkReal x14636=((1.0)*gconst17*x14618);
IkReal x14637=((1.0)*sj3*x14618);
evalcond[0]=((((-1.0)*r22*x14631))+(((-1.0)*r20*x14636))+((x14618*x14621)));
evalcond[1]=(cj0+((r11*x14632))+(((-1.0)*r10*x14636))+(((-1.0)*r12*x14631)));
evalcond[2]=((((-1.0)*x14629))+(((-1.0)*r00*x14636))+((r01*x14632))+(((-1.0)*r02*x14631)));
evalcond[3]=(((sj3*x14623))+((r22*x14634))+((x14621*x14633))+((r21*x14622))+x14630+x14626+(((-1.0)*r20*x14620*x14631)));
evalcond[4]=((((-1.0)*r22*x14637))+((r21*x14620))+((r20*x14619*x14622))+((cj3*x14623))+(((-1.0)*x14635))+x14624+(((-1.0)*sj3*x14621*x14631)));
evalcond[5]=(((r02*x14634))+((gconst16*r01*x14633))+(((-1.0)*r00*x14620*x14631))+((cj0*x14624))+((r00*x14627))+((r01*x14622))+(((-1.0)*cj1*cj2*x14628)));
evalcond[6]=(((sj3*x14625))+((gconst16*r11*x14633))+((r11*x14622))+((r12*x14634))+(((-1.0)*cj1*cj2*x14629))+(((-1.0)*r10*x14620*x14631))+((sj0*x14624)));
evalcond[7]=((((-1.0)*x14628*x14630))+((r00*x14619*x14622))+((r01*x14620))+((cj3*gconst16*r00))+(((-1.0)*x14626*x14628))+(((-1.0)*r02*x14637))+(((-1.0)*r01*x14627*x14631)));
evalcond[8]=((((-1.0)*r11*x14627*x14631))+(((-1.0)*x14629*x14630))+((cj3*x14625))+((r11*x14620))+((r10*x14619*x14622))+(((-1.0)*x14626*x14629))+(((-1.0)*r12*x14637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14638=((1.0)*gconst17);
CheckValue<IkReal> x14639=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14638)))),-1);
if(!x14639.valid){
continue;
}
CheckValue<IkReal> x14640 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14638))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14639.value)))+(x14640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14641=IKsin(j4);
IkReal x14642=IKcos(j4);
IkReal x14643=(cj3*gconst17);
IkReal x14644=(gconst16*r21);
IkReal x14645=(gconst17*sj3);
IkReal x14646=(gconst16*r20);
IkReal x14647=(sj1*sj2);
IkReal x14648=(gconst16*r10);
IkReal x14649=(cj2*sj1);
IkReal x14650=(gconst16*sj3);
IkReal x14651=((1.0)*cj0);
IkReal x14652=((1.0)*sj0);
IkReal x14653=(cj1*sj2);
IkReal x14654=((1.0)*x14642);
IkReal x14655=(gconst16*x14641);
IkReal x14656=(cj3*x14642);
IkReal x14657=(cj3*x14641);
IkReal x14658=((1.0)*cj1*cj2);
IkReal x14659=((1.0)*gconst17*x14641);
IkReal x14660=((1.0)*sj3*x14641);
evalcond[0]=(((x14641*x14644))+(((-1.0)*r22*x14654))+(((-1.0)*r20*x14659)));
evalcond[1]=(cj0+(((-1.0)*r12*x14654))+(((-1.0)*r10*x14659))+((r11*x14655)));
evalcond[2]=(((r01*x14655))+(((-1.0)*r02*x14654))+(((-1.0)*r00*x14659))+(((-1.0)*x14652)));
evalcond[3]=(((r22*x14657))+((sj3*x14646))+((r21*x14645))+x14653+x14649+(((-1.0)*r20*x14643*x14654))+((x14644*x14656)));
evalcond[4]=((((-1.0)*sj3*x14644*x14654))+((r20*x14642*x14645))+(((-1.0)*r22*x14660))+((r21*x14643))+x14647+(((-1.0)*x14658))+((cj3*x14646)));
evalcond[5]=(((gconst16*r01*x14656))+((cj0*x14647))+((r01*x14645))+((r00*x14650))+(((-1.0)*cj1*cj2*x14651))+(((-1.0)*r00*x14643*x14654))+((r02*x14657)));
evalcond[6]=(((r11*x14645))+((r12*x14657))+((sj0*x14647))+(((-1.0)*r10*x14643*x14654))+((sj3*x14648))+(((-1.0)*cj1*cj2*x14652))+((gconst16*r11*x14656)));
evalcond[7]=(((r01*x14643))+((r00*x14642*x14645))+(((-1.0)*x14649*x14651))+(((-1.0)*r01*x14650*x14654))+(((-1.0)*r02*x14660))+((cj3*gconst16*r00))+(((-1.0)*x14651*x14653)));
evalcond[8]=(((r11*x14643))+((r10*x14642*x14645))+(((-1.0)*r12*x14660))+(((-1.0)*x14649*x14652))+(((-1.0)*r11*x14650*x14654))+(((-1.0)*x14652*x14653))+((cj3*x14648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14661=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14661;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14661);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14662=((1.0)*cj5);
IkReal x14663=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14662)));
j4eval[0]=x14663;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14662))))));
j4eval[2]=IKsign(x14663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14664=cj5*cj5;
IkReal x14665=(cj3*r01);
IkReal x14666=(cj5*sj5);
IkReal x14667=((1.0)*cj3);
IkReal x14668=(((cj3*r00*r21*x14666))+(((-1.0)*r21*x14665))+(((-1.0)*r00*r20*x14664*x14667))+(((-1.0)*r02*r22*x14667))+((r20*x14665*x14666))+((r21*x14664*x14665)));
j4eval[0]=x14668;
j4eval[1]=IKsign(x14668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14669=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14669;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14670=((1.0)*cj5);
IkReal x14671=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14670)));
j4eval[0]=x14671;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14670))))));
j4eval[2]=IKsign(x14671);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14672=cj5*cj5;
IkReal x14673=r01*r01;
IkReal x14674=(r01*sj5);
IkReal x14675=(cj5*r00);
IkReal x14676=(((x14672*x14673))+(((-1.0)*(r02*r02)))+(((-1.0)*x14673))+(((2.0)*x14674*x14675))+(((-1.0)*x14672*(r00*r00))));
j4eval[0]=x14676;
j4eval[1]=IKsign(x14676);
j4eval[2]=((IKabs(((((-1.0)*x14674))+x14675)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14677=cj5*cj5;
IkReal x14678=r01*r01;
IkReal x14679=(r01*sj5);
IkReal x14680=(cj5*r00);
CheckValue<IkReal> x14681=IKPowWithIntegerCheck(IKsign(((((2.0)*x14679*x14680))+(((-1.0)*x14677*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14678))+((x14677*x14678)))),-1);
if(!x14681.valid){
continue;
}
CheckValue<IkReal> x14682 = IKatan2WithCheck(IkReal(((((-1.0)*x14679))+x14680)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14681.value)))+(x14682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14683=IKsin(j4);
IkReal x14684=IKcos(j4);
IkReal x14685=(cj5*r10);
IkReal x14686=(r01*sj5);
IkReal x14687=((1.0)*cj2);
IkReal x14688=(cj5*r00);
IkReal x14689=(cj5*r20);
IkReal x14690=((1.0)*x14684);
IkReal x14691=((1.0)*x14683);
IkReal x14692=(sj5*x14683);
evalcond[0]=((((-1.0)*r22*x14690))+((r21*x14692))+(((-1.0)*x14689*x14691)));
evalcond[1]=(((r11*x14692))+(((-1.0)*x14685*x14691))+(((-1.0)*r12*x14690)));
evalcond[2]=((((-1.0)*x14686*x14690))+(((-1.0)*r02*x14691))+((x14684*x14688)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14690))+((x14683*x14686))+(((-1.0)*x14688*x14691)));
evalcond[4]=((((-1.0)*cj1*x14687))+(((-1.0)*r21*sj5*x14690))+((x14684*x14689))+((sj1*sj2))+(((-1.0)*r22*x14691)));
evalcond[5]=(((x14684*x14685))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14690))+(((-1.0)*sj1*x14687))+(((-1.0)*r12*x14691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14693=((1.0)*cj5);
CheckValue<IkReal> x14694=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14693)))),-1);
if(!x14694.valid){
continue;
}
CheckValue<IkReal> x14695 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14694.value)))+(x14695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14696=IKsin(j4);
IkReal x14697=IKcos(j4);
IkReal x14698=(cj5*r10);
IkReal x14699=(r01*sj5);
IkReal x14700=((1.0)*cj2);
IkReal x14701=(cj5*r00);
IkReal x14702=(cj5*r20);
IkReal x14703=((1.0)*x14697);
IkReal x14704=((1.0)*x14696);
IkReal x14705=(sj5*x14696);
evalcond[0]=(((r21*x14705))+(((-1.0)*x14702*x14704))+(((-1.0)*r22*x14703)));
evalcond[1]=((((-1.0)*x14698*x14704))+(((-1.0)*r12*x14703))+((r11*x14705)));
evalcond[2]=((((-1.0)*x14699*x14703))+((x14697*x14701))+(((-1.0)*r02*x14704)));
evalcond[3]=((-1.0)+((x14696*x14699))+(((-1.0)*x14701*x14704))+(((-1.0)*r02*x14703)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14700))+(((-1.0)*r21*sj5*x14703))+((x14697*x14702))+(((-1.0)*r22*x14704)));
evalcond[5]=(((x14697*x14698))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14700))+(((-1.0)*r12*x14704))+(((-1.0)*r11*sj5*x14703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14706=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14706.valid){
continue;
}
CheckValue<IkReal> x14707 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14706.value)))+(x14707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14708=IKsin(j4);
IkReal x14709=IKcos(j4);
IkReal x14710=(cj5*r10);
IkReal x14711=(r01*sj5);
IkReal x14712=((1.0)*cj2);
IkReal x14713=(cj5*r00);
IkReal x14714=(cj5*r20);
IkReal x14715=((1.0)*x14709);
IkReal x14716=((1.0)*x14708);
IkReal x14717=(sj5*x14708);
evalcond[0]=(((r21*x14717))+(((-1.0)*r22*x14715))+(((-1.0)*x14714*x14716)));
evalcond[1]=(((r11*x14717))+(((-1.0)*x14710*x14716))+(((-1.0)*r12*x14715)));
evalcond[2]=((((-1.0)*r02*x14716))+((x14709*x14713))+(((-1.0)*x14711*x14715)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14715))+((x14708*x14711))+(((-1.0)*x14713*x14716)));
evalcond[4]=((((-1.0)*r22*x14716))+((sj1*sj2))+((x14709*x14714))+(((-1.0)*cj1*x14712))+(((-1.0)*r21*sj5*x14715)));
evalcond[5]=((((-1.0)*sj1*x14712))+(((-1.0)*r11*sj5*x14715))+(((-1.0)*cj1*sj2))+((x14709*x14710))+(((-1.0)*r12*x14716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14718=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14718;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14719=((1.0)*cj5);
IkReal x14720=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14719)));
j4eval[0]=x14720;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14719)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14721=cj5*cj5;
IkReal x14722=r01*r01;
IkReal x14723=(cj5*r00);
IkReal x14724=(r01*sj5);
IkReal x14725=(((x14721*(r00*r00)))+(((-2.0)*x14723*x14724))+x14722+(r02*r02)+(((-1.0)*x14721*x14722)));
j4eval[0]=x14725;
j4eval[1]=IKsign(x14725);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14723))+x14724))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14726=cj5*cj5;
IkReal x14727=r01*r01;
IkReal x14728=(r01*sj5);
IkReal x14729=(cj5*r00);
CheckValue<IkReal> x14730=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14728*x14729))+((x14726*(r00*r00)))+x14727+(r02*r02)+(((-1.0)*x14726*x14727)))),-1);
if(!x14730.valid){
continue;
}
CheckValue<IkReal> x14731 = IKatan2WithCheck(IkReal(((((-1.0)*x14729))+x14728)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14730.value)))+(x14731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14732=IKcos(j4);
IkReal x14733=IKsin(j4);
IkReal x14734=(cj5*r00);
IkReal x14735=(cj5*r10);
IkReal x14736=(r21*sj5);
IkReal x14737=((1.0)*cj2);
IkReal x14738=(cj5*r20);
IkReal x14739=((1.0)*x14732);
IkReal x14740=((1.0)*x14733);
IkReal x14741=(sj5*x14733);
IkReal x14742=(sj5*x14732);
evalcond[0]=(((r02*x14733))+((r01*x14742))+(((-1.0)*x14734*x14739)));
evalcond[1]=((((-1.0)*x14738*x14740))+((x14733*x14736))+(((-1.0)*r22*x14739)));
evalcond[2]=((((-1.0)*r12*x14739))+((r11*x14741))+(((-1.0)*x14735*x14740)));
evalcond[3]=((-1.0)+((r01*x14741))+(((-1.0)*x14734*x14740))+(((-1.0)*r02*x14739)));
evalcond[4]=(((sj1*sj2))+((x14732*x14736))+(((-1.0)*cj1*x14737))+((r22*x14733))+(((-1.0)*x14738*x14739)));
evalcond[5]=((((-1.0)*sj1*x14737))+((r11*x14742))+(((-1.0)*cj1*sj2))+((r12*x14733))+(((-1.0)*x14735*x14739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14743=((1.0)*cj5);
CheckValue<IkReal> x14744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14743)))),-1);
if(!x14744.valid){
continue;
}
CheckValue<IkReal> x14745 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14744.value)))+(x14745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14746=IKcos(j4);
IkReal x14747=IKsin(j4);
IkReal x14748=(cj5*r00);
IkReal x14749=(cj5*r10);
IkReal x14750=(r21*sj5);
IkReal x14751=((1.0)*cj2);
IkReal x14752=(cj5*r20);
IkReal x14753=((1.0)*x14746);
IkReal x14754=((1.0)*x14747);
IkReal x14755=(sj5*x14747);
IkReal x14756=(sj5*x14746);
evalcond[0]=(((r01*x14756))+(((-1.0)*x14748*x14753))+((r02*x14747)));
evalcond[1]=(((x14747*x14750))+(((-1.0)*x14752*x14754))+(((-1.0)*r22*x14753)));
evalcond[2]=((((-1.0)*r12*x14753))+(((-1.0)*x14749*x14754))+((r11*x14755)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14753))+((r01*x14755))+(((-1.0)*x14748*x14754)));
evalcond[4]=(((r22*x14747))+((x14746*x14750))+(((-1.0)*cj1*x14751))+((sj1*sj2))+(((-1.0)*x14752*x14753)));
evalcond[5]=(((r12*x14747))+(((-1.0)*sj1*x14751))+(((-1.0)*cj1*sj2))+(((-1.0)*x14749*x14753))+((r11*x14756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14757=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14757.valid){
continue;
}
CheckValue<IkReal> x14758 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14757.value)))+(x14758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14759=IKcos(j4);
IkReal x14760=IKsin(j4);
IkReal x14761=(cj5*r00);
IkReal x14762=(cj5*r10);
IkReal x14763=(r21*sj5);
IkReal x14764=((1.0)*cj2);
IkReal x14765=(cj5*r20);
IkReal x14766=((1.0)*x14759);
IkReal x14767=((1.0)*x14760);
IkReal x14768=(sj5*x14760);
IkReal x14769=(sj5*x14759);
evalcond[0]=(((r01*x14769))+((r02*x14760))+(((-1.0)*x14761*x14766)));
evalcond[1]=(((x14760*x14763))+(((-1.0)*r22*x14766))+(((-1.0)*x14765*x14767)));
evalcond[2]=((((-1.0)*r12*x14766))+((r11*x14768))+(((-1.0)*x14762*x14767)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14766))+((r01*x14768))+(((-1.0)*x14761*x14767)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14764))+((r22*x14760))+(((-1.0)*x14765*x14766))+((x14759*x14763)));
evalcond[5]=((((-1.0)*sj1*x14764))+(((-1.0)*cj1*sj2))+((r11*x14769))+((r12*x14760))+(((-1.0)*x14762*x14766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14771 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14771)==0){
continue;
}
IkReal x14770=pow(x14771,-0.5);
CheckValue<IkReal> x14772 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14772.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14772.value));
IkReal gconst49=((-1.0)*r21*x14770);
IkReal gconst50=(r20*x14770);
CheckValue<IkReal> x14773 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14773.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14773.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14776 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14776.valid){
continue;
}
IkReal x14774=((-1.0)*(x14776.value));
IkReal x14775=x14770;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14774;
IkReal gconst48=x14774;
IkReal gconst49=((-1.0)*r21*x14775);
IkReal gconst50=(r20*x14775);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14779 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14779.valid){
continue;
}
IkReal x14777=((-1.0)*(x14779.value));
IkReal x14778=x14770;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14777;
IkReal gconst48=x14777;
IkReal gconst49=((-1.0)*r21*x14778);
IkReal gconst50=(r20*x14778);
CheckValue<IkReal> x14787=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14787.valid){
continue;
}
IkReal x14780=x14787.value;
IkReal x14781=(sj3*x14780);
IkReal x14782=(r11*x14781);
IkReal x14783=(r00*x14781);
IkReal x14784=(r01*x14781);
IkReal x14785=(r10*x14781);
IkReal x14786=(r20*r21*x14781);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x14783*(r20*r20)))+((r00*r20*r21*x14782))+((r01*x14782*(r21*r21)))+((r10*r20*r21*x14784))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14788=gconst49*gconst49;
IkReal x14789=gconst50*gconst50;
IkReal x14790=((1.0)*cj3);
IkReal x14791=(gconst50*r01);
IkReal x14792=(gconst49*r10);
IkReal x14793=(r12*sj3);
IkReal x14794=(gconst49*r00);
IkReal x14795=(r00*sj3);
IkReal x14796=(r11*x14788);
IkReal x14797=(r10*x14789);
CheckValue<IkReal> x14798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14790*x14796))+((cj3*gconst50*r11*x14794))+((cj3*x14791*x14792))+(((-1.0)*r02*r12*x14790))+(((-1.0)*r00*x14790*x14797)))),-1);
if(!x14798.valid){
continue;
}
CheckValue<IkReal> x14799 = IKatan2WithCheck(IkReal((((x14793*x14794))+((x14791*x14793)))),IkReal((((gconst49*r11*sj3*x14791))+(((-1.0)*gconst50*x14792*x14795))+((x14795*x14796))+(((-1.0)*r01*sj3*x14797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14798.value)))+(x14799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14800=IKsin(j4);
IkReal x14801=IKcos(j4);
IkReal x14802=(sj1*sj2);
IkReal x14803=(gconst50*r20);
IkReal x14804=(gconst50*sj3);
IkReal x14805=(cj3*r01);
IkReal x14806=(gconst50*r10);
IkReal x14807=(gconst49*sj3);
IkReal x14808=((1.0)*cj2);
IkReal x14809=(cj1*sj2);
IkReal x14810=(cj3*r11);
IkReal x14811=(gconst50*r00);
IkReal x14812=(cj3*r21);
IkReal x14813=(cj3*gconst49);
IkReal x14814=(cj1*x14808);
IkReal x14815=((1.0)*x14801);
IkReal x14816=((1.0)*x14800);
IkReal x14817=(gconst49*x14800);
IkReal x14818=(gconst49*x14801);
IkReal x14819=(cj3*x14800);
evalcond[0]=((((-1.0)*r22*x14815))+(((-1.0)*x14803*x14816))+((r21*x14817)));
evalcond[1]=((((-1.0)*x14806*x14816))+(((-1.0)*r12*x14815))+((r11*x14817)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14815))+((r01*x14817))+(((-1.0)*x14811*x14816)));
evalcond[3]=((((-1.0)*cj3*x14811*x14815))+((r01*x14804))+((r00*x14807))+((x14805*x14818))+((r02*x14819)));
evalcond[4]=(((r00*x14801*x14804))+(((-1.0)*r02*sj3*x14816))+(((-1.0)*r01*x14807*x14815))+((r00*x14813))+((gconst50*x14805)));
evalcond[5]=(((cj2*sj1))+((r21*x14804))+x14809+(((-1.0)*cj3*x14803*x14815))+((r22*x14819))+((r20*x14807))+((x14812*x14818)));
evalcond[6]=(x14802+((r10*x14807))+(((-1.0)*x14814))+(((-1.0)*cj3*x14806*x14815))+((x14810*x14818))+((r11*x14804))+((r12*x14819)));
evalcond[7]=(x14802+(((-1.0)*x14814))+(((-1.0)*r22*sj3*x14816))+(((-1.0)*r21*x14807*x14815))+((r20*x14813))+((sj3*x14801*x14803))+((gconst50*x14812)));
evalcond[8]=((((-1.0)*r11*x14807*x14815))+((r10*x14813))+((r10*x14801*x14804))+(((-1.0)*r12*sj3*x14816))+(((-1.0)*x14809))+(((-1.0)*sj1*x14808))+((gconst50*x14810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14820=gconst49*gconst49;
IkReal x14821=gconst50*gconst50;
IkReal x14822=(cj3*r12);
IkReal x14823=(gconst49*r00);
IkReal x14824=(r01*r11);
IkReal x14825=(r00*r11);
IkReal x14826=(cj3*gconst50);
IkReal x14827=((1.0)*r01*r10);
IkReal x14828=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14829=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x14820*x14824))+((r00*r10*sj3*x14821))+(((-1.0)*gconst50*r11*sj3*x14823))+(((-1.0)*x14827*x14828)))),-1);
if(!x14829.valid){
continue;
}
CheckValue<IkReal> x14830 = IKatan2WithCheck(IkReal((((x14822*x14823))+((gconst50*r01*x14822)))),IkReal(((((-1.0)*r10*x14823*x14826))+((cj3*x14820*x14825))+((gconst49*x14824*x14826))+(((-1.0)*cj3*x14821*x14827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14829.value)))+(x14830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14831=IKsin(j4);
IkReal x14832=IKcos(j4);
IkReal x14833=(sj1*sj2);
IkReal x14834=(gconst50*r20);
IkReal x14835=(gconst50*sj3);
IkReal x14836=(cj3*r01);
IkReal x14837=(gconst50*r10);
IkReal x14838=(gconst49*sj3);
IkReal x14839=((1.0)*cj2);
IkReal x14840=(cj1*sj2);
IkReal x14841=(cj3*r11);
IkReal x14842=(gconst50*r00);
IkReal x14843=(cj3*r21);
IkReal x14844=(cj3*gconst49);
IkReal x14845=(cj1*x14839);
IkReal x14846=((1.0)*x14832);
IkReal x14847=((1.0)*x14831);
IkReal x14848=(gconst49*x14831);
IkReal x14849=(gconst49*x14832);
IkReal x14850=(cj3*x14831);
evalcond[0]=((((-1.0)*x14834*x14847))+(((-1.0)*r22*x14846))+((r21*x14848)));
evalcond[1]=((((-1.0)*x14837*x14847))+((r11*x14848))+(((-1.0)*r12*x14846)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14846))+(((-1.0)*x14842*x14847))+((r01*x14848)));
evalcond[3]=(((x14836*x14849))+((r02*x14850))+((r01*x14835))+(((-1.0)*cj3*x14842*x14846))+((r00*x14838)));
evalcond[4]=(((gconst50*x14836))+(((-1.0)*r02*sj3*x14847))+(((-1.0)*r01*x14838*x14846))+((r00*x14832*x14835))+((r00*x14844)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x14834*x14846))+((x14843*x14849))+x14840+((r20*x14838))+((r21*x14835))+((r22*x14850)));
evalcond[6]=(((x14841*x14849))+x14833+((r11*x14835))+(((-1.0)*x14845))+((r10*x14838))+(((-1.0)*cj3*x14837*x14846))+((r12*x14850)));
evalcond[7]=(((sj3*x14832*x14834))+((r20*x14844))+x14833+(((-1.0)*r21*x14838*x14846))+(((-1.0)*x14845))+((gconst50*x14843))+(((-1.0)*r22*sj3*x14847)));
evalcond[8]=((((-1.0)*x14840))+((r10*x14832*x14835))+(((-1.0)*sj1*x14839))+((gconst50*x14841))+((r10*x14844))+(((-1.0)*r11*x14838*x14846))+(((-1.0)*r12*sj3*x14847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14851=((1.0)*gconst50);
CheckValue<IkReal> x14852 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14852.valid){
continue;
}
CheckValue<IkReal> x14853=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14851)))),-1);
if(!x14853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14852.value)+(((1.5707963267949)*(x14853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14854=IKsin(j4);
IkReal x14855=IKcos(j4);
IkReal x14856=(sj1*sj2);
IkReal x14857=(gconst50*r20);
IkReal x14858=(gconst50*sj3);
IkReal x14859=(cj3*r01);
IkReal x14860=(gconst50*r10);
IkReal x14861=(gconst49*sj3);
IkReal x14862=((1.0)*cj2);
IkReal x14863=(cj1*sj2);
IkReal x14864=(cj3*r11);
IkReal x14865=(gconst50*r00);
IkReal x14866=(cj3*r21);
IkReal x14867=(cj3*gconst49);
IkReal x14868=(cj1*x14862);
IkReal x14869=((1.0)*x14855);
IkReal x14870=((1.0)*x14854);
IkReal x14871=(gconst49*x14854);
IkReal x14872=(gconst49*x14855);
IkReal x14873=(cj3*x14854);
evalcond[0]=((((-1.0)*x14857*x14870))+((r21*x14871))+(((-1.0)*r22*x14869)));
evalcond[1]=(((r11*x14871))+(((-1.0)*x14860*x14870))+(((-1.0)*r12*x14869)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14869))+((r01*x14871))+(((-1.0)*x14865*x14870)));
evalcond[3]=(((x14859*x14872))+(((-1.0)*cj3*x14865*x14869))+((r00*x14861))+((r01*x14858))+((r02*x14873)));
evalcond[4]=((((-1.0)*r01*x14861*x14869))+((gconst50*x14859))+((r00*x14867))+(((-1.0)*r02*sj3*x14870))+((r00*x14855*x14858)));
evalcond[5]=(((r21*x14858))+((cj2*sj1))+((x14866*x14872))+((r22*x14873))+((r20*x14861))+x14863+(((-1.0)*cj3*x14857*x14869)));
evalcond[6]=(((r12*x14873))+x14856+((r11*x14858))+((r10*x14861))+((x14864*x14872))+(((-1.0)*x14868))+(((-1.0)*cj3*x14860*x14869)));
evalcond[7]=(((r20*x14867))+((sj3*x14855*x14857))+(((-1.0)*r21*x14861*x14869))+(((-1.0)*r22*sj3*x14870))+x14856+((gconst50*x14866))+(((-1.0)*x14868)));
evalcond[8]=((((-1.0)*r12*sj3*x14870))+(((-1.0)*sj1*x14862))+((gconst50*x14864))+((r10*x14867))+((r10*x14855*x14858))+(((-1.0)*x14863))+(((-1.0)*r11*x14861*x14869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14875 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14875)==0){
continue;
}
IkReal x14874=pow(x14875,-0.5);
CheckValue<IkReal> x14876 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14876.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14876.value))));
IkReal gconst52=((1.0)*r21*x14874);
IkReal gconst53=((-1.0)*r20*x14874);
CheckValue<IkReal> x14877 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14877.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14877.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14880 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14880.valid){
continue;
}
IkReal x14878=((1.0)*(x14880.value));
IkReal x14879=x14874;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14878)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14878)));
IkReal gconst52=((1.0)*r21*x14879);
IkReal gconst53=((-1.0)*r20*x14879);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14883 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14883.valid){
continue;
}
IkReal x14881=((1.0)*(x14883.value));
IkReal x14882=x14874;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14881)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14881)));
IkReal gconst52=((1.0)*r21*x14882);
IkReal gconst53=((-1.0)*r20*x14882);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14886 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14886.valid){
continue;
}
IkReal x14884=((1.0)*(x14886.value));
IkReal x14885=x14874;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14884)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14884)));
IkReal gconst52=((1.0)*r21*x14885);
IkReal gconst53=((-1.0)*r20*x14885);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14887=gconst52*gconst52;
IkReal x14888=gconst53*gconst53;
IkReal x14889=(gconst53*r01);
IkReal x14890=(cj3*r20);
IkReal x14891=(r22*sj3);
IkReal x14892=((1.0)*cj3);
IkReal x14893=(gconst52*sj3);
IkReal x14894=((1.0)*r00);
IkReal x14895=(gconst52*r00);
IkReal x14896=(r21*x14887);
CheckValue<IkReal> x14897 = IKatan2WithCheck(IkReal((((x14891*x14895))+((x14889*x14891)))),IkReal((((r21*x14889*x14893))+((r00*sj3*x14896))+(((-1.0)*gconst53*r20*x14893*x14894))+(((-1.0)*r01*r20*sj3*x14888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14897.valid){
continue;
}
CheckValue<IkReal> x14898=IKPowWithIntegerCheck(IKsign((((gconst52*x14889*x14890))+(((-1.0)*r01*x14892*x14896))+((cj3*gconst53*r21*x14895))+(((-1.0)*x14888*x14890*x14894))+(((-1.0)*r02*r22*x14892)))),-1);
if(!x14898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14897.value)+(((1.5707963267949)*(x14898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14899=IKsin(j4);
IkReal x14900=IKcos(j4);
IkReal x14901=(sj1*sj2);
IkReal x14902=((1.0)*cj1);
IkReal x14903=(cj3*gconst52);
IkReal x14904=(gconst53*sj3);
IkReal x14905=(cj3*gconst53);
IkReal x14906=(cj2*sj1);
IkReal x14907=(gconst52*sj3);
IkReal x14908=(cj2*x14902);
IkReal x14909=((1.0)*x14900);
IkReal x14910=((1.0)*x14899);
IkReal x14911=(gconst52*x14899);
IkReal x14912=(cj3*x14899);
evalcond[0]=(((r21*x14911))+(((-1.0)*r22*x14909))+(((-1.0)*gconst53*r20*x14910)));
evalcond[1]=((((-1.0)*r12*x14909))+((r11*x14911))+(((-1.0)*gconst53*r10*x14910)));
evalcond[2]=((-1.0)+((r01*x14911))+(((-1.0)*r02*x14909))+(((-1.0)*gconst53*r00*x14910)));
evalcond[3]=(((r00*x14907))+((r01*x14904))+((r01*x14900*x14903))+((r02*x14912))+(((-1.0)*r00*x14905*x14909)));
evalcond[4]=((((-1.0)*r01*x14907*x14909))+((r00*x14903))+((r01*x14905))+((r00*x14900*x14904))+(((-1.0)*r02*sj3*x14910)));
evalcond[5]=(((r22*x14912))+((r21*x14904))+x14906+((cj1*sj2))+((r21*x14900*x14903))+(((-1.0)*r20*x14905*x14909))+((r20*x14907)));
evalcond[6]=((((-1.0)*r10*x14905*x14909))+((r11*x14904))+x14901+(((-1.0)*x14908))+((r12*x14912))+((r11*x14900*x14903))+((r10*x14907)));
evalcond[7]=(((r21*x14905))+x14901+(((-1.0)*x14908))+(((-1.0)*r22*sj3*x14910))+(((-1.0)*r21*x14907*x14909))+((r20*x14903))+((r20*x14900*x14904)));
evalcond[8]=((((-1.0)*r12*sj3*x14910))+((r11*x14905))+(((-1.0)*x14906))+(((-1.0)*r11*x14907*x14909))+((r10*x14900*x14904))+((r10*x14903))+(((-1.0)*sj2*x14902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14913=((1.0)*gconst53);
CheckValue<IkReal> x14914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14913))+(((-1.0)*gconst52*r10)))),-1);
if(!x14914.valid){
continue;
}
CheckValue<IkReal> x14915 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14914.value)))+(x14915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14916=IKsin(j4);
IkReal x14917=IKcos(j4);
IkReal x14918=(sj1*sj2);
IkReal x14919=((1.0)*cj1);
IkReal x14920=(cj3*gconst52);
IkReal x14921=(gconst53*sj3);
IkReal x14922=(cj3*gconst53);
IkReal x14923=(cj2*sj1);
IkReal x14924=(gconst52*sj3);
IkReal x14925=(cj2*x14919);
IkReal x14926=((1.0)*x14917);
IkReal x14927=((1.0)*x14916);
IkReal x14928=(gconst52*x14916);
IkReal x14929=(cj3*x14916);
evalcond[0]=(((r21*x14928))+(((-1.0)*r22*x14926))+(((-1.0)*gconst53*r20*x14927)));
evalcond[1]=((((-1.0)*r12*x14926))+((r11*x14928))+(((-1.0)*gconst53*r10*x14927)));
evalcond[2]=((-1.0)+((r01*x14928))+(((-1.0)*gconst53*r00*x14927))+(((-1.0)*r02*x14926)));
evalcond[3]=(((r01*x14917*x14920))+((r01*x14921))+((r00*x14924))+((r02*x14929))+(((-1.0)*r00*x14922*x14926)));
evalcond[4]=((((-1.0)*r02*sj3*x14927))+((r01*x14922))+((r00*x14920))+((r00*x14917*x14921))+(((-1.0)*r01*x14924*x14926)));
evalcond[5]=(x14923+((cj1*sj2))+((r21*x14921))+((r21*x14917*x14920))+((r22*x14929))+(((-1.0)*r20*x14922*x14926))+((r20*x14924)));
evalcond[6]=(x14918+(((-1.0)*r10*x14922*x14926))+((r10*x14924))+((r11*x14917*x14920))+(((-1.0)*x14925))+((r11*x14921))+((r12*x14929)));
evalcond[7]=(x14918+(((-1.0)*r22*sj3*x14927))+((r21*x14922))+(((-1.0)*x14925))+((r20*x14917*x14921))+(((-1.0)*r21*x14924*x14926))+((r20*x14920)));
evalcond[8]=((((-1.0)*sj2*x14919))+(((-1.0)*x14923))+(((-1.0)*r12*sj3*x14927))+((r10*x14920))+((r10*x14917*x14921))+((r11*x14922))+(((-1.0)*r11*x14924*x14926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14930 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14930.valid){
continue;
}
CheckValue<IkReal> x14931=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14930.value)+(((1.5707963267949)*(x14931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14932=IKsin(j4);
IkReal x14933=IKcos(j4);
IkReal x14934=(sj1*sj2);
IkReal x14935=((1.0)*cj1);
IkReal x14936=(cj3*gconst52);
IkReal x14937=(gconst53*sj3);
IkReal x14938=(cj3*gconst53);
IkReal x14939=(cj2*sj1);
IkReal x14940=(gconst52*sj3);
IkReal x14941=(cj2*x14935);
IkReal x14942=((1.0)*x14933);
IkReal x14943=((1.0)*x14932);
IkReal x14944=(gconst52*x14932);
IkReal x14945=(cj3*x14932);
evalcond[0]=((((-1.0)*gconst53*r20*x14943))+((r21*x14944))+(((-1.0)*r22*x14942)));
evalcond[1]=((((-1.0)*r12*x14942))+(((-1.0)*gconst53*r10*x14943))+((r11*x14944)));
evalcond[2]=((-1.0)+((r01*x14944))+(((-1.0)*r02*x14942))+(((-1.0)*gconst53*r00*x14943)));
evalcond[3]=(((r01*x14933*x14936))+((r00*x14940))+(((-1.0)*r00*x14938*x14942))+((r01*x14937))+((r02*x14945)));
evalcond[4]=(((r00*x14933*x14937))+(((-1.0)*r02*sj3*x14943))+((r01*x14938))+((r00*x14936))+(((-1.0)*r01*x14940*x14942)));
evalcond[5]=(x14939+((r22*x14945))+((cj1*sj2))+((r21*x14937))+((r21*x14933*x14936))+(((-1.0)*r20*x14938*x14942))+((r20*x14940)));
evalcond[6]=((((-1.0)*r10*x14938*x14942))+((r12*x14945))+x14934+((r10*x14940))+(((-1.0)*x14941))+((r11*x14933*x14936))+((r11*x14937)));
evalcond[7]=((((-1.0)*r21*x14940*x14942))+x14934+((r20*x14933*x14937))+((r21*x14938))+(((-1.0)*x14941))+(((-1.0)*r22*sj3*x14943))+((r20*x14936)));
evalcond[8]=((((-1.0)*x14939))+(((-1.0)*r12*sj3*x14943))+(((-1.0)*r11*x14940*x14942))+((r10*x14933*x14937))+((r10*x14936))+(((-1.0)*sj2*x14935))+((r11*x14938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14946=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14946);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14946);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14947=(r01*sj5);
IkReal x14948=((1.0)*cj5*r00);
j4eval[0]=(x14947+(((-1.0)*x14948)));
j4eval[1]=((((-1.0)*cj3*x14948))+((cj3*x14947)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14949=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14949);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14949);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14950=(cj5*r00);
IkReal x14951=(r01*sj5);
j4eval[0]=(x14951+(((-1.0)*x14950)));
j4eval[1]=(((sj3*x14950))+(((-1.0)*sj3*x14951)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14952=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14952);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14952);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14953=((1.0)*r00);
CheckValue<IkReal> x14954=IKPowWithIntegerCheck(cj3,-1);
if(!x14954.valid){
continue;
}
CheckValue<IkReal> x14955=IKPowWithIntegerCheck(r22,-1);
if(!x14955.valid){
continue;
}
CheckValue<IkReal> x14956=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14953))),-1);
if(!x14956.valid){
continue;
}
if( IKabs(((x14954.value)*(x14955.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14956.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14953)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14954.value)*(x14955.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14956.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14953))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14954.value)*(x14955.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14956.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14953))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14957=IKsin(j4);
IkReal x14958=IKcos(j4);
IkReal x14959=(sj1*sj2);
IkReal x14960=(cj5*sj3);
IkReal x14961=(r11*sj5);
IkReal x14962=(cj3*cj5);
IkReal x14963=((1.0)*cj1);
IkReal x14964=(cj3*sj5);
IkReal x14965=(sj3*sj5);
IkReal x14966=(cj2*sj1);
IkReal x14967=(r01*sj5);
IkReal x14968=((1.0)*sj3);
IkReal x14969=(cj2*x14963);
IkReal x14970=(r10*x14958);
IkReal x14971=(r22*x14957);
IkReal x14972=(cj3*x14958);
IkReal x14973=((1.0)*cj5*x14957);
evalcond[0]=((-1.0)*r22*x14958);
evalcond[1]=(x14966+((cj3*x14971))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14973))+((x14957*x14961)));
evalcond[3]=((-1.0)+((x14957*x14967))+(((-1.0)*r00*x14973)));
evalcond[4]=(x14959+(((-1.0)*x14969))+(((-1.0)*x14968*x14971)));
evalcond[5]=(((r01*x14960))+((r01*x14958*x14964))+(((-1.0)*r00*x14958*x14962))+((r00*x14965)));
evalcond[6]=(((r01*x14962))+((r00*x14958*x14960))+(((-1.0)*r01*x14958*x14965))+((r00*x14964)));
evalcond[7]=(x14959+(((-1.0)*x14962*x14970))+((r11*x14960))+(((-1.0)*x14969))+((r10*x14965))+((x14961*x14972)));
evalcond[8]=(((x14960*x14970))+(((-1.0)*sj2*x14963))+(((-1.0)*x14966))+((r11*x14962))+((r10*x14964))+(((-1.0)*x14958*x14961*x14968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14974=((1.0)*cj3);
IkReal x14975=(cj5*r00);
IkReal x14976=(r01*sj5);
CheckValue<IkReal> x14977=IKPowWithIntegerCheck(((((-1.0)*x14975))+x14976),-1);
if(!x14977.valid){
continue;
}
CheckValue<IkReal> x14978=IKPowWithIntegerCheck(((((-1.0)*sj3*x14976))+((sj3*x14975))),-1);
if(!x14978.valid){
continue;
}
if( IKabs(x14977.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14978.value)*(((((-1.0)*cj5*r01*x14974))+(((-1.0)*r00*sj5*x14974)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14977.value)+IKsqr(((x14978.value)*(((((-1.0)*cj5*r01*x14974))+(((-1.0)*r00*sj5*x14974))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14977.value, ((x14978.value)*(((((-1.0)*cj5*r01*x14974))+(((-1.0)*r00*sj5*x14974))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14979=IKsin(j4);
IkReal x14980=IKcos(j4);
IkReal x14981=(sj1*sj2);
IkReal x14982=(cj5*sj3);
IkReal x14983=(r11*sj5);
IkReal x14984=(cj3*cj5);
IkReal x14985=((1.0)*cj1);
IkReal x14986=(cj3*sj5);
IkReal x14987=(sj3*sj5);
IkReal x14988=(cj2*sj1);
IkReal x14989=(r01*sj5);
IkReal x14990=((1.0)*sj3);
IkReal x14991=(cj2*x14985);
IkReal x14992=(r10*x14980);
IkReal x14993=(r22*x14979);
IkReal x14994=(cj3*x14980);
IkReal x14995=((1.0)*cj5*x14979);
evalcond[0]=((-1.0)*r22*x14980);
evalcond[1]=(x14988+((cj1*sj2))+((cj3*x14993)));
evalcond[2]=((((-1.0)*r10*x14995))+((x14979*x14983)));
evalcond[3]=((-1.0)+((x14979*x14989))+(((-1.0)*r00*x14995)));
evalcond[4]=((((-1.0)*x14991))+x14981+(((-1.0)*x14990*x14993)));
evalcond[5]=((((-1.0)*r00*x14980*x14984))+((r01*x14980*x14986))+((r00*x14987))+((r01*x14982)));
evalcond[6]=((((-1.0)*r01*x14980*x14987))+((r00*x14986))+((r01*x14984))+((r00*x14980*x14982)));
evalcond[7]=((((-1.0)*x14991))+x14981+((r10*x14987))+((x14983*x14994))+((r11*x14982))+(((-1.0)*x14984*x14992)));
evalcond[8]=((((-1.0)*sj2*x14985))+((r10*x14986))+(((-1.0)*x14980*x14983*x14990))+((r11*x14984))+(((-1.0)*x14988))+((x14982*x14992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14996=((1.0)*sj3);
IkReal x14997=(r01*sj5);
IkReal x14998=((1.0)*cj5*r00);
CheckValue<IkReal> x14999=IKPowWithIntegerCheck(((((-1.0)*x14998))+x14997),-1);
if(!x14999.valid){
continue;
}
CheckValue<IkReal> x15000=IKPowWithIntegerCheck(((((-1.0)*cj3*x14998))+((cj3*x14997))),-1);
if(!x15000.valid){
continue;
}
if( IKabs(x14999.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15000.value)*(((((-1.0)*cj5*r01*x14996))+(((-1.0)*r00*sj5*x14996)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14999.value)+IKsqr(((x15000.value)*(((((-1.0)*cj5*r01*x14996))+(((-1.0)*r00*sj5*x14996))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14999.value, ((x15000.value)*(((((-1.0)*cj5*r01*x14996))+(((-1.0)*r00*sj5*x14996))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15001=IKsin(j4);
IkReal x15002=IKcos(j4);
IkReal x15003=(sj1*sj2);
IkReal x15004=(cj5*sj3);
IkReal x15005=(r11*sj5);
IkReal x15006=(cj3*cj5);
IkReal x15007=((1.0)*cj1);
IkReal x15008=(cj3*sj5);
IkReal x15009=(sj3*sj5);
IkReal x15010=(cj2*sj1);
IkReal x15011=(r01*sj5);
IkReal x15012=((1.0)*sj3);
IkReal x15013=(cj2*x15007);
IkReal x15014=(r10*x15002);
IkReal x15015=(r22*x15001);
IkReal x15016=(cj3*x15002);
IkReal x15017=((1.0)*cj5*x15001);
evalcond[0]=((-1.0)*r22*x15002);
evalcond[1]=(((cj3*x15015))+((cj1*sj2))+x15010);
evalcond[2]=(((x15001*x15005))+(((-1.0)*r10*x15017)));
evalcond[3]=((-1.0)+((x15001*x15011))+(((-1.0)*r00*x15017)));
evalcond[4]=((((-1.0)*x15013))+(((-1.0)*x15012*x15015))+x15003);
evalcond[5]=(((r01*x15004))+((r00*x15009))+(((-1.0)*r00*x15002*x15006))+((r01*x15002*x15008)));
evalcond[6]=(((r01*x15006))+((r00*x15008))+(((-1.0)*r01*x15002*x15009))+((r00*x15002*x15004)));
evalcond[7]=((((-1.0)*x15013))+((x15005*x15016))+x15003+((r10*x15009))+((r11*x15004))+(((-1.0)*x15006*x15014)));
evalcond[8]=((((-1.0)*x15010))+(((-1.0)*sj2*x15007))+((x15004*x15014))+((r10*x15008))+(((-1.0)*x15002*x15005*x15012))+((r11*x15006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15018=cj5*cj5;
IkReal x15019=(cj3*r20);
IkReal x15020=(r21*sj3);
IkReal x15021=((1.0)*cj3);
IkReal x15022=(r01*r21);
IkReal x15023=(r01*sj3);
IkReal x15024=(r00*sj5);
IkReal x15025=(cj5*r01*sj5);
IkReal x15026=((1.0)*x15018);
CheckValue<IkReal> x15027 = IKatan2WithCheck(IkReal((((r22*sj3*x15024))+((cj5*r22*x15023)))),IkReal((((r00*x15020))+(((-1.0)*cj5*r20*sj3*x15024))+(((-1.0)*r00*x15020*x15026))+(((-1.0)*r20*x15023*x15026))+((x15020*x15025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15027.valid){
continue;
}
CheckValue<IkReal> x15028=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x15024))+(((-1.0)*r02*r22*x15021))+((x15019*x15025))+((cj3*x15018*x15022))+(((-1.0)*r00*x15019*x15026))+(((-1.0)*x15021*x15022)))),-1);
if(!x15028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15027.value)+(((1.5707963267949)*(x15028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15029=IKsin(j4);
IkReal x15030=IKcos(j4);
IkReal x15031=(sj1*sj2);
IkReal x15032=(r11*sj5);
IkReal x15033=(cj5*r10);
IkReal x15034=(cj5*r01);
IkReal x15035=(cj5*r00);
IkReal x15036=((1.0)*cj1);
IkReal x15037=(cj3*sj5);
IkReal x15038=(r21*sj5);
IkReal x15039=(cj5*sj3);
IkReal x15040=(sj3*sj5);
IkReal x15041=(cj2*sj1);
IkReal x15042=(r01*sj5);
IkReal x15043=(cj3*cj5);
IkReal x15044=(cj5*r20);
IkReal x15045=(cj2*x15036);
IkReal x15046=((1.0)*x15030);
IkReal x15047=((1.0)*x15029);
IkReal x15048=(cj3*x15030);
IkReal x15049=(sj3*x15030);
IkReal x15050=(cj3*x15029);
evalcond[0]=((((-1.0)*r22*x15046))+(((-1.0)*x15044*x15047))+((x15029*x15038)));
evalcond[1]=((((-1.0)*x15033*x15047))+(((-1.0)*r12*x15046))+((x15029*x15032)));
evalcond[2]=((-1.0)+((x15029*x15042))+(((-1.0)*x15035*x15047))+(((-1.0)*r02*x15046)));
evalcond[3]=(((r01*x15030*x15037))+(((-1.0)*cj3*x15035*x15046))+((sj3*x15034))+((r00*x15040))+((r02*x15050)));
evalcond[4]=(((r00*x15037))+(((-1.0)*r01*x15040*x15046))+((cj3*x15034))+((x15035*x15049))+(((-1.0)*r02*sj3*x15047)));
evalcond[5]=(((r21*x15039))+((r21*x15030*x15037))+((cj1*sj2))+x15041+((r20*x15040))+((r22*x15050))+(((-1.0)*r20*x15043*x15046)));
evalcond[6]=((((-1.0)*x15045))+((x15032*x15048))+(((-1.0)*cj3*x15033*x15046))+x15031+((r11*x15039))+((r10*x15040))+((r12*x15050)));
evalcond[7]=((((-1.0)*x15045))+(((-1.0)*r22*sj3*x15047))+x15031+((r20*x15037))+(((-1.0)*sj3*x15038*x15046))+((r21*x15043))+((r20*x15030*x15039)));
evalcond[8]=((((-1.0)*sj2*x15036))+((x15033*x15049))+((r11*x15043))+(((-1.0)*r12*sj3*x15047))+((r10*x15037))+(((-1.0)*x15041))+(((-1.0)*sj3*x15032*x15046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15051=((1.0)*cj5);
CheckValue<IkReal> x15052 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15052.valid){
continue;
}
CheckValue<IkReal> x15053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15051)))),-1);
if(!x15053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15052.value)+(((1.5707963267949)*(x15053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15054=IKsin(j4);
IkReal x15055=IKcos(j4);
IkReal x15056=(sj1*sj2);
IkReal x15057=(r11*sj5);
IkReal x15058=(cj5*r10);
IkReal x15059=(cj5*r01);
IkReal x15060=(cj5*r00);
IkReal x15061=((1.0)*cj1);
IkReal x15062=(cj3*sj5);
IkReal x15063=(r21*sj5);
IkReal x15064=(cj5*sj3);
IkReal x15065=(sj3*sj5);
IkReal x15066=(cj2*sj1);
IkReal x15067=(r01*sj5);
IkReal x15068=(cj3*cj5);
IkReal x15069=(cj5*r20);
IkReal x15070=(cj2*x15061);
IkReal x15071=((1.0)*x15055);
IkReal x15072=((1.0)*x15054);
IkReal x15073=(cj3*x15055);
IkReal x15074=(sj3*x15055);
IkReal x15075=(cj3*x15054);
evalcond[0]=((((-1.0)*x15069*x15072))+(((-1.0)*r22*x15071))+((x15054*x15063)));
evalcond[1]=((((-1.0)*r12*x15071))+(((-1.0)*x15058*x15072))+((x15054*x15057)));
evalcond[2]=((-1.0)+((x15054*x15067))+(((-1.0)*r02*x15071))+(((-1.0)*x15060*x15072)));
evalcond[3]=(((r02*x15075))+((r00*x15065))+(((-1.0)*cj3*x15060*x15071))+((sj3*x15059))+((r01*x15055*x15062)));
evalcond[4]=(((x15060*x15074))+((r00*x15062))+((cj3*x15059))+(((-1.0)*r02*sj3*x15072))+(((-1.0)*r01*x15065*x15071)));
evalcond[5]=(((r21*x15064))+((r20*x15065))+((r22*x15075))+((cj1*sj2))+x15066+(((-1.0)*r20*x15068*x15071))+((r21*x15055*x15062)));
evalcond[6]=((((-1.0)*x15070))+((r12*x15075))+((x15057*x15073))+x15056+(((-1.0)*cj3*x15058*x15071))+((r11*x15064))+((r10*x15065)));
evalcond[7]=(((r20*x15055*x15064))+(((-1.0)*x15070))+((r21*x15068))+(((-1.0)*sj3*x15063*x15071))+(((-1.0)*r22*sj3*x15072))+((r20*x15062))+x15056);
evalcond[8]=((((-1.0)*sj2*x15061))+(((-1.0)*sj3*x15057*x15071))+(((-1.0)*r12*sj3*x15072))+((x15058*x15074))+(((-1.0)*x15066))+((r11*x15068))+((r10*x15062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15076=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15076.valid){
continue;
}
CheckValue<IkReal> x15077 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15076.value)))+(x15077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15078=IKsin(j4);
IkReal x15079=IKcos(j4);
IkReal x15080=(sj1*sj2);
IkReal x15081=(r11*sj5);
IkReal x15082=(cj5*r10);
IkReal x15083=(cj5*r01);
IkReal x15084=(cj5*r00);
IkReal x15085=((1.0)*cj1);
IkReal x15086=(cj3*sj5);
IkReal x15087=(r21*sj5);
IkReal x15088=(cj5*sj3);
IkReal x15089=(sj3*sj5);
IkReal x15090=(cj2*sj1);
IkReal x15091=(r01*sj5);
IkReal x15092=(cj3*cj5);
IkReal x15093=(cj5*r20);
IkReal x15094=(cj2*x15085);
IkReal x15095=((1.0)*x15079);
IkReal x15096=((1.0)*x15078);
IkReal x15097=(cj3*x15079);
IkReal x15098=(sj3*x15079);
IkReal x15099=(cj3*x15078);
evalcond[0]=((((-1.0)*x15093*x15096))+(((-1.0)*r22*x15095))+((x15078*x15087)));
evalcond[1]=((((-1.0)*x15082*x15096))+((x15078*x15081))+(((-1.0)*r12*x15095)));
evalcond[2]=((-1.0)+((x15078*x15091))+(((-1.0)*r02*x15095))+(((-1.0)*x15084*x15096)));
evalcond[3]=(((sj3*x15083))+((r02*x15099))+((r00*x15089))+(((-1.0)*cj3*x15084*x15095))+((r01*x15079*x15086)));
evalcond[4]=((((-1.0)*r02*sj3*x15096))+((x15084*x15098))+((r00*x15086))+(((-1.0)*r01*x15089*x15095))+((cj3*x15083)));
evalcond[5]=(((r21*x15079*x15086))+((cj1*sj2))+(((-1.0)*r20*x15092*x15095))+x15090+((r21*x15088))+((r20*x15089))+((r22*x15099)));
evalcond[6]=(x15080+((x15081*x15097))+((r12*x15099))+(((-1.0)*cj3*x15082*x15095))+((r11*x15088))+(((-1.0)*x15094))+((r10*x15089)));
evalcond[7]=((((-1.0)*r22*sj3*x15096))+((r20*x15079*x15088))+((r21*x15092))+x15080+((r20*x15086))+(((-1.0)*sj3*x15087*x15095))+(((-1.0)*x15094)));
evalcond[8]=((((-1.0)*r12*sj3*x15096))+(((-1.0)*sj3*x15081*x15095))+(((-1.0)*sj2*x15085))+(((-1.0)*x15090))+((r11*x15092))+((x15082*x15098))+((r10*x15086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15100=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15100;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15101=((1.0)*cj5);
IkReal x15102=((((-1.0)*r21*x15101))+(((-1.0)*r20*sj5)));
j4eval[0]=x15102;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15101))+((r11*sj5))))));
j4eval[2]=IKsign(x15102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15103=cj5*cj5;
IkReal x15104=(cj3*r01);
IkReal x15105=(cj5*sj5);
IkReal x15106=((1.0)*cj3);
IkReal x15107=(((r20*x15104*x15105))+(((-1.0)*r00*r20*x15103*x15106))+((r21*x15103*x15104))+(((-1.0)*r02*r22*x15106))+(((-1.0)*r21*x15104))+((cj3*r00*r21*x15105)));
j4eval[0]=x15107;
j4eval[1]=IKsign(x15107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15108=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15108;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15108);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15109=((1.0)*cj5);
IkReal x15110=((((-1.0)*r21*x15109))+(((-1.0)*r20*sj5)));
j4eval[0]=x15110;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15109))+((r11*sj5))))));
j4eval[2]=IKsign(x15110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15111=cj5*cj5;
IkReal x15112=r01*r01;
IkReal x15113=(cj5*r00);
IkReal x15114=(r01*sj5);
IkReal x15115=((((-1.0)*x15111*x15112))+x15112+(r02*r02)+(((-2.0)*x15113*x15114))+((x15111*(r00*r00))));
j4eval[0]=x15115;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15114))+x15113))));
j4eval[2]=IKsign(x15115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15116=cj5*cj5;
IkReal x15117=r01*r01;
IkReal x15118=(r01*sj5);
IkReal x15119=(cj5*r00);
CheckValue<IkReal> x15120=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15116*x15117))+x15117+(((-2.0)*x15118*x15119))+(r02*r02)+((x15116*(r00*r00))))),-1);
if(!x15120.valid){
continue;
}
CheckValue<IkReal> x15121 = IKatan2WithCheck(IkReal(((((-1.0)*x15118))+x15119)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15120.value)))+(x15121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15122=IKsin(j4);
IkReal x15123=IKcos(j4);
IkReal x15124=(cj5*r10);
IkReal x15125=(r01*sj5);
IkReal x15126=(cj5*r00);
IkReal x15127=(cj5*r20);
IkReal x15128=((1.0)*x15123);
IkReal x15129=((1.0)*x15122);
IkReal x15130=(sj5*x15122);
evalcond[0]=(((r21*x15130))+(((-1.0)*x15127*x15129))+(((-1.0)*r22*x15128)));
evalcond[1]=((((-1.0)*x15124*x15129))+(((-1.0)*r12*x15128))+((r11*x15130)));
evalcond[2]=((((-1.0)*r02*x15129))+(((-1.0)*x15125*x15128))+((x15123*x15126)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15128))+(((-1.0)*x15126*x15129))+((x15122*x15125)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15129))+(((-1.0)*r11*sj5*x15128))+((x15123*x15124)));
evalcond[5]=((((-1.0)*r21*sj5*x15128))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15129))+((x15123*x15127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15131=((1.0)*cj5);
CheckValue<IkReal> x15132 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15131))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15132.valid){
continue;
}
CheckValue<IkReal> x15133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15131))+(((-1.0)*r20*sj5)))),-1);
if(!x15133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15132.value)+(((1.5707963267949)*(x15133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15134=IKsin(j4);
IkReal x15135=IKcos(j4);
IkReal x15136=(cj5*r10);
IkReal x15137=(r01*sj5);
IkReal x15138=(cj5*r00);
IkReal x15139=(cj5*r20);
IkReal x15140=((1.0)*x15135);
IkReal x15141=((1.0)*x15134);
IkReal x15142=(sj5*x15134);
evalcond[0]=((((-1.0)*x15139*x15141))+((r21*x15142))+(((-1.0)*r22*x15140)));
evalcond[1]=(((r11*x15142))+(((-1.0)*x15136*x15141))+(((-1.0)*r12*x15140)));
evalcond[2]=((((-1.0)*r02*x15141))+((x15135*x15138))+(((-1.0)*x15137*x15140)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15140))+((x15134*x15137))+(((-1.0)*x15138*x15141)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15135*x15136))+(((-1.0)*r11*sj5*x15140))+(((-1.0)*r12*x15141)));
evalcond[5]=((((-1.0)*r21*sj5*x15140))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15135*x15139))+(((-1.0)*r22*x15141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15143 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15143.valid){
continue;
}
CheckValue<IkReal> x15144=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15143.value)+(((1.5707963267949)*(x15144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15145=IKsin(j4);
IkReal x15146=IKcos(j4);
IkReal x15147=(cj5*r10);
IkReal x15148=(r01*sj5);
IkReal x15149=(cj5*r00);
IkReal x15150=(cj5*r20);
IkReal x15151=((1.0)*x15146);
IkReal x15152=((1.0)*x15145);
IkReal x15153=(sj5*x15145);
evalcond[0]=(((r21*x15153))+(((-1.0)*r22*x15151))+(((-1.0)*x15150*x15152)));
evalcond[1]=((((-1.0)*x15147*x15152))+(((-1.0)*r12*x15151))+((r11*x15153)));
evalcond[2]=((((-1.0)*r02*x15152))+((x15146*x15149))+(((-1.0)*x15148*x15151)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15151))+(((-1.0)*x15149*x15152))+((x15145*x15148)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15146*x15147))+(((-1.0)*r12*x15152))+(((-1.0)*r11*sj5*x15151)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15152))+(((-1.0)*r21*sj5*x15151))+((x15146*x15150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15154=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15154;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15155=((1.0)*cj5);
IkReal x15156=((((-1.0)*r21*x15155))+(((-1.0)*r20*sj5)));
j4eval[0]=x15156;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15155))+((r11*sj5))))));
j4eval[2]=IKsign(x15156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15157=cj5*cj5;
IkReal x15158=r01*r01;
IkReal x15159=(r01*sj5);
IkReal x15160=(cj5*r00);
IkReal x15161=((((-1.0)*x15157*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x15159*x15160))+((x15157*x15158))+(((-1.0)*x15158)));
j4eval[0]=x15161;
j4eval[1]=IKsign(x15161);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15160))+x15159))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15162=cj5*cj5;
IkReal x15163=r01*r01;
IkReal x15164=(r01*sj5);
IkReal x15165=(cj5*r00);
CheckValue<IkReal> x15166=IKPowWithIntegerCheck(IKsign((((x15162*x15163))+(((-1.0)*(r02*r02)))+(((-1.0)*x15163))+(((2.0)*x15164*x15165))+(((-1.0)*x15162*(r00*r00))))),-1);
if(!x15166.valid){
continue;
}
CheckValue<IkReal> x15167 = IKatan2WithCheck(IkReal(((((-1.0)*x15165))+x15164)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15166.value)))+(x15167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15168=IKcos(j4);
IkReal x15169=IKsin(j4);
IkReal x15170=(cj5*r00);
IkReal x15171=(cj5*r10);
IkReal x15172=(r21*sj5);
IkReal x15173=(cj5*r20);
IkReal x15174=((1.0)*x15168);
IkReal x15175=((1.0)*x15169);
IkReal x15176=(sj5*x15169);
IkReal x15177=(sj5*x15168);
evalcond[0]=((((-1.0)*x15170*x15174))+((r02*x15169))+((r01*x15177)));
evalcond[1]=((((-1.0)*x15173*x15175))+((x15169*x15172))+(((-1.0)*r22*x15174)));
evalcond[2]=(((r11*x15176))+(((-1.0)*x15171*x15175))+(((-1.0)*r12*x15174)));
evalcond[3]=((1.0)+(((-1.0)*x15170*x15175))+(((-1.0)*r02*x15174))+((r01*x15176)));
evalcond[4]=(((cj2*sj1))+((r11*x15177))+((cj1*sj2))+((r12*x15169))+(((-1.0)*x15171*x15174)));
evalcond[5]=((((-1.0)*x15173*x15174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15168*x15172))+((r22*x15169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15178=((1.0)*cj5);
CheckValue<IkReal> x15179 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15179.valid){
continue;
}
CheckValue<IkReal> x15180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15178))+(((-1.0)*r20*sj5)))),-1);
if(!x15180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15179.value)+(((1.5707963267949)*(x15180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15181=IKcos(j4);
IkReal x15182=IKsin(j4);
IkReal x15183=(cj5*r00);
IkReal x15184=(cj5*r10);
IkReal x15185=(r21*sj5);
IkReal x15186=(cj5*r20);
IkReal x15187=((1.0)*x15181);
IkReal x15188=((1.0)*x15182);
IkReal x15189=(sj5*x15182);
IkReal x15190=(sj5*x15181);
evalcond[0]=(((r02*x15182))+(((-1.0)*x15183*x15187))+((r01*x15190)));
evalcond[1]=(((x15182*x15185))+(((-1.0)*x15186*x15188))+(((-1.0)*r22*x15187)));
evalcond[2]=((((-1.0)*x15184*x15188))+((r11*x15189))+(((-1.0)*r12*x15187)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15187))+((r01*x15189))+(((-1.0)*x15183*x15188)));
evalcond[4]=(((cj2*sj1))+((r11*x15190))+(((-1.0)*x15184*x15187))+((cj1*sj2))+((r12*x15182)));
evalcond[5]=(((x15181*x15185))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15186*x15187))+((r22*x15182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15191 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15191.valid){
continue;
}
CheckValue<IkReal> x15192=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15191.value)+(((1.5707963267949)*(x15192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15193=IKcos(j4);
IkReal x15194=IKsin(j4);
IkReal x15195=(cj5*r00);
IkReal x15196=(cj5*r10);
IkReal x15197=(r21*sj5);
IkReal x15198=(cj5*r20);
IkReal x15199=((1.0)*x15193);
IkReal x15200=((1.0)*x15194);
IkReal x15201=(sj5*x15194);
IkReal x15202=(sj5*x15193);
evalcond[0]=((((-1.0)*x15195*x15199))+((r01*x15202))+((r02*x15194)));
evalcond[1]=((((-1.0)*x15198*x15200))+((x15194*x15197))+(((-1.0)*r22*x15199)));
evalcond[2]=((((-1.0)*r12*x15199))+((r11*x15201))+(((-1.0)*x15196*x15200)));
evalcond[3]=((1.0)+(((-1.0)*x15195*x15200))+(((-1.0)*r02*x15199))+((r01*x15201)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15196*x15199))+((r11*x15202))+((r12*x15194)));
evalcond[5]=(((x15193*x15197))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15194))+(((-1.0)*x15198*x15199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15204 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15204)==0){
continue;
}
IkReal x15203=pow(x15204,-0.5);
CheckValue<IkReal> x15205 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15205.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15205.value));
IkReal gconst61=((-1.0)*r11*x15203);
IkReal gconst62=(r10*x15203);
CheckValue<IkReal> x15206 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15206.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15206.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15209 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15209.valid){
continue;
}
IkReal x15207=((-1.0)*(x15209.value));
IkReal x15208=x15203;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15207;
IkReal gconst60=x15207;
IkReal gconst61=((-1.0)*r11*x15208);
IkReal gconst62=(r10*x15208);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15212 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15212.valid){
continue;
}
IkReal x15210=((-1.0)*(x15212.value));
IkReal x15211=x15203;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15210;
IkReal gconst60=x15210;
IkReal gconst61=((-1.0)*r11*x15211);
IkReal gconst62=(r10*x15211);
CheckValue<IkReal> x15220=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15220.valid){
continue;
}
IkReal x15213=x15220.value;
IkReal x15214=(sj3*x15213);
IkReal x15215=(r20*x15214);
IkReal x15216=(r00*x15214);
IkReal x15217=(r01*x15214);
IkReal x15218=(r21*x15214);
IkReal x15219=(r10*r11*x15214);
j4eval[0]=IKsign((((r21*x15217*(r11*r11)))+((r10*r11*r21*x15216))+((r01*r10*r11*x15215))+((r00*x15215*(r10*r10)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15221=gconst61*gconst61;
IkReal x15222=gconst62*gconst62;
IkReal x15223=(cj3*r01);
IkReal x15224=(r22*sj3);
IkReal x15225=(gconst61*r00);
IkReal x15226=((1.0)*cj3);
IkReal x15227=(gconst62*r01);
IkReal x15228=((1.0)*sj3);
IkReal x15229=(gconst61*gconst62*r20);
IkReal x15230=(r21*x15221);
IkReal x15231=(r20*x15222);
CheckValue<IkReal> x15232 = IKatan2WithCheck(IkReal((((x15224*x15227))+((x15224*x15225)))),IkReal(((((-1.0)*r01*x15228*x15231))+((r00*sj3*x15230))+((gconst61*r21*sj3*x15227))+(((-1.0)*gconst62*r20*x15225*x15228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15232.valid){
continue;
}
CheckValue<IkReal> x15233=IKPowWithIntegerCheck(IKsign((((cj3*gconst62*r21*x15225))+((x15223*x15229))+(((-1.0)*x15223*x15230))+(((-1.0)*r02*r22*x15226))+(((-1.0)*r00*x15226*x15231)))),-1);
if(!x15233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15232.value)+(((1.5707963267949)*(x15233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15234=IKsin(j4);
IkReal x15235=IKcos(j4);
IkReal x15236=(cj2*sj1);
IkReal x15237=(cj1*sj2);
IkReal x15238=(gconst61*sj3);
IkReal x15239=(cj3*gconst61);
IkReal x15240=(cj3*gconst62);
IkReal x15241=(sj1*sj2);
IkReal x15242=(gconst62*sj3);
IkReal x15243=(cj1*cj2);
IkReal x15244=((1.0)*x15235);
IkReal x15245=((1.0)*x15234);
IkReal x15246=(gconst61*x15234);
IkReal x15247=(cj3*x15234);
IkReal x15248=(x15236+x15237);
evalcond[0]=((((-1.0)*gconst62*r20*x15245))+((r21*x15246))+(((-1.0)*r22*x15244)));
evalcond[1]=((((-1.0)*gconst62*r10*x15245))+(((-1.0)*r12*x15244))+((r11*x15246)));
evalcond[2]=((1.0)+((r01*x15246))+(((-1.0)*r02*x15244))+(((-1.0)*gconst62*r00*x15245)));
evalcond[3]=(((r00*x15238))+((r01*x15242))+(((-1.0)*r00*x15240*x15244))+((r01*x15235*x15239))+((r02*x15247)));
evalcond[4]=(((r00*x15239))+((r01*x15240))+(((-1.0)*r02*sj3*x15245))+((r00*x15235*x15242))+(((-1.0)*r01*x15238*x15244)));
evalcond[5]=(x15248+((r21*x15242))+(((-1.0)*r20*x15240*x15244))+((r22*x15247))+((r21*x15235*x15239))+((r20*x15238)));
evalcond[6]=((((-1.0)*x15241))+x15243+((r10*x15238))+((r12*x15247))+((r11*x15235*x15239))+((r11*x15242))+(((-1.0)*r10*x15240*x15244)));
evalcond[7]=((((-1.0)*r12*sj3*x15245))+x15248+(((-1.0)*r11*x15238*x15244))+((r10*x15235*x15242))+((r10*x15239))+((r11*x15240)));
evalcond[8]=((((-1.0)*x15243))+x15241+((r21*x15240))+(((-1.0)*r22*sj3*x15245))+((r20*x15235*x15242))+(((-1.0)*r21*x15238*x15244))+((r20*x15239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15249=gconst61*gconst61;
IkReal x15250=gconst62*gconst62;
IkReal x15251=(cj3*r22);
IkReal x15252=(gconst62*r01);
IkReal x15253=(gconst61*r00);
IkReal x15254=((1.0)*r20);
IkReal x15255=(cj3*r21);
IkReal x15256=(r21*sj3);
CheckValue<IkReal> x15257=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15250))+(((-1.0)*gconst61*sj3*x15252*x15254))+(((-1.0)*gconst62*x15253*x15256))+((r01*x15249*x15256))+((r02*r22*sj3)))),-1);
if(!x15257.valid){
continue;
}
CheckValue<IkReal> x15258 = IKatan2WithCheck(IkReal((((x15251*x15252))+((x15251*x15253)))),IkReal((((r00*x15249*x15255))+(((-1.0)*cj3*r01*x15250*x15254))+((gconst61*x15252*x15255))+(((-1.0)*cj3*gconst62*x15253*x15254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15257.value)))+(x15258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15259=IKsin(j4);
IkReal x15260=IKcos(j4);
IkReal x15261=(cj2*sj1);
IkReal x15262=(cj1*sj2);
IkReal x15263=(gconst61*sj3);
IkReal x15264=(cj3*gconst61);
IkReal x15265=(cj3*gconst62);
IkReal x15266=(sj1*sj2);
IkReal x15267=(gconst62*sj3);
IkReal x15268=(cj1*cj2);
IkReal x15269=((1.0)*x15260);
IkReal x15270=((1.0)*x15259);
IkReal x15271=(gconst61*x15259);
IkReal x15272=(cj3*x15259);
IkReal x15273=(x15261+x15262);
evalcond[0]=((((-1.0)*r22*x15269))+(((-1.0)*gconst62*r20*x15270))+((r21*x15271)));
evalcond[1]=(((r11*x15271))+(((-1.0)*gconst62*r10*x15270))+(((-1.0)*r12*x15269)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15270))+(((-1.0)*r02*x15269))+((r01*x15271)));
evalcond[3]=((((-1.0)*r00*x15265*x15269))+((r02*x15272))+((r01*x15267))+((r00*x15263))+((r01*x15260*x15264)));
evalcond[4]=((((-1.0)*r02*sj3*x15270))+((r01*x15265))+((r00*x15264))+(((-1.0)*r01*x15263*x15269))+((r00*x15260*x15267)));
evalcond[5]=(((r20*x15263))+((r22*x15272))+x15273+(((-1.0)*r20*x15265*x15269))+((r21*x15260*x15264))+((r21*x15267)));
evalcond[6]=(((r12*x15272))+(((-1.0)*r10*x15265*x15269))+x15268+((r10*x15263))+((r11*x15260*x15264))+(((-1.0)*x15266))+((r11*x15267)));
evalcond[7]=(((r10*x15260*x15267))+(((-1.0)*r11*x15263*x15269))+x15273+(((-1.0)*r12*sj3*x15270))+((r10*x15264))+((r11*x15265)));
evalcond[8]=(((r20*x15264))+x15266+(((-1.0)*r22*sj3*x15270))+(((-1.0)*r21*x15263*x15269))+((r20*x15260*x15267))+(((-1.0)*x15268))+((r21*x15265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15274=((1.0)*gconst62);
CheckValue<IkReal> x15275 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15274))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15275.valid){
continue;
}
CheckValue<IkReal> x15276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15274))+(((-1.0)*gconst61*r20)))),-1);
if(!x15276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15275.value)+(((1.5707963267949)*(x15276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15277=IKsin(j4);
IkReal x15278=IKcos(j4);
IkReal x15279=(cj2*sj1);
IkReal x15280=(cj1*sj2);
IkReal x15281=(gconst61*sj3);
IkReal x15282=(cj3*gconst61);
IkReal x15283=(cj3*gconst62);
IkReal x15284=(sj1*sj2);
IkReal x15285=(gconst62*sj3);
IkReal x15286=(cj1*cj2);
IkReal x15287=((1.0)*x15278);
IkReal x15288=((1.0)*x15277);
IkReal x15289=(gconst61*x15277);
IkReal x15290=(cj3*x15277);
IkReal x15291=(x15279+x15280);
evalcond[0]=((((-1.0)*gconst62*r20*x15288))+(((-1.0)*r22*x15287))+((r21*x15289)));
evalcond[1]=((((-1.0)*r12*x15287))+((r11*x15289))+(((-1.0)*gconst62*r10*x15288)));
evalcond[2]=((1.0)+((r01*x15289))+(((-1.0)*gconst62*r00*x15288))+(((-1.0)*r02*x15287)));
evalcond[3]=(((r01*x15278*x15282))+((r01*x15285))+((r00*x15281))+((r02*x15290))+(((-1.0)*r00*x15283*x15287)));
evalcond[4]=(((r01*x15283))+((r00*x15282))+(((-1.0)*r02*sj3*x15288))+((r00*x15278*x15285))+(((-1.0)*r01*x15281*x15287)));
evalcond[5]=(x15291+(((-1.0)*r20*x15283*x15287))+((r22*x15290))+((r21*x15278*x15282))+((r20*x15281))+((r21*x15285)));
evalcond[6]=(((r11*x15278*x15282))+(((-1.0)*r10*x15283*x15287))+x15286+((r12*x15290))+((r10*x15281))+((r11*x15285))+(((-1.0)*x15284)));
evalcond[7]=((((-1.0)*r12*sj3*x15288))+x15291+((r10*x15282))+((r10*x15278*x15285))+(((-1.0)*r11*x15281*x15287))+((r11*x15283)));
evalcond[8]=((((-1.0)*r21*x15281*x15287))+(((-1.0)*r22*sj3*x15288))+x15284+((r20*x15278*x15285))+((r20*x15282))+(((-1.0)*x15286))+((r21*x15283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15293 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15293)==0){
continue;
}
IkReal x15292=pow(x15293,-0.5);
CheckValue<IkReal> x15294 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15294.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15294.value))));
IkReal gconst64=((1.0)*r11*x15292);
IkReal gconst65=((-1.0)*r10*x15292);
CheckValue<IkReal> x15295 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15295.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15295.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15298 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15298.valid){
continue;
}
IkReal x15296=((1.0)*(x15298.value));
IkReal x15297=x15292;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15296)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15296)));
IkReal gconst64=((1.0)*r11*x15297);
IkReal gconst65=((-1.0)*r10*x15297);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15299=gconst64*gconst64;
IkReal x15300=gconst65*gconst65;
IkReal x15301=(gconst65*r01);
IkReal x15302=(cj3*r22);
IkReal x15303=(gconst64*r00);
IkReal x15304=(cj3*r21);
IkReal x15305=((1.0)*gconst64*sj3);
IkReal x15306=((1.0)*cj3*r20);
CheckValue<IkReal> x15307=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15300))+(((-1.0)*r20*x15301*x15305))+(((-1.0)*gconst65*r21*sj3*x15303))+((r02*r22*sj3))+((r01*r21*sj3*x15299)))),-1);
if(!x15307.valid){
continue;
}
CheckValue<IkReal> x15308 = IKatan2WithCheck(IkReal((((x15302*x15303))+((x15301*x15302)))),IkReal(((((-1.0)*r01*x15300*x15306))+((r00*x15299*x15304))+((gconst64*x15301*x15304))+(((-1.0)*gconst65*x15303*x15306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15307.value)))+(x15308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15309=IKsin(j4);
IkReal x15310=IKcos(j4);
IkReal x15311=(cj2*sj1);
IkReal x15312=(cj1*sj2);
IkReal x15313=(cj3*gconst64);
IkReal x15314=(gconst65*r21);
IkReal x15315=(sj1*sj2);
IkReal x15316=(gconst65*sj3);
IkReal x15317=(gconst64*sj3);
IkReal x15318=(cj3*gconst65);
IkReal x15319=(cj1*cj2);
IkReal x15320=((1.0)*x15310);
IkReal x15321=((1.0)*x15309);
IkReal x15322=(cj3*x15309);
IkReal x15323=(gconst64*x15309);
IkReal x15324=(x15311+x15312);
evalcond[0]=((((-1.0)*gconst65*r20*x15321))+((r21*x15323))+(((-1.0)*r22*x15320)));
evalcond[1]=(((r11*x15323))+(((-1.0)*gconst65*r10*x15321))+(((-1.0)*r12*x15320)));
evalcond[2]=((1.0)+((r01*x15323))+(((-1.0)*gconst65*r00*x15321))+(((-1.0)*r02*x15320)));
evalcond[3]=((((-1.0)*r00*x15318*x15320))+((r01*x15316))+((r00*x15317))+((r01*x15310*x15313))+((r02*x15322)));
evalcond[4]=(((r01*x15318))+((r00*x15313))+(((-1.0)*r02*sj3*x15321))+((r00*x15310*x15316))+(((-1.0)*r01*x15317*x15320)));
evalcond[5]=(((sj3*x15314))+((r21*x15310*x15313))+((r22*x15322))+x15324+(((-1.0)*r20*x15318*x15320))+((r20*x15317)));
evalcond[6]=(((r11*x15316))+(((-1.0)*r10*x15318*x15320))+(((-1.0)*x15315))+((r12*x15322))+x15319+((r10*x15317))+((r11*x15310*x15313)));
evalcond[7]=(((r11*x15318))+((r10*x15310*x15316))+(((-1.0)*r11*x15317*x15320))+x15324+(((-1.0)*r12*sj3*x15321))+((r10*x15313)));
evalcond[8]=((((-1.0)*x15319))+((r20*x15310*x15316))+(((-1.0)*r21*x15317*x15320))+x15315+(((-1.0)*r22*sj3*x15321))+((r20*x15313))+((cj3*x15314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15325=((1.0)*gconst65);
CheckValue<IkReal> x15326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15325))+(((-1.0)*gconst64*r20)))),-1);
if(!x15326.valid){
continue;
}
CheckValue<IkReal> x15327 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15326.value)))+(x15327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15328=IKsin(j4);
IkReal x15329=IKcos(j4);
IkReal x15330=(cj2*sj1);
IkReal x15331=(cj1*sj2);
IkReal x15332=(cj3*gconst64);
IkReal x15333=(gconst65*r21);
IkReal x15334=(sj1*sj2);
IkReal x15335=(gconst65*sj3);
IkReal x15336=(gconst64*sj3);
IkReal x15337=(cj3*gconst65);
IkReal x15338=(cj1*cj2);
IkReal x15339=((1.0)*x15329);
IkReal x15340=((1.0)*x15328);
IkReal x15341=(cj3*x15328);
IkReal x15342=(gconst64*x15328);
IkReal x15343=(x15331+x15330);
evalcond[0]=(((r21*x15342))+(((-1.0)*gconst65*r20*x15340))+(((-1.0)*r22*x15339)));
evalcond[1]=(((r11*x15342))+(((-1.0)*r12*x15339))+(((-1.0)*gconst65*r10*x15340)));
evalcond[2]=((1.0)+((r01*x15342))+(((-1.0)*gconst65*r00*x15340))+(((-1.0)*r02*x15339)));
evalcond[3]=((((-1.0)*r00*x15337*x15339))+((r01*x15335))+((r00*x15336))+((r02*x15341))+((r01*x15329*x15332)));
evalcond[4]=((((-1.0)*r01*x15336*x15339))+((r01*x15337))+((r00*x15332))+((r00*x15329*x15335))+(((-1.0)*r02*sj3*x15340)));
evalcond[5]=(((r20*x15336))+((r21*x15329*x15332))+((r22*x15341))+((sj3*x15333))+(((-1.0)*r20*x15337*x15339))+x15343);
evalcond[6]=((((-1.0)*x15334))+((r11*x15329*x15332))+((r11*x15335))+x15338+((r10*x15336))+((r12*x15341))+(((-1.0)*r10*x15337*x15339)));
evalcond[7]=(((r10*x15329*x15335))+(((-1.0)*r12*sj3*x15340))+((r11*x15337))+x15343+((r10*x15332))+(((-1.0)*r11*x15336*x15339)));
evalcond[8]=(((r20*x15332))+(((-1.0)*x15338))+((cj3*x15333))+(((-1.0)*r22*sj3*x15340))+x15334+(((-1.0)*r21*x15336*x15339))+((r20*x15329*x15335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15344=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15344);
rxp0_2=(py*r00);
rxp1_0=(r21*x15344);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15345=(r01*sj5);
IkReal x15346=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15346))+x15345);
j4eval[1]=(((cj3*x15345))+(((-1.0)*cj3*x15346)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15347=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15347);
rxp0_2=(py*r00);
rxp1_0=(r21*x15347);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15348=(cj5*r00);
IkReal x15349=(r01*sj5);
j4eval[0]=(x15349+(((-1.0)*x15348)));
j4eval[1]=(((sj3*x15348))+(((-1.0)*sj3*x15349)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15350=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15350);
rxp0_2=(py*r00);
rxp1_0=(r21*x15350);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15351=((1.0)*r00);
CheckValue<IkReal> x15352=IKPowWithIntegerCheck(cj3,-1);
if(!x15352.valid){
continue;
}
CheckValue<IkReal> x15353=IKPowWithIntegerCheck(r12,-1);
if(!x15353.valid){
continue;
}
CheckValue<IkReal> x15354=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15351))),-1);
if(!x15354.valid){
continue;
}
if( IKabs(((x15352.value)*(x15353.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15354.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15351)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15352.value)*(x15353.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15354.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15351))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15352.value)*(x15353.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15354.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15351))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15355=IKsin(j4);
IkReal x15356=IKcos(j4);
IkReal x15357=(cj2*sj1);
IkReal x15358=(cj1*sj2);
IkReal x15359=(sj1*sj2);
IkReal x15360=(cj5*sj3);
IkReal x15361=(cj3*cj5);
IkReal x15362=(r21*sj5);
IkReal x15363=(cj1*cj2);
IkReal x15364=(r00*sj5);
IkReal x15365=(r01*sj5);
IkReal x15366=(r20*sj5);
IkReal x15367=((1.0)*x15355);
IkReal x15368=(r20*x15356);
IkReal x15369=(r00*x15356);
IkReal x15370=(cj3*x15356);
IkReal x15371=(x15357+x15358);
IkReal x15372=((1.0)*sj3*x15356);
evalcond[0]=((-1.0)*r12*x15356);
evalcond[1]=((((-1.0)*cj5*r20*x15367))+((x15355*x15362)));
evalcond[2]=(x15363+(((-1.0)*x15359))+((cj3*r12*x15355)));
evalcond[3]=((((-1.0)*r12*sj3*x15367))+x15371);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15367))+((x15355*x15365)));
evalcond[5]=(((x15365*x15370))+((sj3*x15364))+((r01*x15360))+(((-1.0)*x15361*x15369)));
evalcond[6]=(((cj3*x15364))+((x15360*x15369))+((r01*x15361))+(((-1.0)*x15365*x15372)));
evalcond[7]=(x15371+((sj3*x15366))+((x15362*x15370))+((r21*x15360))+(((-1.0)*x15361*x15368)));
evalcond[8]=(((cj3*x15366))+((x15360*x15368))+x15359+(((-1.0)*x15363))+((r21*x15361))+(((-1.0)*x15362*x15372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15373=((1.0)*r01);
IkReal x15374=(cj5*r00);
CheckValue<IkReal> x15375=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15374))),-1);
if(!x15375.valid){
continue;
}
CheckValue<IkReal> x15376=IKPowWithIntegerCheck((((sj3*x15374))+(((-1.0)*sj3*sj5*x15373))),-1);
if(!x15376.valid){
continue;
}
if( IKabs(((-1.0)*(x15375.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15376.value)*(((((-1.0)*cj3*cj5*x15373))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15375.value)))+IKsqr(((x15376.value)*(((((-1.0)*cj3*cj5*x15373))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15375.value)), ((x15376.value)*(((((-1.0)*cj3*cj5*x15373))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15377=IKsin(j4);
IkReal x15378=IKcos(j4);
IkReal x15379=(cj2*sj1);
IkReal x15380=(cj1*sj2);
IkReal x15381=(sj1*sj2);
IkReal x15382=(cj5*sj3);
IkReal x15383=(cj3*cj5);
IkReal x15384=(r21*sj5);
IkReal x15385=(cj1*cj2);
IkReal x15386=(r00*sj5);
IkReal x15387=(r01*sj5);
IkReal x15388=(r20*sj5);
IkReal x15389=((1.0)*x15377);
IkReal x15390=(r20*x15378);
IkReal x15391=(r00*x15378);
IkReal x15392=(cj3*x15378);
IkReal x15393=(x15379+x15380);
IkReal x15394=((1.0)*sj3*x15378);
evalcond[0]=((-1.0)*r12*x15378);
evalcond[1]=((((-1.0)*cj5*r20*x15389))+((x15377*x15384)));
evalcond[2]=(((cj3*r12*x15377))+x15385+(((-1.0)*x15381)));
evalcond[3]=((((-1.0)*r12*sj3*x15389))+x15393);
evalcond[4]=((1.0)+((x15377*x15387))+(((-1.0)*cj5*r00*x15389)));
evalcond[5]=(((r01*x15382))+(((-1.0)*x15383*x15391))+((sj3*x15386))+((x15387*x15392)));
evalcond[6]=(((r01*x15383))+(((-1.0)*x15387*x15394))+((x15382*x15391))+((cj3*x15386)));
evalcond[7]=(((r21*x15382))+(((-1.0)*x15383*x15390))+((x15384*x15392))+x15393+((sj3*x15388)));
evalcond[8]=(((r21*x15383))+((x15382*x15390))+((cj3*x15388))+x15381+(((-1.0)*x15384*x15394))+(((-1.0)*x15385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15395=((1.0)*r00);
IkReal x15396=(r01*sj5);
CheckValue<IkReal> x15397=IKPowWithIntegerCheck(((((-1.0)*cj5*x15395))+x15396),-1);
if(!x15397.valid){
continue;
}
CheckValue<IkReal> x15398=IKPowWithIntegerCheck((((cj3*x15396))+(((-1.0)*cj3*cj5*x15395))),-1);
if(!x15398.valid){
continue;
}
if( IKabs(((-1.0)*(x15397.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15398.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15395)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15397.value)))+IKsqr(((x15398.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15395))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15397.value)), ((x15398.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15395))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15399=IKsin(j4);
IkReal x15400=IKcos(j4);
IkReal x15401=(cj2*sj1);
IkReal x15402=(cj1*sj2);
IkReal x15403=(sj1*sj2);
IkReal x15404=(cj5*sj3);
IkReal x15405=(cj3*cj5);
IkReal x15406=(r21*sj5);
IkReal x15407=(cj1*cj2);
IkReal x15408=(r00*sj5);
IkReal x15409=(r01*sj5);
IkReal x15410=(r20*sj5);
IkReal x15411=((1.0)*x15399);
IkReal x15412=(r20*x15400);
IkReal x15413=(r00*x15400);
IkReal x15414=(cj3*x15400);
IkReal x15415=(x15401+x15402);
IkReal x15416=((1.0)*sj3*x15400);
evalcond[0]=((-1.0)*r12*x15400);
evalcond[1]=(((x15399*x15406))+(((-1.0)*cj5*r20*x15411)));
evalcond[2]=((((-1.0)*x15403))+x15407+((cj3*r12*x15399)));
evalcond[3]=(x15415+(((-1.0)*r12*sj3*x15411)));
evalcond[4]=((1.0)+((x15399*x15409))+(((-1.0)*cj5*r00*x15411)));
evalcond[5]=((((-1.0)*x15405*x15413))+((sj3*x15408))+((r01*x15404))+((x15409*x15414)));
evalcond[6]=(((r01*x15405))+(((-1.0)*x15409*x15416))+((x15404*x15413))+((cj3*x15408)));
evalcond[7]=((((-1.0)*x15405*x15412))+((sj3*x15410))+x15415+((x15406*x15414))+((r21*x15404)));
evalcond[8]=(((cj3*x15410))+(((-1.0)*x15407))+(((-1.0)*x15406*x15416))+((x15404*x15412))+x15403+((r21*x15405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15417=cj5*cj5;
IkReal x15418=(cj3*r20);
IkReal x15419=(r21*sj3);
IkReal x15420=((1.0)*cj3);
IkReal x15421=(r01*r21);
IkReal x15422=(r01*sj3);
IkReal x15423=(r00*sj5);
IkReal x15424=(cj5*r01*sj5);
IkReal x15425=((1.0)*x15417);
CheckValue<IkReal> x15426=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15420))+((x15418*x15424))+(((-1.0)*r00*x15418*x15425))+(((-1.0)*x15420*x15421))+((cj3*cj5*r21*x15423))+((cj3*x15417*x15421)))),-1);
if(!x15426.valid){
continue;
}
CheckValue<IkReal> x15427 = IKatan2WithCheck(IkReal((((cj5*r22*x15422))+((r22*sj3*x15423)))),IkReal(((((-1.0)*r20*x15422*x15425))+((r00*x15419))+((x15419*x15424))+(((-1.0)*r00*x15419*x15425))+(((-1.0)*cj5*r20*sj3*x15423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15426.value)))+(x15427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15428=IKsin(j4);
IkReal x15429=IKcos(j4);
IkReal x15430=(cj2*sj1);
IkReal x15431=(cj1*sj2);
IkReal x15432=(r11*sj5);
IkReal x15433=(cj5*r10);
IkReal x15434=(sj1*sj2);
IkReal x15435=(cj5*r01);
IkReal x15436=(cj5*r00);
IkReal x15437=(cj3*sj5);
IkReal x15438=(r21*sj5);
IkReal x15439=(cj1*cj2);
IkReal x15440=(cj5*sj3);
IkReal x15441=(sj3*sj5);
IkReal x15442=(r01*sj5);
IkReal x15443=(cj3*cj5);
IkReal x15444=(cj5*r20);
IkReal x15445=((1.0)*x15429);
IkReal x15446=((1.0)*x15428);
IkReal x15447=(cj3*x15429);
IkReal x15448=(sj3*x15429);
IkReal x15449=(cj3*x15428);
IkReal x15450=(x15430+x15431);
evalcond[0]=((((-1.0)*x15444*x15446))+(((-1.0)*r22*x15445))+((x15428*x15438)));
evalcond[1]=((((-1.0)*x15433*x15446))+(((-1.0)*r12*x15445))+((x15428*x15432)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15445))+((x15428*x15442))+(((-1.0)*x15436*x15446)));
evalcond[3]=(((r00*x15441))+((sj3*x15435))+(((-1.0)*cj3*x15436*x15445))+((r02*x15449))+((r01*x15429*x15437)));
evalcond[4]=((((-1.0)*r02*sj3*x15446))+((x15436*x15448))+((cj3*x15435))+(((-1.0)*r01*x15441*x15445))+((r00*x15437)));
evalcond[5]=(((r20*x15441))+(((-1.0)*r20*x15443*x15445))+((r22*x15449))+((r21*x15429*x15437))+x15450+((r21*x15440)));
evalcond[6]=(((x15432*x15447))+((r11*x15440))+((r10*x15441))+(((-1.0)*cj3*x15433*x15445))+((r12*x15449))+(((-1.0)*x15434))+x15439);
evalcond[7]=(((x15433*x15448))+((r10*x15437))+((r11*x15443))+x15450+(((-1.0)*r12*sj3*x15446))+(((-1.0)*sj3*x15432*x15445)));
evalcond[8]=(((r20*x15429*x15440))+(((-1.0)*r22*sj3*x15446))+(((-1.0)*sj3*x15438*x15445))+(((-1.0)*x15439))+x15434+((r20*x15437))+((r21*x15443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15451=((1.0)*cj5);
CheckValue<IkReal> x15452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15451))+(((-1.0)*r20*sj5)))),-1);
if(!x15452.valid){
continue;
}
CheckValue<IkReal> x15453 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15452.value)))+(x15453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15454=IKsin(j4);
IkReal x15455=IKcos(j4);
IkReal x15456=(cj2*sj1);
IkReal x15457=(cj1*sj2);
IkReal x15458=(r11*sj5);
IkReal x15459=(cj5*r10);
IkReal x15460=(sj1*sj2);
IkReal x15461=(cj5*r01);
IkReal x15462=(cj5*r00);
IkReal x15463=(cj3*sj5);
IkReal x15464=(r21*sj5);
IkReal x15465=(cj1*cj2);
IkReal x15466=(cj5*sj3);
IkReal x15467=(sj3*sj5);
IkReal x15468=(r01*sj5);
IkReal x15469=(cj3*cj5);
IkReal x15470=(cj5*r20);
IkReal x15471=((1.0)*x15455);
IkReal x15472=((1.0)*x15454);
IkReal x15473=(cj3*x15455);
IkReal x15474=(sj3*x15455);
IkReal x15475=(cj3*x15454);
IkReal x15476=(x15456+x15457);
evalcond[0]=((((-1.0)*r22*x15471))+(((-1.0)*x15470*x15472))+((x15454*x15464)));
evalcond[1]=((((-1.0)*x15459*x15472))+((x15454*x15458))+(((-1.0)*r12*x15471)));
evalcond[2]=((1.0)+((x15454*x15468))+(((-1.0)*x15462*x15472))+(((-1.0)*r02*x15471)));
evalcond[3]=(((r02*x15475))+((r01*x15455*x15463))+((r00*x15467))+((sj3*x15461))+(((-1.0)*cj3*x15462*x15471)));
evalcond[4]=(((x15462*x15474))+(((-1.0)*r01*x15467*x15471))+((r00*x15463))+((cj3*x15461))+(((-1.0)*r02*sj3*x15472)));
evalcond[5]=(((r22*x15475))+(((-1.0)*r20*x15469*x15471))+((r21*x15466))+x15476+((r21*x15455*x15463))+((r20*x15467)));
evalcond[6]=((((-1.0)*cj3*x15459*x15471))+((x15458*x15473))+(((-1.0)*x15460))+((r12*x15475))+x15465+((r11*x15466))+((r10*x15467)));
evalcond[7]=(((x15459*x15474))+(((-1.0)*r12*sj3*x15472))+(((-1.0)*sj3*x15458*x15471))+x15476+((r11*x15469))+((r10*x15463)));
evalcond[8]=((((-1.0)*x15465))+((r21*x15469))+((r20*x15455*x15466))+x15460+(((-1.0)*sj3*x15464*x15471))+((r20*x15463))+(((-1.0)*r22*sj3*x15472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15477 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15477.valid){
continue;
}
CheckValue<IkReal> x15478=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15477.value)+(((1.5707963267949)*(x15478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15479=IKsin(j4);
IkReal x15480=IKcos(j4);
IkReal x15481=(cj2*sj1);
IkReal x15482=(cj1*sj2);
IkReal x15483=(r11*sj5);
IkReal x15484=(cj5*r10);
IkReal x15485=(sj1*sj2);
IkReal x15486=(cj5*r01);
IkReal x15487=(cj5*r00);
IkReal x15488=(cj3*sj5);
IkReal x15489=(r21*sj5);
IkReal x15490=(cj1*cj2);
IkReal x15491=(cj5*sj3);
IkReal x15492=(sj3*sj5);
IkReal x15493=(r01*sj5);
IkReal x15494=(cj3*cj5);
IkReal x15495=(cj5*r20);
IkReal x15496=((1.0)*x15480);
IkReal x15497=((1.0)*x15479);
IkReal x15498=(cj3*x15480);
IkReal x15499=(sj3*x15480);
IkReal x15500=(cj3*x15479);
IkReal x15501=(x15481+x15482);
evalcond[0]=(((x15479*x15489))+(((-1.0)*x15495*x15497))+(((-1.0)*r22*x15496)));
evalcond[1]=((((-1.0)*x15484*x15497))+(((-1.0)*r12*x15496))+((x15479*x15483)));
evalcond[2]=((1.0)+((x15479*x15493))+(((-1.0)*x15487*x15497))+(((-1.0)*r02*x15496)));
evalcond[3]=(((sj3*x15486))+((r00*x15492))+(((-1.0)*cj3*x15487*x15496))+((r02*x15500))+((r01*x15480*x15488)));
evalcond[4]=(((x15487*x15499))+(((-1.0)*r02*sj3*x15497))+((cj3*x15486))+(((-1.0)*r01*x15492*x15496))+((r00*x15488)));
evalcond[5]=(((r22*x15500))+((r20*x15492))+((r21*x15480*x15488))+x15501+((r21*x15491))+(((-1.0)*r20*x15494*x15496)));
evalcond[6]=(((r10*x15492))+((r11*x15491))+(((-1.0)*cj3*x15484*x15496))+((r12*x15500))+x15490+(((-1.0)*x15485))+((x15483*x15498)));
evalcond[7]=(((x15484*x15499))+((r10*x15488))+((r11*x15494))+(((-1.0)*r12*sj3*x15497))+(((-1.0)*sj3*x15483*x15496))+x15501);
evalcond[8]=(((r20*x15480*x15491))+(((-1.0)*sj3*x15489*x15496))+(((-1.0)*r22*sj3*x15497))+x15485+((r21*x15494))+((r20*x15488))+(((-1.0)*x15490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15502=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15502);
rxp1_1=(px*r21);
rxp1_2=(r11*x15502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15503=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15503);
rxp1_1=(px*r21);
rxp1_2=(r11*x15503);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15504=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15504)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15504)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15505=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15505);
rxp1_1=(px*r21);
rxp1_2=(r11*x15505);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15506=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15506);
rxp1_1=(px*r21);
rxp1_2=(r11*x15506);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15507=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15507);
rxp1_1=(px*r21);
rxp1_2=(r11*x15507);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15508=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15508);
rxp1_1=(px*r21);
rxp1_2=(r11*x15508);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15511=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15511.valid){
continue;
}
IkReal x15509=x15511.value;
IkReal x15510=(sj0*x15509);
cj4array[0]=(((cj1*sj2*x15510))+((cj2*sj1*x15510)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15512=IKsin(j4);
IkReal x15513=IKcos(j4);
IkReal x15514=(cj5*r20);
IkReal x15515=(r21*sj5);
IkReal x15516=((1.0)*x15512);
IkReal x15517=((1.0)*x15513);
evalcond[0]=((-1.0)*r02*x15512);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15517)));
evalcond[2]=((((-1.0)*x15514*x15516))+((x15512*x15515)));
evalcond[3]=(((r11*sj5*x15512))+(((-1.0)*cj5*r10*x15516)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15515*x15517))+((x15513*x15514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15519=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15519.valid){
continue;
}
IkReal x15518=x15519.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15518))+((cj1*cj2*x15518)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15520=IKsin(j4);
IkReal x15521=IKcos(j4);
IkReal x15522=(r11*sj5);
IkReal x15523=((1.0)*sj0);
IkReal x15524=((1.0)*x15521);
IkReal x15525=((1.0)*cj5*x15520);
evalcond[0]=((-1.0)*r02*x15520);
evalcond[1]=((((-1.0)*x15523))+(((-1.0)*r02*x15524)));
evalcond[2]=((((-1.0)*r20*x15525))+((r21*sj5*x15520)));
evalcond[3]=(((x15520*x15522))+(((-1.0)*r10*x15525)));
evalcond[4]=((((-1.0)*cj2*sj1*x15523))+((cj5*r10*x15521))+(((-1.0)*x15522*x15524))+(((-1.0)*cj1*sj2*x15523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15526=IKPowWithIntegerCheck(r02,-1);
if(!x15526.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15526.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15527=IKsin(j4);
IkReal x15528=IKcos(j4);
IkReal x15529=((1.0)*sj0);
IkReal x15530=(cj5*x15528);
IkReal x15531=(sj5*x15527);
IkReal x15532=((1.0)*sj5*x15528);
IkReal x15533=((1.0)*cj5*x15527);
evalcond[0]=((-1.0)*r02*x15527);
evalcond[1]=(((r21*x15531))+(((-1.0)*r20*x15533)));
evalcond[2]=(((r11*x15531))+(((-1.0)*r10*x15533)));
evalcond[3]=((((-1.0)*r21*x15532))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15530)));
evalcond[4]=(((r10*x15530))+(((-1.0)*cj2*sj1*x15529))+(((-1.0)*r11*x15532))+(((-1.0)*cj1*sj2*x15529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15534=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15534);
rxp1_1=(px*r21);
rxp1_2=(r11*x15534);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15535=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15535);
rxp1_1=(px*r21);
rxp1_2=(r11*x15535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15536=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15536);
rxp1_1=(px*r21);
rxp1_2=(r11*x15536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15539=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15539.valid){
continue;
}
IkReal x15537=x15539.value;
IkReal x15538=(sj0*x15537);
cj4array[0]=(((cj1*sj2*x15538))+((cj2*sj1*x15538)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15540=IKsin(j4);
IkReal x15541=IKcos(j4);
IkReal x15542=(r21*sj5);
IkReal x15543=((1.0)*cj5*r20);
evalcond[0]=(r02*x15540);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15541)));
evalcond[2]=((((-1.0)*x15540*x15543))+((x15540*x15542)));
evalcond[3]=(((r11*sj5*x15540))+(((-1.0)*cj5*r10*x15540)));
evalcond[4]=(((x15541*x15542))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15541*x15543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15545=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15545.valid){
continue;
}
IkReal x15544=x15545.value;
cj4array[0]=(((cj1*cj2*x15544))+(((-1.0)*sj1*sj2*x15544)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15546=IKsin(j4);
IkReal x15547=IKcos(j4);
IkReal x15548=((1.0)*sj0);
IkReal x15549=((1.0)*cj5);
IkReal x15550=(sj5*x15546);
evalcond[0]=(r02*x15546);
evalcond[1]=((((-1.0)*x15548))+(((-1.0)*r02*x15547)));
evalcond[2]=((((-1.0)*r20*x15546*x15549))+((r21*x15550)));
evalcond[3]=(((r11*x15550))+(((-1.0)*r10*x15546*x15549)));
evalcond[4]=((((-1.0)*cj1*sj2*x15548))+(((-1.0)*r10*x15547*x15549))+(((-1.0)*cj2*sj1*x15548))+((r11*sj5*x15547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15551=IKPowWithIntegerCheck(r02,-1);
if(!x15551.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15551.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15552=IKsin(j4);
IkReal x15553=IKcos(j4);
IkReal x15554=((1.0)*cj1);
IkReal x15555=(r21*sj5);
IkReal x15556=((1.0)*cj5);
IkReal x15557=(r11*sj5);
evalcond[0]=(r02*x15552);
evalcond[1]=(((x15552*x15555))+(((-1.0)*r20*x15552*x15556)));
evalcond[2]=(((x15552*x15557))+(((-1.0)*r10*x15552*x15556)));
evalcond[3]=((((-1.0)*cj2*x15554))+((sj1*sj2))+((x15553*x15555))+(((-1.0)*r20*x15553*x15556)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15554))+((x15553*x15557))+(((-1.0)*r10*x15553*x15556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15558 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15558.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15558.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15559 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15559.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15559.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15560=((-1.0)*r10);
CheckValue<IkReal> x15562 = IKatan2WithCheck(IkReal(x15560),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15562.valid){
continue;
}
IkReal x15561=((-1.0)*(x15562.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15560);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15561;
IkReal gconst66=x15561;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15563=((-1.0)*r10);
CheckValue<IkReal> x15565 = IKatan2WithCheck(IkReal(x15563),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15565.valid){
continue;
}
IkReal x15564=((-1.0)*(x15565.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15563);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15564;
IkReal gconst66=x15564;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15566=((-1.0)*r10);
CheckValue<IkReal> x15568 = IKatan2WithCheck(IkReal(x15566),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15568.valid){
continue;
}
IkReal x15567=((-1.0)*(x15568.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15566);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15567;
IkReal gconst66=x15567;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15569=((1.0)*gconst67);
IkReal x15570=(cj1*cj2);
IkReal x15571=((1.0)*sj1*sj2);
CheckValue<IkReal> x15572=IKPowWithIntegerCheck(cj3,-1);
if(!x15572.valid){
continue;
}
CheckValue<IkReal> x15573=IKPowWithIntegerCheck(r02,-1);
if(!x15573.valid){
continue;
}
CheckValue<IkReal> x15574=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15569))),-1);
if(!x15574.valid){
continue;
}
if( IKabs(((x15572.value)*(x15573.value)*((((cj0*x15570))+(((-1.0)*cj0*x15571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15574.value)*(((((-1.0)*cj3*r20*x15569))+x15570+(((-1.0)*x15571))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15572.value)*(x15573.value)*((((cj0*x15570))+(((-1.0)*cj0*x15571))))))+IKsqr(((x15574.value)*(((((-1.0)*cj3*r20*x15569))+x15570+(((-1.0)*x15571))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15572.value)*(x15573.value)*((((cj0*x15570))+(((-1.0)*cj0*x15571))))), ((x15574.value)*(((((-1.0)*cj3*r20*x15569))+x15570+(((-1.0)*x15571))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15575=IKsin(j4);
IkReal x15576=IKcos(j4);
IkReal x15577=(sj1*sj2);
IkReal x15578=(gconst68*sj3);
IkReal x15579=(gconst67*r11);
IkReal x15580=(gconst67*sj3);
IkReal x15581=((1.0)*gconst68);
IkReal x15582=(cj2*sj1);
IkReal x15583=((1.0)*cj0);
IkReal x15584=((1.0)*sj0);
IkReal x15585=(cj3*gconst67);
IkReal x15586=(cj3*gconst68);
IkReal x15587=(cj1*sj2);
IkReal x15588=(gconst67*r21);
IkReal x15589=((1.0)*cj1*cj2);
IkReal x15590=(cj3*x15576);
IkReal x15591=((1.0)*x15576);
IkReal x15592=(r02*x15575);
evalcond[0]=((((-1.0)*x15584))+(((-1.0)*r02*x15591)));
evalcond[1]=(((x15575*x15588))+(((-1.0)*r20*x15575*x15581)));
evalcond[2]=(cj0+(((-1.0)*r10*x15575*x15581))+((x15575*x15579)));
evalcond[3]=(((cj0*x15577))+(((-1.0)*cj1*cj2*x15583))+((cj3*x15592)));
evalcond[4]=((((-1.0)*x15582*x15583))+(((-1.0)*x15583*x15587))+(((-1.0)*sj3*x15592)));
evalcond[5]=(((r21*x15576*x15585))+((r21*x15578))+(((-1.0)*r20*x15581*x15590))+x15582+x15587+((r20*x15580)));
evalcond[6]=((((-1.0)*x15589))+(((-1.0)*r21*x15580*x15591))+((r20*x15576*x15578))+x15577+((r20*x15585))+((r21*x15586)));
evalcond[7]=(((sj0*x15577))+(((-1.0)*r10*x15581*x15590))+(((-1.0)*cj1*cj2*x15584))+((r10*x15580))+((r11*x15578))+((x15579*x15590)));
evalcond[8]=(((r11*x15586))+((r10*x15585))+(((-1.0)*x15582*x15584))+((r10*x15576*x15578))+(((-1.0)*sj3*x15579*x15591))+(((-1.0)*x15584*x15587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15595=IKPowWithIntegerCheck(r02,-1);
if(!x15595.valid){
continue;
}
IkReal x15593=x15595.value;
IkReal x15594=((1.0)*cj0);
CheckValue<IkReal> x15596=IKPowWithIntegerCheck(sj3,-1);
if(!x15596.valid){
continue;
}
if( IKabs((x15593*(x15596.value)*(((((-1.0)*cj1*sj2*x15594))+(((-1.0)*cj2*sj1*x15594)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15593)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15593*(x15596.value)*(((((-1.0)*cj1*sj2*x15594))+(((-1.0)*cj2*sj1*x15594))))))+IKsqr(((-1.0)*sj0*x15593))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15593*(x15596.value)*(((((-1.0)*cj1*sj2*x15594))+(((-1.0)*cj2*sj1*x15594))))), ((-1.0)*sj0*x15593));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15597=IKsin(j4);
IkReal x15598=IKcos(j4);
IkReal x15599=(sj1*sj2);
IkReal x15600=(gconst68*sj3);
IkReal x15601=(gconst67*r11);
IkReal x15602=(gconst67*sj3);
IkReal x15603=((1.0)*gconst68);
IkReal x15604=(cj2*sj1);
IkReal x15605=((1.0)*cj0);
IkReal x15606=((1.0)*sj0);
IkReal x15607=(cj3*gconst67);
IkReal x15608=(cj3*gconst68);
IkReal x15609=(cj1*sj2);
IkReal x15610=(gconst67*r21);
IkReal x15611=((1.0)*cj1*cj2);
IkReal x15612=(cj3*x15598);
IkReal x15613=((1.0)*x15598);
IkReal x15614=(r02*x15597);
evalcond[0]=((((-1.0)*x15606))+(((-1.0)*r02*x15613)));
evalcond[1]=(((x15597*x15610))+(((-1.0)*r20*x15597*x15603)));
evalcond[2]=(cj0+(((-1.0)*r10*x15597*x15603))+((x15597*x15601)));
evalcond[3]=(((cj0*x15599))+((cj3*x15614))+(((-1.0)*cj1*cj2*x15605)));
evalcond[4]=((((-1.0)*x15604*x15605))+(((-1.0)*x15605*x15609))+(((-1.0)*sj3*x15614)));
evalcond[5]=(x15604+x15609+((r20*x15602))+((r21*x15598*x15607))+((r21*x15600))+(((-1.0)*r20*x15603*x15612)));
evalcond[6]=(((r20*x15598*x15600))+(((-1.0)*r21*x15602*x15613))+(((-1.0)*x15611))+((r20*x15607))+x15599+((r21*x15608)));
evalcond[7]=(((sj0*x15599))+(((-1.0)*cj1*cj2*x15606))+((r10*x15602))+(((-1.0)*r10*x15603*x15612))+((x15601*x15612))+((r11*x15600)));
evalcond[8]=((((-1.0)*x15606*x15609))+(((-1.0)*sj3*x15601*x15613))+((r10*x15598*x15600))+((r10*x15607))+(((-1.0)*x15604*x15606))+((r11*x15608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15616=IKPowWithIntegerCheck(r02,-1);
if(!x15616.valid){
continue;
}
IkReal x15615=x15616.value;
CheckValue<IkReal> x15617=IKPowWithIntegerCheck(cj3,-1);
if(!x15617.valid){
continue;
}
if( IKabs((x15615*(x15617.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15615)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15615*(x15617.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15615))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15615*(x15617.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15615));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15618=IKsin(j4);
IkReal x15619=IKcos(j4);
IkReal x15620=(sj1*sj2);
IkReal x15621=(gconst68*sj3);
IkReal x15622=(gconst67*r11);
IkReal x15623=(gconst67*sj3);
IkReal x15624=((1.0)*gconst68);
IkReal x15625=(cj2*sj1);
IkReal x15626=((1.0)*cj0);
IkReal x15627=((1.0)*sj0);
IkReal x15628=(cj3*gconst67);
IkReal x15629=(cj3*gconst68);
IkReal x15630=(cj1*sj2);
IkReal x15631=(gconst67*r21);
IkReal x15632=((1.0)*cj1*cj2);
IkReal x15633=(cj3*x15619);
IkReal x15634=((1.0)*x15619);
IkReal x15635=(r02*x15618);
evalcond[0]=((((-1.0)*x15627))+(((-1.0)*r02*x15634)));
evalcond[1]=(((x15618*x15631))+(((-1.0)*r20*x15618*x15624)));
evalcond[2]=(cj0+((x15618*x15622))+(((-1.0)*r10*x15618*x15624)));
evalcond[3]=(((cj3*x15635))+((cj0*x15620))+(((-1.0)*cj1*cj2*x15626)));
evalcond[4]=((((-1.0)*sj3*x15635))+(((-1.0)*x15625*x15626))+(((-1.0)*x15626*x15630)));
evalcond[5]=(((r21*x15621))+((r21*x15619*x15628))+x15625+x15630+((r20*x15623))+(((-1.0)*r20*x15624*x15633)));
evalcond[6]=(((r21*x15629))+x15620+((r20*x15628))+(((-1.0)*x15632))+((r20*x15619*x15621))+(((-1.0)*r21*x15623*x15634)));
evalcond[7]=((((-1.0)*r10*x15624*x15633))+((sj0*x15620))+((x15622*x15633))+(((-1.0)*cj1*cj2*x15627))+((r11*x15621))+((r10*x15623)));
evalcond[8]=((((-1.0)*sj3*x15622*x15634))+((r10*x15619*x15621))+(((-1.0)*x15627*x15630))+(((-1.0)*x15625*x15627))+((r11*x15629))+((r10*x15628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15636=((-1.0)*r10);
CheckValue<IkReal> x15637 = IKatan2WithCheck(IkReal(x15636),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15637.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15637.value))));
IkReal gconst70=x15636;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15638 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15638.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15638.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15639=((-1.0)*r10);
IkReal x15640=((-1.0)*r11);
CheckValue<IkReal> x15642 = IKatan2WithCheck(IkReal(x15639),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15642.valid){
continue;
}
IkReal x15641=((1.0)*(x15642.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15639);
rxp1_1=(px*r21);
rxp1_2=(px*x15640);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15641)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15641)));
IkReal gconst70=x15639;
IkReal gconst71=x15640;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15643=((-1.0)*r10);
IkReal x15644=((-1.0)*r11);
CheckValue<IkReal> x15646 = IKatan2WithCheck(IkReal(x15643),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15646.valid){
continue;
}
IkReal x15645=((1.0)*(x15646.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15643);
rxp1_1=(px*r21);
rxp1_2=(px*x15644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15645)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15645)));
IkReal gconst70=x15643;
IkReal gconst71=x15644;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15647=((-1.0)*r10);
IkReal x15648=((-1.0)*r11);
CheckValue<IkReal> x15650 = IKatan2WithCheck(IkReal(x15647),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15650.valid){
continue;
}
IkReal x15649=((1.0)*(x15650.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15647);
rxp1_1=(px*r21);
rxp1_2=(px*x15648);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15649)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15649)));
IkReal gconst70=x15647;
IkReal gconst71=x15648;
IkReal x15651=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15651))+(((-1.0)*r11*r20*x15651)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15652=((1.0)*r21);
IkReal x15653=(cj1*cj2);
IkReal x15654=((1.0)*sj1*sj2);
CheckValue<IkReal> x15655=IKPowWithIntegerCheck(cj3,-1);
if(!x15655.valid){
continue;
}
CheckValue<IkReal> x15656=IKPowWithIntegerCheck(r02,-1);
if(!x15656.valid){
continue;
}
CheckValue<IkReal> x15657=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15652))+((gconst71*r20*sj3))),-1);
if(!x15657.valid){
continue;
}
if( IKabs(((x15655.value)*(x15656.value)*(((((-1.0)*cj0*x15654))+((cj0*x15653)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15657.value)*((x15653+(((-1.0)*x15654))+(((-1.0)*cj3*gconst71*x15652))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15655.value)*(x15656.value)*(((((-1.0)*cj0*x15654))+((cj0*x15653))))))+IKsqr(((x15657.value)*((x15653+(((-1.0)*x15654))+(((-1.0)*cj3*gconst71*x15652))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15655.value)*(x15656.value)*(((((-1.0)*cj0*x15654))+((cj0*x15653))))), ((x15657.value)*((x15653+(((-1.0)*x15654))+(((-1.0)*cj3*gconst71*x15652))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15658=IKsin(j4);
IkReal x15659=IKcos(j4);
IkReal x15660=(cj3*gconst70);
IkReal x15661=(sj1*sj2);
IkReal x15662=((1.0)*gconst71);
IkReal x15663=(gconst71*sj3);
IkReal x15664=(cj2*sj1);
IkReal x15665=((1.0)*sj0);
IkReal x15666=(gconst70*r11);
IkReal x15667=(gconst70*sj3);
IkReal x15668=((1.0)*cj0);
IkReal x15669=(cj3*gconst71);
IkReal x15670=(cj1*sj2);
IkReal x15671=((1.0)*cj1*cj2);
IkReal x15672=(r21*x15659);
IkReal x15673=(r10*x15659);
IkReal x15674=((1.0)*x15659);
IkReal x15675=(r02*x15658);
IkReal x15676=(r20*x15659);
evalcond[0]=((((-1.0)*x15665))+(((-1.0)*r02*x15674)));
evalcond[1]=(((gconst70*r21*x15658))+(((-1.0)*r20*x15658*x15662)));
evalcond[2]=(cj0+((x15658*x15666))+(((-1.0)*r10*x15658*x15662)));
evalcond[3]=(((cj3*x15675))+(((-1.0)*cj1*cj2*x15668))+((cj0*x15661)));
evalcond[4]=((((-1.0)*x15664*x15668))+(((-1.0)*sj3*x15675))+(((-1.0)*x15668*x15670)));
evalcond[5]=(((x15660*x15672))+((r20*x15667))+x15664+x15670+((r21*x15663))+(((-1.0)*cj3*x15662*x15676)));
evalcond[6]=((((-1.0)*x15667*x15672))+(((-1.0)*x15671))+((x15663*x15676))+((r20*x15660))+x15661+((r21*x15669)));
evalcond[7]=(((r11*x15659*x15660))+((r10*x15667))+((r11*x15663))+((sj0*x15661))+(((-1.0)*cj1*cj2*x15665))+(((-1.0)*cj3*x15662*x15673)));
evalcond[8]=((((-1.0)*sj3*x15666*x15674))+(((-1.0)*x15665*x15670))+((r10*x15660))+((x15663*x15673))+(((-1.0)*x15664*x15665))+((r11*x15669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15679=IKPowWithIntegerCheck(r02,-1);
if(!x15679.valid){
continue;
}
IkReal x15677=x15679.value;
IkReal x15678=((1.0)*cj0);
CheckValue<IkReal> x15680=IKPowWithIntegerCheck(sj3,-1);
if(!x15680.valid){
continue;
}
if( IKabs((x15677*(x15680.value)*(((((-1.0)*cj1*sj2*x15678))+(((-1.0)*cj2*sj1*x15678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15677)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15677*(x15680.value)*(((((-1.0)*cj1*sj2*x15678))+(((-1.0)*cj2*sj1*x15678))))))+IKsqr(((-1.0)*sj0*x15677))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15677*(x15680.value)*(((((-1.0)*cj1*sj2*x15678))+(((-1.0)*cj2*sj1*x15678))))), ((-1.0)*sj0*x15677));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15681=IKsin(j4);
IkReal x15682=IKcos(j4);
IkReal x15683=(cj3*gconst70);
IkReal x15684=(sj1*sj2);
IkReal x15685=((1.0)*gconst71);
IkReal x15686=(gconst71*sj3);
IkReal x15687=(cj2*sj1);
IkReal x15688=((1.0)*sj0);
IkReal x15689=(gconst70*r11);
IkReal x15690=(gconst70*sj3);
IkReal x15691=((1.0)*cj0);
IkReal x15692=(cj3*gconst71);
IkReal x15693=(cj1*sj2);
IkReal x15694=((1.0)*cj1*cj2);
IkReal x15695=(r21*x15682);
IkReal x15696=(r10*x15682);
IkReal x15697=((1.0)*x15682);
IkReal x15698=(r02*x15681);
IkReal x15699=(r20*x15682);
evalcond[0]=((((-1.0)*r02*x15697))+(((-1.0)*x15688)));
evalcond[1]=(((gconst70*r21*x15681))+(((-1.0)*r20*x15681*x15685)));
evalcond[2]=(cj0+((x15681*x15689))+(((-1.0)*r10*x15681*x15685)));
evalcond[3]=(((cj3*x15698))+((cj0*x15684))+(((-1.0)*cj1*cj2*x15691)));
evalcond[4]=((((-1.0)*x15687*x15691))+(((-1.0)*x15691*x15693))+(((-1.0)*sj3*x15698)));
evalcond[5]=(((x15683*x15695))+(((-1.0)*cj3*x15685*x15699))+((r20*x15690))+x15687+x15693+((r21*x15686)));
evalcond[6]=(((r20*x15683))+(((-1.0)*x15694))+((x15686*x15699))+((r21*x15692))+x15684+(((-1.0)*x15690*x15695)));
evalcond[7]=(((r10*x15690))+(((-1.0)*cj3*x15685*x15696))+((r11*x15682*x15683))+((r11*x15686))+((sj0*x15684))+(((-1.0)*cj1*cj2*x15688)));
evalcond[8]=(((r10*x15683))+((x15686*x15696))+((r11*x15692))+(((-1.0)*x15687*x15688))+(((-1.0)*x15688*x15693))+(((-1.0)*sj3*x15689*x15697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15701=IKPowWithIntegerCheck(r02,-1);
if(!x15701.valid){
continue;
}
IkReal x15700=x15701.value;
CheckValue<IkReal> x15702=IKPowWithIntegerCheck(cj3,-1);
if(!x15702.valid){
continue;
}
if( IKabs((x15700*(x15702.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15700)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15700*(x15702.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15700))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15700*(x15702.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15700));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15703=IKsin(j4);
IkReal x15704=IKcos(j4);
IkReal x15705=(cj3*gconst70);
IkReal x15706=(sj1*sj2);
IkReal x15707=((1.0)*gconst71);
IkReal x15708=(gconst71*sj3);
IkReal x15709=(cj2*sj1);
IkReal x15710=((1.0)*sj0);
IkReal x15711=(gconst70*r11);
IkReal x15712=(gconst70*sj3);
IkReal x15713=((1.0)*cj0);
IkReal x15714=(cj3*gconst71);
IkReal x15715=(cj1*sj2);
IkReal x15716=((1.0)*cj1*cj2);
IkReal x15717=(r21*x15704);
IkReal x15718=(r10*x15704);
IkReal x15719=((1.0)*x15704);
IkReal x15720=(r02*x15703);
IkReal x15721=(r20*x15704);
evalcond[0]=((((-1.0)*x15710))+(((-1.0)*r02*x15719)));
evalcond[1]=((((-1.0)*r20*x15703*x15707))+((gconst70*r21*x15703)));
evalcond[2]=((((-1.0)*r10*x15703*x15707))+cj0+((x15703*x15711)));
evalcond[3]=(((cj0*x15706))+(((-1.0)*cj1*cj2*x15713))+((cj3*x15720)));
evalcond[4]=((((-1.0)*sj3*x15720))+(((-1.0)*x15713*x15715))+(((-1.0)*x15709*x15713)));
evalcond[5]=(((r20*x15712))+(((-1.0)*cj3*x15707*x15721))+x15709+x15715+((x15705*x15717))+((r21*x15708)));
evalcond[6]=((((-1.0)*x15716))+((x15708*x15721))+((r20*x15705))+((r21*x15714))+x15706+(((-1.0)*x15712*x15717)));
evalcond[7]=(((r11*x15708))+((sj0*x15706))+(((-1.0)*cj3*x15707*x15718))+(((-1.0)*cj1*cj2*x15710))+((r11*x15704*x15705))+((r10*x15712)));
evalcond[8]=(((x15708*x15718))+(((-1.0)*x15710*x15715))+(((-1.0)*x15709*x15710))+(((-1.0)*sj3*x15711*x15719))+((r10*x15705))+((r11*x15714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15723=IKPowWithIntegerCheck(r02,-1);
if(!x15723.valid){
continue;
}
IkReal x15722=x15723.value;
CheckValue<IkReal> x15724=IKPowWithIntegerCheck(cj3,-1);
if(!x15724.valid){
continue;
}
if( IKabs((x15722*(x15724.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15722)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15722*(x15724.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15722))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15722*(x15724.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15722));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15725=IKsin(j4);
IkReal x15726=IKcos(j4);
IkReal x15727=(cj5*r10);
IkReal x15728=(sj1*sj2);
IkReal x15729=(cj5*sj3);
IkReal x15730=(r11*sj5);
IkReal x15731=(cj3*cj5);
IkReal x15732=(cj3*sj5);
IkReal x15733=(r21*sj5);
IkReal x15734=(cj2*sj1);
IkReal x15735=((1.0)*sj0);
IkReal x15736=((1.0)*cj0);
IkReal x15737=(sj3*sj5);
IkReal x15738=(cj1*sj2);
IkReal x15739=((1.0)*cj1*cj2);
IkReal x15740=((1.0)*x15725);
IkReal x15741=(r20*x15726);
IkReal x15742=(cj3*x15726);
IkReal x15743=(sj3*x15726);
evalcond[0]=((((-1.0)*r02*x15726))+(((-1.0)*x15735)));
evalcond[1]=(((x15725*x15733))+(((-1.0)*cj5*r20*x15740)));
evalcond[2]=((((-1.0)*x15727*x15740))+cj0+((x15725*x15730)));
evalcond[3]=(((cj3*r02*x15725))+((cj0*x15728))+(((-1.0)*cj1*cj2*x15736)));
evalcond[4]=((((-1.0)*r02*sj3*x15740))+(((-1.0)*x15736*x15738))+(((-1.0)*x15734*x15736)));
evalcond[5]=(((r20*x15737))+((r21*x15729))+x15734+x15738+(((-1.0)*x15731*x15741))+((r21*x15726*x15732)));
evalcond[6]=((((-1.0)*x15739))+((r20*x15732))+((r21*x15731))+x15728+((x15729*x15741))+(((-1.0)*x15733*x15743)));
evalcond[7]=(((r11*x15729))+(((-1.0)*cj1*cj2*x15735))+((sj0*x15728))+((x15730*x15742))+((r10*x15737))+(((-1.0)*x15727*x15742)));
evalcond[8]=(((r11*x15731))+((x15727*x15743))+(((-1.0)*x15735*x15738))+((r10*x15732))+(((-1.0)*x15730*x15743))+(((-1.0)*x15734*x15735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15744=((1.0)*sj3);
IkReal x15745=((1.0)*cj5);
CheckValue<IkReal> x15746=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15745))),-1);
if(!x15746.valid){
continue;
}
CheckValue<IkReal> x15747=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15745))+((cj3*r21*sj5))),-1);
if(!x15747.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15746.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15747.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15744))+(((-1.0)*cj5*r21*x15744)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15746.value)))+IKsqr(((x15747.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15744))+(((-1.0)*cj5*r21*x15744))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15746.value)), ((x15747.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15744))+(((-1.0)*cj5*r21*x15744))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15748=IKsin(j4);
IkReal x15749=IKcos(j4);
IkReal x15750=(cj5*r10);
IkReal x15751=(sj1*sj2);
IkReal x15752=(cj5*sj3);
IkReal x15753=(r11*sj5);
IkReal x15754=(cj3*cj5);
IkReal x15755=(cj3*sj5);
IkReal x15756=(r21*sj5);
IkReal x15757=(cj2*sj1);
IkReal x15758=((1.0)*sj0);
IkReal x15759=((1.0)*cj0);
IkReal x15760=(sj3*sj5);
IkReal x15761=(cj1*sj2);
IkReal x15762=((1.0)*cj1*cj2);
IkReal x15763=((1.0)*x15748);
IkReal x15764=(r20*x15749);
IkReal x15765=(cj3*x15749);
IkReal x15766=(sj3*x15749);
evalcond[0]=((((-1.0)*r02*x15749))+(((-1.0)*x15758)));
evalcond[1]=(((x15748*x15756))+(((-1.0)*cj5*r20*x15763)));
evalcond[2]=(cj0+(((-1.0)*x15750*x15763))+((x15748*x15753)));
evalcond[3]=(((cj3*r02*x15748))+((cj0*x15751))+(((-1.0)*cj1*cj2*x15759)));
evalcond[4]=((((-1.0)*x15759*x15761))+(((-1.0)*x15757*x15759))+(((-1.0)*r02*sj3*x15763)));
evalcond[5]=(((r21*x15752))+((r20*x15760))+x15761+x15757+(((-1.0)*x15754*x15764))+((r21*x15749*x15755)));
evalcond[6]=(((r21*x15754))+(((-1.0)*x15762))+((r20*x15755))+((x15752*x15764))+(((-1.0)*x15756*x15766))+x15751);
evalcond[7]=(((x15753*x15765))+((r10*x15760))+(((-1.0)*x15750*x15765))+((sj0*x15751))+((r11*x15752))+(((-1.0)*cj1*cj2*x15758)));
evalcond[8]=((((-1.0)*x15753*x15766))+(((-1.0)*x15757*x15758))+((r10*x15755))+((r11*x15754))+((x15750*x15766))+(((-1.0)*x15758*x15761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15767=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15767.valid){
continue;
}
CheckValue<IkReal> x15768=IKPowWithIntegerCheck(r02,-1);
if(!x15768.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15768.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15767.value)))+IKsqr(((-1.0)*sj0*(x15768.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15767.value)), ((-1.0)*sj0*(x15768.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15769=IKsin(j4);
IkReal x15770=IKcos(j4);
IkReal x15771=(cj5*r10);
IkReal x15772=(sj1*sj2);
IkReal x15773=(cj5*sj3);
IkReal x15774=(r11*sj5);
IkReal x15775=(cj3*cj5);
IkReal x15776=(cj3*sj5);
IkReal x15777=(r21*sj5);
IkReal x15778=(cj2*sj1);
IkReal x15779=((1.0)*sj0);
IkReal x15780=((1.0)*cj0);
IkReal x15781=(sj3*sj5);
IkReal x15782=(cj1*sj2);
IkReal x15783=((1.0)*cj1*cj2);
IkReal x15784=((1.0)*x15769);
IkReal x15785=(r20*x15770);
IkReal x15786=(cj3*x15770);
IkReal x15787=(sj3*x15770);
evalcond[0]=((((-1.0)*r02*x15770))+(((-1.0)*x15779)));
evalcond[1]=((((-1.0)*cj5*r20*x15784))+((x15769*x15777)));
evalcond[2]=(cj0+(((-1.0)*x15771*x15784))+((x15769*x15774)));
evalcond[3]=((((-1.0)*cj1*cj2*x15780))+((cj0*x15772))+((cj3*r02*x15769)));
evalcond[4]=((((-1.0)*r02*sj3*x15784))+(((-1.0)*x15778*x15780))+(((-1.0)*x15780*x15782)));
evalcond[5]=(((r21*x15773))+(((-1.0)*x15775*x15785))+x15782+x15778+((r21*x15770*x15776))+((r20*x15781)));
evalcond[6]=(((r21*x15775))+(((-1.0)*x15777*x15787))+((r20*x15776))+x15772+(((-1.0)*x15783))+((x15773*x15785)));
evalcond[7]=(((r10*x15781))+((sj0*x15772))+(((-1.0)*x15771*x15786))+(((-1.0)*cj1*cj2*x15779))+((r11*x15773))+((x15774*x15786)));
evalcond[8]=(((r10*x15776))+((x15771*x15787))+(((-1.0)*x15778*x15779))+(((-1.0)*x15779*x15782))+(((-1.0)*x15774*x15787))+((r11*x15775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15788=((1.0)*sj0);
IkReal x15789=((1.0)*cj0);
CheckValue<IkReal> x15790 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15789))+(((-1.0)*r12*x15788)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15788))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15790.valid){
continue;
}
CheckValue<IkReal> x15791=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15790.value)+(((1.5707963267949)*(x15791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15792=IKsin(j4);
IkReal x15793=IKcos(j4);
IkReal x15794=(r11*sj5);
IkReal x15795=(cj5*r10);
IkReal x15796=(sj1*sj2);
IkReal x15797=(cj5*sj3);
IkReal x15798=((1.0)*sj0);
IkReal x15799=(cj3*cj5);
IkReal x15800=(cj3*sj5);
IkReal x15801=(r21*sj5);
IkReal x15802=(cj2*sj1);
IkReal x15803=(sj3*sj5);
IkReal x15804=(r01*sj5);
IkReal x15805=((1.0)*cj0);
IkReal x15806=(cj1*sj2);
IkReal x15807=((1.0)*x15793);
IkReal x15808=((1.0)*x15792);
IkReal x15809=(cj3*x15793);
IkReal x15810=((1.0)*cj1*cj2);
IkReal x15811=(cj3*x15792);
evalcond[0]=((((-1.0)*cj5*r20*x15808))+((x15792*x15801))+(((-1.0)*r22*x15807)));
evalcond[1]=((((-1.0)*x15795*x15808))+(((-1.0)*r12*x15807))+cj0+((x15792*x15794)));
evalcond[2]=((((-1.0)*cj5*r00*x15808))+(((-1.0)*x15798))+(((-1.0)*r02*x15807))+((x15792*x15804)));
evalcond[3]=((((-1.0)*r20*x15799*x15807))+((r21*x15793*x15800))+((r22*x15811))+((r21*x15797))+x15806+x15802+((r20*x15803)));
evalcond[4]=((((-1.0)*x15810))+((r21*x15799))+((r20*x15793*x15797))+x15796+(((-1.0)*r22*sj3*x15808))+(((-1.0)*sj3*x15801*x15807))+((r20*x15800)));
evalcond[5]=(((r01*x15793*x15800))+((cj0*x15796))+((r02*x15811))+(((-1.0)*r00*x15799*x15807))+((r01*x15797))+((r00*x15803))+(((-1.0)*cj1*cj2*x15805)));
evalcond[6]=((((-1.0)*cj3*x15795*x15807))+((r10*x15803))+((r11*x15797))+((x15794*x15809))+((r12*x15811))+(((-1.0)*cj1*cj2*x15798))+((sj0*x15796)));
evalcond[7]=((((-1.0)*r01*x15803*x15807))+(((-1.0)*x15805*x15806))+(((-1.0)*r02*sj3*x15808))+((r01*x15799))+((r00*x15793*x15797))+(((-1.0)*x15802*x15805))+((r00*x15800)));
evalcond[8]=(((r10*x15800))+((r11*x15799))+(((-1.0)*x15798*x15802))+(((-1.0)*x15798*x15806))+(((-1.0)*sj3*x15794*x15807))+((sj3*x15793*x15795))+(((-1.0)*r12*sj3*x15808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15812=((1.0)*cj5);
CheckValue<IkReal> x15813 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15812))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15813.valid){
continue;
}
CheckValue<IkReal> x15814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15812)))),-1);
if(!x15814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15813.value)+(((1.5707963267949)*(x15814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15815=IKsin(j4);
IkReal x15816=IKcos(j4);
IkReal x15817=(r11*sj5);
IkReal x15818=(cj5*r10);
IkReal x15819=(sj1*sj2);
IkReal x15820=(cj5*sj3);
IkReal x15821=((1.0)*sj0);
IkReal x15822=(cj3*cj5);
IkReal x15823=(cj3*sj5);
IkReal x15824=(r21*sj5);
IkReal x15825=(cj2*sj1);
IkReal x15826=(sj3*sj5);
IkReal x15827=(r01*sj5);
IkReal x15828=((1.0)*cj0);
IkReal x15829=(cj1*sj2);
IkReal x15830=((1.0)*x15816);
IkReal x15831=((1.0)*x15815);
IkReal x15832=(cj3*x15816);
IkReal x15833=((1.0)*cj1*cj2);
IkReal x15834=(cj3*x15815);
evalcond[0]=(((x15815*x15824))+(((-1.0)*r22*x15830))+(((-1.0)*cj5*r20*x15831)));
evalcond[1]=(cj0+(((-1.0)*x15818*x15831))+(((-1.0)*r12*x15830))+((x15815*x15817)));
evalcond[2]=(((x15815*x15827))+(((-1.0)*r02*x15830))+(((-1.0)*x15821))+(((-1.0)*cj5*r00*x15831)));
evalcond[3]=(((r20*x15826))+((r22*x15834))+((r21*x15816*x15823))+(((-1.0)*r20*x15822*x15830))+((r21*x15820))+x15825+x15829);
evalcond[4]=(((r20*x15823))+(((-1.0)*sj3*x15824*x15830))+(((-1.0)*r22*sj3*x15831))+((r21*x15822))+(((-1.0)*x15833))+((r20*x15816*x15820))+x15819);
evalcond[5]=(((r02*x15834))+(((-1.0)*r00*x15822*x15830))+((r01*x15820))+((r00*x15826))+((cj0*x15819))+(((-1.0)*cj1*cj2*x15828))+((r01*x15816*x15823)));
evalcond[6]=((((-1.0)*cj3*x15818*x15830))+((x15817*x15832))+((sj0*x15819))+((r12*x15834))+(((-1.0)*cj1*cj2*x15821))+((r10*x15826))+((r11*x15820)));
evalcond[7]=((((-1.0)*r02*sj3*x15831))+((r01*x15822))+((r00*x15816*x15820))+(((-1.0)*x15825*x15828))+((r00*x15823))+(((-1.0)*r01*x15826*x15830))+(((-1.0)*x15828*x15829)));
evalcond[8]=((((-1.0)*sj3*x15817*x15830))+(((-1.0)*x15821*x15825))+(((-1.0)*x15821*x15829))+((r10*x15823))+((sj3*x15816*x15818))+(((-1.0)*r12*sj3*x15831))+((r11*x15822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15835=((1.0)*cj5);
CheckValue<IkReal> x15836 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15836.valid){
continue;
}
CheckValue<IkReal> x15837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15835)))),-1);
if(!x15837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15836.value)+(((1.5707963267949)*(x15837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15838=IKsin(j4);
IkReal x15839=IKcos(j4);
IkReal x15840=(r11*sj5);
IkReal x15841=(cj5*r10);
IkReal x15842=(sj1*sj2);
IkReal x15843=(cj5*sj3);
IkReal x15844=((1.0)*sj0);
IkReal x15845=(cj3*cj5);
IkReal x15846=(cj3*sj5);
IkReal x15847=(r21*sj5);
IkReal x15848=(cj2*sj1);
IkReal x15849=(sj3*sj5);
IkReal x15850=(r01*sj5);
IkReal x15851=((1.0)*cj0);
IkReal x15852=(cj1*sj2);
IkReal x15853=((1.0)*x15839);
IkReal x15854=((1.0)*x15838);
IkReal x15855=(cj3*x15839);
IkReal x15856=((1.0)*cj1*cj2);
IkReal x15857=(cj3*x15838);
evalcond[0]=(((x15838*x15847))+(((-1.0)*cj5*r20*x15854))+(((-1.0)*r22*x15853)));
evalcond[1]=(cj0+(((-1.0)*r12*x15853))+((x15838*x15840))+(((-1.0)*x15841*x15854)));
evalcond[2]=((((-1.0)*r02*x15853))+((x15838*x15850))+(((-1.0)*x15844))+(((-1.0)*cj5*r00*x15854)));
evalcond[3]=((((-1.0)*r20*x15845*x15853))+((r20*x15849))+((r21*x15839*x15846))+((r21*x15843))+((r22*x15857))+x15848+x15852);
evalcond[4]=(((r20*x15846))+((r21*x15845))+(((-1.0)*x15856))+(((-1.0)*sj3*x15847*x15853))+(((-1.0)*r22*sj3*x15854))+x15842+((r20*x15839*x15843)));
evalcond[5]=(((r01*x15843))+((r00*x15849))+(((-1.0)*r00*x15845*x15853))+((r02*x15857))+(((-1.0)*cj1*cj2*x15851))+((r01*x15839*x15846))+((cj0*x15842)));
evalcond[6]=(((r11*x15843))+((r12*x15857))+((x15840*x15855))+(((-1.0)*cj3*x15841*x15853))+(((-1.0)*cj1*cj2*x15844))+((r10*x15849))+((sj0*x15842)));
evalcond[7]=(((r01*x15845))+(((-1.0)*x15851*x15852))+(((-1.0)*r01*x15849*x15853))+((r00*x15846))+(((-1.0)*r02*sj3*x15854))+((r00*x15839*x15843))+(((-1.0)*x15848*x15851)));
evalcond[8]=(((r11*x15845))+((sj3*x15839*x15841))+(((-1.0)*x15844*x15848))+((r10*x15846))+(((-1.0)*r12*sj3*x15854))+(((-1.0)*x15844*x15852))+(((-1.0)*sj3*x15840*x15853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15858=cj5*cj5;
IkReal x15859=r21*r21;
IkReal x15860=r20*r20;
IkReal x15861=(r20*r21);
IkReal x15862=((1.0)*cj3);
IkReal x15863=((1.0)*cj5);
IkReal x15864=(cj1*sj2);
IkReal x15865=(cj5*sj5);
IkReal x15866=(sj3*sj5);
IkReal x15867=(cj2*sj1);
IkReal x15868=(r21*sj5);
CheckValue<IkReal> x15869 = IKatan2WithCheck(IkReal((((r22*x15867))+((r22*x15864))+((cj5*r21*r22*sj3))+((r20*r22*x15866)))),IkReal((((sj3*x15859*x15865))+((sj3*x15861))+(((-1.0)*r20*x15863*x15864))+(((-1.0)*r20*x15863*x15867))+(((-1.0)*x15860*x15863*x15866))+((x15864*x15868))+(((-2.0)*sj3*x15858*x15861))+((x15867*x15868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15869.valid){
continue;
}
CheckValue<IkReal> x15870=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x15861*x15865))+(((-1.0)*x15859*x15862))+((cj3*x15858*x15859))+(((-1.0)*x15862*(r22*r22)))+(((-1.0)*x15858*x15860*x15862)))),-1);
if(!x15870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15869.value)+(((1.5707963267949)*(x15870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15871=IKsin(j4);
IkReal x15872=IKcos(j4);
IkReal x15873=(cj3*r21);
IkReal x15874=(r21*sj5);
IkReal x15875=(r20*sj5);
IkReal x15876=(cj5*r20);
IkReal x15877=((1.0)*x15872);
IkReal x15878=((1.0)*x15871);
evalcond[0]=(((x15871*x15874))+(((-1.0)*r22*x15877))+(((-1.0)*x15876*x15878)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15875))+(((-1.0)*cj3*x15876*x15877))+((cj3*r22*x15871))+((sj5*x15872*x15873)));
evalcond[2]=(((sj3*x15872*x15876))+((cj3*x15875))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15878))+((cj5*x15873))+(((-1.0)*sj3*x15874*x15877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15879=(cj5*sj4);
IkReal x15880=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x15879))+(((-1.0)*cj4*r02))+((r01*x15880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15880))+((r10*x15879))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15879))+(((-1.0)*cj4*r02))+((r01*x15880))))+IKsqr(((((-1.0)*r11*x15880))+((r10*x15879))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x15879))+(((-1.0)*cj4*r02))+((r01*x15880))), ((((-1.0)*r11*x15880))+((r10*x15879))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15881=IKcos(j0);
IkReal x15882=IKsin(j0);
IkReal x15883=(r02*sj4);
IkReal x15884=((0.1)*sj5);
IkReal x15885=(cj5*r11);
IkReal x15886=((1.0)*sj3);
IkReal x15887=(r12*sj4);
IkReal x15888=((1.0)*cj3);
IkReal x15889=(r11*sj5);
IkReal x15890=(cj3*cj4);
IkReal x15891=((1.0)*sj2);
IkReal x15892=(cj5*r01);
IkReal x15893=(r01*sj5);
IkReal x15894=(sj1*sj2);
IkReal x15895=(cj1*cj2);
IkReal x15896=(r00*sj5);
IkReal x15897=((1.0)*cj2);
IkReal x15898=(r10*sj5);
IkReal x15899=((1.0)*cj4);
IkReal x15900=(cj4*cj5*r00);
IkReal x15901=(cj1*x15881);
IkReal x15902=(cj4*cj5*r10);
IkReal x15903=((0.392)*x15882);
IkReal x15904=((1.0)*x15882);
IkReal x15905=(cj1*x15882);
IkReal x15906=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x15889))+(((-1.0)*r10*x15906))+(((-1.0)*r12*x15899))+x15881);
evalcond[1]=((((-1.0)*r00*x15906))+(((-1.0)*r02*x15899))+((sj4*x15893))+(((-1.0)*x15904)));
evalcond[2]=((((-0.134)*x15882))+(((-0.392)*x15881*x15894))+(((-1.0)*px))+(((-0.1)*x15892))+(((-1.0)*r00*x15884))+(((0.392)*x15881*x15895))+(((0.425)*x15901)));
evalcond[3]=((((-1.0)*x15894*x15903))+((x15895*x15903))+(((0.134)*x15881))+(((-0.1)*x15885))+(((-1.0)*py))+(((-1.0)*r10*x15884))+(((0.425)*x15905)));
evalcond[4]=((((-1.0)*x15881*x15895))+((cj3*x15883))+((x15881*x15894))+(((-1.0)*x15888*x15900))+((sj3*x15892))+((sj3*x15896))+((x15890*x15893)));
evalcond[5]=((((-1.0)*x15895*x15904))+((cj3*x15887))+((x15882*x15894))+(((-1.0)*x15888*x15902))+((x15889*x15890))+((sj3*x15885))+((sj3*x15898)));
evalcond[6]=((((-1.0)*x15883*x15886))+(((-1.0)*sj1*x15881*x15897))+((sj3*x15900))+((cj3*x15896))+((cj3*x15892))+(((-1.0)*x15891*x15901))+(((-1.0)*cj4*x15886*x15893)));
evalcond[7]=(((sj3*x15902))+(((-1.0)*x15886*x15887))+((cj3*x15885))+((cj3*x15898))+(((-1.0)*x15891*x15905))+(((-1.0)*sj1*x15882*x15897))+(((-1.0)*cj4*x15886*x15889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15907=cj5*cj5;
IkReal x15908=r21*r21;
IkReal x15909=r20*r20;
IkReal x15910=(r20*r21);
IkReal x15911=(sj1*sj2);
IkReal x15912=(r21*sj5);
IkReal x15913=(cj1*cj2);
IkReal x15914=(cj5*r20);
IkReal x15915=(cj5*sj5);
IkReal x15916=(cj3*r22);
IkReal x15917=(sj3*x15908);
CheckValue<IkReal> x15918 = IKatan2WithCheck(IkReal((((r22*x15911))+(((-1.0)*r22*x15913))+((r20*sj5*x15916))+((cj5*r21*x15916)))),IkReal((((x15911*x15912))+(((-1.0)*x15911*x15914))+(((-2.0)*cj3*x15907*x15910))+(((-1.0)*cj3*x15909*x15915))+((x15913*x15914))+(((-1.0)*x15912*x15913))+((cj3*x15910))+((cj3*x15908*x15915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15918.valid){
continue;
}
CheckValue<IkReal> x15919=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x15907*x15909))+(((-2.0)*sj3*x15910*x15915))+(((-1.0)*x15907*x15917))+x15917)),-1);
if(!x15919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15918.value)+(((1.5707963267949)*(x15919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15920=IKsin(j4);
IkReal x15921=IKcos(j4);
IkReal x15922=(cj3*r21);
IkReal x15923=(r21*sj5);
IkReal x15924=(r20*sj5);
IkReal x15925=(cj5*r20);
IkReal x15926=((1.0)*x15921);
IkReal x15927=((1.0)*x15920);
evalcond[0]=((((-1.0)*x15925*x15927))+((x15920*x15923))+(((-1.0)*r22*x15926)));
evalcond[1]=(((cj3*r22*x15920))+(((-1.0)*cj3*x15925*x15926))+((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15924))+((sj5*x15921*x15922)));
evalcond[2]=((((-1.0)*cj1*cj2))+(((-1.0)*sj3*x15923*x15926))+((cj3*x15924))+((sj1*sj2))+(((-1.0)*r22*sj3*x15927))+((cj5*x15922))+((sj3*x15921*x15925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15928=(cj5*sj4);
IkReal x15929=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15929))+(((-1.0)*r00*x15928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15928))+(((-1.0)*r11*x15929))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15929))+(((-1.0)*r00*x15928))))+IKsqr((((r10*x15928))+(((-1.0)*r11*x15929))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15929))+(((-1.0)*r00*x15928))), (((r10*x15928))+(((-1.0)*r11*x15929))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15930=IKcos(j0);
IkReal x15931=IKsin(j0);
IkReal x15932=(r02*sj4);
IkReal x15933=((0.1)*sj5);
IkReal x15934=(cj5*r11);
IkReal x15935=((1.0)*sj3);
IkReal x15936=(r12*sj4);
IkReal x15937=((1.0)*cj3);
IkReal x15938=(r11*sj5);
IkReal x15939=(cj3*cj4);
IkReal x15940=((1.0)*sj2);
IkReal x15941=(cj5*r01);
IkReal x15942=(r01*sj5);
IkReal x15943=(sj1*sj2);
IkReal x15944=(cj1*cj2);
IkReal x15945=(r00*sj5);
IkReal x15946=((1.0)*cj2);
IkReal x15947=(r10*sj5);
IkReal x15948=((1.0)*cj4);
IkReal x15949=(cj4*cj5*r00);
IkReal x15950=(cj1*x15930);
IkReal x15951=(cj4*cj5*r10);
IkReal x15952=((0.392)*x15931);
IkReal x15953=((1.0)*x15931);
IkReal x15954=(cj1*x15931);
IkReal x15955=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x15948))+((sj4*x15938))+(((-1.0)*r10*x15955))+x15930);
evalcond[1]=((((-1.0)*r02*x15948))+(((-1.0)*r00*x15955))+((sj4*x15942))+(((-1.0)*x15953)));
evalcond[2]=((((-1.0)*r00*x15933))+(((-0.392)*x15930*x15943))+(((-0.1)*x15941))+(((-1.0)*px))+(((0.425)*x15950))+(((-0.134)*x15931))+(((0.392)*x15930*x15944)));
evalcond[3]=((((-0.1)*x15934))+(((0.134)*x15930))+(((-1.0)*py))+(((-1.0)*r10*x15933))+((x15944*x15952))+(((0.425)*x15954))+(((-1.0)*x15943*x15952)));
evalcond[4]=(((x15939*x15942))+(((-1.0)*x15937*x15949))+((cj3*x15932))+((x15930*x15943))+(((-1.0)*x15930*x15944))+((sj3*x15941))+((sj3*x15945)));
evalcond[5]=(((x15938*x15939))+(((-1.0)*x15944*x15953))+((cj3*x15936))+(((-1.0)*x15937*x15951))+((x15931*x15943))+((sj3*x15947))+((sj3*x15934)));
evalcond[6]=((((-1.0)*cj4*x15935*x15942))+((cj3*x15941))+((cj3*x15945))+(((-1.0)*x15932*x15935))+(((-1.0)*sj1*x15930*x15946))+(((-1.0)*x15940*x15950))+((sj3*x15949)));
evalcond[7]=(((cj3*x15947))+(((-1.0)*x15935*x15936))+((cj3*x15934))+(((-1.0)*sj1*x15931*x15946))+(((-1.0)*x15940*x15954))+((sj3*x15951))+(((-1.0)*cj4*x15935*x15938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e (5f561981e0e5d0632f1bb3734b78f46f)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
