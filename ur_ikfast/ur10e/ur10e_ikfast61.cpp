/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-06-27 16:13:18.742565
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "../include/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.571)*x2);
x13=((0.12)*x3);
x14=((0.12)*x2);
x15=((1.0)*x3);
x16=((1.0)*x10);
x17=((1.0)*x9);
x18=((1.0)*x5);
x19=((0.571)*x3);
x20=((1.0)*x2);
x21=((0.117)*x6);
x22=((0.117)*x5);
x23=(x0*x4);
x24=(x1*x11);
x25=(x0*x9);
x26=(x11*x4);
x27=(x0*x1);
x28=(x3*x4);
x29=(x11*x16);
x30=(x15*x27);
x31=(x15*x24);
x32=(((x1*x2))+x28);
x33=(((x1*x15))+(((-1.0)*x20*x4)));
x34=(x32*x5);
x35=(x33*x6);
x36=((((-1.0)*x30))+((x2*x23)));
x37=((((-1.0)*x31))+((x2*x26)));
x38=(((x20*x27))+((x15*x23)));
x39=(((x20*x24))+((x15*x26)));
x40=(x36*x5);
x41=(x37*x5);
x42=(x39*x6);
x43=(x38*x6);
x44=(((x6*(((((-1.0)*x1*x20))+(((-1.0)*x15*x4))))))+((x33*x5)));
x45=(x43+x40);
x46=(x42+x41);
x47=(((x38*x5))+((x6*((x30+(((-1.0)*x20*x23)))))));
x48=(((x6*((x31+(((-1.0)*x20*x26))))))+((x39*x5)));
eerot[0]=(((x47*x8))+((x7*(((((-1.0)*x29))+((x45*x9)))))));
eerot[1]=(((x47*x7))+((x8*(((((-1.0)*x17*x45))+x29)))));
eerot[2]=(((x10*(((((-1.0)*x18*x36))+(((-1.0)*x43))))))+(((-1.0)*x11*x17)));
IkReal x49=((1.0)*x13);
eetrans[0]=(((x19*x27))+(((-1.0)*x12*x23))+(((-0.117)*x11*x9))+((x10*(((((-1.0)*x22*x36))+(((-1.0)*x21*x38))))))+((x5*(((((-1.0)*x23*x49))+(((-1.0)*x14*x27))))))+((x6*(((((-1.0)*x27*x49))+((x14*x23))))))+(((0.613)*x27))+(((-0.174)*x11)));
eerot[3]=(((x7*((((x0*x10))+((x46*x9))))))+((x48*x8)));
eerot[4]=(((x8*(((((-1.0)*x0*x16))+(((-1.0)*x17*x46))))))+((x48*x7)));
eerot[5]=(((x10*(((((-1.0)*x18*x37))+(((-1.0)*x42))))))+x25);
IkReal x50=((1.0)*x26);
IkReal x51=((1.0)*x24);
eetrans[1]=((((0.174)*x0))+((x19*x24))+(((-1.0)*x12*x50))+((x5*(((((-1.0)*x14*x51))+(((-1.0)*x13*x50))))))+((x10*(((((-1.0)*x22*x37))+(((-1.0)*x21*x39))))))+(((0.613)*x24))+((x6*(((((-1.0)*x13*x51))+((x14*x26))))))+(((0.117)*x25)));
eerot[6]=(((x7*x9*((x35+x34))))+((x44*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x35))+(((-1.0)*x34))))))+((x44*x7)));
eerot[8]=(x10*(((((-1.0)*x35))+(((-1.0)*x18*x32)))));
IkReal x52=((1.0)*x1);
eetrans[2]=((0.181)+(((-1.0)*x12*x52))+(((-1.0)*x19*x4))+((x6*((((x1*x14))+((x13*x4))))))+(((-0.613)*x4))+((x5*(((((-1.0)*x13*x52))+((x14*x4))))))+((x10*(((((-1.0)*x22*x32))+(((-1.0)*x21*x33)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.117)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.117)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.181)+(((-0.117)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x56=((0.24)*npx);
IkReal x57=((0.24)*npy);
IkReal x58=((0.12)*r22);
IkReal x59=((0.12)*r21);
IkReal x60=((-0.12)*r20);
IkReal x61=((-1.0)*r20);
IkReal x62=((-1.0)*rxp0_2);
IkReal x63=((-0.12)*r21);
IkReal x64=((-1.0)*r21);
IkReal x65=((-1.0)*rxp1_2);
IkReal x66=((-1.0)*npx);
IkReal x67=((-1.0)*r22);
IkReal x68=((-1.0)*npz);
matrixinvcoeffs[0]=x60;
matrixinvcoeffs[1]=x56;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x61;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x62;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x60;
matrixinvcoeffs[19]=x56;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x61;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x62;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x63;
matrixinvcoeffs[33]=x57;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x64;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x65;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x63;
matrixinvcoeffs[51]=x57;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x64;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x65;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x67;
matrixinvcoeffs[76]=x58;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x68;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x58;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x65;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x63;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x65;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x59;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x61;
matrixinvcoeffs[133]=x66;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.12)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x61;
matrixinvcoeffs[151]=x66;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x60;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x67;
matrixinvcoeffs[165]=x68;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x58;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x67;
matrixinvcoeffs[183]=x68;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.12)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x64;
matrixinvcoeffs[204]=x59;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x65;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x59;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x66;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x60;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x61;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x60;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x62;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x69=pz*pz;
IkReal x70=pp*pp;
IkReal x71=((0.24)*pz);
IkReal x72=(gclwh4_8*rxp2_2);
IkReal x73=(pp*r21);
IkReal x74=(gclwh12_8*npy);
IkReal x75=(gclwh11_0*rxp2_2);
IkReal x76=(npy*pz);
IkReal x77=(gclwh13_15*rxp1_2);
IkReal x78=(gclwh4_11*rxp2_2);
IkReal x79=(gclwh12_11*rxp1_2);
IkReal x80=((0.0288)*r22);
IkReal x81=(npz*pz);
IkReal x82=((0.28416)*rxp1_2);
IkReal x83=(npx*pz);
IkReal x84=(gclwh10_12*r22);
IkReal x85=(gclwh15_1*r20);
IkReal x86=(gclwh5_10*rxp2_2);
IkReal x87=((0.348)*gclwh12_14);
IkReal x88=(pp*r20);
IkReal x89=((2.0)*gclwh11_10);
IkReal x90=(gclwh7_0*r21);
IkReal x91=(gclwh14_2*pz);
IkReal x92=(gclwh13_10*rxp1_2);
IkReal x93=((0.0144)*pz);
IkReal x94=(gclwh15_0*r20);
IkReal x95=(pp*r22);
IkReal x96=((0.348)*gclwh5_15);
IkReal x97=(gclwh12_8*r21);
IkReal x98=(gclwh5_9*rxp2_2);
IkReal x99=((2.0)*gclwh4_11);
IkReal x100=(gclwh13_0*rxp1_2);
IkReal x101=(gclwh12_2*r21);
IkReal x102=(gclwh15_1*rxp0_2);
IkReal x103=((0.24)*pp);
IkReal x104=((1.0)*pz);
IkReal x105=((0.29424)*rxp1_2);
IkReal x106=((4.0)*gclwh9_10);
IkReal x107=((0.0576)*r22);
IkReal x108=((2.0)*gclwh9_10);
IkReal x109=(gclwh0_0*r20);
IkReal x110=((0.0042336)*rxp2_2);
IkReal x111=(gclwh10_2*r22);
IkReal x112=((2.0)*gclwh15_10);
IkReal x113=(gclwh13_1*r21);
IkReal x114=(gclwh4_2*rxp2_2);
IkReal x115=((2.0)*gclwh13_10);
IkReal x116=((0.0340992)*r20);
IkReal x117=(gclwh14_8*r20);
IkReal x118=((0.0006048)*r22);
IkReal x119=((0.348)*gclwh13_15);
IkReal x120=((2.0)*gclwh10_11);
IkReal x121=(gclwh15_9*rxp0_2);
IkReal x122=(gclwh2_1*r21);
IkReal x123=((2.0)*pp);
IkReal x124=((4.0)*gclwh11_10);
IkReal x125=(gclwh0_1*r20);
IkReal x126=((0.02016)*rxp0_2);
IkReal x127=(gclwh11_13*rxp2_2);
IkReal x128=(gclwh14_8*rxp0_2);
IkReal x129=((2.0)*gclwh7_10);
IkReal x130=((0.0170496)*r20);
IkReal x131=((0.24)*rxp1_2);
IkReal x132=(gclwh13_9*r21);
IkReal x133=(gclwh3_2*r21);
IkReal x134=((0.04176)*rxp0_2);
IkReal x135=(gclwh6_2*r21);
IkReal x136=((0.48)*rxp0_2);
IkReal x137=((4.0)*gclwh8_11);
IkReal x138=(gclwh11_0*r22);
IkReal x139=((0.27408)*rxp0_2);
IkReal x140=(gclwh5_9*r22);
IkReal x141=((0.04176)*rxp2_2);
IkReal x142=((0.348)*gclwh15_15);
IkReal x143=((0.48)*rxp2_2);
IkReal x144=((0.0144)*r20);
IkReal x145=(gclwh8_12*rxp0_2);
IkReal x146=(gclwh7_0*rxp1_2);
IkReal x147=(gclwh6_12*r21);
IkReal x148=((0.0025056)*r20);
IkReal x149=((4.0)*gclwh7_10);
IkReal x150=((0.0025056)*r21);
IkReal x151=(gclwh7_10*r21);
IkReal x152=(gclwh9_10*r20);
IkReal x153=(gclwh8_12*r20);
IkReal x154=(gclwh8_2*r20);
IkReal x155=(gclwh9_0*r20);
IkReal x156=((0.96)*rxp0_2);
IkReal x157=(gclwh5_15*rxp2_2);
IkReal x158=(gclwh5_0*rxp2_2);
IkReal x159=((0.348)*gclwh14_14);
IkReal x160=(gclwh14_14*rxp0_2);
IkReal x161=((0.0144)*r22);
IkReal x162=(gclwh15_15*rxp0_2);
IkReal x163=((2.0)*gclwh6_11);
IkReal x164=(gclwh1_3*r20);
IkReal x165=((0.48)*rxp1_2);
IkReal x166=((0.0025056)*r22);
IkReal x167=((0.0050112)*r22);
IkReal x168=((0.0050112)*r21);
IkReal x169=(gclwh4_2*r22);
IkReal x170=((0.56832)*rxp0_2);
IkReal x171=((2.0)*gclwh12_11);
IkReal x172=(gclwh14_3*r20);
IkReal x173=((0.0144)*r21);
IkReal x174=((0.04176)*rxp1_2);
IkReal x175=(gclwh10_2*rxp2_2);
IkReal x176=(gclwh2_0*r21);
IkReal x177=(gclwh13_1*rxp1_2);
IkReal x178=(gclwh9_13*r20);
IkReal x179=((0.01008)*rxp1_2);
IkReal x180=(gclwh1_2*r20);
IkReal x181=(gclwh4_3*rxp2_2);
IkReal x182=(gclwh7_13*r21);
IkReal x183=(gclwh11_13*r22);
IkReal x184=(gclwh10_12*rxp2_2);
IkReal x185=(gclwh13_0*r21);
IkReal x186=((2.0)*gclwh8_11);
IkReal x187=((0.0204153408)*r22);
IkReal x188=((4.0)*gclwh10_11);
IkReal x189=(gclwh3_3*r21);
IkReal x190=((0.348)*gclwh4_14);
IkReal x191=(gclwh5_0*r22);
IkReal x192=((2.0)*gclwh5_10);
IkReal x193=((0.56832)*rxp1_2);
IkReal x194=(gclwh12_3*rxp1_2);
IkReal x195=(gclwh5_1*r22);
IkReal x196=(gclwh5_1*rxp2_2);
IkReal x197=(gclwh14_3*rxp0_2);
IkReal x198=(gclwh12_2*rxp1_2);
IkReal x199=(gclwh15_9*r20);
IkReal x200=((4.0)*gclwh6_11);
IkReal x201=((0.24)*rxp2_2);
IkReal x202=((0.24)*rxp0_2);
IkReal x203=((0.0288)*r21);
IkReal x204=(gclwh12_3*r21);
IkReal x205=((0.0288)*r20);
IkReal x206=(gclwh4_8*r22);
IkReal x207=(gclwh4_14*rxp2_2);
IkReal x208=((0.0050112)*r20);
IkReal x209=((0.0288)*rxp1_2);
IkReal x210=(gclwh6_2*rxp1_2);
IkReal x211=(gclwh4_3*r22);
IkReal x212=(gclwh12_14*rxp1_2);
IkReal x213=((2.0)*gclwh14_11);
IkReal x214=(gclwh9_13*rxp0_2);
IkReal x215=(gclwh6_5*x150);
IkReal x216=(gclwh14_14*x134);
IkReal x217=(gclwh10_5*x166);
IkReal x218=(gclwh12_14*x174);
IkReal x219=(gclwh8_5*x148);
IkReal x220=(gclwh4_14*x141);
IkReal x221=((0.0288)*x72);
IkReal x222=(gclwh6_11*x173);
IkReal x223=(gclwh12_8*x209);
IkReal x224=((0.24)*x78);
IkReal x225=((0.24)*x79);
IkReal x226=(gclwh14_11*x202);
IkReal x227=(gclwh10_11*x161);
IkReal x228=((0.0288)*x128);
IkReal x229=(gclwh8_11*x144);
IkReal x230=(gclwh9_10*x144);
IkReal x231=(gclwh13_9*x209);
IkReal x232=(gclwh15_10*x202);
IkReal x233=((0.0288)*x98);
IkReal x234=(gclwh11_10*x161);
IkReal x235=((0.0144)*x151);
IkReal x236=((0.24)*x92);
IkReal x237=((0.0288)*x121);
IkReal x238=((0.24)*x86);
IkReal x239=(gclwh7_7*x150);
IkReal x240=(gclwh15_15*x134);
IkReal x241=(gclwh9_7*x148);
IkReal x242=(gclwh11_7*x166);
IkReal x243=((0.04176)*x77);
IkReal x244=(gclwh5_15*x141);
IkReal x245=(gclwh8_5*x134);
IkReal x246=(gclwh14_14*x148);
IkReal x247=(gclwh10_5*x141);
IkReal x248=(gclwh12_14*x150);
IkReal x249=(gclwh6_5*x174);
IkReal x250=(gclwh4_14*x166);
IkReal x251=(gclwh10_11*x201);
IkReal x252=((0.001728)*x97);
IkReal x253=((0.001728)*x206);
IkReal x254=(gclwh12_11*x173);
IkReal x255=(gclwh4_11*x161);
IkReal x256=(gclwh8_11*x202);
IkReal x257=(gclwh6_11*x131);
IkReal x258=(gclwh14_11*x144);
IkReal x259=((0.001728)*x117);
IkReal x260=(gclwh13_10*x173);
IkReal x261=((0.001728)*x199);
IkReal x262=(gclwh5_10*x161);
IkReal x263=(gclwh11_10*x201);
IkReal x264=(gclwh9_10*x202);
IkReal x265=(gclwh7_10*x131);
IkReal x266=((0.001728)*x132);
IkReal x267=((0.001728)*x140);
IkReal x268=(gclwh15_10*x144);
IkReal x269=(gclwh5_15*x166);
IkReal x270=(gclwh7_7*x174);
IkReal x271=(gclwh13_15*x150);
IkReal x272=(gclwh9_7*x134);
IkReal x273=(gclwh15_15*x148);
IkReal x274=(gclwh11_7*x141);
IkReal x275=(gclwh14_11*x136);
IkReal x276=(gclwh10_11*x80);
IkReal x277=(gclwh8_11*x205);
IkReal x278=((0.08352)*x160);
IkReal x279=((0.08352)*x207);
IkReal x280=((0.08352)*x212);
IkReal x281=(gclwh6_11*x203);
IkReal x282=((0.48)*x78);
IkReal x283=((0.48)*x79);
IkReal x284=((0.08352)*x77);
IkReal x285=((0.08352)*x157);
IkReal x286=((0.08352)*x162);
IkReal x287=(gclwh15_10*x136);
IkReal x288=((0.0288)*x152);
IkReal x289=(gclwh11_10*x80);
IkReal x290=((0.48)*x86);
IkReal x291=((0.0288)*x151);
IkReal x292=((0.48)*x92);
IkReal x293=(gclwh6_11*x165);
IkReal x294=(gclwh14_11*x205);
IkReal x295=(gclwh14_14*x208);
IkReal x296=(gclwh4_14*x167);
IkReal x297=(gclwh12_14*x168);
IkReal x298=((2.0)*x69);
IkReal x299=((1.0)*x70);
IkReal x300=((0.348)*gclwh8_5*x83);
IkReal x301=((0.174)*gclwh6_5*x73);
IkReal x302=((0.348)*gclwh10_5*x81);
IkReal x303=((0.348)*gclwh6_5*x76);
IkReal x304=((0.174)*gclwh10_5*x95);
IkReal x305=((0.174)*gclwh8_5*x88);
IkReal x306=(gclwh14_2*rxp0_2*x71);
IkReal x307=(x103*x181);
IkReal x308=(x120*x81);
IkReal x309=(x186*x83);
IkReal x310=(gclwh10_2*pz*x95);
IkReal x311=(x154*x93);
IkReal x312=(x103*x194);
IkReal x313=(x111*x93);
IkReal x314=(gclwh8_2*pz*x88);
IkReal x315=(x198*x71);
IkReal x316=(x114*x71);
IkReal x317=(x163*x76);
IkReal x318=(x103*x197);
IkReal x319=(x135*x93);
IkReal x320=(x103*x177);
IkReal x321=(x103*x196);
IkReal x322=(gclwh15_0*rxp0_2*x71);
IkReal x323=(gclwh11_0*pz*x95);
IkReal x324=(x155*x93);
IkReal x325=(x129*x76);
IkReal x326=(x138*x93);
IkReal x327=(gclwh9_0*pz*x88);
IkReal x328=(x81*x89);
IkReal x329=(x100*x71);
IkReal x330=(x108*x83);
IkReal x331=(x158*x71);
IkReal x332=(x90*x93);
IkReal x333=(x102*x103);
IkReal x334=((0.174)*gclwh7_7*x73);
IkReal x335=((0.348)*gclwh9_7*x83);
IkReal x336=((0.348)*gclwh11_7*x81);
IkReal x337=((0.174)*gclwh11_7*x95);
IkReal x338=((0.348)*gclwh7_7*x76);
IkReal x339=((0.174)*gclwh9_7*x88);
IkReal x340=(x76*x87);
IkReal x341=((0.174)*gclwh14_14*x88);
IkReal x342=(x190*x81);
IkReal x343=((0.174)*gclwh12_14*x73);
IkReal x344=(x159*x83);
IkReal x345=((0.174)*gclwh4_14*x95);
IkReal x346=(x88*x91);
IkReal x347=(x204*x70);
IkReal x348=((0.12)*gclwh12_8*x73);
IkReal x349=(gclwh14_8*npx*x71);
IkReal x350=(x210*x71);
IkReal x351=((0.12)*gclwh4_8*x95);
IkReal x352=(x144*x91);
IkReal x353=(x180*x93);
IkReal x354=(x189*x70);
IkReal x355=(x164*x70);
IkReal x356=(x213*x83);
IkReal x357=(x211*x70);
IkReal x358=(x133*x93);
IkReal x359=(x81*x99);
IkReal x360=(x101*x93);
IkReal x361=(gclwh4_8*npz*x71);
IkReal x362=(x169*x93);
IkReal x363=(x175*x71);
IkReal x364=((0.12)*gclwh14_8*x88);
IkReal x365=(x71*x74);
IkReal x366=(gclwh8_2*rxp0_2*x71);
IkReal x367=(x171*x76);
IkReal x368=(x185*x93);
IkReal x369=(x70*x85);
IkReal x370=(x191*x93);
IkReal x371=(gclwh5_0*pz*x95);
IkReal x372=(gclwh13_0*pz*x73);
IkReal x373=(x109*x93);
IkReal x374=(x176*x93);
IkReal x375=((0.12)*gclwh15_9*x88);
IkReal x376=(x112*x83);
IkReal x377=(x122*x70);
IkReal x378=(x71*x75);
IkReal x379=(gclwh5_9*npz*x71);
IkReal x380=(gclwh13_9*npy*x71);
IkReal x381=(gclwh9_0*rxp0_2*x71);
IkReal x382=(x125*x70);
IkReal x383=((0.12)*gclwh13_9*x73);
IkReal x384=(gclwh15_9*npx*x71);
IkReal x385=(x93*x94);
IkReal x386=(x192*x81);
IkReal x387=((0.12)*gclwh5_9*x95);
IkReal x388=(x115*x76);
IkReal x389=(x146*x71);
IkReal x390=(x142*x83);
IkReal x391=((0.174)*gclwh13_15*x73);
IkReal x392=((0.174)*gclwh5_15*x95);
IkReal x393=((0.174)*gclwh15_15*x88);
IkReal x394=(x81*x96);
IkReal x395=(x119*x76);
IkReal x396=(x186*x88);
IkReal x397=(x120*x95);
IkReal x398=(x200*x76);
IkReal x399=(x137*x83);
IkReal x400=(x163*x73);
IkReal x401=(x188*x81);
IkReal x402=(x89*x95);
IkReal x403=(x149*x76);
IkReal x404=(x108*x88);
IkReal x405=(x129*x73);
IkReal x406=(x106*x83);
IkReal x407=(x124*x81);
IkReal x408=(x213*x88);
IkReal x409=((4.0)*gclwh12_11*x76);
IkReal x410=((4.0)*gclwh4_11*x81);
IkReal x411=((0.696)*gclwh4_14*x81);
IkReal x412=(x159*x88);
IkReal x413=((0.696)*gclwh12_14*x76);
IkReal x414=(x73*x87);
IkReal x415=((0.696)*gclwh14_14*x83);
IkReal x416=(x190*x95);
IkReal x417=(gclwh6_2*npy*x298);
IkReal x418=(gclwh6_2*x104*x73);
IkReal x419=(gclwh10_2*npz*x298);
IkReal x420=(gclwh8_2*npx*x298);
IkReal x421=(gclwh7_0*npy*x298);
IkReal x422=(gclwh9_0*npx*x298);
IkReal x423=(gclwh11_0*npz*x298);
IkReal x424=(gclwh7_0*x104*x73);
IkReal x425=(gclwh12_2*npy*x298);
IkReal x426=(gclwh3_2*npy*x298);
IkReal x427=(gclwh1_2*npx*x298);
IkReal x428=(gclwh14_3*x123*x83);
IkReal x429=(gclwh4_2*npz*x298);
IkReal x430=(gclwh4_3*x123*x81);
IkReal x431=(gclwh12_2*x104*x73);
IkReal x432=(gclwh1_2*x104*x88);
IkReal x433=(gclwh3_3*x123*x76);
IkReal x434=(gclwh4_2*x104*x95);
IkReal x435=(gclwh1_3*x123*x83);
IkReal x436=(gclwh3_2*x104*x73);
IkReal x437=(gclwh12_3*x123*x76);
IkReal x438=(gclwh14_2*npx*x298);
IkReal x439=(x172*x299);
IkReal x440=(gclwh0_0*npx*x298);
IkReal x441=(gclwh2_0*npy*x298);
IkReal x442=(gclwh5_1*x123*x81);
IkReal x443=(gclwh13_1*x123*x76);
IkReal x444=(gclwh15_0*npx*x298);
IkReal x445=(gclwh2_1*x123*x76);
IkReal x446=(gclwh0_1*x123*x83);
IkReal x447=(gclwh5_0*npz*x298);
IkReal x448=(gclwh13_0*npy*x298);
IkReal x449=(gclwh0_0*x104*x88);
IkReal x450=(gclwh15_0*x104*x88);
IkReal x451=(gclwh2_0*x104*x73);
IkReal x452=(x113*x299);
IkReal x453=(x195*x299);
IkReal x454=(gclwh15_1*x123*x83);
IkReal x455=(x274+x272);
IkReal x456=(x279+x280);
IkReal x457=(x247+x245);
IkReal x458=(x285+x284);
IkReal x459=(x243+x244);
IkReal x460=(x218+x220);
IkReal x461=(x317+x229+x227+x226);
IkReal x462=(x325+x232+x230+x234);
IkReal x463=(x386+x388+x265+x268);
IkReal x464=(x359+x367+x258+x257);
IkReal x465=(x395+x394+x393+x273);
IkReal x466=(x336+x335+x334+x239);
IkReal x467=(x342+x340+x341+x246);
IkReal x468=(x302+x300+x301+x215);
IkReal x469=(x295+x412+x413+x411);
IkReal x470=(x376+x264+x260+x263+x262);
IkReal x471=(x356+x254+x255+x256+x251);
IkReal x472=(x330+x328+x238+x236+x235);
IkReal x473=(x308+x309+x222+x225+x224);
IkReal x474=(x296+x297+x416+x414+x415);
IkReal x475=(x293+x294+x409+x408+x410);
IkReal x476=(x339+x338+x337+x242+x241);
IkReal x477=(x391+x390+x392+x269+x271);
IkReal x478=(x343+x344+x345+x250+x248);
IkReal x479=(x304+x305+x303+x217+x219);
IkReal x480=(x399+x283+x282+x281+x401+x400);
IkReal x481=(x290+x291+x292+x405+x407+x406);
IkReal x482=(x289+x288+x287+x403+x402+x404);
IkReal x483=(x397+x396+x398+x276+x277+x275);
IkReal x484=(((gclwh10_11*x143))+((gclwh8_11*x136))+((x171*x73))+((gclwh4_11*x80))+((x95*x99))+((gclwh12_11*x203))+(((4.0)*gclwh14_11*x83)));
IkReal x485=(x319+x318+x315+x316+x228+x418+x419+x420);
IkReal x486=(x333+x332+x331+x329+x237+x424+x423+x422);
IkReal x487=(x324+x326+x327+x320+x321+x322+x323+x233+x231+x421);
IkReal x488=(x306+x307+x314+x311+x310+x313+x312+x221+x223+x417);
IkReal x489=(x387+x384+x385+x383+x389+x267+x266+x449+x448+x445+x447+x446+x454+x452+x453+x450+x451);
IkReal x490=(x360+x361+x362+x363+x364+x365+x366+x259+x438+x439+x430+x431+x432+x433+x434+x435+x436+x437);
IkReal x491=(x351+x350+x353+x352+x355+x354+x357+x358+x346+x347+x348+x349+x252+x253+x429+x428+x427+x426+x425+x71);
IkReal x492=(x382+x380+x381+x379+x378+x377+x375+x374+x373+x372+x371+x370+x368+x369+x261+x444+x441+x440+x443+x442+x71);
op[0]=((((0.0170496)*x147))+(((-2.368)*gclwh6_12*x76))+(((2.368)*gclwh10_12*x81))+(((-1.0)*gclwh8_12*x130))+(((-0.28416)*x72))+(((2.368)*gclwh8_12*x83))+(((-1.0)*x479))+(((-1.184)*gclwh8_12*x88))+x468+x460+(((0.28416)*x128))+(((-0.0170496)*x84))+(((1.184)*gclwh6_12*x73))+(((-1.0)*x216))+(((-1.0)*gclwh12_8*x82))+(((-1.184)*pp*x84)));
op[1]=((((-1.0)*x485))+(((-1.0)*x473))+x488+x461+(((0.34025568)*x197))+(((-0.34025568)*x194))+(((-1.0)*gclwh6_11*x73))+(((-0.34025568)*x181))+((gclwh8_11*x88))+((gclwh10_11*x95)));
op[2]=((-0.397416)+(((-1.0)*x480))+x483);
op[3]=((((0.0164448)*x111))+(((0.29424)*x72))+((gclwh12_8*x105))+(((-0.27408)*x198))+(((-1.142)*gclwh6_2*x73))+(((-2.284)*gclwh8_2*x83))+(((2.284)*gclwh6_2*x76))+(((-1.0)*x456))+((gclwh14_2*x139))+x278+(((-2.284)*gclwh10_2*x81))+(((-0.29424)*x128))+(((1.142)*gclwh10_2*x95))+(((0.0164448)*x154))+(((-0.0164448)*x135))+(((1.142)*gclwh8_2*x88))+(((-0.27408)*x114)));
op[4]=((((0.084)*gclwh8_12*x83))+(((-0.042)*gclwh8_12*x88))+(((-1.0)*x479))+(((-1.0)*x460))+(((-0.0006048)*x153))+(((-0.084)*gclwh6_12*x76))+(((0.01008)*x72))+x216+x468+((gclwh12_8*x179))+(((-0.01008)*x128))+(((0.042)*gclwh6_12*x73))+(((-0.0006048)*x84))+(((0.084)*gclwh10_12*x81))+(((-0.042)*pp*x84))+(((0.0006048)*x147)));
op[5]=((((-1.0)*gclwh8_11*x88))+((gclwh6_11*x73))+(((-1.0)*gclwh10_11*x95))+(((-1.0)*x485))+(((-1.0)*x461))+(((-1.0)*gclwh4_3*x110))+x488+x473+(((0.0042336)*x197))+(((-0.0042336)*x194)));
op[6]=(((gclwh7_10*x73))+(((-1.0)*x486))+(((0.34025568)*x102))+(((-1.0)*x462))+(((-0.34025568)*x177))+x487+x472+(((-0.34025568)*x196))+(((-1.0)*gclwh9_10*x88))+(((-1.0)*gclwh11_10*x95)));
op[7]=((((0.0170496)*x182))+(((-1.0)*gclwh13_9*x82))+(((-0.28416)*x98))+(((2.368)*gclwh11_13*x81))+(((-1.0)*x476))+(((-1.184)*gclwh11_13*x95))+(((-1.184)*gclwh9_13*x88))+(((-0.0170496)*x183))+x459+x466+(((0.28416)*x121))+(((1.184)*gclwh7_13*x73))+(((2.368)*gclwh9_13*x83))+(((-1.0)*gclwh9_13*x130))+(((-2.368)*gclwh7_13*x76))+(((-1.0)*x240)));
op[8]=((((-2.284)*gclwh11_0*x81))+(((-0.27408)*x158))+(((0.0164448)*x138))+(((1.142)*gclwh9_0*x88))+((gclwh15_0*x139))+(((0.29424)*x121))+(((-2.284)*gclwh9_0*x83))+(((-1.0)*gclwh13_9*x105))+(((-1.142)*gclwh7_0*x73))+x458+(((-0.29424)*x98))+(((-1.0)*x286))+(((0.0164448)*x155))+(((-0.27408)*x100))+(((2.284)*gclwh7_0*x76))+(((-0.0164448)*x90))+(((1.142)*gclwh11_0*x95)));
op[9]=((-0.397416)+(((-1.0)*x481))+x482);
op[10]=((((-1.0)*x486))+(((0.0042336)*x102))+(((-1.0)*x472))+(((-1.0)*gclwh7_10*x73))+x487+x462+((gclwh11_10*x95))+(((-1.0)*gclwh5_1*x110))+((gclwh9_10*x88))+(((-0.0042336)*x177)));
op[11]=((((-1.0)*gclwh11_13*x118))+(((0.01008)*x98))+(((0.042)*gclwh7_13*x73))+(((-1.0)*x476))+(((-0.0006048)*x178))+(((-1.0)*x459))+x240+((gclwh13_9*x179))+x466+(((0.084)*gclwh11_13*x81))+(((-0.01008)*x121))+(((-0.084)*gclwh7_13*x76))+(((-0.042)*gclwh11_13*x95))+(((0.084)*gclwh9_13*x83))+(((0.0006048)*x182))+(((-0.042)*gclwh9_13*x88)));
op[12]=((((-2.368)*gclwh14_8*x83))+(((-1.184)*gclwh4_8*x95))+(((2.368)*gclwh4_8*x81))+(((-1.0)*x467))+(((2.368)*pz*x74))+(((-0.0170496)*x206))+(((-1.184)*gclwh12_8*x73))+x457+x478+(((1.184)*gclwh14_8*x88))+(((-0.0170496)*x97))+(((0.28416)*x145))+(((0.28416)*x184))+(((-1.0)*x249))+(((0.0170496)*x117))+(((-1.0)*gclwh6_12*x82)));
op[13]=((-1.432132)+(((2.835464)*gclwh3_3*x76))+(((0.0204153408)*x172))+(((0.0204153408)*x164))+(((-1.0)*x490))+(((-1.0)*gclwh4_11*x95))+(((2.835464)*gclwh4_3*x81))+(((2.835464)*gclwh12_3*x76))+(((-1.0)*x471))+(((-1.0)*gclwh12_11*x73))+((gclwh14_11*x88))+(((2.835464)*gclwh1_3*x83))+x491+x464+(((-0.0204153408)*x204))+(((-1.432132)*gclwh1_3*x88))+(((1.403332)*gclwh14_3*x88))+(((-1.432132)*gclwh3_3*x73))+(((-1.403332)*gclwh12_3*x73))+(((-2.835464)*gclwh14_3*x83))+(((-1.0)*gclwh4_3*x187))+(((0.0204153408)*x189))+(((-1.403332)*gclwh4_3*x95)));
op[14]=((-0.160008)+(((-1.0)*x484))+x475);
op[15]=((((0.0164448)*gclwh14_2*r20))+(((-1.142)*gclwh1_2*x88))+(((-2.284)*gclwh14_2*x83))+(((0.0164448)*x133))+(((1.226)*gclwh12_8*x73))+(((-0.27408)*x175))+(((-1.142)*gclwh4_2*x95))+(((2.452)*gclwh14_8*x83))+(((0.0176544)*x206))+(((-1.0)*x474))+(((-1.0)*gclwh8_2*x139))+(((2.284)*gclwh3_2*x76))+(((-0.0164448)*x169))+(((-1.226)*gclwh14_8*x88))+(((-2.452)*gclwh4_8*x81))+(((0.0176544)*x97))+x469+(((-0.0176544)*x117))+(((0.0164448)*x180))+(((1.226)*gclwh4_8*x95))+(((-2.452)*pz*x74))+(((2.284)*gclwh12_2*x76))+(((2.284)*gclwh4_2*x81))+(((-0.0164448)*x101))+(((2.284)*gclwh1_2*x83))+(((-1.142)*gclwh3_2*x73))+(((0.27408)*x210))+(((1.142)*gclwh14_2*x88))+(((-1.142)*gclwh12_2*x73)));
op[16]=((((-1.0)*gclwh6_12*x179))+(((0.084)*gclwh14_8*x83))+(((0.042)*gclwh4_8*x95))+(((0.042)*gclwh12_8*x73))+(((-0.084)*pz*x74))+(((-1.0)*x478))+x457+x467+(((0.01008)*x184))+((gclwh4_8*x118))+(((-1.0)*x249))+(((-0.0006048)*x117))+(((0.01008)*x145))+(((0.0006048)*x97))+(((-0.084)*gclwh4_8*x81))+(((-0.042)*gclwh14_8*x88)));
op[17]=((0.03204)+(((0.000254016)*x189))+(((-0.03528)*gclwh14_3*x83))+(((0.03528)*gclwh4_3*x81))+(((0.00324)*gclwh14_3*x88))+(((-1.0)*x490))+(((0.03528)*gclwh1_3*x83))+(((0.03528)*gclwh12_3*x76))+(((-1.0)*gclwh14_11*x88))+(((-0.000254016)*x204))+(((-0.03204)*gclwh3_3*x73))+((gclwh12_11*x73))+(((-1.0)*x464))+(((-0.00324)*gclwh4_3*x95))+((gclwh4_11*x95))+x491+x471+(((0.03528)*gclwh3_3*x76))+(((-0.000254016)*x211))+(((-0.00324)*gclwh12_3*x73))+(((-0.03204)*gclwh1_3*x88))+(((0.000254016)*x164))+(((0.000254016)*x172)));
op[18]=((1.432132)+((gclwh15_10*x88))+(((-1.403332)*pp*x85))+(((-1.0)*gclwh13_10*x73))+(((-1.432132)*gclwh2_1*x73))+(((0.0204153408)*x113))+(((-1.0)*x489))+(((1.403332)*gclwh13_1*x73))+(((-1.0)*gclwh5_10*x95))+(((-1.432132)*gclwh0_1*x88))+(((-0.0204153408)*x85))+(((2.835464)*gclwh15_1*x83))+(((0.0204153408)*x122))+(((0.0204153408)*x125))+(((-1.0)*x470))+x492+x463+(((-2.835464)*gclwh13_1*x76))+(((-2.835464)*gclwh5_1*x81))+(((2.835464)*gclwh0_1*x83))+((gclwh5_1*x187))+(((1.403332)*gclwh5_1*x95))+(((2.835464)*gclwh2_1*x76)));
op[19]=((((1.184)*gclwh13_9*x73))+(((0.0170496)*x140))+(((-2.368)*gclwh13_9*x76))+(((-1.0)*x477))+(((1.184)*gclwh5_9*x95))+(((2.368)*gclwh15_9*x83))+(((-2.368)*gclwh5_9*x81))+(((-1.0)*x455))+x270+x465+(((-1.184)*gclwh15_9*x88))+(((-0.28416)*x214))+((gclwh7_13*x82))+(((-1.0)*gclwh15_9*x130))+(((-0.28416)*x127))+(((0.0170496)*x132)));
op[20]=((((0.696)*gclwh13_15*x76))+(((-1.0)*x95*x96))+(((-1.0)*x119*x73))+(((0.696)*gclwh5_15*x81))+(((-0.27408)*x146))+(((1.142)*gclwh5_0*x95))+(((-1.0)*gclwh5_15*x167))+(((-0.0176544)*x199))+((gclwh15_15*x208))+(((-2.452)*gclwh13_9*x76))+(((1.226)*gclwh5_9*x95))+(((-2.452)*gclwh5_9*x81))+(((1.142)*gclwh13_0*x73))+(((-1.226)*gclwh15_9*x88))+(((-1.142)*gclwh15_0*x88))+(((0.0176544)*x140))+(((-2.284)*gclwh13_0*x76))+(((0.0176544)*x132))+(((-1.0)*gclwh13_15*x168))+((gclwh9_0*x139))+((x142*x88))+(((-2.284)*gclwh5_0*x81))+(((0.0164448)*x185))+(((2.284)*gclwh2_0*x76))+(((2.284)*gclwh15_0*x83))+(((0.0164448)*x191))+(((-0.0164448)*x94))+(((2.284)*gclwh0_0*x83))+(((1.226)*gclwh13_9*x73))+(((-1.142)*gclwh0_0*x88))+(((0.0164448)*x176))+(((-1.142)*gclwh2_0*x73))+(((0.27408)*x75))+(((-0.696)*gclwh15_15*x83))+(((2.452)*gclwh15_9*x83))+(((0.0164448)*x109)));
op[21]=((-0.160008)+(((-4.0)*gclwh5_10*x81))+((gclwh5_10*x80))+(((4.0)*gclwh15_10*x83))+((gclwh11_10*x143))+((x115*x73))+(((-4.0)*gclwh13_10*x76))+(((-1.0)*x112*x88))+((x192*x95))+(((-1.0)*gclwh15_10*x205))+(((-1.0)*gclwh7_10*x165))+((gclwh9_10*x136))+((gclwh13_10*x203)));
op[22]=((-0.03204)+((gclwh5_10*x95))+(((0.000254016)*x195))+(((-1.0)*x489))+(((-0.03528)*gclwh5_1*x81))+((gclwh13_10*x73))+(((0.03528)*gclwh15_1*x83))+(((0.00324)*gclwh13_1*x73))+(((-0.03528)*gclwh13_1*x76))+(((0.03528)*gclwh2_1*x76))+(((-1.0)*x463))+(((-0.000254016)*x85))+(((-0.00324)*pp*x85))+x492+x470+(((0.000254016)*x125))+(((0.000254016)*x122))+(((0.00324)*gclwh5_1*x95))+(((0.03528)*gclwh0_1*x83))+(((-0.03204)*gclwh0_1*x88))+(((-1.0)*gclwh15_10*x88))+(((0.000254016)*x113))+(((-0.03204)*gclwh2_1*x73)));
op[23]=((((0.0006048)*x199))+(((-1.0)*gclwh5_9*x118))+(((0.042)*gclwh15_9*x88))+(((-1.0)*x465))+(((-1.0)*x455))+x270+((gclwh7_13*x179))+(((-0.01008)*x214))+x477+(((-0.042)*gclwh5_9*x95))+(((-0.0006048)*x132))+(((-0.01008)*x127))+(((-0.084)*gclwh15_9*x83))+(((0.084)*gclwh5_9*x81))+(((0.084)*gclwh13_9*x76))+(((-0.042)*gclwh13_9*x73)));
op[24]=((-0.824064)+(((-1.0)*x480))+x483);
op[25]=((((4.736)*gclwh6_2*x76))+(((-4.736)*gclwh8_2*x83))+(((-1.0)*gclwh12_2*x193))+(((-0.0340992)*x135))+((gclwh8_2*x116))+(((-0.56832)*x114))+(((-2.368)*gclwh6_2*x73))+(((-1.0)*x456))+x278+(((2.368)*gclwh8_2*x88))+(((-4.736)*gclwh10_2*x81))+(((2.368)*gclwh10_2*x95))+((gclwh14_2*x170))+(((0.0340992)*x111)));
op[26]=((((0.0328896)*x153))+(((-4.568)*gclwh10_12*x81))+(((4.568)*gclwh6_12*x76))+(((0.16704)*x160))+(((0.0328896)*x84))+(((-0.16704)*x212))+(((-4.568)*gclwh8_12*x83))+(((-0.16704)*x207))+(((2.284)*gclwh8_12*x88))+(((-2.284)*gclwh6_12*x73))+(((-0.0328896)*x147))+(((2.284)*pp*x84)));
op[27]=((((-0.0576)*gclwh8_11*r20))+(((-1.0)*gclwh10_11*x107))+(((-1.0)*x188*x95))+(((0.96)*x79))+(((0.96)*x78))+(((-1.0)*gclwh14_11*x156))+(((8.0)*gclwh8_11*x83))+(((8.0)*gclwh10_11*x81))+(((-1.0)*x137*x88))+(((0.0576)*gclwh6_11*r21))+((x200*x73))+(((-8.0)*gclwh6_11*x76)));
op[28]=((-0.029232)+(((-1.0)*x483))+x480);
op[29]=((((-0.084)*gclwh6_2*x73))+(((0.0012096)*x154))+(((-0.168)*gclwh8_2*x83))+(((0.0012096)*x111))+((gclwh14_2*x126))+(((-0.0012096)*x135))+(((0.168)*gclwh6_2*x76))+x456+(((0.084)*gclwh8_2*x88))+(((0.084)*gclwh10_2*x95))+(((-1.0)*x278))+(((-0.168)*gclwh10_2*x81))+(((-0.02016)*x198))+(((-0.02016)*x114)));
op[30]=((((4.736)*gclwh7_0*x76))+(((0.0340992)*x138))+(((-4.736)*gclwh11_0*x81))+(((-0.56832)*x100))+(((-4.736)*gclwh9_0*x83))+((gclwh15_0*x170))+(((2.368)*gclwh9_0*x88))+x458+(((-0.0340992)*x90))+(((-1.0)*x286))+((gclwh9_0*x116))+(((2.368)*gclwh11_0*x95))+(((-0.56832)*x158))+(((-2.368)*gclwh7_0*x73)));
op[31]=((-0.824064)+(((-1.0)*x481))+x482);
op[32]=((((-0.96)*x92))+((gclwh15_10*x156))+(((-0.96)*x86))+((x124*x95))+(((0.0576)*x152))+((x106*x88))+((gclwh11_10*x107))+(((8.0)*gclwh7_10*x76))+(((-1.0)*x149*x73))+(((-0.0576)*x151))+(((-8.0)*gclwh11_10*x81))+(((-8.0)*gclwh9_10*x83)));
op[33]=((((0.0328896)*x183))+(((-0.16704)*x157))+(((-4.568)*gclwh9_13*x83))+(((2.284)*gclwh9_13*x88))+(((0.16704)*x162))+(((-0.16704)*x77))+(((4.568)*gclwh7_13*x76))+(((-0.0328896)*x182))+(((-4.568)*gclwh11_13*x81))+(((2.284)*gclwh11_13*x95))+(((-2.284)*gclwh7_13*x73))+(((0.0328896)*x178)));
op[34]=((((0.0012096)*x155))+(((0.0012096)*x138))+(((-0.084)*gclwh7_0*x73))+((gclwh15_0*x126))+(((-0.168)*gclwh9_0*x83))+(((-1.0)*x458))+(((0.084)*gclwh11_0*x95))+x286+(((-0.02016)*x158))+(((0.084)*gclwh9_0*x88))+(((-0.0012096)*x90))+(((-0.168)*gclwh11_0*x81))+(((-0.02016)*x100))+(((0.168)*gclwh7_0*x76)));
op[35]=((-0.029232)+(((-1.0)*x482))+x481);
op[36]=((2.74316)+(((-1.0)*x484))+x475);
op[37]=((((-0.0340992)*x101))+(((2.368)*gclwh14_2*x88))+(((0.0340992)*x133))+(((-1.0)*gclwh8_2*x170))+((gclwh6_2*x193))+(((4.736)*gclwh4_2*x81))+(((-2.368)*gclwh1_2*x88))+(((-2.368)*gclwh3_2*x73))+((gclwh14_2*x116))+(((-1.0)*x474))+(((4.736)*gclwh1_2*x83))+(((-4.736)*gclwh14_2*x83))+x469+(((-2.368)*gclwh12_2*x73))+((gclwh1_2*x116))+(((-2.368)*gclwh4_2*x95))+(((4.736)*gclwh3_2*x76))+(((-0.0340992)*x169))+(((-0.56832)*x175))+(((4.736)*gclwh12_2*x76)));
IkReal x493=pz*pz;
IkReal x494=pp*pp;
IkReal x495=((0.24)*pz);
IkReal x496=(gclwh4_8*rxp2_2);
IkReal x497=(pp*r21);
IkReal x498=(gclwh12_8*npy);
IkReal x499=(gclwh11_0*rxp2_2);
IkReal x500=(npy*pz);
IkReal x501=((4.0)*gclwh12_11);
IkReal x502=(gclwh4_11*rxp2_2);
IkReal x503=((0.24)*rxp1_2);
IkReal x504=((0.0288)*r22);
IkReal x505=(npz*pz);
IkReal x506=((0.28416)*rxp1_2);
IkReal x507=(npx*pz);
IkReal x508=((0.696)*gclwh5_15);
IkReal x509=(pp*r22);
IkReal x510=((0.348)*gclwh12_14);
IkReal x511=((2.0)*gclwh11_10);
IkReal x512=((0.0012096)*r21);
IkReal x513=((0.48)*rxp1_2);
IkReal x514=((0.0144)*pz);
IkReal x515=(gclwh15_0*r20);
IkReal x516=((0.348)*gclwh5_15);
IkReal x517=(gclwh12_8*r21);
IkReal x518=(gclwh5_9*rxp2_2);
IkReal x519=((2.0)*gclwh4_11);
IkReal x520=(gclwh13_0*rxp1_2);
IkReal x521=(gclwh12_2*r21);
IkReal x522=(gclwh15_1*rxp0_2);
IkReal x523=((0.24)*pp);
IkReal x524=(gclwh9_0*rxp0_2);
IkReal x525=(pp*r20);
IkReal x526=((0.0340992)*r21);
IkReal x527=((0.0164448)*r21);
IkReal x528=((1.0)*pz);
IkReal x529=((0.29424)*rxp1_2);
IkReal x530=((2.0)*gclwh9_10);
IkReal x531=(gclwh0_0*r20);
IkReal x532=(gclwh6_2*rxp1_2);
IkReal x533=((0.0042336)*rxp2_2);
IkReal x534=((2.0)*gclwh15_10);
IkReal x535=(gclwh13_1*r21);
IkReal x536=((0.696)*gclwh12_14);
IkReal x537=((0.0100224)*r20);
IkReal x538=((4.0)*gclwh14_11);
IkReal x539=((0.54816)*rxp0_2);
IkReal x540=((0.0100224)*r22);
IkReal x541=(gclwh5_10*rxp2_2);
IkReal x542=(gclwh4_2*rxp2_2);
IkReal x543=((2.0)*gclwh13_10);
IkReal x544=(gclwh7_13*rxp1_2);
IkReal x545=(gclwh14_8*r20);
IkReal x546=((0.0006048)*r22);
IkReal x547=((0.0100224)*r21);
IkReal x548=((0.348)*gclwh13_15);
IkReal x549=((0.0012096)*r22);
IkReal x550=((2.0)*gclwh10_11);
IkReal x551=(gclwh15_9*rxp0_2);
IkReal x552=(gclwh2_1*r21);
IkReal x553=((2.0)*pp);
IkReal x554=(gclwh0_1*r20);
IkReal x555=(gclwh11_13*rxp2_2);
IkReal x556=(gclwh14_8*rxp0_2);
IkReal x557=((2.0)*gclwh7_10);
IkReal x558=((0.0170496)*r20);
IkReal x559=(gclwh13_9*r21);
IkReal x560=((4.0)*gclwh15_10);
IkReal x561=((0.04176)*rxp1_2);
IkReal x562=((0.04176)*rxp0_2);
IkReal x563=(gclwh10_2*r22);
IkReal x564=((0.696)*gclwh13_15);
IkReal x565=((0.48)*rxp0_2);
IkReal x566=((0.27408)*rxp0_2);
IkReal x567=(gclwh11_0*r22);
IkReal x568=(gclwh5_9*r22);
IkReal x569=((0.04176)*rxp2_2);
IkReal x570=((0.348)*gclwh15_15);
IkReal x571=((0.48)*rxp2_2);
IkReal x572=((0.0144)*r20);
IkReal x573=(gclwh8_12*rxp0_2);
IkReal x574=(gclwh7_0*rxp1_2);
IkReal x575=((0.696)*gclwh4_14);
IkReal x576=((0.0006048)*r21);
IkReal x577=((0.0170496)*r22);
IkReal x578=((0.0025056)*r20);
IkReal x579=((0.0025056)*r21);
IkReal x580=((0.0006048)*r20);
IkReal x581=(gclwh8_2*r20);
IkReal x582=(gclwh9_0*r20);
IkReal x583=(gclwh5_0*rxp2_2);
IkReal x584=((0.348)*gclwh14_14);
IkReal x585=((0.0144)*r22);
IkReal x586=((4.0)*gclwh4_11);
IkReal x587=((0.96)*rxp1_2);
IkReal x588=((0.08352)*rxp0_2);
IkReal x589=((0.96)*rxp0_2);
IkReal x590=((2.0)*gclwh6_11);
IkReal x591=((0.0012096)*r20);
IkReal x592=(gclwh4_14*r22);
IkReal x593=((0.0050112)*r21);
IkReal x594=((2.0)*gclwh12_11);
IkReal x595=((0.000254016)*r20);
IkReal x596=(gclwh12_11*r21);
IkReal x597=((2.0)*gclwh14_11);
IkReal x598=(gclwh10_2*rxp2_2);
IkReal x599=(gclwh4_3*r22);
IkReal x600=((0.0288)*r20);
IkReal x601=(gclwh4_2*r22);
IkReal x602=((0.0042336)*rxp1_2);
IkReal x603=(gclwh1_2*r20);
IkReal x604=((0.08352)*rxp2_2);
IkReal x605=(gclwh4_3*rxp2_2);
IkReal x606=(gclwh13_10*r21);
IkReal x607=(gclwh10_12*rxp2_2);
IkReal x608=((0.0170496)*r21);
IkReal x609=((2.0)*gclwh8_11);
IkReal x610=((0.696)*gclwh14_14);
IkReal x611=((0.696)*gclwh15_15);
IkReal x612=(gclwh3_3*r21);
IkReal x613=((0.348)*gclwh4_14);
IkReal x614=((4.0)*gclwh5_10);
IkReal x615=((2.0)*gclwh5_10);
IkReal x616=((0.34025568)*rxp1_2);
IkReal x617=(gclwh5_1*r22);
IkReal x618=((4.0)*gclwh13_10);
IkReal x619=(gclwh5_1*rxp2_2);
IkReal x620=(gclwh14_3*rxp0_2);
IkReal x621=(gclwh15_9*r20);
IkReal x622=((0.0144)*r21);
IkReal x623=(gclwh11_10*rxp2_2);
IkReal x624=((0.24)*rxp0_2);
IkReal x625=(gclwh12_3*r21);
IkReal x626=(gclwh14_2*r20);
IkReal x627=(gclwh8_2*rxp0_2);
IkReal x628=(gclwh5_15*r22);
IkReal x629=((0.0576)*r22);
IkReal x630=(gclwh12_2*rxp1_2);
IkReal x631=(gclwh10_11*rxp2_2);
IkReal x632=(gclwh5_0*r22);
IkReal x633=((0.0025056)*r22);
IkReal x634=((0.08352)*rxp1_2);
IkReal x635=(gclwh4_8*r22);
IkReal x636=((0.0576)*r20);
IkReal x637=(gclwh13_9*rxp1_2);
IkReal x638=((0.0288)*r21);
IkReal x639=((0.0050112)*r20);
IkReal x640=((0.0204153408)*r20);
IkReal x641=(gclwh6_12*rxp1_2);
IkReal x642=(gclwh12_8*rxp1_2);
IkReal x643=(gclwh9_13*rxp0_2);
IkReal x644=((0.0050112)*x628);
IkReal x645=(gclwh13_15*x593);
IkReal x646=(gclwh15_15*x639);
IkReal x647=(gclwh7_10*x513);
IkReal x648=(gclwh15_10*x600);
IkReal x649=(gclwh9_10*x565);
IkReal x650=(gclwh5_10*x504);
IkReal x651=((0.0288)*x606);
IkReal x652=(gclwh11_10*x571);
IkReal x653=(gclwh6_5*x579);
IkReal x654=(gclwh12_14*x561);
IkReal x655=(gclwh4_14*x569);
IkReal x656=(gclwh10_5*x633);
IkReal x657=(gclwh14_14*x562);
IkReal x658=(gclwh8_5*x578);
IkReal x659=(gclwh14_11*x624);
IkReal x660=((0.0288)*x496);
IkReal x661=(gclwh10_11*x585);
IkReal x662=((0.0288)*x642);
IkReal x663=(gclwh8_11*x572);
IkReal x664=(gclwh6_11*x622);
IkReal x665=((0.0288)*x556);
IkReal x666=((0.24)*x502);
IkReal x667=(gclwh12_11*x503);
IkReal x668=(gclwh7_10*x622);
IkReal x669=((0.0288)*x637);
IkReal x670=(gclwh13_10*x503);
IkReal x671=((0.0288)*x518);
IkReal x672=((0.24)*x541);
IkReal x673=(gclwh9_10*x572);
IkReal x674=(gclwh15_10*x624);
IkReal x675=((0.0288)*x551);
IkReal x676=(gclwh11_10*x585);
IkReal x677=(gclwh7_7*x579);
IkReal x678=(gclwh13_15*x561);
IkReal x679=(gclwh5_15*x569);
IkReal x680=(gclwh9_7*x578);
IkReal x681=(gclwh11_7*x633);
IkReal x682=(gclwh15_15*x562);
IkReal x683=(gclwh8_11*x565);
IkReal x684=(gclwh10_11*x571);
IkReal x685=((0.0288)*x596);
IkReal x686=(gclwh4_11*x504);
IkReal x687=((0.0050112)*x592);
IkReal x688=(gclwh12_14*x593);
IkReal x689=(gclwh14_14*x639);
IkReal x690=(gclwh8_5*x562);
IkReal x691=(gclwh12_14*x579);
IkReal x692=(gclwh10_5*x569);
IkReal x693=((0.0025056)*x592);
IkReal x694=(gclwh14_14*x578);
IkReal x695=(gclwh6_5*x561);
IkReal x696=(gclwh6_11*x503);
IkReal x697=((0.001728)*x517);
IkReal x698=(gclwh14_11*x572);
IkReal x699=((0.001728)*x635);
IkReal x700=((0.24)*x631);
IkReal x701=((0.0144)*x596);
IkReal x702=((0.001728)*x545);
IkReal x703=(gclwh4_11*x585);
IkReal x704=(gclwh8_11*x624);
IkReal x705=(gclwh7_10*x503);
IkReal x706=((0.001728)*x621);
IkReal x707=(gclwh15_10*x572);
IkReal x708=((0.0144)*x606);
IkReal x709=((0.001728)*x559);
IkReal x710=(gclwh5_10*x585);
IkReal x711=((0.24)*x623);
IkReal x712=((0.001728)*x568);
IkReal x713=(gclwh9_10*x624);
IkReal x714=(gclwh7_7*x561);
IkReal x715=(gclwh15_15*x578);
IkReal x716=(gclwh9_7*x562);
IkReal x717=((0.0025056)*x628);
IkReal x718=(gclwh11_7*x569);
IkReal x719=(gclwh13_15*x579);
IkReal x720=(pz*x525);
IkReal x721=(r20*x494);
IkReal x722=((2.0)*x493);
IkReal x723=((1.0)*x494);
IkReal x724=(x497*x548);
IkReal x725=(x509*x516);
IkReal x726=(x507*x611);
IkReal x727=(x500*x564);
IkReal x728=(x505*x508);
IkReal x729=(x525*x570);
IkReal x730=(x525*x534);
IkReal x731=(x505*x614);
IkReal x732=(x500*x618);
IkReal x733=(x497*x543);
IkReal x734=(x507*x560);
IkReal x735=(x509*x615);
IkReal x736=((0.348)*gclwh8_5*x507);
IkReal x737=((0.174)*gclwh6_5*x497);
IkReal x738=((0.348)*gclwh10_5*x505);
IkReal x739=((0.348)*gclwh6_5*x500);
IkReal x740=((0.174)*gclwh10_5*x509);
IkReal x741=((0.174)*gclwh8_5*x525);
IkReal x742=(gclwh14_2*rxp0_2*x495);
IkReal x743=(x500*x590);
IkReal x744=(x523*x605);
IkReal x745=(gclwh10_2*pz*x509);
IkReal x746=(x514*x581);
IkReal x747=(gclwh12_3*pp*x503);
IkReal x748=(x514*x563);
IkReal x749=(gclwh8_2*x720);
IkReal x750=(x495*x630);
IkReal x751=(x495*x542);
IkReal x752=(x505*x550);
IkReal x753=(x523*x620);
IkReal x754=(x507*x609);
IkReal x755=(gclwh6_2*r21*x514);
IkReal x756=(gclwh13_1*pp*x503);
IkReal x757=(x505*x511);
IkReal x758=(x523*x619);
IkReal x759=(x507*x530);
IkReal x760=(gclwh15_0*rxp0_2*x495);
IkReal x761=(gclwh11_0*pz*x509);
IkReal x762=(x514*x582);
IkReal x763=(x514*x567);
IkReal x764=(gclwh9_0*x720);
IkReal x765=(x495*x520);
IkReal x766=(x495*x583);
IkReal x767=(gclwh7_0*r21*x514);
IkReal x768=(x522*x523);
IkReal x769=(x500*x557);
IkReal x770=((0.174)*gclwh7_7*x497);
IkReal x771=((0.348)*gclwh9_7*x507);
IkReal x772=((0.348)*gclwh11_7*x505);
IkReal x773=((0.174)*gclwh11_7*x509);
IkReal x774=((0.348)*gclwh7_7*x500);
IkReal x775=((0.174)*gclwh9_7*x525);
IkReal x776=(x509*x519);
IkReal x777=(x497*x594);
IkReal x778=(x507*x538);
IkReal x779=(x497*x510);
IkReal x780=(x507*x610);
IkReal x781=(x509*x613);
IkReal x782=(x505*x575);
IkReal x783=(x525*x584);
IkReal x784=(x500*x536);
IkReal x785=((0.174)*gclwh12_14*x497);
IkReal x786=(x507*x584);
IkReal x787=((0.174)*gclwh4_14*x509);
IkReal x788=(x500*x510);
IkReal x789=((0.174)*gclwh14_14*x525);
IkReal x790=(x505*x613);
IkReal x791=(gclwh14_2*x720);
IkReal x792=(x494*x625);
IkReal x793=((0.12)*gclwh12_8*x497);
IkReal x794=(gclwh14_8*npx*x495);
IkReal x795=(x495*x532);
IkReal x796=((0.12)*gclwh4_8*x509);
IkReal x797=(x505*x519);
IkReal x798=(x514*x626);
IkReal x799=(x514*x603);
IkReal x800=(x494*x612);
IkReal x801=(gclwh1_3*x721);
IkReal x802=(x494*x599);
IkReal x803=(gclwh3_2*r21*x514);
IkReal x804=(x500*x594);
IkReal x805=(x514*x521);
IkReal x806=(gclwh4_8*npz*x495);
IkReal x807=(x507*x597);
IkReal x808=(x514*x601);
IkReal x809=(x495*x598);
IkReal x810=((0.12)*gclwh14_8*x525);
IkReal x811=(x495*x498);
IkReal x812=(x495*x627);
IkReal x813=(gclwh13_0*r21*x514);
IkReal x814=(gclwh15_1*x721);
IkReal x815=(x514*x632);
IkReal x816=(gclwh5_0*pz*x509);
IkReal x817=(gclwh13_0*pz*x497);
IkReal x818=(x514*x531);
IkReal x819=(gclwh2_0*r21*x514);
IkReal x820=((0.12)*gclwh15_9*x525);
IkReal x821=(x494*x552);
IkReal x822=(x495*x499);
IkReal x823=(x505*x615);
IkReal x824=(x500*x543);
IkReal x825=(gclwh5_9*npz*x495);
IkReal x826=(gclwh13_9*npy*x495);
IkReal x827=(x495*x524);
IkReal x828=(x494*x554);
IkReal x829=((0.12)*gclwh13_9*x497);
IkReal x830=(gclwh15_9*npx*x495);
IkReal x831=(x514*x515);
IkReal x832=(x507*x534);
IkReal x833=((0.12)*gclwh5_9*x509);
IkReal x834=(x495*x574);
IkReal x835=((0.174)*gclwh15_15*x525);
IkReal x836=(x505*x516);
IkReal x837=(x500*x548);
IkReal x838=(x507*x570);
IkReal x839=((0.174)*gclwh13_15*x497);
IkReal x840=((0.174)*gclwh5_15*x509);
IkReal x841=(gclwh6_2*npy*x722);
IkReal x842=(gclwh6_2*x497*x528);
IkReal x843=(gclwh10_2*npz*x722);
IkReal x844=(gclwh8_2*npx*x722);
IkReal x845=(gclwh7_0*npy*x722);
IkReal x846=(gclwh9_0*npx*x722);
IkReal x847=(gclwh11_0*npz*x722);
IkReal x848=(gclwh7_0*x497*x528);
IkReal x849=(gclwh12_2*npy*x722);
IkReal x850=(gclwh3_2*npy*x722);
IkReal x851=(gclwh1_2*npx*x722);
IkReal x852=(gclwh14_3*x507*x553);
IkReal x853=(gclwh4_2*npz*x722);
IkReal x854=(gclwh4_3*x505*x553);
IkReal x855=(gclwh12_2*x497*x528);
IkReal x856=(gclwh1_2*x525*x528);
IkReal x857=(gclwh3_3*x500*x553);
IkReal x858=(gclwh4_2*x509*x528);
IkReal x859=(gclwh1_3*x507*x553);
IkReal x860=(gclwh3_2*x497*x528);
IkReal x861=(gclwh12_3*x500*x553);
IkReal x862=(gclwh14_2*npx*x722);
IkReal x863=((1.0)*gclwh14_3*x721);
IkReal x864=(gclwh0_0*npx*x722);
IkReal x865=(gclwh2_0*npy*x722);
IkReal x866=(gclwh5_1*x505*x553);
IkReal x867=(gclwh13_1*x500*x553);
IkReal x868=(gclwh15_0*npx*x722);
IkReal x869=(gclwh2_1*x500*x553);
IkReal x870=(gclwh0_1*x507*x553);
IkReal x871=(gclwh5_0*npz*x722);
IkReal x872=(gclwh13_0*npy*x722);
IkReal x873=(gclwh0_0*x525*x528);
IkReal x874=(pp*x515*x528);
IkReal x875=(gclwh2_0*x497*x528);
IkReal x876=(x535*x723);
IkReal x877=(x617*x723);
IkReal x878=(gclwh15_1*x507*x553);
IkReal x879=(x678+x679);
IkReal x880=(x718+x716);
IkReal x881=(x654+x655);
IkReal x882=(x690+x692);
IkReal x883=(x673+x676+x674+x769);
IkReal x884=(x659+x661+x663+x743);
IkReal x885=(x707+x705+x823+x824);
IkReal x886=(x696+x698+x797+x804);
IkReal x887=(x689+x782+x783+x784);
IkReal x888=(x646+x727+x728+x729);
IkReal x889=(x677+x772+x771+x770);
IkReal x890=(x715+x835+x836+x837);
IkReal x891=(x653+x737+x736+x738);
IkReal x892=(x694+x790+x788+x789);
IkReal x893=(x711+x710+x713+x708+x832);
IkReal x894=(x703+x700+x701+x704+x807);
IkReal x895=(x668+x672+x670+x757+x759);
IkReal x896=(x664+x667+x666+x754+x752);
IkReal x897=(((gclwh6_11*x513))+((x500*x501))+((x505*x586))+((x525*x597))+((gclwh14_11*x600)));
IkReal x898=(x647+x648+x732+x731+x730);
IkReal x899=(x681+x680+x773+x775+x774);
IkReal x900=(x656+x658+x739+x740+x741);
IkReal x901=(x645+x644+x724+x725+x726);
IkReal x902=(x688+x687+x779+x780+x781);
IkReal x903=(x719+x717+x838+x839+x840);
IkReal x904=(x691+x693+x786+x787+x785);
IkReal x905=(x649+x650+x651+x652+x735+x734+x733);
IkReal x906=(x683+x686+x685+x684+x777+x776+x778);
IkReal x907=(x675+x768+x765+x766+x767+x847+x846+x848);
IkReal x908=(x665+x755+x751+x750+x753+x843+x842+x844);
IkReal x909=(x669+x671+x756+x758+x764+x760+x761+x762+x763+x845);
IkReal x910=(x660+x662+x746+x747+x744+x745+x742+x748+x749+x841);
IkReal x911=(x712+x709+x869+x878+x870+x871+x872+x873+x874+x875+x876+x877+x829+x834+x830+x831+x833);
IkReal x912=(x702+x856+x857+x854+x855+x858+x859+x863+x862+x861+x860+x812+x810+x811+x809+x808+x805+x806);
IkReal x913=(x495+x697+x699+x791+x793+x792+x795+x794+x796+x799+x798+x852+x853+x850+x851+x849+x801+x800+x803+x802);
IkReal x914=(x495+x706+x868+x867+x866+x865+x864+x818+x819+x816+x817+x814+x815+x813+x828+x822+x821+x820+x827+x826+x825);
op[38]=(((x525*x610))+(((-1.0)*x497*x536))+(((-0.54816)*x607))+(((0.54816)*x641))+(((-1.0)*gclwh4_14*x540))+(((-1.392)*gclwh14_14*x507))+(((-1.0)*gclwh12_14*x547))+(((1.392)*gclwh12_14*x500))+(((-1.0)*gclwh8_12*x539))+(((1.392)*gclwh4_14*x505))+((gclwh14_14*x537))+(((-1.0)*x509*x575)));
op[39]=((-0.077808)+((x509*x586))+(((0.96)*x631))+((gclwh8_11*x589))+(((-1.0)*x525*x538))+(((-1.0)*gclwh6_11*x587))+((x497*x501))+(((0.0576)*x596))+((gclwh4_11*x629))+(((8.0)*gclwh14_11*x507))+(((-8.0)*gclwh4_11*x505))+(((-8.0)*gclwh12_11*x500))+(((-1.0)*gclwh14_11*x636)));
op[40]=((0.057024)+(((-1.0)*x897))+x906);
op[41]=(((gclwh1_2*x591))+(((0.168)*gclwh3_2*x500))+(((-0.02016)*x627))+((gclwh14_2*x591))+(((-1.0)*x887))+(((-0.02016)*x598))+(((0.084)*gclwh14_2*x525))+(((-0.084)*gclwh4_2*x509))+(((0.168)*gclwh4_2*x505))+(((-0.084)*gclwh3_2*x497))+(((-0.084)*gclwh12_2*x497))+(((-0.168)*gclwh14_2*x507))+(((0.02016)*x532))+(((-0.084)*gclwh1_2*x525))+(((-1.0)*gclwh12_2*x512))+x902+(((0.168)*gclwh12_2*x500))+((gclwh3_2*x512))+(((-1.0)*gclwh4_2*x549))+(((0.168)*gclwh1_2*x507)));
op[42]=((((-2.368)*pp*x515))+((gclwh13_0*x526))+(((-2.368)*gclwh0_0*x525))+(((-0.0340992)*x515))+(((-4.736)*gclwh5_0*x505))+(((-0.56832)*x574))+((gclwh2_0*x526))+(((-1.0)*x901))+(((4.736)*gclwh0_0*x507))+(((0.0340992)*x531))+(((-4.736)*gclwh13_0*x500))+(((2.368)*gclwh13_0*x497))+x888+(((-2.368)*gclwh2_0*x497))+(((0.56832)*x499))+(((2.368)*gclwh5_0*x509))+(((4.736)*gclwh15_0*x507))+(((4.736)*gclwh2_0*x500))+(((0.0340992)*x632))+(((0.56832)*x524)));
op[43]=((2.74316)+(((-1.0)*x898))+x905);
op[44]=((0.077808)+(((-1.0)*gclwh7_10*x587))+(((0.96)*x623))+(((-8.0)*gclwh5_10*x505))+(((8.0)*gclwh15_10*x507))+((gclwh9_10*x589))+(((-1.0)*x525*x560))+(((-8.0)*gclwh13_10*x500))+(((0.0576)*x606))+((x509*x614))+((x497*x618))+(((-1.0)*gclwh15_10*x636))+((gclwh5_10*x629)));
op[45]=((((-1.392)*gclwh13_15*x500))+((gclwh5_15*x540))+(((-1.0)*gclwh15_15*x537))+(((-1.392)*gclwh5_15*x505))+((x508*x509))+(((-0.54816)*x544))+((gclwh13_15*x547))+(((0.54816)*x555))+(((-1.0)*x525*x611))+(((1.392)*gclwh15_15*x507))+((x497*x564))+((gclwh9_13*x539)));
op[46]=(((gclwh2_0*x512))+(((0.168)*gclwh15_0*x507))+(((0.0012096)*x531))+(((0.084)*gclwh5_0*x509))+((gclwh13_0*x512))+(((-0.0012096)*x515))+((gclwh5_0*x549))+(((0.02016)*x499))+(((-0.168)*gclwh5_0*x505))+(((-1.0)*x888))+(((0.168)*gclwh2_0*x500))+(((-0.02016)*x574))+(((0.168)*gclwh0_0*x507))+(((0.084)*gclwh13_0*x497))+(((-0.084)*pp*x515))+(((-0.084)*gclwh0_0*x525))+(((0.02016)*x524))+(((-0.168)*gclwh13_0*x500))+x901+(((-0.084)*gclwh2_0*x497)));
op[47]=((0.057024)+(((-1.0)*x905))+x898);
op[48]=(((gclwh8_12*x558))+(((-1.184)*gclwh6_12*x497))+(((-2.368)*gclwh8_12*x507))+(((-0.28416)*x496))+(((-1.0)*gclwh6_12*x608))+(((-1.0)*x900))+(((-1.0)*x881))+(((1.184)*gclwh10_12*x509))+(((2.368)*gclwh6_12*x500))+x657+(((-1.0)*gclwh12_8*x506))+((gclwh10_12*x577))+x891+(((-2.368)*gclwh10_12*x505))+(((1.184)*gclwh8_12*x525))+(((0.28416)*x556)));
op[49]=((((-1.0)*gclwh12_3*x616))+(((-0.34025568)*x605))+(((-1.0)*gclwh10_11*x509))+(((-1.0)*x908))+((gclwh6_11*x497))+(((-1.0)*x884))+(((-1.0)*gclwh8_11*x525))+(((0.34025568)*x620))+x896+x910);
op[50]=((0.397416)+((x497*x590))+(((0.48)*x502))+((gclwh12_11*x513))+((gclwh6_11*x638))+(((-4.0)*gclwh6_11*x500))+(((4.0)*gclwh8_11*x507))+(((-1.0)*x509*x550))+(((4.0)*gclwh10_11*x505))+(((-1.0)*gclwh10_11*x504))+(((-1.0)*gclwh14_11*x565))+(((-1.0)*gclwh8_11*x600))+(((-1.0)*x525*x609)));
op[51]=((((-1.0)*gclwh14_14*x588))+((gclwh12_14*x634))+(((-1.142)*gclwh10_2*x509))+(((-1.0)*gclwh14_2*x566))+((gclwh4_14*x604))+(((-0.0164448)*x581))+(((0.27408)*x630))+(((2.284)*gclwh8_2*x507))+(((2.284)*gclwh10_2*x505))+(((-2.284)*gclwh6_2*x500))+(((0.29424)*x496))+((gclwh6_2*x527))+(((-0.29424)*x556))+(((-1.142)*gclwh8_2*x525))+(((0.27408)*x542))+(((-0.0164448)*x563))+(((1.142)*gclwh6_2*x497))+((gclwh12_8*x529)));
op[52]=((((0.042)*gclwh8_12*x525))+(((-1.0)*gclwh6_12*x576))+(((0.084)*gclwh6_12*x500))+(((-0.042)*gclwh6_12*x497))+((gclwh10_12*x546))+((gclwh8_12*x580))+(((-1.0)*x900))+(((0.01008)*x642))+(((-0.084)*gclwh10_12*x505))+(((-0.01008)*x556))+(((-1.0)*x657))+(((-0.084)*gclwh8_12*x507))+x881+x891+(((0.01008)*x496))+(((0.042)*gclwh10_12*x509)));
op[53]=(((gclwh8_11*x525))+(((-1.0)*gclwh12_3*x602))+(((-1.0)*x908))+(((-1.0)*x896))+((gclwh10_11*x509))+(((-1.0)*gclwh4_3*x533))+x884+(((-1.0)*gclwh6_11*x497))+x910+(((0.0042336)*x620)));
op[54]=(((gclwh11_10*x509))+(((-1.0)*gclwh13_1*x616))+(((-1.0)*x907))+(((0.34025568)*x522))+(((-1.0)*x895))+(((-1.0)*gclwh7_10*x497))+((gclwh9_10*x525))+x883+x909+(((-0.34025568)*x619)));
op[55]=(((gclwh9_13*x558))+(((-2.368)*gclwh11_13*x505))+(((-2.368)*gclwh9_13*x507))+(((-1.0)*x899))+(((2.368)*gclwh7_13*x500))+((gclwh11_13*x577))+(((-1.0)*gclwh13_9*x506))+(((-1.0)*gclwh7_13*x608))+(((-0.28416)*x518))+(((-1.184)*gclwh7_13*x497))+(((1.184)*gclwh11_13*x509))+x682+x889+(((1.184)*gclwh9_13*x525))+(((0.28416)*x551))+(((-1.0)*x879)));
op[56]=((((-1.142)*gclwh11_0*x509))+(((0.27408)*x583))+(((-0.0164448)*x582))+(((2.284)*gclwh9_0*x507))+(((-1.142)*gclwh9_0*x525))+(((1.142)*gclwh7_0*x497))+((gclwh7_0*x527))+(((-1.0)*gclwh13_15*x634))+(((0.29424)*x551))+(((-1.0)*gclwh13_9*x529))+((gclwh15_15*x588))+(((-0.0164448)*x567))+(((2.284)*gclwh11_0*x505))+(((0.27408)*x520))+(((-2.284)*gclwh7_0*x500))+(((-0.29424)*x518))+(((-1.0)*gclwh5_15*x604))+(((-1.0)*gclwh15_0*x566)));
op[57]=((0.397416)+(((-1.0)*gclwh9_10*x600))+(((4.0)*gclwh11_10*x505))+(((-1.0)*gclwh15_10*x565))+(((-1.0)*x525*x530))+(((0.48)*x541))+((gclwh13_10*x513))+((x497*x557))+(((4.0)*gclwh9_10*x507))+(((-1.0)*gclwh11_10*x504))+((gclwh7_10*x638))+(((-4.0)*gclwh7_10*x500))+(((-1.0)*x509*x511)));
op[58]=((((-1.0)*gclwh5_1*x533))+(((-1.0)*gclwh11_10*x509))+(((-1.0)*x907))+(((-1.0)*gclwh9_10*x525))+(((-1.0)*x883))+x895+((gclwh7_10*x497))+x909+(((-1.0)*gclwh13_1*x602))+(((0.0042336)*x522)));
op[59]=((((-1.0)*x682))+(((-0.042)*gclwh7_13*x497))+(((0.084)*gclwh7_13*x500))+(((-1.0)*x899))+(((-0.01008)*x551))+(((0.042)*gclwh11_13*x509))+(((0.01008)*x637))+(((0.01008)*x518))+((gclwh9_13*x580))+(((-0.084)*gclwh9_13*x507))+(((-0.084)*gclwh11_13*x505))+((gclwh11_13*x546))+(((-1.0)*gclwh7_13*x576))+(((0.042)*gclwh9_13*x525))+x879+x889);
op[60]=((((-1.184)*gclwh4_8*x509))+(((-2.368)*gclwh14_8*x507))+(((-1.0)*gclwh4_8*x577))+(((1.184)*gclwh14_8*x525))+(((-0.0170496)*x517))+(((-1.0)*x904))+(((2.368)*gclwh4_8*x505))+(((-0.28416)*x573))+(((-1.184)*gclwh12_8*x497))+(((-0.28416)*x607))+(((2.368)*pz*x498))+(((-1.0)*x695))+(((0.0170496)*x545))+((gclwh6_12*x506))+x882+x892);
op[61]=((1.432132)+(((-1.432132)*gclwh3_3*x497))+(((-2.835464)*gclwh14_3*x507))+(((-0.0204153408)*x599))+(((2.835464)*gclwh12_3*x500))+((gclwh12_11*x497))+(((-1.0)*x912))+(((-1.403332)*gclwh4_3*x509))+(((-1.0)*x886))+(((0.0204153408)*x612))+((gclwh14_3*x640))+(((2.835464)*gclwh3_3*x500))+(((2.835464)*gclwh4_3*x505))+(((2.835464)*gclwh1_3*x507))+(((-1.432132)*gclwh1_3*x525))+(((-1.0)*gclwh14_11*x525))+(((1.403332)*gclwh14_3*x525))+(((-1.403332)*gclwh12_3*x497))+x894+((gclwh1_3*x640))+x913+((gclwh4_11*x509))+(((-0.0204153408)*x625)));
op[62]=((0.160008)+(((-1.0)*x897))+x906);
op[63]=((((-1.142)*gclwh14_2*x525))+(((-2.284)*gclwh3_2*x500))+(((-1.226)*gclwh14_8*x525))+((gclwh8_2*x566))+(((-0.27408)*x532))+(((-0.0164448)*x603))+(((-0.0176544)*x545))+(((0.0164448)*x601))+(((-2.452)*gclwh4_8*x505))+(((1.142)*gclwh3_2*x497))+(((1.226)*gclwh12_8*x497))+(((-2.284)*gclwh12_2*x500))+(((-1.0)*gclwh3_2*x527))+(((-2.452)*pz*x498))+(((-1.0)*x887))+(((2.284)*gclwh14_2*x507))+(((-2.284)*gclwh4_2*x505))+(((1.142)*gclwh12_2*x497))+(((0.0164448)*x521))+(((1.226)*gclwh4_8*x509))+(((1.142)*gclwh1_2*x525))+(((-2.284)*gclwh1_2*x507))+(((0.27408)*x598))+(((1.142)*gclwh4_2*x509))+(((2.452)*gclwh14_8*x507))+(((0.0176544)*x635))+(((-0.0164448)*x626))+x902+(((0.0176544)*x517)));
op[64]=((((0.01008)*x641))+(((-1.0)*x892))+(((0.084)*gclwh14_8*x507))+(((-0.0006048)*x545))+(((-0.042)*gclwh14_8*x525))+(((0.0006048)*x517))+(((0.042)*gclwh12_8*x497))+(((-0.01008)*x573))+(((-0.084)*gclwh4_8*x505))+(((-1.0)*x695))+(((-0.084)*pz*x498))+x882+x904+(((0.042)*gclwh4_8*x509))+((gclwh4_8*x546))+(((-0.01008)*x607)));
op[65]=((-0.03204)+((gclwh14_11*x525))+(((-0.03204)*gclwh1_3*x525))+(((-0.03204)*gclwh3_3*x497))+(((0.03528)*gclwh1_3*x507))+(((0.03528)*gclwh4_3*x505))+(((-1.0)*x894))+(((-1.0)*x912))+(((-0.00324)*gclwh12_3*x497))+(((-0.000254016)*x599))+((gclwh14_3*x595))+(((-1.0)*gclwh4_11*x509))+(((-0.000254016)*x625))+((gclwh1_3*x595))+(((-0.03528)*gclwh14_3*x507))+(((-0.00324)*gclwh4_3*x509))+x886+(((0.00324)*gclwh14_3*x525))+(((0.03528)*gclwh3_3*x500))+x913+(((0.03528)*gclwh12_3*x500))+(((-1.0)*gclwh12_11*x497))+(((0.000254016)*x612)));
op[66]=((-1.432132)+(((1.403332)*gclwh5_1*x509))+(((2.835464)*gclwh15_1*x507))+(((-1.0)*gclwh15_1*x640))+(((-1.0)*gclwh15_10*x525))+(((1.403332)*gclwh13_1*x497))+(((-1.403332)*gclwh15_1*x525))+(((0.0204153408)*x535))+(((-1.0)*x911))+(((-1.0)*x885))+(((0.0204153408)*x617))+(((-2.835464)*gclwh5_1*x505))+(((0.0204153408)*x554))+(((0.0204153408)*x552))+((gclwh5_10*x509))+(((-1.432132)*gclwh2_1*x497))+(((-1.432132)*gclwh0_1*x525))+((gclwh13_10*x497))+(((-2.835464)*gclwh13_1*x500))+x893+x914+(((2.835464)*gclwh0_1*x507))+(((2.835464)*gclwh2_1*x500)));
op[67]=((((2.368)*gclwh15_9*x507))+(((-1.184)*gclwh15_9*x525))+(((-1.0)*gclwh7_13*x506))+(((-2.368)*gclwh5_9*x505))+(((0.0170496)*x568))+(((0.28416)*x643))+(((1.184)*gclwh13_9*x497))+(((-1.0)*x890))+(((-1.0)*x880))+(((-1.0)*gclwh15_9*x558))+(((-2.368)*gclwh13_9*x500))+x714+(((0.0170496)*x559))+(((0.28416)*x555))+x903+(((1.184)*gclwh5_9*x509)));
op[68]=((((0.0176544)*x568))+(((-1.142)*gclwh5_0*x509))+(((-0.27408)*x499))+(((-0.27408)*x524))+(((-2.284)*gclwh15_0*x507))+(((-1.226)*gclwh15_9*x525))+(((1.142)*gclwh0_0*x525))+(((-1.0)*gclwh2_0*x527))+(((-1.0)*x888))+(((-0.0164448)*x531))+(((2.284)*gclwh5_0*x505))+(((-2.284)*gclwh2_0*x500))+(((0.0176544)*x559))+(((0.27408)*x574))+(((2.452)*gclwh15_9*x507))+(((2.284)*gclwh13_0*x500))+(((-2.452)*gclwh13_9*x500))+(((1.226)*gclwh5_9*x509))+(((1.142)*gclwh2_0*x497))+(((-1.142)*gclwh13_0*x497))+(((-0.0164448)*x632))+(((-2.284)*gclwh0_0*x507))+(((1.226)*gclwh13_9*x497))+(((-0.0176544)*x621))+(((1.142)*pp*x515))+x901+(((-1.0)*gclwh13_0*x527))+(((-2.452)*gclwh5_9*x505))+(((0.0164448)*x515)));
op[69]=((0.160008)+(((-1.0)*x905))+x898);
op[70]=((0.03204)+(((-1.0)*gclwh15_1*x595))+(((0.03528)*gclwh15_1*x507))+((gclwh15_10*x525))+(((-1.0)*gclwh13_10*x497))+(((0.00324)*gclwh5_1*x509))+(((0.03528)*gclwh2_1*x500))+(((-1.0)*gclwh5_10*x509))+(((-1.0)*x893))+(((-1.0)*x911))+(((0.03528)*gclwh0_1*x507))+(((0.000254016)*x552))+(((0.000254016)*x554))+(((-0.03528)*gclwh5_1*x505))+(((-0.00324)*gclwh15_1*x525))+(((0.000254016)*x535))+(((-0.03204)*gclwh2_1*x497))+(((-0.03204)*gclwh0_1*x525))+x885+x914+(((0.00324)*gclwh13_1*x497))+(((0.000254016)*x617))+(((-0.03528)*gclwh13_1*x500)));
op[71]=((((-0.084)*gclwh15_9*x507))+(((0.042)*gclwh15_9*x525))+(((0.084)*gclwh13_9*x500))+(((-1.0)*gclwh5_9*x546))+(((-0.01008)*x544))+((gclwh15_9*x580))+(((-1.0)*x903))+(((0.01008)*x643))+(((-0.042)*gclwh13_9*x497))+(((-0.0006048)*x559))+(((-1.0)*x880))+(((0.01008)*x555))+(((0.084)*gclwh5_9*x505))+x714+(((-0.042)*gclwh5_9*x509))+x890);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x915=htj1*htj1;
CheckValue<IkReal> x916=IKPowWithIntegerCheck(((1.0)+x915),-1);
if(!x916.valid){
continue;
}
cj1array[numsolutions]=((x916.value)*(((1.0)+(((-1.0)*x915)))));
CheckValue<IkReal> x917=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x917.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x917.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x918=htj2*htj2;
CheckValue<IkReal> x919=IKPowWithIntegerCheck(((1.0)+x918),-1);
if(!x919.valid){
continue;
}
cj2array[numsolutions]=((x919.value)*(((1.0)+(((-1.0)*x918)))));
CheckValue<IkReal> x920=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x920.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x920.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x921=htj3*htj3;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+x921),-1);
if(!x922.valid){
continue;
}
cj3array[numsolutions]=((x922.value)*(((1.0)+(((-1.0)*x921)))));
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x923.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x923.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x924=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x924);
rxp1_0=(pz*r11);
rxp1_1=(r01*x924);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x925=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x925);
rxp1_0=(pz*r11);
rxp1_1=(r01*x925);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x926=IKPowWithIntegerCheck(r22,-1);
if(!x926.valid){
continue;
}
CheckValue<IkReal> x927=IKPowWithIntegerCheck(sj3,-1);
if(!x927.valid){
continue;
}
sj4array[0]=((x926.value)*(x927.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x928=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x928);
rxp1_0=(pz*r11);
rxp1_1=(r01*x928);
IkReal x929=((16.0)*sj4);
IkReal x930=(cj1*cj2);
IkReal x931=((4.0)*sj3);
IkReal x932=((8.0)*sj4);
IkReal x933=((4.0)*cj4);
IkReal x934=(sj1*sj2);
IkReal x935=((4.0)*sj4);
IkReal x936=(cj3*r02);
IkReal x937=((16.0)*sj3);
IkReal x938=((8.0)*sj3);
IkReal x939=((12.0)*cj4);
IkReal x940=((12.0)*sj4);
IkReal x941=(cj3*r12);
IkReal x942=(r11*x931);
IkReal x943=(r01*x931);
IkReal x944=(r01*x934);
IkReal x945=(cj3*cj4*r01);
IkReal x946=(cj3*cj4*r11);
IkReal x947=(cj3*r10*x933);
IkReal x948=(x940*x941);
IkReal x949=(cj3*r00*x933);
IkReal x950=(x936*x940);
IkReal x951=(r00*x934*x935);
IkReal x952=(r02*x934*x939);
IkReal x953=(r00*x930*x935);
IkReal x954=(r02*x930*x939);
IkReal x955=(r10*x934*x935);
IkReal x956=(r12*x930*x939);
IkReal x957=(r12*x934*x939);
IkReal x958=(r10*x930*x935);
IkReal x959=(x953+x942);
IkReal x960=(x955+x943);
IkReal x961=(x951+x947);
IkReal x962=(x954+x948);
IkReal x963=(x958+x949);
IkReal x964=(x957+x950);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x929*x944))+(((-1.0)*r10*x937))+(((-16.0)*x946))+((r01*x929*x930)))))))+(((0.5)*(IKabs((x959+x952+(((-1.0)*x962))+(((-1.0)*x961)))))))+(((0.5)*(IKabs((x963+x956+(((-1.0)*x964))+(((-1.0)*x960)))))))+(((0.5)*(IKabs((x960+x956+(((-1.0)*x964))+(((-1.0)*x963)))))))+(((0.5)*(IKabs((((r02*x933*x934))+x959+(((-1.0)*x935*x941))+(((-1.0)*x961))+(((-1.0)*r02*x930*x933)))))))+(IKabs(((((-1.0)*r11*x930*x932))+((r11*x932*x934))+(((-8.0)*x945))+(((-1.0)*r00*x938)))))+(((0.5)*(IKabs((((r11*x929*x934))+(((-1.0)*r11*x929*x930))+(((-16.0)*x945))+(((-1.0)*r00*x937)))))))+(((0.5)*(IKabs(((((-1.0)*x935*x936))+(((-1.0)*r12*x933*x934))+x960+(((-1.0)*x963))+((r12*x930*x933)))))))+(IKabs(((((-1.0)*r10*x938))+(((-1.0)*x932*x944))+(((-8.0)*x946))+((r01*x930*x932)))))+(((0.5)*(IKabs(((((-1.0)*x959))+x961+x952+(((-1.0)*x962))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x965=(r10*sj3);
IkReal x966=(r01*sj4);
IkReal x967=(cj1*cj2);
IkReal x968=(cj3*cj4);
IkReal x969=(sj1*sj2);
IkReal x970=(cj4*r02);
IkReal x971=((4.0)*r11*sj3);
IkReal x972=(cj3*r12*sj4);
IkReal x973=((4.0)*r00*sj4);
IkReal x974=((4.0)*r10*x968);
IkReal x975=((12.0)*x972);
IkReal x976=((4.0)*x972);
IkReal x977=(x967*x973);
IkReal x978=(x969*x973);
IkReal x979=((12.0)*x969*x970);
IkReal x980=((12.0)*x967*x970);
IkReal x981=((4.0)*x969*x970);
IkReal x982=((4.0)*x967*x970);
IkReal x983=(x971+x977);
IkReal x984=(x974+x978);
IkReal x985=(x982+x976);
IkReal x986=(x980+x975);
IkReal x987=((((8.0)*x966*x967))+(((-8.0)*x965))+(((-8.0)*x966*x969))+(((-8.0)*r11*x968)));
op[0]=((((-1.0)*x985))+(((-1.0)*x984))+x981+x983);
op[1]=x987;
op[2]=((((-1.0)*x986))+(((-1.0)*x984))+x983+x979);
op[3]=((((16.0)*x966*x967))+(((-16.0)*r11*x968))+(((-16.0)*x966*x969))+(((-16.0)*x965)));
op[4]=((((-1.0)*x986))+(((-1.0)*x983))+x984+x979);
op[5]=x987;
op[6]=((((-1.0)*x985))+(((-1.0)*x983))+x984+x981);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x988=(cj1*cj2);
IkReal x989=((4.0)*cj4);
IkReal x990=(sj1*sj2);
IkReal x991=((4.0)*sj4);
IkReal x992=(r00*sj3);
IkReal x993=(cj3*r02);
IkReal x994=((4.0)*r01*sj3);
IkReal x995=((16.0)*r11*sj4);
IkReal x996=(cj3*cj4*r01);
IkReal x997=((12.0)*cj4*r12);
IkReal x998=((8.0)*r11*sj4);
IkReal x999=(cj3*r00*x989);
IkReal x1000=((12.0)*sj4*x993);
IkReal x1001=(x991*x993);
IkReal x1002=(r10*x988*x991);
IkReal x1003=(r10*x990*x991);
IkReal x1004=(x988*x997);
IkReal x1005=(x990*x997);
IkReal x1006=(r12*x988*x989);
IkReal x1007=(r12*x989*x990);
IkReal x1008=(x1003+x994);
IkReal x1009=(x1002+x999);
IkReal x1010=(x1007+x1001);
IkReal x1011=(x1005+x1000);
IkReal x1012=(((x990*x998))+(((-1.0)*x988*x998))+(((-8.0)*x992))+(((-8.0)*x996)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*((x1008+x1006+(((-1.0)*x1009))+(((-1.0)*x1010))))))+x1009+x1006+(((htj5*htj5*htj5*htj5)*((x1008+x1004+(((-1.0)*x1009))+(((-1.0)*x1011))))))+(((-1.0)*x1008))+(((-1.0)*x1010))+(((htj5*htj5)*((x1009+x1004+(((-1.0)*x1008))+(((-1.0)*x1011))))))+(((htj5*htj5*htj5)*((((x990*x995))+(((-16.0)*x996))+(((-16.0)*x992))+(((-1.0)*x988*x995))))))+((x1012*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1012)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1013=(cj5*sj4);
IkReal x1014=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1013))+((r01*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1013))+((cj4*r12))+(((-1.0)*r11*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1013))+((r01*x1014))))+IKsqr((((r10*x1013))+((cj4*r12))+(((-1.0)*r11*x1014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1013))+((r01*x1014))), (((r10*x1013))+((cj4*r12))+(((-1.0)*r11*x1014))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1015=IKcos(j0);
IkReal x1016=IKsin(j0);
IkReal x1017=(r02*sj4);
IkReal x1018=(sj4*sj5);
IkReal x1019=((1.0)*sj3);
IkReal x1020=(r12*sj4);
IkReal x1021=((0.571)*sj1);
IkReal x1022=(cj4*cj5);
IkReal x1023=(r00*sj3);
IkReal x1024=((1.0)*cj1);
IkReal x1025=(cj3*r10);
IkReal x1026=(cj4*sj5);
IkReal x1027=(cj5*r01);
IkReal x1028=((0.571)*cj2);
IkReal x1029=(r10*sj3);
IkReal x1030=(cj5*r11);
IkReal x1031=((1.0)*sj1);
IkReal x1032=(r00*sj5);
IkReal x1033=((1.0)*r00);
IkReal x1034=(cj5*sj4);
IkReal x1035=((1.0)*cj4);
IkReal x1036=(sj2*x1015);
IkReal x1037=(cj1*x1016);
IkReal x1038=(sj2*x1016);
IkReal x1039=(cj2*x1015);
IkReal x1040=(cj1*x1015);
IkReal x1041=(cj2*x1016);
evalcond[0]=((((-1.0)*r10*x1034))+x1015+(((-1.0)*r12*x1035))+((r11*x1018)));
evalcond[1]=((((-1.0)*x1033*x1034))+(((-1.0)*r02*x1035))+((r01*x1018))+(((-1.0)*x1016)));
evalcond[2]=((((-0.12)*x1027))+(((-1.0)*x1021*x1036))+(((0.613)*x1040))+(((-1.0)*px))+(((-0.174)*x1016))+((x1028*x1040))+(((-0.12)*x1032)));
evalcond[3]=((((-1.0)*x1021*x1038))+(((0.613)*x1037))+(((-0.12)*r10*sj5))+(((-1.0)*py))+((x1028*x1037))+(((0.174)*x1015))+(((-0.12)*x1030)));
evalcond[4]=((((-1.0)*x1024*x1039))+((cj3*x1017))+((sj1*x1036))+(((-1.0)*cj3*x1022*x1033))+((cj3*r01*x1026))+((sj5*x1023))+((sj3*x1027)));
evalcond[5]=((((-1.0)*x1024*x1041))+((sj1*x1038))+((sj3*x1030))+((cj3*r11*x1026))+((sj5*x1029))+(((-1.0)*x1022*x1025))+((cj3*x1020)));
evalcond[6]=((((-1.0)*x1024*x1036))+((cj3*x1032))+(((-1.0)*x1017*x1019))+((x1022*x1023))+(((-1.0)*x1031*x1039))+(((-1.0)*r01*x1019*x1026))+((cj3*x1027)));
evalcond[7]=((((-1.0)*x1024*x1038))+(((-1.0)*x1031*x1041))+((cj3*x1030))+(((-1.0)*x1019*x1020))+((x1022*x1029))+(((-1.0)*r11*x1019*x1026))+((sj5*x1025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(cj3,-1);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(r22,-1);
if(!x1043.valid){
continue;
}
sj4array[0]=((-1.0)*(x1042.value)*(x1043.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1044=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1044);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1044);
IkReal x1045=((16.0)*sj4);
IkReal x1046=(cj1*cj2);
IkReal x1047=((4.0)*sj3);
IkReal x1048=((8.0)*sj4);
IkReal x1049=((4.0)*cj4);
IkReal x1050=(sj1*sj2);
IkReal x1051=((4.0)*sj4);
IkReal x1052=(cj3*r02);
IkReal x1053=((16.0)*sj3);
IkReal x1054=((8.0)*sj3);
IkReal x1055=((12.0)*cj4);
IkReal x1056=((12.0)*sj4);
IkReal x1057=(cj3*r12);
IkReal x1058=(r11*x1047);
IkReal x1059=(r01*x1047);
IkReal x1060=(r01*x1050);
IkReal x1061=(cj3*cj4*r01);
IkReal x1062=(cj3*cj4*r11);
IkReal x1063=(cj3*r10*x1049);
IkReal x1064=(x1056*x1057);
IkReal x1065=(cj3*r00*x1049);
IkReal x1066=(x1052*x1056);
IkReal x1067=(r00*x1050*x1051);
IkReal x1068=(r02*x1050*x1055);
IkReal x1069=(r00*x1046*x1051);
IkReal x1070=(r02*x1046*x1055);
IkReal x1071=(r10*x1050*x1051);
IkReal x1072=(r12*x1046*x1055);
IkReal x1073=(r12*x1050*x1055);
IkReal x1074=(r10*x1046*x1051);
IkReal x1075=(x1058+x1069);
IkReal x1076=(x1059+x1071);
IkReal x1077=(x1063+x1067);
IkReal x1078=(x1070+x1064);
IkReal x1079=(x1074+x1065);
IkReal x1080=(x1073+x1066);
j5eval[0]=((((0.5)*(IKabs((((r12*x1046*x1049))+(((-1.0)*r12*x1049*x1050))+x1076+(((-1.0)*x1079))+(((-1.0)*x1051*x1052)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1053))+(((-1.0)*x1045*x1060))+(((-16.0)*x1062))+((r01*x1045*x1046)))))))+(((0.5)*(IKabs((x1075+(((-1.0)*x1077))+((r02*x1049*x1050))+(((-1.0)*r02*x1046*x1049))+(((-1.0)*x1051*x1057)))))))+(IKabs(((((-1.0)*r00*x1054))+(((-1.0)*r11*x1046*x1048))+((r11*x1048*x1050))+(((-8.0)*x1061)))))+(((0.5)*(IKabs((x1079+x1072+(((-1.0)*x1080))+(((-1.0)*x1076)))))))+(IKabs(((((-1.0)*r10*x1054))+(((-1.0)*x1048*x1060))+((r01*x1046*x1048))+(((-8.0)*x1062)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1053))+(((-1.0)*r11*x1045*x1046))+(((-16.0)*x1061))+((r11*x1045*x1050)))))))+(((0.5)*(IKabs((x1077+x1068+(((-1.0)*x1075))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1075+x1068+(((-1.0)*x1077))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1076+x1072+(((-1.0)*x1080))+(((-1.0)*x1079))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1081=(r10*sj3);
IkReal x1082=(r01*sj4);
IkReal x1083=(cj1*cj2);
IkReal x1084=(cj3*cj4);
IkReal x1085=(sj1*sj2);
IkReal x1086=(cj4*r02);
IkReal x1087=((4.0)*r11*sj3);
IkReal x1088=(cj3*r12*sj4);
IkReal x1089=((4.0)*r00*sj4);
IkReal x1090=((4.0)*r10*x1084);
IkReal x1091=((12.0)*x1088);
IkReal x1092=((4.0)*x1088);
IkReal x1093=(x1083*x1089);
IkReal x1094=(x1085*x1089);
IkReal x1095=((12.0)*x1085*x1086);
IkReal x1096=((12.0)*x1083*x1086);
IkReal x1097=((4.0)*x1085*x1086);
IkReal x1098=((4.0)*x1083*x1086);
IkReal x1099=(x1093+x1087);
IkReal x1100=(x1094+x1090);
IkReal x1101=(x1092+x1098);
IkReal x1102=(x1096+x1091);
IkReal x1103=((((-8.0)*r11*x1084))+(((-8.0)*x1082*x1085))+(((8.0)*x1082*x1083))+(((-8.0)*x1081)));
op[0]=(x1097+x1099+(((-1.0)*x1100))+(((-1.0)*x1101)));
op[1]=x1103;
op[2]=(x1095+x1099+(((-1.0)*x1100))+(((-1.0)*x1102)));
op[3]=((((-16.0)*x1081))+(((-16.0)*x1082*x1085))+(((16.0)*x1082*x1083))+(((-16.0)*r11*x1084)));
op[4]=(x1100+x1095+(((-1.0)*x1099))+(((-1.0)*x1102)));
op[5]=x1103;
op[6]=(x1100+x1097+(((-1.0)*x1099))+(((-1.0)*x1101)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1104=(cj1*cj2);
IkReal x1105=((4.0)*cj4);
IkReal x1106=(sj1*sj2);
IkReal x1107=((4.0)*sj4);
IkReal x1108=(r00*sj3);
IkReal x1109=(cj3*r02);
IkReal x1110=((4.0)*r01*sj3);
IkReal x1111=((16.0)*r11*sj4);
IkReal x1112=(cj3*cj4*r01);
IkReal x1113=((12.0)*cj4*r12);
IkReal x1114=((8.0)*r11*sj4);
IkReal x1115=(cj3*r00*x1105);
IkReal x1116=((12.0)*sj4*x1109);
IkReal x1117=(x1107*x1109);
IkReal x1118=(r10*x1104*x1107);
IkReal x1119=(r10*x1106*x1107);
IkReal x1120=(x1104*x1113);
IkReal x1121=(x1106*x1113);
IkReal x1122=(r12*x1104*x1105);
IkReal x1123=(r12*x1105*x1106);
IkReal x1124=(x1110+x1119);
IkReal x1125=(x1115+x1118);
IkReal x1126=(x1117+x1123);
IkReal x1127=(x1116+x1121);
IkReal x1128=((((-1.0)*x1104*x1114))+(((-8.0)*x1108))+(((-8.0)*x1112))+((x1106*x1114)));
j5evalpoly[0]=(((htj5*x1128))+((x1128*(htj5*htj5*htj5*htj5*htj5)))+x1122+x1125+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1122+x1124+(((-1.0)*x1126))+(((-1.0)*x1125))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1112))+(((-16.0)*x1108))+(((-1.0)*x1104*x1111))+((x1106*x1111))))))+(((-1.0)*x1126))+(((-1.0)*x1124))+(((htj5*htj5)*((x1120+x1125+(((-1.0)*x1127))+(((-1.0)*x1124))))))+(((htj5*htj5*htj5*htj5)*((x1120+x1124+(((-1.0)*x1127))+(((-1.0)*x1125)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1129=(cj5*sj4);
IkReal x1130=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1130))+(((-1.0)*r00*x1129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1129))+(((-1.0)*r11*x1130))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1130))+(((-1.0)*r00*x1129))))+IKsqr((((r10*x1129))+(((-1.0)*r11*x1130))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1130))+(((-1.0)*r00*x1129))), (((r10*x1129))+(((-1.0)*r11*x1130))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1131=IKcos(j0);
IkReal x1132=IKsin(j0);
IkReal x1133=(r02*sj4);
IkReal x1134=(sj4*sj5);
IkReal x1135=((1.0)*sj3);
IkReal x1136=(r12*sj4);
IkReal x1137=((0.571)*sj1);
IkReal x1138=(cj4*cj5);
IkReal x1139=(r00*sj3);
IkReal x1140=((1.0)*cj1);
IkReal x1141=(cj3*r10);
IkReal x1142=(cj4*sj5);
IkReal x1143=(cj5*r01);
IkReal x1144=((0.571)*cj2);
IkReal x1145=(r10*sj3);
IkReal x1146=(cj5*r11);
IkReal x1147=((1.0)*sj1);
IkReal x1148=(r00*sj5);
IkReal x1149=((1.0)*r00);
IkReal x1150=(cj5*sj4);
IkReal x1151=((1.0)*cj4);
IkReal x1152=(sj2*x1131);
IkReal x1153=(cj1*x1132);
IkReal x1154=(sj2*x1132);
IkReal x1155=(cj2*x1131);
IkReal x1156=(cj1*x1131);
IkReal x1157=(cj2*x1132);
evalcond[0]=(x1131+(((-1.0)*r12*x1151))+((r11*x1134))+(((-1.0)*r10*x1150)));
evalcond[1]=(((r01*x1134))+(((-1.0)*x1149*x1150))+(((-1.0)*r02*x1151))+(((-1.0)*x1132)));
evalcond[2]=((((-0.12)*x1148))+(((-0.12)*x1143))+(((0.613)*x1156))+(((-1.0)*px))+((x1144*x1156))+(((-1.0)*x1137*x1152))+(((-0.174)*x1132)));
evalcond[3]=((((0.174)*x1131))+(((-0.12)*x1146))+(((0.613)*x1153))+(((-0.12)*r10*sj5))+(((-1.0)*py))+((x1144*x1153))+(((-1.0)*x1137*x1154)));
evalcond[4]=(((cj3*x1133))+(((-1.0)*x1140*x1155))+(((-1.0)*cj3*x1138*x1149))+((sj3*x1143))+((cj3*r01*x1142))+((sj5*x1139))+((sj1*x1152)));
evalcond[5]=((((-1.0)*x1138*x1141))+((cj3*x1136))+(((-1.0)*x1140*x1157))+((sj5*x1145))+((sj3*x1146))+((cj3*r11*x1142))+((sj1*x1154)));
evalcond[6]=((((-1.0)*x1140*x1152))+((cj3*x1143))+((cj3*x1148))+(((-1.0)*r01*x1135*x1142))+(((-1.0)*x1147*x1155))+((x1138*x1139))+(((-1.0)*x1133*x1135)));
evalcond[7]=((((-1.0)*r11*x1135*x1142))+(((-1.0)*x1140*x1154))+((sj5*x1141))+((cj3*x1146))+(((-1.0)*x1147*x1157))+(((-1.0)*x1135*x1136))+((x1138*x1145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1158=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1159=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1159);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1159);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1160=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1161=IKPowWithIntegerCheck(r22,-1);
if(!x1161.valid){
continue;
}
sj4array[0]=((-1.0)*(x1161.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1162=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1162);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1162);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
IkReal x1163=x1164.value;
j5array[0]=((-1.0)*x1163);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1163)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1165=(cj5*sj4);
IkReal x1166=(sj4*sj5);
if( IKabs((((r01*x1166))+(((-1.0)*r00*x1165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1165))+(((-1.0)*r11*x1166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1166))+(((-1.0)*r00*x1165))))+IKsqr((((r10*x1165))+(((-1.0)*r11*x1166))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1166))+(((-1.0)*r00*x1165))), (((r10*x1165))+(((-1.0)*r11*x1166))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1167=IKcos(j0);
IkReal x1168=IKsin(j0);
IkReal x1169=(cj5*r01);
IkReal x1170=((1.0)*sj2);
IkReal x1171=(sj4*sj5);
IkReal x1172=(cj5*r11);
IkReal x1173=(r00*sj5);
IkReal x1174=(r10*sj5);
IkReal x1175=(cj1*x1168);
IkReal x1176=(cj1*x1167);
IkReal x1177=((1.0)*cj2*sj1);
IkReal x1178=((1.0)*cj5*sj4);
evalcond[0]=(x1167+((r11*x1171))+(((-1.0)*r10*x1178)));
evalcond[1]=(((r01*x1171))+(((-1.0)*r00*x1178))+(((-1.0)*x1168)));
evalcond[2]=(x1169+x1173+(((-1.0)*x1167*x1177))+(((-1.0)*x1170*x1176)));
evalcond[3]=(x1174+x1172+(((-1.0)*x1168*x1177))+(((-1.0)*x1170*x1175)));
evalcond[4]=((((0.613)*x1176))+(((-1.0)*px))+(((-0.12)*x1173))+(((-0.12)*x1169))+(((-0.174)*x1168)));
evalcond[5]=((((0.613)*x1175))+(((-1.0)*py))+(((-0.12)*x1174))+(((-0.12)*x1172))+(((0.174)*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(r22,-1);
if(!x1180.valid){
continue;
}
sj4array[0]=((x1180.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1181=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1181);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
IkReal x1182=x1183.value;
j5array[0]=((-1.0)*x1182);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1182)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1184=(cj5*sj4);
IkReal x1185=(sj4*sj5);
if( IKabs((((r01*x1185))+(((-1.0)*r00*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1184))+(((-1.0)*r11*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1185))+(((-1.0)*r00*x1184))))+IKsqr((((r10*x1184))+(((-1.0)*r11*x1185))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1185))+(((-1.0)*r00*x1184))), (((r10*x1184))+(((-1.0)*r11*x1185))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1186=IKcos(j0);
IkReal x1187=IKsin(j0);
IkReal x1188=(sj4*sj5);
IkReal x1189=((1.0)*sj5);
IkReal x1190=(cj5*r11);
IkReal x1191=(cj5*r01);
IkReal x1192=(cj2*sj1);
IkReal x1193=((0.12)*sj5);
IkReal x1194=(cj1*x1187);
IkReal x1195=((1.0)*x1186);
IkReal x1196=((1.0)*x1187);
IkReal x1197=((1.0)*cj5*sj4);
evalcond[0]=(x1186+(((-1.0)*r10*x1197))+((r11*x1188)));
evalcond[1]=((((-1.0)*r00*x1197))+((r01*x1188))+(((-1.0)*x1196)));
evalcond[2]=((((-1.0)*r00*x1193))+(((-0.12)*x1191))+(((-1.0)*px))+(((-0.174)*x1187))+(((0.613)*cj1*x1186)));
evalcond[3]=((((-1.0)*r10*x1193))+(((-0.12)*x1190))+(((-1.0)*py))+(((0.174)*x1186))+(((0.613)*x1194)));
evalcond[4]=((((-1.0)*cj1*sj2*x1195))+(((-1.0)*x1192*x1195))+(((-1.0)*x1191))+(((-1.0)*r00*x1189)));
evalcond[5]=((((-1.0)*r10*x1189))+(((-1.0)*sj2*x1194))+(((-1.0)*x1192*x1196))+(((-1.0)*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1198=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1198);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1198);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(r22,-1);
if(!x1199.valid){
continue;
}
sj4array[0]=((x1199.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1202 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1202.valid){
continue;
}
IkReal x1201=x1202.value;
j5array[0]=((-1.0)*x1201);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1201)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1203=(cj5*sj4);
IkReal x1204=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1203))+((r01*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1203))+(((-1.0)*r11*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1203))+((r01*x1204))))+IKsqr((((r10*x1203))+(((-1.0)*r11*x1204))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1203))+((r01*x1204))), (((r10*x1203))+(((-1.0)*r11*x1204))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1205=IKcos(j0);
IkReal x1206=IKsin(j0);
IkReal x1207=(cj1*cj2);
IkReal x1208=((0.613)*cj1);
IkReal x1209=(sj1*sj2);
IkReal x1210=(cj5*r01);
IkReal x1211=(sj4*sj5);
IkReal x1212=(cj5*r11);
IkReal x1213=(r00*sj5);
IkReal x1214=(r10*sj5);
IkReal x1215=((0.571)*x1205);
IkReal x1216=((0.571)*x1206);
IkReal x1217=((1.0)*x1206);
IkReal x1218=((1.0)*cj5*sj4);
evalcond[0]=(x1205+((r11*x1211))+(((-1.0)*r10*x1218)));
evalcond[1]=((((-1.0)*r00*x1218))+((r01*x1211))+(((-1.0)*x1217)));
evalcond[2]=(x1213+x1210+(((-1.0)*x1205*x1207))+((x1205*x1209)));
evalcond[3]=(x1212+x1214+(((-1.0)*x1207*x1217))+((x1206*x1209)));
evalcond[4]=((((-1.0)*x1209*x1215))+(((-0.12)*x1213))+(((-0.12)*x1210))+(((-0.174)*x1206))+((x1207*x1215))+(((-1.0)*px))+((x1205*x1208)));
evalcond[5]=((((-1.0)*x1209*x1216))+(((-0.12)*x1214))+(((-0.12)*x1212))+(((0.174)*x1205))+((x1207*x1216))+(((-1.0)*py))+((x1206*x1208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1219=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1219);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1219);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(r22,-1);
if(!x1220.valid){
continue;
}
sj4array[0]=((-1.0)*(x1220.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1221=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1221);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1221);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
IkReal x1222=x1223.value;
j5array[0]=((-1.0)*x1222);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1222)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1224=(cj5*sj4);
IkReal x1225=(sj4*sj5);
if( IKabs((((r01*x1225))+(((-1.0)*r00*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1225))+((r10*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1225))+(((-1.0)*r00*x1224))))+IKsqr(((((-1.0)*r11*x1225))+((r10*x1224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1225))+(((-1.0)*r00*x1224))), ((((-1.0)*r11*x1225))+((r10*x1224))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1226=IKcos(j0);
IkReal x1227=IKsin(j0);
IkReal x1228=(sj4*sj5);
IkReal x1229=(cj5*r11);
IkReal x1230=(cj5*r01);
IkReal x1231=((1.0)*sj5);
IkReal x1232=(sj1*sj2);
IkReal x1233=((0.12)*sj5);
IkReal x1234=((0.571)*cj2);
IkReal x1235=((1.0)*cj2);
IkReal x1236=(cj1*x1227);
IkReal x1237=((0.571)*x1232);
IkReal x1238=((1.0)*cj5*sj4);
IkReal x1239=(cj1*x1226);
evalcond[0]=(x1226+(((-1.0)*r10*x1238))+((r11*x1228)));
evalcond[1]=((((-1.0)*r00*x1238))+(((-1.0)*x1227))+((r01*x1228)));
evalcond[2]=((((-1.0)*r00*x1231))+(((-1.0)*x1230))+(((-1.0)*x1235*x1239))+((x1226*x1232)));
evalcond[3]=((((-1.0)*x1229))+(((-1.0)*x1235*x1236))+(((-1.0)*r10*x1231))+((x1227*x1232)));
evalcond[4]=((((0.613)*x1239))+(((-1.0)*r00*x1233))+((x1234*x1239))+(((-1.0)*x1226*x1237))+(((-0.12)*x1230))+(((-1.0)*px))+(((-0.174)*x1227)));
evalcond[5]=((((0.613)*x1236))+((x1234*x1236))+(((-0.12)*x1229))+(((-1.0)*x1227*x1237))+(((-1.0)*py))+(((-1.0)*r10*x1233))+(((0.174)*x1226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1240=IKPowWithIntegerCheck(r22,-1);
if(!x1240.valid){
continue;
}
CheckValue<IkReal> x1241=IKPowWithIntegerCheck(sj3,-1);
if(!x1241.valid){
continue;
}
sj4array[0]=((x1240.value)*(x1241.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1242=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1242);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1242);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1243=((4.0)*r01);
IkReal x1244=((16.0)*r00);
IkReal x1245=(cj3*sj2);
IkReal x1246=((8.0)*r00);
IkReal x1247=(cj2*cj3);
IkReal x1248=(cj4*r01);
IkReal x1249=((16.0)*cj1);
IkReal x1250=((8.0)*sj1);
IkReal x1251=((16.0)*sj1);
IkReal x1252=((8.0)*cj1);
IkReal x1253=(sj2*sj3);
IkReal x1254=(cj2*sj3);
IkReal x1255=(sj1*x1254);
IkReal x1256=((4.0)*cj4*r00);
IkReal x1257=(((x1243*x1255))+((sj1*x1243*x1245))+((cj1*x1243*x1253))+((sj1*x1253*x1256)));
IkReal x1258=(((cj1*x1243*x1247))+((cj1*x1245*x1256))+((sj1*x1247*x1256))+((cj1*x1254*x1256)));
IkReal x1259=((((-1.0)*x1257))+x1258);
IkReal x1260=(((x1246*x1255))+((cj1*x1246*x1253))+((x1248*x1252*x1254))+((x1247*x1248*x1250))+(((-1.0)*cj1*x1246*x1247))+(((-1.0)*x1248*x1250*x1253))+((x1245*x1248*x1252))+((sj1*x1245*x1246)));
IkReal x1261=((((-1.0)*x1258))+x1257);
op[0]=x1259;
op[1]=x1260;
op[2]=x1259;
op[3]=(((cj1*x1244*x1253))+((sj1*x1244*x1245))+(((-1.0)*cj1*x1244*x1247))+((x1248*x1249*x1254))+((x1247*x1248*x1251))+((x1245*x1248*x1249))+(((-1.0)*x1248*x1251*x1253))+((x1244*x1255)));
op[4]=x1261;
op[5]=x1260;
op[6]=x1261;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1262=(cj5*sj4);
IkReal x1263=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1262))+((r01*x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1262))+(((-1.0)*r11*x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1262))+((r01*x1263))))+IKsqr((((r10*x1262))+(((-1.0)*r11*x1263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1262))+((r01*x1263))), (((r10*x1262))+(((-1.0)*r11*x1263))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1264=IKcos(j0);
IkReal x1265=IKsin(j0);
IkReal x1266=((0.571)*cj2);
IkReal x1267=((1.0)*cj3);
IkReal x1268=((1.0)*sj2);
IkReal x1269=(r11*sj5);
IkReal x1270=(cj5*r01);
IkReal x1271=(r01*sj5);
IkReal x1272=(sj1*sj2);
IkReal x1273=(cj5*r11);
IkReal x1274=(cj3*cj4);
IkReal x1275=(r00*sj5);
IkReal x1276=((1.0)*cj2);
IkReal x1277=(r10*sj5);
IkReal x1278=(cj1*x1264);
IkReal x1279=(cj4*cj5*r00);
IkReal x1280=(cj4*cj5*r10);
IkReal x1281=((1.0)*cj4*sj3);
IkReal x1282=(cj1*x1265);
IkReal x1283=((1.0)*cj5*sj4);
evalcond[0]=(x1264+((sj4*x1269))+(((-1.0)*r10*x1283)));
evalcond[1]=(((sj4*x1271))+(((-1.0)*r00*x1283))+(((-1.0)*x1265)));
evalcond[2]=(((sj3*x1275))+((sj3*x1270))+((x1264*x1272))+(((-1.0)*x1267*x1279))+(((-1.0)*x1276*x1278))+((x1271*x1274)));
evalcond[3]=(((sj3*x1273))+((sj3*x1277))+((x1269*x1274))+((x1265*x1272))+(((-1.0)*x1276*x1282))+(((-1.0)*x1267*x1280)));
evalcond[4]=(((sj3*x1279))+(((-1.0)*x1268*x1278))+(((-1.0)*sj1*x1264*x1276))+((cj3*x1270))+((cj3*x1275))+(((-1.0)*x1271*x1281)));
evalcond[5]=((((-1.0)*sj1*x1265*x1276))+(((-1.0)*x1269*x1281))+((cj3*x1273))+((cj3*x1277))+((sj3*x1280))+(((-1.0)*x1268*x1282)));
evalcond[6]=((((-0.12)*x1275))+(((-0.12)*x1270))+(((-0.174)*x1265))+(((0.613)*x1278))+((x1266*x1278))+(((-1.0)*px))+(((-0.571)*x1264*x1272)));
evalcond[7]=((((0.174)*x1264))+(((-0.12)*x1277))+(((-0.12)*x1273))+(((-1.0)*py))+((x1266*x1282))+(((-0.571)*x1265*x1272))+(((0.613)*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1284=IKPowWithIntegerCheck(cj3,-1);
if(!x1284.valid){
continue;
}
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(r22,-1);
if(!x1285.valid){
continue;
}
sj4array[0]=((-1.0)*(x1284.value)*(x1285.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1286=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1286);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1286);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1287=((4.0)*r01);
IkReal x1288=((16.0)*r00);
IkReal x1289=(cj3*sj2);
IkReal x1290=((8.0)*r00);
IkReal x1291=(cj2*cj3);
IkReal x1292=(cj4*r01);
IkReal x1293=((16.0)*cj1);
IkReal x1294=((8.0)*sj1);
IkReal x1295=((16.0)*sj1);
IkReal x1296=((8.0)*cj1);
IkReal x1297=(sj2*sj3);
IkReal x1298=(cj2*sj3);
IkReal x1299=(sj1*x1298);
IkReal x1300=((4.0)*cj4*r00);
IkReal x1301=(((sj1*x1287*x1289))+((x1287*x1299))+((sj1*x1297*x1300))+((cj1*x1287*x1297)));
IkReal x1302=(((cj1*x1289*x1300))+((cj1*x1298*x1300))+((sj1*x1291*x1300))+((cj1*x1287*x1291)));
IkReal x1303=(x1302+(((-1.0)*x1301)));
IkReal x1304=(((sj1*x1289*x1290))+(((-1.0)*cj1*x1290*x1291))+((x1290*x1299))+((x1291*x1292*x1294))+((x1289*x1292*x1296))+((x1292*x1296*x1298))+(((-1.0)*x1292*x1294*x1297))+((cj1*x1290*x1297)));
IkReal x1305=(x1301+(((-1.0)*x1302)));
op[0]=x1303;
op[1]=x1304;
op[2]=x1303;
op[3]=(((x1288*x1299))+((x1291*x1292*x1295))+((cj1*x1288*x1297))+((x1289*x1292*x1293))+((sj1*x1288*x1289))+(((-1.0)*x1292*x1295*x1297))+(((-1.0)*cj1*x1288*x1291))+((x1292*x1293*x1298)));
op[4]=x1305;
op[5]=x1304;
op[6]=x1305;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1306=(cj5*sj4);
IkReal x1307=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1306))+((r01*x1307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1306))+(((-1.0)*r11*x1307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1306))+((r01*x1307))))+IKsqr((((r10*x1306))+(((-1.0)*r11*x1307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1306))+((r01*x1307))), (((r10*x1306))+(((-1.0)*r11*x1307))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1308=IKcos(j0);
IkReal x1309=IKsin(j0);
IkReal x1310=((0.571)*cj2);
IkReal x1311=((1.0)*cj3);
IkReal x1312=((1.0)*sj2);
IkReal x1313=(r11*sj5);
IkReal x1314=(cj5*r01);
IkReal x1315=(r01*sj5);
IkReal x1316=(sj1*sj2);
IkReal x1317=(cj5*r11);
IkReal x1318=(cj3*cj4);
IkReal x1319=(r00*sj5);
IkReal x1320=((1.0)*cj2);
IkReal x1321=(r10*sj5);
IkReal x1322=(cj1*x1308);
IkReal x1323=(cj4*cj5*r00);
IkReal x1324=(cj4*cj5*r10);
IkReal x1325=((1.0)*cj4*sj3);
IkReal x1326=(cj1*x1309);
IkReal x1327=((1.0)*cj5*sj4);
evalcond[0]=(x1308+((sj4*x1313))+(((-1.0)*r10*x1327)));
evalcond[1]=((((-1.0)*x1309))+(((-1.0)*r00*x1327))+((sj4*x1315)));
evalcond[2]=(((sj3*x1314))+((sj3*x1319))+((x1308*x1316))+((x1315*x1318))+(((-1.0)*x1311*x1323))+(((-1.0)*x1320*x1322)));
evalcond[3]=(((sj3*x1317))+((sj3*x1321))+((x1313*x1318))+((x1309*x1316))+(((-1.0)*x1311*x1324))+(((-1.0)*x1320*x1326)));
evalcond[4]=((((-1.0)*x1312*x1322))+(((-1.0)*x1315*x1325))+((sj3*x1323))+((cj3*x1314))+((cj3*x1319))+(((-1.0)*sj1*x1308*x1320)));
evalcond[5]=((((-1.0)*x1312*x1326))+((sj3*x1324))+(((-1.0)*x1313*x1325))+((cj3*x1317))+((cj3*x1321))+(((-1.0)*sj1*x1309*x1320)));
evalcond[6]=((((-0.174)*x1309))+(((0.613)*x1322))+(((-0.12)*x1314))+(((-0.12)*x1319))+(((-1.0)*px))+(((-0.571)*x1308*x1316))+((x1310*x1322)));
evalcond[7]=((((0.174)*x1308))+(((0.613)*x1326))+(((-0.12)*x1321))+(((-0.12)*x1317))+(((-1.0)*py))+(((-0.571)*x1309*x1316))+((x1310*x1326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1330 = IKatan2WithCheck(IkReal(((-0.12)*r21)),IkReal(((-0.12)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1330.valid){
continue;
}
IkReal x1328=((1.0)*(x1330.value));
if((((((0.0144)*(r20*r20)))+(((0.0144)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1331=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0144)*(r20*r20)))+(((0.0144)*(r21*r21)))))),-1);
if(!x1331.valid){
continue;
}
if( (((-1.0)*(x1331.value)*(((((-0.613)*sj1))+(((-1.0)*pz))+(((-0.571)*cj2*sj1))+(((-0.571)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1331.value)*(((((-0.613)*sj1))+(((-1.0)*pz))+(((-0.571)*cj2*sj1))+(((-0.571)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1329=((-1.0)*(IKasin(((-1.0)*(x1331.value)*(((((-0.613)*sj1))+(((-1.0)*pz))+(((-0.571)*cj2*sj1))+(((-0.571)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1329))+(((-1.0)*x1328)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1328))+(((1.0)*x1329)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1332=cj5*cj5;
IkReal x1333=r21*r21;
IkReal x1334=(sj3*x1332);
IkReal x1335=(((sj3*(r22*r22)))+(((-1.0)*x1333*x1334))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1333))+((x1334*(r20*r20))));
j4eval[0]=x1335;
j4eval[1]=IKsign(x1335);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1336=cj5*cj5;
IkReal x1337=r21*r21;
IkReal x1338=((1.0)*cj3);
IkReal x1339=(cj3*x1336);
IkReal x1340=(((x1337*x1339))+(((-1.0)*x1336*x1338*(r20*r20)))+(((-1.0)*x1337*x1338))+(((-1.0)*x1338*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1340;
j4eval[1]=IKsign(x1340);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1341=cj1*cj1;
IkReal x1342=cj2*cj2;
IkReal x1343=(cj2*x1341);
IkReal x1344=(cj1*sj1*sj2);
IkReal x1345=(x1341*x1342);
j0eval[0]=((7.16531933719434)+(((-14.0775016087516)*x1344))+x1341+(((-6.55648729086229)*x1342))+(((13.1129745817246)*x1345))+(((-13.1129745817246)*cj2*x1344))+(((14.0775016087516)*x1343)));
j0eval[1]=IKsign(((89079.25)+(((12432.0)*x1341))+(((-81510.25)*x1342))+(((-175011.5)*x1344))+(((163020.5)*x1345))+(((-163020.5)*cj2*x1344))+(((175011.5)*x1343))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1346=((1.0)*cj5);
IkReal x1347=((1.0)*sj5);
IkReal x1348=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1348;
j0eval[1]=((IKabs(((((-1.0)*r00*x1347))+(((-1.0)*r01*x1346)))))+(IKabs(((((-1.0)*r11*x1346))+(((-1.0)*r10*x1347))))));
j0eval[2]=IKsign(x1348);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1349=cj5*cj5;
IkReal x1350=r21*r21;
IkReal x1351=(sj1*sj2);
IkReal x1352=(r21*sj5);
IkReal x1353=(cj5*r20);
IkReal x1354=(cj1*cj2);
IkReal x1355=(x1350+(r22*r22)+((x1349*(r20*r20)))+(((-1.0)*x1349*x1350))+(((-2.0)*x1352*x1353)));
j4eval[0]=x1355;
j4eval[1]=IKsign(x1355);
j4eval[2]=((IKabs(((((-1.0)*x1351*x1353))+(((-1.0)*x1352*x1354))+((x1351*x1352))+((x1353*x1354)))))+(IKabs((((r22*x1351))+(((-1.0)*r22*x1354))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.50968488714305)*py))+(((-0.428523932076494)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.50968488714305)*px))+(((0.428523932076494)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.50968488714305)*py))+(((-0.428523932076494)*px))))+IKsqr(((((1.50968488714305)*px))+(((0.428523932076494)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.50968488714305)*py))+(((-0.428523932076494)*px))), ((((1.50968488714305)*px))+(((0.428523932076494)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1356=IKcos(j0);
IkReal x1357=IKsin(j0);
evalcond[0]=((((-0.174)*x1357))+(((0.613)*x1356))+(((-1.0)*px)));
evalcond[1]=((((0.174)*x1356))+(((0.613)*x1357))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1358=((1.0)*cj5);
IkReal x1359=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1358)));
j4eval[0]=x1359;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1358))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1359);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1360=((1.0)*cj5);
IkReal x1361=((((-1.0)*r11*x1360))+(((-1.0)*r10*sj5)));
j4eval[0]=x1361;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1360))))));
j4eval[2]=IKsign(x1361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1362=cj5*cj5;
IkReal x1363=((1.0)*sj5);
IkReal x1364=(cj5*r20);
IkReal x1365=(r11*r21);
IkReal x1366=(x1365+((r10*r20*x1362))+(((-1.0)*x1362*x1365))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1363))+(((-1.0)*r11*x1363*x1364)));
j4eval[0]=x1366;
j4eval[1]=IKsign(x1366);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1363))+((cj0*x1364)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1367=cj5*cj5;
IkReal x1368=((1.0)*sj5);
IkReal x1369=(cj5*r20);
IkReal x1370=(r11*r21);
CheckValue<IkReal> x1371 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1368))+((cj0*x1369)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1371.valid){
continue;
}
CheckValue<IkReal> x1372=IKPowWithIntegerCheck(IKsign((x1370+(((-1.0)*r11*x1368*x1369))+((r10*r20*x1367))+((r12*r22))+(((-1.0)*x1367*x1370))+(((-1.0)*cj5*r10*r21*x1368)))),-1);
if(!x1372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1371.value)+(((1.5707963267949)*(x1372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1373=IKsin(j4);
IkReal x1374=IKcos(j4);
IkReal x1375=((1.0)*sj0);
IkReal x1376=(cj5*r00);
IkReal x1377=(r11*sj5);
IkReal x1378=(cj5*r10);
IkReal x1379=(r21*sj5);
IkReal x1380=(cj5*r20);
IkReal x1381=(r01*sj5);
IkReal x1382=((1.0)*x1374);
IkReal x1383=((1.0)*x1373);
evalcond[0]=((((-1.0)*x1380*x1383))+(((-1.0)*r22*x1382))+((x1373*x1379)));
evalcond[1]=((((-1.0)*r22*x1383))+((x1374*x1380))+(((-1.0)*x1379*x1382)));
evalcond[2]=((((-1.0)*r12*x1382))+cj0+(((-1.0)*x1378*x1383))+((x1373*x1377)));
evalcond[3]=((((-1.0)*r02*x1382))+(((-1.0)*x1376*x1383))+(((-1.0)*x1375))+((x1373*x1381)));
evalcond[4]=((((-1.0)*r02*x1383))+((x1374*x1376))+(((-1.0)*x1381*x1382))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1383))+(((-1.0)*x1377*x1382))+((x1374*x1378))+(((-1.0)*x1375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1384=((1.0)*cj5);
CheckValue<IkReal> x1385 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1385.valid){
continue;
}
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1384))+(((-1.0)*r10*sj5)))),-1);
if(!x1386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1385.value)+(((1.5707963267949)*(x1386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1387=IKsin(j4);
IkReal x1388=IKcos(j4);
IkReal x1389=((1.0)*sj0);
IkReal x1390=(cj5*r00);
IkReal x1391=(r11*sj5);
IkReal x1392=(cj5*r10);
IkReal x1393=(r21*sj5);
IkReal x1394=(cj5*r20);
IkReal x1395=(r01*sj5);
IkReal x1396=((1.0)*x1388);
IkReal x1397=((1.0)*x1387);
evalcond[0]=((((-1.0)*x1394*x1397))+((x1387*x1393))+(((-1.0)*r22*x1396)));
evalcond[1]=(((x1388*x1394))+(((-1.0)*x1393*x1396))+(((-1.0)*r22*x1397)));
evalcond[2]=((((-1.0)*x1392*x1397))+(((-1.0)*r12*x1396))+cj0+((x1387*x1391)));
evalcond[3]=((((-1.0)*x1389))+(((-1.0)*r02*x1396))+(((-1.0)*x1390*x1397))+((x1387*x1395)));
evalcond[4]=(((x1388*x1390))+(((-1.0)*r02*x1397))+(((-1.0)*x1395*x1396))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1389))+(((-1.0)*r12*x1397))+((x1388*x1392))+(((-1.0)*x1391*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1398=((1.0)*cj5);
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1398))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
CheckValue<IkReal> x1400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1398)))),-1);
if(!x1400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1399.value)+(((1.5707963267949)*(x1400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1401=IKsin(j4);
IkReal x1402=IKcos(j4);
IkReal x1403=((1.0)*sj0);
IkReal x1404=(cj5*r00);
IkReal x1405=(r11*sj5);
IkReal x1406=(cj5*r10);
IkReal x1407=(r21*sj5);
IkReal x1408=(cj5*r20);
IkReal x1409=(r01*sj5);
IkReal x1410=((1.0)*x1402);
IkReal x1411=((1.0)*x1401);
evalcond[0]=((((-1.0)*r22*x1410))+(((-1.0)*x1408*x1411))+((x1401*x1407)));
evalcond[1]=((((-1.0)*r22*x1411))+(((-1.0)*x1407*x1410))+((x1402*x1408)));
evalcond[2]=(cj0+(((-1.0)*r12*x1410))+(((-1.0)*x1406*x1411))+((x1401*x1405)));
evalcond[3]=((((-1.0)*r02*x1410))+(((-1.0)*x1403))+(((-1.0)*x1404*x1411))+((x1401*x1409)));
evalcond[4]=((((-1.0)*r02*x1411))+(((-1.0)*x1409*x1410))+((x1402*x1404))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1403))+(((-1.0)*r12*x1411))+(((-1.0)*x1405*x1410))+((x1402*x1406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.50968488714305)*py))+(((-0.428523932076494)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.50968488714305)*px))+(((0.428523932076494)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.50968488714305)*py))+(((-0.428523932076494)*px))))+IKsqr(((((1.50968488714305)*px))+(((0.428523932076494)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.50968488714305)*py))+(((-0.428523932076494)*px))), ((((1.50968488714305)*px))+(((0.428523932076494)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1412=IKcos(j0);
IkReal x1413=IKsin(j0);
evalcond[0]=((((0.613)*x1412))+(((-0.174)*x1413))+(((-1.0)*px)));
evalcond[1]=((((0.613)*x1413))+(((-1.0)*py))+(((0.174)*x1412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1414=((1.0)*cj5);
IkReal x1415=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1414)));
j4eval[0]=x1415;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1414)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1416=cj5*cj5;
IkReal x1417=((1.0)*r21);
IkReal x1418=(cj5*sj5);
IkReal x1419=((1.0)*r20);
IkReal x1420=((((-1.0)*r00*x1417*x1418))+((r01*r21))+(((-1.0)*r01*x1416*x1417))+((r00*r20*x1416))+((r02*r22))+(((-1.0)*r01*x1418*x1419)));
j4eval[0]=x1420;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1419)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1421=cj5*cj5;
IkReal x1422=(r21*sj5);
IkReal x1423=(r11*r21);
IkReal x1424=((1.0)*cj5*r20);
IkReal x1425=((((-1.0)*r11*sj5*x1424))+((r12*r22))+(((-1.0)*cj5*r10*x1422))+(((-1.0)*x1421*x1423))+x1423+((r10*r20*x1421)));
j4eval[0]=x1425;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1424))+((sj0*x1422)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1425);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1426=cj5*cj5;
IkReal x1427=(r21*sj5);
IkReal x1428=(r11*r21);
IkReal x1429=((1.0)*cj5*r20);
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1429))+((sj0*x1427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1429))+((r12*r22))+(((-1.0)*x1426*x1428))+(((-1.0)*cj5*r10*x1427))+x1428+((r10*r20*x1426)))),-1);
if(!x1431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1430.value)+(((1.5707963267949)*(x1431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1432=IKsin(j4);
IkReal x1433=IKcos(j4);
IkReal x1434=(r11*sj5);
IkReal x1435=(cj5*r00);
IkReal x1436=(cj5*r10);
IkReal x1437=(r21*sj5);
IkReal x1438=(cj5*r20);
IkReal x1439=(r01*sj5);
IkReal x1440=((1.0)*x1433);
IkReal x1441=((1.0)*x1432);
evalcond[0]=(((x1432*x1437))+(((-1.0)*r22*x1440))+(((-1.0)*x1438*x1441)));
evalcond[1]=((((-1.0)*r22*x1441))+((x1433*x1438))+(((-1.0)*x1437*x1440)));
evalcond[2]=(((x1432*x1434))+cj0+(((-1.0)*r12*x1440))+(((-1.0)*x1436*x1441)));
evalcond[3]=(cj0+((x1433*x1435))+(((-1.0)*x1439*x1440))+(((-1.0)*r02*x1441)));
evalcond[4]=(sj0+((x1433*x1436))+(((-1.0)*r12*x1441))+(((-1.0)*x1434*x1440)));
evalcond[5]=(((x1432*x1439))+(((-1.0)*sj0))+(((-1.0)*x1435*x1441))+(((-1.0)*r02*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1442=cj5*cj5;
IkReal x1443=((1.0)*r21);
IkReal x1444=(cj5*sj5);
IkReal x1445=((1.0)*r20);
CheckValue<IkReal> x1446 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1446.valid){
continue;
}
CheckValue<IkReal> x1447=IKPowWithIntegerCheck(IKsign((((r00*r20*x1442))+(((-1.0)*r01*x1442*x1443))+((r01*r21))+(((-1.0)*r00*x1443*x1444))+(((-1.0)*r01*x1444*x1445))+((r02*r22)))),-1);
if(!x1447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1446.value)+(((1.5707963267949)*(x1447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1448=IKsin(j4);
IkReal x1449=IKcos(j4);
IkReal x1450=(r11*sj5);
IkReal x1451=(cj5*r00);
IkReal x1452=(cj5*r10);
IkReal x1453=(r21*sj5);
IkReal x1454=(cj5*r20);
IkReal x1455=(r01*sj5);
IkReal x1456=((1.0)*x1449);
IkReal x1457=((1.0)*x1448);
evalcond[0]=((((-1.0)*r22*x1456))+(((-1.0)*x1454*x1457))+((x1448*x1453)));
evalcond[1]=((((-1.0)*r22*x1457))+(((-1.0)*x1453*x1456))+((x1449*x1454)));
evalcond[2]=(cj0+((x1448*x1450))+(((-1.0)*x1452*x1457))+(((-1.0)*r12*x1456)));
evalcond[3]=(cj0+(((-1.0)*x1455*x1456))+(((-1.0)*r02*x1457))+((x1449*x1451)));
evalcond[4]=(sj0+((x1449*x1452))+(((-1.0)*r12*x1457))+(((-1.0)*x1450*x1456)));
evalcond[5]=((((-1.0)*sj0))+((x1448*x1455))+(((-1.0)*r02*x1456))+(((-1.0)*x1451*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1458=((1.0)*cj5);
CheckValue<IkReal> x1459 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1458))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1459.valid){
continue;
}
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1458)))),-1);
if(!x1460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1459.value)+(((1.5707963267949)*(x1460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1461=IKsin(j4);
IkReal x1462=IKcos(j4);
IkReal x1463=(r11*sj5);
IkReal x1464=(cj5*r00);
IkReal x1465=(cj5*r10);
IkReal x1466=(r21*sj5);
IkReal x1467=(cj5*r20);
IkReal x1468=(r01*sj5);
IkReal x1469=((1.0)*x1462);
IkReal x1470=((1.0)*x1461);
evalcond[0]=((((-1.0)*r22*x1469))+((x1461*x1466))+(((-1.0)*x1467*x1470)));
evalcond[1]=((((-1.0)*r22*x1470))+(((-1.0)*x1466*x1469))+((x1462*x1467)));
evalcond[2]=(cj0+((x1461*x1463))+(((-1.0)*x1465*x1470))+(((-1.0)*r12*x1469)));
evalcond[3]=(cj0+((x1462*x1464))+(((-1.0)*r02*x1470))+(((-1.0)*x1468*x1469)));
evalcond[4]=(sj0+(((-1.0)*r12*x1470))+(((-1.0)*x1463*x1469))+((x1462*x1465)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1469))+((x1461*x1468))+(((-1.0)*x1464*x1470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-5.74712643678161)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.74712643678161)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.74712643678161)*px))+IKsqr(((5.74712643678161)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-5.74712643678161)*px), ((5.74712643678161)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.174)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.174)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1471=((1.0)*cj5);
IkReal x1472=((((-1.0)*r01*x1471))+(((-1.0)*r00*sj5)));
j4eval[0]=x1472;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1471)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1473=((1.0)*cj5);
IkReal x1474=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1473)));
j4eval[0]=x1474;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1473))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1475=cj5*cj5;
IkReal x1476=((1.0)*sj5);
IkReal x1477=(cj5*r20);
IkReal x1478=(r11*r21);
IkReal x1479=((((-1.0)*cj5*r10*r21*x1476))+((r12*r22))+(((-1.0)*r11*x1476*x1477))+x1478+((r10*r20*x1475))+(((-1.0)*x1475*x1478)));
j4eval[0]=x1479;
j4eval[1]=IKsign(x1479);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1476))+((cj0*x1477)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1480=cj5*cj5;
IkReal x1481=((1.0)*sj5);
IkReal x1482=(cj5*r20);
IkReal x1483=(r11*r21);
CheckValue<IkReal> x1484 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1481))+((cj0*x1482)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1484.valid){
continue;
}
CheckValue<IkReal> x1485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1481*x1482))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1481))+(((-1.0)*x1480*x1483))+x1483+((r10*r20*x1480)))),-1);
if(!x1485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1484.value)+(((1.5707963267949)*(x1485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1486=IKsin(j4);
IkReal x1487=IKcos(j4);
IkReal x1488=((1.0)*sj0);
IkReal x1489=(cj5*r00);
IkReal x1490=(r11*sj5);
IkReal x1491=(cj5*r10);
IkReal x1492=(r21*sj5);
IkReal x1493=(cj5*r20);
IkReal x1494=(r01*sj5);
IkReal x1495=((1.0)*x1487);
IkReal x1496=((1.0)*x1486);
evalcond[0]=(((x1486*x1492))+(((-1.0)*x1493*x1496))+(((-1.0)*r22*x1495)));
evalcond[1]=(((x1487*x1493))+(((-1.0)*x1492*x1495))+(((-1.0)*r22*x1496)));
evalcond[2]=((((-1.0)*r12*x1495))+cj0+((x1486*x1490))+(((-1.0)*x1491*x1496)));
evalcond[3]=((((-1.0)*x1488))+((x1486*x1494))+(((-1.0)*r02*x1495))+(((-1.0)*x1489*x1496)));
evalcond[4]=((((-1.0)*x1494*x1495))+((x1487*x1489))+(((-1.0)*r02*x1496))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1496))+(((-1.0)*x1488))+((x1487*x1491))+(((-1.0)*x1490*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1497=((1.0)*cj5);
CheckValue<IkReal> x1498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1497)))),-1);
if(!x1498.valid){
continue;
}
CheckValue<IkReal> x1499 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1497))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1498.value)))+(x1499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1500=IKsin(j4);
IkReal x1501=IKcos(j4);
IkReal x1502=((1.0)*sj0);
IkReal x1503=(cj5*r00);
IkReal x1504=(r11*sj5);
IkReal x1505=(cj5*r10);
IkReal x1506=(r21*sj5);
IkReal x1507=(cj5*r20);
IkReal x1508=(r01*sj5);
IkReal x1509=((1.0)*x1501);
IkReal x1510=((1.0)*x1500);
evalcond[0]=((((-1.0)*r22*x1509))+(((-1.0)*x1507*x1510))+((x1500*x1506)));
evalcond[1]=((((-1.0)*r22*x1510))+(((-1.0)*x1506*x1509))+((x1501*x1507)));
evalcond[2]=(cj0+((x1500*x1504))+(((-1.0)*x1505*x1510))+(((-1.0)*r12*x1509)));
evalcond[3]=((((-1.0)*x1502))+(((-1.0)*r02*x1509))+((x1500*x1508))+(((-1.0)*x1503*x1510)));
evalcond[4]=(((x1501*x1503))+(((-1.0)*r02*x1510))+(((-1.0)*x1508*x1509))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1502))+(((-1.0)*x1504*x1509))+((x1501*x1505))+(((-1.0)*r12*x1510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1511=((1.0)*cj5);
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1511))+(((-1.0)*r00*sj5)))),-1);
if(!x1512.valid){
continue;
}
CheckValue<IkReal> x1513 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1511))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1512.value)))+(x1513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1514=IKsin(j4);
IkReal x1515=IKcos(j4);
IkReal x1516=((1.0)*sj0);
IkReal x1517=(cj5*r00);
IkReal x1518=(r11*sj5);
IkReal x1519=(cj5*r10);
IkReal x1520=(r21*sj5);
IkReal x1521=(cj5*r20);
IkReal x1522=(r01*sj5);
IkReal x1523=((1.0)*x1515);
IkReal x1524=((1.0)*x1514);
evalcond[0]=((((-1.0)*r22*x1523))+((x1514*x1520))+(((-1.0)*x1521*x1524)));
evalcond[1]=((((-1.0)*r22*x1524))+((x1515*x1521))+(((-1.0)*x1520*x1523)));
evalcond[2]=((((-1.0)*r12*x1523))+((x1514*x1518))+cj0+(((-1.0)*x1519*x1524)));
evalcond[3]=((((-1.0)*x1516))+(((-1.0)*r02*x1523))+(((-1.0)*x1517*x1524))+((x1514*x1522)));
evalcond[4]=((((-1.0)*r02*x1524))+((x1515*x1517))+(((-1.0)*x1522*x1523))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1524))+(((-1.0)*x1516))+(((-1.0)*x1518*x1523))+((x1515*x1519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-5.74712643678161)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.74712643678161)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.74712643678161)*px))+IKsqr(((5.74712643678161)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-5.74712643678161)*px), ((5.74712643678161)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.174)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.174)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1525=((1.0)*cj5);
IkReal x1526=((((-1.0)*r01*x1525))+(((-1.0)*r00*sj5)));
j4eval[0]=x1526;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1525))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1527=cj5*cj5;
IkReal x1528=((1.0)*r21);
IkReal x1529=(cj5*sj5);
IkReal x1530=((1.0)*r20);
IkReal x1531=(((r00*r20*x1527))+((r01*r21))+(((-1.0)*r01*x1529*x1530))+(((-1.0)*r00*x1528*x1529))+((r02*r22))+(((-1.0)*r01*x1527*x1528)));
j4eval[0]=x1531;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1530))))));
j4eval[2]=IKsign(x1531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1532=cj5*cj5;
IkReal x1533=(r21*sj5);
IkReal x1534=(r11*r21);
IkReal x1535=((1.0)*cj5*r20);
IkReal x1536=((((-1.0)*x1532*x1534))+((r12*r22))+x1534+(((-1.0)*cj5*r10*x1533))+(((-1.0)*r11*sj5*x1535))+((r10*r20*x1532)));
j4eval[0]=x1536;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1535))+((sj0*x1533))))));
j4eval[2]=IKsign(x1536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1537=cj5*cj5;
IkReal x1538=(r21*sj5);
IkReal x1539=(r11*r21);
IkReal x1540=((1.0)*cj5*r20);
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1538))+(((-1.0)*sj0*x1540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1540))+((r12*r22))+x1539+(((-1.0)*cj5*r10*x1538))+(((-1.0)*x1537*x1539))+((r10*r20*x1537)))),-1);
if(!x1542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1541.value)+(((1.5707963267949)*(x1542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1543=IKsin(j4);
IkReal x1544=IKcos(j4);
IkReal x1545=(r11*sj5);
IkReal x1546=(cj5*r00);
IkReal x1547=(cj5*r10);
IkReal x1548=(r21*sj5);
IkReal x1549=(cj5*r20);
IkReal x1550=(r01*sj5);
IkReal x1551=((1.0)*x1544);
IkReal x1552=((1.0)*x1543);
evalcond[0]=((((-1.0)*x1549*x1552))+(((-1.0)*r22*x1551))+((x1543*x1548)));
evalcond[1]=(((x1544*x1549))+(((-1.0)*r22*x1552))+(((-1.0)*x1548*x1551)));
evalcond[2]=(cj0+(((-1.0)*r12*x1551))+((x1543*x1545))+(((-1.0)*x1547*x1552)));
evalcond[3]=(cj0+((x1544*x1546))+(((-1.0)*r02*x1552))+(((-1.0)*x1550*x1551)));
evalcond[4]=(sj0+((x1544*x1547))+(((-1.0)*x1545*x1551))+(((-1.0)*r12*x1552)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1546*x1552))+(((-1.0)*r02*x1551))+((x1543*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1553=cj5*cj5;
IkReal x1554=((1.0)*r21);
IkReal x1555=(cj5*sj5);
IkReal x1556=((1.0)*r20);
CheckValue<IkReal> x1557 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1557.valid){
continue;
}
CheckValue<IkReal> x1558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1553*x1554))+((r01*r21))+((r00*r20*x1553))+(((-1.0)*r00*x1554*x1555))+(((-1.0)*r01*x1555*x1556))+((r02*r22)))),-1);
if(!x1558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1557.value)+(((1.5707963267949)*(x1558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1559=IKsin(j4);
IkReal x1560=IKcos(j4);
IkReal x1561=(r11*sj5);
IkReal x1562=(cj5*r00);
IkReal x1563=(cj5*r10);
IkReal x1564=(r21*sj5);
IkReal x1565=(cj5*r20);
IkReal x1566=(r01*sj5);
IkReal x1567=((1.0)*x1560);
IkReal x1568=((1.0)*x1559);
evalcond[0]=((((-1.0)*x1565*x1568))+(((-1.0)*r22*x1567))+((x1559*x1564)));
evalcond[1]=(((x1560*x1565))+(((-1.0)*r22*x1568))+(((-1.0)*x1564*x1567)));
evalcond[2]=(cj0+(((-1.0)*x1563*x1568))+(((-1.0)*r12*x1567))+((x1559*x1561)));
evalcond[3]=(((x1560*x1562))+(((-1.0)*r02*x1568))+cj0+(((-1.0)*x1566*x1567)));
evalcond[4]=(((x1560*x1563))+sj0+(((-1.0)*r12*x1568))+(((-1.0)*x1561*x1567)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1567))+(((-1.0)*x1562*x1568))+((x1559*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1569=((1.0)*cj5);
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1569)))),-1);
if(!x1570.valid){
continue;
}
CheckValue<IkReal> x1571 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1570.value)))+(x1571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1572=IKsin(j4);
IkReal x1573=IKcos(j4);
IkReal x1574=(r11*sj5);
IkReal x1575=(cj5*r00);
IkReal x1576=(cj5*r10);
IkReal x1577=(r21*sj5);
IkReal x1578=(cj5*r20);
IkReal x1579=(r01*sj5);
IkReal x1580=((1.0)*x1573);
IkReal x1581=((1.0)*x1572);
evalcond[0]=((((-1.0)*x1578*x1581))+((x1572*x1577))+(((-1.0)*r22*x1580)));
evalcond[1]=((((-1.0)*x1577*x1580))+((x1573*x1578))+(((-1.0)*r22*x1581)));
evalcond[2]=(((x1572*x1574))+cj0+(((-1.0)*x1576*x1581))+(((-1.0)*r12*x1580)));
evalcond[3]=(cj0+((x1573*x1575))+(((-1.0)*r02*x1581))+(((-1.0)*x1579*x1580)));
evalcond[4]=(sj0+((x1573*x1576))+(((-1.0)*x1574*x1580))+(((-1.0)*r12*x1581)));
evalcond[5]=((((-1.0)*sj0))+((x1572*x1579))+(((-1.0)*r02*x1580))+(((-1.0)*x1575*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.428523932076494)*px))+(((-1.50968488714305)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.50968488714305)*px))+(((0.428523932076494)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.428523932076494)*px))+(((-1.50968488714305)*py))))+IKsqr(((((-1.50968488714305)*px))+(((0.428523932076494)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.428523932076494)*px))+(((-1.50968488714305)*py))), ((((-1.50968488714305)*px))+(((0.428523932076494)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1582=IKcos(j0);
IkReal x1583=IKsin(j0);
evalcond[0]=((((-0.613)*x1582))+(((-0.174)*x1583))+(((-1.0)*px)));
evalcond[1]=((((-0.613)*x1583))+(((-1.0)*py))+(((0.174)*x1582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1584=((1.0)*cj5);
IkReal x1585=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1584)));
j4eval[0]=x1585;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1584))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1586=cj5*cj5;
IkReal x1587=((1.0)*r21);
IkReal x1588=(cj5*sj5);
IkReal x1589=((1.0)*r20);
IkReal x1590=(((r01*r21))+(((-1.0)*r00*x1587*x1588))+(((-1.0)*r01*x1586*x1587))+((r00*r20*x1586))+((r02*r22))+(((-1.0)*r01*x1588*x1589)));
j4eval[0]=x1590;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1589))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1591=cj5*cj5;
IkReal x1592=(r21*sj5);
IkReal x1593=(r11*r21);
IkReal x1594=((1.0)*cj5*r20);
IkReal x1595=(((r10*r20*x1591))+((r12*r22))+x1593+(((-1.0)*r11*sj5*x1594))+(((-1.0)*x1591*x1593))+(((-1.0)*cj5*r10*x1592)));
j4eval[0]=x1595;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1594))+((sj0*x1592)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1596=cj5*cj5;
IkReal x1597=(r21*sj5);
IkReal x1598=(r11*r21);
IkReal x1599=((1.0)*cj5*r20);
CheckValue<IkReal> x1600 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1599))+((sj0*x1597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1600.valid){
continue;
}
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(IKsign((((r10*r20*x1596))+((r12*r22))+x1598+(((-1.0)*r11*sj5*x1599))+(((-1.0)*x1596*x1598))+(((-1.0)*cj5*r10*x1597)))),-1);
if(!x1601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1600.value)+(((1.5707963267949)*(x1601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1602=IKsin(j4);
IkReal x1603=IKcos(j4);
IkReal x1604=(r11*sj5);
IkReal x1605=(cj5*r00);
IkReal x1606=(cj5*r10);
IkReal x1607=(r21*sj5);
IkReal x1608=(cj5*r20);
IkReal x1609=(r01*sj5);
IkReal x1610=((1.0)*x1603);
IkReal x1611=((1.0)*x1602);
evalcond[0]=((((-1.0)*r22*x1610))+(((-1.0)*x1608*x1611))+((x1602*x1607)));
evalcond[1]=((((-1.0)*r22*x1611))+((x1603*x1608))+(((-1.0)*x1607*x1610)));
evalcond[2]=((((-1.0)*x1606*x1611))+(((-1.0)*r12*x1610))+cj0+((x1602*x1604)));
evalcond[3]=(cj0+(((-1.0)*r02*x1611))+((x1603*x1605))+(((-1.0)*x1609*x1610)));
evalcond[4]=((((-1.0)*r12*x1611))+sj0+((x1603*x1606))+(((-1.0)*x1604*x1610)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1610))+(((-1.0)*x1605*x1611))+((x1602*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1612=cj5*cj5;
IkReal x1613=((1.0)*r21);
IkReal x1614=(cj5*sj5);
IkReal x1615=((1.0)*r20);
CheckValue<IkReal> x1616 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1616.valid){
continue;
}
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(IKsign((((r00*r20*x1612))+(((-1.0)*r00*x1613*x1614))+((r01*r21))+(((-1.0)*r01*x1614*x1615))+(((-1.0)*r01*x1612*x1613))+((r02*r22)))),-1);
if(!x1617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1616.value)+(((1.5707963267949)*(x1617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1618=IKsin(j4);
IkReal x1619=IKcos(j4);
IkReal x1620=(r11*sj5);
IkReal x1621=(cj5*r00);
IkReal x1622=(cj5*r10);
IkReal x1623=(r21*sj5);
IkReal x1624=(cj5*r20);
IkReal x1625=(r01*sj5);
IkReal x1626=((1.0)*x1619);
IkReal x1627=((1.0)*x1618);
evalcond[0]=((((-1.0)*r22*x1626))+(((-1.0)*x1624*x1627))+((x1618*x1623)));
evalcond[1]=((((-1.0)*x1623*x1626))+(((-1.0)*r22*x1627))+((x1619*x1624)));
evalcond[2]=((((-1.0)*r12*x1626))+cj0+(((-1.0)*x1622*x1627))+((x1618*x1620)));
evalcond[3]=(cj0+(((-1.0)*r02*x1627))+(((-1.0)*x1625*x1626))+((x1619*x1621)));
evalcond[4]=((((-1.0)*r12*x1627))+sj0+(((-1.0)*x1620*x1626))+((x1619*x1622)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1626))+(((-1.0)*x1621*x1627))+((x1618*x1625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1628=((1.0)*cj5);
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1628)))),-1);
if(!x1629.valid){
continue;
}
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1629.value)))+(x1630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1631=IKsin(j4);
IkReal x1632=IKcos(j4);
IkReal x1633=(r11*sj5);
IkReal x1634=(cj5*r00);
IkReal x1635=(cj5*r10);
IkReal x1636=(r21*sj5);
IkReal x1637=(cj5*r20);
IkReal x1638=(r01*sj5);
IkReal x1639=((1.0)*x1632);
IkReal x1640=((1.0)*x1631);
evalcond[0]=((((-1.0)*r22*x1639))+(((-1.0)*x1637*x1640))+((x1631*x1636)));
evalcond[1]=((((-1.0)*r22*x1640))+(((-1.0)*x1636*x1639))+((x1632*x1637)));
evalcond[2]=((((-1.0)*x1635*x1640))+cj0+(((-1.0)*r12*x1639))+((x1631*x1633)));
evalcond[3]=(cj0+(((-1.0)*x1638*x1639))+((x1632*x1634))+(((-1.0)*r02*x1640)));
evalcond[4]=(sj0+(((-1.0)*r12*x1640))+(((-1.0)*x1633*x1639))+((x1632*x1635)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1634*x1640))+((x1631*x1638))+(((-1.0)*r02*x1639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.428523932076494)*px))+(((-1.50968488714305)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.50968488714305)*px))+(((0.428523932076494)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.428523932076494)*px))+(((-1.50968488714305)*py))))+IKsqr(((((-1.50968488714305)*px))+(((0.428523932076494)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.428523932076494)*px))+(((-1.50968488714305)*py))), ((((-1.50968488714305)*px))+(((0.428523932076494)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1641=IKcos(j0);
IkReal x1642=IKsin(j0);
evalcond[0]=((((-0.174)*x1642))+(((-1.0)*px))+(((-0.613)*x1641)));
evalcond[1]=((((0.174)*x1641))+(((-1.0)*py))+(((-0.613)*x1642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1643=((1.0)*cj5);
IkReal x1644=((((-1.0)*r01*x1643))+(((-1.0)*r00*sj5)));
j4eval[0]=x1644;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1643))))));
j4eval[2]=IKsign(x1644);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1645=((1.0)*cj5);
IkReal x1646=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1645)));
j4eval[0]=x1646;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1645))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1647=cj5*cj5;
IkReal x1648=((1.0)*sj5);
IkReal x1649=(cj5*r20);
IkReal x1650=(r11*r21);
IkReal x1651=(x1650+(((-1.0)*cj5*r10*r21*x1648))+(((-1.0)*x1647*x1650))+((r12*r22))+((r10*r20*x1647))+(((-1.0)*r11*x1648*x1649)));
j4eval[0]=x1651;
j4eval[1]=IKsign(x1651);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1648))+((cj0*x1649)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1652=cj5*cj5;
IkReal x1653=((1.0)*sj5);
IkReal x1654=(cj5*r20);
IkReal x1655=(r11*r21);
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1653*x1654))+(((-1.0)*cj5*r10*r21*x1653))+x1655+((r12*r22))+(((-1.0)*x1652*x1655))+((r10*r20*x1652)))),-1);
if(!x1656.valid){
continue;
}
CheckValue<IkReal> x1657 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1653))+((cj0*x1654)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1656.value)))+(x1657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1658=IKsin(j4);
IkReal x1659=IKcos(j4);
IkReal x1660=((1.0)*sj0);
IkReal x1661=(cj5*r00);
IkReal x1662=(r11*sj5);
IkReal x1663=(cj5*r10);
IkReal x1664=(r21*sj5);
IkReal x1665=(cj5*r20);
IkReal x1666=(r01*sj5);
IkReal x1667=((1.0)*x1659);
IkReal x1668=((1.0)*x1658);
evalcond[0]=((((-1.0)*r22*x1667))+((x1658*x1664))+(((-1.0)*x1665*x1668)));
evalcond[1]=((((-1.0)*r22*x1668))+((x1659*x1665))+(((-1.0)*x1664*x1667)));
evalcond[2]=(cj0+(((-1.0)*r12*x1667))+(((-1.0)*x1663*x1668))+((x1658*x1662)));
evalcond[3]=((((-1.0)*x1661*x1668))+(((-1.0)*x1660))+((x1658*x1666))+(((-1.0)*r02*x1667)));
evalcond[4]=(((x1659*x1661))+(((-1.0)*r02*x1668))+(((-1.0)*x1666*x1667))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1662*x1667))+(((-1.0)*r12*x1668))+(((-1.0)*x1660))+((x1659*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1669=((1.0)*cj5);
CheckValue<IkReal> x1670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1669)))),-1);
if(!x1670.valid){
continue;
}
CheckValue<IkReal> x1671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1669))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1670.value)))+(x1671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1672=IKsin(j4);
IkReal x1673=IKcos(j4);
IkReal x1674=((1.0)*sj0);
IkReal x1675=(cj5*r00);
IkReal x1676=(r11*sj5);
IkReal x1677=(cj5*r10);
IkReal x1678=(r21*sj5);
IkReal x1679=(cj5*r20);
IkReal x1680=(r01*sj5);
IkReal x1681=((1.0)*x1673);
IkReal x1682=((1.0)*x1672);
evalcond[0]=((((-1.0)*x1679*x1682))+(((-1.0)*r22*x1681))+((x1672*x1678)));
evalcond[1]=(((x1673*x1679))+(((-1.0)*x1678*x1681))+(((-1.0)*r22*x1682)));
evalcond[2]=((((-1.0)*r12*x1681))+(((-1.0)*x1677*x1682))+cj0+((x1672*x1676)));
evalcond[3]=(((x1672*x1680))+(((-1.0)*x1675*x1682))+(((-1.0)*r02*x1681))+(((-1.0)*x1674)));
evalcond[4]=(((x1673*x1675))+(((-1.0)*x1680*x1681))+(((-1.0)*r02*x1682))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1682))+(((-1.0)*x1676*x1681))+((x1673*x1677))+(((-1.0)*x1674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1683=((1.0)*cj5);
CheckValue<IkReal> x1684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1683))+(((-1.0)*r00*sj5)))),-1);
if(!x1684.valid){
continue;
}
CheckValue<IkReal> x1685 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1684.value)))+(x1685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1686=IKsin(j4);
IkReal x1687=IKcos(j4);
IkReal x1688=((1.0)*sj0);
IkReal x1689=(cj5*r00);
IkReal x1690=(r11*sj5);
IkReal x1691=(cj5*r10);
IkReal x1692=(r21*sj5);
IkReal x1693=(cj5*r20);
IkReal x1694=(r01*sj5);
IkReal x1695=((1.0)*x1687);
IkReal x1696=((1.0)*x1686);
evalcond[0]=(((x1686*x1692))+(((-1.0)*r22*x1695))+(((-1.0)*x1693*x1696)));
evalcond[1]=((((-1.0)*x1692*x1695))+(((-1.0)*r22*x1696))+((x1687*x1693)));
evalcond[2]=(cj0+(((-1.0)*r12*x1695))+(((-1.0)*x1691*x1696))+((x1686*x1690)));
evalcond[3]=((((-1.0)*x1688))+((x1686*x1694))+(((-1.0)*r02*x1695))+(((-1.0)*x1689*x1696)));
evalcond[4]=((((-1.0)*x1694*x1695))+(((-1.0)*r02*x1696))+((x1687*x1689))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1688))+(((-1.0)*r12*x1696))+(((-1.0)*x1690*x1695))+((x1687*x1691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-5.74712643678161)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.74712643678161)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.74712643678161)*px))+IKsqr(((5.74712643678161)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-5.74712643678161)*px), ((5.74712643678161)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.174)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.174)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1697=((1.0)*cj5);
IkReal x1698=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1697)));
j4eval[0]=x1698;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1697))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1699=cj5*cj5;
IkReal x1700=((1.0)*r21);
IkReal x1701=(cj5*sj5);
IkReal x1702=((1.0)*r20);
IkReal x1703=((((-1.0)*r01*x1701*x1702))+((r01*r21))+(((-1.0)*r00*x1700*x1701))+((r00*r20*x1699))+(((-1.0)*r01*x1699*x1700))+((r02*r22)));
j4eval[0]=x1703;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1702)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1704=cj5*cj5;
IkReal x1705=(r21*sj5);
IkReal x1706=(r11*r21);
IkReal x1707=((1.0)*cj5*r20);
IkReal x1708=(x1706+((r12*r22))+(((-1.0)*r11*sj5*x1707))+((r10*r20*x1704))+(((-1.0)*cj5*r10*x1705))+(((-1.0)*x1704*x1706)));
j4eval[0]=x1708;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1707))+((sj0*x1705))))));
j4eval[2]=IKsign(x1708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1709=cj5*cj5;
IkReal x1710=(r21*sj5);
IkReal x1711=(r11*r21);
IkReal x1712=((1.0)*cj5*r20);
CheckValue<IkReal> x1713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1712))+((sj0*x1710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1709*x1711))+x1711+(((-1.0)*r11*sj5*x1712))+((r12*r22))+((r10*r20*x1709))+(((-1.0)*cj5*r10*x1710)))),-1);
if(!x1714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1713.value)+(((1.5707963267949)*(x1714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1715=IKsin(j4);
IkReal x1716=IKcos(j4);
IkReal x1717=(r11*sj5);
IkReal x1718=(cj5*r00);
IkReal x1719=(cj5*r10);
IkReal x1720=(r21*sj5);
IkReal x1721=(cj5*r20);
IkReal x1722=(r01*sj5);
IkReal x1723=((1.0)*x1716);
IkReal x1724=((1.0)*x1715);
evalcond[0]=((((-1.0)*r22*x1723))+((x1715*x1720))+(((-1.0)*x1721*x1724)));
evalcond[1]=((((-1.0)*r22*x1724))+(((-1.0)*x1720*x1723))+((x1716*x1721)));
evalcond[2]=(cj0+(((-1.0)*r12*x1723))+((x1715*x1717))+(((-1.0)*x1719*x1724)));
evalcond[3]=(cj0+(((-1.0)*x1722*x1723))+((x1716*x1718))+(((-1.0)*r02*x1724)));
evalcond[4]=(sj0+(((-1.0)*r12*x1724))+((x1716*x1719))+(((-1.0)*x1717*x1723)));
evalcond[5]=((((-1.0)*sj0))+((x1715*x1722))+(((-1.0)*x1718*x1724))+(((-1.0)*r02*x1723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1725=cj5*cj5;
IkReal x1726=((1.0)*r21);
IkReal x1727=(cj5*sj5);
IkReal x1728=((1.0)*r20);
CheckValue<IkReal> x1729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1727*x1728))+((r01*r21))+(((-1.0)*r00*x1726*x1727))+((r02*r22))+(((-1.0)*r01*x1725*x1726))+((r00*r20*x1725)))),-1);
if(!x1729.valid){
continue;
}
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1729.value)))+(x1730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1731=IKsin(j4);
IkReal x1732=IKcos(j4);
IkReal x1733=(r11*sj5);
IkReal x1734=(cj5*r00);
IkReal x1735=(cj5*r10);
IkReal x1736=(r21*sj5);
IkReal x1737=(cj5*r20);
IkReal x1738=(r01*sj5);
IkReal x1739=((1.0)*x1732);
IkReal x1740=((1.0)*x1731);
evalcond[0]=(((x1731*x1736))+(((-1.0)*x1737*x1740))+(((-1.0)*r22*x1739)));
evalcond[1]=((((-1.0)*r22*x1740))+(((-1.0)*x1736*x1739))+((x1732*x1737)));
evalcond[2]=((((-1.0)*x1735*x1740))+((x1731*x1733))+cj0+(((-1.0)*r12*x1739)));
evalcond[3]=(cj0+(((-1.0)*x1738*x1739))+((x1732*x1734))+(((-1.0)*r02*x1740)));
evalcond[4]=((((-1.0)*x1733*x1739))+(((-1.0)*r12*x1740))+sj0+((x1732*x1735)));
evalcond[5]=((((-1.0)*sj0))+((x1731*x1738))+(((-1.0)*x1734*x1740))+(((-1.0)*r02*x1739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1741=((1.0)*cj5);
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
CheckValue<IkReal> x1743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1741)))),-1);
if(!x1743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1742.value)+(((1.5707963267949)*(x1743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1744=IKsin(j4);
IkReal x1745=IKcos(j4);
IkReal x1746=(r11*sj5);
IkReal x1747=(cj5*r00);
IkReal x1748=(cj5*r10);
IkReal x1749=(r21*sj5);
IkReal x1750=(cj5*r20);
IkReal x1751=(r01*sj5);
IkReal x1752=((1.0)*x1745);
IkReal x1753=((1.0)*x1744);
evalcond[0]=((((-1.0)*r22*x1752))+((x1744*x1749))+(((-1.0)*x1750*x1753)));
evalcond[1]=((((-1.0)*r22*x1753))+((x1745*x1750))+(((-1.0)*x1749*x1752)));
evalcond[2]=((((-1.0)*x1748*x1753))+(((-1.0)*r12*x1752))+cj0+((x1744*x1746)));
evalcond[3]=(cj0+((x1745*x1747))+(((-1.0)*x1751*x1752))+(((-1.0)*r02*x1753)));
evalcond[4]=(sj0+(((-1.0)*r12*x1753))+((x1745*x1748))+(((-1.0)*x1746*x1752)));
evalcond[5]=((((-1.0)*sj0))+((x1744*x1751))+(((-1.0)*x1747*x1753))+(((-1.0)*r02*x1752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-5.74712643678161)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.74712643678161)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.74712643678161)*px))+IKsqr(((5.74712643678161)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-5.74712643678161)*px), ((5.74712643678161)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.174)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.174)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1754=((1.0)*cj5);
IkReal x1755=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1754)));
j4eval[0]=x1755;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1754)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1756=((1.0)*cj5);
IkReal x1757=((((-1.0)*r11*x1756))+(((-1.0)*r10*sj5)));
j4eval[0]=x1757;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1756))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1757);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1758=cj5*cj5;
IkReal x1759=((1.0)*sj5);
IkReal x1760=(cj5*r20);
IkReal x1761=(r11*r21);
IkReal x1762=(((r10*r20*x1758))+(((-1.0)*cj5*r10*r21*x1759))+x1761+(((-1.0)*r11*x1759*x1760))+((r12*r22))+(((-1.0)*x1758*x1761)));
j4eval[0]=x1762;
j4eval[1]=IKsign(x1762);
j4eval[2]=((IKabs((((cj0*x1760))+(((-1.0)*cj0*r21*x1759)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1763=cj5*cj5;
IkReal x1764=((1.0)*sj5);
IkReal x1765=(cj5*r20);
IkReal x1766=(r11*r21);
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1763*x1766))+x1766+((r12*r22))+(((-1.0)*cj5*r10*r21*x1764))+((r10*r20*x1763))+(((-1.0)*r11*x1764*x1765)))),-1);
if(!x1767.valid){
continue;
}
CheckValue<IkReal> x1768 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1764))+((cj0*x1765)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1767.value)))+(x1768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1769=IKsin(j4);
IkReal x1770=IKcos(j4);
IkReal x1771=((1.0)*sj0);
IkReal x1772=(cj5*r00);
IkReal x1773=(r11*sj5);
IkReal x1774=(cj5*r10);
IkReal x1775=(r21*sj5);
IkReal x1776=(cj5*r20);
IkReal x1777=(r01*sj5);
IkReal x1778=((1.0)*x1770);
IkReal x1779=((1.0)*x1769);
evalcond[0]=((((-1.0)*x1776*x1779))+(((-1.0)*r22*x1778))+((x1769*x1775)));
evalcond[1]=(((x1770*x1776))+(((-1.0)*x1775*x1778))+(((-1.0)*r22*x1779)));
evalcond[2]=(cj0+(((-1.0)*x1774*x1779))+(((-1.0)*r12*x1778))+((x1769*x1773)));
evalcond[3]=((((-1.0)*x1772*x1779))+(((-1.0)*r02*x1778))+(((-1.0)*x1771))+((x1769*x1777)));
evalcond[4]=(((x1770*x1772))+(((-1.0)*r02*x1779))+(((-1.0)*x1777*x1778))+(((-1.0)*cj0)));
evalcond[5]=(((x1770*x1774))+(((-1.0)*x1771))+(((-1.0)*x1773*x1778))+(((-1.0)*r12*x1779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1780=((1.0)*cj5);
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1780)))),-1);
if(!x1781.valid){
continue;
}
CheckValue<IkReal> x1782 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1781.value)))+(x1782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1783=IKsin(j4);
IkReal x1784=IKcos(j4);
IkReal x1785=((1.0)*sj0);
IkReal x1786=(cj5*r00);
IkReal x1787=(r11*sj5);
IkReal x1788=(cj5*r10);
IkReal x1789=(r21*sj5);
IkReal x1790=(cj5*r20);
IkReal x1791=(r01*sj5);
IkReal x1792=((1.0)*x1784);
IkReal x1793=((1.0)*x1783);
evalcond[0]=(((x1783*x1789))+(((-1.0)*r22*x1792))+(((-1.0)*x1790*x1793)));
evalcond[1]=((((-1.0)*r22*x1793))+(((-1.0)*x1789*x1792))+((x1784*x1790)));
evalcond[2]=(((x1783*x1787))+cj0+(((-1.0)*r12*x1792))+(((-1.0)*x1788*x1793)));
evalcond[3]=(((x1783*x1791))+(((-1.0)*x1785))+(((-1.0)*x1786*x1793))+(((-1.0)*r02*x1792)));
evalcond[4]=(((x1784*x1786))+(((-1.0)*r02*x1793))+(((-1.0)*cj0))+(((-1.0)*x1791*x1792)));
evalcond[5]=((((-1.0)*x1787*x1792))+(((-1.0)*x1785))+(((-1.0)*r12*x1793))+((x1784*x1788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1794=((1.0)*cj5);
CheckValue<IkReal> x1795 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1794))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1795.valid){
continue;
}
CheckValue<IkReal> x1796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1794))+(((-1.0)*r00*sj5)))),-1);
if(!x1796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1795.value)+(((1.5707963267949)*(x1796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1797=IKsin(j4);
IkReal x1798=IKcos(j4);
IkReal x1799=((1.0)*sj0);
IkReal x1800=(cj5*r00);
IkReal x1801=(r11*sj5);
IkReal x1802=(cj5*r10);
IkReal x1803=(r21*sj5);
IkReal x1804=(cj5*r20);
IkReal x1805=(r01*sj5);
IkReal x1806=((1.0)*x1798);
IkReal x1807=((1.0)*x1797);
evalcond[0]=((((-1.0)*x1804*x1807))+((x1797*x1803))+(((-1.0)*r22*x1806)));
evalcond[1]=(((x1798*x1804))+(((-1.0)*r22*x1807))+(((-1.0)*x1803*x1806)));
evalcond[2]=(cj0+(((-1.0)*x1802*x1807))+((x1797*x1801))+(((-1.0)*r12*x1806)));
evalcond[3]=((((-1.0)*x1799))+((x1797*x1805))+(((-1.0)*x1800*x1807))+(((-1.0)*r02*x1806)));
evalcond[4]=(((x1798*x1800))+(((-1.0)*x1805*x1806))+(((-1.0)*r02*x1807))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1799))+((x1798*x1802))+(((-1.0)*x1801*x1806))+(((-1.0)*r12*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1808=(r00*sj5);
IkReal x1809=((306.5)*cj1);
IkReal x1810=(cj1*cj2);
IkReal x1811=(cj5*r01);
IkReal x1812=((500.0)*px);
IkReal x1813=(sj1*sj2);
IkReal x1814=((225.5)*x1813);
CheckValue<IkReal> x1815=IKPowWithIntegerCheck(((((87.0)*x1813))+(((-87.0)*x1810))),-1);
if(!x1815.valid){
continue;
}
CheckValue<IkReal> x1816=IKPowWithIntegerCheck((x1813+(((-1.0)*x1810))),-1);
if(!x1816.valid){
continue;
}
if( IKabs(((x1815.value)*(((((-225.5)*x1810*x1811))+(((-1.0)*x1812*x1813))+(((-1.0)*x1809*x1811))+(((-1.0)*x1808*x1809))+((x1808*x1814))+(((-225.5)*x1808*x1810))+((x1811*x1814))+((x1810*x1812)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1816.value)*(((((-1.0)*x1811))+(((-1.0)*x1808)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1815.value)*(((((-225.5)*x1810*x1811))+(((-1.0)*x1812*x1813))+(((-1.0)*x1809*x1811))+(((-1.0)*x1808*x1809))+((x1808*x1814))+(((-225.5)*x1808*x1810))+((x1811*x1814))+((x1810*x1812))))))+IKsqr(((x1816.value)*(((((-1.0)*x1811))+(((-1.0)*x1808))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1815.value)*(((((-225.5)*x1810*x1811))+(((-1.0)*x1812*x1813))+(((-1.0)*x1809*x1811))+(((-1.0)*x1808*x1809))+((x1808*x1814))+(((-225.5)*x1808*x1810))+((x1811*x1814))+((x1810*x1812))))), ((x1816.value)*(((((-1.0)*x1811))+(((-1.0)*x1808))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1817=IKcos(j0);
IkReal x1818=IKsin(j0);
IkReal x1819=(cj5*r01);
IkReal x1820=(sj1*sj2);
IkReal x1821=(cj5*r11);
IkReal x1822=(r00*sj5);
IkReal x1823=(r10*sj5);
IkReal x1824=((0.571)*x1820);
IkReal x1825=(cj1*x1818);
IkReal x1826=(cj1*cj2*x1817);
evalcond[0]=((((-1.0)*x1826))+x1822+x1819+((x1817*x1820)));
evalcond[1]=((((-1.0)*cj2*x1825))+((x1818*x1820))+x1821+x1823);
evalcond[2]=((((0.613)*cj1*x1817))+(((-1.0)*x1817*x1824))+(((-0.174)*x1818))+(((0.571)*x1826))+(((-1.0)*px))+(((-0.12)*x1819))+(((-0.12)*x1822)));
evalcond[3]=((((-1.0)*x1818*x1824))+(((-1.0)*py))+(((0.613)*x1825))+(((0.571)*cj2*x1825))+(((0.174)*x1817))+(((-0.12)*x1821))+(((-0.12)*x1823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1827=((1.0)*cj5);
IkReal x1828=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1827)));
j4eval[0]=x1828;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1827))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1829=((1.0)*cj5);
IkReal x1830=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1829)));
j4eval[0]=x1830;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1829))))));
j4eval[2]=IKsign(x1830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1831=((1.0)*sj0);
IkReal x1832=((1.0)*cj0);
IkReal x1833=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1833;
j4eval[1]=((IKabs(((((-1.0)*r02*x1832))+(((-1.0)*r12*x1831)))))+(IKabs(((((-1.0)*r11*sj5*x1831))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1832))))));
j4eval[2]=IKsign(x1833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1834=((-1.0)*r20);
IkReal x1836 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1836)==0){
continue;
}
IkReal x1835=pow(x1836,-0.5);
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1834),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1837.value));
IkReal gconst79=(r21*x1835);
IkReal gconst80=(x1834*x1835);
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1838.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1839=((-1.0)*r20);
IkReal x1840=x1835;
CheckValue<IkReal> x1842 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1839),IKFAST_ATAN2_MAGTHRESH);
if(!x1842.valid){
continue;
}
IkReal x1841=((-1.0)*(x1842.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1841;
IkReal gconst78=x1841;
IkReal gconst79=(r21*x1840);
IkReal gconst80=(x1839*x1840);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1843=((-1.0)*r20);
IkReal x1844=x1835;
CheckValue<IkReal> x1846 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1843),IKFAST_ATAN2_MAGTHRESH);
if(!x1846.valid){
continue;
}
IkReal x1845=((-1.0)*(x1846.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1845;
IkReal gconst78=x1845;
IkReal gconst79=(r21*x1844);
IkReal gconst80=(x1843*x1844);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1847=((-1.0)*r20);
IkReal x1848=x1835;
CheckValue<IkReal> x1850 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1847),IKFAST_ATAN2_MAGTHRESH);
if(!x1850.valid){
continue;
}
IkReal x1849=((-1.0)*(x1850.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1849;
IkReal gconst78=x1849;
IkReal gconst79=(r21*x1848);
IkReal gconst80=(x1847*x1848);
IkReal x1851=r22*r22;
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1851))),-1);
if(!x1854.valid){
continue;
}
IkReal x1852=x1854.value;
IkReal x1853=(((x1852*(r21*r21*r21*r21)))+((x1852*(r20*r20*r20*r20)))+x1851+(((2.0)*x1852*(r20*r20)*(r21*r21))));
j4eval[0]=x1853;
j4eval[1]=IKsign(x1853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1855=(sj1*sj2);
IkReal x1856=(gconst80*r20);
IkReal x1857=(gconst79*r21);
IkReal x1858=(cj1*cj2);
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1856*x1857))+(r22*r22)+(x1857*x1857)+(x1856*x1856))),-1);
if(!x1859.valid){
continue;
}
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal((((r22*x1855))+(((-1.0)*r22*x1858)))),IkReal(((((-1.0)*x1855*x1856))+(((-1.0)*x1857*x1858))+((x1856*x1858))+((x1855*x1857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1859.value)))+(x1860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1861=IKsin(j4);
IkReal x1862=IKcos(j4);
IkReal x1863=(gconst79*r01);
IkReal x1864=(gconst79*r21);
IkReal x1865=((1.0)*cj2);
IkReal x1866=(gconst79*r11);
IkReal x1867=((1.0)*sj0);
IkReal x1868=(cj1*sj2);
IkReal x1869=((1.0)*x1862);
IkReal x1870=(gconst80*x1862);
IkReal x1871=((1.0)*x1861);
IkReal x1872=(gconst80*x1871);
evalcond[0]=((((-1.0)*r20*x1872))+(((-1.0)*r22*x1869))+((x1861*x1864)));
evalcond[1]=(cj0+(((-1.0)*r10*x1872))+(((-1.0)*r12*x1869))+((x1861*x1866)));
evalcond[2]=((((-1.0)*r02*x1869))+(((-1.0)*r00*x1872))+(((-1.0)*x1867))+((x1861*x1863)));
evalcond[3]=((((-1.0)*x1864*x1869))+(((-1.0)*r22*x1871))+((sj1*sj2))+((r20*x1870))+(((-1.0)*cj1*x1865)));
evalcond[4]=((((-1.0)*r02*x1871))+(((-1.0)*x1863*x1869))+(((-1.0)*cj0*x1868))+(((-1.0)*cj0*sj1*x1865))+((r00*x1870)));
evalcond[5]=((((-1.0)*x1866*x1869))+(((-1.0)*x1867*x1868))+(((-1.0)*r12*x1871))+((r10*x1870))+(((-1.0)*sj0*sj1*x1865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1873=((1.0)*gconst80);
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1873))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1873)))),-1);
if(!x1875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1874.value)+(((1.5707963267949)*(x1875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1876=IKsin(j4);
IkReal x1877=IKcos(j4);
IkReal x1878=(gconst79*r01);
IkReal x1879=(gconst79*r21);
IkReal x1880=((1.0)*cj2);
IkReal x1881=(gconst79*r11);
IkReal x1882=((1.0)*sj0);
IkReal x1883=(cj1*sj2);
IkReal x1884=((1.0)*x1877);
IkReal x1885=(gconst80*x1877);
IkReal x1886=((1.0)*x1876);
IkReal x1887=(gconst80*x1886);
evalcond[0]=(((x1876*x1879))+(((-1.0)*r22*x1884))+(((-1.0)*r20*x1887)));
evalcond[1]=(cj0+((x1876*x1881))+(((-1.0)*r12*x1884))+(((-1.0)*r10*x1887)));
evalcond[2]=(((x1876*x1878))+(((-1.0)*r02*x1884))+(((-1.0)*r00*x1887))+(((-1.0)*x1882)));
evalcond[3]=((((-1.0)*x1879*x1884))+((r20*x1885))+(((-1.0)*cj1*x1880))+(((-1.0)*r22*x1886))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x1880))+(((-1.0)*cj0*x1883))+(((-1.0)*r02*x1886))+(((-1.0)*x1878*x1884))+((r00*x1885)));
evalcond[5]=((((-1.0)*x1882*x1883))+(((-1.0)*sj0*sj1*x1880))+(((-1.0)*r12*x1886))+((r10*x1885))+(((-1.0)*x1881*x1884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1888=((1.0)*gconst80);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1888)))),-1);
if(!x1890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1889.value)+(((1.5707963267949)*(x1890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1891=IKsin(j4);
IkReal x1892=IKcos(j4);
IkReal x1893=(gconst79*r01);
IkReal x1894=(gconst79*r21);
IkReal x1895=((1.0)*cj2);
IkReal x1896=(gconst79*r11);
IkReal x1897=((1.0)*sj0);
IkReal x1898=(cj1*sj2);
IkReal x1899=((1.0)*x1892);
IkReal x1900=(gconst80*x1892);
IkReal x1901=((1.0)*x1891);
IkReal x1902=(gconst80*x1901);
evalcond[0]=((((-1.0)*r22*x1899))+((x1891*x1894))+(((-1.0)*r20*x1902)));
evalcond[1]=(cj0+(((-1.0)*r10*x1902))+(((-1.0)*r12*x1899))+((x1891*x1896)));
evalcond[2]=((((-1.0)*r02*x1899))+((x1891*x1893))+(((-1.0)*x1897))+(((-1.0)*r00*x1902)));
evalcond[3]=((((-1.0)*cj1*x1895))+(((-1.0)*r22*x1901))+((sj1*sj2))+(((-1.0)*x1894*x1899))+((r20*x1900)));
evalcond[4]=((((-1.0)*x1893*x1899))+((r00*x1900))+(((-1.0)*cj0*sj1*x1895))+(((-1.0)*cj0*x1898))+(((-1.0)*r02*x1901)));
evalcond[5]=((((-1.0)*x1897*x1898))+(((-1.0)*sj0*sj1*x1895))+(((-1.0)*r12*x1901))+(((-1.0)*x1896*x1899))+((r10*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1903=((-1.0)*r21);
IkReal x1905 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1905)==0){
continue;
}
IkReal x1904=pow(x1905,-0.5);
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal(x1903),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1906.value))));
IkReal gconst82=(x1903*x1904);
IkReal gconst83=((1.0)*r20*x1904);
CheckValue<IkReal> x1907 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1907.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1907.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1908=((-1.0)*r21);
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal(x1908),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
IkReal x1909=((1.0)*(x1911.value));
IkReal x1910=x1904;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1909)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1909)));
IkReal gconst82=(x1908*x1910);
IkReal gconst83=((1.0)*r20*x1910);
IkReal x1912=r22*r22;
IkReal x1913=((1.0)*x1912);
CheckValue<IkReal> x1917=IKPowWithIntegerCheck(((-1.0)+x1912),-1);
if(!x1917.valid){
continue;
}
IkReal x1914=x1917.value;
if((((1.0)+(((-1.0)*x1913)))) < -0.00001)
continue;
IkReal x1915=IKsqrt(((1.0)+(((-1.0)*x1913))));
IkReal x1916=(cj0*x1914*x1915);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x1916+(((-1.0)*x1913*x1916))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1918=((-1.0)*r21);
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal(x1918),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
IkReal x1919=((1.0)*(x1921.value));
IkReal x1920=x1904;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1919)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1919)));
IkReal gconst82=(x1918*x1920);
IkReal gconst83=((1.0)*r20*x1920);
IkReal x1922=r22*r22;
IkReal x1923=((1.0)*x1922);
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(((-1.0)+x1922),-1);
if(!x1927.valid){
continue;
}
IkReal x1924=x1927.value;
if((((1.0)+(((-1.0)*x1923)))) < -0.00001)
continue;
IkReal x1925=IKsqrt(((1.0)+(((-1.0)*x1923))));
IkReal x1926=(sj0*x1924*x1925);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1926+(((-1.0)*x1923*x1926))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1928=((-1.0)*r21);
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(x1928),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
IkReal x1929=((1.0)*(x1931.value));
IkReal x1930=x1904;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1929)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1929)));
IkReal gconst82=(x1928*x1930);
IkReal gconst83=((1.0)*r20*x1930);
IkReal x1932=r22*r22;
IkReal x1933=(r12*sj0);
IkReal x1934=(cj0*r02);
CheckValue<IkReal> x1938=IKPowWithIntegerCheck(((-1.0)+x1932),-1);
if(!x1938.valid){
continue;
}
IkReal x1935=x1938.value;
if((((1.0)+(((-1.0)*x1932)))) < -0.00001)
continue;
IkReal x1936=IKsqrt(((1.0)+(((-1.0)*x1932))));
IkReal x1937=(r22*x1935*x1936);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1933))+(((-1.0)*x1934)))))+(IKabs((((x1934*x1937))+((x1933*x1937))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1939=((1.0)*sj0);
IkReal x1940=((1.0)*cj0);
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1941.valid){
continue;
}
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1940))+(((-1.0)*r12*x1939)))),IkReal(((((-1.0)*gconst82*r11*x1939))+(((-1.0)*gconst82*r01*x1940))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1941.value)))+(x1942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1943=IKsin(j4);
IkReal x1944=IKcos(j4);
IkReal x1945=(gconst82*r11);
IkReal x1946=((1.0)*cj2);
IkReal x1947=((1.0)*sj0);
IkReal x1948=(cj1*sj2);
IkReal x1949=((1.0)*x1944);
IkReal x1950=(gconst83*x1944);
IkReal x1951=(gconst82*x1943);
IkReal x1952=((1.0)*x1943);
evalcond[0]=((((-1.0)*r22*x1949))+((r21*x1951))+(((-1.0)*gconst83*r20*x1952)));
evalcond[1]=(((x1943*x1945))+cj0+(((-1.0)*gconst83*r10*x1952))+(((-1.0)*r12*x1949)));
evalcond[2]=((((-1.0)*x1947))+(((-1.0)*r02*x1949))+((r01*x1951))+(((-1.0)*gconst83*r00*x1952)));
evalcond[3]=((((-1.0)*r22*x1952))+((r20*x1950))+(((-1.0)*gconst82*r21*x1949))+((sj1*sj2))+(((-1.0)*cj1*x1946)));
evalcond[4]=((((-1.0)*cj0*x1948))+(((-1.0)*r02*x1952))+(((-1.0)*gconst82*r01*x1949))+((r00*x1950))+(((-1.0)*cj0*sj1*x1946)));
evalcond[5]=((((-1.0)*sj0*sj1*x1946))+(((-1.0)*x1945*x1949))+(((-1.0)*x1947*x1948))+((r10*x1950))+(((-1.0)*r12*x1952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1953=((1.0)*gconst83);
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1953)))),-1);
if(!x1955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1954.value)+(((1.5707963267949)*(x1955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1956=IKsin(j4);
IkReal x1957=IKcos(j4);
IkReal x1958=(gconst82*r11);
IkReal x1959=((1.0)*cj2);
IkReal x1960=((1.0)*sj0);
IkReal x1961=(cj1*sj2);
IkReal x1962=((1.0)*x1957);
IkReal x1963=(gconst83*x1957);
IkReal x1964=(gconst82*x1956);
IkReal x1965=((1.0)*x1956);
evalcond[0]=((((-1.0)*r22*x1962))+((r21*x1964))+(((-1.0)*gconst83*r20*x1965)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1965))+(((-1.0)*r12*x1962))+((x1956*x1958)));
evalcond[2]=((((-1.0)*r02*x1962))+(((-1.0)*x1960))+((r01*x1964))+(((-1.0)*gconst83*r00*x1965)));
evalcond[3]=(((r20*x1963))+(((-1.0)*r22*x1965))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1962))+(((-1.0)*cj1*x1959)));
evalcond[4]=((((-1.0)*cj0*x1961))+(((-1.0)*cj0*sj1*x1959))+(((-1.0)*r02*x1965))+((r00*x1963))+(((-1.0)*gconst82*r01*x1962)));
evalcond[5]=((((-1.0)*x1958*x1962))+((r10*x1963))+(((-1.0)*x1960*x1961))+(((-1.0)*r12*x1965))+(((-1.0)*sj0*sj1*x1959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1966=((1.0)*gconst83);
CheckValue<IkReal> x1967 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1966))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1967.valid){
continue;
}
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1966))+(((-1.0)*gconst82*r00)))),-1);
if(!x1968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1967.value)+(((1.5707963267949)*(x1968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1969=IKsin(j4);
IkReal x1970=IKcos(j4);
IkReal x1971=(gconst82*r11);
IkReal x1972=((1.0)*cj2);
IkReal x1973=((1.0)*sj0);
IkReal x1974=(cj1*sj2);
IkReal x1975=((1.0)*x1970);
IkReal x1976=(gconst83*x1970);
IkReal x1977=(gconst82*x1969);
IkReal x1978=((1.0)*x1969);
evalcond[0]=((((-1.0)*r22*x1975))+((r21*x1977))+(((-1.0)*gconst83*r20*x1978)));
evalcond[1]=(((x1969*x1971))+cj0+(((-1.0)*gconst83*r10*x1978))+(((-1.0)*r12*x1975)));
evalcond[2]=((((-1.0)*r02*x1975))+(((-1.0)*x1973))+((r01*x1977))+(((-1.0)*gconst83*r00*x1978)));
evalcond[3]=(((r20*x1976))+(((-1.0)*r22*x1978))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1975))+(((-1.0)*cj1*x1972)));
evalcond[4]=((((-1.0)*cj0*x1974))+(((-1.0)*cj0*sj1*x1972))+(((-1.0)*r02*x1978))+((r00*x1976))+(((-1.0)*gconst82*r01*x1975)));
evalcond[5]=((((-1.0)*sj0*sj1*x1972))+((r10*x1976))+(((-1.0)*x1973*x1974))+(((-1.0)*x1971*x1975))+(((-1.0)*r12*x1978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1979=((-1.0)*r10);
IkReal x1981 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1981)==0){
continue;
}
IkReal x1980=pow(x1981,-0.5);
CheckValue<IkReal> x1982 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1979),IKFAST_ATAN2_MAGTHRESH);
if(!x1982.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1982.value));
IkReal gconst85=(r11*x1980);
IkReal gconst86=(x1979*x1980);
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1983.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1984=((-1.0)*r10);
IkReal x1985=x1980;
CheckValue<IkReal> x1987 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1984),IKFAST_ATAN2_MAGTHRESH);
if(!x1987.valid){
continue;
}
IkReal x1986=((-1.0)*(x1987.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1986;
IkReal gconst84=x1986;
IkReal gconst85=(r11*x1985);
IkReal gconst86=(x1984*x1985);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1988=((1.0)*sj0);
IkReal x1989=((1.0)*gconst85);
CheckValue<IkReal> x1990 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1988)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x1988))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1989)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1990.valid){
continue;
}
CheckValue<IkReal> x1991=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1989)))),-1);
if(!x1991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1990.value)+(((1.5707963267949)*(x1991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1992=IKsin(j4);
IkReal x1993=IKcos(j4);
IkReal x1994=(gconst85*r21);
IkReal x1995=(gconst86*r00);
IkReal x1996=(gconst86*r10);
IkReal x1997=((1.0)*cj2);
IkReal x1998=(gconst85*r11);
IkReal x1999=(gconst85*r01);
IkReal x2000=((1.0)*sj0);
IkReal x2001=(gconst86*r20);
IkReal x2002=(cj1*sj2);
IkReal x2003=((1.0)*x1993);
IkReal x2004=((1.0)*x1992);
evalcond[0]=((((-1.0)*r22*x2003))+(((-1.0)*x2001*x2004))+((x1992*x1994)));
evalcond[1]=(cj0+(((-1.0)*r12*x2003))+(((-1.0)*x1996*x2004))+((x1992*x1998)));
evalcond[2]=((((-1.0)*x1995*x2004))+(((-1.0)*r02*x2003))+(((-1.0)*x2000))+((x1992*x1999)));
evalcond[3]=((((-1.0)*r22*x2004))+((x1993*x2001))+(((-1.0)*x1994*x2003))+((sj1*sj2))+(((-1.0)*cj1*x1997)));
evalcond[4]=((((-1.0)*cj0*sj1*x1997))+(((-1.0)*r02*x2004))+(((-1.0)*cj0*x2002))+((x1993*x1995))+(((-1.0)*x1999*x2003)));
evalcond[5]=((((-1.0)*x1998*x2003))+(((-1.0)*sj0*sj1*x1997))+(((-1.0)*r12*x2004))+(((-1.0)*x2000*x2002))+((x1993*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2005=((1.0)*gconst86);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
CheckValue<IkReal> x2007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2005))+(((-1.0)*gconst85*r00)))),-1);
if(!x2007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2006.value)+(((1.5707963267949)*(x2007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2008=IKsin(j4);
IkReal x2009=IKcos(j4);
IkReal x2010=(gconst85*r21);
IkReal x2011=(gconst86*r00);
IkReal x2012=(gconst86*r10);
IkReal x2013=((1.0)*cj2);
IkReal x2014=(gconst85*r11);
IkReal x2015=(gconst85*r01);
IkReal x2016=((1.0)*sj0);
IkReal x2017=(gconst86*r20);
IkReal x2018=(cj1*sj2);
IkReal x2019=((1.0)*x2009);
IkReal x2020=((1.0)*x2008);
evalcond[0]=((((-1.0)*x2017*x2020))+((x2008*x2010))+(((-1.0)*r22*x2019)));
evalcond[1]=(cj0+((x2008*x2014))+(((-1.0)*r12*x2019))+(((-1.0)*x2012*x2020)));
evalcond[2]=((((-1.0)*x2016))+(((-1.0)*x2011*x2020))+((x2008*x2015))+(((-1.0)*r02*x2019)));
evalcond[3]=((((-1.0)*x2010*x2019))+(((-1.0)*r22*x2020))+((sj1*sj2))+(((-1.0)*cj1*x2013))+((x2009*x2017)));
evalcond[4]=((((-1.0)*cj0*sj1*x2013))+(((-1.0)*r02*x2020))+(((-1.0)*x2015*x2019))+((x2009*x2011))+(((-1.0)*cj0*x2018)));
evalcond[5]=((((-1.0)*r12*x2020))+(((-1.0)*x2014*x2019))+(((-1.0)*x2016*x2018))+((x2009*x2012))+(((-1.0)*sj0*sj1*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2021=((-1.0)*r11);
IkReal x2023 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2023)==0){
continue;
}
IkReal x2022=pow(x2023,-0.5);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal(x2021),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2024.value))));
IkReal gconst88=(x2021*x2022);
IkReal gconst89=((1.0)*r10*x2022);
CheckValue<IkReal> x2025 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2025.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2025.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2026=((-1.0)*r11);
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal(x2026),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
IkReal x2027=((1.0)*(x2029.value));
IkReal x2028=x2022;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2027)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2027)));
IkReal gconst88=(x2026*x2028);
IkReal gconst89=((1.0)*r10*x2028);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2030=((-1.0)*r11);
CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal(x2030),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2033.valid){
continue;
}
IkReal x2031=((1.0)*(x2033.value));
IkReal x2032=x2022;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2031)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2031)));
IkReal gconst88=(x2030*x2032);
IkReal gconst89=((1.0)*r10*x2032);
IkReal x2034=r12*r12;
IkReal x2035=((1.0)*sj0);
IkReal x2036=(cj0*r02);
IkReal x2037=x2022;
j4eval[0]=((IKabs(((((-1.0)*r12*x2035))+(((-1.0)*x2036)))))+(IKabs(((((-1.0)*x2035*x2037))+((sj0*x2034*x2037))+((r12*x2036*x2037))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2038=((-1.0)*r11);
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(x2038),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
IkReal x2039=((1.0)*(x2041.value));
IkReal x2040=x2022;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2039)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2039)));
IkReal gconst88=(x2038*x2040);
IkReal gconst89=((1.0)*r10*x2040);
IkReal x2042=r12*r12;
IkReal x2043=(cj1*cj2*r22);
IkReal x2044=(r22*sj1*sj2);
CheckValue<IkReal> x2048=IKPowWithIntegerCheck(((-1.0)+x2042),-1);
if(!x2048.valid){
continue;
}
IkReal x2045=x2048.value;
if((((1.0)+(((-1.0)*x2042)))) < -0.00001)
continue;
IkReal x2046=IKsqrt(((1.0)+(((-1.0)*x2042))));
IkReal x2047=(r12*x2045*x2046);
j4eval[0]=((IKabs((((x2043*x2047))+(((-1.0)*x2044*x2047)))))+(IKabs((x2044+(((-1.0)*x2043))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2049=(cj1*cj2);
IkReal x2050=(gconst89*r20);
IkReal x2051=(gconst88*r21);
IkReal x2052=(sj1*sj2);
CheckValue<IkReal> x2053 = IKatan2WithCheck(IkReal((((r22*x2052))+(((-1.0)*r22*x2049)))),IkReal((((x2049*x2050))+(((-1.0)*x2050*x2052))+(((-1.0)*x2049*x2051))+((x2051*x2052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2053.valid){
continue;
}
CheckValue<IkReal> x2054=IKPowWithIntegerCheck(IKsign(((x2051*x2051)+(r22*r22)+(x2050*x2050)+(((-2.0)*x2050*x2051)))),-1);
if(!x2054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2053.value)+(((1.5707963267949)*(x2054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2055=IKsin(j4);
IkReal x2056=IKcos(j4);
IkReal x2057=((1.0)*sj0);
IkReal x2058=((1.0)*cj2);
IkReal x2059=(gconst89*r20);
IkReal x2060=(gconst89*r10);
IkReal x2061=(gconst89*r00);
IkReal x2062=(cj1*sj2);
IkReal x2063=((1.0)*x2056);
IkReal x2064=((1.0)*x2055);
IkReal x2065=(gconst88*x2055);
evalcond[0]=(((r21*x2065))+(((-1.0)*r22*x2063))+(((-1.0)*x2059*x2064)));
evalcond[1]=((((-1.0)*r12*x2063))+cj0+((r11*x2065))+(((-1.0)*x2060*x2064)));
evalcond[2]=((((-1.0)*r02*x2063))+(((-1.0)*x2061*x2064))+((r01*x2065))+(((-1.0)*x2057)));
evalcond[3]=((((-1.0)*gconst88*r21*x2063))+(((-1.0)*cj1*x2058))+(((-1.0)*r22*x2064))+((sj1*sj2))+((x2056*x2059)));
evalcond[4]=((((-1.0)*cj0*x2062))+(((-1.0)*r02*x2064))+((x2056*x2061))+(((-1.0)*gconst88*r01*x2063))+(((-1.0)*cj0*sj1*x2058)));
evalcond[5]=((((-1.0)*r12*x2064))+(((-1.0)*x2057*x2062))+((x2056*x2060))+(((-1.0)*cj2*sj1*x2057))+(((-1.0)*gconst88*r11*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2066=((1.0)*sj0);
IkReal x2067=((1.0)*cj0);
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2066))+(((-1.0)*r02*x2067)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2066))+(((-1.0)*gconst88*r01*x2067))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2068.value)+(((1.5707963267949)*(x2069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2070=IKsin(j4);
IkReal x2071=IKcos(j4);
IkReal x2072=((1.0)*sj0);
IkReal x2073=((1.0)*cj2);
IkReal x2074=(gconst89*r20);
IkReal x2075=(gconst89*r10);
IkReal x2076=(gconst89*r00);
IkReal x2077=(cj1*sj2);
IkReal x2078=((1.0)*x2071);
IkReal x2079=((1.0)*x2070);
IkReal x2080=(gconst88*x2070);
evalcond[0]=((((-1.0)*r22*x2078))+(((-1.0)*x2074*x2079))+((r21*x2080)));
evalcond[1]=(cj0+(((-1.0)*r12*x2078))+((r11*x2080))+(((-1.0)*x2075*x2079)));
evalcond[2]=((((-1.0)*r02*x2078))+(((-1.0)*x2076*x2079))+(((-1.0)*x2072))+((r01*x2080)));
evalcond[3]=((((-1.0)*gconst88*r21*x2078))+(((-1.0)*r22*x2079))+((sj1*sj2))+((x2071*x2074))+(((-1.0)*cj1*x2073)));
evalcond[4]=((((-1.0)*r02*x2079))+((x2071*x2076))+(((-1.0)*cj0*sj1*x2073))+(((-1.0)*gconst88*r01*x2078))+(((-1.0)*cj0*x2077)));
evalcond[5]=((((-1.0)*r12*x2079))+((x2071*x2075))+(((-1.0)*gconst88*r11*x2078))+(((-1.0)*x2072*x2077))+(((-1.0)*cj2*sj1*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2081=((1.0)*gconst89);
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2081))+(((-1.0)*gconst88*r00)))),-1);
if(!x2082.valid){
continue;
}
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2081))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2082.value)))+(x2083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2084=IKsin(j4);
IkReal x2085=IKcos(j4);
IkReal x2086=((1.0)*sj0);
IkReal x2087=((1.0)*cj2);
IkReal x2088=(gconst89*r20);
IkReal x2089=(gconst89*r10);
IkReal x2090=(gconst89*r00);
IkReal x2091=(cj1*sj2);
IkReal x2092=((1.0)*x2085);
IkReal x2093=((1.0)*x2084);
IkReal x2094=(gconst88*x2084);
evalcond[0]=((((-1.0)*x2088*x2093))+((r21*x2094))+(((-1.0)*r22*x2092)));
evalcond[1]=(cj0+(((-1.0)*x2089*x2093))+(((-1.0)*r12*x2092))+((r11*x2094)));
evalcond[2]=((((-1.0)*x2090*x2093))+(((-1.0)*x2086))+((r01*x2094))+(((-1.0)*r02*x2092)));
evalcond[3]=((((-1.0)*cj1*x2087))+((x2085*x2088))+(((-1.0)*gconst88*r21*x2092))+((sj1*sj2))+(((-1.0)*r22*x2093)));
evalcond[4]=((((-1.0)*cj0*sj1*x2087))+(((-1.0)*gconst88*r01*x2092))+(((-1.0)*r02*x2093))+(((-1.0)*cj0*x2091))+((x2085*x2090)));
evalcond[5]=((((-1.0)*gconst88*r11*x2092))+((x2085*x2089))+(((-1.0)*x2086*x2091))+(((-1.0)*cj2*sj1*x2086))+(((-1.0)*r12*x2093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2095=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2095;
j4eval[1]=IKsign(x2095);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2096=((1.0)*cj5);
IkReal x2097=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2096)));
j4eval[0]=x2097;
j4eval[1]=((IKabs(((((-1.0)*r20*x2096))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2098=cj5*cj5;
IkReal x2099=r11*r11;
IkReal x2100=(r11*sj5);
IkReal x2101=(cj5*r10);
IkReal x2102=((r12*r12)+((x2098*(r10*r10)))+x2099+(((-2.0)*x2100*x2101))+(((-1.0)*x2098*x2099)));
j4eval[0]=x2102;
j4eval[1]=IKsign(x2102);
j4eval[2]=((IKabs((x2101+(((-1.0)*x2100)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2103=cj5*cj5;
IkReal x2104=r11*r11;
IkReal x2105=(cj5*r10);
IkReal x2106=(r11*sj5);
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal((x2105+(((-1.0)*x2106)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
CheckValue<IkReal> x2108=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2103*x2104))+x2104+((x2103*(r10*r10)))+(((-2.0)*x2105*x2106)))),-1);
if(!x2108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2107.value)+(((1.5707963267949)*(x2108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2109=IKsin(j4);
IkReal x2110=IKcos(j4);
IkReal x2111=(cj5*r10);
IkReal x2112=(r01*sj5);
IkReal x2113=((1.0)*cj2);
IkReal x2114=(cj5*r00);
IkReal x2115=(cj5*r20);
IkReal x2116=((1.0)*x2110);
IkReal x2117=((1.0)*x2109);
IkReal x2118=(sj5*x2109);
evalcond[0]=(((r21*x2118))+(((-1.0)*r22*x2116))+(((-1.0)*x2115*x2117)));
evalcond[1]=((((-1.0)*x2114*x2117))+((x2109*x2112))+(((-1.0)*r02*x2116)));
evalcond[2]=((((-1.0)*r11*sj5*x2116))+((x2110*x2111))+(((-1.0)*r12*x2117)));
evalcond[3]=((1.0)+(((-1.0)*x2111*x2117))+(((-1.0)*r12*x2116))+((r11*x2118)));
evalcond[4]=((((-1.0)*r21*sj5*x2116))+((sj1*sj2))+((x2110*x2115))+(((-1.0)*r22*x2117))+(((-1.0)*cj1*x2113)));
evalcond[5]=((((-1.0)*sj1*x2113))+(((-1.0)*x2112*x2116))+(((-1.0)*cj1*sj2))+((x2110*x2114))+(((-1.0)*r02*x2117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2119=((1.0)*cj5);
CheckValue<IkReal> x2120=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2119))+(((-1.0)*r00*sj5)))),-1);
if(!x2120.valid){
continue;
}
CheckValue<IkReal> x2121 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2119))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2120.value)))+(x2121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2122=IKsin(j4);
IkReal x2123=IKcos(j4);
IkReal x2124=(cj5*r10);
IkReal x2125=(r01*sj5);
IkReal x2126=((1.0)*cj2);
IkReal x2127=(cj5*r00);
IkReal x2128=(cj5*r20);
IkReal x2129=((1.0)*x2123);
IkReal x2130=((1.0)*x2122);
IkReal x2131=(sj5*x2122);
evalcond[0]=(((r21*x2131))+(((-1.0)*r22*x2129))+(((-1.0)*x2128*x2130)));
evalcond[1]=(((x2122*x2125))+(((-1.0)*r02*x2129))+(((-1.0)*x2127*x2130)));
evalcond[2]=(((x2123*x2124))+(((-1.0)*r12*x2130))+(((-1.0)*r11*sj5*x2129)));
evalcond[3]=((1.0)+((r11*x2131))+(((-1.0)*x2124*x2130))+(((-1.0)*r12*x2129)));
evalcond[4]=((((-1.0)*r22*x2130))+((x2123*x2128))+((sj1*sj2))+(((-1.0)*cj1*x2126))+(((-1.0)*r21*sj5*x2129)));
evalcond[5]=(((x2123*x2127))+(((-1.0)*x2125*x2129))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2126))+(((-1.0)*r02*x2130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2132=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2132.valid){
continue;
}
CheckValue<IkReal> x2133 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2132.value)))+(x2133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2134=IKsin(j4);
IkReal x2135=IKcos(j4);
IkReal x2136=(cj5*r10);
IkReal x2137=(r01*sj5);
IkReal x2138=((1.0)*cj2);
IkReal x2139=(cj5*r00);
IkReal x2140=(cj5*r20);
IkReal x2141=((1.0)*x2135);
IkReal x2142=((1.0)*x2134);
IkReal x2143=(sj5*x2134);
evalcond[0]=((((-1.0)*x2140*x2142))+(((-1.0)*r22*x2141))+((r21*x2143)));
evalcond[1]=((((-1.0)*r02*x2141))+((x2134*x2137))+(((-1.0)*x2139*x2142)));
evalcond[2]=((((-1.0)*r11*sj5*x2141))+((x2135*x2136))+(((-1.0)*r12*x2142)));
evalcond[3]=((1.0)+((r11*x2143))+(((-1.0)*x2136*x2142))+(((-1.0)*r12*x2141)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2138))+(((-1.0)*r22*x2142))+((x2135*x2140))+(((-1.0)*r21*sj5*x2141)));
evalcond[5]=((((-1.0)*sj1*x2138))+(((-1.0)*r02*x2142))+(((-1.0)*cj1*sj2))+((x2135*x2139))+(((-1.0)*x2137*x2141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2144=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2144;
j4eval[1]=IKsign(x2144);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2145=((1.0)*cj5);
IkReal x2146=((((-1.0)*r21*x2145))+(((-1.0)*r20*sj5)));
j4eval[0]=x2146;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2145))))));
j4eval[2]=IKsign(x2146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2147=cj5*cj5;
IkReal x2148=r11*r11;
IkReal x2149=(cj5*r10);
IkReal x2150=(r11*sj5);
IkReal x2151=((((-1.0)*x2148))+(((-1.0)*x2147*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2149*x2150))+((x2147*x2148)));
j4eval[0]=x2151;
j4eval[1]=((IKabs(r12))+(IKabs((x2149+(((-1.0)*x2150))))));
j4eval[2]=IKsign(x2151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2152=cj5*cj5;
IkReal x2153=r11*r11;
IkReal x2154=(cj5*r10);
IkReal x2155=(r11*sj5);
CheckValue<IkReal> x2156=IKPowWithIntegerCheck(IKsign((((x2152*x2153))+(((-1.0)*(r12*r12)))+(((2.0)*x2154*x2155))+(((-1.0)*x2152*(r10*r10)))+(((-1.0)*x2153)))),-1);
if(!x2156.valid){
continue;
}
CheckValue<IkReal> x2157 = IKatan2WithCheck(IkReal((x2154+(((-1.0)*x2155)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2156.value)))+(x2157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2158=IKsin(j4);
IkReal x2159=IKcos(j4);
IkReal x2160=(cj5*r10);
IkReal x2161=(r01*sj5);
IkReal x2162=(cj5*r00);
IkReal x2163=(cj5*r20);
IkReal x2164=((1.0)*x2159);
IkReal x2165=((1.0)*x2158);
IkReal x2166=(sj5*x2158);
evalcond[0]=((((-1.0)*x2163*x2165))+((r21*x2166))+(((-1.0)*r22*x2164)));
evalcond[1]=(((x2158*x2161))+(((-1.0)*r02*x2164))+(((-1.0)*x2162*x2165)));
evalcond[2]=((((-1.0)*r11*sj5*x2164))+(((-1.0)*r12*x2165))+((x2159*x2160)));
evalcond[3]=((-1.0)+(((-1.0)*x2160*x2165))+(((-1.0)*r12*x2164))+((r11*x2166)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2161*x2164))+((x2159*x2162))+(((-1.0)*r02*x2165)));
evalcond[5]=((((-1.0)*r21*sj5*x2164))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2165))+((x2159*x2163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2167=((1.0)*cj5);
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2167))+(((-1.0)*r20*sj5)))),-1);
if(!x2169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2168.value)+(((1.5707963267949)*(x2169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2170=IKsin(j4);
IkReal x2171=IKcos(j4);
IkReal x2172=(cj5*r10);
IkReal x2173=(r01*sj5);
IkReal x2174=(cj5*r00);
IkReal x2175=(cj5*r20);
IkReal x2176=((1.0)*x2171);
IkReal x2177=((1.0)*x2170);
IkReal x2178=(sj5*x2170);
evalcond[0]=(((r21*x2178))+(((-1.0)*x2175*x2177))+(((-1.0)*r22*x2176)));
evalcond[1]=((((-1.0)*x2174*x2177))+((x2170*x2173))+(((-1.0)*r02*x2176)));
evalcond[2]=(((x2171*x2172))+(((-1.0)*r11*sj5*x2176))+(((-1.0)*r12*x2177)));
evalcond[3]=((-1.0)+((r11*x2178))+(((-1.0)*x2172*x2177))+(((-1.0)*r12*x2176)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2171*x2174))+(((-1.0)*r02*x2177))+(((-1.0)*x2173*x2176)));
evalcond[5]=((((-1.0)*r21*sj5*x2176))+((x2171*x2175))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
CheckValue<IkReal> x2180=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2179.value)+(((1.5707963267949)*(x2180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2181=IKsin(j4);
IkReal x2182=IKcos(j4);
IkReal x2183=(cj5*r10);
IkReal x2184=(r01*sj5);
IkReal x2185=(cj5*r00);
IkReal x2186=(cj5*r20);
IkReal x2187=((1.0)*x2182);
IkReal x2188=((1.0)*x2181);
IkReal x2189=(sj5*x2181);
evalcond[0]=((((-1.0)*x2186*x2188))+((r21*x2189))+(((-1.0)*r22*x2187)));
evalcond[1]=((((-1.0)*x2185*x2188))+(((-1.0)*r02*x2187))+((x2181*x2184)));
evalcond[2]=((((-1.0)*r11*sj5*x2187))+((x2182*x2183))+(((-1.0)*r12*x2188)));
evalcond[3]=((-1.0)+((r11*x2189))+(((-1.0)*x2183*x2188))+(((-1.0)*r12*x2187)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2182*x2185))+(((-1.0)*r02*x2188))+(((-1.0)*x2184*x2187)));
evalcond[5]=((((-1.0)*r21*sj5*x2187))+((x2182*x2186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2190=((-1.0)*r00);
IkReal x2192 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2192)==0){
continue;
}
IkReal x2191=pow(x2192,-0.5);
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2190),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2193.value));
IkReal gconst91=(r01*x2191);
IkReal gconst92=(x2190*x2191);
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2194.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2195=((-1.0)*r00);
IkReal x2196=x2191;
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2195),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
IkReal x2197=((-1.0)*(x2198.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2197;
IkReal gconst90=x2197;
IkReal gconst91=(r01*x2196);
IkReal gconst92=(x2195*x2196);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2199=((1.0)*sj0);
IkReal x2200=((1.0)*cj0);
CheckValue<IkReal> x2201=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2201.valid){
continue;
}
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2199))+(((-1.0)*r02*x2200)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2200))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2201.value)))+(x2202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2203=IKsin(j4);
IkReal x2204=IKcos(j4);
IkReal x2205=((1.0)*cj2);
IkReal x2206=(gconst92*r00);
IkReal x2207=(gconst92*r20);
IkReal x2208=((1.0)*sj0);
IkReal x2209=(gconst92*r10);
IkReal x2210=(cj1*sj2);
IkReal x2211=((1.0)*x2204);
IkReal x2212=(gconst91*x2203);
IkReal x2213=((1.0)*x2203);
evalcond[0]=((((-1.0)*x2207*x2213))+(((-1.0)*r22*x2211))+((r21*x2212)));
evalcond[1]=(cj0+(((-1.0)*r12*x2211))+((r11*x2212))+(((-1.0)*x2209*x2213)));
evalcond[2]=(((r01*x2212))+(((-1.0)*x2208))+(((-1.0)*x2206*x2213))+(((-1.0)*r02*x2211)));
evalcond[3]=((((-1.0)*cj1*x2205))+(((-1.0)*r22*x2213))+((sj1*sj2))+((x2204*x2207))+(((-1.0)*gconst91*r21*x2211)));
evalcond[4]=(((x2204*x2206))+(((-1.0)*gconst91*r01*x2211))+(((-1.0)*cj0*sj1*x2205))+(((-1.0)*r02*x2213))+(((-1.0)*cj0*x2210)));
evalcond[5]=((((-1.0)*x2208*x2210))+(((-1.0)*r12*x2213))+((x2204*x2209))+(((-1.0)*gconst91*r11*x2211))+(((-1.0)*sj0*sj1*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2214=((1.0)*gconst92);
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2214))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
CheckValue<IkReal> x2216=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2214)))),-1);
if(!x2216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2215.value)+(((1.5707963267949)*(x2216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2217=IKsin(j4);
IkReal x2218=IKcos(j4);
IkReal x2219=((1.0)*cj2);
IkReal x2220=(gconst92*r00);
IkReal x2221=(gconst92*r20);
IkReal x2222=((1.0)*sj0);
IkReal x2223=(gconst92*r10);
IkReal x2224=(cj1*sj2);
IkReal x2225=((1.0)*x2218);
IkReal x2226=(gconst91*x2217);
IkReal x2227=((1.0)*x2217);
evalcond[0]=((((-1.0)*x2221*x2227))+((r21*x2226))+(((-1.0)*r22*x2225)));
evalcond[1]=(cj0+(((-1.0)*x2223*x2227))+(((-1.0)*r12*x2225))+((r11*x2226)));
evalcond[2]=((((-1.0)*x2220*x2227))+(((-1.0)*r02*x2225))+(((-1.0)*x2222))+((r01*x2226)));
evalcond[3]=((((-1.0)*gconst91*r21*x2225))+(((-1.0)*cj1*x2219))+((sj1*sj2))+((x2218*x2221))+(((-1.0)*r22*x2227)));
evalcond[4]=((((-1.0)*r02*x2227))+((x2218*x2220))+(((-1.0)*gconst91*r01*x2225))+(((-1.0)*cj0*sj1*x2219))+(((-1.0)*cj0*x2224)));
evalcond[5]=((((-1.0)*x2222*x2224))+((x2218*x2223))+(((-1.0)*r12*x2227))+(((-1.0)*gconst91*r11*x2225))+(((-1.0)*sj0*sj1*x2219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2228=((-1.0)*r01);
IkReal x2230 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2230)==0){
continue;
}
IkReal x2229=pow(x2230,-0.5);
CheckValue<IkReal> x2231 = IKatan2WithCheck(IkReal(x2228),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2231.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2231.value))));
IkReal gconst94=(x2228*x2229);
IkReal gconst95=((1.0)*r00*x2229);
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2232.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2233=((-1.0)*r01);
CheckValue<IkReal> x2236 = IKatan2WithCheck(IkReal(x2233),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2236.valid){
continue;
}
IkReal x2234=((1.0)*(x2236.value));
IkReal x2235=x2229;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2234)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2234)));
IkReal gconst94=(x2233*x2235);
IkReal gconst95=((1.0)*r00*x2235);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2237=((-1.0)*r01);
CheckValue<IkReal> x2240 = IKatan2WithCheck(IkReal(x2237),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2240.valid){
continue;
}
IkReal x2238=((1.0)*(x2240.value));
IkReal x2239=x2229;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2238)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2238)));
IkReal gconst94=(x2237*x2239);
IkReal gconst95=((1.0)*r00*x2239);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2241=((-1.0)*r01);
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(x2241),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
IkReal x2242=((1.0)*(x2244.value));
IkReal x2243=x2229;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2242)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2242)));
IkReal gconst94=(x2241*x2243);
IkReal gconst95=((1.0)*r00*x2243);
IkReal x2245=r02*r02;
IkReal x2246=(r12*sj0);
IkReal x2247=((1.0)*cj0);
IkReal x2248=x2229;
j4eval[0]=((IKabs(((((-1.0)*x2247*x2248))+((cj0*x2245*x2248))+((r02*x2246*x2248)))))+(IKabs(((((-1.0)*x2246))+(((-1.0)*r02*x2247))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2249=((1.0)*sj0);
IkReal x2250=((1.0)*cj0);
CheckValue<IkReal> x2251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2251.valid){
continue;
}
CheckValue<IkReal> x2252 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2250))+(((-1.0)*r12*x2249)))),IkReal(((((-1.0)*gconst94*r11*x2249))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2250))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2251.value)))+(x2252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2253=IKsin(j4);
IkReal x2254=IKcos(j4);
IkReal x2255=(gconst94*r11);
IkReal x2256=((1.0)*cj2);
IkReal x2257=(gconst94*r21);
IkReal x2258=((1.0)*sj0);
IkReal x2259=(gconst94*r01);
IkReal x2260=(cj1*sj2);
IkReal x2261=((1.0)*x2254);
IkReal x2262=(gconst95*x2254);
IkReal x2263=((1.0)*x2253);
IkReal x2264=(gconst95*x2263);
evalcond[0]=(((x2253*x2257))+(((-1.0)*r20*x2264))+(((-1.0)*r22*x2261)));
evalcond[1]=(cj0+((x2253*x2255))+(((-1.0)*r10*x2264))+(((-1.0)*r12*x2261)));
evalcond[2]=(((x2253*x2259))+(((-1.0)*r00*x2264))+(((-1.0)*x2258))+(((-1.0)*r02*x2261)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2257*x2261))+(((-1.0)*r22*x2263))+((r20*x2262))+(((-1.0)*cj1*x2256)));
evalcond[4]=(((r00*x2262))+(((-1.0)*x2259*x2261))+(((-1.0)*cj0*sj1*x2256))+(((-1.0)*r02*x2263))+(((-1.0)*cj0*x2260)));
evalcond[5]=((((-1.0)*sj0*sj1*x2256))+(((-1.0)*x2255*x2261))+(((-1.0)*x2258*x2260))+((r10*x2262))+(((-1.0)*r12*x2263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2265=((1.0)*gconst95);
CheckValue<IkReal> x2266=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2265)))),-1);
if(!x2266.valid){
continue;
}
CheckValue<IkReal> x2267 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2266.value)))+(x2267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2268=IKsin(j4);
IkReal x2269=IKcos(j4);
IkReal x2270=(gconst94*r11);
IkReal x2271=((1.0)*cj2);
IkReal x2272=(gconst94*r21);
IkReal x2273=((1.0)*sj0);
IkReal x2274=(gconst94*r01);
IkReal x2275=(cj1*sj2);
IkReal x2276=((1.0)*x2269);
IkReal x2277=(gconst95*x2269);
IkReal x2278=((1.0)*x2268);
IkReal x2279=(gconst95*x2278);
evalcond[0]=((((-1.0)*r20*x2279))+((x2268*x2272))+(((-1.0)*r22*x2276)));
evalcond[1]=(cj0+((x2268*x2270))+(((-1.0)*r10*x2279))+(((-1.0)*r12*x2276)));
evalcond[2]=((((-1.0)*r00*x2279))+((x2268*x2274))+(((-1.0)*r02*x2276))+(((-1.0)*x2273)));
evalcond[3]=((((-1.0)*cj1*x2271))+((sj1*sj2))+(((-1.0)*r22*x2278))+((r20*x2277))+(((-1.0)*x2272*x2276)));
evalcond[4]=(((r00*x2277))+(((-1.0)*cj0*sj1*x2271))+(((-1.0)*x2274*x2276))+(((-1.0)*r02*x2278))+(((-1.0)*cj0*x2275)));
evalcond[5]=((((-1.0)*x2273*x2275))+(((-1.0)*x2270*x2276))+(((-1.0)*sj0*sj1*x2271))+((r10*x2277))+(((-1.0)*r12*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2280=((1.0)*gconst95);
CheckValue<IkReal> x2281 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2281.valid){
continue;
}
CheckValue<IkReal> x2282=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2280)))),-1);
if(!x2282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2281.value)+(((1.5707963267949)*(x2282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2283=IKsin(j4);
IkReal x2284=IKcos(j4);
IkReal x2285=(gconst94*r11);
IkReal x2286=((1.0)*cj2);
IkReal x2287=(gconst94*r21);
IkReal x2288=((1.0)*sj0);
IkReal x2289=(gconst94*r01);
IkReal x2290=(cj1*sj2);
IkReal x2291=((1.0)*x2284);
IkReal x2292=(gconst95*x2284);
IkReal x2293=((1.0)*x2283);
IkReal x2294=(gconst95*x2293);
evalcond[0]=(((x2283*x2287))+(((-1.0)*r22*x2291))+(((-1.0)*r20*x2294)));
evalcond[1]=(cj0+((x2283*x2285))+(((-1.0)*r12*x2291))+(((-1.0)*r10*x2294)));
evalcond[2]=((((-1.0)*x2288))+(((-1.0)*r00*x2294))+(((-1.0)*r02*x2291))+((x2283*x2289)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2287*x2291))+(((-1.0)*cj1*x2286))+((r20*x2292))+(((-1.0)*r22*x2293)));
evalcond[4]=((((-1.0)*x2289*x2291))+(((-1.0)*r02*x2293))+(((-1.0)*cj0*sj1*x2286))+(((-1.0)*cj0*x2290))+((r00*x2292)));
evalcond[5]=(((r10*x2292))+(((-1.0)*x2285*x2291))+(((-1.0)*x2288*x2290))+(((-1.0)*r12*x2293))+(((-1.0)*sj0*sj1*x2286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2295=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2295;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2295);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2296=((1.0)*cj5);
IkReal x2297=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2296)));
j4eval[0]=x2297;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2296)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2298=cj5*cj5;
IkReal x2299=r01*r01;
IkReal x2300=(r01*sj5);
IkReal x2301=(cj5*r00);
IkReal x2302=((((2.0)*x2300*x2301))+(((-1.0)*(r02*r02)))+(((-1.0)*x2299))+(((-1.0)*x2298*(r00*r00)))+((x2298*x2299)));
j4eval[0]=x2302;
j4eval[1]=IKsign(x2302);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2300))+x2301))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2303=cj5*cj5;
IkReal x2304=r01*r01;
IkReal x2305=(r01*sj5);
IkReal x2306=(cj5*r00);
CheckValue<IkReal> x2307 = IKatan2WithCheck(IkReal(((((-1.0)*x2305))+x2306)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2307.valid){
continue;
}
CheckValue<IkReal> x2308=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2304))+(((2.0)*x2305*x2306))+((x2303*x2304))+(((-1.0)*(r02*r02)))+(((-1.0)*x2303*(r00*r00))))),-1);
if(!x2308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2307.value)+(((1.5707963267949)*(x2308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2309=IKsin(j4);
IkReal x2310=IKcos(j4);
IkReal x2311=(cj5*r10);
IkReal x2312=(r01*sj5);
IkReal x2313=((1.0)*cj2);
IkReal x2314=(cj5*r00);
IkReal x2315=(cj5*r20);
IkReal x2316=((1.0)*x2310);
IkReal x2317=((1.0)*x2309);
IkReal x2318=(sj5*x2309);
evalcond[0]=((((-1.0)*r22*x2316))+((r21*x2318))+(((-1.0)*x2315*x2317)));
evalcond[1]=((((-1.0)*x2311*x2317))+((r11*x2318))+(((-1.0)*r12*x2316)));
evalcond[2]=((((-1.0)*x2312*x2316))+(((-1.0)*r02*x2317))+((x2310*x2314)));
evalcond[3]=((-1.0)+((x2309*x2312))+(((-1.0)*r02*x2316))+(((-1.0)*x2314*x2317)));
evalcond[4]=((((-1.0)*r22*x2317))+((sj1*sj2))+(((-1.0)*cj1*x2313))+(((-1.0)*r21*sj5*x2316))+((x2310*x2315)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2316))+(((-1.0)*r12*x2317))+(((-1.0)*sj1*x2313))+((x2310*x2311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2319=((1.0)*cj5);
CheckValue<IkReal> x2320 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2319))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2320.valid){
continue;
}
CheckValue<IkReal> x2321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2319)))),-1);
if(!x2321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2320.value)+(((1.5707963267949)*(x2321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2322=IKsin(j4);
IkReal x2323=IKcos(j4);
IkReal x2324=(cj5*r10);
IkReal x2325=(r01*sj5);
IkReal x2326=((1.0)*cj2);
IkReal x2327=(cj5*r00);
IkReal x2328=(cj5*r20);
IkReal x2329=((1.0)*x2323);
IkReal x2330=((1.0)*x2322);
IkReal x2331=(sj5*x2322);
evalcond[0]=(((r21*x2331))+(((-1.0)*x2328*x2330))+(((-1.0)*r22*x2329)));
evalcond[1]=(((r11*x2331))+(((-1.0)*r12*x2329))+(((-1.0)*x2324*x2330)));
evalcond[2]=((((-1.0)*r02*x2330))+(((-1.0)*x2325*x2329))+((x2323*x2327)));
evalcond[3]=((-1.0)+((x2322*x2325))+(((-1.0)*r02*x2329))+(((-1.0)*x2327*x2330)));
evalcond[4]=((((-1.0)*r22*x2330))+((sj1*sj2))+(((-1.0)*cj1*x2326))+((x2323*x2328))+(((-1.0)*r21*sj5*x2329)));
evalcond[5]=((((-1.0)*r11*sj5*x2329))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2326))+(((-1.0)*r12*x2330))+((x2323*x2324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2332=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2332.valid){
continue;
}
CheckValue<IkReal> x2333 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2332.value)))+(x2333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2334=IKsin(j4);
IkReal x2335=IKcos(j4);
IkReal x2336=(cj5*r10);
IkReal x2337=(r01*sj5);
IkReal x2338=((1.0)*cj2);
IkReal x2339=(cj5*r00);
IkReal x2340=(cj5*r20);
IkReal x2341=((1.0)*x2335);
IkReal x2342=((1.0)*x2334);
IkReal x2343=(sj5*x2334);
evalcond[0]=((((-1.0)*x2340*x2342))+(((-1.0)*r22*x2341))+((r21*x2343)));
evalcond[1]=(((r11*x2343))+(((-1.0)*x2336*x2342))+(((-1.0)*r12*x2341)));
evalcond[2]=((((-1.0)*x2337*x2341))+((x2335*x2339))+(((-1.0)*r02*x2342)));
evalcond[3]=((-1.0)+(((-1.0)*x2339*x2342))+((x2334*x2337))+(((-1.0)*r02*x2341)));
evalcond[4]=(((x2335*x2340))+((sj1*sj2))+(((-1.0)*cj1*x2338))+(((-1.0)*r22*x2342))+(((-1.0)*r21*sj5*x2341)));
evalcond[5]=((((-1.0)*r11*sj5*x2341))+(((-1.0)*cj1*sj2))+((x2335*x2336))+(((-1.0)*sj1*x2338))+(((-1.0)*r12*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2344=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2344;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2345=((1.0)*cj5);
IkReal x2346=((((-1.0)*r21*x2345))+(((-1.0)*r20*sj5)));
j4eval[0]=x2346;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2345)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2347=cj5*cj5;
IkReal x2348=r01*r01;
IkReal x2349=(cj5*r00);
IkReal x2350=(r01*sj5);
IkReal x2351=((((-2.0)*x2349*x2350))+x2348+((x2347*(r00*r00)))+(((-1.0)*x2347*x2348))+(r02*r02));
j4eval[0]=x2351;
j4eval[1]=((IKabs(r02))+(IKabs((x2349+(((-1.0)*x2350))))));
j4eval[2]=IKsign(x2351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2352=cj5*cj5;
IkReal x2353=r01*r01;
IkReal x2354=(r01*sj5);
IkReal x2355=(cj5*r00);
CheckValue<IkReal> x2356 = IKatan2WithCheck(IkReal((x2355+(((-1.0)*x2354)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2356.valid){
continue;
}
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2354*x2355))+x2353+(((-1.0)*x2352*x2353))+((x2352*(r00*r00)))+(r02*r02))),-1);
if(!x2357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2356.value)+(((1.5707963267949)*(x2357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2358=IKsin(j4);
IkReal x2359=IKcos(j4);
IkReal x2360=(cj5*r10);
IkReal x2361=(r01*sj5);
IkReal x2362=(cj5*r00);
IkReal x2363=(cj5*r20);
IkReal x2364=((1.0)*x2359);
IkReal x2365=((1.0)*x2358);
IkReal x2366=(sj5*x2358);
evalcond[0]=((((-1.0)*r22*x2364))+((r21*x2366))+(((-1.0)*x2363*x2365)));
evalcond[1]=(((r11*x2366))+(((-1.0)*x2360*x2365))+(((-1.0)*r12*x2364)));
evalcond[2]=(((x2359*x2362))+(((-1.0)*x2361*x2364))+(((-1.0)*r02*x2365)));
evalcond[3]=((1.0)+((x2358*x2361))+(((-1.0)*x2362*x2365))+(((-1.0)*r02*x2364)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2364))+((cj1*sj2))+((x2359*x2360))+(((-1.0)*r12*x2365)));
evalcond[5]=((((-1.0)*r21*sj5*x2364))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2359*x2363))+(((-1.0)*r22*x2365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2367=((1.0)*cj5);
CheckValue<IkReal> x2368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2367))+(((-1.0)*r20*sj5)))),-1);
if(!x2368.valid){
continue;
}
CheckValue<IkReal> x2369 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2367))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2368.value)))+(x2369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2370=IKsin(j4);
IkReal x2371=IKcos(j4);
IkReal x2372=(cj5*r10);
IkReal x2373=(r01*sj5);
IkReal x2374=(cj5*r00);
IkReal x2375=(cj5*r20);
IkReal x2376=((1.0)*x2371);
IkReal x2377=((1.0)*x2370);
IkReal x2378=(sj5*x2370);
evalcond[0]=((((-1.0)*x2375*x2377))+(((-1.0)*r22*x2376))+((r21*x2378)));
evalcond[1]=((((-1.0)*x2372*x2377))+(((-1.0)*r12*x2376))+((r11*x2378)));
evalcond[2]=((((-1.0)*r02*x2377))+((x2371*x2374))+(((-1.0)*x2373*x2376)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2376))+((x2370*x2373))+(((-1.0)*x2374*x2377)));
evalcond[4]=((((-1.0)*r11*sj5*x2376))+((cj2*sj1))+((x2371*x2372))+((cj1*sj2))+(((-1.0)*r12*x2377)));
evalcond[5]=(((x2371*x2375))+(((-1.0)*r21*sj5*x2376))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2379 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2379.valid){
continue;
}
CheckValue<IkReal> x2380=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2379.value)+(((1.5707963267949)*(x2380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2381=IKsin(j4);
IkReal x2382=IKcos(j4);
IkReal x2383=(cj5*r10);
IkReal x2384=(r01*sj5);
IkReal x2385=(cj5*r00);
IkReal x2386=(cj5*r20);
IkReal x2387=((1.0)*x2382);
IkReal x2388=((1.0)*x2381);
IkReal x2389=(sj5*x2381);
evalcond[0]=((((-1.0)*x2386*x2388))+(((-1.0)*r22*x2387))+((r21*x2389)));
evalcond[1]=((((-1.0)*r12*x2387))+(((-1.0)*x2383*x2388))+((r11*x2389)));
evalcond[2]=((((-1.0)*r02*x2388))+((x2382*x2385))+(((-1.0)*x2384*x2387)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2387))+((x2381*x2384))+(((-1.0)*x2385*x2388)));
evalcond[4]=((((-1.0)*r12*x2388))+(((-1.0)*r11*sj5*x2387))+((cj2*sj1))+((cj1*sj2))+((x2382*x2383)));
evalcond[5]=((((-1.0)*r21*sj5*x2387))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2382*x2386))+(((-1.0)*r22*x2388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2390=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2390);
rxp1_1=(px*r21);
rxp1_2=(r11*x2390);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2391=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2391);
rxp1_1=(px*r21);
rxp1_2=(r11*x2391);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2392=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2392);
rxp1_1=(px*r21);
rxp1_2=(r11*x2392);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2395=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2395.valid){
continue;
}
IkReal x2393=x2395.value;
IkReal x2394=(sj0*x2393);
cj4array[0]=(((cj2*sj1*x2394))+((cj1*sj2*x2394)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2396=IKsin(j4);
IkReal x2397=IKcos(j4);
IkReal x2398=(cj5*r20);
IkReal x2399=(r21*sj5);
IkReal x2400=((1.0)*x2396);
IkReal x2401=((1.0)*x2397);
evalcond[0]=((-1.0)*r02*x2396);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2401)));
evalcond[2]=(((x2396*x2399))+(((-1.0)*x2398*x2400)));
evalcond[3]=(((r11*sj5*x2396))+(((-1.0)*cj5*r10*x2400)));
evalcond[4]=((((-1.0)*x2399*x2401))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2397*x2398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2403=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2403.valid){
continue;
}
IkReal x2402=x2403.value;
cj4array[0]=(((cj1*cj2*x2402))+(((-1.0)*sj1*sj2*x2402)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2404=IKsin(j4);
IkReal x2405=IKcos(j4);
IkReal x2406=(r11*sj5);
IkReal x2407=((1.0)*sj0);
IkReal x2408=((1.0)*x2405);
IkReal x2409=((1.0)*cj5*x2404);
evalcond[0]=((-1.0)*r02*x2404);
evalcond[1]=((((-1.0)*x2407))+(((-1.0)*r02*x2408)));
evalcond[2]=(((r21*sj5*x2404))+(((-1.0)*r20*x2409)));
evalcond[3]=(((x2404*x2406))+(((-1.0)*r10*x2409)));
evalcond[4]=((((-1.0)*cj2*sj1*x2407))+(((-1.0)*cj1*sj2*x2407))+(((-1.0)*x2406*x2408))+((cj5*r10*x2405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(r02,-1);
if(!x2410.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2410.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2411=IKsin(j4);
IkReal x2412=IKcos(j4);
IkReal x2413=((1.0)*sj0);
IkReal x2414=(cj5*x2412);
IkReal x2415=(sj5*x2411);
IkReal x2416=((1.0)*sj5*x2412);
IkReal x2417=((1.0)*cj5*x2411);
evalcond[0]=((-1.0)*r02*x2411);
evalcond[1]=((((-1.0)*r20*x2417))+((r21*x2415)));
evalcond[2]=(((r11*x2415))+(((-1.0)*r10*x2417)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2414))+(((-1.0)*r21*x2416)));
evalcond[4]=((((-1.0)*cj1*sj2*x2413))+((r10*x2414))+(((-1.0)*r11*x2416))+(((-1.0)*cj2*sj1*x2413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2418=((1.0)*sj0);
IkReal x2419=((1.0)*cj0);
CheckValue<IkReal> x2420 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2418))+(((-1.0)*r02*x2419)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2419))+(((-1.0)*r11*sj5*x2418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2420.valid){
continue;
}
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2420.value)+(((1.5707963267949)*(x2421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2422=IKsin(j4);
IkReal x2423=IKcos(j4);
IkReal x2424=(cj5*r10);
IkReal x2425=(r01*sj5);
IkReal x2426=((1.0)*cj2);
IkReal x2427=(cj5*r00);
IkReal x2428=((1.0)*sj0);
IkReal x2429=(cj5*r20);
IkReal x2430=(cj1*sj2);
IkReal x2431=((1.0)*x2423);
IkReal x2432=((1.0)*x2422);
IkReal x2433=(sj5*x2422);
evalcond[0]=((((-1.0)*r22*x2431))+(((-1.0)*x2429*x2432))+((r21*x2433)));
evalcond[1]=(((r11*x2433))+cj0+(((-1.0)*x2424*x2432))+(((-1.0)*r12*x2431)));
evalcond[2]=((((-1.0)*x2427*x2432))+((x2422*x2425))+(((-1.0)*r02*x2431))+(((-1.0)*x2428)));
evalcond[3]=((((-1.0)*r22*x2432))+(((-1.0)*r21*sj5*x2431))+((x2423*x2429))+((sj1*sj2))+(((-1.0)*cj1*x2426)));
evalcond[4]=((((-1.0)*cj0*x2430))+(((-1.0)*x2425*x2431))+((x2423*x2427))+(((-1.0)*cj0*sj1*x2426))+(((-1.0)*r02*x2432)));
evalcond[5]=(((x2423*x2424))+(((-1.0)*x2428*x2430))+(((-1.0)*r11*sj5*x2431))+(((-1.0)*sj0*sj1*x2426))+(((-1.0)*r12*x2432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2434=((1.0)*cj5);
CheckValue<IkReal> x2435 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2435.valid){
continue;
}
CheckValue<IkReal> x2436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2434)))),-1);
if(!x2436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2435.value)+(((1.5707963267949)*(x2436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2437=IKsin(j4);
IkReal x2438=IKcos(j4);
IkReal x2439=(cj5*r10);
IkReal x2440=(r01*sj5);
IkReal x2441=((1.0)*cj2);
IkReal x2442=(cj5*r00);
IkReal x2443=((1.0)*sj0);
IkReal x2444=(cj5*r20);
IkReal x2445=(cj1*sj2);
IkReal x2446=((1.0)*x2438);
IkReal x2447=((1.0)*x2437);
IkReal x2448=(sj5*x2437);
evalcond[0]=((((-1.0)*x2444*x2447))+(((-1.0)*r22*x2446))+((r21*x2448)));
evalcond[1]=(cj0+(((-1.0)*x2439*x2447))+(((-1.0)*r12*x2446))+((r11*x2448)));
evalcond[2]=(((x2437*x2440))+(((-1.0)*x2443))+(((-1.0)*x2442*x2447))+(((-1.0)*r02*x2446)));
evalcond[3]=((((-1.0)*r21*sj5*x2446))+((sj1*sj2))+(((-1.0)*cj1*x2441))+(((-1.0)*r22*x2447))+((x2438*x2444)));
evalcond[4]=((((-1.0)*cj0*x2445))+(((-1.0)*cj0*sj1*x2441))+(((-1.0)*x2440*x2446))+(((-1.0)*r02*x2447))+((x2438*x2442)));
evalcond[5]=((((-1.0)*x2443*x2445))+(((-1.0)*r11*sj5*x2446))+(((-1.0)*r12*x2447))+((x2438*x2439))+(((-1.0)*sj0*sj1*x2441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2449=((1.0)*cj5);
CheckValue<IkReal> x2450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2450.valid){
continue;
}
CheckValue<IkReal> x2451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2449)))),-1);
if(!x2451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2450.value)+(((1.5707963267949)*(x2451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2452=IKsin(j4);
IkReal x2453=IKcos(j4);
IkReal x2454=(cj5*r10);
IkReal x2455=(r01*sj5);
IkReal x2456=((1.0)*cj2);
IkReal x2457=(cj5*r00);
IkReal x2458=((1.0)*sj0);
IkReal x2459=(cj5*r20);
IkReal x2460=(cj1*sj2);
IkReal x2461=((1.0)*x2453);
IkReal x2462=((1.0)*x2452);
IkReal x2463=(sj5*x2452);
evalcond[0]=((((-1.0)*r22*x2461))+((r21*x2463))+(((-1.0)*x2459*x2462)));
evalcond[1]=(cj0+(((-1.0)*x2454*x2462))+(((-1.0)*r12*x2461))+((r11*x2463)));
evalcond[2]=(((x2452*x2455))+(((-1.0)*x2457*x2462))+(((-1.0)*r02*x2461))+(((-1.0)*x2458)));
evalcond[3]=((((-1.0)*r22*x2462))+((x2453*x2459))+((sj1*sj2))+(((-1.0)*r21*sj5*x2461))+(((-1.0)*cj1*x2456)));
evalcond[4]=(((x2453*x2457))+(((-1.0)*cj0*x2460))+(((-1.0)*x2455*x2461))+(((-1.0)*cj0*sj1*x2456))+(((-1.0)*r02*x2462)));
evalcond[5]=((((-1.0)*r11*sj5*x2461))+(((-1.0)*r12*x2462))+((x2453*x2454))+(((-1.0)*sj0*sj1*x2456))+(((-1.0)*x2458*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2464=cj5*cj5;
IkReal x2465=r21*r21;
IkReal x2466=(sj1*sj2);
IkReal x2467=(r21*sj5);
IkReal x2468=(cj1*cj2);
IkReal x2469=(cj5*r20);
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal((((r22*x2466))+(((-1.0)*r22*x2468)))),IkReal((((x2466*x2467))+((x2468*x2469))+(((-1.0)*x2466*x2469))+(((-1.0)*x2467*x2468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
CheckValue<IkReal> x2471=IKPowWithIntegerCheck(IKsign((x2465+(((-2.0)*x2467*x2469))+(r22*r22)+((x2464*(r20*r20)))+(((-1.0)*x2464*x2465)))),-1);
if(!x2471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2470.value)+(((1.5707963267949)*(x2471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2472=IKsin(j4);
IkReal x2473=IKcos(j4);
IkReal x2474=(r21*sj5);
IkReal x2475=(cj5*r20);
IkReal x2476=((1.0)*x2473);
IkReal x2477=((1.0)*x2472);
evalcond[0]=((((-1.0)*x2475*x2477))+(((-1.0)*r22*x2476))+((x2472*x2474)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2474*x2476))+(((-1.0)*r22*x2477))+((x2473*x2475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2478=(cj5*sj4);
IkReal x2479=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2479))+(((-1.0)*r00*x2478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2478))+(((-1.0)*r11*x2479))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2479))+(((-1.0)*r00*x2478))))+IKsqr((((r10*x2478))+(((-1.0)*r11*x2479))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2479))+(((-1.0)*r00*x2478))), (((r10*x2478))+(((-1.0)*r11*x2479))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2480=IKcos(j0);
IkReal x2481=IKsin(j0);
IkReal x2482=(cj4*cj5);
IkReal x2483=(cj1*cj2);
IkReal x2484=(sj1*sj2);
IkReal x2485=(cj5*r01);
IkReal x2486=((1.0)*sj2);
IkReal x2487=(r11*sj5);
IkReal x2488=((1.0)*sj4);
IkReal x2489=(cj2*sj1);
IkReal x2490=(cj5*r11);
IkReal x2491=(r00*sj5);
IkReal x2492=((1.0)*cj4);
IkReal x2493=(r01*sj5);
IkReal x2494=(r10*sj5);
IkReal x2495=((0.571)*x2480);
IkReal x2496=(cj1*x2481);
IkReal x2497=(cj1*x2480);
IkReal x2498=((0.571)*x2481);
IkReal x2499=((1.0)*x2480);
IkReal x2500=((1.0)*x2481);
evalcond[0]=(x2480+(((-1.0)*cj5*r10*x2488))+((sj4*x2487))+(((-1.0)*r12*x2492)));
evalcond[1]=((((-1.0)*x2500))+(((-1.0)*cj5*r00*x2488))+(((-1.0)*r02*x2492))+((sj4*x2493)));
evalcond[2]=(x2485+x2491+((x2480*x2484))+(((-1.0)*x2483*x2499)));
evalcond[3]=(x2490+x2494+((x2481*x2484))+(((-1.0)*x2483*x2500)));
evalcond[4]=((((-1.0)*x2486*x2497))+(((-1.0)*r02*x2488))+(((-1.0)*x2489*x2499))+((r00*x2482))+(((-1.0)*x2492*x2493)));
evalcond[5]=((((-1.0)*x2486*x2496))+(((-1.0)*x2489*x2500))+(((-1.0)*x2487*x2492))+(((-1.0)*r12*x2488))+((r10*x2482)));
evalcond[6]=((((0.613)*x2497))+(((-0.174)*x2481))+((x2483*x2495))+(((-1.0)*px))+(((-0.12)*x2491))+(((-0.12)*x2485))+(((-1.0)*x2484*x2495)));
evalcond[7]=((((0.613)*x2496))+(((0.174)*x2480))+((x2483*x2498))+(((-1.0)*py))+(((-0.12)*x2490))+(((-0.12)*x2494))+(((-1.0)*x2484*x2498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2501=((1.0)*cj5);
IkReal x2502=((1.0)*sj5);
CheckValue<IkReal> x2503 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2501))+(((-1.0)*r10*x2502)))),IkReal(((((-1.0)*r00*x2502))+(((-1.0)*r01*x2501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2503.valid){
continue;
}
CheckValue<IkReal> x2504=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2504.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2503.value)+(((1.5707963267949)*(x2504.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2505=IKcos(j0);
IkReal x2506=IKsin(j0);
IkReal x2507=(cj5*r01);
IkReal x2508=(sj1*sj2);
IkReal x2509=(cj5*r11);
IkReal x2510=(r00*sj5);
IkReal x2511=(r10*sj5);
IkReal x2512=((0.571)*x2508);
IkReal x2513=(cj1*x2506);
IkReal x2514=(cj1*cj2*x2505);
evalcond[0]=(x2510+x2507+((x2505*x2508))+(((-1.0)*x2514)));
evalcond[1]=(x2511+x2509+((x2506*x2508))+(((-1.0)*cj2*x2513)));
evalcond[2]=((((-1.0)*px))+(((-0.12)*x2510))+(((-1.0)*x2505*x2512))+(((-0.174)*x2506))+(((-0.12)*x2507))+(((0.571)*x2514))+(((0.613)*cj1*x2505)));
evalcond[3]=((((0.571)*cj2*x2513))+(((-1.0)*x2506*x2512))+(((0.613)*x2513))+(((-1.0)*py))+(((0.174)*x2505))+(((-0.12)*x2511))+(((-0.12)*x2509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2515=((1.0)*cj5);
IkReal x2516=((((-1.0)*r01*x2515))+(((-1.0)*r00*sj5)));
j4eval[0]=x2516;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2515)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2517=((1.0)*cj5);
IkReal x2518=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2517)));
j4eval[0]=x2518;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2517))))));
j4eval[2]=IKsign(x2518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2519=((1.0)*sj0);
IkReal x2520=((1.0)*cj0);
IkReal x2521=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2521;
j4eval[1]=((IKabs(((((-1.0)*r12*x2519))+(((-1.0)*r02*x2520)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2520))+(((-1.0)*r11*sj5*x2519))))));
j4eval[2]=IKsign(x2521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2522=((-1.0)*r20);
IkReal x2524 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2524)==0){
continue;
}
IkReal x2523=pow(x2524,-0.5);
CheckValue<IkReal> x2525 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2522),IKFAST_ATAN2_MAGTHRESH);
if(!x2525.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2525.value));
IkReal gconst79=(r21*x2523);
IkReal gconst80=(x2522*x2523);
CheckValue<IkReal> x2526 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2526.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2526.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2527=((-1.0)*r20);
IkReal x2528=x2523;
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2527),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
IkReal x2529=((-1.0)*(x2530.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2529;
IkReal gconst78=x2529;
IkReal gconst79=(r21*x2528);
IkReal gconst80=(x2527*x2528);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2531=((-1.0)*r20);
IkReal x2532=x2523;
CheckValue<IkReal> x2534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2531),IKFAST_ATAN2_MAGTHRESH);
if(!x2534.valid){
continue;
}
IkReal x2533=((-1.0)*(x2534.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2533;
IkReal gconst78=x2533;
IkReal gconst79=(r21*x2532);
IkReal gconst80=(x2531*x2532);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2535=((-1.0)*r20);
IkReal x2536=x2523;
CheckValue<IkReal> x2538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2535),IKFAST_ATAN2_MAGTHRESH);
if(!x2538.valid){
continue;
}
IkReal x2537=((-1.0)*(x2538.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2537;
IkReal gconst78=x2537;
IkReal gconst79=(r21*x2536);
IkReal gconst80=(x2535*x2536);
IkReal x2539=r22*r22;
CheckValue<IkReal> x2542=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2539))),-1);
if(!x2542.valid){
continue;
}
IkReal x2540=x2542.value;
IkReal x2541=(x2539+((x2540*(r21*r21*r21*r21)))+(((2.0)*x2540*(r20*r20)*(r21*r21)))+((x2540*(r20*r20*r20*r20))));
j4eval[0]=x2541;
j4eval[1]=IKsign(x2541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2543=(sj1*sj2);
IkReal x2544=(gconst80*r20);
IkReal x2545=(gconst79*r21);
IkReal x2546=(cj1*cj2);
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(IKsign(((x2544*x2544)+(r22*r22)+(x2545*x2545)+(((-2.0)*x2544*x2545)))),-1);
if(!x2547.valid){
continue;
}
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal((((r22*x2543))+(((-1.0)*r22*x2546)))),IkReal((((x2543*x2545))+(((-1.0)*x2545*x2546))+(((-1.0)*x2543*x2544))+((x2544*x2546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2547.value)))+(x2548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2549=IKsin(j4);
IkReal x2550=IKcos(j4);
IkReal x2551=(gconst79*r01);
IkReal x2552=(gconst79*r21);
IkReal x2553=((1.0)*cj2);
IkReal x2554=(gconst79*r11);
IkReal x2555=((1.0)*sj0);
IkReal x2556=(cj1*sj2);
IkReal x2557=((1.0)*x2550);
IkReal x2558=(gconst80*x2550);
IkReal x2559=((1.0)*x2549);
IkReal x2560=(gconst80*x2559);
evalcond[0]=((((-1.0)*r20*x2560))+((x2549*x2552))+(((-1.0)*r22*x2557)));
evalcond[1]=(cj0+(((-1.0)*r12*x2557))+((x2549*x2554))+(((-1.0)*r10*x2560)));
evalcond[2]=((((-1.0)*r00*x2560))+((x2549*x2551))+(((-1.0)*r02*x2557))+(((-1.0)*x2555)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2553))+(((-1.0)*x2552*x2557))+((r20*x2558))+(((-1.0)*r22*x2559)));
evalcond[4]=((((-1.0)*cj0*sj1*x2553))+(((-1.0)*cj0*x2556))+((r00*x2558))+(((-1.0)*r02*x2559))+(((-1.0)*x2551*x2557)));
evalcond[5]=((((-1.0)*x2554*x2557))+(((-1.0)*r12*x2559))+(((-1.0)*x2555*x2556))+(((-1.0)*sj0*sj1*x2553))+((r10*x2558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2561=((1.0)*gconst80);
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2561))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2561)))),-1);
if(!x2563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2562.value)+(((1.5707963267949)*(x2563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2564=IKsin(j4);
IkReal x2565=IKcos(j4);
IkReal x2566=(gconst79*r01);
IkReal x2567=(gconst79*r21);
IkReal x2568=((1.0)*cj2);
IkReal x2569=(gconst79*r11);
IkReal x2570=((1.0)*sj0);
IkReal x2571=(cj1*sj2);
IkReal x2572=((1.0)*x2565);
IkReal x2573=(gconst80*x2565);
IkReal x2574=((1.0)*x2564);
IkReal x2575=(gconst80*x2574);
evalcond[0]=((((-1.0)*r20*x2575))+(((-1.0)*r22*x2572))+((x2564*x2567)));
evalcond[1]=((((-1.0)*r10*x2575))+(((-1.0)*r12*x2572))+cj0+((x2564*x2569)));
evalcond[2]=((((-1.0)*x2570))+(((-1.0)*r02*x2572))+(((-1.0)*r00*x2575))+((x2564*x2566)));
evalcond[3]=((((-1.0)*cj1*x2568))+((sj1*sj2))+((r20*x2573))+(((-1.0)*x2567*x2572))+(((-1.0)*r22*x2574)));
evalcond[4]=((((-1.0)*x2566*x2572))+(((-1.0)*cj0*x2571))+(((-1.0)*cj0*sj1*x2568))+((r00*x2573))+(((-1.0)*r02*x2574)));
evalcond[5]=((((-1.0)*x2569*x2572))+((r10*x2573))+(((-1.0)*r12*x2574))+(((-1.0)*x2570*x2571))+(((-1.0)*sj0*sj1*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2576=((1.0)*gconst80);
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2576)))),-1);
if(!x2577.valid){
continue;
}
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2576))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2577.value)))+(x2578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2579=IKsin(j4);
IkReal x2580=IKcos(j4);
IkReal x2581=(gconst79*r01);
IkReal x2582=(gconst79*r21);
IkReal x2583=((1.0)*cj2);
IkReal x2584=(gconst79*r11);
IkReal x2585=((1.0)*sj0);
IkReal x2586=(cj1*sj2);
IkReal x2587=((1.0)*x2580);
IkReal x2588=(gconst80*x2580);
IkReal x2589=((1.0)*x2579);
IkReal x2590=(gconst80*x2589);
evalcond[0]=((((-1.0)*r20*x2590))+((x2579*x2582))+(((-1.0)*r22*x2587)));
evalcond[1]=(cj0+((x2579*x2584))+(((-1.0)*r10*x2590))+(((-1.0)*r12*x2587)));
evalcond[2]=((((-1.0)*r00*x2590))+(((-1.0)*r02*x2587))+(((-1.0)*x2585))+((x2579*x2581)));
evalcond[3]=((((-1.0)*cj1*x2583))+((r20*x2588))+((sj1*sj2))+(((-1.0)*x2582*x2587))+(((-1.0)*r22*x2589)));
evalcond[4]=((((-1.0)*cj0*x2586))+((r00*x2588))+(((-1.0)*r02*x2589))+(((-1.0)*cj0*sj1*x2583))+(((-1.0)*x2581*x2587)));
evalcond[5]=((((-1.0)*x2585*x2586))+(((-1.0)*sj0*sj1*x2583))+((r10*x2588))+(((-1.0)*x2584*x2587))+(((-1.0)*r12*x2589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2591=((-1.0)*r21);
IkReal x2593 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2593)==0){
continue;
}
IkReal x2592=pow(x2593,-0.5);
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal(x2591),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2594.value))));
IkReal gconst82=(x2591*x2592);
IkReal gconst83=((1.0)*r20*x2592);
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2595.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2596=((-1.0)*r21);
CheckValue<IkReal> x2599 = IKatan2WithCheck(IkReal(x2596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2599.valid){
continue;
}
IkReal x2597=((1.0)*(x2599.value));
IkReal x2598=x2592;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2597)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2597)));
IkReal gconst82=(x2596*x2598);
IkReal gconst83=((1.0)*r20*x2598);
IkReal x2600=r22*r22;
IkReal x2601=((1.0)*x2600);
CheckValue<IkReal> x2605=IKPowWithIntegerCheck(((-1.0)+x2600),-1);
if(!x2605.valid){
continue;
}
IkReal x2602=x2605.value;
if((((1.0)+(((-1.0)*x2601)))) < -0.00001)
continue;
IkReal x2603=IKsqrt(((1.0)+(((-1.0)*x2601))));
IkReal x2604=(cj0*x2602*x2603);
j4eval[0]=((IKabs(((((-1.0)*x2601*x2604))+x2604)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2606=((-1.0)*r21);
CheckValue<IkReal> x2609 = IKatan2WithCheck(IkReal(x2606),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2609.valid){
continue;
}
IkReal x2607=((1.0)*(x2609.value));
IkReal x2608=x2592;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2607)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2607)));
IkReal gconst82=(x2606*x2608);
IkReal gconst83=((1.0)*r20*x2608);
IkReal x2610=r22*r22;
IkReal x2611=((1.0)*x2610);
CheckValue<IkReal> x2615=IKPowWithIntegerCheck(((-1.0)+x2610),-1);
if(!x2615.valid){
continue;
}
IkReal x2612=x2615.value;
if((((1.0)+(((-1.0)*x2611)))) < -0.00001)
continue;
IkReal x2613=IKsqrt(((1.0)+(((-1.0)*x2611))));
IkReal x2614=(sj0*x2612*x2613);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2611*x2614))+x2614))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2616=((-1.0)*r21);
CheckValue<IkReal> x2619 = IKatan2WithCheck(IkReal(x2616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2619.valid){
continue;
}
IkReal x2617=((1.0)*(x2619.value));
IkReal x2618=x2592;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2617)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2617)));
IkReal gconst82=(x2616*x2618);
IkReal gconst83=((1.0)*r20*x2618);
IkReal x2620=r22*r22;
IkReal x2621=(r12*sj0);
IkReal x2622=(cj0*r02);
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(((-1.0)+x2620),-1);
if(!x2626.valid){
continue;
}
IkReal x2623=x2626.value;
if((((1.0)+(((-1.0)*x2620)))) < -0.00001)
continue;
IkReal x2624=IKsqrt(((1.0)+(((-1.0)*x2620))));
IkReal x2625=(r22*x2623*x2624);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2621*x2625))+((x2622*x2625)))))+(IKabs(((((-1.0)*x2622))+(((-1.0)*x2621))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2627=((1.0)*sj0);
IkReal x2628=((1.0)*cj0);
CheckValue<IkReal> x2629=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2629.valid){
continue;
}
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2627))+(((-1.0)*r02*x2628)))),IkReal(((((-1.0)*gconst82*r01*x2628))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r11*x2627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2629.value)))+(x2630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2631=IKsin(j4);
IkReal x2632=IKcos(j4);
IkReal x2633=(gconst82*r11);
IkReal x2634=((1.0)*cj2);
IkReal x2635=((1.0)*sj0);
IkReal x2636=(cj1*sj2);
IkReal x2637=((1.0)*x2632);
IkReal x2638=(gconst83*x2632);
IkReal x2639=(gconst82*x2631);
IkReal x2640=((1.0)*x2631);
evalcond[0]=((((-1.0)*gconst83*r20*x2640))+((r21*x2639))+(((-1.0)*r22*x2637)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2640))+(((-1.0)*r12*x2637))+((x2631*x2633)));
evalcond[2]=((((-1.0)*r02*x2637))+(((-1.0)*x2635))+((r01*x2639))+(((-1.0)*gconst83*r00*x2640)));
evalcond[3]=((((-1.0)*r22*x2640))+(((-1.0)*cj1*x2634))+((sj1*sj2))+((r20*x2638))+(((-1.0)*gconst82*r21*x2637)));
evalcond[4]=((((-1.0)*cj0*sj1*x2634))+(((-1.0)*r02*x2640))+(((-1.0)*gconst82*r01*x2637))+((r00*x2638))+(((-1.0)*cj0*x2636)));
evalcond[5]=((((-1.0)*sj0*sj1*x2634))+(((-1.0)*r12*x2640))+((r10*x2638))+(((-1.0)*x2635*x2636))+(((-1.0)*x2633*x2637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2641=((1.0)*gconst83);
CheckValue<IkReal> x2642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2641))+(((-1.0)*gconst82*r10)))),-1);
if(!x2642.valid){
continue;
}
CheckValue<IkReal> x2643 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2642.value)))+(x2643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2644=IKsin(j4);
IkReal x2645=IKcos(j4);
IkReal x2646=(gconst82*r11);
IkReal x2647=((1.0)*cj2);
IkReal x2648=((1.0)*sj0);
IkReal x2649=(cj1*sj2);
IkReal x2650=((1.0)*x2645);
IkReal x2651=(gconst83*x2645);
IkReal x2652=(gconst82*x2644);
IkReal x2653=((1.0)*x2644);
evalcond[0]=((((-1.0)*r22*x2650))+(((-1.0)*gconst83*r20*x2653))+((r21*x2652)));
evalcond[1]=(cj0+(((-1.0)*r12*x2650))+((x2644*x2646))+(((-1.0)*gconst83*r10*x2653)));
evalcond[2]=((((-1.0)*r02*x2650))+((r01*x2652))+(((-1.0)*x2648))+(((-1.0)*gconst83*r00*x2653)));
evalcond[3]=((((-1.0)*r22*x2653))+(((-1.0)*cj1*x2647))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2650))+((r20*x2651)));
evalcond[4]=((((-1.0)*r02*x2653))+(((-1.0)*cj0*sj1*x2647))+(((-1.0)*gconst82*r01*x2650))+((r00*x2651))+(((-1.0)*cj0*x2649)));
evalcond[5]=((((-1.0)*r12*x2653))+(((-1.0)*x2646*x2650))+((r10*x2651))+(((-1.0)*sj0*sj1*x2647))+(((-1.0)*x2648*x2649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2654=((1.0)*gconst83);
CheckValue<IkReal> x2655 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2655.valid){
continue;
}
CheckValue<IkReal> x2656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2654))+(((-1.0)*gconst82*r00)))),-1);
if(!x2656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2655.value)+(((1.5707963267949)*(x2656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2657=IKsin(j4);
IkReal x2658=IKcos(j4);
IkReal x2659=(gconst82*r11);
IkReal x2660=((1.0)*cj2);
IkReal x2661=((1.0)*sj0);
IkReal x2662=(cj1*sj2);
IkReal x2663=((1.0)*x2658);
IkReal x2664=(gconst83*x2658);
IkReal x2665=(gconst82*x2657);
IkReal x2666=((1.0)*x2657);
evalcond[0]=(((r21*x2665))+(((-1.0)*gconst83*r20*x2666))+(((-1.0)*r22*x2663)));
evalcond[1]=((((-1.0)*r12*x2663))+cj0+((x2657*x2659))+(((-1.0)*gconst83*r10*x2666)));
evalcond[2]=((((-1.0)*r02*x2663))+(((-1.0)*x2661))+((r01*x2665))+(((-1.0)*gconst83*r00*x2666)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2660))+(((-1.0)*gconst82*r21*x2663))+(((-1.0)*r22*x2666))+((r20*x2664)));
evalcond[4]=((((-1.0)*cj0*x2662))+(((-1.0)*cj0*sj1*x2660))+(((-1.0)*gconst82*r01*x2663))+(((-1.0)*r02*x2666))+((r00*x2664)));
evalcond[5]=((((-1.0)*r12*x2666))+(((-1.0)*sj0*sj1*x2660))+((r10*x2664))+(((-1.0)*x2659*x2663))+(((-1.0)*x2661*x2662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2667=((-1.0)*r10);
IkReal x2669 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2669)==0){
continue;
}
IkReal x2668=pow(x2669,-0.5);
CheckValue<IkReal> x2670 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2667),IKFAST_ATAN2_MAGTHRESH);
if(!x2670.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2670.value));
IkReal gconst85=(r11*x2668);
IkReal gconst86=(x2667*x2668);
CheckValue<IkReal> x2671 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2671.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2671.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2672=((-1.0)*r10);
IkReal x2673=x2668;
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2672),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
IkReal x2674=((-1.0)*(x2675.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2674;
IkReal gconst84=x2674;
IkReal gconst85=(r11*x2673);
IkReal gconst86=(x2672*x2673);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2676=((1.0)*sj0);
IkReal x2677=((1.0)*gconst85);
CheckValue<IkReal> x2678=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2677)))),-1);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2676))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2677))+(((-1.0)*gconst85*r11*x2676))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2678.value)))+(x2679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2680=IKsin(j4);
IkReal x2681=IKcos(j4);
IkReal x2682=(gconst85*r21);
IkReal x2683=(gconst86*r00);
IkReal x2684=(gconst86*r10);
IkReal x2685=((1.0)*cj2);
IkReal x2686=(gconst85*r11);
IkReal x2687=(gconst85*r01);
IkReal x2688=((1.0)*sj0);
IkReal x2689=(gconst86*r20);
IkReal x2690=(cj1*sj2);
IkReal x2691=((1.0)*x2681);
IkReal x2692=((1.0)*x2680);
evalcond[0]=((((-1.0)*r22*x2691))+(((-1.0)*x2689*x2692))+((x2680*x2682)));
evalcond[1]=(cj0+(((-1.0)*x2684*x2692))+(((-1.0)*r12*x2691))+((x2680*x2686)));
evalcond[2]=((((-1.0)*x2683*x2692))+(((-1.0)*r02*x2691))+(((-1.0)*x2688))+((x2680*x2687)));
evalcond[3]=((((-1.0)*cj1*x2685))+(((-1.0)*x2682*x2691))+((sj1*sj2))+(((-1.0)*r22*x2692))+((x2681*x2689)));
evalcond[4]=((((-1.0)*cj0*x2690))+(((-1.0)*r02*x2692))+((x2681*x2683))+(((-1.0)*x2687*x2691))+(((-1.0)*cj0*sj1*x2685)));
evalcond[5]=((((-1.0)*x2688*x2690))+(((-1.0)*x2686*x2691))+((x2681*x2684))+(((-1.0)*r12*x2692))+(((-1.0)*sj0*sj1*x2685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2693=((1.0)*gconst86);
CheckValue<IkReal> x2694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2693)))),-1);
if(!x2694.valid){
continue;
}
CheckValue<IkReal> x2695 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2694.value)))+(x2695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2696=IKsin(j4);
IkReal x2697=IKcos(j4);
IkReal x2698=(gconst85*r21);
IkReal x2699=(gconst86*r00);
IkReal x2700=(gconst86*r10);
IkReal x2701=((1.0)*cj2);
IkReal x2702=(gconst85*r11);
IkReal x2703=(gconst85*r01);
IkReal x2704=((1.0)*sj0);
IkReal x2705=(gconst86*r20);
IkReal x2706=(cj1*sj2);
IkReal x2707=((1.0)*x2697);
IkReal x2708=((1.0)*x2696);
evalcond[0]=((((-1.0)*r22*x2707))+(((-1.0)*x2705*x2708))+((x2696*x2698)));
evalcond[1]=(cj0+(((-1.0)*r12*x2707))+((x2696*x2702))+(((-1.0)*x2700*x2708)));
evalcond[2]=((((-1.0)*r02*x2707))+(((-1.0)*x2704))+((x2696*x2703))+(((-1.0)*x2699*x2708)));
evalcond[3]=((((-1.0)*r22*x2708))+((sj1*sj2))+((x2697*x2705))+(((-1.0)*cj1*x2701))+(((-1.0)*x2698*x2707)));
evalcond[4]=((((-1.0)*cj0*x2706))+(((-1.0)*r02*x2708))+((x2697*x2699))+(((-1.0)*cj0*sj1*x2701))+(((-1.0)*x2703*x2707)));
evalcond[5]=((((-1.0)*x2702*x2707))+(((-1.0)*r12*x2708))+((x2697*x2700))+(((-1.0)*x2704*x2706))+(((-1.0)*sj0*sj1*x2701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2709=((-1.0)*r11);
IkReal x2711 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2711)==0){
continue;
}
IkReal x2710=pow(x2711,-0.5);
CheckValue<IkReal> x2712 = IKatan2WithCheck(IkReal(x2709),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2712.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2712.value))));
IkReal gconst88=(x2709*x2710);
IkReal gconst89=((1.0)*r10*x2710);
CheckValue<IkReal> x2713 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2713.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2714=((-1.0)*r11);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal(x2714),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
IkReal x2715=((1.0)*(x2717.value));
IkReal x2716=x2710;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2715)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2715)));
IkReal gconst88=(x2714*x2716);
IkReal gconst89=((1.0)*r10*x2716);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2718=((-1.0)*r11);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(x2718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
IkReal x2719=((1.0)*(x2721.value));
IkReal x2720=x2710;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2719)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2719)));
IkReal gconst88=(x2718*x2720);
IkReal gconst89=((1.0)*r10*x2720);
IkReal x2722=r12*r12;
IkReal x2723=((1.0)*sj0);
IkReal x2724=(cj0*r02);
IkReal x2725=x2710;
j4eval[0]=((IKabs(((((-1.0)*x2724))+(((-1.0)*r12*x2723)))))+(IKabs((((r12*x2724*x2725))+(((-1.0)*x2723*x2725))+((sj0*x2722*x2725))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2726=((-1.0)*r11);
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal(x2726),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
IkReal x2727=((1.0)*(x2729.value));
IkReal x2728=x2710;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2727)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2727)));
IkReal gconst88=(x2726*x2728);
IkReal gconst89=((1.0)*r10*x2728);
IkReal x2730=r12*r12;
IkReal x2731=(cj1*cj2*r22);
IkReal x2732=(r22*sj1*sj2);
CheckValue<IkReal> x2736=IKPowWithIntegerCheck(((-1.0)+x2730),-1);
if(!x2736.valid){
continue;
}
IkReal x2733=x2736.value;
if((((1.0)+(((-1.0)*x2730)))) < -0.00001)
continue;
IkReal x2734=IKsqrt(((1.0)+(((-1.0)*x2730))));
IkReal x2735=(r12*x2733*x2734);
j4eval[0]=((IKabs((((x2731*x2735))+(((-1.0)*x2732*x2735)))))+(IKabs((x2732+(((-1.0)*x2731))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2737=(cj1*cj2);
IkReal x2738=(gconst89*r20);
IkReal x2739=(gconst88*r21);
IkReal x2740=(sj1*sj2);
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(IKsign(((x2739*x2739)+(x2738*x2738)+(r22*r22)+(((-2.0)*x2738*x2739)))),-1);
if(!x2741.valid){
continue;
}
CheckValue<IkReal> x2742 = IKatan2WithCheck(IkReal((((r22*x2740))+(((-1.0)*r22*x2737)))),IkReal(((((-1.0)*x2737*x2739))+((x2739*x2740))+((x2737*x2738))+(((-1.0)*x2738*x2740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2741.value)))+(x2742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2743=IKsin(j4);
IkReal x2744=IKcos(j4);
IkReal x2745=((1.0)*sj0);
IkReal x2746=((1.0)*cj2);
IkReal x2747=(gconst89*r20);
IkReal x2748=(gconst89*r10);
IkReal x2749=(gconst89*r00);
IkReal x2750=(cj1*sj2);
IkReal x2751=((1.0)*x2744);
IkReal x2752=((1.0)*x2743);
IkReal x2753=(gconst88*x2743);
evalcond[0]=((((-1.0)*r22*x2751))+((r21*x2753))+(((-1.0)*x2747*x2752)));
evalcond[1]=(((r11*x2753))+cj0+(((-1.0)*r12*x2751))+(((-1.0)*x2748*x2752)));
evalcond[2]=(((r01*x2753))+(((-1.0)*x2745))+(((-1.0)*x2749*x2752))+(((-1.0)*r02*x2751)));
evalcond[3]=((((-1.0)*r22*x2752))+(((-1.0)*gconst88*r21*x2751))+((sj1*sj2))+((x2744*x2747))+(((-1.0)*cj1*x2746)));
evalcond[4]=((((-1.0)*gconst88*r01*x2751))+((x2744*x2749))+(((-1.0)*cj0*x2750))+(((-1.0)*r02*x2752))+(((-1.0)*cj0*sj1*x2746)));
evalcond[5]=((((-1.0)*gconst88*r11*x2751))+(((-1.0)*x2745*x2750))+(((-1.0)*cj2*sj1*x2745))+((x2744*x2748))+(((-1.0)*r12*x2752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2754=((1.0)*sj0);
IkReal x2755=((1.0)*cj0);
CheckValue<IkReal> x2756=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2756.valid){
continue;
}
CheckValue<IkReal> x2757 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2754))+(((-1.0)*r02*x2755)))),IkReal(((((-1.0)*gconst88*r01*x2755))+(((-1.0)*gconst88*r11*x2754))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2756.value)))+(x2757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2758=IKsin(j4);
IkReal x2759=IKcos(j4);
IkReal x2760=((1.0)*sj0);
IkReal x2761=((1.0)*cj2);
IkReal x2762=(gconst89*r20);
IkReal x2763=(gconst89*r10);
IkReal x2764=(gconst89*r00);
IkReal x2765=(cj1*sj2);
IkReal x2766=((1.0)*x2759);
IkReal x2767=((1.0)*x2758);
IkReal x2768=(gconst88*x2758);
evalcond[0]=((((-1.0)*x2762*x2767))+((r21*x2768))+(((-1.0)*r22*x2766)));
evalcond[1]=(cj0+(((-1.0)*r12*x2766))+((r11*x2768))+(((-1.0)*x2763*x2767)));
evalcond[2]=((((-1.0)*x2764*x2767))+((r01*x2768))+(((-1.0)*x2760))+(((-1.0)*r02*x2766)));
evalcond[3]=(((x2759*x2762))+(((-1.0)*gconst88*r21*x2766))+((sj1*sj2))+(((-1.0)*cj1*x2761))+(((-1.0)*r22*x2767)));
evalcond[4]=(((x2759*x2764))+(((-1.0)*cj0*x2765))+(((-1.0)*gconst88*r01*x2766))+(((-1.0)*r02*x2767))+(((-1.0)*cj0*sj1*x2761)));
evalcond[5]=(((x2759*x2763))+(((-1.0)*r12*x2767))+(((-1.0)*x2760*x2765))+(((-1.0)*cj2*sj1*x2760))+(((-1.0)*gconst88*r11*x2766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2769=((1.0)*gconst89);
CheckValue<IkReal> x2770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2769))+(((-1.0)*gconst88*r00)))),-1);
if(!x2770.valid){
continue;
}
CheckValue<IkReal> x2771 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2769))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2770.value)))+(x2771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2772=IKsin(j4);
IkReal x2773=IKcos(j4);
IkReal x2774=((1.0)*sj0);
IkReal x2775=((1.0)*cj2);
IkReal x2776=(gconst89*r20);
IkReal x2777=(gconst89*r10);
IkReal x2778=(gconst89*r00);
IkReal x2779=(cj1*sj2);
IkReal x2780=((1.0)*x2773);
IkReal x2781=((1.0)*x2772);
IkReal x2782=(gconst88*x2772);
evalcond[0]=(((r21*x2782))+(((-1.0)*r22*x2780))+(((-1.0)*x2776*x2781)));
evalcond[1]=((((-1.0)*r12*x2780))+cj0+((r11*x2782))+(((-1.0)*x2777*x2781)));
evalcond[2]=((((-1.0)*x2778*x2781))+(((-1.0)*x2774))+((r01*x2782))+(((-1.0)*r02*x2780)));
evalcond[3]=((((-1.0)*gconst88*r21*x2780))+((sj1*sj2))+(((-1.0)*r22*x2781))+(((-1.0)*cj1*x2775))+((x2773*x2776)));
evalcond[4]=((((-1.0)*cj0*x2779))+(((-1.0)*cj0*sj1*x2775))+(((-1.0)*gconst88*r01*x2780))+((x2773*x2778))+(((-1.0)*r02*x2781)));
evalcond[5]=((((-1.0)*r12*x2781))+(((-1.0)*cj2*sj1*x2774))+(((-1.0)*gconst88*r11*x2780))+(((-1.0)*x2774*x2779))+((x2773*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2783=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2783;
j4eval[1]=IKsign(x2783);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2784=((1.0)*cj5);
IkReal x2785=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2784)));
j4eval[0]=x2785;
j4eval[1]=((IKabs(((((-1.0)*r20*x2784))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2786=cj5*cj5;
IkReal x2787=r11*r11;
IkReal x2788=(r11*sj5);
IkReal x2789=(cj5*r10);
IkReal x2790=(x2787+(r12*r12)+(((-1.0)*x2786*x2787))+((x2786*(r10*r10)))+(((-2.0)*x2788*x2789)));
j4eval[0]=x2790;
j4eval[1]=IKsign(x2790);
j4eval[2]=((IKabs(r12))+(IKabs((x2789+(((-1.0)*x2788))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2791=cj5*cj5;
IkReal x2792=r11*r11;
IkReal x2793=(cj5*r10);
IkReal x2794=(r11*sj5);
CheckValue<IkReal> x2795 = IKatan2WithCheck(IkReal((x2793+(((-1.0)*x2794)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796=IKPowWithIntegerCheck(IKsign((x2792+(r12*r12)+(((-1.0)*x2791*x2792))+(((-2.0)*x2793*x2794))+((x2791*(r10*r10))))),-1);
if(!x2796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2795.value)+(((1.5707963267949)*(x2796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2797=IKsin(j4);
IkReal x2798=IKcos(j4);
IkReal x2799=(cj5*r10);
IkReal x2800=(r01*sj5);
IkReal x2801=((1.0)*cj2);
IkReal x2802=(cj5*r00);
IkReal x2803=(cj5*r20);
IkReal x2804=((1.0)*x2798);
IkReal x2805=((1.0)*x2797);
IkReal x2806=(sj5*x2797);
evalcond[0]=((((-1.0)*x2803*x2805))+(((-1.0)*r22*x2804))+((r21*x2806)));
evalcond[1]=(((x2797*x2800))+(((-1.0)*x2802*x2805))+(((-1.0)*r02*x2804)));
evalcond[2]=((((-1.0)*r12*x2805))+(((-1.0)*r11*sj5*x2804))+((x2798*x2799)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2804))+(((-1.0)*x2799*x2805))+((r11*x2806)));
evalcond[4]=((((-1.0)*r21*sj5*x2804))+(((-1.0)*cj1*x2801))+((x2798*x2803))+((sj1*sj2))+(((-1.0)*r22*x2805)));
evalcond[5]=((((-1.0)*sj1*x2801))+(((-1.0)*x2800*x2804))+((x2798*x2802))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2807=((1.0)*cj5);
CheckValue<IkReal> x2808 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2807))+(((-1.0)*r00*sj5)))),-1);
if(!x2809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2808.value)+(((1.5707963267949)*(x2809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2810=IKsin(j4);
IkReal x2811=IKcos(j4);
IkReal x2812=(cj5*r10);
IkReal x2813=(r01*sj5);
IkReal x2814=((1.0)*cj2);
IkReal x2815=(cj5*r00);
IkReal x2816=(cj5*r20);
IkReal x2817=((1.0)*x2811);
IkReal x2818=((1.0)*x2810);
IkReal x2819=(sj5*x2810);
evalcond[0]=(((r21*x2819))+(((-1.0)*r22*x2817))+(((-1.0)*x2816*x2818)));
evalcond[1]=(((x2810*x2813))+(((-1.0)*r02*x2817))+(((-1.0)*x2815*x2818)));
evalcond[2]=((((-1.0)*r12*x2818))+(((-1.0)*r11*sj5*x2817))+((x2811*x2812)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2817))+(((-1.0)*x2812*x2818))+((r11*x2819)));
evalcond[4]=((((-1.0)*cj1*x2814))+((sj1*sj2))+(((-1.0)*r22*x2818))+(((-1.0)*r21*sj5*x2817))+((x2811*x2816)));
evalcond[5]=((((-1.0)*r02*x2818))+(((-1.0)*x2813*x2817))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2814))+((x2811*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2820.value)))+(x2821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2822=IKsin(j4);
IkReal x2823=IKcos(j4);
IkReal x2824=(cj5*r10);
IkReal x2825=(r01*sj5);
IkReal x2826=((1.0)*cj2);
IkReal x2827=(cj5*r00);
IkReal x2828=(cj5*r20);
IkReal x2829=((1.0)*x2823);
IkReal x2830=((1.0)*x2822);
IkReal x2831=(sj5*x2822);
evalcond[0]=((((-1.0)*r22*x2829))+(((-1.0)*x2828*x2830))+((r21*x2831)));
evalcond[1]=(((x2822*x2825))+(((-1.0)*r02*x2829))+(((-1.0)*x2827*x2830)));
evalcond[2]=(((x2823*x2824))+(((-1.0)*r11*sj5*x2829))+(((-1.0)*r12*x2830)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2829))+(((-1.0)*x2824*x2830))+((r11*x2831)));
evalcond[4]=((((-1.0)*cj1*x2826))+((sj1*sj2))+((x2823*x2828))+(((-1.0)*r22*x2830))+(((-1.0)*r21*sj5*x2829)));
evalcond[5]=((((-1.0)*sj1*x2826))+(((-1.0)*cj1*sj2))+((x2823*x2827))+(((-1.0)*x2825*x2829))+(((-1.0)*r02*x2830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2832=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2832;
j4eval[1]=IKsign(x2832);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2833=((1.0)*cj5);
IkReal x2834=((((-1.0)*r21*x2833))+(((-1.0)*r20*sj5)));
j4eval[0]=x2834;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2833))+((r01*sj5))))));
j4eval[2]=IKsign(x2834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2835=cj5*cj5;
IkReal x2836=r11*r11;
IkReal x2837=(cj5*r10);
IkReal x2838=(r11*sj5);
IkReal x2839=((((-1.0)*x2836))+(((-1.0)*(r12*r12)))+((x2835*x2836))+(((-1.0)*x2835*(r10*r10)))+(((2.0)*x2837*x2838)));
j4eval[0]=x2839;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2838))+x2837))));
j4eval[2]=IKsign(x2839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2840=cj5*cj5;
IkReal x2841=r11*r11;
IkReal x2842=(cj5*r10);
IkReal x2843=(r11*sj5);
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal(((((-1.0)*x2843))+x2842)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
CheckValue<IkReal> x2845=IKPowWithIntegerCheck(IKsign((((x2840*x2841))+(((-1.0)*(r12*r12)))+(((-1.0)*x2840*(r10*r10)))+(((-1.0)*x2841))+(((2.0)*x2842*x2843)))),-1);
if(!x2845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2844.value)+(((1.5707963267949)*(x2845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2846=IKsin(j4);
IkReal x2847=IKcos(j4);
IkReal x2848=(cj5*r10);
IkReal x2849=(r01*sj5);
IkReal x2850=(cj5*r00);
IkReal x2851=(cj5*r20);
IkReal x2852=((1.0)*x2847);
IkReal x2853=((1.0)*x2846);
IkReal x2854=(sj5*x2846);
evalcond[0]=(((r21*x2854))+(((-1.0)*x2851*x2853))+(((-1.0)*r22*x2852)));
evalcond[1]=(((x2846*x2849))+(((-1.0)*x2850*x2853))+(((-1.0)*r02*x2852)));
evalcond[2]=((((-1.0)*r11*sj5*x2852))+((x2847*x2848))+(((-1.0)*r12*x2853)));
evalcond[3]=((-1.0)+((r11*x2854))+(((-1.0)*r12*x2852))+(((-1.0)*x2848*x2853)));
evalcond[4]=(((cj2*sj1))+((x2847*x2850))+((cj1*sj2))+(((-1.0)*x2849*x2852))+(((-1.0)*r02*x2853)));
evalcond[5]=(((x2847*x2851))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2853))+(((-1.0)*r21*sj5*x2852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2855=((1.0)*cj5);
CheckValue<IkReal> x2856 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2856.valid){
continue;
}
CheckValue<IkReal> x2857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2855))+(((-1.0)*r20*sj5)))),-1);
if(!x2857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2856.value)+(((1.5707963267949)*(x2857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2858=IKsin(j4);
IkReal x2859=IKcos(j4);
IkReal x2860=(cj5*r10);
IkReal x2861=(r01*sj5);
IkReal x2862=(cj5*r00);
IkReal x2863=(cj5*r20);
IkReal x2864=((1.0)*x2859);
IkReal x2865=((1.0)*x2858);
IkReal x2866=(sj5*x2858);
evalcond[0]=(((r21*x2866))+(((-1.0)*r22*x2864))+(((-1.0)*x2863*x2865)));
evalcond[1]=((((-1.0)*r02*x2864))+(((-1.0)*x2862*x2865))+((x2858*x2861)));
evalcond[2]=((((-1.0)*r12*x2865))+(((-1.0)*r11*sj5*x2864))+((x2859*x2860)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2864))+(((-1.0)*x2860*x2865))+((r11*x2866)));
evalcond[4]=((((-1.0)*r02*x2865))+((cj2*sj1))+(((-1.0)*x2861*x2864))+((cj1*sj2))+((x2859*x2862)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2865))+(((-1.0)*r21*sj5*x2864))+((x2859*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2867.value)+(((1.5707963267949)*(x2868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2869=IKsin(j4);
IkReal x2870=IKcos(j4);
IkReal x2871=(cj5*r10);
IkReal x2872=(r01*sj5);
IkReal x2873=(cj5*r00);
IkReal x2874=(cj5*r20);
IkReal x2875=((1.0)*x2870);
IkReal x2876=((1.0)*x2869);
IkReal x2877=(sj5*x2869);
evalcond[0]=((((-1.0)*r22*x2875))+((r21*x2877))+(((-1.0)*x2874*x2876)));
evalcond[1]=((((-1.0)*r02*x2875))+((x2869*x2872))+(((-1.0)*x2873*x2876)));
evalcond[2]=(((x2870*x2871))+(((-1.0)*r11*sj5*x2875))+(((-1.0)*r12*x2876)));
evalcond[3]=((-1.0)+(((-1.0)*x2871*x2876))+((r11*x2877))+(((-1.0)*r12*x2875)));
evalcond[4]=(((cj2*sj1))+((x2870*x2873))+(((-1.0)*r02*x2876))+((cj1*sj2))+(((-1.0)*x2872*x2875)));
evalcond[5]=(((x2870*x2874))+(((-1.0)*r22*x2876))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2878=((-1.0)*r00);
IkReal x2880 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2880)==0){
continue;
}
IkReal x2879=pow(x2880,-0.5);
CheckValue<IkReal> x2881 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2878),IKFAST_ATAN2_MAGTHRESH);
if(!x2881.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2881.value));
IkReal gconst91=(r01*x2879);
IkReal gconst92=(x2878*x2879);
CheckValue<IkReal> x2882 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2882.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2882.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2883=((-1.0)*r00);
IkReal x2884=x2879;
CheckValue<IkReal> x2886 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2883),IKFAST_ATAN2_MAGTHRESH);
if(!x2886.valid){
continue;
}
IkReal x2885=((-1.0)*(x2886.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2885;
IkReal gconst90=x2885;
IkReal gconst91=(r01*x2884);
IkReal gconst92=(x2883*x2884);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2887=((1.0)*sj0);
IkReal x2888=((1.0)*cj0);
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2889.valid){
continue;
}
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2888))+(((-1.0)*r12*x2887)))),IkReal(((((-1.0)*gconst91*r11*x2887))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2889.value)))+(x2890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2891=IKsin(j4);
IkReal x2892=IKcos(j4);
IkReal x2893=((1.0)*cj2);
IkReal x2894=(gconst92*r00);
IkReal x2895=(gconst92*r20);
IkReal x2896=((1.0)*sj0);
IkReal x2897=(gconst92*r10);
IkReal x2898=(cj1*sj2);
IkReal x2899=((1.0)*x2892);
IkReal x2900=(gconst91*x2891);
IkReal x2901=((1.0)*x2891);
evalcond[0]=((((-1.0)*r22*x2899))+((r21*x2900))+(((-1.0)*x2895*x2901)));
evalcond[1]=(cj0+(((-1.0)*x2897*x2901))+((r11*x2900))+(((-1.0)*r12*x2899)));
evalcond[2]=((((-1.0)*r02*x2899))+(((-1.0)*x2894*x2901))+((r01*x2900))+(((-1.0)*x2896)));
evalcond[3]=((((-1.0)*gconst91*r21*x2899))+((x2892*x2895))+((sj1*sj2))+(((-1.0)*cj1*x2893))+(((-1.0)*r22*x2901)));
evalcond[4]=((((-1.0)*r02*x2901))+((x2892*x2894))+(((-1.0)*cj0*sj1*x2893))+(((-1.0)*cj0*x2898))+(((-1.0)*gconst91*r01*x2899)));
evalcond[5]=((((-1.0)*sj0*sj1*x2893))+(((-1.0)*gconst91*r11*x2899))+((x2892*x2897))+(((-1.0)*x2896*x2898))+(((-1.0)*r12*x2901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2902=((1.0)*gconst92);
CheckValue<IkReal> x2903 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2903.valid){
continue;
}
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2902)))),-1);
if(!x2904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2903.value)+(((1.5707963267949)*(x2904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2905=IKsin(j4);
IkReal x2906=IKcos(j4);
IkReal x2907=((1.0)*cj2);
IkReal x2908=(gconst92*r00);
IkReal x2909=(gconst92*r20);
IkReal x2910=((1.0)*sj0);
IkReal x2911=(gconst92*r10);
IkReal x2912=(cj1*sj2);
IkReal x2913=((1.0)*x2906);
IkReal x2914=(gconst91*x2905);
IkReal x2915=((1.0)*x2905);
evalcond[0]=(((r21*x2914))+(((-1.0)*x2909*x2915))+(((-1.0)*r22*x2913)));
evalcond[1]=(((r11*x2914))+cj0+(((-1.0)*r12*x2913))+(((-1.0)*x2911*x2915)));
evalcond[2]=(((r01*x2914))+(((-1.0)*x2908*x2915))+(((-1.0)*r02*x2913))+(((-1.0)*x2910)));
evalcond[3]=(((x2906*x2909))+((sj1*sj2))+(((-1.0)*cj1*x2907))+(((-1.0)*gconst91*r21*x2913))+(((-1.0)*r22*x2915)));
evalcond[4]=((((-1.0)*gconst91*r01*x2913))+((x2906*x2908))+(((-1.0)*cj0*sj1*x2907))+(((-1.0)*r02*x2915))+(((-1.0)*cj0*x2912)));
evalcond[5]=((((-1.0)*gconst91*r11*x2913))+(((-1.0)*r12*x2915))+(((-1.0)*sj0*sj1*x2907))+(((-1.0)*x2910*x2912))+((x2906*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2916=((-1.0)*r01);
IkReal x2918 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2918)==0){
continue;
}
IkReal x2917=pow(x2918,-0.5);
CheckValue<IkReal> x2919 = IKatan2WithCheck(IkReal(x2916),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2919.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2919.value))));
IkReal gconst94=(x2916*x2917);
IkReal gconst95=((1.0)*r00*x2917);
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2920.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2921=((-1.0)*r01);
CheckValue<IkReal> x2924 = IKatan2WithCheck(IkReal(x2921),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
IkReal x2922=((1.0)*(x2924.value));
IkReal x2923=x2917;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2922)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2922)));
IkReal gconst94=(x2921*x2923);
IkReal gconst95=((1.0)*r00*x2923);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2925=((-1.0)*r01);
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(x2925),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
IkReal x2926=((1.0)*(x2928.value));
IkReal x2927=x2917;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2926)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2926)));
IkReal gconst94=(x2925*x2927);
IkReal gconst95=((1.0)*r00*x2927);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2929=((-1.0)*r01);
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(x2929),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
IkReal x2930=((1.0)*(x2932.value));
IkReal x2931=x2917;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2930)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2930)));
IkReal gconst94=(x2929*x2931);
IkReal gconst95=((1.0)*r00*x2931);
IkReal x2933=r02*r02;
IkReal x2934=(r12*sj0);
IkReal x2935=((1.0)*cj0);
IkReal x2936=x2917;
j4eval[0]=((IKabs(((((-1.0)*x2934))+(((-1.0)*r02*x2935)))))+(IKabs((((r02*x2934*x2936))+(((-1.0)*x2935*x2936))+((cj0*x2933*x2936))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2937=((1.0)*sj0);
IkReal x2938=((1.0)*cj0);
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2937))+(((-1.0)*r02*x2938)))),IkReal(((((-1.0)*gconst94*r11*x2937))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2938))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
CheckValue<IkReal> x2940=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2939.value)+(((1.5707963267949)*(x2940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2941=IKsin(j4);
IkReal x2942=IKcos(j4);
IkReal x2943=(gconst94*r11);
IkReal x2944=((1.0)*cj2);
IkReal x2945=(gconst94*r21);
IkReal x2946=((1.0)*sj0);
IkReal x2947=(gconst94*r01);
IkReal x2948=(cj1*sj2);
IkReal x2949=((1.0)*x2942);
IkReal x2950=(gconst95*x2942);
IkReal x2951=((1.0)*x2941);
IkReal x2952=(gconst95*x2951);
evalcond[0]=((((-1.0)*r20*x2952))+((x2941*x2945))+(((-1.0)*r22*x2949)));
evalcond[1]=((((-1.0)*r12*x2949))+(((-1.0)*r10*x2952))+cj0+((x2941*x2943)));
evalcond[2]=((((-1.0)*r02*x2949))+((x2941*x2947))+(((-1.0)*x2946))+(((-1.0)*r00*x2952)));
evalcond[3]=(((sj1*sj2))+((r20*x2950))+(((-1.0)*cj1*x2944))+(((-1.0)*r22*x2951))+(((-1.0)*x2945*x2949)));
evalcond[4]=((((-1.0)*r02*x2951))+(((-1.0)*cj0*x2948))+((r00*x2950))+(((-1.0)*x2947*x2949))+(((-1.0)*cj0*sj1*x2944)));
evalcond[5]=(((r10*x2950))+(((-1.0)*x2943*x2949))+(((-1.0)*x2946*x2948))+(((-1.0)*r12*x2951))+(((-1.0)*sj0*sj1*x2944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2953=((1.0)*gconst95);
CheckValue<IkReal> x2954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2953)))),-1);
if(!x2954.valid){
continue;
}
CheckValue<IkReal> x2955 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2954.value)))+(x2955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2956=IKsin(j4);
IkReal x2957=IKcos(j4);
IkReal x2958=(gconst94*r11);
IkReal x2959=((1.0)*cj2);
IkReal x2960=(gconst94*r21);
IkReal x2961=((1.0)*sj0);
IkReal x2962=(gconst94*r01);
IkReal x2963=(cj1*sj2);
IkReal x2964=((1.0)*x2957);
IkReal x2965=(gconst95*x2957);
IkReal x2966=((1.0)*x2956);
IkReal x2967=(gconst95*x2966);
evalcond[0]=(((x2956*x2960))+(((-1.0)*r20*x2967))+(((-1.0)*r22*x2964)));
evalcond[1]=(cj0+(((-1.0)*r10*x2967))+((x2956*x2958))+(((-1.0)*r12*x2964)));
evalcond[2]=(((x2956*x2962))+(((-1.0)*r00*x2967))+(((-1.0)*r02*x2964))+(((-1.0)*x2961)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2966))+((r20*x2965))+(((-1.0)*x2960*x2964))+(((-1.0)*cj1*x2959)));
evalcond[4]=((((-1.0)*cj0*sj1*x2959))+(((-1.0)*r02*x2966))+(((-1.0)*cj0*x2963))+((r00*x2965))+(((-1.0)*x2962*x2964)));
evalcond[5]=((((-1.0)*sj0*sj1*x2959))+((r10*x2965))+(((-1.0)*x2958*x2964))+(((-1.0)*x2961*x2963))+(((-1.0)*r12*x2966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2968=((1.0)*gconst95);
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2968)))),-1);
if(!x2969.valid){
continue;
}
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2968))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2969.value)))+(x2970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2971=IKsin(j4);
IkReal x2972=IKcos(j4);
IkReal x2973=(gconst94*r11);
IkReal x2974=((1.0)*cj2);
IkReal x2975=(gconst94*r21);
IkReal x2976=((1.0)*sj0);
IkReal x2977=(gconst94*r01);
IkReal x2978=(cj1*sj2);
IkReal x2979=((1.0)*x2972);
IkReal x2980=(gconst95*x2972);
IkReal x2981=((1.0)*x2971);
IkReal x2982=(gconst95*x2981);
evalcond[0]=(((x2971*x2975))+(((-1.0)*r20*x2982))+(((-1.0)*r22*x2979)));
evalcond[1]=(((x2971*x2973))+cj0+(((-1.0)*r10*x2982))+(((-1.0)*r12*x2979)));
evalcond[2]=(((x2971*x2977))+(((-1.0)*r00*x2982))+(((-1.0)*r02*x2979))+(((-1.0)*x2976)));
evalcond[3]=((((-1.0)*x2975*x2979))+((sj1*sj2))+((r20*x2980))+(((-1.0)*r22*x2981))+(((-1.0)*cj1*x2974)));
evalcond[4]=((((-1.0)*cj0*x2978))+((r00*x2980))+(((-1.0)*x2977*x2979))+(((-1.0)*r02*x2981))+(((-1.0)*cj0*sj1*x2974)));
evalcond[5]=((((-1.0)*r12*x2981))+(((-1.0)*x2976*x2978))+(((-1.0)*sj0*sj1*x2974))+((r10*x2980))+(((-1.0)*x2973*x2979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2983=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2983;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2984=((1.0)*cj5);
IkReal x2985=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2984)));
j4eval[0]=x2985;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2984))))));
j4eval[2]=IKsign(x2985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2986=cj5*cj5;
IkReal x2987=r01*r01;
IkReal x2988=(r01*sj5);
IkReal x2989=(cj5*r00);
IkReal x2990=((((2.0)*x2988*x2989))+((x2986*x2987))+(((-1.0)*(r02*r02)))+(((-1.0)*x2987))+(((-1.0)*x2986*(r00*r00))));
j4eval[0]=x2990;
j4eval[1]=IKsign(x2990);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2988))+x2989))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2991=cj5*cj5;
IkReal x2992=r01*r01;
IkReal x2993=(r01*sj5);
IkReal x2994=(cj5*r00);
CheckValue<IkReal> x2995 = IKatan2WithCheck(IkReal(((((-1.0)*x2993))+x2994)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2995.valid){
continue;
}
CheckValue<IkReal> x2996=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2991*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2991*x2992))+(((-1.0)*x2992))+(((2.0)*x2993*x2994)))),-1);
if(!x2996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2995.value)+(((1.5707963267949)*(x2996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2997=IKsin(j4);
IkReal x2998=IKcos(j4);
IkReal x2999=(cj5*r10);
IkReal x3000=(r01*sj5);
IkReal x3001=((1.0)*cj2);
IkReal x3002=(cj5*r00);
IkReal x3003=(cj5*r20);
IkReal x3004=((1.0)*x2998);
IkReal x3005=((1.0)*x2997);
IkReal x3006=(sj5*x2997);
evalcond[0]=((((-1.0)*r22*x3004))+(((-1.0)*x3003*x3005))+((r21*x3006)));
evalcond[1]=((((-1.0)*r12*x3004))+((r11*x3006))+(((-1.0)*x2999*x3005)));
evalcond[2]=((((-1.0)*r02*x3005))+((x2998*x3002))+(((-1.0)*x3000*x3004)));
evalcond[3]=((-1.0)+(((-1.0)*x3002*x3005))+(((-1.0)*r02*x3004))+((x2997*x3000)));
evalcond[4]=((((-1.0)*r22*x3005))+(((-1.0)*r21*sj5*x3004))+((x2998*x3003))+((sj1*sj2))+(((-1.0)*cj1*x3001)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3004))+((x2998*x2999))+(((-1.0)*r12*x3005))+(((-1.0)*sj1*x3001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3007=((1.0)*cj5);
CheckValue<IkReal> x3008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3007)))),-1);
if(!x3008.valid){
continue;
}
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3008.value)))+(x3009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3010=IKsin(j4);
IkReal x3011=IKcos(j4);
IkReal x3012=(cj5*r10);
IkReal x3013=(r01*sj5);
IkReal x3014=((1.0)*cj2);
IkReal x3015=(cj5*r00);
IkReal x3016=(cj5*r20);
IkReal x3017=((1.0)*x3011);
IkReal x3018=((1.0)*x3010);
IkReal x3019=(sj5*x3010);
evalcond[0]=((((-1.0)*r22*x3017))+((r21*x3019))+(((-1.0)*x3016*x3018)));
evalcond[1]=((((-1.0)*r12*x3017))+((r11*x3019))+(((-1.0)*x3012*x3018)));
evalcond[2]=(((x3011*x3015))+(((-1.0)*r02*x3018))+(((-1.0)*x3013*x3017)));
evalcond[3]=((-1.0)+((x3010*x3013))+(((-1.0)*r02*x3017))+(((-1.0)*x3015*x3018)));
evalcond[4]=(((x3011*x3016))+(((-1.0)*r22*x3018))+(((-1.0)*r21*sj5*x3017))+((sj1*sj2))+(((-1.0)*cj1*x3014)));
evalcond[5]=(((x3011*x3012))+(((-1.0)*r11*sj5*x3017))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3018))+(((-1.0)*sj1*x3014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3020=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3020.valid){
continue;
}
CheckValue<IkReal> x3021 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3020.value)))+(x3021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3022=IKsin(j4);
IkReal x3023=IKcos(j4);
IkReal x3024=(cj5*r10);
IkReal x3025=(r01*sj5);
IkReal x3026=((1.0)*cj2);
IkReal x3027=(cj5*r00);
IkReal x3028=(cj5*r20);
IkReal x3029=((1.0)*x3023);
IkReal x3030=((1.0)*x3022);
IkReal x3031=(sj5*x3022);
evalcond[0]=((((-1.0)*x3028*x3030))+((r21*x3031))+(((-1.0)*r22*x3029)));
evalcond[1]=((((-1.0)*r12*x3029))+(((-1.0)*x3024*x3030))+((r11*x3031)));
evalcond[2]=((((-1.0)*x3025*x3029))+(((-1.0)*r02*x3030))+((x3023*x3027)));
evalcond[3]=((-1.0)+(((-1.0)*x3027*x3030))+(((-1.0)*r02*x3029))+((x3022*x3025)));
evalcond[4]=((((-1.0)*cj1*x3026))+((sj1*sj2))+(((-1.0)*r22*x3030))+((x3023*x3028))+(((-1.0)*r21*sj5*x3029)));
evalcond[5]=((((-1.0)*r11*sj5*x3029))+(((-1.0)*sj1*x3026))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3030))+((x3023*x3024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3032=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3032;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3033=((1.0)*cj5);
IkReal x3034=((((-1.0)*r21*x3033))+(((-1.0)*r20*sj5)));
j4eval[0]=x3034;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3033))))));
j4eval[2]=IKsign(x3034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3035=cj5*cj5;
IkReal x3036=r01*r01;
IkReal x3037=(cj5*r00);
IkReal x3038=(r01*sj5);
IkReal x3039=((((-1.0)*x3035*x3036))+(((-2.0)*x3037*x3038))+x3036+((x3035*(r00*r00)))+(r02*r02));
j4eval[0]=x3039;
j4eval[1]=((IKabs(r02))+(IKabs((x3037+(((-1.0)*x3038))))));
j4eval[2]=IKsign(x3039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3040=cj5*cj5;
IkReal x3041=r01*r01;
IkReal x3042=(r01*sj5);
IkReal x3043=(cj5*r00);
CheckValue<IkReal> x3044=IKPowWithIntegerCheck(IKsign((x3041+(((-1.0)*x3040*x3041))+(r02*r02)+((x3040*(r00*r00)))+(((-2.0)*x3042*x3043)))),-1);
if(!x3044.valid){
continue;
}
CheckValue<IkReal> x3045 = IKatan2WithCheck(IkReal((x3043+(((-1.0)*x3042)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3044.value)))+(x3045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3046=IKsin(j4);
IkReal x3047=IKcos(j4);
IkReal x3048=(cj5*r10);
IkReal x3049=(r01*sj5);
IkReal x3050=(cj5*r00);
IkReal x3051=(cj5*r20);
IkReal x3052=((1.0)*x3047);
IkReal x3053=((1.0)*x3046);
IkReal x3054=(sj5*x3046);
evalcond[0]=((((-1.0)*x3051*x3053))+((r21*x3054))+(((-1.0)*r22*x3052)));
evalcond[1]=(((r11*x3054))+(((-1.0)*x3048*x3053))+(((-1.0)*r12*x3052)));
evalcond[2]=((((-1.0)*r02*x3053))+((x3047*x3050))+(((-1.0)*x3049*x3052)));
evalcond[3]=((1.0)+((x3046*x3049))+(((-1.0)*r02*x3052))+(((-1.0)*x3050*x3053)));
evalcond[4]=(((cj2*sj1))+((x3047*x3048))+((cj1*sj2))+(((-1.0)*r12*x3053))+(((-1.0)*r11*sj5*x3052)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3052))+((x3047*x3051))+(((-1.0)*r22*x3053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3055=((1.0)*cj5);
CheckValue<IkReal> x3056 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3056.valid){
continue;
}
CheckValue<IkReal> x3057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3055))+(((-1.0)*r20*sj5)))),-1);
if(!x3057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3056.value)+(((1.5707963267949)*(x3057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3058=IKsin(j4);
IkReal x3059=IKcos(j4);
IkReal x3060=(cj5*r10);
IkReal x3061=(r01*sj5);
IkReal x3062=(cj5*r00);
IkReal x3063=(cj5*r20);
IkReal x3064=((1.0)*x3059);
IkReal x3065=((1.0)*x3058);
IkReal x3066=(sj5*x3058);
evalcond[0]=((((-1.0)*r22*x3064))+(((-1.0)*x3063*x3065))+((r21*x3066)));
evalcond[1]=((((-1.0)*x3060*x3065))+(((-1.0)*r12*x3064))+((r11*x3066)));
evalcond[2]=((((-1.0)*x3061*x3064))+(((-1.0)*r02*x3065))+((x3059*x3062)));
evalcond[3]=((1.0)+((x3058*x3061))+(((-1.0)*x3062*x3065))+(((-1.0)*r02*x3064)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3064))+((cj1*sj2))+(((-1.0)*r12*x3065))+((x3059*x3060)));
evalcond[5]=((((-1.0)*r21*sj5*x3064))+(((-1.0)*r22*x3065))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3059*x3063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3067 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3067.valid){
continue;
}
CheckValue<IkReal> x3068=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3067.value)+(((1.5707963267949)*(x3068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3069=IKsin(j4);
IkReal x3070=IKcos(j4);
IkReal x3071=(cj5*r10);
IkReal x3072=(r01*sj5);
IkReal x3073=(cj5*r00);
IkReal x3074=(cj5*r20);
IkReal x3075=((1.0)*x3070);
IkReal x3076=((1.0)*x3069);
IkReal x3077=(sj5*x3069);
evalcond[0]=((((-1.0)*r22*x3075))+(((-1.0)*x3074*x3076))+((r21*x3077)));
evalcond[1]=((((-1.0)*r12*x3075))+(((-1.0)*x3071*x3076))+((r11*x3077)));
evalcond[2]=((((-1.0)*x3072*x3075))+(((-1.0)*r02*x3076))+((x3070*x3073)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3075))+(((-1.0)*x3073*x3076))+((x3069*x3072)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3075))+(((-1.0)*r12*x3076))+((x3070*x3071)));
evalcond[5]=((((-1.0)*r21*sj5*x3075))+(((-1.0)*r22*x3076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3070*x3074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3078=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3078);
rxp1_1=(px*r21);
rxp1_2=(r11*x3078);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3079=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3079);
rxp1_1=(px*r21);
rxp1_2=(r11*x3079);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3080=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3080);
rxp1_1=(px*r21);
rxp1_2=(r11*x3080);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3083=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3083.valid){
continue;
}
IkReal x3081=x3083.value;
IkReal x3082=(sj0*x3081);
cj4array[0]=(((cj2*sj1*x3082))+((cj1*sj2*x3082)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3084=IKsin(j4);
IkReal x3085=IKcos(j4);
IkReal x3086=(cj5*r20);
IkReal x3087=(r21*sj5);
IkReal x3088=((1.0)*x3084);
IkReal x3089=((1.0)*x3085);
evalcond[0]=((-1.0)*r02*x3084);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3089)));
evalcond[2]=(((x3084*x3087))+(((-1.0)*x3086*x3088)));
evalcond[3]=(((r11*sj5*x3084))+(((-1.0)*cj5*r10*x3088)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3085*x3086))+(((-1.0)*x3087*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3091=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3091.valid){
continue;
}
IkReal x3090=x3091.value;
cj4array[0]=(((cj1*cj2*x3090))+(((-1.0)*sj1*sj2*x3090)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3092=IKsin(j4);
IkReal x3093=IKcos(j4);
IkReal x3094=(r11*sj5);
IkReal x3095=((1.0)*sj0);
IkReal x3096=((1.0)*x3093);
IkReal x3097=((1.0)*cj5*x3092);
evalcond[0]=((-1.0)*r02*x3092);
evalcond[1]=((((-1.0)*r02*x3096))+(((-1.0)*x3095)));
evalcond[2]=(((r21*sj5*x3092))+(((-1.0)*r20*x3097)));
evalcond[3]=(((x3092*x3094))+(((-1.0)*r10*x3097)));
evalcond[4]=(((cj5*r10*x3093))+(((-1.0)*cj1*sj2*x3095))+(((-1.0)*x3094*x3096))+(((-1.0)*cj2*sj1*x3095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3098=IKPowWithIntegerCheck(r02,-1);
if(!x3098.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3098.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3099=IKsin(j4);
IkReal x3100=IKcos(j4);
IkReal x3101=((1.0)*sj0);
IkReal x3102=(cj5*x3100);
IkReal x3103=(sj5*x3099);
IkReal x3104=((1.0)*sj5*x3100);
IkReal x3105=((1.0)*cj5*x3099);
evalcond[0]=((-1.0)*r02*x3099);
evalcond[1]=((((-1.0)*r20*x3105))+((r21*x3103)));
evalcond[2]=(((r11*x3103))+(((-1.0)*r10*x3105)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3102))+(((-1.0)*r21*x3104)));
evalcond[4]=((((-1.0)*cj1*sj2*x3101))+(((-1.0)*cj2*sj1*x3101))+(((-1.0)*r11*x3104))+((r10*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3106=((1.0)*sj0);
IkReal x3107=((1.0)*cj0);
CheckValue<IkReal> x3108 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3106))+(((-1.0)*r02*x3107)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3107))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3108.valid){
continue;
}
CheckValue<IkReal> x3109=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3108.value)+(((1.5707963267949)*(x3109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3110=IKsin(j4);
IkReal x3111=IKcos(j4);
IkReal x3112=(cj5*r10);
IkReal x3113=(r01*sj5);
IkReal x3114=((1.0)*cj2);
IkReal x3115=(cj5*r00);
IkReal x3116=((1.0)*sj0);
IkReal x3117=(cj5*r20);
IkReal x3118=(cj1*sj2);
IkReal x3119=((1.0)*x3111);
IkReal x3120=((1.0)*x3110);
IkReal x3121=(sj5*x3110);
evalcond[0]=((((-1.0)*x3117*x3120))+((r21*x3121))+(((-1.0)*r22*x3119)));
evalcond[1]=(cj0+(((-1.0)*r12*x3119))+(((-1.0)*x3112*x3120))+((r11*x3121)));
evalcond[2]=((((-1.0)*r02*x3119))+(((-1.0)*x3116))+(((-1.0)*x3115*x3120))+((x3110*x3113)));
evalcond[3]=(((x3111*x3117))+(((-1.0)*cj1*x3114))+((sj1*sj2))+(((-1.0)*r22*x3120))+(((-1.0)*r21*sj5*x3119)));
evalcond[4]=((((-1.0)*x3113*x3119))+(((-1.0)*cj0*x3118))+(((-1.0)*r02*x3120))+((x3111*x3115))+(((-1.0)*cj0*sj1*x3114)));
evalcond[5]=(((x3111*x3112))+(((-1.0)*sj0*sj1*x3114))+(((-1.0)*r11*sj5*x3119))+(((-1.0)*r12*x3120))+(((-1.0)*x3116*x3118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3122=((1.0)*cj5);
CheckValue<IkReal> x3123 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3122))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3123.valid){
continue;
}
CheckValue<IkReal> x3124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3122)))),-1);
if(!x3124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3123.value)+(((1.5707963267949)*(x3124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3125=IKsin(j4);
IkReal x3126=IKcos(j4);
IkReal x3127=(cj5*r10);
IkReal x3128=(r01*sj5);
IkReal x3129=((1.0)*cj2);
IkReal x3130=(cj5*r00);
IkReal x3131=((1.0)*sj0);
IkReal x3132=(cj5*r20);
IkReal x3133=(cj1*sj2);
IkReal x3134=((1.0)*x3126);
IkReal x3135=((1.0)*x3125);
IkReal x3136=(sj5*x3125);
evalcond[0]=((((-1.0)*x3132*x3135))+((r21*x3136))+(((-1.0)*r22*x3134)));
evalcond[1]=(cj0+(((-1.0)*r12*x3134))+((r11*x3136))+(((-1.0)*x3127*x3135)));
evalcond[2]=((((-1.0)*x3130*x3135))+(((-1.0)*r02*x3134))+((x3125*x3128))+(((-1.0)*x3131)));
evalcond[3]=((((-1.0)*r21*sj5*x3134))+((sj1*sj2))+((x3126*x3132))+(((-1.0)*cj1*x3129))+(((-1.0)*r22*x3135)));
evalcond[4]=((((-1.0)*cj0*sj1*x3129))+(((-1.0)*r02*x3135))+(((-1.0)*cj0*x3133))+((x3126*x3130))+(((-1.0)*x3128*x3134)));
evalcond[5]=((((-1.0)*x3131*x3133))+((x3126*x3127))+(((-1.0)*r12*x3135))+(((-1.0)*r11*sj5*x3134))+(((-1.0)*sj0*sj1*x3129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3137=((1.0)*cj5);
CheckValue<IkReal> x3138 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3138.valid){
continue;
}
CheckValue<IkReal> x3139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3137)))),-1);
if(!x3139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3138.value)+(((1.5707963267949)*(x3139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3140=IKsin(j4);
IkReal x3141=IKcos(j4);
IkReal x3142=(cj5*r10);
IkReal x3143=(r01*sj5);
IkReal x3144=((1.0)*cj2);
IkReal x3145=(cj5*r00);
IkReal x3146=((1.0)*sj0);
IkReal x3147=(cj5*r20);
IkReal x3148=(cj1*sj2);
IkReal x3149=((1.0)*x3141);
IkReal x3150=((1.0)*x3140);
IkReal x3151=(sj5*x3140);
evalcond[0]=((((-1.0)*r22*x3149))+((r21*x3151))+(((-1.0)*x3147*x3150)));
evalcond[1]=((((-1.0)*r12*x3149))+cj0+((r11*x3151))+(((-1.0)*x3142*x3150)));
evalcond[2]=((((-1.0)*x3146))+(((-1.0)*x3145*x3150))+(((-1.0)*r02*x3149))+((x3140*x3143)));
evalcond[3]=((((-1.0)*cj1*x3144))+(((-1.0)*r22*x3150))+((sj1*sj2))+(((-1.0)*r21*sj5*x3149))+((x3141*x3147)));
evalcond[4]=((((-1.0)*x3143*x3149))+(((-1.0)*cj0*x3148))+(((-1.0)*cj0*sj1*x3144))+(((-1.0)*r02*x3150))+((x3141*x3145)));
evalcond[5]=((((-1.0)*x3146*x3148))+(((-1.0)*sj0*sj1*x3144))+(((-1.0)*r12*x3150))+((x3141*x3142))+(((-1.0)*r11*sj5*x3149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3152=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3152;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3152);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3153=r21*r21;
IkReal x3154=cj5*cj5;
IkReal x3155=(sj1*sj2);
IkReal x3156=(r21*sj5);
IkReal x3157=(cj5*r20);
IkReal x3158=(cj1*cj2);
IkReal x3159=((((2.0)*x3156*x3157))+(((-1.0)*x3154*(r20*r20)))+(((-1.0)*x3153))+((x3153*x3154))+(((-1.0)*(r22*r22))));
j4eval[0]=x3159;
j4eval[1]=((IKabs(((((-1.0)*r22*x3158))+((r22*x3155)))))+(IKabs((((x3155*x3156))+((x3157*x3158))+(((-1.0)*x3155*x3157))+(((-1.0)*x3156*x3158))))));
j4eval[2]=IKsign(x3159);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.50968488714305)*py))+(((-0.428523932076494)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.50968488714305)*px))+(((0.428523932076494)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.50968488714305)*py))+(((-0.428523932076494)*px))))+IKsqr(((((1.50968488714305)*px))+(((0.428523932076494)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.50968488714305)*py))+(((-0.428523932076494)*px))), ((((1.50968488714305)*px))+(((0.428523932076494)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3160=IKcos(j0);
IkReal x3161=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.613)*x3160))+(((-0.174)*x3161)));
evalcond[1]=((((-1.0)*py))+(((0.613)*x3161))+(((0.174)*x3160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3162=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3162;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3163=((1.0)*cj5);
IkReal x3164=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3163)));
j4eval[0]=x3164;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3163)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3165=((1.0)*cj5);
IkReal x3166=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3165)));
j4eval[0]=x3166;
j4eval[1]=IKsign(x3166);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3165)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3167=((1.0)*cj5);
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3167)))),-1);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3167)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3168.value)))+(x3169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3170=IKcos(j4);
IkReal x3171=IKsin(j4);
IkReal x3172=((1.0)*sj0);
IkReal x3173=(cj5*r00);
IkReal x3174=(cj5*r10);
IkReal x3175=(cj5*r20);
IkReal x3176=((1.0)*x3170);
IkReal x3177=((1.0)*x3171);
IkReal x3178=(sj5*x3170);
IkReal x3179=(sj5*x3171);
evalcond[0]=(((r22*x3171))+((r21*x3178))+(((-1.0)*x3175*x3176)));
evalcond[1]=(((r21*x3179))+(((-1.0)*r22*x3176))+(((-1.0)*x3175*x3177)));
evalcond[2]=(((r11*x3179))+(((-1.0)*x3174*x3177))+cj0+(((-1.0)*r12*x3176)));
evalcond[3]=(((r02*x3171))+(((-1.0)*x3173*x3176))+((r01*x3178))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3178))+(((-1.0)*x3174*x3176))+(((-1.0)*x3172))+((r12*x3171)));
evalcond[5]=((((-1.0)*x3172))+(((-1.0)*x3173*x3177))+((r01*x3179))+(((-1.0)*r02*x3176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3180=((1.0)*cj5);
CheckValue<IkReal> x3181 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3180))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3181.valid){
continue;
}
CheckValue<IkReal> x3182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3180)))),-1);
if(!x3182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3181.value)+(((1.5707963267949)*(x3182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3183=IKcos(j4);
IkReal x3184=IKsin(j4);
IkReal x3185=((1.0)*sj0);
IkReal x3186=(cj5*r00);
IkReal x3187=(cj5*r10);
IkReal x3188=(cj5*r20);
IkReal x3189=((1.0)*x3183);
IkReal x3190=((1.0)*x3184);
IkReal x3191=(sj5*x3183);
IkReal x3192=(sj5*x3184);
evalcond[0]=(((r22*x3184))+((r21*x3191))+(((-1.0)*x3188*x3189)));
evalcond[1]=(((r21*x3192))+(((-1.0)*r22*x3189))+(((-1.0)*x3188*x3190)));
evalcond[2]=(cj0+(((-1.0)*x3187*x3190))+((r11*x3192))+(((-1.0)*r12*x3189)));
evalcond[3]=(((r01*x3191))+(((-1.0)*x3186*x3189))+(((-1.0)*cj0))+((r02*x3184)));
evalcond[4]=((((-1.0)*x3187*x3189))+((r12*x3184))+((r11*x3191))+(((-1.0)*x3185)));
evalcond[5]=((((-1.0)*r02*x3189))+((r01*x3192))+(((-1.0)*x3186*x3190))+(((-1.0)*x3185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3193 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3193.valid){
continue;
}
CheckValue<IkReal> x3194=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3193.value)+(((1.5707963267949)*(x3194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3195=IKcos(j4);
IkReal x3196=IKsin(j4);
IkReal x3197=((1.0)*sj0);
IkReal x3198=(cj5*r00);
IkReal x3199=(cj5*r10);
IkReal x3200=(cj5*r20);
IkReal x3201=((1.0)*x3195);
IkReal x3202=((1.0)*x3196);
IkReal x3203=(sj5*x3195);
IkReal x3204=(sj5*x3196);
evalcond[0]=((((-1.0)*x3200*x3201))+((r22*x3196))+((r21*x3203)));
evalcond[1]=((((-1.0)*x3200*x3202))+(((-1.0)*r22*x3201))+((r21*x3204)));
evalcond[2]=(cj0+(((-1.0)*x3199*x3202))+((r11*x3204))+(((-1.0)*r12*x3201)));
evalcond[3]=(((r01*x3203))+((r02*x3196))+(((-1.0)*cj0))+(((-1.0)*x3198*x3201)));
evalcond[4]=((((-1.0)*x3199*x3201))+((r11*x3203))+((r12*x3196))+(((-1.0)*x3197)));
evalcond[5]=((((-1.0)*r02*x3201))+((r01*x3204))+(((-1.0)*x3197))+(((-1.0)*x3198*x3202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.50968488714305)*py))+(((-0.428523932076494)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.50968488714305)*px))+(((0.428523932076494)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.50968488714305)*py))+(((-0.428523932076494)*px))))+IKsqr(((((1.50968488714305)*px))+(((0.428523932076494)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.50968488714305)*py))+(((-0.428523932076494)*px))), ((((1.50968488714305)*px))+(((0.428523932076494)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3205=IKcos(j0);
IkReal x3206=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.174)*x3206))+(((0.613)*x3205)));
evalcond[1]=((((-1.0)*py))+(((0.613)*x3206))+(((0.174)*x3205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3207=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3207;
j4eval[1]=IKsign(x3207);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3208=((1.0)*cj5);
IkReal x3209=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3208)));
j4eval[0]=x3209;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3208)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3210=cj5*cj5;
IkReal x3211=((1.0)*r20);
IkReal x3212=(r01*r21);
IkReal x3213=(r21*sj5);
IkReal x3214=(((cj5*r01*r20*sj5))+((cj5*r00*x3213))+(((-1.0)*r02*r22))+(((-1.0)*x3212))+(((-1.0)*r00*x3210*x3211))+((x3210*x3212)));
j4eval[0]=x3214;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3211))+((cj0*x3213)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3215=cj5*cj5;
IkReal x3216=((1.0)*r20);
IkReal x3217=(r01*r21);
IkReal x3218=(r21*sj5);
CheckValue<IkReal> x3219 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3216))+((cj0*x3218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3219.valid){
continue;
}
CheckValue<IkReal> x3220=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x3218))+(((-1.0)*r02*r22))+((x3215*x3217))+(((-1.0)*x3217))+(((-1.0)*r00*x3215*x3216)))),-1);
if(!x3220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3219.value)+(((1.5707963267949)*(x3220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3221=IKcos(j4);
IkReal x3222=IKsin(j4);
IkReal x3223=(cj5*r00);
IkReal x3224=(cj5*r10);
IkReal x3225=(cj5*r20);
IkReal x3226=((1.0)*x3221);
IkReal x3227=((1.0)*x3222);
IkReal x3228=(sj5*x3221);
IkReal x3229=(sj5*x3222);
evalcond[0]=((((-1.0)*x3225*x3226))+((r21*x3228))+((r22*x3222)));
evalcond[1]=((((-1.0)*x3225*x3227))+((r21*x3229))+(((-1.0)*r22*x3226)));
evalcond[2]=(cj0+((r02*x3222))+((r01*x3228))+(((-1.0)*x3223*x3226)));
evalcond[3]=(((r12*x3222))+sj0+((r11*x3228))+(((-1.0)*x3224*x3226)));
evalcond[4]=(cj0+((r11*x3229))+(((-1.0)*x3224*x3227))+(((-1.0)*r12*x3226)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3226))+((r01*x3229))+(((-1.0)*x3223*x3227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3230=((1.0)*cj5);
CheckValue<IkReal> x3231=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3230)))),-1);
if(!x3231.valid){
continue;
}
CheckValue<IkReal> x3232 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3230)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3231.value)))+(x3232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3233=IKcos(j4);
IkReal x3234=IKsin(j4);
IkReal x3235=(cj5*r00);
IkReal x3236=(cj5*r10);
IkReal x3237=(cj5*r20);
IkReal x3238=((1.0)*x3233);
IkReal x3239=((1.0)*x3234);
IkReal x3240=(sj5*x3233);
IkReal x3241=(sj5*x3234);
evalcond[0]=(((r21*x3240))+((r22*x3234))+(((-1.0)*x3237*x3238)));
evalcond[1]=(((r21*x3241))+(((-1.0)*x3237*x3239))+(((-1.0)*r22*x3238)));
evalcond[2]=(((r01*x3240))+cj0+(((-1.0)*x3235*x3238))+((r02*x3234)));
evalcond[3]=(sj0+(((-1.0)*x3236*x3238))+((r12*x3234))+((r11*x3240)));
evalcond[4]=(cj0+(((-1.0)*x3236*x3239))+(((-1.0)*r12*x3238))+((r11*x3241)));
evalcond[5]=(((r01*x3241))+(((-1.0)*r02*x3238))+(((-1.0)*sj0))+(((-1.0)*x3235*x3239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3242 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3242.valid){
continue;
}
CheckValue<IkReal> x3243=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3242.value)+(((1.5707963267949)*(x3243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3244=IKcos(j4);
IkReal x3245=IKsin(j4);
IkReal x3246=(cj5*r00);
IkReal x3247=(cj5*r10);
IkReal x3248=(cj5*r20);
IkReal x3249=((1.0)*x3244);
IkReal x3250=((1.0)*x3245);
IkReal x3251=(sj5*x3244);
IkReal x3252=(sj5*x3245);
evalcond[0]=(((r22*x3245))+(((-1.0)*x3248*x3249))+((r21*x3251)));
evalcond[1]=(((r21*x3252))+(((-1.0)*x3248*x3250))+(((-1.0)*r22*x3249)));
evalcond[2]=(cj0+((r01*x3251))+((r02*x3245))+(((-1.0)*x3246*x3249)));
evalcond[3]=(sj0+((r11*x3251))+((r12*x3245))+(((-1.0)*x3247*x3249)));
evalcond[4]=(cj0+(((-1.0)*x3247*x3250))+((r11*x3252))+(((-1.0)*r12*x3249)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3246*x3250))+((r01*x3252))+(((-1.0)*r02*x3249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-5.74712643678161)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.74712643678161)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.74712643678161)*px))+IKsqr(((5.74712643678161)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-5.74712643678161)*px), ((5.74712643678161)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.174)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.174)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3253=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3253;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3254=((1.0)*cj5);
IkReal x3255=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3254)));
j4eval[0]=x3255;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3254)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3256=((1.0)*cj5);
IkReal x3257=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3256)));
j4eval[0]=x3257;
j4eval[1]=IKsign(x3257);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3256))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3258=((1.0)*cj5);
CheckValue<IkReal> x3259 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3258))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3259.valid){
continue;
}
CheckValue<IkReal> x3260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3258)))),-1);
if(!x3260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3259.value)+(((1.5707963267949)*(x3260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3261=IKcos(j4);
IkReal x3262=IKsin(j4);
IkReal x3263=((1.0)*sj0);
IkReal x3264=(cj5*r00);
IkReal x3265=(cj5*r10);
IkReal x3266=(cj5*r20);
IkReal x3267=((1.0)*x3261);
IkReal x3268=((1.0)*x3262);
IkReal x3269=(sj5*x3261);
IkReal x3270=(sj5*x3262);
evalcond[0]=(((r21*x3269))+(((-1.0)*x3266*x3267))+((r22*x3262)));
evalcond[1]=(((r21*x3270))+(((-1.0)*x3266*x3268))+(((-1.0)*r22*x3267)));
evalcond[2]=(cj0+(((-1.0)*r12*x3267))+(((-1.0)*x3265*x3268))+((r11*x3270)));
evalcond[3]=(((r01*x3269))+(((-1.0)*x3264*x3267))+((r02*x3262))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3263))+(((-1.0)*x3265*x3267))+((r11*x3269))+((r12*x3262)));
evalcond[5]=(((r01*x3270))+(((-1.0)*x3263))+(((-1.0)*x3264*x3268))+(((-1.0)*r02*x3267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3271=((1.0)*cj5);
CheckValue<IkReal> x3272 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3272.valid){
continue;
}
CheckValue<IkReal> x3273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3271)))),-1);
if(!x3273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3272.value)+(((1.5707963267949)*(x3273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3274=IKcos(j4);
IkReal x3275=IKsin(j4);
IkReal x3276=((1.0)*sj0);
IkReal x3277=(cj5*r00);
IkReal x3278=(cj5*r10);
IkReal x3279=(cj5*r20);
IkReal x3280=((1.0)*x3274);
IkReal x3281=((1.0)*x3275);
IkReal x3282=(sj5*x3274);
IkReal x3283=(sj5*x3275);
evalcond[0]=((((-1.0)*x3279*x3280))+((r21*x3282))+((r22*x3275)));
evalcond[1]=((((-1.0)*r22*x3280))+(((-1.0)*x3279*x3281))+((r21*x3283)));
evalcond[2]=((((-1.0)*r12*x3280))+cj0+((r11*x3283))+(((-1.0)*x3278*x3281)));
evalcond[3]=((((-1.0)*x3277*x3280))+((r02*x3275))+(((-1.0)*cj0))+((r01*x3282)));
evalcond[4]=((((-1.0)*x3276))+((r12*x3275))+((r11*x3282))+(((-1.0)*x3278*x3280)));
evalcond[5]=((((-1.0)*x3277*x3281))+(((-1.0)*x3276))+(((-1.0)*r02*x3280))+((r01*x3283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3284 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3284.valid){
continue;
}
CheckValue<IkReal> x3285=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3284.value)+(((1.5707963267949)*(x3285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3286=IKcos(j4);
IkReal x3287=IKsin(j4);
IkReal x3288=((1.0)*sj0);
IkReal x3289=(cj5*r00);
IkReal x3290=(cj5*r10);
IkReal x3291=(cj5*r20);
IkReal x3292=((1.0)*x3286);
IkReal x3293=((1.0)*x3287);
IkReal x3294=(sj5*x3286);
IkReal x3295=(sj5*x3287);
evalcond[0]=((((-1.0)*x3291*x3292))+((r22*x3287))+((r21*x3294)));
evalcond[1]=((((-1.0)*r22*x3292))+(((-1.0)*x3291*x3293))+((r21*x3295)));
evalcond[2]=((((-1.0)*r12*x3292))+cj0+((r11*x3295))+(((-1.0)*x3290*x3293)));
evalcond[3]=(((r01*x3294))+((r02*x3287))+(((-1.0)*x3289*x3292))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3288))+((r11*x3294))+((r12*x3287))+(((-1.0)*x3290*x3292)));
evalcond[5]=(((r01*x3295))+(((-1.0)*x3288))+(((-1.0)*r02*x3292))+(((-1.0)*x3289*x3293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-5.74712643678161)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.74712643678161)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.74712643678161)*px))+IKsqr(((5.74712643678161)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-5.74712643678161)*px), ((5.74712643678161)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.174)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.174)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3296=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3296;
j4eval[1]=IKsign(x3296);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3297=((1.0)*cj5);
IkReal x3298=((((-1.0)*r11*x3297))+(((-1.0)*r10*sj5)));
j4eval[0]=x3298;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3297))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3299=cj5*cj5;
IkReal x3300=((1.0)*r20);
IkReal x3301=(r01*r21);
IkReal x3302=(r21*sj5);
IkReal x3303=(((cj5*r01*r20*sj5))+((cj5*r00*x3302))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3299*x3300))+(((-1.0)*x3301))+((x3299*x3301)));
j4eval[0]=x3303;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3302))+(((-1.0)*cj0*cj5*x3300))))));
j4eval[2]=IKsign(x3303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3304=cj5*cj5;
IkReal x3305=((1.0)*r20);
IkReal x3306=(r01*r21);
IkReal x3307=(r21*sj5);
CheckValue<IkReal> x3308 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3307))+(((-1.0)*cj0*cj5*x3305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3308.valid){
continue;
}
CheckValue<IkReal> x3309=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3304*x3305))+((cj5*r00*x3307))+(((-1.0)*r02*r22))+((x3304*x3306))+(((-1.0)*x3306)))),-1);
if(!x3309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3308.value)+(((1.5707963267949)*(x3309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3310=IKcos(j4);
IkReal x3311=IKsin(j4);
IkReal x3312=(cj5*r00);
IkReal x3313=(cj5*r10);
IkReal x3314=(cj5*r20);
IkReal x3315=((1.0)*x3310);
IkReal x3316=((1.0)*x3311);
IkReal x3317=(sj5*x3310);
IkReal x3318=(sj5*x3311);
evalcond[0]=(((r21*x3317))+((r22*x3311))+(((-1.0)*x3314*x3315)));
evalcond[1]=(((r21*x3318))+(((-1.0)*r22*x3315))+(((-1.0)*x3314*x3316)));
evalcond[2]=(cj0+((r02*x3311))+(((-1.0)*x3312*x3315))+((r01*x3317)));
evalcond[3]=(sj0+((r11*x3317))+((r12*x3311))+(((-1.0)*x3313*x3315)));
evalcond[4]=(cj0+((r11*x3318))+(((-1.0)*x3313*x3316))+(((-1.0)*r12*x3315)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3312*x3316))+(((-1.0)*r02*x3315))+((r01*x3318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3319=((1.0)*cj5);
CheckValue<IkReal> x3320=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3319)))),-1);
if(!x3320.valid){
continue;
}
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3319)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3320.value)))+(x3321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3322=IKcos(j4);
IkReal x3323=IKsin(j4);
IkReal x3324=(cj5*r00);
IkReal x3325=(cj5*r10);
IkReal x3326=(cj5*r20);
IkReal x3327=((1.0)*x3322);
IkReal x3328=((1.0)*x3323);
IkReal x3329=(sj5*x3322);
IkReal x3330=(sj5*x3323);
evalcond[0]=(((r22*x3323))+(((-1.0)*x3326*x3327))+((r21*x3329)));
evalcond[1]=(((r21*x3330))+(((-1.0)*x3326*x3328))+(((-1.0)*r22*x3327)));
evalcond[2]=((((-1.0)*x3324*x3327))+cj0+((r01*x3329))+((r02*x3323)));
evalcond[3]=(((r12*x3323))+sj0+(((-1.0)*x3325*x3327))+((r11*x3329)));
evalcond[4]=(cj0+(((-1.0)*x3325*x3328))+((r11*x3330))+(((-1.0)*r12*x3327)));
evalcond[5]=((((-1.0)*x3324*x3328))+(((-1.0)*sj0))+(((-1.0)*r02*x3327))+((r01*x3330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3331 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3331.valid){
continue;
}
CheckValue<IkReal> x3332=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3331.value)+(((1.5707963267949)*(x3332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3333=IKcos(j4);
IkReal x3334=IKsin(j4);
IkReal x3335=(cj5*r00);
IkReal x3336=(cj5*r10);
IkReal x3337=(cj5*r20);
IkReal x3338=((1.0)*x3333);
IkReal x3339=((1.0)*x3334);
IkReal x3340=(sj5*x3333);
IkReal x3341=(sj5*x3334);
evalcond[0]=((((-1.0)*x3337*x3338))+((r21*x3340))+((r22*x3334)));
evalcond[1]=((((-1.0)*r22*x3338))+(((-1.0)*x3337*x3339))+((r21*x3341)));
evalcond[2]=(cj0+((r02*x3334))+(((-1.0)*x3335*x3338))+((r01*x3340)));
evalcond[3]=(sj0+((r12*x3334))+(((-1.0)*x3336*x3338))+((r11*x3340)));
evalcond[4]=(cj0+(((-1.0)*x3336*x3339))+((r11*x3341))+(((-1.0)*r12*x3338)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3338))+(((-1.0)*x3335*x3339))+((r01*x3341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.428523932076494)*px))+(((-1.50968488714305)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.50968488714305)*px))+(((0.428523932076494)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.428523932076494)*px))+(((-1.50968488714305)*py))))+IKsqr(((((-1.50968488714305)*px))+(((0.428523932076494)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.428523932076494)*px))+(((-1.50968488714305)*py))), ((((-1.50968488714305)*px))+(((0.428523932076494)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3342=IKcos(j0);
IkReal x3343=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.174)*x3343))+(((-0.613)*x3342)));
evalcond[1]=((((0.174)*x3342))+(((-1.0)*py))+(((-0.613)*x3343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3344=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3344;
j4eval[1]=IKsign(x3344);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3345=((1.0)*cj5);
IkReal x3346=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3345)));
j4eval[0]=x3346;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3345)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3347=cj5*cj5;
IkReal x3348=((1.0)*r20);
IkReal x3349=(r01*r21);
IkReal x3350=(r21*sj5);
IkReal x3351=(((cj5*r01*r20*sj5))+(((-1.0)*x3349))+(((-1.0)*r02*r22))+((x3347*x3349))+((cj5*r00*x3350))+(((-1.0)*r00*x3347*x3348)));
j4eval[0]=x3351;
j4eval[1]=((IKabs((((cj0*x3350))+(((-1.0)*cj0*cj5*x3348)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3352=cj5*cj5;
IkReal x3353=((1.0)*r20);
IkReal x3354=(r01*r21);
IkReal x3355=(r21*sj5);
CheckValue<IkReal> x3356 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3353))+((cj0*x3355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3356.valid){
continue;
}
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3355))+((x3352*x3354))+(((-1.0)*r00*x3352*x3353))+(((-1.0)*x3354)))),-1);
if(!x3357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3356.value)+(((1.5707963267949)*(x3357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3358=IKcos(j4);
IkReal x3359=IKsin(j4);
IkReal x3360=(cj5*r00);
IkReal x3361=(cj5*r10);
IkReal x3362=(cj5*r20);
IkReal x3363=((1.0)*x3358);
IkReal x3364=((1.0)*x3359);
IkReal x3365=(sj5*x3358);
IkReal x3366=(sj5*x3359);
evalcond[0]=((((-1.0)*x3362*x3363))+((r21*x3365))+((r22*x3359)));
evalcond[1]=((((-1.0)*x3362*x3364))+((r21*x3366))+(((-1.0)*r22*x3363)));
evalcond[2]=((((-1.0)*x3360*x3363))+cj0+((r01*x3365))+((r02*x3359)));
evalcond[3]=((((-1.0)*x3361*x3363))+((r12*x3359))+sj0+((r11*x3365)));
evalcond[4]=((((-1.0)*x3361*x3364))+(((-1.0)*r12*x3363))+cj0+((r11*x3366)));
evalcond[5]=((((-1.0)*x3360*x3364))+(((-1.0)*sj0))+((r01*x3366))+(((-1.0)*r02*x3363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3367=((1.0)*cj5);
CheckValue<IkReal> x3368 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3367)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3368.valid){
continue;
}
CheckValue<IkReal> x3369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3367)))),-1);
if(!x3369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3368.value)+(((1.5707963267949)*(x3369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3370=IKcos(j4);
IkReal x3371=IKsin(j4);
IkReal x3372=(cj5*r00);
IkReal x3373=(cj5*r10);
IkReal x3374=(cj5*r20);
IkReal x3375=((1.0)*x3370);
IkReal x3376=((1.0)*x3371);
IkReal x3377=(sj5*x3370);
IkReal x3378=(sj5*x3371);
evalcond[0]=((((-1.0)*x3374*x3375))+((r22*x3371))+((r21*x3377)));
evalcond[1]=((((-1.0)*r22*x3375))+(((-1.0)*x3374*x3376))+((r21*x3378)));
evalcond[2]=(((r01*x3377))+cj0+((r02*x3371))+(((-1.0)*x3372*x3375)));
evalcond[3]=(((r12*x3371))+sj0+(((-1.0)*x3373*x3375))+((r11*x3377)));
evalcond[4]=((((-1.0)*x3373*x3376))+cj0+(((-1.0)*r12*x3375))+((r11*x3378)));
evalcond[5]=(((r01*x3378))+(((-1.0)*sj0))+(((-1.0)*r02*x3375))+(((-1.0)*x3372*x3376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3379 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3379.valid){
continue;
}
CheckValue<IkReal> x3380=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3379.value)+(((1.5707963267949)*(x3380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3381=IKcos(j4);
IkReal x3382=IKsin(j4);
IkReal x3383=(cj5*r00);
IkReal x3384=(cj5*r10);
IkReal x3385=(cj5*r20);
IkReal x3386=((1.0)*x3381);
IkReal x3387=((1.0)*x3382);
IkReal x3388=(sj5*x3381);
IkReal x3389=(sj5*x3382);
evalcond[0]=((((-1.0)*x3385*x3386))+((r21*x3388))+((r22*x3382)));
evalcond[1]=((((-1.0)*r22*x3386))+(((-1.0)*x3385*x3387))+((r21*x3389)));
evalcond[2]=(((r01*x3388))+cj0+(((-1.0)*x3383*x3386))+((r02*x3382)));
evalcond[3]=(sj0+(((-1.0)*x3384*x3386))+((r12*x3382))+((r11*x3388)));
evalcond[4]=(cj0+(((-1.0)*x3384*x3387))+((r11*x3389))+(((-1.0)*r12*x3386)));
evalcond[5]=(((r01*x3389))+(((-1.0)*sj0))+(((-1.0)*x3383*x3387))+(((-1.0)*r02*x3386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.428523932076494)*px))+(((-1.50968488714305)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.50968488714305)*px))+(((0.428523932076494)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.428523932076494)*px))+(((-1.50968488714305)*py))))+IKsqr(((((-1.50968488714305)*px))+(((0.428523932076494)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.428523932076494)*px))+(((-1.50968488714305)*py))), ((((-1.50968488714305)*px))+(((0.428523932076494)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3390=IKcos(j0);
IkReal x3391=IKsin(j0);
evalcond[0]=((((-0.613)*x3390))+(((-0.174)*x3391))+(((-1.0)*px)));
evalcond[1]=((((-0.613)*x3391))+(((-1.0)*py))+(((0.174)*x3390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3392=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3392;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3393=((1.0)*cj5);
IkReal x3394=((((-1.0)*r01*x3393))+(((-1.0)*r00*sj5)));
j4eval[0]=x3394;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3393)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3395=((1.0)*cj5);
IkReal x3396=((((-1.0)*r01*x3395))+(((-1.0)*r00*sj5)));
j4eval[0]=x3396;
j4eval[1]=IKsign(x3396);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3395)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3397=((1.0)*cj5);
CheckValue<IkReal> x3398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3397))+(((-1.0)*r00*sj5)))),-1);
if(!x3398.valid){
continue;
}
CheckValue<IkReal> x3399 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3397)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3398.value)))+(x3399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3400=IKcos(j4);
IkReal x3401=IKsin(j4);
IkReal x3402=((1.0)*sj0);
IkReal x3403=(cj5*r00);
IkReal x3404=(cj5*r10);
IkReal x3405=(cj5*r20);
IkReal x3406=((1.0)*x3400);
IkReal x3407=((1.0)*x3401);
IkReal x3408=(sj5*x3400);
IkReal x3409=(sj5*x3401);
evalcond[0]=(((r22*x3401))+(((-1.0)*x3405*x3406))+((r21*x3408)));
evalcond[1]=((((-1.0)*x3405*x3407))+((r21*x3409))+(((-1.0)*r22*x3406)));
evalcond[2]=(cj0+(((-1.0)*x3404*x3407))+((r11*x3409))+(((-1.0)*r12*x3406)));
evalcond[3]=(((r02*x3401))+((r01*x3408))+(((-1.0)*x3403*x3406))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3404*x3406))+((r11*x3408))+((r12*x3401))+(((-1.0)*x3402)));
evalcond[5]=((((-1.0)*r02*x3406))+((r01*x3409))+(((-1.0)*x3403*x3407))+(((-1.0)*x3402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3410=((1.0)*cj5);
CheckValue<IkReal> x3411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3410)))),-1);
if(!x3411.valid){
continue;
}
CheckValue<IkReal> x3412 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3411.value)))+(x3412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3413=IKcos(j4);
IkReal x3414=IKsin(j4);
IkReal x3415=((1.0)*sj0);
IkReal x3416=(cj5*r00);
IkReal x3417=(cj5*r10);
IkReal x3418=(cj5*r20);
IkReal x3419=((1.0)*x3413);
IkReal x3420=((1.0)*x3414);
IkReal x3421=(sj5*x3413);
IkReal x3422=(sj5*x3414);
evalcond[0]=((((-1.0)*x3418*x3419))+((r22*x3414))+((r21*x3421)));
evalcond[1]=((((-1.0)*r22*x3419))+(((-1.0)*x3418*x3420))+((r21*x3422)));
evalcond[2]=(cj0+(((-1.0)*x3417*x3420))+(((-1.0)*r12*x3419))+((r11*x3422)));
evalcond[3]=(((r02*x3414))+(((-1.0)*x3416*x3419))+(((-1.0)*cj0))+((r01*x3421)));
evalcond[4]=(((r12*x3414))+(((-1.0)*x3417*x3419))+((r11*x3421))+(((-1.0)*x3415)));
evalcond[5]=((((-1.0)*r02*x3419))+(((-1.0)*x3416*x3420))+((r01*x3422))+(((-1.0)*x3415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3423 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3423.valid){
continue;
}
CheckValue<IkReal> x3424=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3423.value)+(((1.5707963267949)*(x3424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3425=IKcos(j4);
IkReal x3426=IKsin(j4);
IkReal x3427=((1.0)*sj0);
IkReal x3428=(cj5*r00);
IkReal x3429=(cj5*r10);
IkReal x3430=(cj5*r20);
IkReal x3431=((1.0)*x3425);
IkReal x3432=((1.0)*x3426);
IkReal x3433=(sj5*x3425);
IkReal x3434=(sj5*x3426);
evalcond[0]=((((-1.0)*x3430*x3431))+((r21*x3433))+((r22*x3426)));
evalcond[1]=((((-1.0)*x3430*x3432))+(((-1.0)*r22*x3431))+((r21*x3434)));
evalcond[2]=((((-1.0)*r12*x3431))+cj0+((r11*x3434))+(((-1.0)*x3429*x3432)));
evalcond[3]=((((-1.0)*x3428*x3431))+((r01*x3433))+((r02*x3426))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3427))+((r12*x3426))+((r11*x3433))+(((-1.0)*x3429*x3431)));
evalcond[5]=((((-1.0)*x3428*x3432))+((r01*x3434))+(((-1.0)*x3427))+(((-1.0)*r02*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-5.74712643678161)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.74712643678161)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.74712643678161)*px))+IKsqr(((5.74712643678161)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-5.74712643678161)*px), ((5.74712643678161)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.174)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.174)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3435=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3435;
j4eval[1]=IKsign(x3435);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3436=((1.0)*cj5);
IkReal x3437=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3436)));
j4eval[0]=x3437;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3436)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3438=cj5*cj5;
IkReal x3439=((1.0)*r20);
IkReal x3440=(r01*r21);
IkReal x3441=(r21*sj5);
IkReal x3442=(((cj5*r01*r20*sj5))+((x3438*x3440))+(((-1.0)*r02*r22))+(((-1.0)*x3440))+((cj5*r00*x3441))+(((-1.0)*r00*x3438*x3439)));
j4eval[0]=x3442;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3439))+((cj0*x3441)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3443=cj5*cj5;
IkReal x3444=((1.0)*r20);
IkReal x3445=(r01*r21);
IkReal x3446=(r21*sj5);
CheckValue<IkReal> x3447 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3446))+(((-1.0)*cj0*cj5*x3444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
CheckValue<IkReal> x3448=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3443*x3444))+(((-1.0)*x3445))+((x3443*x3445))+((cj5*r00*x3446)))),-1);
if(!x3448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3447.value)+(((1.5707963267949)*(x3448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3449=IKcos(j4);
IkReal x3450=IKsin(j4);
IkReal x3451=(cj5*r00);
IkReal x3452=(cj5*r10);
IkReal x3453=(cj5*r20);
IkReal x3454=((1.0)*x3449);
IkReal x3455=((1.0)*x3450);
IkReal x3456=(sj5*x3449);
IkReal x3457=(sj5*x3450);
evalcond[0]=((((-1.0)*x3453*x3454))+((r21*x3456))+((r22*x3450)));
evalcond[1]=((((-1.0)*x3453*x3455))+((r21*x3457))+(((-1.0)*r22*x3454)));
evalcond[2]=((((-1.0)*x3451*x3454))+cj0+((r02*x3450))+((r01*x3456)));
evalcond[3]=(sj0+((r12*x3450))+(((-1.0)*x3452*x3454))+((r11*x3456)));
evalcond[4]=(cj0+(((-1.0)*r12*x3454))+(((-1.0)*x3452*x3455))+((r11*x3457)));
evalcond[5]=((((-1.0)*x3451*x3455))+(((-1.0)*sj0))+(((-1.0)*r02*x3454))+((r01*x3457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3458=((1.0)*cj5);
CheckValue<IkReal> x3459 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3458))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3459.valid){
continue;
}
CheckValue<IkReal> x3460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3458)))),-1);
if(!x3460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3459.value)+(((1.5707963267949)*(x3460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3461=IKcos(j4);
IkReal x3462=IKsin(j4);
IkReal x3463=(cj5*r00);
IkReal x3464=(cj5*r10);
IkReal x3465=(cj5*r20);
IkReal x3466=((1.0)*x3461);
IkReal x3467=((1.0)*x3462);
IkReal x3468=(sj5*x3461);
IkReal x3469=(sj5*x3462);
evalcond[0]=((((-1.0)*x3465*x3466))+((r21*x3468))+((r22*x3462)));
evalcond[1]=((((-1.0)*x3465*x3467))+(((-1.0)*r22*x3466))+((r21*x3469)));
evalcond[2]=((((-1.0)*x3463*x3466))+cj0+((r01*x3468))+((r02*x3462)));
evalcond[3]=(sj0+((r12*x3462))+((r11*x3468))+(((-1.0)*x3464*x3466)));
evalcond[4]=(cj0+(((-1.0)*r12*x3466))+((r11*x3469))+(((-1.0)*x3464*x3467)));
evalcond[5]=((((-1.0)*x3463*x3467))+(((-1.0)*sj0))+(((-1.0)*r02*x3466))+((r01*x3469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3470 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3470.valid){
continue;
}
CheckValue<IkReal> x3471=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3470.value)+(((1.5707963267949)*(x3471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3472=IKcos(j4);
IkReal x3473=IKsin(j4);
IkReal x3474=(cj5*r00);
IkReal x3475=(cj5*r10);
IkReal x3476=(cj5*r20);
IkReal x3477=((1.0)*x3472);
IkReal x3478=((1.0)*x3473);
IkReal x3479=(sj5*x3472);
IkReal x3480=(sj5*x3473);
evalcond[0]=(((r21*x3479))+(((-1.0)*x3476*x3477))+((r22*x3473)));
evalcond[1]=((((-1.0)*r22*x3477))+((r21*x3480))+(((-1.0)*x3476*x3478)));
evalcond[2]=(cj0+((r01*x3479))+(((-1.0)*x3474*x3477))+((r02*x3473)));
evalcond[3]=(sj0+((r12*x3473))+((r11*x3479))+(((-1.0)*x3475*x3477)));
evalcond[4]=(cj0+(((-1.0)*r12*x3477))+((r11*x3480))+(((-1.0)*x3475*x3478)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3477))+((r01*x3480))+(((-1.0)*x3474*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-5.74712643678161)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.74712643678161)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.74712643678161)*px))+IKsqr(((5.74712643678161)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-5.74712643678161)*px), ((5.74712643678161)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.174)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.174)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3481=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3481;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3482=((1.0)*cj5);
IkReal x3483=((((-1.0)*r01*x3482))+(((-1.0)*r00*sj5)));
j4eval[0]=x3483;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3482)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3484=((1.0)*cj5);
IkReal x3485=((((-1.0)*r01*x3484))+(((-1.0)*r00*sj5)));
j4eval[0]=x3485;
j4eval[1]=IKsign(x3485);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3484))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3486=((1.0)*cj5);
CheckValue<IkReal> x3487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3486))+(((-1.0)*r00*sj5)))),-1);
if(!x3487.valid){
continue;
}
CheckValue<IkReal> x3488 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3486))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3487.value)))+(x3488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3489=IKcos(j4);
IkReal x3490=IKsin(j4);
IkReal x3491=((1.0)*sj0);
IkReal x3492=(cj5*r00);
IkReal x3493=(cj5*r10);
IkReal x3494=(cj5*r20);
IkReal x3495=((1.0)*x3489);
IkReal x3496=((1.0)*x3490);
IkReal x3497=(sj5*x3489);
IkReal x3498=(sj5*x3490);
evalcond[0]=((((-1.0)*x3494*x3495))+((r22*x3490))+((r21*x3497)));
evalcond[1]=((((-1.0)*x3494*x3496))+(((-1.0)*r22*x3495))+((r21*x3498)));
evalcond[2]=((((-1.0)*r12*x3495))+cj0+(((-1.0)*x3493*x3496))+((r11*x3498)));
evalcond[3]=(((r01*x3497))+(((-1.0)*x3492*x3495))+((r02*x3490))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3491))+(((-1.0)*x3493*x3495))+((r11*x3497))+((r12*x3490)));
evalcond[5]=((((-1.0)*r02*x3495))+((r01*x3498))+(((-1.0)*x3491))+(((-1.0)*x3492*x3496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3499=((1.0)*cj5);
CheckValue<IkReal> x3500 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3500.valid){
continue;
}
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3499)))),-1);
if(!x3501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3500.value)+(((1.5707963267949)*(x3501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3502=IKcos(j4);
IkReal x3503=IKsin(j4);
IkReal x3504=((1.0)*sj0);
IkReal x3505=(cj5*r00);
IkReal x3506=(cj5*r10);
IkReal x3507=(cj5*r20);
IkReal x3508=((1.0)*x3502);
IkReal x3509=((1.0)*x3503);
IkReal x3510=(sj5*x3502);
IkReal x3511=(sj5*x3503);
evalcond[0]=(((r21*x3510))+((r22*x3503))+(((-1.0)*x3507*x3508)));
evalcond[1]=(((r21*x3511))+(((-1.0)*r22*x3508))+(((-1.0)*x3507*x3509)));
evalcond[2]=((((-1.0)*r12*x3508))+(((-1.0)*x3506*x3509))+cj0+((r11*x3511)));
evalcond[3]=(((r01*x3510))+((r02*x3503))+(((-1.0)*x3505*x3508))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3506*x3508))+(((-1.0)*x3504))+((r12*x3503))+((r11*x3510)));
evalcond[5]=(((r01*x3511))+(((-1.0)*x3504))+(((-1.0)*x3505*x3509))+(((-1.0)*r02*x3508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3512 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3512.valid){
continue;
}
CheckValue<IkReal> x3513=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3512.value)+(((1.5707963267949)*(x3513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3514=IKcos(j4);
IkReal x3515=IKsin(j4);
IkReal x3516=((1.0)*sj0);
IkReal x3517=(cj5*r00);
IkReal x3518=(cj5*r10);
IkReal x3519=(cj5*r20);
IkReal x3520=((1.0)*x3514);
IkReal x3521=((1.0)*x3515);
IkReal x3522=(sj5*x3514);
IkReal x3523=(sj5*x3515);
evalcond[0]=((((-1.0)*x3519*x3520))+((r21*x3522))+((r22*x3515)));
evalcond[1]=((((-1.0)*x3519*x3521))+((r21*x3523))+(((-1.0)*r22*x3520)));
evalcond[2]=(cj0+((r11*x3523))+(((-1.0)*r12*x3520))+(((-1.0)*x3518*x3521)));
evalcond[3]=(((r01*x3522))+(((-1.0)*x3517*x3520))+((r02*x3515))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3516))+((r11*x3522))+((r12*x3515))+(((-1.0)*x3518*x3520)));
evalcond[5]=((((-1.0)*r02*x3520))+((r01*x3523))+(((-1.0)*x3516))+(((-1.0)*x3517*x3521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3524=(r00*sj5);
IkReal x3525=((306.5)*cj1);
IkReal x3526=(cj5*r01);
IkReal x3527=((500.0)*px);
IkReal x3528=(cj1*cj2);
IkReal x3529=(sj1*sj2);
IkReal x3530=((345.5)*x3529);
CheckValue<IkReal> x3531=IKPowWithIntegerCheck(((((87.0)*x3529))+(((-87.0)*x3528))),-1);
if(!x3531.valid){
continue;
}
CheckValue<IkReal> x3532=IKPowWithIntegerCheck(((((-1.0)*x3528))+x3529),-1);
if(!x3532.valid){
continue;
}
if( IKabs(((x3531.value)*(((((-1.0)*x3527*x3529))+((x3525*x3526))+((x3524*x3525))+((x3527*x3528))+(((-1.0)*x3524*x3530))+(((345.5)*x3526*x3528))+(((345.5)*x3524*x3528))+(((-1.0)*x3526*x3530)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3532.value)*((x3526+x3524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3531.value)*(((((-1.0)*x3527*x3529))+((x3525*x3526))+((x3524*x3525))+((x3527*x3528))+(((-1.0)*x3524*x3530))+(((345.5)*x3526*x3528))+(((345.5)*x3524*x3528))+(((-1.0)*x3526*x3530))))))+IKsqr(((x3532.value)*((x3526+x3524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3531.value)*(((((-1.0)*x3527*x3529))+((x3525*x3526))+((x3524*x3525))+((x3527*x3528))+(((-1.0)*x3524*x3530))+(((345.5)*x3526*x3528))+(((345.5)*x3524*x3528))+(((-1.0)*x3526*x3530))))), ((x3532.value)*((x3526+x3524))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3533=IKcos(j0);
IkReal x3534=IKsin(j0);
IkReal x3535=((0.571)*cj2);
IkReal x3536=(cj5*r11);
IkReal x3537=(cj5*r01);
IkReal x3538=((1.0)*sj5);
IkReal x3539=(sj1*sj2);
IkReal x3540=((0.12)*sj5);
IkReal x3541=((1.0)*cj2);
IkReal x3542=((0.571)*x3539);
IkReal x3543=(cj1*x3534);
IkReal x3544=(cj1*x3533);
evalcond[0]=((((-1.0)*x3541*x3544))+(((-1.0)*r00*x3538))+(((-1.0)*x3537))+((x3533*x3539)));
evalcond[1]=(((x3534*x3539))+(((-1.0)*x3541*x3543))+(((-1.0)*r10*x3538))+(((-1.0)*x3536)));
evalcond[2]=((((0.613)*x3544))+(((-1.0)*r00*x3540))+(((-0.12)*x3537))+(((-1.0)*x3533*x3542))+(((-0.174)*x3534))+(((-1.0)*px))+((x3535*x3544)));
evalcond[3]=((((0.613)*x3543))+(((0.174)*x3533))+(((-1.0)*r10*x3540))+(((-0.12)*x3536))+(((-1.0)*py))+(((-1.0)*x3534*x3542))+((x3535*x3543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3545=((1.0)*cj5);
IkReal x3546=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3545)));
j4eval[0]=x3546;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3545)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3547=((1.0)*cj5);
IkReal x3548=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3547)));
j4eval[0]=x3548;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x3547))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3549=((1.0)*sj0);
IkReal x3550=((1.0)*cj0);
IkReal x3551=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3551;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3550))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3549)))))+(IKabs(((((-1.0)*r12*x3549))+(((-1.0)*r02*x3550))))));
j4eval[2]=IKsign(x3551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3552=((-1.0)*r20);
IkReal x3554 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3554)==0){
continue;
}
IkReal x3553=pow(x3554,-0.5);
CheckValue<IkReal> x3555 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3552),IKFAST_ATAN2_MAGTHRESH);
if(!x3555.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3555.value));
IkReal gconst97=(r21*x3553);
IkReal gconst98=(x3552*x3553);
CheckValue<IkReal> x3556 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3556.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3556.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3557=((-1.0)*r20);
IkReal x3558=x3553;
CheckValue<IkReal> x3560 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3557),IKFAST_ATAN2_MAGTHRESH);
if(!x3560.valid){
continue;
}
IkReal x3559=((-1.0)*(x3560.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3559;
IkReal gconst96=x3559;
IkReal gconst97=(r21*x3558);
IkReal gconst98=(x3557*x3558);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3561=((-1.0)*r20);
IkReal x3562=x3553;
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3561),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
IkReal x3563=((-1.0)*(x3564.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3563;
IkReal gconst96=x3563;
IkReal gconst97=(r21*x3562);
IkReal gconst98=(x3561*x3562);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3565=((-1.0)*r20);
IkReal x3566=x3553;
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3565),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
IkReal x3567=((-1.0)*(x3568.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3567;
IkReal gconst96=x3567;
IkReal gconst97=(r21*x3566);
IkReal gconst98=(x3565*x3566);
IkReal x3569=((1.0)*(r22*r22));
CheckValue<IkReal> x3573=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3569))),-1);
if(!x3573.valid){
continue;
}
IkReal x3570=x3573.value;
IkReal x3571=((1.0)*x3570);
IkReal x3572=((((-1.0)*x3571*(r20*r20*r20*r20)))+(((-1.0)*x3569))+(((-2.0)*x3570*(r20*r20)*(r21*r21)))+(((-1.0)*x3571*(r21*r21*r21*r21))));
j4eval[0]=x3572;
j4eval[1]=IKsign(x3572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3574=(cj1*cj2);
IkReal x3575=(gconst98*r20);
IkReal x3576=(sj1*sj2);
IkReal x3577=(gconst97*r21);
CheckValue<IkReal> x3578 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3574))+((r22*x3576)))),IkReal(((((-1.0)*x3574*x3577))+(((-1.0)*x3575*x3576))+((x3574*x3575))+((x3576*x3577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3578.valid){
continue;
}
CheckValue<IkReal> x3579=IKPowWithIntegerCheck(IKsign(((((2.0)*x3575*x3577))+(((-1.0)*(x3575*x3575)))+(((-1.0)*(x3577*x3577)))+(((-1.0)*(r22*r22))))),-1);
if(!x3579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3578.value)+(((1.5707963267949)*(x3579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3580=IKsin(j4);
IkReal x3581=IKcos(j4);
IkReal x3582=(gconst98*r10);
IkReal x3583=(gconst97*r21);
IkReal x3584=(gconst98*r20);
IkReal x3585=((1.0)*cj2);
IkReal x3586=((1.0)*sj0);
IkReal x3587=(gconst98*r00);
IkReal x3588=(cj1*sj2);
IkReal x3589=((1.0)*x3581);
IkReal x3590=((1.0)*x3580);
IkReal x3591=(gconst97*x3580);
IkReal x3592=(gconst97*x3581);
evalcond[0]=((((-1.0)*r22*x3589))+(((-1.0)*x3584*x3590))+((x3580*x3583)));
evalcond[1]=(cj0+(((-1.0)*x3582*x3590))+((r11*x3591))+(((-1.0)*r12*x3589)));
evalcond[2]=((((-1.0)*x3587*x3590))+(((-1.0)*r02*x3589))+((r01*x3591))+(((-1.0)*x3586)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3584*x3589))+(((-1.0)*cj1*x3585))+((x3581*x3583))+((r22*x3580)));
evalcond[4]=((((-1.0)*cj0*x3588))+(((-1.0)*cj0*sj1*x3585))+(((-1.0)*x3587*x3589))+((r02*x3580))+((r01*x3592)));
evalcond[5]=(((r12*x3580))+((r11*x3592))+(((-1.0)*x3582*x3589))+(((-1.0)*x3586*x3588))+(((-1.0)*sj0*sj1*x3585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3593=((1.0)*gconst98);
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3593))+(((-1.0)*gconst97*r10)))),-1);
if(!x3594.valid){
continue;
}
CheckValue<IkReal> x3595 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3594.value)))+(x3595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3596=IKsin(j4);
IkReal x3597=IKcos(j4);
IkReal x3598=(gconst98*r10);
IkReal x3599=(gconst97*r21);
IkReal x3600=(gconst98*r20);
IkReal x3601=((1.0)*cj2);
IkReal x3602=((1.0)*sj0);
IkReal x3603=(gconst98*r00);
IkReal x3604=(cj1*sj2);
IkReal x3605=((1.0)*x3597);
IkReal x3606=((1.0)*x3596);
IkReal x3607=(gconst97*x3596);
IkReal x3608=(gconst97*x3597);
evalcond[0]=((((-1.0)*x3600*x3606))+(((-1.0)*r22*x3605))+((x3596*x3599)));
evalcond[1]=(((r11*x3607))+cj0+(((-1.0)*x3598*x3606))+(((-1.0)*r12*x3605)));
evalcond[2]=((((-1.0)*r02*x3605))+(((-1.0)*x3603*x3606))+((r01*x3607))+(((-1.0)*x3602)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3600*x3605))+((x3597*x3599))+((r22*x3596))+(((-1.0)*cj1*x3601)));
evalcond[4]=(((r02*x3596))+(((-1.0)*x3603*x3605))+((r01*x3608))+(((-1.0)*cj0*x3604))+(((-1.0)*cj0*sj1*x3601)));
evalcond[5]=(((r11*x3608))+(((-1.0)*x3598*x3605))+(((-1.0)*x3602*x3604))+((r12*x3596))+(((-1.0)*sj0*sj1*x3601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3609=((1.0)*gconst98);
CheckValue<IkReal> x3610 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3610.valid){
continue;
}
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3609))+(((-1.0)*gconst97*r00)))),-1);
if(!x3611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3610.value)+(((1.5707963267949)*(x3611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3612=IKsin(j4);
IkReal x3613=IKcos(j4);
IkReal x3614=(gconst98*r10);
IkReal x3615=(gconst97*r21);
IkReal x3616=(gconst98*r20);
IkReal x3617=((1.0)*cj2);
IkReal x3618=((1.0)*sj0);
IkReal x3619=(gconst98*r00);
IkReal x3620=(cj1*sj2);
IkReal x3621=((1.0)*x3613);
IkReal x3622=((1.0)*x3612);
IkReal x3623=(gconst97*x3612);
IkReal x3624=(gconst97*x3613);
evalcond[0]=(((x3612*x3615))+(((-1.0)*r22*x3621))+(((-1.0)*x3616*x3622)));
evalcond[1]=((((-1.0)*x3614*x3622))+cj0+(((-1.0)*r12*x3621))+((r11*x3623)));
evalcond[2]=(((r01*x3623))+(((-1.0)*x3618))+(((-1.0)*x3619*x3622))+(((-1.0)*r02*x3621)));
evalcond[3]=(((x3613*x3615))+((r22*x3612))+((sj1*sj2))+(((-1.0)*cj1*x3617))+(((-1.0)*x3616*x3621)));
evalcond[4]=(((r02*x3612))+((r01*x3624))+(((-1.0)*cj0*x3620))+(((-1.0)*cj0*sj1*x3617))+(((-1.0)*x3619*x3621)));
evalcond[5]=((((-1.0)*x3614*x3621))+((r11*x3624))+(((-1.0)*x3618*x3620))+(((-1.0)*sj0*sj1*x3617))+((r12*x3612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3625=((-1.0)*r21);
IkReal x3627 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3627)==0){
continue;
}
IkReal x3626=pow(x3627,-0.5);
CheckValue<IkReal> x3628 = IKatan2WithCheck(IkReal(x3625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3628.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3628.value))));
IkReal gconst100=(x3625*x3626);
IkReal gconst101=((1.0)*r20*x3626);
CheckValue<IkReal> x3629 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3629.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3630=((-1.0)*r21);
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(x3630),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
IkReal x3631=((1.0)*(x3633.value));
IkReal x3632=x3626;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3631)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3631)));
IkReal gconst100=(x3630*x3632);
IkReal gconst101=((1.0)*r20*x3632);
IkReal x3634=r22*r22;
IkReal x3635=((1.0)*x3634);
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(((-1.0)+x3634),-1);
if(!x3639.valid){
continue;
}
IkReal x3636=x3639.value;
if((((1.0)+(((-1.0)*x3635)))) < -0.00001)
continue;
IkReal x3637=IKsqrt(((1.0)+(((-1.0)*x3635))));
IkReal x3638=(cj0*x3636*x3637);
j4eval[0]=((IKabs((x3638+(((-1.0)*x3635*x3638)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3640=((-1.0)*r21);
CheckValue<IkReal> x3643 = IKatan2WithCheck(IkReal(x3640),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3643.valid){
continue;
}
IkReal x3641=((1.0)*(x3643.value));
IkReal x3642=x3626;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3641)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3641)));
IkReal gconst100=(x3640*x3642);
IkReal gconst101=((1.0)*r20*x3642);
IkReal x3644=r22*r22;
IkReal x3645=((1.0)*x3644);
CheckValue<IkReal> x3649=IKPowWithIntegerCheck(((-1.0)+x3644),-1);
if(!x3649.valid){
continue;
}
IkReal x3646=x3649.value;
if((((1.0)+(((-1.0)*x3645)))) < -0.00001)
continue;
IkReal x3647=IKsqrt(((1.0)+(((-1.0)*x3645))));
IkReal x3648=(sj0*x3646*x3647);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3645*x3648))+x3648))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3650=((-1.0)*r21);
CheckValue<IkReal> x3653 = IKatan2WithCheck(IkReal(x3650),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3653.valid){
continue;
}
IkReal x3651=((1.0)*(x3653.value));
IkReal x3652=x3626;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3651)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3651)));
IkReal gconst100=(x3650*x3652);
IkReal gconst101=((1.0)*r20*x3652);
IkReal x3654=r22*r22;
IkReal x3655=(r12*sj0);
IkReal x3656=(cj0*r02);
CheckValue<IkReal> x3660=IKPowWithIntegerCheck(((-1.0)+x3654),-1);
if(!x3660.valid){
continue;
}
IkReal x3657=x3660.value;
if((((1.0)+(((-1.0)*x3654)))) < -0.00001)
continue;
IkReal x3658=IKsqrt(((1.0)+(((-1.0)*x3654))));
IkReal x3659=(r22*x3657*x3658);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3655*x3659))+((x3656*x3659)))))+(IKabs(((((-1.0)*x3655))+(((-1.0)*x3656))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3661=((1.0)*sj0);
IkReal x3662=((1.0)*gconst100);
CheckValue<IkReal> x3663 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3661)))),IkReal(((((-1.0)*gconst100*r11*x3661))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3663.valid){
continue;
}
CheckValue<IkReal> x3664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3662))+(((-1.0)*gconst101*r21)))),-1);
if(!x3664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3663.value)+(((1.5707963267949)*(x3664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3665=IKsin(j4);
IkReal x3666=IKcos(j4);
IkReal x3667=(gconst101*r20);
IkReal x3668=(gconst101*r10);
IkReal x3669=((1.0)*cj2);
IkReal x3670=(gconst101*r00);
IkReal x3671=((1.0)*sj0);
IkReal x3672=(cj1*sj2);
IkReal x3673=((1.0)*x3666);
IkReal x3674=((1.0)*x3665);
IkReal x3675=(gconst100*x3665);
IkReal x3676=(gconst100*x3666);
evalcond[0]=(((r21*x3675))+(((-1.0)*r22*x3673))+(((-1.0)*x3667*x3674)));
evalcond[1]=(cj0+((r11*x3675))+(((-1.0)*r12*x3673))+(((-1.0)*x3668*x3674)));
evalcond[2]=(((r01*x3675))+(((-1.0)*x3670*x3674))+(((-1.0)*r02*x3673))+(((-1.0)*x3671)));
evalcond[3]=(((r22*x3665))+((sj1*sj2))+((r21*x3676))+(((-1.0)*x3667*x3673))+(((-1.0)*cj1*x3669)));
evalcond[4]=(((r01*x3676))+(((-1.0)*cj0*sj1*x3669))+(((-1.0)*x3670*x3673))+(((-1.0)*cj0*x3672))+((r02*x3665)));
evalcond[5]=((((-1.0)*x3671*x3672))+((r11*x3676))+(((-1.0)*sj0*sj1*x3669))+((r12*x3665))+(((-1.0)*x3668*x3673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3677=((1.0)*gconst101);
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3677))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
CheckValue<IkReal> x3679=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3677)))),-1);
if(!x3679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3678.value)+(((1.5707963267949)*(x3679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3680=IKsin(j4);
IkReal x3681=IKcos(j4);
IkReal x3682=(gconst101*r20);
IkReal x3683=(gconst101*r10);
IkReal x3684=((1.0)*cj2);
IkReal x3685=(gconst101*r00);
IkReal x3686=((1.0)*sj0);
IkReal x3687=(cj1*sj2);
IkReal x3688=((1.0)*x3681);
IkReal x3689=((1.0)*x3680);
IkReal x3690=(gconst100*x3680);
IkReal x3691=(gconst100*x3681);
evalcond[0]=((((-1.0)*r22*x3688))+((r21*x3690))+(((-1.0)*x3682*x3689)));
evalcond[1]=(cj0+(((-1.0)*x3683*x3689))+(((-1.0)*r12*x3688))+((r11*x3690)));
evalcond[2]=(((r01*x3690))+(((-1.0)*x3686))+(((-1.0)*x3685*x3689))+(((-1.0)*r02*x3688)));
evalcond[3]=(((sj1*sj2))+((r21*x3691))+(((-1.0)*cj1*x3684))+(((-1.0)*x3682*x3688))+((r22*x3680)));
evalcond[4]=(((r01*x3691))+(((-1.0)*cj0*x3687))+(((-1.0)*x3685*x3688))+((r02*x3680))+(((-1.0)*cj0*sj1*x3684)));
evalcond[5]=((((-1.0)*sj0*sj1*x3684))+(((-1.0)*x3683*x3688))+(((-1.0)*x3686*x3687))+((r12*x3680))+((r11*x3691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3692=((1.0)*gconst101);
CheckValue<IkReal> x3693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3692)))),-1);
if(!x3693.valid){
continue;
}
CheckValue<IkReal> x3694 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3693.value)))+(x3694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3695=IKsin(j4);
IkReal x3696=IKcos(j4);
IkReal x3697=(gconst101*r20);
IkReal x3698=(gconst101*r10);
IkReal x3699=((1.0)*cj2);
IkReal x3700=(gconst101*r00);
IkReal x3701=((1.0)*sj0);
IkReal x3702=(cj1*sj2);
IkReal x3703=((1.0)*x3696);
IkReal x3704=((1.0)*x3695);
IkReal x3705=(gconst100*x3695);
IkReal x3706=(gconst100*x3696);
evalcond[0]=((((-1.0)*x3697*x3704))+((r21*x3705))+(((-1.0)*r22*x3703)));
evalcond[1]=((((-1.0)*x3698*x3704))+cj0+((r11*x3705))+(((-1.0)*r12*x3703)));
evalcond[2]=((((-1.0)*r02*x3703))+((r01*x3705))+(((-1.0)*x3700*x3704))+(((-1.0)*x3701)));
evalcond[3]=((((-1.0)*x3697*x3703))+(((-1.0)*cj1*x3699))+((sj1*sj2))+((r21*x3706))+((r22*x3695)));
evalcond[4]=((((-1.0)*cj0*x3702))+((r01*x3706))+((r02*x3695))+(((-1.0)*x3700*x3703))+(((-1.0)*cj0*sj1*x3699)));
evalcond[5]=((((-1.0)*x3698*x3703))+((r11*x3706))+(((-1.0)*x3701*x3702))+(((-1.0)*sj0*sj1*x3699))+((r12*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3707=((-1.0)*r10);
IkReal x3709 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3709)==0){
continue;
}
IkReal x3708=pow(x3709,-0.5);
CheckValue<IkReal> x3710 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3707),IKFAST_ATAN2_MAGTHRESH);
if(!x3710.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3710.value));
IkReal gconst103=(r11*x3708);
IkReal gconst104=(x3707*x3708);
CheckValue<IkReal> x3711 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3711.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3711.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3712=((-1.0)*r10);
IkReal x3713=x3708;
CheckValue<IkReal> x3715 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3712),IKFAST_ATAN2_MAGTHRESH);
if(!x3715.valid){
continue;
}
IkReal x3714=((-1.0)*(x3715.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3714;
IkReal gconst102=x3714;
IkReal gconst103=(r11*x3713);
IkReal gconst104=(x3712*x3713);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3716=((1.0)*sj0);
IkReal x3717=((1.0)*gconst103);
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3717)))),-1);
if(!x3718.valid){
continue;
}
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3716))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3717))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3716))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3718.value)))+(x3719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3720=IKsin(j4);
IkReal x3721=IKcos(j4);
IkReal x3722=(gconst103*r11);
IkReal x3723=((1.0)*cj2);
IkReal x3724=((1.0)*sj0);
IkReal x3725=(cj1*sj2);
IkReal x3726=((1.0)*x3721);
IkReal x3727=(gconst103*x3721);
IkReal x3728=(gconst103*x3720);
IkReal x3729=((1.0)*gconst104*x3720);
evalcond[0]=((((-1.0)*r22*x3726))+(((-1.0)*r20*x3729))+((r21*x3728)));
evalcond[1]=(cj0+(((-1.0)*r12*x3726))+((x3720*x3722))+(((-1.0)*r10*x3729)));
evalcond[2]=((((-1.0)*x3724))+((r01*x3728))+(((-1.0)*r00*x3729))+(((-1.0)*r02*x3726)));
evalcond[3]=((((-1.0)*cj1*x3723))+((r22*x3720))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3726))+((r21*x3727)));
evalcond[4]=((((-1.0)*cj0*x3725))+(((-1.0)*gconst104*r00*x3726))+((r01*x3727))+((r02*x3720))+(((-1.0)*cj0*sj1*x3723)));
evalcond[5]=((((-1.0)*gconst104*r10*x3726))+(((-1.0)*sj0*sj1*x3723))+(((-1.0)*x3724*x3725))+((r12*x3720))+((x3721*x3722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3730=((1.0)*gconst104);
CheckValue<IkReal> x3731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3730)))),-1);
if(!x3731.valid){
continue;
}
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3730))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3731.value)))+(x3732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3733=IKsin(j4);
IkReal x3734=IKcos(j4);
IkReal x3735=(gconst103*r11);
IkReal x3736=((1.0)*cj2);
IkReal x3737=((1.0)*sj0);
IkReal x3738=(cj1*sj2);
IkReal x3739=((1.0)*x3734);
IkReal x3740=(gconst103*x3734);
IkReal x3741=(gconst103*x3733);
IkReal x3742=((1.0)*gconst104*x3733);
evalcond[0]=((((-1.0)*r20*x3742))+((r21*x3741))+(((-1.0)*r22*x3739)));
evalcond[1]=(((x3733*x3735))+cj0+(((-1.0)*r12*x3739))+(((-1.0)*r10*x3742)));
evalcond[2]=(((r01*x3741))+(((-1.0)*x3737))+(((-1.0)*r00*x3742))+(((-1.0)*r02*x3739)));
evalcond[3]=((((-1.0)*cj1*x3736))+((sj1*sj2))+((r22*x3733))+(((-1.0)*gconst104*r20*x3739))+((r21*x3740)));
evalcond[4]=(((r01*x3740))+(((-1.0)*gconst104*r00*x3739))+(((-1.0)*cj0*x3738))+((r02*x3733))+(((-1.0)*cj0*sj1*x3736)));
evalcond[5]=((((-1.0)*sj0*sj1*x3736))+((x3734*x3735))+((r12*x3733))+(((-1.0)*x3737*x3738))+(((-1.0)*gconst104*r10*x3739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3743=((-1.0)*r11);
IkReal x3745 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3745)==0){
continue;
}
IkReal x3744=pow(x3745,-0.5);
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal(x3743),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3746.value))));
IkReal gconst106=(x3743*x3744);
IkReal gconst107=((1.0)*r10*x3744);
CheckValue<IkReal> x3747 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3747.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3747.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3748=((-1.0)*r11);
CheckValue<IkReal> x3751 = IKatan2WithCheck(IkReal(x3748),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3751.valid){
continue;
}
IkReal x3749=((1.0)*(x3751.value));
IkReal x3750=x3744;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3749)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3749)));
IkReal gconst106=(x3748*x3750);
IkReal gconst107=((1.0)*r10*x3750);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3752=((-1.0)*r11);
CheckValue<IkReal> x3755 = IKatan2WithCheck(IkReal(x3752),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
IkReal x3753=((1.0)*(x3755.value));
IkReal x3754=x3744;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3753)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3753)));
IkReal gconst106=(x3752*x3754);
IkReal gconst107=((1.0)*r10*x3754);
IkReal x3756=r12*r12;
IkReal x3757=((1.0)*sj0);
IkReal x3758=(cj0*r02);
IkReal x3759=x3744;
j4eval[0]=((IKabs(((((-1.0)*r12*x3757))+(((-1.0)*x3758)))))+(IKabs((((sj0*x3756*x3759))+((r12*x3758*x3759))+(((-1.0)*x3757*x3759))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3760=((-1.0)*r11);
CheckValue<IkReal> x3763 = IKatan2WithCheck(IkReal(x3760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3763.valid){
continue;
}
IkReal x3761=((1.0)*(x3763.value));
IkReal x3762=x3744;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3761)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3761)));
IkReal gconst106=(x3760*x3762);
IkReal gconst107=((1.0)*r10*x3762);
IkReal x3764=r12*r12;
IkReal x3765=((1.0)+(((-1.0)*x3764)));
IkReal x3766=(r22*sj1*sj2);
IkReal x3767=(cj1*cj2*r22);
CheckValue<IkReal> x3774=IKPowWithIntegerCheck(x3765,-1);
if(!x3774.valid){
continue;
}
IkReal x3768=x3774.value;
CheckValue<IkReal> x3775=IKPowWithIntegerCheck(((-1.0)+x3764),-1);
if(!x3775.valid){
continue;
}
IkReal x3769=x3775.value;
IkReal x3770=((1.0)*x3768);
if((x3765) < -0.00001)
continue;
IkReal x3771=IKsqrt(x3765);
IkReal x3772=(r12*x3769*x3771);
IkReal x3773=((((-2.0)*r10*r11*r20*r21*x3768))+(((-1.0)*x3770*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3770*(r11*r11)*(r21*r21))));
j4eval[0]=x3773;
j4eval[1]=((IKabs(((((-1.0)*x3767))+x3766)))+(IKabs(((((-1.0)*x3766*x3772))+((x3767*x3772))))));
j4eval[2]=IKsign(x3773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3776=(sj1*sj2);
IkReal x3777=(gconst106*r21);
IkReal x3778=(gconst107*r20);
IkReal x3779=(cj1*cj2);
CheckValue<IkReal> x3780=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3777*x3777)))+(((2.0)*x3777*x3778))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3778*x3778))))),-1);
if(!x3780.valid){
continue;
}
CheckValue<IkReal> x3781 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3779))+((r22*x3776)))),IkReal(((((-1.0)*x3777*x3779))+((x3778*x3779))+((x3776*x3777))+(((-1.0)*x3776*x3778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3780.value)))+(x3781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3782=IKsin(j4);
IkReal x3783=IKcos(j4);
IkReal x3784=(gconst107*r10);
IkReal x3785=(gconst107*r00);
IkReal x3786=((1.0)*cj2);
IkReal x3787=(gconst107*r20);
IkReal x3788=((1.0)*sj0);
IkReal x3789=(cj1*sj2);
IkReal x3790=((1.0)*x3783);
IkReal x3791=(gconst106*x3783);
IkReal x3792=(gconst106*x3782);
IkReal x3793=((1.0)*x3782);
evalcond[0]=(((r21*x3792))+(((-1.0)*r22*x3790))+(((-1.0)*x3787*x3793)));
evalcond[1]=((((-1.0)*r12*x3790))+cj0+(((-1.0)*x3784*x3793))+((r11*x3792)));
evalcond[2]=((((-1.0)*x3788))+(((-1.0)*r02*x3790))+(((-1.0)*x3785*x3793))+((r01*x3792)));
evalcond[3]=(((r21*x3791))+((r22*x3782))+((sj1*sj2))+(((-1.0)*cj1*x3786))+(((-1.0)*x3787*x3790)));
evalcond[4]=(((r02*x3782))+(((-1.0)*cj0*x3789))+(((-1.0)*x3785*x3790))+((r01*x3791))+(((-1.0)*cj0*sj1*x3786)));
evalcond[5]=(((r12*x3782))+(((-1.0)*sj0*sj1*x3786))+(((-1.0)*x3784*x3790))+((r11*x3791))+(((-1.0)*x3788*x3789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3794=((1.0)*sj0);
IkReal x3795=((1.0)*gconst106);
CheckValue<IkReal> x3796 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3794))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3794))+(((-1.0)*cj0*r01*x3795))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3795)))),-1);
if(!x3797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3796.value)+(((1.5707963267949)*(x3797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3798=IKsin(j4);
IkReal x3799=IKcos(j4);
IkReal x3800=(gconst107*r10);
IkReal x3801=(gconst107*r00);
IkReal x3802=((1.0)*cj2);
IkReal x3803=(gconst107*r20);
IkReal x3804=((1.0)*sj0);
IkReal x3805=(cj1*sj2);
IkReal x3806=((1.0)*x3799);
IkReal x3807=(gconst106*x3799);
IkReal x3808=(gconst106*x3798);
IkReal x3809=((1.0)*x3798);
evalcond[0]=(((r21*x3808))+(((-1.0)*x3803*x3809))+(((-1.0)*r22*x3806)));
evalcond[1]=(((r11*x3808))+cj0+(((-1.0)*x3800*x3809))+(((-1.0)*r12*x3806)));
evalcond[2]=(((r01*x3808))+(((-1.0)*x3801*x3809))+(((-1.0)*x3804))+(((-1.0)*r02*x3806)));
evalcond[3]=(((r22*x3798))+((r21*x3807))+((sj1*sj2))+(((-1.0)*cj1*x3802))+(((-1.0)*x3803*x3806)));
evalcond[4]=(((r01*x3807))+(((-1.0)*x3801*x3806))+((r02*x3798))+(((-1.0)*cj0*x3805))+(((-1.0)*cj0*sj1*x3802)));
evalcond[5]=((((-1.0)*sj0*sj1*x3802))+((r11*x3807))+(((-1.0)*x3800*x3806))+((r12*x3798))+(((-1.0)*x3804*x3805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3810=((1.0)*gconst107);
CheckValue<IkReal> x3811 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3811.valid){
continue;
}
CheckValue<IkReal> x3812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3810))+(((-1.0)*gconst106*r00)))),-1);
if(!x3812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3811.value)+(((1.5707963267949)*(x3812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3813=IKsin(j4);
IkReal x3814=IKcos(j4);
IkReal x3815=(gconst107*r10);
IkReal x3816=(gconst107*r00);
IkReal x3817=((1.0)*cj2);
IkReal x3818=(gconst107*r20);
IkReal x3819=((1.0)*sj0);
IkReal x3820=(cj1*sj2);
IkReal x3821=((1.0)*x3814);
IkReal x3822=(gconst106*x3814);
IkReal x3823=(gconst106*x3813);
IkReal x3824=((1.0)*x3813);
evalcond[0]=((((-1.0)*r22*x3821))+(((-1.0)*x3818*x3824))+((r21*x3823)));
evalcond[1]=((((-1.0)*r12*x3821))+(((-1.0)*x3815*x3824))+cj0+((r11*x3823)));
evalcond[2]=((((-1.0)*r02*x3821))+(((-1.0)*x3819))+(((-1.0)*x3816*x3824))+((r01*x3823)));
evalcond[3]=((((-1.0)*cj1*x3817))+((sj1*sj2))+((r22*x3813))+(((-1.0)*x3818*x3821))+((r21*x3822)));
evalcond[4]=((((-1.0)*cj0*x3820))+((r02*x3813))+(((-1.0)*x3816*x3821))+(((-1.0)*cj0*sj1*x3817))+((r01*x3822)));
evalcond[5]=(((r12*x3813))+(((-1.0)*sj0*sj1*x3817))+(((-1.0)*x3815*x3821))+((r11*x3822))+(((-1.0)*x3819*x3820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3825=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3825;
j4eval[1]=IKsign(x3825);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3826=((1.0)*cj5);
IkReal x3827=((((-1.0)*r01*x3826))+(((-1.0)*r00*sj5)));
j4eval[0]=x3827;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3826)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3828=(sj1*sj2);
IkReal x3829=(cj5*r10);
IkReal x3830=(r11*sj5);
IkReal x3831=(cj1*cj2);
IkReal x3832=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3832;
j4eval[1]=((IKabs((((r12*x3831))+(((-1.0)*r12*x3828)))))+(IKabs(((((-1.0)*x3830*x3831))+((x3828*x3830))+((x3829*x3831))+(((-1.0)*x3828*x3829))))));
j4eval[2]=IKsign(x3832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3833=(sj1*sj2);
IkReal x3834=(cj5*r10);
IkReal x3835=(r11*sj5);
IkReal x3836=(cj1*cj2);
CheckValue<IkReal> x3837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3837.valid){
continue;
}
CheckValue<IkReal> x3838 = IKatan2WithCheck(IkReal((((x3834*x3836))+(((-1.0)*x3833*x3834))+((x3833*x3835))+(((-1.0)*x3835*x3836)))),IkReal(((((-1.0)*r12*x3833))+((r12*x3836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3837.value)))+(x3838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3839=IKcos(j4);
IkReal x3840=IKsin(j4);
IkReal x3841=(cj5*r00);
IkReal x3842=(cj5*r10);
IkReal x3843=(r21*sj5);
IkReal x3844=((1.0)*cj2);
IkReal x3845=(cj5*r20);
IkReal x3846=((1.0)*x3839);
IkReal x3847=((1.0)*x3840);
IkReal x3848=(sj5*x3840);
IkReal x3849=(sj5*x3839);
evalcond[0]=(((r12*x3840))+(((-1.0)*x3842*x3846))+((r11*x3849)));
evalcond[1]=((((-1.0)*x3845*x3847))+((x3840*x3843))+(((-1.0)*r22*x3846)));
evalcond[2]=((((-1.0)*r02*x3846))+(((-1.0)*x3841*x3847))+((r01*x3848)));
evalcond[3]=((1.0)+(((-1.0)*x3842*x3847))+(((-1.0)*r12*x3846))+((r11*x3848)));
evalcond[4]=((((-1.0)*x3845*x3846))+((x3839*x3843))+((sj1*sj2))+(((-1.0)*cj1*x3844))+((r22*x3840)));
evalcond[5]=((((-1.0)*sj1*x3844))+(((-1.0)*cj1*sj2))+(((-1.0)*x3841*x3846))+((r01*x3849))+((r02*x3840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3850=((1.0)*cj5);
CheckValue<IkReal> x3851=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3850)))),-1);
if(!x3851.valid){
continue;
}
CheckValue<IkReal> x3852 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3850))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3851.value)))+(x3852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3853=IKcos(j4);
IkReal x3854=IKsin(j4);
IkReal x3855=(cj5*r00);
IkReal x3856=(cj5*r10);
IkReal x3857=(r21*sj5);
IkReal x3858=((1.0)*cj2);
IkReal x3859=(cj5*r20);
IkReal x3860=((1.0)*x3853);
IkReal x3861=((1.0)*x3854);
IkReal x3862=(sj5*x3854);
IkReal x3863=(sj5*x3853);
evalcond[0]=(((r11*x3863))+(((-1.0)*x3856*x3860))+((r12*x3854)));
evalcond[1]=(((x3854*x3857))+(((-1.0)*x3859*x3861))+(((-1.0)*r22*x3860)));
evalcond[2]=((((-1.0)*r02*x3860))+((r01*x3862))+(((-1.0)*x3855*x3861)));
evalcond[3]=((1.0)+((r11*x3862))+(((-1.0)*x3856*x3861))+(((-1.0)*r12*x3860)));
evalcond[4]=((((-1.0)*x3859*x3860))+((sj1*sj2))+((x3853*x3857))+(((-1.0)*cj1*x3858))+((r22*x3854)));
evalcond[5]=(((r02*x3854))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3858))+((r01*x3863))+(((-1.0)*x3855*x3860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3864=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3864.valid){
continue;
}
CheckValue<IkReal> x3865 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3864.value)))+(x3865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3866=IKcos(j4);
IkReal x3867=IKsin(j4);
IkReal x3868=(cj5*r00);
IkReal x3869=(cj5*r10);
IkReal x3870=(r21*sj5);
IkReal x3871=((1.0)*cj2);
IkReal x3872=(cj5*r20);
IkReal x3873=((1.0)*x3866);
IkReal x3874=((1.0)*x3867);
IkReal x3875=(sj5*x3867);
IkReal x3876=(sj5*x3866);
evalcond[0]=((((-1.0)*x3869*x3873))+((r11*x3876))+((r12*x3867)));
evalcond[1]=(((x3867*x3870))+(((-1.0)*r22*x3873))+(((-1.0)*x3872*x3874)));
evalcond[2]=(((r01*x3875))+(((-1.0)*r02*x3873))+(((-1.0)*x3868*x3874)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3873))+(((-1.0)*x3869*x3874))+((r11*x3875)));
evalcond[4]=(((x3866*x3870))+((sj1*sj2))+(((-1.0)*cj1*x3871))+((r22*x3867))+(((-1.0)*x3872*x3873)));
evalcond[5]=(((r02*x3867))+((r01*x3876))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3871))+(((-1.0)*x3868*x3873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3877=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3877;
j4eval[1]=IKsign(x3877);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3878=((1.0)*cj5);
IkReal x3879=((((-1.0)*r21*x3878))+(((-1.0)*r20*sj5)));
j4eval[0]=x3879;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3878))))));
j4eval[2]=IKsign(x3879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3880=cj5*cj5;
IkReal x3881=r11*r11;
IkReal x3882=(r11*sj5);
IkReal x3883=(cj5*r10);
IkReal x3884=((r12*r12)+((x3880*(r10*r10)))+(((-2.0)*x3882*x3883))+x3881+(((-1.0)*x3880*x3881)));
j4eval[0]=x3884;
j4eval[1]=IKsign(x3884);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3883))+x3882))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3885=cj5*cj5;
IkReal x3886=r11*r11;
IkReal x3887=(cj5*r10);
IkReal x3888=(r11*sj5);
CheckValue<IkReal> x3889 = IKatan2WithCheck(IkReal(((((-1.0)*x3887))+x3888)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3887*x3888))+(((-1.0)*x3885*x3886))+x3886+((x3885*(r10*r10))))),-1);
if(!x3890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3889.value)+(((1.5707963267949)*(x3890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3891=IKcos(j4);
IkReal x3892=IKsin(j4);
IkReal x3893=(cj5*r00);
IkReal x3894=(cj5*r10);
IkReal x3895=(r21*sj5);
IkReal x3896=(cj5*r20);
IkReal x3897=((1.0)*x3891);
IkReal x3898=((1.0)*x3892);
IkReal x3899=(sj5*x3892);
IkReal x3900=(sj5*x3891);
evalcond[0]=((((-1.0)*x3894*x3897))+((r12*x3892))+((r11*x3900)));
evalcond[1]=((((-1.0)*x3896*x3898))+(((-1.0)*r22*x3897))+((x3892*x3895)));
evalcond[2]=(((r01*x3899))+(((-1.0)*x3893*x3898))+(((-1.0)*r02*x3897)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3897))+((r11*x3899))+(((-1.0)*x3894*x3898)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3900))+(((-1.0)*x3893*x3897))+((r02*x3892)));
evalcond[5]=((((-1.0)*x3896*x3897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3891*x3895))+((r22*x3892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3901=((1.0)*cj5);
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3901))+(((-1.0)*r20*sj5)))),-1);
if(!x3903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3902.value)+(((1.5707963267949)*(x3903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3904=IKcos(j4);
IkReal x3905=IKsin(j4);
IkReal x3906=(cj5*r00);
IkReal x3907=(cj5*r10);
IkReal x3908=(r21*sj5);
IkReal x3909=(cj5*r20);
IkReal x3910=((1.0)*x3904);
IkReal x3911=((1.0)*x3905);
IkReal x3912=(sj5*x3905);
IkReal x3913=(sj5*x3904);
evalcond[0]=((((-1.0)*x3907*x3910))+((r12*x3905))+((r11*x3913)));
evalcond[1]=((((-1.0)*r22*x3910))+((x3905*x3908))+(((-1.0)*x3909*x3911)));
evalcond[2]=((((-1.0)*x3906*x3911))+(((-1.0)*r02*x3910))+((r01*x3912)));
evalcond[3]=((-1.0)+(((-1.0)*x3907*x3911))+((r11*x3912))+(((-1.0)*r12*x3910)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3906*x3910))+((cj1*sj2))+((r01*x3913))+((r02*x3905)));
evalcond[5]=(((r22*x3905))+(((-1.0)*x3909*x3910))+((x3904*x3908))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3914 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3914.valid){
continue;
}
CheckValue<IkReal> x3915=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3914.value)+(((1.5707963267949)*(x3915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3916=IKcos(j4);
IkReal x3917=IKsin(j4);
IkReal x3918=(cj5*r00);
IkReal x3919=(cj5*r10);
IkReal x3920=(r21*sj5);
IkReal x3921=(cj5*r20);
IkReal x3922=((1.0)*x3916);
IkReal x3923=((1.0)*x3917);
IkReal x3924=(sj5*x3917);
IkReal x3925=(sj5*x3916);
evalcond[0]=(((r11*x3925))+(((-1.0)*x3919*x3922))+((r12*x3917)));
evalcond[1]=(((x3917*x3920))+(((-1.0)*x3921*x3923))+(((-1.0)*r22*x3922)));
evalcond[2]=((((-1.0)*r02*x3922))+(((-1.0)*x3918*x3923))+((r01*x3924)));
evalcond[3]=((-1.0)+((r11*x3924))+(((-1.0)*r12*x3922))+(((-1.0)*x3919*x3923)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3918*x3922))+((r02*x3917))+((r01*x3925)));
evalcond[5]=(((x3916*x3920))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3921*x3922))+((r22*x3917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3926=((-1.0)*r00);
IkReal x3928 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3928)==0){
continue;
}
IkReal x3927=pow(x3928,-0.5);
CheckValue<IkReal> x3929 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3926),IKFAST_ATAN2_MAGTHRESH);
if(!x3929.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3929.value));
IkReal gconst109=(r01*x3927);
IkReal gconst110=(x3926*x3927);
CheckValue<IkReal> x3930 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3930.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3930.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3931=((-1.0)*r00);
IkReal x3932=x3927;
CheckValue<IkReal> x3934 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3931),IKFAST_ATAN2_MAGTHRESH);
if(!x3934.valid){
continue;
}
IkReal x3933=((-1.0)*(x3934.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3933;
IkReal gconst108=x3933;
IkReal gconst109=(r01*x3932);
IkReal gconst110=(x3931*x3932);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3935=((1.0)*sj0);
IkReal x3936=((1.0)*gconst109);
CheckValue<IkReal> x3937 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3935)))),IkReal(((((-1.0)*gconst109*r11*x3935))+(((-1.0)*cj0*r01*x3936))+((cj0*gconst110*r00))+((gconst110*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3937.valid){
continue;
}
CheckValue<IkReal> x3938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3936))+(((-1.0)*gconst110*r21)))),-1);
if(!x3938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3937.value)+(((1.5707963267949)*(x3938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3939=IKsin(j4);
IkReal x3940=IKcos(j4);
IkReal x3941=(gconst109*r21);
IkReal x3942=((1.0)*cj2);
IkReal x3943=((1.0)*sj0);
IkReal x3944=(cj1*sj2);
IkReal x3945=((1.0)*x3940);
IkReal x3946=(gconst109*x3939);
IkReal x3947=(gconst109*x3940);
IkReal x3948=((1.0)*gconst110*x3939);
evalcond[0]=(((x3939*x3941))+(((-1.0)*r22*x3945))+(((-1.0)*r20*x3948)));
evalcond[1]=(cj0+(((-1.0)*r10*x3948))+(((-1.0)*r12*x3945))+((r11*x3946)));
evalcond[2]=(((r01*x3946))+(((-1.0)*r00*x3948))+(((-1.0)*r02*x3945))+(((-1.0)*x3943)));
evalcond[3]=(((r22*x3939))+(((-1.0)*cj1*x3942))+((x3940*x3941))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3945)));
evalcond[4]=(((r01*x3947))+(((-1.0)*cj0*x3944))+(((-1.0)*cj0*sj1*x3942))+(((-1.0)*gconst110*r00*x3945))+((r02*x3939)));
evalcond[5]=((((-1.0)*sj0*sj1*x3942))+(((-1.0)*gconst110*r10*x3945))+((r12*x3939))+(((-1.0)*x3943*x3944))+((r11*x3947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3949=((1.0)*gconst110);
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3949))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
CheckValue<IkReal> x3951=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3949)))),-1);
if(!x3951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3950.value)+(((1.5707963267949)*(x3951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3952=IKsin(j4);
IkReal x3953=IKcos(j4);
IkReal x3954=(gconst109*r21);
IkReal x3955=((1.0)*cj2);
IkReal x3956=((1.0)*sj0);
IkReal x3957=(cj1*sj2);
IkReal x3958=((1.0)*x3953);
IkReal x3959=(gconst109*x3952);
IkReal x3960=(gconst109*x3953);
IkReal x3961=((1.0)*gconst110*x3952);
evalcond[0]=((((-1.0)*r20*x3961))+(((-1.0)*r22*x3958))+((x3952*x3954)));
evalcond[1]=(cj0+(((-1.0)*r10*x3961))+(((-1.0)*r12*x3958))+((r11*x3959)));
evalcond[2]=(((r01*x3959))+(((-1.0)*x3956))+(((-1.0)*r02*x3958))+(((-1.0)*r00*x3961)));
evalcond[3]=(((x3953*x3954))+((sj1*sj2))+(((-1.0)*cj1*x3955))+(((-1.0)*gconst110*r20*x3958))+((r22*x3952)));
evalcond[4]=((((-1.0)*cj0*sj1*x3955))+(((-1.0)*cj0*x3957))+((r02*x3952))+((r01*x3960))+(((-1.0)*gconst110*r00*x3958)));
evalcond[5]=((((-1.0)*x3956*x3957))+((r11*x3960))+(((-1.0)*sj0*sj1*x3955))+(((-1.0)*gconst110*r10*x3958))+((r12*x3952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3962=((-1.0)*r01);
IkReal x3964 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3964)==0){
continue;
}
IkReal x3963=pow(x3964,-0.5);
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal(x3962),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3965.value))));
IkReal gconst112=(x3962*x3963);
IkReal gconst113=((1.0)*r00*x3963);
CheckValue<IkReal> x3966 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3966.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3966.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3967=((-1.0)*r01);
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal(x3967),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
IkReal x3968=((1.0)*(x3970.value));
IkReal x3969=x3963;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3968)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3968)));
IkReal gconst112=(x3967*x3969);
IkReal gconst113=((1.0)*r00*x3969);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3971=((-1.0)*r01);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(x3971),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal x3972=((1.0)*(x3974.value));
IkReal x3973=x3963;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3972)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3972)));
IkReal gconst112=(x3971*x3973);
IkReal gconst113=((1.0)*r00*x3973);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3975=((-1.0)*r01);
CheckValue<IkReal> x3978 = IKatan2WithCheck(IkReal(x3975),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3978.valid){
continue;
}
IkReal x3976=((1.0)*(x3978.value));
IkReal x3977=x3963;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3976)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3976)));
IkReal gconst112=(x3975*x3977);
IkReal gconst113=((1.0)*r00*x3977);
IkReal x3979=r02*r02;
IkReal x3980=(r12*sj0);
IkReal x3981=((1.0)*cj0);
IkReal x3982=x3963;
j4eval[0]=((IKabs(((((-1.0)*r02*x3981))+(((-1.0)*x3980)))))+(IKabs(((((-1.0)*x3981*x3982))+((r02*x3980*x3982))+((cj0*x3979*x3982))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3983=((1.0)*sj0);
IkReal x3984=((1.0)*gconst112);
CheckValue<IkReal> x3985 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3983))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3984))+(((-1.0)*gconst112*r11*x3983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3985.valid){
continue;
}
CheckValue<IkReal> x3986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3984))+(((-1.0)*gconst113*r21)))),-1);
if(!x3986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3985.value)+(((1.5707963267949)*(x3986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3987=IKsin(j4);
IkReal x3988=IKcos(j4);
IkReal x3989=(gconst113*r20);
IkReal x3990=(gconst112*r21);
IkReal x3991=((1.0)*cj2);
IkReal x3992=(gconst113*r00);
IkReal x3993=(gconst113*r10);
IkReal x3994=((1.0)*sj0);
IkReal x3995=(cj1*sj2);
IkReal x3996=((1.0)*x3988);
IkReal x3997=((1.0)*x3987);
IkReal x3998=(gconst112*x3988);
IkReal x3999=(gconst112*x3987);
evalcond[0]=(((x3987*x3990))+(((-1.0)*x3989*x3997))+(((-1.0)*r22*x3996)));
evalcond[1]=((((-1.0)*x3993*x3997))+cj0+(((-1.0)*r12*x3996))+((r11*x3999)));
evalcond[2]=((((-1.0)*x3994))+(((-1.0)*r02*x3996))+(((-1.0)*x3992*x3997))+((r01*x3999)));
evalcond[3]=((((-1.0)*x3989*x3996))+((sj1*sj2))+((x3988*x3990))+((r22*x3987))+(((-1.0)*cj1*x3991)));
evalcond[4]=((((-1.0)*cj0*sj1*x3991))+(((-1.0)*x3992*x3996))+(((-1.0)*cj0*x3995))+((r01*x3998))+((r02*x3987)));
evalcond[5]=((((-1.0)*x3993*x3996))+((r11*x3998))+(((-1.0)*sj0*sj1*x3991))+(((-1.0)*x3994*x3995))+((r12*x3987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4000=((1.0)*gconst113);
CheckValue<IkReal> x4001 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4001.valid){
continue;
}
CheckValue<IkReal> x4002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4000))+(((-1.0)*gconst112*r10)))),-1);
if(!x4002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4001.value)+(((1.5707963267949)*(x4002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4003=IKsin(j4);
IkReal x4004=IKcos(j4);
IkReal x4005=(gconst113*r20);
IkReal x4006=(gconst112*r21);
IkReal x4007=((1.0)*cj2);
IkReal x4008=(gconst113*r00);
IkReal x4009=(gconst113*r10);
IkReal x4010=((1.0)*sj0);
IkReal x4011=(cj1*sj2);
IkReal x4012=((1.0)*x4004);
IkReal x4013=((1.0)*x4003);
IkReal x4014=(gconst112*x4004);
IkReal x4015=(gconst112*x4003);
evalcond[0]=((((-1.0)*r22*x4012))+((x4003*x4006))+(((-1.0)*x4005*x4013)));
evalcond[1]=((((-1.0)*r12*x4012))+cj0+(((-1.0)*x4009*x4013))+((r11*x4015)));
evalcond[2]=((((-1.0)*r02*x4012))+((r01*x4015))+(((-1.0)*x4010))+(((-1.0)*x4008*x4013)));
evalcond[3]=(((sj1*sj2))+((r22*x4003))+((x4004*x4006))+(((-1.0)*cj1*x4007))+(((-1.0)*x4005*x4012)));
evalcond[4]=((((-1.0)*cj0*x4011))+((r01*x4014))+((r02*x4003))+(((-1.0)*x4008*x4012))+(((-1.0)*cj0*sj1*x4007)));
evalcond[5]=(((r12*x4003))+(((-1.0)*sj0*sj1*x4007))+(((-1.0)*x4009*x4012))+((r11*x4014))+(((-1.0)*x4010*x4011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4016=((1.0)*gconst113);
CheckValue<IkReal> x4017=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x4016)))),-1);
if(!x4017.valid){
continue;
}
CheckValue<IkReal> x4018 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4017.value)))+(x4018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4019=IKsin(j4);
IkReal x4020=IKcos(j4);
IkReal x4021=(gconst113*r20);
IkReal x4022=(gconst112*r21);
IkReal x4023=((1.0)*cj2);
IkReal x4024=(gconst113*r00);
IkReal x4025=(gconst113*r10);
IkReal x4026=((1.0)*sj0);
IkReal x4027=(cj1*sj2);
IkReal x4028=((1.0)*x4020);
IkReal x4029=((1.0)*x4019);
IkReal x4030=(gconst112*x4020);
IkReal x4031=(gconst112*x4019);
evalcond[0]=((((-1.0)*r22*x4028))+((x4019*x4022))+(((-1.0)*x4021*x4029)));
evalcond[1]=((((-1.0)*r12*x4028))+cj0+(((-1.0)*x4025*x4029))+((r11*x4031)));
evalcond[2]=((((-1.0)*x4024*x4029))+(((-1.0)*r02*x4028))+(((-1.0)*x4026))+((r01*x4031)));
evalcond[3]=(((x4020*x4022))+((sj1*sj2))+(((-1.0)*cj1*x4023))+((r22*x4019))+(((-1.0)*x4021*x4028)));
evalcond[4]=(((r02*x4019))+(((-1.0)*cj0*x4027))+(((-1.0)*x4024*x4028))+(((-1.0)*cj0*sj1*x4023))+((r01*x4030)));
evalcond[5]=((((-1.0)*sj0*sj1*x4023))+(((-1.0)*x4025*x4028))+(((-1.0)*x4026*x4027))+((r12*x4019))+((r11*x4030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4032=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4032;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4033=((1.0)*cj5);
IkReal x4034=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4033)));
j4eval[0]=x4034;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4033))))));
j4eval[2]=IKsign(x4034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4035=cj5*cj5;
IkReal x4036=r01*r01;
IkReal x4037=(cj5*r00);
IkReal x4038=(r01*sj5);
IkReal x4039=(((x4035*(r00*r00)))+(((-2.0)*x4037*x4038))+x4036+(((-1.0)*x4035*x4036))+(r02*r02));
j4eval[0]=x4039;
j4eval[1]=IKsign(x4039);
j4eval[2]=((IKabs(r02))+(IKabs((x4038+(((-1.0)*x4037))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4040=cj5*cj5;
IkReal x4041=r01*r01;
IkReal x4042=(r01*sj5);
IkReal x4043=(cj5*r00);
CheckValue<IkReal> x4044=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4042*x4043))+((x4040*(r00*r00)))+x4041+(((-1.0)*x4040*x4041))+(r02*r02))),-1);
if(!x4044.valid){
continue;
}
CheckValue<IkReal> x4045 = IKatan2WithCheck(IkReal((x4042+(((-1.0)*x4043)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4044.value)))+(x4045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4046=IKcos(j4);
IkReal x4047=IKsin(j4);
IkReal x4048=(cj5*r00);
IkReal x4049=(cj5*r10);
IkReal x4050=(r21*sj5);
IkReal x4051=((1.0)*cj2);
IkReal x4052=(cj5*r20);
IkReal x4053=((1.0)*x4046);
IkReal x4054=((1.0)*x4047);
IkReal x4055=(sj5*x4047);
IkReal x4056=(sj5*x4046);
evalcond[0]=(((r02*x4047))+((r01*x4056))+(((-1.0)*x4048*x4053)));
evalcond[1]=((((-1.0)*x4052*x4054))+((x4047*x4050))+(((-1.0)*r22*x4053)));
evalcond[2]=((((-1.0)*r12*x4053))+((r11*x4055))+(((-1.0)*x4049*x4054)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4053))+((r01*x4055))+(((-1.0)*x4048*x4054)));
evalcond[4]=(((r22*x4047))+(((-1.0)*x4052*x4053))+((x4046*x4050))+((sj1*sj2))+(((-1.0)*cj1*x4051)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4056))+((r12*x4047))+(((-1.0)*x4049*x4053))+(((-1.0)*sj1*x4051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4057=((1.0)*cj5);
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4057)))),-1);
if(!x4058.valid){
continue;
}
CheckValue<IkReal> x4059 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4057))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4058.value)))+(x4059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4060=IKcos(j4);
IkReal x4061=IKsin(j4);
IkReal x4062=(cj5*r00);
IkReal x4063=(cj5*r10);
IkReal x4064=(r21*sj5);
IkReal x4065=((1.0)*cj2);
IkReal x4066=(cj5*r20);
IkReal x4067=((1.0)*x4060);
IkReal x4068=((1.0)*x4061);
IkReal x4069=(sj5*x4061);
IkReal x4070=(sj5*x4060);
evalcond[0]=(((r02*x4061))+((r01*x4070))+(((-1.0)*x4062*x4067)));
evalcond[1]=(((x4061*x4064))+(((-1.0)*x4066*x4068))+(((-1.0)*r22*x4067)));
evalcond[2]=((((-1.0)*r12*x4067))+(((-1.0)*x4063*x4068))+((r11*x4069)));
evalcond[3]=((-1.0)+(((-1.0)*x4062*x4068))+(((-1.0)*r02*x4067))+((r01*x4069)));
evalcond[4]=(((x4060*x4064))+(((-1.0)*x4066*x4067))+((sj1*sj2))+(((-1.0)*cj1*x4065))+((r22*x4061)));
evalcond[5]=((((-1.0)*x4063*x4067))+(((-1.0)*cj1*sj2))+((r12*x4061))+((r11*x4070))+(((-1.0)*sj1*x4065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4071=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4071.value)))+(x4072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4073=IKcos(j4);
IkReal x4074=IKsin(j4);
IkReal x4075=(cj5*r00);
IkReal x4076=(cj5*r10);
IkReal x4077=(r21*sj5);
IkReal x4078=((1.0)*cj2);
IkReal x4079=(cj5*r20);
IkReal x4080=((1.0)*x4073);
IkReal x4081=((1.0)*x4074);
IkReal x4082=(sj5*x4074);
IkReal x4083=(sj5*x4073);
evalcond[0]=(((r01*x4083))+(((-1.0)*x4075*x4080))+((r02*x4074)));
evalcond[1]=(((x4074*x4077))+(((-1.0)*r22*x4080))+(((-1.0)*x4079*x4081)));
evalcond[2]=((((-1.0)*r12*x4080))+((r11*x4082))+(((-1.0)*x4076*x4081)));
evalcond[3]=((-1.0)+((r01*x4082))+(((-1.0)*r02*x4080))+(((-1.0)*x4075*x4081)));
evalcond[4]=(((r22*x4074))+((sj1*sj2))+(((-1.0)*cj1*x4078))+((x4073*x4077))+(((-1.0)*x4079*x4080)));
evalcond[5]=(((r12*x4074))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4078))+((r11*x4083))+(((-1.0)*x4076*x4080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4084=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4084;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4085=((1.0)*cj5);
IkReal x4086=((((-1.0)*r21*x4085))+(((-1.0)*r20*sj5)));
j4eval[0]=x4086;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4085))))));
j4eval[2]=IKsign(x4086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4087=cj5*cj5;
IkReal x4088=r01*r01;
IkReal x4089=(r01*sj5);
IkReal x4090=(cj5*r00);
IkReal x4091=(((x4087*x4088))+(((-1.0)*x4087*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4089*x4090))+(((-1.0)*x4088)));
j4eval[0]=x4091;
j4eval[1]=IKsign(x4091);
j4eval[2]=((IKabs(r02))+(IKabs((x4089+(((-1.0)*x4090))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4092=cj5*cj5;
IkReal x4093=r01*r01;
IkReal x4094=(r01*sj5);
IkReal x4095=(cj5*r00);
CheckValue<IkReal> x4096=IKPowWithIntegerCheck(IKsign(((((2.0)*x4094*x4095))+(((-1.0)*x4092*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4093))+((x4092*x4093)))),-1);
if(!x4096.valid){
continue;
}
CheckValue<IkReal> x4097 = IKatan2WithCheck(IkReal((x4094+(((-1.0)*x4095)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4096.value)))+(x4097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4098=IKcos(j4);
IkReal x4099=IKsin(j4);
IkReal x4100=(cj5*r00);
IkReal x4101=(cj5*r10);
IkReal x4102=(r21*sj5);
IkReal x4103=(cj5*r20);
IkReal x4104=((1.0)*x4098);
IkReal x4105=((1.0)*x4099);
IkReal x4106=(sj5*x4099);
IkReal x4107=(sj5*x4098);
evalcond[0]=(((r02*x4099))+(((-1.0)*x4100*x4104))+((r01*x4107)));
evalcond[1]=(((x4099*x4102))+(((-1.0)*r22*x4104))+(((-1.0)*x4103*x4105)));
evalcond[2]=((((-1.0)*r12*x4104))+((r11*x4106))+(((-1.0)*x4101*x4105)));
evalcond[3]=((1.0)+(((-1.0)*x4100*x4105))+((r01*x4106))+(((-1.0)*r02*x4104)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4099))+((r11*x4107))+(((-1.0)*x4101*x4104)));
evalcond[5]=(((x4098*x4102))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4099))+(((-1.0)*x4103*x4104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4108=((1.0)*cj5);
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4108))+(((-1.0)*r20*sj5)))),-1);
if(!x4109.valid){
continue;
}
CheckValue<IkReal> x4110 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4108))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4109.value)))+(x4110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4111=IKcos(j4);
IkReal x4112=IKsin(j4);
IkReal x4113=(cj5*r00);
IkReal x4114=(cj5*r10);
IkReal x4115=(r21*sj5);
IkReal x4116=(cj5*r20);
IkReal x4117=((1.0)*x4111);
IkReal x4118=((1.0)*x4112);
IkReal x4119=(sj5*x4112);
IkReal x4120=(sj5*x4111);
evalcond[0]=(((r02*x4112))+(((-1.0)*x4113*x4117))+((r01*x4120)));
evalcond[1]=(((x4112*x4115))+(((-1.0)*r22*x4117))+(((-1.0)*x4116*x4118)));
evalcond[2]=((((-1.0)*r12*x4117))+(((-1.0)*x4114*x4118))+((r11*x4119)));
evalcond[3]=((1.0)+(((-1.0)*x4113*x4118))+(((-1.0)*r02*x4117))+((r01*x4119)));
evalcond[4]=(((r12*x4112))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4114*x4117))+((r11*x4120)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4116*x4117))+((r22*x4112))+((x4111*x4115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4121 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4121.valid){
continue;
}
CheckValue<IkReal> x4122=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4121.value)+(((1.5707963267949)*(x4122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4123=IKcos(j4);
IkReal x4124=IKsin(j4);
IkReal x4125=(cj5*r00);
IkReal x4126=(cj5*r10);
IkReal x4127=(r21*sj5);
IkReal x4128=(cj5*r20);
IkReal x4129=((1.0)*x4123);
IkReal x4130=((1.0)*x4124);
IkReal x4131=(sj5*x4124);
IkReal x4132=(sj5*x4123);
evalcond[0]=(((r02*x4124))+((r01*x4132))+(((-1.0)*x4125*x4129)));
evalcond[1]=((((-1.0)*r22*x4129))+(((-1.0)*x4128*x4130))+((x4124*x4127)));
evalcond[2]=((((-1.0)*r12*x4129))+(((-1.0)*x4126*x4130))+((r11*x4131)));
evalcond[3]=((1.0)+(((-1.0)*x4125*x4130))+((r01*x4131))+(((-1.0)*r02*x4129)));
evalcond[4]=(((r12*x4124))+((cj2*sj1))+((cj1*sj2))+((r11*x4132))+(((-1.0)*x4126*x4129)));
evalcond[5]=((((-1.0)*x4128*x4129))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4124))+((x4123*x4127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4133=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4133);
rxp1_1=(px*r21);
rxp1_2=(r11*x4133);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4134=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4134);
rxp1_1=(px*r21);
rxp1_2=(r11*x4134);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4135=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4135);
rxp1_1=(px*r21);
rxp1_2=(r11*x4135);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4138=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4138.valid){
continue;
}
IkReal x4136=x4138.value;
IkReal x4137=(sj0*x4136);
cj4array[0]=(((cj2*sj1*x4137))+((cj1*sj2*x4137)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4139=IKsin(j4);
IkReal x4140=IKcos(j4);
IkReal x4141=(r21*sj5);
IkReal x4142=((1.0)*cj5*r20);
evalcond[0]=(r02*x4139);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4140)));
evalcond[2]=(((x4139*x4141))+(((-1.0)*x4139*x4142)));
evalcond[3]=((((-1.0)*cj5*r10*x4139))+((r11*sj5*x4139)));
evalcond[4]=((((-1.0)*x4140*x4142))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4140*x4141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4144=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4144.valid){
continue;
}
IkReal x4143=x4144.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4143))+((cj1*cj2*x4143)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4145=IKsin(j4);
IkReal x4146=IKcos(j4);
IkReal x4147=((1.0)*sj0);
IkReal x4148=((1.0)*cj5);
IkReal x4149=(sj5*x4145);
evalcond[0]=(r02*x4145);
evalcond[1]=((((-1.0)*x4147))+(((-1.0)*r02*x4146)));
evalcond[2]=(((r21*x4149))+(((-1.0)*r20*x4145*x4148)));
evalcond[3]=(((r11*x4149))+(((-1.0)*r10*x4145*x4148)));
evalcond[4]=((((-1.0)*r10*x4146*x4148))+((r11*sj5*x4146))+(((-1.0)*cj1*sj2*x4147))+(((-1.0)*cj2*sj1*x4147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(r02,-1);
if(!x4150.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4150.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4151=IKsin(j4);
IkReal x4152=IKcos(j4);
IkReal x4153=((1.0)*cj1);
IkReal x4154=(r21*sj5);
IkReal x4155=((1.0)*cj5);
IkReal x4156=(r11*sj5);
evalcond[0]=(r02*x4151);
evalcond[1]=((((-1.0)*r20*x4151*x4155))+((x4151*x4154)));
evalcond[2]=((((-1.0)*r10*x4151*x4155))+((x4151*x4156)));
evalcond[3]=(((x4152*x4154))+(((-1.0)*r20*x4152*x4155))+((sj1*sj2))+(((-1.0)*cj2*x4153)));
evalcond[4]=(((x4152*x4156))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4153))+(((-1.0)*r10*x4152*x4155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4157=((1.0)*sj0);
IkReal x4158=((1.0)*cj0);
CheckValue<IkReal> x4159 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4158))+(((-1.0)*r12*x4157)))),IkReal(((((-1.0)*r01*sj5*x4158))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4159.valid){
continue;
}
CheckValue<IkReal> x4160=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4159.value)+(((1.5707963267949)*(x4160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4161=IKsin(j4);
IkReal x4162=IKcos(j4);
IkReal x4163=(cj5*r00);
IkReal x4164=(cj5*r10);
IkReal x4165=(r21*sj5);
IkReal x4166=((1.0)*cj2);
IkReal x4167=((1.0)*sj0);
IkReal x4168=(cj1*sj2);
IkReal x4169=(cj5*r20);
IkReal x4170=((1.0)*x4162);
IkReal x4171=((1.0)*x4161);
IkReal x4172=(sj5*x4161);
IkReal x4173=(sj5*x4162);
evalcond[0]=((((-1.0)*x4169*x4171))+(((-1.0)*r22*x4170))+((x4161*x4165)));
evalcond[1]=(((r11*x4172))+cj0+(((-1.0)*x4164*x4171))+(((-1.0)*r12*x4170)));
evalcond[2]=((((-1.0)*x4167))+(((-1.0)*x4163*x4171))+((r01*x4172))+(((-1.0)*r02*x4170)));
evalcond[3]=(((r22*x4161))+(((-1.0)*cj1*x4166))+((sj1*sj2))+(((-1.0)*x4169*x4170))+((x4162*x4165)));
evalcond[4]=((((-1.0)*cj0*sj1*x4166))+(((-1.0)*x4163*x4170))+((r02*x4161))+(((-1.0)*cj0*x4168))+((r01*x4173)));
evalcond[5]=(((r11*x4173))+(((-1.0)*x4164*x4170))+((r12*x4161))+(((-1.0)*x4167*x4168))+(((-1.0)*sj0*sj1*x4166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4174=((1.0)*cj5);
CheckValue<IkReal> x4175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4175.valid){
continue;
}
CheckValue<IkReal> x4176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4174)))),-1);
if(!x4176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4175.value)+(((1.5707963267949)*(x4176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4177=IKsin(j4);
IkReal x4178=IKcos(j4);
IkReal x4179=(cj5*r00);
IkReal x4180=(cj5*r10);
IkReal x4181=(r21*sj5);
IkReal x4182=((1.0)*cj2);
IkReal x4183=((1.0)*sj0);
IkReal x4184=(cj1*sj2);
IkReal x4185=(cj5*r20);
IkReal x4186=((1.0)*x4178);
IkReal x4187=((1.0)*x4177);
IkReal x4188=(sj5*x4177);
IkReal x4189=(sj5*x4178);
evalcond[0]=(((x4177*x4181))+(((-1.0)*r22*x4186))+(((-1.0)*x4185*x4187)));
evalcond[1]=((((-1.0)*r12*x4186))+cj0+(((-1.0)*x4180*x4187))+((r11*x4188)));
evalcond[2]=((((-1.0)*x4183))+(((-1.0)*r02*x4186))+((r01*x4188))+(((-1.0)*x4179*x4187)));
evalcond[3]=((((-1.0)*cj1*x4182))+((x4178*x4181))+((r22*x4177))+((sj1*sj2))+(((-1.0)*x4185*x4186)));
evalcond[4]=((((-1.0)*cj0*sj1*x4182))+(((-1.0)*cj0*x4184))+((r01*x4189))+(((-1.0)*x4179*x4186))+((r02*x4177)));
evalcond[5]=((((-1.0)*x4183*x4184))+(((-1.0)*x4180*x4186))+((r12*x4177))+((r11*x4189))+(((-1.0)*sj0*sj1*x4182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4190=((1.0)*cj5);
CheckValue<IkReal> x4191 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4190))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4191.valid){
continue;
}
CheckValue<IkReal> x4192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4190))+(((-1.0)*r00*sj5)))),-1);
if(!x4192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4191.value)+(((1.5707963267949)*(x4192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4193=IKsin(j4);
IkReal x4194=IKcos(j4);
IkReal x4195=(cj5*r00);
IkReal x4196=(cj5*r10);
IkReal x4197=(r21*sj5);
IkReal x4198=((1.0)*cj2);
IkReal x4199=((1.0)*sj0);
IkReal x4200=(cj1*sj2);
IkReal x4201=(cj5*r20);
IkReal x4202=((1.0)*x4194);
IkReal x4203=((1.0)*x4193);
IkReal x4204=(sj5*x4193);
IkReal x4205=(sj5*x4194);
evalcond[0]=((((-1.0)*x4201*x4203))+((x4193*x4197))+(((-1.0)*r22*x4202)));
evalcond[1]=(((r11*x4204))+(((-1.0)*r12*x4202))+cj0+(((-1.0)*x4196*x4203)));
evalcond[2]=((((-1.0)*x4199))+(((-1.0)*r02*x4202))+(((-1.0)*x4195*x4203))+((r01*x4204)));
evalcond[3]=((((-1.0)*x4201*x4202))+((sj1*sj2))+((r22*x4193))+((x4194*x4197))+(((-1.0)*cj1*x4198)));
evalcond[4]=((((-1.0)*cj0*sj1*x4198))+((r02*x4193))+(((-1.0)*cj0*x4200))+(((-1.0)*x4195*x4202))+((r01*x4205)));
evalcond[5]=(((r11*x4205))+((r12*x4193))+(((-1.0)*x4199*x4200))+(((-1.0)*x4196*x4202))+(((-1.0)*sj0*sj1*x4198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4206=r21*r21;
IkReal x4207=cj5*cj5;
IkReal x4208=(sj1*sj2);
IkReal x4209=(r21*sj5);
IkReal x4210=(cj1*cj2);
IkReal x4211=(cj5*r20);
CheckValue<IkReal> x4212 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4210))+((r22*x4208)))),IkReal((((x4208*x4209))+(((-1.0)*x4209*x4210))+((x4210*x4211))+(((-1.0)*x4208*x4211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213=IKPowWithIntegerCheck(IKsign(((((2.0)*x4209*x4211))+(((-1.0)*x4207*(r20*r20)))+(((-1.0)*(r22*r22)))+((x4206*x4207))+(((-1.0)*x4206)))),-1);
if(!x4213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4212.value)+(((1.5707963267949)*(x4213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4214=IKsin(j4);
IkReal x4215=IKcos(j4);
IkReal x4216=(r21*sj5);
IkReal x4217=(cj5*r20);
IkReal x4218=((1.0)*x4215);
evalcond[0]=(((x4214*x4216))+(((-1.0)*r22*x4218))+(((-1.0)*x4214*x4217)));
evalcond[1]=(((r22*x4214))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4215*x4216))+(((-1.0)*x4217*x4218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4219=(cj5*sj4);
IkReal x4220=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4220))+(((-1.0)*r00*x4219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4220))+((r10*x4219))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4220))+(((-1.0)*r00*x4219))))+IKsqr(((((-1.0)*r11*x4220))+((r10*x4219))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4220))+(((-1.0)*r00*x4219))), ((((-1.0)*r11*x4220))+((r10*x4219))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4221=IKcos(j0);
IkReal x4222=IKsin(j0);
IkReal x4223=(cj1*cj2);
IkReal x4224=(sj1*sj2);
IkReal x4225=((1.0)*sj2);
IkReal x4226=(r11*sj5);
IkReal x4227=((1.0)*sj5);
IkReal x4228=(cj5*r11);
IkReal x4229=(cj5*r01);
IkReal x4230=(cj2*sj1);
IkReal x4231=((0.12)*sj5);
IkReal x4232=((1.0)*cj4);
IkReal x4233=(r01*sj5);
IkReal x4234=((0.571)*x4221);
IkReal x4235=(cj1*x4222);
IkReal x4236=(cj1*x4221);
IkReal x4237=(cj5*x4232);
IkReal x4238=((0.571)*x4222);
IkReal x4239=((1.0)*x4221);
IkReal x4240=((1.0)*x4222);
IkReal x4241=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x4226))+(((-1.0)*r12*x4232))+x4221+(((-1.0)*r10*x4241)));
evalcond[1]=(((sj4*x4233))+(((-1.0)*x4240))+(((-1.0)*r02*x4232))+(((-1.0)*r00*x4241)));
evalcond[2]=((((-1.0)*x4229))+(((-1.0)*x4223*x4239))+(((-1.0)*r00*x4227))+((x4221*x4224)));
evalcond[3]=((((-1.0)*x4228))+(((-1.0)*r10*x4227))+(((-1.0)*x4223*x4240))+((x4222*x4224)));
evalcond[4]=(((cj4*x4233))+((r02*sj4))+(((-1.0)*r00*x4237))+(((-1.0)*x4230*x4239))+(((-1.0)*x4225*x4236)));
evalcond[5]=((((-1.0)*x4230*x4240))+(((-1.0)*r10*x4237))+((r12*sj4))+(((-1.0)*x4225*x4235))+((cj4*x4226)));
evalcond[6]=((((0.613)*x4236))+(((-0.174)*x4222))+(((-1.0)*x4224*x4234))+(((-1.0)*px))+(((-1.0)*r00*x4231))+((x4223*x4234))+(((-0.12)*x4229)));
evalcond[7]=((((0.613)*x4235))+(((-1.0)*x4224*x4238))+(((0.174)*x4221))+(((-1.0)*r10*x4231))+(((-1.0)*py))+((x4223*x4238))+(((-0.12)*x4228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4242 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4242.valid){
continue;
}
CheckValue<IkReal> x4243=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4243.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4242.value)+(((1.5707963267949)*(x4243.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4244=IKcos(j0);
IkReal x4245=IKsin(j0);
IkReal x4246=((0.571)*cj2);
IkReal x4247=(cj5*r11);
IkReal x4248=(cj5*r01);
IkReal x4249=((1.0)*sj5);
IkReal x4250=(sj1*sj2);
IkReal x4251=((0.12)*sj5);
IkReal x4252=((1.0)*cj2);
IkReal x4253=((0.571)*x4250);
IkReal x4254=(cj1*x4245);
IkReal x4255=(cj1*x4244);
evalcond[0]=((((-1.0)*x4252*x4255))+((x4244*x4250))+(((-1.0)*r00*x4249))+(((-1.0)*x4248)));
evalcond[1]=(((x4245*x4250))+(((-1.0)*x4252*x4254))+(((-1.0)*r10*x4249))+(((-1.0)*x4247)));
evalcond[2]=((((-0.174)*x4245))+(((0.613)*x4255))+(((-1.0)*px))+((x4246*x4255))+(((-1.0)*x4244*x4253))+(((-1.0)*r00*x4251))+(((-0.12)*x4248)));
evalcond[3]=((((-1.0)*x4245*x4253))+(((0.613)*x4254))+(((0.174)*x4244))+(((-1.0)*py))+((x4246*x4254))+(((-1.0)*r10*x4251))+(((-0.12)*x4247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4256=((1.0)*cj5);
IkReal x4257=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4256)));
j4eval[0]=x4257;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4256)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4258=((1.0)*cj5);
IkReal x4259=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4258)));
j4eval[0]=x4259;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4258)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4260=((1.0)*sj0);
IkReal x4261=((1.0)*cj0);
IkReal x4262=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4262;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4261))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4260)))))+(IKabs(((((-1.0)*r12*x4260))+(((-1.0)*r02*x4261))))));
j4eval[2]=IKsign(x4262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4263=((-1.0)*r20);
IkReal x4265 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4265)==0){
continue;
}
IkReal x4264=pow(x4265,-0.5);
CheckValue<IkReal> x4266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4263),IKFAST_ATAN2_MAGTHRESH);
if(!x4266.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4266.value));
IkReal gconst97=(r21*x4264);
IkReal gconst98=(x4263*x4264);
CheckValue<IkReal> x4267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4267.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4267.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4268=((-1.0)*r20);
IkReal x4269=x4264;
CheckValue<IkReal> x4271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4268),IKFAST_ATAN2_MAGTHRESH);
if(!x4271.valid){
continue;
}
IkReal x4270=((-1.0)*(x4271.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4270;
IkReal gconst96=x4270;
IkReal gconst97=(r21*x4269);
IkReal gconst98=(x4268*x4269);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4272=((-1.0)*r20);
IkReal x4273=x4264;
CheckValue<IkReal> x4275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4272),IKFAST_ATAN2_MAGTHRESH);
if(!x4275.valid){
continue;
}
IkReal x4274=((-1.0)*(x4275.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4274;
IkReal gconst96=x4274;
IkReal gconst97=(r21*x4273);
IkReal gconst98=(x4272*x4273);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4276=((-1.0)*r20);
IkReal x4277=x4264;
CheckValue<IkReal> x4279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4276),IKFAST_ATAN2_MAGTHRESH);
if(!x4279.valid){
continue;
}
IkReal x4278=((-1.0)*(x4279.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4278;
IkReal gconst96=x4278;
IkReal gconst97=(r21*x4277);
IkReal gconst98=(x4276*x4277);
IkReal x4280=((1.0)*(r22*r22));
CheckValue<IkReal> x4284=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4280))),-1);
if(!x4284.valid){
continue;
}
IkReal x4281=x4284.value;
IkReal x4282=((1.0)*x4281);
IkReal x4283=((((-1.0)*x4280))+(((-1.0)*x4282*(r20*r20*r20*r20)))+(((-2.0)*x4281*(r20*r20)*(r21*r21)))+(((-1.0)*x4282*(r21*r21*r21*r21))));
j4eval[0]=x4283;
j4eval[1]=IKsign(x4283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4285=(cj1*cj2);
IkReal x4286=(gconst98*r20);
IkReal x4287=(sj1*sj2);
IkReal x4288=(gconst97*r21);
CheckValue<IkReal> x4289 = IKatan2WithCheck(IkReal((((r22*x4287))+(((-1.0)*r22*x4285)))),IkReal((((x4285*x4286))+(((-1.0)*x4285*x4288))+(((-1.0)*x4286*x4287))+((x4287*x4288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4289.valid){
continue;
}
CheckValue<IkReal> x4290=IKPowWithIntegerCheck(IKsign(((((2.0)*x4286*x4288))+(((-1.0)*(x4288*x4288)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4286*x4286))))),-1);
if(!x4290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4289.value)+(((1.5707963267949)*(x4290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4291=IKsin(j4);
IkReal x4292=IKcos(j4);
IkReal x4293=(gconst98*r10);
IkReal x4294=(gconst97*r21);
IkReal x4295=(gconst98*r20);
IkReal x4296=((1.0)*cj2);
IkReal x4297=((1.0)*sj0);
IkReal x4298=(gconst98*r00);
IkReal x4299=(cj1*sj2);
IkReal x4300=((1.0)*x4292);
IkReal x4301=((1.0)*x4291);
IkReal x4302=(gconst97*x4291);
IkReal x4303=(gconst97*x4292);
evalcond[0]=((((-1.0)*r22*x4300))+(((-1.0)*x4295*x4301))+((x4291*x4294)));
evalcond[1]=((((-1.0)*r12*x4300))+((r11*x4302))+cj0+(((-1.0)*x4293*x4301)));
evalcond[2]=((((-1.0)*x4297))+((r01*x4302))+(((-1.0)*r02*x4300))+(((-1.0)*x4298*x4301)));
evalcond[3]=(((x4292*x4294))+(((-1.0)*x4295*x4300))+((sj1*sj2))+((r22*x4291))+(((-1.0)*cj1*x4296)));
evalcond[4]=((((-1.0)*cj0*sj1*x4296))+(((-1.0)*cj0*x4299))+((r01*x4303))+(((-1.0)*x4298*x4300))+((r02*x4291)));
evalcond[5]=(((r11*x4303))+(((-1.0)*x4297*x4299))+((r12*x4291))+(((-1.0)*x4293*x4300))+(((-1.0)*sj0*sj1*x4296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4304=((1.0)*gconst98);
CheckValue<IkReal> x4305 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4305.valid){
continue;
}
CheckValue<IkReal> x4306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4304))+(((-1.0)*gconst97*r10)))),-1);
if(!x4306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4305.value)+(((1.5707963267949)*(x4306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4307=IKsin(j4);
IkReal x4308=IKcos(j4);
IkReal x4309=(gconst98*r10);
IkReal x4310=(gconst97*r21);
IkReal x4311=(gconst98*r20);
IkReal x4312=((1.0)*cj2);
IkReal x4313=((1.0)*sj0);
IkReal x4314=(gconst98*r00);
IkReal x4315=(cj1*sj2);
IkReal x4316=((1.0)*x4308);
IkReal x4317=((1.0)*x4307);
IkReal x4318=(gconst97*x4307);
IkReal x4319=(gconst97*x4308);
evalcond[0]=((((-1.0)*r22*x4316))+(((-1.0)*x4311*x4317))+((x4307*x4310)));
evalcond[1]=(cj0+((r11*x4318))+(((-1.0)*x4309*x4317))+(((-1.0)*r12*x4316)));
evalcond[2]=((((-1.0)*x4313))+((r01*x4318))+(((-1.0)*x4314*x4317))+(((-1.0)*r02*x4316)));
evalcond[3]=(((r22*x4307))+(((-1.0)*cj1*x4312))+(((-1.0)*x4311*x4316))+((x4308*x4310))+((sj1*sj2)));
evalcond[4]=(((r02*x4307))+(((-1.0)*cj0*x4315))+((r01*x4319))+(((-1.0)*x4314*x4316))+(((-1.0)*cj0*sj1*x4312)));
evalcond[5]=(((r12*x4307))+((r11*x4319))+(((-1.0)*x4309*x4316))+(((-1.0)*sj0*sj1*x4312))+(((-1.0)*x4313*x4315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4320=((1.0)*gconst98);
CheckValue<IkReal> x4321 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4320))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4321.valid){
continue;
}
CheckValue<IkReal> x4322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4320))+(((-1.0)*gconst97*r00)))),-1);
if(!x4322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4321.value)+(((1.5707963267949)*(x4322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4323=IKsin(j4);
IkReal x4324=IKcos(j4);
IkReal x4325=(gconst98*r10);
IkReal x4326=(gconst97*r21);
IkReal x4327=(gconst98*r20);
IkReal x4328=((1.0)*cj2);
IkReal x4329=((1.0)*sj0);
IkReal x4330=(gconst98*r00);
IkReal x4331=(cj1*sj2);
IkReal x4332=((1.0)*x4324);
IkReal x4333=((1.0)*x4323);
IkReal x4334=(gconst97*x4323);
IkReal x4335=(gconst97*x4324);
evalcond[0]=((((-1.0)*x4327*x4333))+(((-1.0)*r22*x4332))+((x4323*x4326)));
evalcond[1]=(cj0+(((-1.0)*x4325*x4333))+(((-1.0)*r12*x4332))+((r11*x4334)));
evalcond[2]=(((r01*x4334))+(((-1.0)*x4330*x4333))+(((-1.0)*x4329))+(((-1.0)*r02*x4332)));
evalcond[3]=(((x4324*x4326))+(((-1.0)*x4327*x4332))+((sj1*sj2))+(((-1.0)*cj1*x4328))+((r22*x4323)));
evalcond[4]=(((r01*x4335))+(((-1.0)*x4330*x4332))+(((-1.0)*cj0*sj1*x4328))+((r02*x4323))+(((-1.0)*cj0*x4331)));
evalcond[5]=((((-1.0)*x4325*x4332))+(((-1.0)*sj0*sj1*x4328))+((r12*x4323))+((r11*x4335))+(((-1.0)*x4329*x4331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4336=((-1.0)*r21);
IkReal x4338 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4338)==0){
continue;
}
IkReal x4337=pow(x4338,-0.5);
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal(x4336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4339.value))));
IkReal gconst100=(x4336*x4337);
IkReal gconst101=((1.0)*r20*x4337);
CheckValue<IkReal> x4340 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4340.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4340.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4341=((-1.0)*r21);
CheckValue<IkReal> x4344 = IKatan2WithCheck(IkReal(x4341),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4344.valid){
continue;
}
IkReal x4342=((1.0)*(x4344.value));
IkReal x4343=x4337;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4342)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4342)));
IkReal gconst100=(x4341*x4343);
IkReal gconst101=((1.0)*r20*x4343);
IkReal x4345=r22*r22;
IkReal x4346=((1.0)*x4345);
CheckValue<IkReal> x4350=IKPowWithIntegerCheck(((-1.0)+x4345),-1);
if(!x4350.valid){
continue;
}
IkReal x4347=x4350.value;
if((((1.0)+(((-1.0)*x4346)))) < -0.00001)
continue;
IkReal x4348=IKsqrt(((1.0)+(((-1.0)*x4346))));
IkReal x4349=(cj0*x4347*x4348);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x4346*x4349))+x4349))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4351=((-1.0)*r21);
CheckValue<IkReal> x4354 = IKatan2WithCheck(IkReal(x4351),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4354.valid){
continue;
}
IkReal x4352=((1.0)*(x4354.value));
IkReal x4353=x4337;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4352)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4352)));
IkReal gconst100=(x4351*x4353);
IkReal gconst101=((1.0)*r20*x4353);
IkReal x4355=r22*r22;
IkReal x4356=((1.0)*x4355);
CheckValue<IkReal> x4360=IKPowWithIntegerCheck(((-1.0)+x4355),-1);
if(!x4360.valid){
continue;
}
IkReal x4357=x4360.value;
if((((1.0)+(((-1.0)*x4356)))) < -0.00001)
continue;
IkReal x4358=IKsqrt(((1.0)+(((-1.0)*x4356))));
IkReal x4359=(sj0*x4357*x4358);
j4eval[0]=((IKabs(((((-1.0)*x4356*x4359))+x4359)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4361=((-1.0)*r21);
CheckValue<IkReal> x4364 = IKatan2WithCheck(IkReal(x4361),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4364.valid){
continue;
}
IkReal x4362=((1.0)*(x4364.value));
IkReal x4363=x4337;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4362)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4362)));
IkReal gconst100=(x4361*x4363);
IkReal gconst101=((1.0)*r20*x4363);
IkReal x4365=r22*r22;
IkReal x4366=(r12*sj0);
IkReal x4367=(cj0*r02);
CheckValue<IkReal> x4371=IKPowWithIntegerCheck(((-1.0)+x4365),-1);
if(!x4371.valid){
continue;
}
IkReal x4368=x4371.value;
if((((1.0)+(((-1.0)*x4365)))) < -0.00001)
continue;
IkReal x4369=IKsqrt(((1.0)+(((-1.0)*x4365))));
IkReal x4370=(r22*x4368*x4369);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4367))+(((-1.0)*x4366)))))+(IKabs((((x4367*x4370))+((x4366*x4370))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4372=((1.0)*sj0);
IkReal x4373=((1.0)*gconst100);
CheckValue<IkReal> x4374 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4372)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4373))+(((-1.0)*gconst100*r11*x4372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4374.valid){
continue;
}
CheckValue<IkReal> x4375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4373))+(((-1.0)*gconst101*r21)))),-1);
if(!x4375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4374.value)+(((1.5707963267949)*(x4375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4376=IKsin(j4);
IkReal x4377=IKcos(j4);
IkReal x4378=(gconst101*r20);
IkReal x4379=(gconst101*r10);
IkReal x4380=((1.0)*cj2);
IkReal x4381=(gconst101*r00);
IkReal x4382=((1.0)*sj0);
IkReal x4383=(cj1*sj2);
IkReal x4384=((1.0)*x4377);
IkReal x4385=((1.0)*x4376);
IkReal x4386=(gconst100*x4376);
IkReal x4387=(gconst100*x4377);
evalcond[0]=((((-1.0)*r22*x4384))+((r21*x4386))+(((-1.0)*x4378*x4385)));
evalcond[1]=((((-1.0)*x4379*x4385))+(((-1.0)*r12*x4384))+cj0+((r11*x4386)));
evalcond[2]=((((-1.0)*r02*x4384))+(((-1.0)*x4381*x4385))+(((-1.0)*x4382))+((r01*x4386)));
evalcond[3]=(((r22*x4376))+((sj1*sj2))+((r21*x4387))+(((-1.0)*x4378*x4384))+(((-1.0)*cj1*x4380)));
evalcond[4]=(((r02*x4376))+(((-1.0)*x4381*x4384))+(((-1.0)*cj0*sj1*x4380))+(((-1.0)*cj0*x4383))+((r01*x4387)));
evalcond[5]=((((-1.0)*x4379*x4384))+((r12*x4376))+(((-1.0)*x4382*x4383))+((r11*x4387))+(((-1.0)*sj0*sj1*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4388=((1.0)*gconst101);
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4388))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
CheckValue<IkReal> x4390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4388))+(((-1.0)*gconst100*r10)))),-1);
if(!x4390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4389.value)+(((1.5707963267949)*(x4390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4391=IKsin(j4);
IkReal x4392=IKcos(j4);
IkReal x4393=(gconst101*r20);
IkReal x4394=(gconst101*r10);
IkReal x4395=((1.0)*cj2);
IkReal x4396=(gconst101*r00);
IkReal x4397=((1.0)*sj0);
IkReal x4398=(cj1*sj2);
IkReal x4399=((1.0)*x4392);
IkReal x4400=((1.0)*x4391);
IkReal x4401=(gconst100*x4391);
IkReal x4402=(gconst100*x4392);
evalcond[0]=(((r21*x4401))+(((-1.0)*r22*x4399))+(((-1.0)*x4393*x4400)));
evalcond[1]=((((-1.0)*r12*x4399))+((r11*x4401))+cj0+(((-1.0)*x4394*x4400)));
evalcond[2]=((((-1.0)*x4397))+(((-1.0)*r02*x4399))+(((-1.0)*x4396*x4400))+((r01*x4401)));
evalcond[3]=(((r21*x4402))+((r22*x4391))+((sj1*sj2))+(((-1.0)*cj1*x4395))+(((-1.0)*x4393*x4399)));
evalcond[4]=((((-1.0)*x4396*x4399))+(((-1.0)*cj0*sj1*x4395))+((r02*x4391))+((r01*x4402))+(((-1.0)*cj0*x4398)));
evalcond[5]=((((-1.0)*sj0*sj1*x4395))+((r11*x4402))+(((-1.0)*x4394*x4399))+(((-1.0)*x4397*x4398))+((r12*x4391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4403=((1.0)*gconst101);
CheckValue<IkReal> x4404 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4403))+((cj0*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4404.valid){
continue;
}
CheckValue<IkReal> x4405=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4403)))),-1);
if(!x4405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4404.value)+(((1.5707963267949)*(x4405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4406=IKsin(j4);
IkReal x4407=IKcos(j4);
IkReal x4408=(gconst101*r20);
IkReal x4409=(gconst101*r10);
IkReal x4410=((1.0)*cj2);
IkReal x4411=(gconst101*r00);
IkReal x4412=((1.0)*sj0);
IkReal x4413=(cj1*sj2);
IkReal x4414=((1.0)*x4407);
IkReal x4415=((1.0)*x4406);
IkReal x4416=(gconst100*x4406);
IkReal x4417=(gconst100*x4407);
evalcond[0]=(((r21*x4416))+(((-1.0)*x4408*x4415))+(((-1.0)*r22*x4414)));
evalcond[1]=((((-1.0)*x4409*x4415))+((r11*x4416))+cj0+(((-1.0)*r12*x4414)));
evalcond[2]=(((r01*x4416))+(((-1.0)*x4411*x4415))+(((-1.0)*r02*x4414))+(((-1.0)*x4412)));
evalcond[3]=(((r21*x4417))+((r22*x4406))+(((-1.0)*x4408*x4414))+((sj1*sj2))+(((-1.0)*cj1*x4410)));
evalcond[4]=((((-1.0)*cj0*sj1*x4410))+(((-1.0)*cj0*x4413))+((r01*x4417))+(((-1.0)*x4411*x4414))+((r02*x4406)));
evalcond[5]=((((-1.0)*x4409*x4414))+((r11*x4417))+((r12*x4406))+(((-1.0)*x4412*x4413))+(((-1.0)*sj0*sj1*x4410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4418=((-1.0)*r10);
IkReal x4420 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4420)==0){
continue;
}
IkReal x4419=pow(x4420,-0.5);
CheckValue<IkReal> x4421 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4418),IKFAST_ATAN2_MAGTHRESH);
if(!x4421.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4421.value));
IkReal gconst103=(r11*x4419);
IkReal gconst104=(x4418*x4419);
CheckValue<IkReal> x4422 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4422.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4422.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4423=((-1.0)*r10);
IkReal x4424=x4419;
CheckValue<IkReal> x4426 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4423),IKFAST_ATAN2_MAGTHRESH);
if(!x4426.valid){
continue;
}
IkReal x4425=((-1.0)*(x4426.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4425;
IkReal gconst102=x4425;
IkReal gconst103=(r11*x4424);
IkReal gconst104=(x4423*x4424);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4427=((1.0)*sj0);
IkReal x4428=((1.0)*gconst103);
CheckValue<IkReal> x4429 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4427)))),IkReal(((((-1.0)*gconst103*r11*x4427))+((gconst104*r10*sj0))+((cj0*gconst104*r00))+(((-1.0)*cj0*r01*x4428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4429.valid){
continue;
}
CheckValue<IkReal> x4430=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4428)))),-1);
if(!x4430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4429.value)+(((1.5707963267949)*(x4430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4431=IKsin(j4);
IkReal x4432=IKcos(j4);
IkReal x4433=(gconst103*r11);
IkReal x4434=((1.0)*cj2);
IkReal x4435=((1.0)*sj0);
IkReal x4436=(cj1*sj2);
IkReal x4437=((1.0)*x4432);
IkReal x4438=(gconst103*x4432);
IkReal x4439=(gconst103*x4431);
IkReal x4440=((1.0)*gconst104*x4431);
evalcond[0]=((((-1.0)*r22*x4437))+(((-1.0)*r20*x4440))+((r21*x4439)));
evalcond[1]=(cj0+(((-1.0)*r12*x4437))+(((-1.0)*r10*x4440))+((x4431*x4433)));
evalcond[2]=((((-1.0)*r02*x4437))+(((-1.0)*x4435))+(((-1.0)*r00*x4440))+((r01*x4439)));
evalcond[3]=(((r22*x4431))+((sj1*sj2))+(((-1.0)*cj1*x4434))+(((-1.0)*gconst104*r20*x4437))+((r21*x4438)));
evalcond[4]=((((-1.0)*cj0*x4436))+(((-1.0)*cj0*sj1*x4434))+(((-1.0)*gconst104*r00*x4437))+((r02*x4431))+((r01*x4438)));
evalcond[5]=(((x4432*x4433))+(((-1.0)*gconst104*r10*x4437))+((r12*x4431))+(((-1.0)*x4435*x4436))+(((-1.0)*sj0*sj1*x4434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4441=((1.0)*gconst104);
CheckValue<IkReal> x4442 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4441))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4442.valid){
continue;
}
CheckValue<IkReal> x4443=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4441)))),-1);
if(!x4443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4442.value)+(((1.5707963267949)*(x4443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4444=IKsin(j4);
IkReal x4445=IKcos(j4);
IkReal x4446=(gconst103*r11);
IkReal x4447=((1.0)*cj2);
IkReal x4448=((1.0)*sj0);
IkReal x4449=(cj1*sj2);
IkReal x4450=((1.0)*x4445);
IkReal x4451=(gconst103*x4445);
IkReal x4452=(gconst103*x4444);
IkReal x4453=((1.0)*gconst104*x4444);
evalcond[0]=(((r21*x4452))+(((-1.0)*r22*x4450))+(((-1.0)*r20*x4453)));
evalcond[1]=(cj0+(((-1.0)*r12*x4450))+(((-1.0)*r10*x4453))+((x4444*x4446)));
evalcond[2]=(((r01*x4452))+(((-1.0)*x4448))+(((-1.0)*r02*x4450))+(((-1.0)*r00*x4453)));
evalcond[3]=((((-1.0)*gconst104*r20*x4450))+((r21*x4451))+((sj1*sj2))+(((-1.0)*cj1*x4447))+((r22*x4444)));
evalcond[4]=((((-1.0)*gconst104*r00*x4450))+((r01*x4451))+(((-1.0)*cj0*sj1*x4447))+(((-1.0)*cj0*x4449))+((r02*x4444)));
evalcond[5]=((((-1.0)*gconst104*r10*x4450))+(((-1.0)*x4448*x4449))+((x4445*x4446))+((r12*x4444))+(((-1.0)*sj0*sj1*x4447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4454=((-1.0)*r11);
IkReal x4456 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4456)==0){
continue;
}
IkReal x4455=pow(x4456,-0.5);
CheckValue<IkReal> x4457 = IKatan2WithCheck(IkReal(x4454),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4457.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4457.value))));
IkReal gconst106=(x4454*x4455);
IkReal gconst107=((1.0)*r10*x4455);
CheckValue<IkReal> x4458 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4458.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4458.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4459=((-1.0)*r11);
CheckValue<IkReal> x4462 = IKatan2WithCheck(IkReal(x4459),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4462.valid){
continue;
}
IkReal x4460=((1.0)*(x4462.value));
IkReal x4461=x4455;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4460)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4460)));
IkReal gconst106=(x4459*x4461);
IkReal gconst107=((1.0)*r10*x4461);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4463=((-1.0)*r11);
CheckValue<IkReal> x4466 = IKatan2WithCheck(IkReal(x4463),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4466.valid){
continue;
}
IkReal x4464=((1.0)*(x4466.value));
IkReal x4465=x4455;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4464)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4464)));
IkReal gconst106=(x4463*x4465);
IkReal gconst107=((1.0)*r10*x4465);
IkReal x4467=r12*r12;
IkReal x4468=((1.0)*sj0);
IkReal x4469=(cj0*r02);
IkReal x4470=x4455;
j4eval[0]=((IKabs(((((-1.0)*x4469))+(((-1.0)*r12*x4468)))))+(IKabs((((sj0*x4467*x4470))+((r12*x4469*x4470))+(((-1.0)*x4468*x4470))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4471=((-1.0)*r11);
CheckValue<IkReal> x4474 = IKatan2WithCheck(IkReal(x4471),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4474.valid){
continue;
}
IkReal x4472=((1.0)*(x4474.value));
IkReal x4473=x4455;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4472)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4472)));
IkReal gconst106=(x4471*x4473);
IkReal gconst107=((1.0)*r10*x4473);
IkReal x4475=r12*r12;
IkReal x4476=((1.0)+(((-1.0)*x4475)));
IkReal x4477=(r22*sj1*sj2);
IkReal x4478=(cj1*cj2*r22);
CheckValue<IkReal> x4485=IKPowWithIntegerCheck(x4476,-1);
if(!x4485.valid){
continue;
}
IkReal x4479=x4485.value;
CheckValue<IkReal> x4486=IKPowWithIntegerCheck(((-1.0)+x4475),-1);
if(!x4486.valid){
continue;
}
IkReal x4480=x4486.value;
IkReal x4481=((1.0)*x4479);
if((x4476) < -0.00001)
continue;
IkReal x4482=IKsqrt(x4476);
IkReal x4483=(r12*x4480*x4482);
IkReal x4484=((((-1.0)*x4481*(r10*r10)*(r20*r20)))+(((-1.0)*x4481*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x4479)));
j4eval[0]=x4484;
j4eval[1]=((IKabs((((x4478*x4483))+(((-1.0)*x4477*x4483)))))+(IKabs((x4477+(((-1.0)*x4478))))));
j4eval[2]=IKsign(x4484);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4487=(sj1*sj2);
IkReal x4488=(gconst106*r21);
IkReal x4489=(gconst107*r20);
IkReal x4490=(cj1*cj2);
CheckValue<IkReal> x4491 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4490))+((r22*x4487)))),IkReal((((x4487*x4488))+(((-1.0)*x4487*x4489))+(((-1.0)*x4488*x4490))+((x4489*x4490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4491.valid){
continue;
}
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(IKsign(((((2.0)*x4488*x4489))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4488*x4488)))+(((-1.0)*(x4489*x4489))))),-1);
if(!x4492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4491.value)+(((1.5707963267949)*(x4492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4493=IKsin(j4);
IkReal x4494=IKcos(j4);
IkReal x4495=(gconst107*r10);
IkReal x4496=(gconst107*r00);
IkReal x4497=((1.0)*cj2);
IkReal x4498=(gconst107*r20);
IkReal x4499=((1.0)*sj0);
IkReal x4500=(cj1*sj2);
IkReal x4501=((1.0)*x4494);
IkReal x4502=(gconst106*x4494);
IkReal x4503=(gconst106*x4493);
IkReal x4504=((1.0)*x4493);
evalcond[0]=(((r21*x4503))+(((-1.0)*x4498*x4504))+(((-1.0)*r22*x4501)));
evalcond[1]=(cj0+((r11*x4503))+(((-1.0)*x4495*x4504))+(((-1.0)*r12*x4501)));
evalcond[2]=((((-1.0)*x4496*x4504))+(((-1.0)*r02*x4501))+((r01*x4503))+(((-1.0)*x4499)));
evalcond[3]=((((-1.0)*cj1*x4497))+((r21*x4502))+((sj1*sj2))+(((-1.0)*x4498*x4501))+((r22*x4493)));
evalcond[4]=((((-1.0)*x4496*x4501))+((r02*x4493))+(((-1.0)*cj0*x4500))+((r01*x4502))+(((-1.0)*cj0*sj1*x4497)));
evalcond[5]=(((r12*x4493))+((r11*x4502))+(((-1.0)*x4495*x4501))+(((-1.0)*sj0*sj1*x4497))+(((-1.0)*x4499*x4500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4505=((1.0)*sj0);
IkReal x4506=((1.0)*gconst106);
CheckValue<IkReal> x4507 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4505)))),IkReal(((((-1.0)*gconst106*r11*x4505))+(((-1.0)*cj0*r01*x4506))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4507.valid){
continue;
}
CheckValue<IkReal> x4508=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4506)))),-1);
if(!x4508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4507.value)+(((1.5707963267949)*(x4508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4509=IKsin(j4);
IkReal x4510=IKcos(j4);
IkReal x4511=(gconst107*r10);
IkReal x4512=(gconst107*r00);
IkReal x4513=((1.0)*cj2);
IkReal x4514=(gconst107*r20);
IkReal x4515=((1.0)*sj0);
IkReal x4516=(cj1*sj2);
IkReal x4517=((1.0)*x4510);
IkReal x4518=(gconst106*x4510);
IkReal x4519=(gconst106*x4509);
IkReal x4520=((1.0)*x4509);
evalcond[0]=((((-1.0)*x4514*x4520))+((r21*x4519))+(((-1.0)*r22*x4517)));
evalcond[1]=((((-1.0)*x4511*x4520))+cj0+(((-1.0)*r12*x4517))+((r11*x4519)));
evalcond[2]=((((-1.0)*r02*x4517))+((r01*x4519))+(((-1.0)*x4512*x4520))+(((-1.0)*x4515)));
evalcond[3]=((((-1.0)*cj1*x4513))+((r22*x4509))+((sj1*sj2))+((r21*x4518))+(((-1.0)*x4514*x4517)));
evalcond[4]=((((-1.0)*x4512*x4517))+(((-1.0)*cj0*x4516))+(((-1.0)*cj0*sj1*x4513))+((r02*x4509))+((r01*x4518)));
evalcond[5]=(((r12*x4509))+(((-1.0)*sj0*sj1*x4513))+(((-1.0)*x4515*x4516))+((r11*x4518))+(((-1.0)*x4511*x4517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4521=((1.0)*gconst107);
CheckValue<IkReal> x4522 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4521))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4522.valid){
continue;
}
CheckValue<IkReal> x4523=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4521)))),-1);
if(!x4523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4522.value)+(((1.5707963267949)*(x4523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4524=IKsin(j4);
IkReal x4525=IKcos(j4);
IkReal x4526=(gconst107*r10);
IkReal x4527=(gconst107*r00);
IkReal x4528=((1.0)*cj2);
IkReal x4529=(gconst107*r20);
IkReal x4530=((1.0)*sj0);
IkReal x4531=(cj1*sj2);
IkReal x4532=((1.0)*x4525);
IkReal x4533=(gconst106*x4525);
IkReal x4534=(gconst106*x4524);
IkReal x4535=((1.0)*x4524);
evalcond[0]=(((r21*x4534))+(((-1.0)*r22*x4532))+(((-1.0)*x4529*x4535)));
evalcond[1]=(cj0+(((-1.0)*x4526*x4535))+(((-1.0)*r12*x4532))+((r11*x4534)));
evalcond[2]=(((r01*x4534))+(((-1.0)*x4530))+(((-1.0)*x4527*x4535))+(((-1.0)*r02*x4532)));
evalcond[3]=(((r21*x4533))+((sj1*sj2))+(((-1.0)*cj1*x4528))+((r22*x4524))+(((-1.0)*x4529*x4532)));
evalcond[4]=((((-1.0)*cj0*sj1*x4528))+((r01*x4533))+(((-1.0)*x4527*x4532))+((r02*x4524))+(((-1.0)*cj0*x4531)));
evalcond[5]=((((-1.0)*x4530*x4531))+((r12*x4524))+(((-1.0)*x4526*x4532))+(((-1.0)*sj0*sj1*x4528))+((r11*x4533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4536=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4536;
j4eval[1]=IKsign(x4536);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4537=((1.0)*cj5);
IkReal x4538=((((-1.0)*r01*x4537))+(((-1.0)*r00*sj5)));
j4eval[0]=x4538;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4537)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4539=(sj1*sj2);
IkReal x4540=(cj5*r10);
IkReal x4541=(r11*sj5);
IkReal x4542=(cj1*cj2);
IkReal x4543=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4543;
j4eval[1]=((IKabs(((((-1.0)*r12*x4539))+((r12*x4542)))))+(IKabs(((((-1.0)*x4541*x4542))+((x4540*x4542))+(((-1.0)*x4539*x4540))+((x4539*x4541))))));
j4eval[2]=IKsign(x4543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4544=(sj1*sj2);
IkReal x4545=(cj5*r10);
IkReal x4546=(r11*sj5);
IkReal x4547=(cj1*cj2);
CheckValue<IkReal> x4548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4548.valid){
continue;
}
CheckValue<IkReal> x4549 = IKatan2WithCheck(IkReal((((x4545*x4547))+((x4544*x4546))+(((-1.0)*x4546*x4547))+(((-1.0)*x4544*x4545)))),IkReal((((r12*x4547))+(((-1.0)*r12*x4544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4548.value)))+(x4549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4550=IKcos(j4);
IkReal x4551=IKsin(j4);
IkReal x4552=(cj5*r00);
IkReal x4553=(cj5*r10);
IkReal x4554=(r21*sj5);
IkReal x4555=((1.0)*cj2);
IkReal x4556=(cj5*r20);
IkReal x4557=((1.0)*x4550);
IkReal x4558=((1.0)*x4551);
IkReal x4559=(sj5*x4551);
IkReal x4560=(sj5*x4550);
evalcond[0]=(((r11*x4560))+(((-1.0)*x4553*x4557))+((r12*x4551)));
evalcond[1]=((((-1.0)*x4556*x4558))+((x4551*x4554))+(((-1.0)*r22*x4557)));
evalcond[2]=(((r01*x4559))+(((-1.0)*x4552*x4558))+(((-1.0)*r02*x4557)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4557))+(((-1.0)*x4553*x4558))+((r11*x4559)));
evalcond[4]=((((-1.0)*x4556*x4557))+((x4550*x4554))+(((-1.0)*cj1*x4555))+((sj1*sj2))+((r22*x4551)));
evalcond[5]=((((-1.0)*x4552*x4557))+(((-1.0)*cj1*sj2))+((r02*x4551))+((r01*x4560))+(((-1.0)*sj1*x4555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4561=((1.0)*cj5);
CheckValue<IkReal> x4562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4561))+(((-1.0)*r00*sj5)))),-1);
if(!x4562.valid){
continue;
}
CheckValue<IkReal> x4563 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4561))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4562.value)))+(x4563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4564=IKcos(j4);
IkReal x4565=IKsin(j4);
IkReal x4566=(cj5*r00);
IkReal x4567=(cj5*r10);
IkReal x4568=(r21*sj5);
IkReal x4569=((1.0)*cj2);
IkReal x4570=(cj5*r20);
IkReal x4571=((1.0)*x4564);
IkReal x4572=((1.0)*x4565);
IkReal x4573=(sj5*x4565);
IkReal x4574=(sj5*x4564);
evalcond[0]=((((-1.0)*x4567*x4571))+((r12*x4565))+((r11*x4574)));
evalcond[1]=(((x4565*x4568))+(((-1.0)*x4570*x4572))+(((-1.0)*r22*x4571)));
evalcond[2]=((((-1.0)*x4566*x4572))+(((-1.0)*r02*x4571))+((r01*x4573)));
evalcond[3]=((1.0)+(((-1.0)*x4567*x4572))+((r11*x4573))+(((-1.0)*r12*x4571)));
evalcond[4]=(((r22*x4565))+(((-1.0)*x4570*x4571))+(((-1.0)*cj1*x4569))+((sj1*sj2))+((x4564*x4568)));
evalcond[5]=((((-1.0)*sj1*x4569))+(((-1.0)*x4566*x4571))+((r02*x4565))+(((-1.0)*cj1*sj2))+((r01*x4574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4575=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4575.valid){
continue;
}
CheckValue<IkReal> x4576 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4575.value)))+(x4576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4577=IKcos(j4);
IkReal x4578=IKsin(j4);
IkReal x4579=(cj5*r00);
IkReal x4580=(cj5*r10);
IkReal x4581=(r21*sj5);
IkReal x4582=((1.0)*cj2);
IkReal x4583=(cj5*r20);
IkReal x4584=((1.0)*x4577);
IkReal x4585=((1.0)*x4578);
IkReal x4586=(sj5*x4578);
IkReal x4587=(sj5*x4577);
evalcond[0]=((((-1.0)*x4580*x4584))+((r12*x4578))+((r11*x4587)));
evalcond[1]=(((x4578*x4581))+(((-1.0)*r22*x4584))+(((-1.0)*x4583*x4585)));
evalcond[2]=((((-1.0)*x4579*x4585))+(((-1.0)*r02*x4584))+((r01*x4586)));
evalcond[3]=((1.0)+(((-1.0)*x4580*x4585))+((r11*x4586))+(((-1.0)*r12*x4584)));
evalcond[4]=(((x4577*x4581))+(((-1.0)*x4583*x4584))+((r22*x4578))+((sj1*sj2))+(((-1.0)*cj1*x4582)));
evalcond[5]=((((-1.0)*x4579*x4584))+((r02*x4578))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4582))+((r01*x4587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4588=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4588;
j4eval[1]=IKsign(x4588);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4589=((1.0)*cj5);
IkReal x4590=((((-1.0)*r21*x4589))+(((-1.0)*r20*sj5)));
j4eval[0]=x4590;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4589))))));
j4eval[2]=IKsign(x4590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4591=cj5*cj5;
IkReal x4592=r11*r11;
IkReal x4593=(r11*sj5);
IkReal x4594=(cj5*r10);
IkReal x4595=((r12*r12)+x4592+((x4591*(r10*r10)))+(((-2.0)*x4593*x4594))+(((-1.0)*x4591*x4592)));
j4eval[0]=x4595;
j4eval[1]=IKsign(x4595);
j4eval[2]=((IKabs((x4593+(((-1.0)*x4594)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4596=cj5*cj5;
IkReal x4597=r11*r11;
IkReal x4598=(cj5*r10);
IkReal x4599=(r11*sj5);
CheckValue<IkReal> x4600 = IKatan2WithCheck(IkReal((x4599+(((-1.0)*x4598)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4600.valid){
continue;
}
CheckValue<IkReal> x4601=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4597+((x4596*(r10*r10)))+(((-2.0)*x4598*x4599))+(((-1.0)*x4596*x4597)))),-1);
if(!x4601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4600.value)+(((1.5707963267949)*(x4601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4602=IKcos(j4);
IkReal x4603=IKsin(j4);
IkReal x4604=(cj5*r00);
IkReal x4605=(cj5*r10);
IkReal x4606=(r21*sj5);
IkReal x4607=(cj5*r20);
IkReal x4608=((1.0)*x4602);
IkReal x4609=((1.0)*x4603);
IkReal x4610=(sj5*x4603);
IkReal x4611=(sj5*x4602);
evalcond[0]=(((r12*x4603))+((r11*x4611))+(((-1.0)*x4605*x4608)));
evalcond[1]=(((x4603*x4606))+(((-1.0)*r22*x4608))+(((-1.0)*x4607*x4609)));
evalcond[2]=((((-1.0)*r02*x4608))+((r01*x4610))+(((-1.0)*x4604*x4609)));
evalcond[3]=((-1.0)+((r11*x4610))+(((-1.0)*r12*x4608))+(((-1.0)*x4605*x4609)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4611))+((r02*x4603))+(((-1.0)*x4604*x4608)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4603))+((x4602*x4606))+(((-1.0)*x4607*x4608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4612=((1.0)*cj5);
CheckValue<IkReal> x4613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4612))+(((-1.0)*r20*sj5)))),-1);
if(!x4613.valid){
continue;
}
CheckValue<IkReal> x4614 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4613.value)))+(x4614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4615=IKcos(j4);
IkReal x4616=IKsin(j4);
IkReal x4617=(cj5*r00);
IkReal x4618=(cj5*r10);
IkReal x4619=(r21*sj5);
IkReal x4620=(cj5*r20);
IkReal x4621=((1.0)*x4615);
IkReal x4622=((1.0)*x4616);
IkReal x4623=(sj5*x4616);
IkReal x4624=(sj5*x4615);
evalcond[0]=(((r11*x4624))+(((-1.0)*x4618*x4621))+((r12*x4616)));
evalcond[1]=((((-1.0)*r22*x4621))+(((-1.0)*x4620*x4622))+((x4616*x4619)));
evalcond[2]=((((-1.0)*r02*x4621))+((r01*x4623))+(((-1.0)*x4617*x4622)));
evalcond[3]=((-1.0)+((r11*x4623))+(((-1.0)*x4618*x4622))+(((-1.0)*r12*x4621)));
evalcond[4]=(((cj2*sj1))+((r02*x4616))+((cj1*sj2))+((r01*x4624))+(((-1.0)*x4617*x4621)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4615*x4619))+((r22*x4616))+(((-1.0)*x4620*x4621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4625 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4625.valid){
continue;
}
CheckValue<IkReal> x4626=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4625.value)+(((1.5707963267949)*(x4626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4627=IKcos(j4);
IkReal x4628=IKsin(j4);
IkReal x4629=(cj5*r00);
IkReal x4630=(cj5*r10);
IkReal x4631=(r21*sj5);
IkReal x4632=(cj5*r20);
IkReal x4633=((1.0)*x4627);
IkReal x4634=((1.0)*x4628);
IkReal x4635=(sj5*x4628);
IkReal x4636=(sj5*x4627);
evalcond[0]=(((r12*x4628))+((r11*x4636))+(((-1.0)*x4630*x4633)));
evalcond[1]=((((-1.0)*x4632*x4634))+((x4628*x4631))+(((-1.0)*r22*x4633)));
evalcond[2]=(((r01*x4635))+(((-1.0)*r02*x4633))+(((-1.0)*x4629*x4634)));
evalcond[3]=((-1.0)+((r11*x4635))+(((-1.0)*x4630*x4634))+(((-1.0)*r12*x4633)));
evalcond[4]=(((cj2*sj1))+((r01*x4636))+((cj1*sj2))+((r02*x4628))+(((-1.0)*x4629*x4633)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4632*x4633))+((r22*x4628))+((x4627*x4631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4637=((-1.0)*r00);
IkReal x4639 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4639)==0){
continue;
}
IkReal x4638=pow(x4639,-0.5);
CheckValue<IkReal> x4640 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4637),IKFAST_ATAN2_MAGTHRESH);
if(!x4640.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4640.value));
IkReal gconst109=(r01*x4638);
IkReal gconst110=(x4637*x4638);
CheckValue<IkReal> x4641 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4641.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4641.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4642=((-1.0)*r00);
IkReal x4643=x4638;
CheckValue<IkReal> x4645 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4642),IKFAST_ATAN2_MAGTHRESH);
if(!x4645.valid){
continue;
}
IkReal x4644=((-1.0)*(x4645.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4644;
IkReal gconst108=x4644;
IkReal gconst109=(r01*x4643);
IkReal gconst110=(x4642*x4643);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4646=((1.0)*sj0);
IkReal x4647=((1.0)*gconst109);
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4646))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4647))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
CheckValue<IkReal> x4649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4647))+(((-1.0)*gconst110*r21)))),-1);
if(!x4649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4648.value)+(((1.5707963267949)*(x4649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4650=IKsin(j4);
IkReal x4651=IKcos(j4);
IkReal x4652=(gconst109*r21);
IkReal x4653=((1.0)*cj2);
IkReal x4654=((1.0)*sj0);
IkReal x4655=(cj1*sj2);
IkReal x4656=((1.0)*x4651);
IkReal x4657=(gconst109*x4650);
IkReal x4658=(gconst109*x4651);
IkReal x4659=((1.0)*gconst110*x4650);
evalcond[0]=(((x4650*x4652))+(((-1.0)*r22*x4656))+(((-1.0)*r20*x4659)));
evalcond[1]=(((r11*x4657))+cj0+(((-1.0)*r12*x4656))+(((-1.0)*r10*x4659)));
evalcond[2]=((((-1.0)*x4654))+(((-1.0)*r00*x4659))+(((-1.0)*r02*x4656))+((r01*x4657)));
evalcond[3]=((((-1.0)*cj1*x4653))+((sj1*sj2))+((r22*x4650))+(((-1.0)*gconst110*r20*x4656))+((x4651*x4652)));
evalcond[4]=((((-1.0)*gconst110*r00*x4656))+(((-1.0)*cj0*x4655))+((r02*x4650))+((r01*x4658))+(((-1.0)*cj0*sj1*x4653)));
evalcond[5]=(((r12*x4650))+((r11*x4658))+(((-1.0)*x4654*x4655))+(((-1.0)*gconst110*r10*x4656))+(((-1.0)*sj0*sj1*x4653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4660=((1.0)*gconst110);
CheckValue<IkReal> x4661 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4660))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4661.valid){
continue;
}
CheckValue<IkReal> x4662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4660))+(((-1.0)*gconst109*r10)))),-1);
if(!x4662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4661.value)+(((1.5707963267949)*(x4662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4663=IKsin(j4);
IkReal x4664=IKcos(j4);
IkReal x4665=(gconst109*r21);
IkReal x4666=((1.0)*cj2);
IkReal x4667=((1.0)*sj0);
IkReal x4668=(cj1*sj2);
IkReal x4669=((1.0)*x4664);
IkReal x4670=(gconst109*x4663);
IkReal x4671=(gconst109*x4664);
IkReal x4672=((1.0)*gconst110*x4663);
evalcond[0]=((((-1.0)*r20*x4672))+((x4663*x4665))+(((-1.0)*r22*x4669)));
evalcond[1]=(cj0+((r11*x4670))+(((-1.0)*r10*x4672))+(((-1.0)*r12*x4669)));
evalcond[2]=(((r01*x4670))+(((-1.0)*x4667))+(((-1.0)*r00*x4672))+(((-1.0)*r02*x4669)));
evalcond[3]=(((x4664*x4665))+(((-1.0)*gconst110*r20*x4669))+((sj1*sj2))+((r22*x4663))+(((-1.0)*cj1*x4666)));
evalcond[4]=((((-1.0)*cj0*x4668))+((r02*x4663))+(((-1.0)*cj0*sj1*x4666))+((r01*x4671))+(((-1.0)*gconst110*r00*x4669)));
evalcond[5]=((((-1.0)*gconst110*r10*x4669))+(((-1.0)*x4667*x4668))+((r12*x4663))+((r11*x4671))+(((-1.0)*sj0*sj1*x4666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4673=((-1.0)*r01);
IkReal x4675 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4675)==0){
continue;
}
IkReal x4674=pow(x4675,-0.5);
CheckValue<IkReal> x4676 = IKatan2WithCheck(IkReal(x4673),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4676.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4676.value))));
IkReal gconst112=(x4673*x4674);
IkReal gconst113=((1.0)*r00*x4674);
CheckValue<IkReal> x4677 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4677.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4677.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4678=((-1.0)*r01);
CheckValue<IkReal> x4681 = IKatan2WithCheck(IkReal(x4678),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4681.valid){
continue;
}
IkReal x4679=((1.0)*(x4681.value));
IkReal x4680=x4674;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4679)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4679)));
IkReal gconst112=(x4678*x4680);
IkReal gconst113=((1.0)*r00*x4680);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4682=((-1.0)*r01);
CheckValue<IkReal> x4685 = IKatan2WithCheck(IkReal(x4682),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4685.valid){
continue;
}
IkReal x4683=((1.0)*(x4685.value));
IkReal x4684=x4674;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4683)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4683)));
IkReal gconst112=(x4682*x4684);
IkReal gconst113=((1.0)*r00*x4684);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4686=((-1.0)*r01);
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal(x4686),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
IkReal x4687=((1.0)*(x4689.value));
IkReal x4688=x4674;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4687)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4687)));
IkReal gconst112=(x4686*x4688);
IkReal gconst113=((1.0)*r00*x4688);
IkReal x4690=r02*r02;
IkReal x4691=(r12*sj0);
IkReal x4692=((1.0)*cj0);
IkReal x4693=x4674;
j4eval[0]=((IKabs(((((-1.0)*r02*x4692))+(((-1.0)*x4691)))))+(IKabs((((cj0*x4690*x4693))+(((-1.0)*x4692*x4693))+((r02*x4691*x4693))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4694=((1.0)*sj0);
IkReal x4695=((1.0)*gconst112);
CheckValue<IkReal> x4696 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4694))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4695))+(((-1.0)*gconst112*r11*x4694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4696.valid){
continue;
}
CheckValue<IkReal> x4697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4695))+(((-1.0)*gconst113*r21)))),-1);
if(!x4697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4696.value)+(((1.5707963267949)*(x4697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4698=IKsin(j4);
IkReal x4699=IKcos(j4);
IkReal x4700=(gconst113*r20);
IkReal x4701=(gconst112*r21);
IkReal x4702=((1.0)*cj2);
IkReal x4703=(gconst113*r00);
IkReal x4704=(gconst113*r10);
IkReal x4705=((1.0)*sj0);
IkReal x4706=(cj1*sj2);
IkReal x4707=((1.0)*x4699);
IkReal x4708=((1.0)*x4698);
IkReal x4709=(gconst112*x4699);
IkReal x4710=(gconst112*x4698);
evalcond[0]=((((-1.0)*x4700*x4708))+(((-1.0)*r22*x4707))+((x4698*x4701)));
evalcond[1]=(cj0+(((-1.0)*r12*x4707))+(((-1.0)*x4704*x4708))+((r11*x4710)));
evalcond[2]=((((-1.0)*r02*x4707))+(((-1.0)*x4703*x4708))+((r01*x4710))+(((-1.0)*x4705)));
evalcond[3]=((((-1.0)*x4700*x4707))+((x4699*x4701))+((sj1*sj2))+((r22*x4698))+(((-1.0)*cj1*x4702)));
evalcond[4]=(((r02*x4698))+(((-1.0)*x4703*x4707))+(((-1.0)*cj0*sj1*x4702))+(((-1.0)*cj0*x4706))+((r01*x4709)));
evalcond[5]=((((-1.0)*sj0*sj1*x4702))+(((-1.0)*x4704*x4707))+((r12*x4698))+(((-1.0)*x4705*x4706))+((r11*x4709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4711=((1.0)*gconst113);
CheckValue<IkReal> x4712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4711))+(((-1.0)*gconst112*r10)))),-1);
if(!x4712.valid){
continue;
}
CheckValue<IkReal> x4713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4712.value)))+(x4713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4714=IKsin(j4);
IkReal x4715=IKcos(j4);
IkReal x4716=(gconst113*r20);
IkReal x4717=(gconst112*r21);
IkReal x4718=((1.0)*cj2);
IkReal x4719=(gconst113*r00);
IkReal x4720=(gconst113*r10);
IkReal x4721=((1.0)*sj0);
IkReal x4722=(cj1*sj2);
IkReal x4723=((1.0)*x4715);
IkReal x4724=((1.0)*x4714);
IkReal x4725=(gconst112*x4715);
IkReal x4726=(gconst112*x4714);
evalcond[0]=((((-1.0)*x4716*x4724))+((x4714*x4717))+(((-1.0)*r22*x4723)));
evalcond[1]=(((r11*x4726))+cj0+(((-1.0)*r12*x4723))+(((-1.0)*x4720*x4724)));
evalcond[2]=((((-1.0)*x4721))+(((-1.0)*x4719*x4724))+((r01*x4726))+(((-1.0)*r02*x4723)));
evalcond[3]=(((r22*x4714))+(((-1.0)*x4716*x4723))+((sj1*sj2))+((x4715*x4717))+(((-1.0)*cj1*x4718)));
evalcond[4]=((((-1.0)*cj0*sj1*x4718))+(((-1.0)*x4719*x4723))+(((-1.0)*cj0*x4722))+((r01*x4725))+((r02*x4714)));
evalcond[5]=(((r11*x4725))+(((-1.0)*sj0*sj1*x4718))+((r12*x4714))+(((-1.0)*x4721*x4722))+(((-1.0)*x4720*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4727=((1.0)*gconst113);
CheckValue<IkReal> x4728 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4727))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4728.valid){
continue;
}
CheckValue<IkReal> x4729=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x4727)))),-1);
if(!x4729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4728.value)+(((1.5707963267949)*(x4729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4730=IKsin(j4);
IkReal x4731=IKcos(j4);
IkReal x4732=(gconst113*r20);
IkReal x4733=(gconst112*r21);
IkReal x4734=((1.0)*cj2);
IkReal x4735=(gconst113*r00);
IkReal x4736=(gconst113*r10);
IkReal x4737=((1.0)*sj0);
IkReal x4738=(cj1*sj2);
IkReal x4739=((1.0)*x4731);
IkReal x4740=((1.0)*x4730);
IkReal x4741=(gconst112*x4731);
IkReal x4742=(gconst112*x4730);
evalcond[0]=(((x4730*x4733))+(((-1.0)*x4732*x4740))+(((-1.0)*r22*x4739)));
evalcond[1]=(((r11*x4742))+cj0+(((-1.0)*x4736*x4740))+(((-1.0)*r12*x4739)));
evalcond[2]=(((r01*x4742))+(((-1.0)*x4737))+(((-1.0)*x4735*x4740))+(((-1.0)*r02*x4739)));
evalcond[3]=((((-1.0)*cj1*x4734))+((x4731*x4733))+((sj1*sj2))+(((-1.0)*x4732*x4739))+((r22*x4730)));
evalcond[4]=((((-1.0)*x4735*x4739))+((r01*x4741))+(((-1.0)*cj0*sj1*x4734))+((r02*x4730))+(((-1.0)*cj0*x4738)));
evalcond[5]=(((r11*x4741))+(((-1.0)*x4736*x4739))+(((-1.0)*x4737*x4738))+(((-1.0)*sj0*sj1*x4734))+((r12*x4730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4743=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4743;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4744=((1.0)*cj5);
IkReal x4745=((((-1.0)*r11*x4744))+(((-1.0)*r10*sj5)));
j4eval[0]=x4745;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4744))))));
j4eval[2]=IKsign(x4745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4746=cj5*cj5;
IkReal x4747=r01*r01;
IkReal x4748=(cj5*r00);
IkReal x4749=(r01*sj5);
IkReal x4750=(x4747+(((-1.0)*x4746*x4747))+(((-2.0)*x4748*x4749))+((x4746*(r00*r00)))+(r02*r02));
j4eval[0]=x4750;
j4eval[1]=IKsign(x4750);
j4eval[2]=((IKabs(r02))+(IKabs((x4749+(((-1.0)*x4748))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4751=cj5*cj5;
IkReal x4752=r01*r01;
IkReal x4753=(r01*sj5);
IkReal x4754=(cj5*r00);
CheckValue<IkReal> x4755=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4751*x4752))+((x4751*(r00*r00)))+(((-2.0)*x4753*x4754))+x4752+(r02*r02))),-1);
if(!x4755.valid){
continue;
}
CheckValue<IkReal> x4756 = IKatan2WithCheck(IkReal((x4753+(((-1.0)*x4754)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4755.value)))+(x4756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4757=IKcos(j4);
IkReal x4758=IKsin(j4);
IkReal x4759=(cj5*r00);
IkReal x4760=(cj5*r10);
IkReal x4761=(r21*sj5);
IkReal x4762=((1.0)*cj2);
IkReal x4763=(cj5*r20);
IkReal x4764=((1.0)*x4757);
IkReal x4765=((1.0)*x4758);
IkReal x4766=(sj5*x4758);
IkReal x4767=(sj5*x4757);
evalcond[0]=(((r01*x4767))+(((-1.0)*x4759*x4764))+((r02*x4758)));
evalcond[1]=(((x4758*x4761))+(((-1.0)*r22*x4764))+(((-1.0)*x4763*x4765)));
evalcond[2]=((((-1.0)*x4760*x4765))+(((-1.0)*r12*x4764))+((r11*x4766)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4764))+((r01*x4766))+(((-1.0)*x4759*x4765)));
evalcond[4]=((((-1.0)*x4763*x4764))+((sj1*sj2))+(((-1.0)*cj1*x4762))+((r22*x4758))+((x4757*x4761)));
evalcond[5]=(((r12*x4758))+(((-1.0)*x4760*x4764))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4762))+((r11*x4767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4768=((1.0)*cj5);
CheckValue<IkReal> x4769 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4769.valid){
continue;
}
CheckValue<IkReal> x4770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4768)))),-1);
if(!x4770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4769.value)+(((1.5707963267949)*(x4770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4771=IKcos(j4);
IkReal x4772=IKsin(j4);
IkReal x4773=(cj5*r00);
IkReal x4774=(cj5*r10);
IkReal x4775=(r21*sj5);
IkReal x4776=((1.0)*cj2);
IkReal x4777=(cj5*r20);
IkReal x4778=((1.0)*x4771);
IkReal x4779=((1.0)*x4772);
IkReal x4780=(sj5*x4772);
IkReal x4781=(sj5*x4771);
evalcond[0]=((((-1.0)*x4773*x4778))+((r01*x4781))+((r02*x4772)));
evalcond[1]=((((-1.0)*x4777*x4779))+((x4772*x4775))+(((-1.0)*r22*x4778)));
evalcond[2]=((((-1.0)*r12*x4778))+(((-1.0)*x4774*x4779))+((r11*x4780)));
evalcond[3]=((-1.0)+(((-1.0)*x4773*x4779))+((r01*x4780))+(((-1.0)*r02*x4778)));
evalcond[4]=((((-1.0)*x4777*x4778))+(((-1.0)*cj1*x4776))+((sj1*sj2))+((r22*x4772))+((x4771*x4775)));
evalcond[5]=((((-1.0)*sj1*x4776))+((r12*x4772))+(((-1.0)*x4774*x4778))+(((-1.0)*cj1*sj2))+((r11*x4781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4782=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4782.valid){
continue;
}
CheckValue<IkReal> x4783 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4782.value)))+(x4783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4784=IKcos(j4);
IkReal x4785=IKsin(j4);
IkReal x4786=(cj5*r00);
IkReal x4787=(cj5*r10);
IkReal x4788=(r21*sj5);
IkReal x4789=((1.0)*cj2);
IkReal x4790=(cj5*r20);
IkReal x4791=((1.0)*x4784);
IkReal x4792=((1.0)*x4785);
IkReal x4793=(sj5*x4785);
IkReal x4794=(sj5*x4784);
evalcond[0]=(((r02*x4785))+((r01*x4794))+(((-1.0)*x4786*x4791)));
evalcond[1]=(((x4785*x4788))+(((-1.0)*x4790*x4792))+(((-1.0)*r22*x4791)));
evalcond[2]=((((-1.0)*x4787*x4792))+(((-1.0)*r12*x4791))+((r11*x4793)));
evalcond[3]=((-1.0)+((r01*x4793))+(((-1.0)*r02*x4791))+(((-1.0)*x4786*x4792)));
evalcond[4]=(((r22*x4785))+(((-1.0)*x4790*x4791))+((sj1*sj2))+((x4784*x4788))+(((-1.0)*cj1*x4789)));
evalcond[5]=((((-1.0)*x4787*x4791))+((r12*x4785))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4789))+((r11*x4794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4795=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4795;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4796=((1.0)*cj5);
IkReal x4797=((((-1.0)*r21*x4796))+(((-1.0)*r20*sj5)));
j4eval[0]=x4797;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4796))))));
j4eval[2]=IKsign(x4797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4798=cj5*cj5;
IkReal x4799=r01*r01;
IkReal x4800=(r01*sj5);
IkReal x4801=(cj5*r00);
IkReal x4802=((((2.0)*x4800*x4801))+(((-1.0)*(r02*r02)))+((x4798*x4799))+(((-1.0)*x4799))+(((-1.0)*x4798*(r00*r00))));
j4eval[0]=x4802;
j4eval[1]=IKsign(x4802);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4801))+x4800))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4803=cj5*cj5;
IkReal x4804=r01*r01;
IkReal x4805=(r01*sj5);
IkReal x4806=(cj5*r00);
CheckValue<IkReal> x4807=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x4803*x4804))+(((-1.0)*x4804))+(((-1.0)*x4803*(r00*r00)))+(((2.0)*x4805*x4806)))),-1);
if(!x4807.valid){
continue;
}
CheckValue<IkReal> x4808 = IKatan2WithCheck(IkReal(((((-1.0)*x4806))+x4805)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4807.value)))+(x4808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4809=IKcos(j4);
IkReal x4810=IKsin(j4);
IkReal x4811=(cj5*r00);
IkReal x4812=(cj5*r10);
IkReal x4813=(r21*sj5);
IkReal x4814=(cj5*r20);
IkReal x4815=((1.0)*x4809);
IkReal x4816=((1.0)*x4810);
IkReal x4817=(sj5*x4810);
IkReal x4818=(sj5*x4809);
evalcond[0]=((((-1.0)*x4811*x4815))+((r02*x4810))+((r01*x4818)));
evalcond[1]=((((-1.0)*x4814*x4816))+(((-1.0)*r22*x4815))+((x4810*x4813)));
evalcond[2]=(((r11*x4817))+(((-1.0)*r12*x4815))+(((-1.0)*x4812*x4816)));
evalcond[3]=((1.0)+(((-1.0)*x4811*x4816))+(((-1.0)*r02*x4815))+((r01*x4817)));
evalcond[4]=(((cj2*sj1))+((r11*x4818))+((cj1*sj2))+((r12*x4810))+(((-1.0)*x4812*x4815)));
evalcond[5]=(((x4809*x4813))+(((-1.0)*x4814*x4815))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4819=((1.0)*cj5);
CheckValue<IkReal> x4820 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4820.valid){
continue;
}
CheckValue<IkReal> x4821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4819))+(((-1.0)*r20*sj5)))),-1);
if(!x4821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4820.value)+(((1.5707963267949)*(x4821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4822=IKcos(j4);
IkReal x4823=IKsin(j4);
IkReal x4824=(cj5*r00);
IkReal x4825=(cj5*r10);
IkReal x4826=(r21*sj5);
IkReal x4827=(cj5*r20);
IkReal x4828=((1.0)*x4822);
IkReal x4829=((1.0)*x4823);
IkReal x4830=(sj5*x4823);
IkReal x4831=(sj5*x4822);
evalcond[0]=(((r01*x4831))+((r02*x4823))+(((-1.0)*x4824*x4828)));
evalcond[1]=((((-1.0)*x4827*x4829))+((x4823*x4826))+(((-1.0)*r22*x4828)));
evalcond[2]=(((r11*x4830))+(((-1.0)*x4825*x4829))+(((-1.0)*r12*x4828)));
evalcond[3]=((1.0)+((r01*x4830))+(((-1.0)*r02*x4828))+(((-1.0)*x4824*x4829)));
evalcond[4]=(((cj2*sj1))+((r11*x4831))+((cj1*sj2))+(((-1.0)*x4825*x4828))+((r12*x4823)));
evalcond[5]=((((-1.0)*x4827*x4828))+((r22*x4823))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4822*x4826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4832 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4832.valid){
continue;
}
CheckValue<IkReal> x4833=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4832.value)+(((1.5707963267949)*(x4833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4834=IKcos(j4);
IkReal x4835=IKsin(j4);
IkReal x4836=(cj5*r00);
IkReal x4837=(cj5*r10);
IkReal x4838=(r21*sj5);
IkReal x4839=(cj5*r20);
IkReal x4840=((1.0)*x4834);
IkReal x4841=((1.0)*x4835);
IkReal x4842=(sj5*x4835);
IkReal x4843=(sj5*x4834);
evalcond[0]=((((-1.0)*x4836*x4840))+((r01*x4843))+((r02*x4835)));
evalcond[1]=((((-1.0)*x4839*x4841))+((x4835*x4838))+(((-1.0)*r22*x4840)));
evalcond[2]=((((-1.0)*x4837*x4841))+((r11*x4842))+(((-1.0)*r12*x4840)));
evalcond[3]=((1.0)+(((-1.0)*x4836*x4841))+(((-1.0)*r02*x4840))+((r01*x4842)));
evalcond[4]=((((-1.0)*x4837*x4840))+((r12*x4835))+((cj2*sj1))+((cj1*sj2))+((r11*x4843)));
evalcond[5]=((((-1.0)*x4839*x4840))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4835))+((x4834*x4838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4844=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4844);
rxp1_1=(px*r21);
rxp1_2=(r11*x4844);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4845=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4845);
rxp1_1=(px*r21);
rxp1_2=(r11*x4845);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4846=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4846);
rxp1_1=(px*r21);
rxp1_2=(r11*x4846);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4849=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4849.valid){
continue;
}
IkReal x4847=x4849.value;
IkReal x4848=(sj0*x4847);
cj4array[0]=(((cj1*sj2*x4848))+((cj2*sj1*x4848)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4850=IKsin(j4);
IkReal x4851=IKcos(j4);
IkReal x4852=(r21*sj5);
IkReal x4853=((1.0)*cj5*r20);
evalcond[0]=(r02*x4850);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4851)));
evalcond[2]=(((x4850*x4852))+(((-1.0)*x4850*x4853)));
evalcond[3]=(((r11*sj5*x4850))+(((-1.0)*cj5*r10*x4850)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4851*x4853))+((x4851*x4852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4855=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4855.valid){
continue;
}
IkReal x4854=x4855.value;
cj4array[0]=(((cj1*cj2*x4854))+(((-1.0)*sj1*sj2*x4854)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4856=IKsin(j4);
IkReal x4857=IKcos(j4);
IkReal x4858=((1.0)*sj0);
IkReal x4859=((1.0)*cj5);
IkReal x4860=(sj5*x4856);
evalcond[0]=(r02*x4856);
evalcond[1]=((((-1.0)*x4858))+(((-1.0)*r02*x4857)));
evalcond[2]=((((-1.0)*r20*x4856*x4859))+((r21*x4860)));
evalcond[3]=((((-1.0)*r10*x4856*x4859))+((r11*x4860)));
evalcond[4]=((((-1.0)*r10*x4857*x4859))+(((-1.0)*cj2*sj1*x4858))+((r11*sj5*x4857))+(((-1.0)*cj1*sj2*x4858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4861=IKPowWithIntegerCheck(r02,-1);
if(!x4861.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4861.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4862=IKsin(j4);
IkReal x4863=IKcos(j4);
IkReal x4864=((1.0)*cj1);
IkReal x4865=(r21*sj5);
IkReal x4866=((1.0)*cj5);
IkReal x4867=(r11*sj5);
evalcond[0]=(r02*x4862);
evalcond[1]=(((x4862*x4865))+(((-1.0)*r20*x4862*x4866)));
evalcond[2]=((((-1.0)*r10*x4862*x4866))+((x4862*x4867)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x4864))+((x4863*x4865))+(((-1.0)*r20*x4863*x4866)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4864))+((x4863*x4867))+(((-1.0)*r10*x4863*x4866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4868=((1.0)*sj0);
IkReal x4869=((1.0)*cj0);
CheckValue<IkReal> x4870 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4868))+(((-1.0)*r02*x4869)))),IkReal(((((-1.0)*r11*sj5*x4868))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4869))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4870.valid){
continue;
}
CheckValue<IkReal> x4871=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4870.value)+(((1.5707963267949)*(x4871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4872=IKsin(j4);
IkReal x4873=IKcos(j4);
IkReal x4874=(cj5*r00);
IkReal x4875=(cj5*r10);
IkReal x4876=(r21*sj5);
IkReal x4877=((1.0)*cj2);
IkReal x4878=((1.0)*sj0);
IkReal x4879=(cj1*sj2);
IkReal x4880=(cj5*r20);
IkReal x4881=((1.0)*x4873);
IkReal x4882=((1.0)*x4872);
IkReal x4883=(sj5*x4872);
IkReal x4884=(sj5*x4873);
evalcond[0]=((((-1.0)*x4880*x4882))+((x4872*x4876))+(((-1.0)*r22*x4881)));
evalcond[1]=(((r11*x4883))+cj0+(((-1.0)*r12*x4881))+(((-1.0)*x4875*x4882)));
evalcond[2]=((((-1.0)*x4874*x4882))+(((-1.0)*r02*x4881))+((r01*x4883))+(((-1.0)*x4878)));
evalcond[3]=((((-1.0)*x4880*x4881))+((sj1*sj2))+((x4873*x4876))+((r22*x4872))+(((-1.0)*cj1*x4877)));
evalcond[4]=((((-1.0)*x4874*x4881))+((r02*x4872))+(((-1.0)*cj0*sj1*x4877))+((r01*x4884))+(((-1.0)*cj0*x4879)));
evalcond[5]=(((r11*x4884))+(((-1.0)*x4878*x4879))+(((-1.0)*sj0*sj1*x4877))+((r12*x4872))+(((-1.0)*x4875*x4881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4885=((1.0)*cj5);
CheckValue<IkReal> x4886 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4886.valid){
continue;
}
CheckValue<IkReal> x4887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4885)))),-1);
if(!x4887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4886.value)+(((1.5707963267949)*(x4887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4888=IKsin(j4);
IkReal x4889=IKcos(j4);
IkReal x4890=(cj5*r00);
IkReal x4891=(cj5*r10);
IkReal x4892=(r21*sj5);
IkReal x4893=((1.0)*cj2);
IkReal x4894=((1.0)*sj0);
IkReal x4895=(cj1*sj2);
IkReal x4896=(cj5*r20);
IkReal x4897=((1.0)*x4889);
IkReal x4898=((1.0)*x4888);
IkReal x4899=(sj5*x4888);
IkReal x4900=(sj5*x4889);
evalcond[0]=(((x4888*x4892))+(((-1.0)*x4896*x4898))+(((-1.0)*r22*x4897)));
evalcond[1]=(((r11*x4899))+(((-1.0)*r12*x4897))+cj0+(((-1.0)*x4891*x4898)));
evalcond[2]=((((-1.0)*x4894))+(((-1.0)*r02*x4897))+(((-1.0)*x4890*x4898))+((r01*x4899)));
evalcond[3]=((((-1.0)*cj1*x4893))+((sj1*sj2))+((x4889*x4892))+(((-1.0)*x4896*x4897))+((r22*x4888)));
evalcond[4]=((((-1.0)*cj0*x4895))+(((-1.0)*cj0*sj1*x4893))+((r02*x4888))+(((-1.0)*x4890*x4897))+((r01*x4900)));
evalcond[5]=(((r12*x4888))+(((-1.0)*sj0*sj1*x4893))+(((-1.0)*x4894*x4895))+(((-1.0)*x4891*x4897))+((r11*x4900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4901=((1.0)*cj5);
CheckValue<IkReal> x4902=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4901))+(((-1.0)*r00*sj5)))),-1);
if(!x4902.valid){
continue;
}
CheckValue<IkReal> x4903 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4902.value)))+(x4903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4904=IKsin(j4);
IkReal x4905=IKcos(j4);
IkReal x4906=(cj5*r00);
IkReal x4907=(cj5*r10);
IkReal x4908=(r21*sj5);
IkReal x4909=((1.0)*cj2);
IkReal x4910=((1.0)*sj0);
IkReal x4911=(cj1*sj2);
IkReal x4912=(cj5*r20);
IkReal x4913=((1.0)*x4905);
IkReal x4914=((1.0)*x4904);
IkReal x4915=(sj5*x4904);
IkReal x4916=(sj5*x4905);
evalcond[0]=((((-1.0)*x4912*x4914))+((x4904*x4908))+(((-1.0)*r22*x4913)));
evalcond[1]=(cj0+(((-1.0)*r12*x4913))+(((-1.0)*x4907*x4914))+((r11*x4915)));
evalcond[2]=((((-1.0)*r02*x4913))+(((-1.0)*x4910))+(((-1.0)*x4906*x4914))+((r01*x4915)));
evalcond[3]=((((-1.0)*x4912*x4913))+((x4905*x4908))+((sj1*sj2))+((r22*x4904))+(((-1.0)*cj1*x4909)));
evalcond[4]=(((r02*x4904))+(((-1.0)*x4906*x4913))+((r01*x4916))+(((-1.0)*cj0*sj1*x4909))+(((-1.0)*cj0*x4911)));
evalcond[5]=((((-1.0)*x4910*x4911))+(((-1.0)*sj0*sj1*x4909))+(((-1.0)*x4907*x4913))+((r11*x4916))+((r12*x4904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4917=((1.0)*cj5);
IkReal x4918=((1.0)*sj5);
IkReal x4919=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4919;
j0eval[1]=((IKabs(((((-1.0)*r01*x4917))+(((-1.0)*r00*x4918)))))+(IKabs(((((-1.0)*r11*x4917))+(((-1.0)*r10*x4918))))));
j0eval[2]=IKsign(x4919);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4920=r21*r21;
IkReal x4921=cj5*cj5;
IkReal x4922=(cj2*sj1);
IkReal x4923=(cj1*sj2);
IkReal x4924=(r21*sj5);
IkReal x4925=((1.0)*cj5*r20);
IkReal x4926=((((-1.0)*x4920))+(((2.0)*cj5*r20*x4924))+((x4920*x4921))+(((-1.0)*(r22*r22)))+(((-1.0)*x4921*(r20*r20))));
j4eval[0]=x4926;
j4eval[1]=((IKabs((((x4922*x4924))+((x4923*x4924))+(((-1.0)*x4922*x4925))+(((-1.0)*x4923*x4925)))))+(IKabs((((r22*x4923))+((r22*x4922))))));
j4eval[2]=IKsign(x4926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4927=cj1*cj1;
IkReal x4928=(cj2*sj2);
IkReal x4929=(cj2*sj1);
IkReal x4930=(cj1*sj1);
j0eval[0]=(x4930+x4928+(((-1.07355516637478)*cj1*x4929))+(((-2.0)*x4927*x4928))+(((-1.07355516637478)*sj2*x4927))+(((-2.0)*cj1*cj2*x4929)));
j0eval[1]=((((-1.0)*x4929))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.121497180427502)*px))+(((0.82673943463312)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.121497180427502)*py))+(((0.82673943463312)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.121497180427502)*px))+(((0.82673943463312)*py))))+IKsqr(((((0.121497180427502)*py))+(((0.82673943463312)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.121497180427502)*px))+(((0.82673943463312)*py))), ((((0.121497180427502)*py))+(((0.82673943463312)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4931=IKcos(j0);
IkReal x4932=IKsin(j0);
evalcond[0]=((((1.184)*x4931))+(((-1.0)*px))+(((-0.174)*x4932)));
evalcond[1]=((((1.184)*x4932))+(((0.174)*x4931))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4933=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4933;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4934=((1.0)*cj5);
IkReal x4935=((((-1.0)*r01*x4934))+(((-1.0)*r00*sj5)));
j4eval[0]=x4935;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4934)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4936=((1.0)*cj5);
IkReal x4937=((((-1.0)*r01*x4936))+(((-1.0)*r00*sj5)));
j4eval[0]=x4937;
j4eval[1]=IKsign(x4937);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4936))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4938=((1.0)*cj5);
CheckValue<IkReal> x4939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4938))+(((-1.0)*r00*sj5)))),-1);
if(!x4939.valid){
continue;
}
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4938)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4939.value)))+(x4940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4941=IKcos(j4);
IkReal x4942=IKsin(j4);
IkReal x4943=((1.0)*sj0);
IkReal x4944=(cj5*r00);
IkReal x4945=(cj5*r10);
IkReal x4946=(cj5*r20);
IkReal x4947=((1.0)*x4941);
IkReal x4948=((1.0)*x4942);
IkReal x4949=(sj5*x4941);
IkReal x4950=(sj5*x4942);
evalcond[0]=(((r21*x4949))+(((-1.0)*x4946*x4947))+((r22*x4942)));
evalcond[1]=((((-1.0)*x4946*x4948))+(((-1.0)*r22*x4947))+((r21*x4950)));
evalcond[2]=(cj0+(((-1.0)*r12*x4947))+(((-1.0)*x4945*x4948))+((r11*x4950)));
evalcond[3]=(((r01*x4949))+((r02*x4942))+(((-1.0)*x4944*x4947))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4949))+(((-1.0)*x4943))+(((-1.0)*x4945*x4947))+((r12*x4942)));
evalcond[5]=((((-1.0)*x4943))+(((-1.0)*x4944*x4948))+(((-1.0)*r02*x4947))+((r01*x4950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4951=((1.0)*cj5);
CheckValue<IkReal> x4952 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4952.valid){
continue;
}
CheckValue<IkReal> x4953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4951)))),-1);
if(!x4953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4952.value)+(((1.5707963267949)*(x4953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4954=IKcos(j4);
IkReal x4955=IKsin(j4);
IkReal x4956=((1.0)*sj0);
IkReal x4957=(cj5*r00);
IkReal x4958=(cj5*r10);
IkReal x4959=(cj5*r20);
IkReal x4960=((1.0)*x4954);
IkReal x4961=((1.0)*x4955);
IkReal x4962=(sj5*x4954);
IkReal x4963=(sj5*x4955);
evalcond[0]=(((r22*x4955))+(((-1.0)*x4959*x4960))+((r21*x4962)));
evalcond[1]=((((-1.0)*x4959*x4961))+(((-1.0)*r22*x4960))+((r21*x4963)));
evalcond[2]=(cj0+(((-1.0)*x4958*x4961))+((r11*x4963))+(((-1.0)*r12*x4960)));
evalcond[3]=((((-1.0)*x4957*x4960))+((r02*x4955))+((r01*x4962))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4958*x4960))+((r12*x4955))+(((-1.0)*x4956))+((r11*x4962)));
evalcond[5]=((((-1.0)*x4957*x4961))+(((-1.0)*x4956))+(((-1.0)*r02*x4960))+((r01*x4963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4964 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4964.valid){
continue;
}
CheckValue<IkReal> x4965=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4964.value)+(((1.5707963267949)*(x4965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4966=IKcos(j4);
IkReal x4967=IKsin(j4);
IkReal x4968=((1.0)*sj0);
IkReal x4969=(cj5*r00);
IkReal x4970=(cj5*r10);
IkReal x4971=(cj5*r20);
IkReal x4972=((1.0)*x4966);
IkReal x4973=((1.0)*x4967);
IkReal x4974=(sj5*x4966);
IkReal x4975=(sj5*x4967);
evalcond[0]=(((r22*x4967))+(((-1.0)*x4971*x4972))+((r21*x4974)));
evalcond[1]=((((-1.0)*x4971*x4973))+(((-1.0)*r22*x4972))+((r21*x4975)));
evalcond[2]=(cj0+((r11*x4975))+(((-1.0)*r12*x4972))+(((-1.0)*x4970*x4973)));
evalcond[3]=(((r02*x4967))+(((-1.0)*cj0))+((r01*x4974))+(((-1.0)*x4969*x4972)));
evalcond[4]=(((r12*x4967))+(((-1.0)*x4968))+((r11*x4974))+(((-1.0)*x4970*x4972)));
evalcond[5]=((((-1.0)*x4968))+(((-1.0)*r02*x4972))+((r01*x4975))+(((-1.0)*x4969*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-5.43071161048689)*px))+(((1.31086142322097)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.31086142322097)*px))+(((5.43071161048689)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-5.43071161048689)*px))+(((1.31086142322097)*py))))+IKsqr(((((1.31086142322097)*px))+(((5.43071161048689)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-5.43071161048689)*px))+(((1.31086142322097)*py))), ((((1.31086142322097)*px))+(((5.43071161048689)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4976=IKsin(j0);
IkReal x4977=IKcos(j0);
evalcond[0]=((((0.042)*x4977))+(((-1.0)*px))+(((-0.174)*x4976)));
evalcond[1]=((((0.042)*x4976))+(((-1.0)*py))+(((0.174)*x4977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4978=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4978;
j4eval[1]=IKsign(x4978);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4979=((1.0)*cj5);
IkReal x4980=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4979)));
j4eval[0]=x4980;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4979)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4981=cj5*cj5;
IkReal x4982=((1.0)*r20);
IkReal x4983=(r01*r21);
IkReal x4984=(r21*sj5);
IkReal x4985=((((-1.0)*r00*x4981*x4982))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4984))+(((-1.0)*x4983))+((x4981*x4983)));
j4eval[0]=x4985;
j4eval[1]=((IKabs((((cj0*x4984))+(((-1.0)*cj0*cj5*x4982)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4986=cj5*cj5;
IkReal x4987=((1.0)*r20);
IkReal x4988=(r01*r21);
IkReal x4989=(r21*sj5);
CheckValue<IkReal> x4990=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4989))+((x4986*x4988))+(((-1.0)*x4988))+(((-1.0)*r00*x4986*x4987)))),-1);
if(!x4990.valid){
continue;
}
CheckValue<IkReal> x4991 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4989))+(((-1.0)*cj0*cj5*x4987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4990.value)))+(x4991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4992=IKcos(j4);
IkReal x4993=IKsin(j4);
IkReal x4994=(cj5*r00);
IkReal x4995=(cj5*r10);
IkReal x4996=(cj5*r20);
IkReal x4997=((1.0)*x4992);
IkReal x4998=((1.0)*x4993);
IkReal x4999=(sj5*x4992);
IkReal x5000=(sj5*x4993);
evalcond[0]=(((r22*x4993))+((r21*x4999))+(((-1.0)*x4996*x4997)));
evalcond[1]=((((-1.0)*r22*x4997))+((r21*x5000))+(((-1.0)*x4996*x4998)));
evalcond[2]=(cj0+((r02*x4993))+(((-1.0)*x4994*x4997))+((r01*x4999)));
evalcond[3]=(sj0+((r11*x4999))+((r12*x4993))+(((-1.0)*x4995*x4997)));
evalcond[4]=(((r11*x5000))+cj0+(((-1.0)*r12*x4997))+(((-1.0)*x4995*x4998)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4997))+((r01*x5000))+(((-1.0)*x4994*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5001=((1.0)*cj5);
CheckValue<IkReal> x5002 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5001)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5002.valid){
continue;
}
CheckValue<IkReal> x5003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5001)))),-1);
if(!x5003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5002.value)+(((1.5707963267949)*(x5003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5004=IKcos(j4);
IkReal x5005=IKsin(j4);
IkReal x5006=(cj5*r00);
IkReal x5007=(cj5*r10);
IkReal x5008=(cj5*r20);
IkReal x5009=((1.0)*x5004);
IkReal x5010=((1.0)*x5005);
IkReal x5011=(sj5*x5004);
IkReal x5012=(sj5*x5005);
evalcond[0]=(((r21*x5011))+((r22*x5005))+(((-1.0)*x5008*x5009)));
evalcond[1]=((((-1.0)*x5008*x5010))+((r21*x5012))+(((-1.0)*r22*x5009)));
evalcond[2]=(cj0+(((-1.0)*x5006*x5009))+((r02*x5005))+((r01*x5011)));
evalcond[3]=(((r12*x5005))+sj0+(((-1.0)*x5007*x5009))+((r11*x5011)));
evalcond[4]=(cj0+(((-1.0)*r12*x5009))+(((-1.0)*x5007*x5010))+((r11*x5012)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5006*x5010))+((r01*x5012))+(((-1.0)*r02*x5009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5013 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5013.valid){
continue;
}
CheckValue<IkReal> x5014=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5013.value)+(((1.5707963267949)*(x5014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5015=IKcos(j4);
IkReal x5016=IKsin(j4);
IkReal x5017=(cj5*r00);
IkReal x5018=(cj5*r10);
IkReal x5019=(cj5*r20);
IkReal x5020=((1.0)*x5015);
IkReal x5021=((1.0)*x5016);
IkReal x5022=(sj5*x5015);
IkReal x5023=(sj5*x5016);
evalcond[0]=((((-1.0)*x5019*x5020))+((r22*x5016))+((r21*x5022)));
evalcond[1]=((((-1.0)*x5019*x5021))+(((-1.0)*r22*x5020))+((r21*x5023)));
evalcond[2]=(cj0+((r02*x5016))+(((-1.0)*x5017*x5020))+((r01*x5022)));
evalcond[3]=(((r11*x5022))+sj0+(((-1.0)*x5018*x5020))+((r12*x5016)));
evalcond[4]=(((r11*x5023))+cj0+(((-1.0)*r12*x5020))+(((-1.0)*x5018*x5021)));
evalcond[5]=((((-1.0)*r02*x5020))+(((-1.0)*sj0))+(((-1.0)*x5017*x5021))+((r01*x5023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5024=IKsin(j0);
IkReal x5025=IKcos(j0);
IkReal x5026=(r00*sj5);
IkReal x5027=(cj5*r01);
IkReal x5028=(r10*sj5);
IkReal x5029=(cj5*r11);
evalcond[0]=((((-1.0)*x5025))+x5027+x5026);
evalcond[1]=((((-1.0)*x5024))+x5029+x5028);
evalcond[2]=((((-0.12)*x5026))+(((-0.12)*x5027))+(((-0.174)*x5024))+(((-1.0)*px)));
evalcond[3]=((((0.174)*x5025))+(((-0.12)*x5028))+(((-0.12)*x5029))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5030=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5030;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5031=((1.0)*cj5);
IkReal x5032=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5031)));
j4eval[0]=x5032;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5031)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5033=cj5*cj5;
IkReal x5034=(r01*r11);
IkReal x5035=((1.0)*r00);
IkReal x5036=(r01*sj5);
IkReal x5037=((((-1.0)*r10*x5033*x5035))+((cj5*r10*x5036))+(((-1.0)*r02*r12))+(((-1.0)*x5034))+((x5033*x5034))+((cj5*r00*r11*sj5)));
j4eval[0]=x5037;
j4eval[1]=IKsign(x5037);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5035))+((cj0*x5036))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5038=cj5*cj5;
IkReal x5039=(r01*r11);
IkReal x5040=(cj5*r00);
IkReal x5041=(r01*sj5);
CheckValue<IkReal> x5042 = IKatan2WithCheck(IkReal((((cj0*x5041))+(((-1.0)*cj0*x5040)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5042.valid){
continue;
}
CheckValue<IkReal> x5043=IKPowWithIntegerCheck(IKsign((((x5038*x5039))+(((-1.0)*r02*r12))+(((-1.0)*x5039))+(((-1.0)*r00*r10*x5038))+((cj5*r10*x5041))+((r11*sj5*x5040)))),-1);
if(!x5043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5042.value)+(((1.5707963267949)*(x5043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5044=IKcos(j4);
IkReal x5045=IKsin(j4);
IkReal x5046=(cj5*r00);
IkReal x5047=(r01*sj5);
IkReal x5048=(cj5*r10);
IkReal x5049=(cj5*r20);
IkReal x5050=((1.0)*x5044);
IkReal x5051=((1.0)*x5045);
IkReal x5052=(sj5*x5045);
IkReal x5053=(sj5*x5044);
evalcond[0]=(((r02*x5045))+((x5044*x5047))+(((-1.0)*x5046*x5050)));
evalcond[1]=(((r11*x5053))+((r12*x5045))+(((-1.0)*x5048*x5050)));
evalcond[2]=(((r21*x5052))+(((-1.0)*r22*x5050))+(((-1.0)*x5049*x5051)));
evalcond[3]=((1.0)+((r21*x5053))+(((-1.0)*x5049*x5050))+((r22*x5045)));
evalcond[4]=(cj0+(((-1.0)*r12*x5050))+((r11*x5052))+(((-1.0)*x5048*x5051)));
evalcond[5]=((((-1.0)*sj0))+((x5045*x5047))+(((-1.0)*r02*x5050))+(((-1.0)*x5046*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5054=((1.0)*cj5);
CheckValue<IkReal> x5055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5054))+(((-1.0)*r00*sj5)))),-1);
if(!x5055.valid){
continue;
}
CheckValue<IkReal> x5056 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5054))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5055.value)))+(x5056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5057=IKcos(j4);
IkReal x5058=IKsin(j4);
IkReal x5059=(cj5*r00);
IkReal x5060=(r01*sj5);
IkReal x5061=(cj5*r10);
IkReal x5062=(cj5*r20);
IkReal x5063=((1.0)*x5057);
IkReal x5064=((1.0)*x5058);
IkReal x5065=(sj5*x5058);
IkReal x5066=(sj5*x5057);
evalcond[0]=((((-1.0)*x5059*x5063))+((x5057*x5060))+((r02*x5058)));
evalcond[1]=((((-1.0)*x5061*x5063))+((r12*x5058))+((r11*x5066)));
evalcond[2]=((((-1.0)*r22*x5063))+((r21*x5065))+(((-1.0)*x5062*x5064)));
evalcond[3]=((1.0)+((r22*x5058))+((r21*x5066))+(((-1.0)*x5062*x5063)));
evalcond[4]=(cj0+(((-1.0)*x5061*x5064))+(((-1.0)*r12*x5063))+((r11*x5065)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5059*x5064))+(((-1.0)*r02*x5063))+((x5058*x5060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5067 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5067.valid){
continue;
}
CheckValue<IkReal> x5068=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5067.value)+(((1.5707963267949)*(x5068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5069=IKcos(j4);
IkReal x5070=IKsin(j4);
IkReal x5071=(cj5*r00);
IkReal x5072=(r01*sj5);
IkReal x5073=(cj5*r10);
IkReal x5074=(cj5*r20);
IkReal x5075=((1.0)*x5069);
IkReal x5076=((1.0)*x5070);
IkReal x5077=(sj5*x5070);
IkReal x5078=(sj5*x5069);
evalcond[0]=(((r02*x5070))+((x5069*x5072))+(((-1.0)*x5071*x5075)));
evalcond[1]=((((-1.0)*x5073*x5075))+((r12*x5070))+((r11*x5078)));
evalcond[2]=(((r21*x5077))+(((-1.0)*r22*x5075))+(((-1.0)*x5074*x5076)));
evalcond[3]=((1.0)+((r21*x5078))+(((-1.0)*x5074*x5075))+((r22*x5070)));
evalcond[4]=(cj0+(((-1.0)*x5073*x5076))+(((-1.0)*r12*x5075))+((r11*x5077)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5075))+((x5070*x5072))+(((-1.0)*x5071*x5076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.60250563402813)*py))+(((-0.488329212470918)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.60250563402813)*px))+(((0.488329212470918)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.60250563402813)*py))+(((-0.488329212470918)*px))))+IKsqr(((((-1.60250563402813)*px))+(((0.488329212470918)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.60250563402813)*py))+(((-0.488329212470918)*px))), ((((-1.60250563402813)*px))+(((0.488329212470918)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5079=IKcos(j0);
IkReal x5080=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.174)*x5080))+(((-0.571)*x5079)));
evalcond[1]=((((0.174)*x5079))+(((-0.571)*x5080))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5081=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5081;
j4eval[1]=IKsign(x5081);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5082=((1.0)*cj5);
IkReal x5083=((((-1.0)*r11*x5082))+(((-1.0)*r10*sj5)));
j4eval[0]=x5083;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5082)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5084=cj5*cj5;
IkReal x5085=((1.0)*r20);
IkReal x5086=(r01*r21);
IkReal x5087=(r21*sj5);
IkReal x5088=(((cj5*r01*r20*sj5))+((x5084*x5086))+(((-1.0)*r02*r22))+(((-1.0)*x5086))+(((-1.0)*r00*x5084*x5085))+((cj5*r00*x5087)));
j4eval[0]=x5088;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5087))+(((-1.0)*cj0*cj5*x5085))))));
j4eval[2]=IKsign(x5088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5089=cj5*cj5;
IkReal x5090=((1.0)*r20);
IkReal x5091=(r01*r21);
IkReal x5092=(r21*sj5);
CheckValue<IkReal> x5093=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5091))+(((-1.0)*r00*x5089*x5090))+((x5089*x5091))+((cj5*r00*x5092)))),-1);
if(!x5093.valid){
continue;
}
CheckValue<IkReal> x5094 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5092))+(((-1.0)*cj0*cj5*x5090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5093.value)))+(x5094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5095=IKcos(j4);
IkReal x5096=IKsin(j4);
IkReal x5097=(cj5*r00);
IkReal x5098=(cj5*r10);
IkReal x5099=(cj5*r20);
IkReal x5100=((1.0)*x5095);
IkReal x5101=((1.0)*x5096);
IkReal x5102=(sj5*x5095);
IkReal x5103=(sj5*x5096);
evalcond[0]=(((r22*x5096))+((r21*x5102))+(((-1.0)*x5099*x5100)));
evalcond[1]=((((-1.0)*r22*x5100))+((r21*x5103))+(((-1.0)*x5099*x5101)));
evalcond[2]=((((-1.0)*x5097*x5100))+((r01*x5102))+cj0+((r02*x5096)));
evalcond[3]=(sj0+((r12*x5096))+(((-1.0)*x5098*x5100))+((r11*x5102)));
evalcond[4]=(cj0+(((-1.0)*x5098*x5101))+((r11*x5103))+(((-1.0)*r12*x5100)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5097*x5101))+((r01*x5103))+(((-1.0)*r02*x5100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5104=((1.0)*cj5);
CheckValue<IkReal> x5105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5104)))),-1);
if(!x5105.valid){
continue;
}
CheckValue<IkReal> x5106 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5104)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5105.value)))+(x5106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5107=IKcos(j4);
IkReal x5108=IKsin(j4);
IkReal x5109=(cj5*r00);
IkReal x5110=(cj5*r10);
IkReal x5111=(cj5*r20);
IkReal x5112=((1.0)*x5107);
IkReal x5113=((1.0)*x5108);
IkReal x5114=(sj5*x5107);
IkReal x5115=(sj5*x5108);
evalcond[0]=((((-1.0)*x5111*x5112))+((r22*x5108))+((r21*x5114)));
evalcond[1]=((((-1.0)*r22*x5112))+(((-1.0)*x5111*x5113))+((r21*x5115)));
evalcond[2]=(((r01*x5114))+cj0+((r02*x5108))+(((-1.0)*x5109*x5112)));
evalcond[3]=(((r12*x5108))+sj0+(((-1.0)*x5110*x5112))+((r11*x5114)));
evalcond[4]=(cj0+(((-1.0)*x5110*x5113))+((r11*x5115))+(((-1.0)*r12*x5112)));
evalcond[5]=(((r01*x5115))+(((-1.0)*sj0))+(((-1.0)*r02*x5112))+(((-1.0)*x5109*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5116 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5116.value)+(((1.5707963267949)*(x5117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKcos(j4);
IkReal x5119=IKsin(j4);
IkReal x5120=(cj5*r00);
IkReal x5121=(cj5*r10);
IkReal x5122=(cj5*r20);
IkReal x5123=((1.0)*x5118);
IkReal x5124=((1.0)*x5119);
IkReal x5125=(sj5*x5118);
IkReal x5126=(sj5*x5119);
evalcond[0]=(((r22*x5119))+(((-1.0)*x5122*x5123))+((r21*x5125)));
evalcond[1]=((((-1.0)*x5122*x5124))+((r21*x5126))+(((-1.0)*r22*x5123)));
evalcond[2]=(cj0+((r02*x5119))+((r01*x5125))+(((-1.0)*x5120*x5123)));
evalcond[3]=(sj0+((r11*x5125))+(((-1.0)*x5121*x5123))+((r12*x5119)));
evalcond[4]=(cj0+((r11*x5126))+(((-1.0)*x5121*x5124))+(((-1.0)*r12*x5123)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5126))+(((-1.0)*r02*x5123))+(((-1.0)*x5120*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5127=((1.0)*sj5);
IkReal x5128=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5127))+(((-1.0)*r11*x5128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5127))+(((-1.0)*r01*x5128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5127))+(((-1.0)*r11*x5128))))+IKsqr(((((-1.0)*r00*x5127))+(((-1.0)*r01*x5128))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5127))+(((-1.0)*r11*x5128))), ((((-1.0)*r00*x5127))+(((-1.0)*r01*x5128))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5129=IKsin(j0);
IkReal x5130=IKcos(j0);
IkReal x5131=(cj5*r01);
IkReal x5132=(r10*sj5);
IkReal x5133=(cj5*r11);
IkReal x5134=(r00*sj5);
evalcond[0]=(x5134+x5131+x5130);
evalcond[1]=(x5129+x5133+x5132);
evalcond[2]=((((-0.12)*x5134))+(((-0.12)*x5131))+(((-1.0)*px))+(((-0.174)*x5129)));
evalcond[3]=((((-0.12)*x5133))+(((-0.12)*x5132))+(((0.174)*x5130))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5135=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5135;
j4eval[1]=IKsign(x5135);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5136=((1.0)*cj5);
IkReal x5137=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5136)));
j4eval[0]=x5137;
j4eval[1]=IKsign(x5137);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5136))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5138=cj5*cj5;
IkReal x5139=(r01*r11);
IkReal x5140=((1.0)*r00);
IkReal x5141=(r01*sj5);
IkReal x5142=((((-1.0)*r02*r12))+(((-1.0)*r10*x5138*x5140))+(((-1.0)*x5139))+((x5138*x5139))+((cj5*r10*x5141))+((cj5*r00*r11*sj5)));
j4eval[0]=x5142;
j4eval[1]=IKsign(x5142);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5141))+(((-1.0)*cj0*cj5*x5140))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5143=cj5*cj5;
IkReal x5144=(r01*r11);
IkReal x5145=(cj5*r00);
IkReal x5146=(r01*sj5);
CheckValue<IkReal> x5147=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5145))+(((-1.0)*r02*r12))+((x5143*x5144))+(((-1.0)*x5144))+(((-1.0)*r00*r10*x5143))+((cj5*r10*x5146)))),-1);
if(!x5147.valid){
continue;
}
CheckValue<IkReal> x5148 = IKatan2WithCheck(IkReal((((cj0*x5146))+(((-1.0)*cj0*x5145)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5147.value)))+(x5148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5149=IKcos(j4);
IkReal x5150=IKsin(j4);
IkReal x5151=(cj5*r00);
IkReal x5152=(r01*sj5);
IkReal x5153=(cj5*r10);
IkReal x5154=(cj5*r20);
IkReal x5155=((1.0)*x5149);
IkReal x5156=((1.0)*x5150);
IkReal x5157=(sj5*x5150);
IkReal x5158=(sj5*x5149);
evalcond[0]=((((-1.0)*x5151*x5155))+((x5149*x5152))+((r02*x5150)));
evalcond[1]=(((r11*x5158))+((r12*x5150))+(((-1.0)*x5153*x5155)));
evalcond[2]=((((-1.0)*x5154*x5156))+((r21*x5157))+(((-1.0)*r22*x5155)));
evalcond[3]=((-1.0)+(((-1.0)*x5154*x5155))+((r21*x5158))+((r22*x5150)));
evalcond[4]=(((r11*x5157))+cj0+(((-1.0)*r12*x5155))+(((-1.0)*x5153*x5156)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5151*x5156))+((x5150*x5152))+(((-1.0)*r02*x5155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5159=((1.0)*cj5);
CheckValue<IkReal> x5160=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5159)))),-1);
if(!x5160.valid){
continue;
}
CheckValue<IkReal> x5161 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5159)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5160.value)))+(x5161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5162=IKcos(j4);
IkReal x5163=IKsin(j4);
IkReal x5164=(cj5*r00);
IkReal x5165=(r01*sj5);
IkReal x5166=(cj5*r10);
IkReal x5167=(cj5*r20);
IkReal x5168=((1.0)*x5162);
IkReal x5169=((1.0)*x5163);
IkReal x5170=(sj5*x5163);
IkReal x5171=(sj5*x5162);
evalcond[0]=(((x5162*x5165))+(((-1.0)*x5164*x5168))+((r02*x5163)));
evalcond[1]=(((r12*x5163))+((r11*x5171))+(((-1.0)*x5166*x5168)));
evalcond[2]=((((-1.0)*r22*x5168))+(((-1.0)*x5167*x5169))+((r21*x5170)));
evalcond[3]=((-1.0)+((r22*x5163))+(((-1.0)*x5167*x5168))+((r21*x5171)));
evalcond[4]=(cj0+(((-1.0)*r12*x5168))+((r11*x5170))+(((-1.0)*x5166*x5169)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5168))+(((-1.0)*x5164*x5169))+((x5163*x5165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5172=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5172.valid){
continue;
}
CheckValue<IkReal> x5173 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5172.value)))+(x5173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5174=IKcos(j4);
IkReal x5175=IKsin(j4);
IkReal x5176=(cj5*r00);
IkReal x5177=(r01*sj5);
IkReal x5178=(cj5*r10);
IkReal x5179=(cj5*r20);
IkReal x5180=((1.0)*x5174);
IkReal x5181=((1.0)*x5175);
IkReal x5182=(sj5*x5175);
IkReal x5183=(sj5*x5174);
evalcond[0]=((((-1.0)*x5176*x5180))+((r02*x5175))+((x5174*x5177)));
evalcond[1]=(((r12*x5175))+((r11*x5183))+(((-1.0)*x5178*x5180)));
evalcond[2]=((((-1.0)*r22*x5180))+((r21*x5182))+(((-1.0)*x5179*x5181)));
evalcond[3]=((-1.0)+((r21*x5183))+((r22*x5175))+(((-1.0)*x5179*x5180)));
evalcond[4]=(cj0+(((-1.0)*r12*x5180))+((r11*x5182))+(((-1.0)*x5178*x5181)));
evalcond[5]=((((-1.0)*x5176*x5181))+(((-1.0)*sj0))+(((-1.0)*r02*x5180))+((x5175*x5177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.60250563402813)*py))+(((-0.488329212470918)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.60250563402813)*px))+(((0.488329212470918)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.60250563402813)*py))+(((-0.488329212470918)*px))))+IKsqr(((((1.60250563402813)*px))+(((0.488329212470918)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.60250563402813)*py))+(((-0.488329212470918)*px))), ((((1.60250563402813)*px))+(((0.488329212470918)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5184=IKcos(j0);
IkReal x5185=IKsin(j0);
evalcond[0]=((((0.571)*x5184))+(((-1.0)*px))+(((-0.174)*x5185)));
evalcond[1]=((((0.571)*x5185))+(((0.174)*x5184))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5186=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5186;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5187=((1.0)*cj5);
IkReal x5188=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5187)));
j4eval[0]=x5188;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5187))))));
j4eval[2]=IKsign(x5188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5189=((1.0)*cj5);
IkReal x5190=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5189)));
j4eval[0]=x5190;
j4eval[1]=IKsign(x5190);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5189))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5191=((1.0)*cj5);
CheckValue<IkReal> x5192 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5191)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5192.valid){
continue;
}
CheckValue<IkReal> x5193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5191))+(((-1.0)*r00*sj5)))),-1);
if(!x5193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5192.value)+(((1.5707963267949)*(x5193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5194=IKcos(j4);
IkReal x5195=IKsin(j4);
IkReal x5196=((1.0)*sj0);
IkReal x5197=(cj5*r00);
IkReal x5198=(cj5*r10);
IkReal x5199=(cj5*r20);
IkReal x5200=((1.0)*x5194);
IkReal x5201=((1.0)*x5195);
IkReal x5202=(sj5*x5194);
IkReal x5203=(sj5*x5195);
evalcond[0]=((((-1.0)*x5199*x5200))+((r22*x5195))+((r21*x5202)));
evalcond[1]=((((-1.0)*x5199*x5201))+(((-1.0)*r22*x5200))+((r21*x5203)));
evalcond[2]=(cj0+((r11*x5203))+(((-1.0)*x5198*x5201))+(((-1.0)*r12*x5200)));
evalcond[3]=(((r01*x5202))+((r02*x5195))+(((-1.0)*x5197*x5200))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5196))+((r11*x5202))+(((-1.0)*x5198*x5200))+((r12*x5195)));
evalcond[5]=((((-1.0)*r02*x5200))+((r01*x5203))+(((-1.0)*x5196))+(((-1.0)*x5197*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5204=((1.0)*cj5);
CheckValue<IkReal> x5205 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5205.valid){
continue;
}
CheckValue<IkReal> x5206=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5204)))),-1);
if(!x5206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5205.value)+(((1.5707963267949)*(x5206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5207=IKcos(j4);
IkReal x5208=IKsin(j4);
IkReal x5209=((1.0)*sj0);
IkReal x5210=(cj5*r00);
IkReal x5211=(cj5*r10);
IkReal x5212=(cj5*r20);
IkReal x5213=((1.0)*x5207);
IkReal x5214=((1.0)*x5208);
IkReal x5215=(sj5*x5207);
IkReal x5216=(sj5*x5208);
evalcond[0]=((((-1.0)*x5212*x5213))+((r22*x5208))+((r21*x5215)));
evalcond[1]=((((-1.0)*x5212*x5214))+(((-1.0)*r22*x5213))+((r21*x5216)));
evalcond[2]=(cj0+((r11*x5216))+(((-1.0)*x5211*x5214))+(((-1.0)*r12*x5213)));
evalcond[3]=(((r01*x5215))+((r02*x5208))+(((-1.0)*cj0))+(((-1.0)*x5210*x5213)));
evalcond[4]=((((-1.0)*x5209))+((r11*x5215))+(((-1.0)*x5211*x5213))+((r12*x5208)));
evalcond[5]=((((-1.0)*x5209))+((r01*x5216))+(((-1.0)*x5210*x5214))+(((-1.0)*r02*x5213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5217 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5217.valid){
continue;
}
CheckValue<IkReal> x5218=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5217.value)+(((1.5707963267949)*(x5218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5219=IKcos(j4);
IkReal x5220=IKsin(j4);
IkReal x5221=((1.0)*sj0);
IkReal x5222=(cj5*r00);
IkReal x5223=(cj5*r10);
IkReal x5224=(cj5*r20);
IkReal x5225=((1.0)*x5219);
IkReal x5226=((1.0)*x5220);
IkReal x5227=(sj5*x5219);
IkReal x5228=(sj5*x5220);
evalcond[0]=(((r21*x5227))+((r22*x5220))+(((-1.0)*x5224*x5225)));
evalcond[1]=(((r21*x5228))+(((-1.0)*x5224*x5226))+(((-1.0)*r22*x5225)));
evalcond[2]=((((-1.0)*x5223*x5226))+cj0+(((-1.0)*r12*x5225))+((r11*x5228)));
evalcond[3]=(((r02*x5220))+(((-1.0)*x5222*x5225))+((r01*x5227))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5223*x5225))+(((-1.0)*x5221))+((r11*x5227))+((r12*x5220)));
evalcond[5]=((((-1.0)*x5222*x5226))+(((-1.0)*x5221))+(((-1.0)*r02*x5225))+((r01*x5228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.82673943463312)*py))+(((-0.121497180427502)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.82673943463312)*px))+(((0.121497180427502)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.82673943463312)*py))+(((-0.121497180427502)*px))))+IKsqr(((((-0.82673943463312)*px))+(((0.121497180427502)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.82673943463312)*py))+(((-0.121497180427502)*px))), ((((-0.82673943463312)*px))+(((0.121497180427502)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5229=IKcos(j0);
IkReal x5230=IKsin(j0);
evalcond[0]=((((-1.184)*x5229))+(((-1.0)*px))+(((-0.174)*x5230)));
evalcond[1]=((((-1.184)*x5230))+(((-1.0)*py))+(((0.174)*x5229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5231=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5231;
j4eval[1]=IKsign(x5231);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5232=((1.0)*cj5);
IkReal x5233=((((-1.0)*r11*x5232))+(((-1.0)*r10*sj5)));
j4eval[0]=x5233;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5232))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5234=cj5*cj5;
IkReal x5235=((1.0)*r20);
IkReal x5236=(r01*r21);
IkReal x5237=(r21*sj5);
IkReal x5238=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5234*x5235))+(((-1.0)*x5236))+((x5234*x5236))+((cj5*r00*x5237)));
j4eval[0]=x5238;
j4eval[1]=((IKabs((((cj0*x5237))+(((-1.0)*cj0*cj5*x5235)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5238);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5239=cj5*cj5;
IkReal x5240=((1.0)*r20);
IkReal x5241=(r01*r21);
IkReal x5242=(r21*sj5);
CheckValue<IkReal> x5243=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5239*x5241))+(((-1.0)*r02*r22))+(((-1.0)*x5241))+(((-1.0)*r00*x5239*x5240))+((cj5*r00*x5242)))),-1);
if(!x5243.valid){
continue;
}
CheckValue<IkReal> x5244 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5242))+(((-1.0)*cj0*cj5*x5240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5243.value)))+(x5244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5245=IKcos(j4);
IkReal x5246=IKsin(j4);
IkReal x5247=(cj5*r00);
IkReal x5248=(cj5*r10);
IkReal x5249=(cj5*r20);
IkReal x5250=((1.0)*x5245);
IkReal x5251=((1.0)*x5246);
IkReal x5252=(sj5*x5245);
IkReal x5253=(sj5*x5246);
evalcond[0]=((((-1.0)*x5249*x5250))+((r21*x5252))+((r22*x5246)));
evalcond[1]=((((-1.0)*x5249*x5251))+((r21*x5253))+(((-1.0)*r22*x5250)));
evalcond[2]=(((r01*x5252))+cj0+(((-1.0)*x5247*x5250))+((r02*x5246)));
evalcond[3]=(sj0+(((-1.0)*x5248*x5250))+((r12*x5246))+((r11*x5252)));
evalcond[4]=((((-1.0)*x5248*x5251))+cj0+(((-1.0)*r12*x5250))+((r11*x5253)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5250))+((r01*x5253))+(((-1.0)*x5247*x5251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5254=((1.0)*cj5);
CheckValue<IkReal> x5255 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5254)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5255.valid){
continue;
}
CheckValue<IkReal> x5256=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5254)))),-1);
if(!x5256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5255.value)+(((1.5707963267949)*(x5256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5257=IKcos(j4);
IkReal x5258=IKsin(j4);
IkReal x5259=(cj5*r00);
IkReal x5260=(cj5*r10);
IkReal x5261=(cj5*r20);
IkReal x5262=((1.0)*x5257);
IkReal x5263=((1.0)*x5258);
IkReal x5264=(sj5*x5257);
IkReal x5265=(sj5*x5258);
evalcond[0]=(((r22*x5258))+((r21*x5264))+(((-1.0)*x5261*x5262)));
evalcond[1]=(((r21*x5265))+(((-1.0)*r22*x5262))+(((-1.0)*x5261*x5263)));
evalcond[2]=((((-1.0)*x5259*x5262))+cj0+((r01*x5264))+((r02*x5258)));
evalcond[3]=(sj0+((r12*x5258))+((r11*x5264))+(((-1.0)*x5260*x5262)));
evalcond[4]=(cj0+(((-1.0)*r12*x5262))+((r11*x5265))+(((-1.0)*x5260*x5263)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5259*x5263))+((r01*x5265))+(((-1.0)*r02*x5262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5266 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5266.valid){
continue;
}
CheckValue<IkReal> x5267=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5266.value)+(((1.5707963267949)*(x5267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5268=IKcos(j4);
IkReal x5269=IKsin(j4);
IkReal x5270=(cj5*r00);
IkReal x5271=(cj5*r10);
IkReal x5272=(cj5*r20);
IkReal x5273=((1.0)*x5268);
IkReal x5274=((1.0)*x5269);
IkReal x5275=(sj5*x5268);
IkReal x5276=(sj5*x5269);
evalcond[0]=((((-1.0)*x5272*x5273))+((r21*x5275))+((r22*x5269)));
evalcond[1]=((((-1.0)*x5272*x5274))+((r21*x5276))+(((-1.0)*r22*x5273)));
evalcond[2]=(((r02*x5269))+cj0+((r01*x5275))+(((-1.0)*x5270*x5273)));
evalcond[3]=(sj0+((r12*x5269))+(((-1.0)*x5271*x5273))+((r11*x5275)));
evalcond[4]=(cj0+(((-1.0)*x5271*x5274))+(((-1.0)*r12*x5273))+((r11*x5276)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5276))+(((-1.0)*x5270*x5274))+(((-1.0)*r02*x5273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-5.43071161048689)*px))+(((-1.31086142322097)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.31086142322097)*px))+(((5.43071161048689)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-5.43071161048689)*px))+(((-1.31086142322097)*py))))+IKsqr(((((-1.31086142322097)*px))+(((5.43071161048689)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-5.43071161048689)*px))+(((-1.31086142322097)*py))), ((((-1.31086142322097)*px))+(((5.43071161048689)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5277=IKcos(j0);
IkReal x5278=IKsin(j0);
evalcond[0]=((((-0.174)*x5278))+(((-0.042)*x5277))+(((-1.0)*px)));
evalcond[1]=((((-0.042)*x5278))+(((-1.0)*py))+(((0.174)*x5277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5279=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5279;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5280=((1.0)*cj5);
IkReal x5281=((((-1.0)*r01*x5280))+(((-1.0)*r00*sj5)));
j4eval[0]=x5281;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5280))))));
j4eval[2]=IKsign(x5281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5282=((1.0)*cj5);
IkReal x5283=((((-1.0)*r01*x5282))+(((-1.0)*r00*sj5)));
j4eval[0]=x5283;
j4eval[1]=IKsign(x5283);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5282))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5284=((1.0)*cj5);
CheckValue<IkReal> x5285 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5284)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5285.valid){
continue;
}
CheckValue<IkReal> x5286=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5284))+(((-1.0)*r00*sj5)))),-1);
if(!x5286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5285.value)+(((1.5707963267949)*(x5286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5287=IKcos(j4);
IkReal x5288=IKsin(j4);
IkReal x5289=((1.0)*sj0);
IkReal x5290=(cj5*r00);
IkReal x5291=(cj5*r10);
IkReal x5292=(cj5*r20);
IkReal x5293=((1.0)*x5287);
IkReal x5294=((1.0)*x5288);
IkReal x5295=(sj5*x5287);
IkReal x5296=(sj5*x5288);
evalcond[0]=(((r22*x5288))+((r21*x5295))+(((-1.0)*x5292*x5293)));
evalcond[1]=((((-1.0)*r22*x5293))+((r21*x5296))+(((-1.0)*x5292*x5294)));
evalcond[2]=(cj0+(((-1.0)*r12*x5293))+(((-1.0)*x5291*x5294))+((r11*x5296)));
evalcond[3]=(((r02*x5288))+((r01*x5295))+(((-1.0)*x5290*x5293))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5288))+(((-1.0)*x5289))+(((-1.0)*x5291*x5293))+((r11*x5295)));
evalcond[5]=((((-1.0)*x5289))+((r01*x5296))+(((-1.0)*r02*x5293))+(((-1.0)*x5290*x5294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5297=((1.0)*cj5);
CheckValue<IkReal> x5298=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5297))+(((-1.0)*r00*sj5)))),-1);
if(!x5298.valid){
continue;
}
CheckValue<IkReal> x5299 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5298.value)))+(x5299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5300=IKcos(j4);
IkReal x5301=IKsin(j4);
IkReal x5302=((1.0)*sj0);
IkReal x5303=(cj5*r00);
IkReal x5304=(cj5*r10);
IkReal x5305=(cj5*r20);
IkReal x5306=((1.0)*x5300);
IkReal x5307=((1.0)*x5301);
IkReal x5308=(sj5*x5300);
IkReal x5309=(sj5*x5301);
evalcond[0]=(((r21*x5308))+(((-1.0)*x5305*x5306))+((r22*x5301)));
evalcond[1]=((((-1.0)*r22*x5306))+((r21*x5309))+(((-1.0)*x5305*x5307)));
evalcond[2]=(cj0+(((-1.0)*r12*x5306))+((r11*x5309))+(((-1.0)*x5304*x5307)));
evalcond[3]=((((-1.0)*x5303*x5306))+((r02*x5301))+((r01*x5308))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5302))+((r12*x5301))+((r11*x5308))+(((-1.0)*x5304*x5306)));
evalcond[5]=((((-1.0)*x5303*x5307))+(((-1.0)*x5302))+(((-1.0)*r02*x5306))+((r01*x5309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5310 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5310.valid){
continue;
}
CheckValue<IkReal> x5311=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5310.value)+(((1.5707963267949)*(x5311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5312=IKcos(j4);
IkReal x5313=IKsin(j4);
IkReal x5314=((1.0)*sj0);
IkReal x5315=(cj5*r00);
IkReal x5316=(cj5*r10);
IkReal x5317=(cj5*r20);
IkReal x5318=((1.0)*x5312);
IkReal x5319=((1.0)*x5313);
IkReal x5320=(sj5*x5312);
IkReal x5321=(sj5*x5313);
evalcond[0]=(((r22*x5313))+((r21*x5320))+(((-1.0)*x5317*x5318)));
evalcond[1]=(((r21*x5321))+(((-1.0)*x5317*x5319))+(((-1.0)*r22*x5318)));
evalcond[2]=((((-1.0)*r12*x5318))+((r11*x5321))+cj0+(((-1.0)*x5316*x5319)));
evalcond[3]=(((r02*x5313))+(((-1.0)*x5315*x5318))+((r01*x5320))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5314))+((r11*x5320))+(((-1.0)*x5316*x5318))+((r12*x5313)));
evalcond[5]=((((-1.0)*x5314))+(((-1.0)*x5315*x5319))+((r01*x5321))+(((-1.0)*r02*x5318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5322=((1.0)*sj5);
IkReal x5323=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5323))+(((-1.0)*r10*x5322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5322))+(((-1.0)*r01*x5323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5323))+(((-1.0)*r10*x5322))))+IKsqr(((((-1.0)*r00*x5322))+(((-1.0)*r01*x5323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5323))+(((-1.0)*r10*x5322))), ((((-1.0)*r00*x5322))+(((-1.0)*r01*x5323))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5324=IKsin(j0);
IkReal x5325=IKcos(j0);
IkReal x5326=(cj5*r01);
IkReal x5327=(r10*sj5);
IkReal x5328=(cj5*r11);
IkReal x5329=(r00*sj5);
evalcond[0]=(x5326+x5325+x5329);
evalcond[1]=(x5327+x5324+x5328);
evalcond[2]=((((-0.174)*x5324))+(((-1.0)*px))+(((-0.12)*x5326))+(((-0.12)*x5329)));
evalcond[3]=((((0.174)*x5325))+(((-1.0)*py))+(((-0.12)*x5327))+(((-0.12)*x5328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5330=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5330;
j4eval[1]=IKsign(x5330);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5331=((1.0)*cj5);
IkReal x5332=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5331)));
j4eval[0]=x5332;
j4eval[1]=IKsign(x5332);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5331))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5333=cj5*cj5;
IkReal x5334=(r01*r11);
IkReal x5335=((1.0)*r00);
IkReal x5336=(r01*sj5);
IkReal x5337=((((-1.0)*x5334))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5333*x5335))+((cj5*r10*x5336))+((x5333*x5334))+((cj5*r00*r11*sj5)));
j4eval[0]=x5337;
j4eval[1]=IKsign(x5337);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5336))+(((-1.0)*cj0*cj5*x5335))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5338=cj5*cj5;
IkReal x5339=(r01*r11);
IkReal x5340=(cj5*r00);
IkReal x5341=(r01*sj5);
CheckValue<IkReal> x5342=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5341))+(((-1.0)*x5339))+(((-1.0)*r02*r12))+((r11*sj5*x5340))+((x5338*x5339))+(((-1.0)*r00*r10*x5338)))),-1);
if(!x5342.valid){
continue;
}
CheckValue<IkReal> x5343 = IKatan2WithCheck(IkReal((((cj0*x5341))+(((-1.0)*cj0*x5340)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5342.value)))+(x5343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5344=IKcos(j4);
IkReal x5345=IKsin(j4);
IkReal x5346=(cj5*r00);
IkReal x5347=(r01*sj5);
IkReal x5348=(cj5*r10);
IkReal x5349=(cj5*r20);
IkReal x5350=((1.0)*x5344);
IkReal x5351=((1.0)*x5345);
IkReal x5352=(sj5*x5345);
IkReal x5353=(sj5*x5344);
evalcond[0]=((((-1.0)*x5346*x5350))+((r02*x5345))+((x5344*x5347)));
evalcond[1]=(((r12*x5345))+((r11*x5353))+(((-1.0)*x5348*x5350)));
evalcond[2]=((((-1.0)*x5349*x5351))+(((-1.0)*r22*x5350))+((r21*x5352)));
evalcond[3]=((-1.0)+(((-1.0)*x5349*x5350))+((r22*x5345))+((r21*x5353)));
evalcond[4]=(cj0+((r11*x5352))+(((-1.0)*r12*x5350))+(((-1.0)*x5348*x5351)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5346*x5351))+(((-1.0)*r02*x5350))+((x5345*x5347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5354=((1.0)*cj5);
CheckValue<IkReal> x5355 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5354)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5355.valid){
continue;
}
CheckValue<IkReal> x5356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5354)))),-1);
if(!x5356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5355.value)+(((1.5707963267949)*(x5356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5357=IKcos(j4);
IkReal x5358=IKsin(j4);
IkReal x5359=(cj5*r00);
IkReal x5360=(r01*sj5);
IkReal x5361=(cj5*r10);
IkReal x5362=(cj5*r20);
IkReal x5363=((1.0)*x5357);
IkReal x5364=((1.0)*x5358);
IkReal x5365=(sj5*x5358);
IkReal x5366=(sj5*x5357);
evalcond[0]=(((x5357*x5360))+(((-1.0)*x5359*x5363))+((r02*x5358)));
evalcond[1]=(((r12*x5358))+(((-1.0)*x5361*x5363))+((r11*x5366)));
evalcond[2]=((((-1.0)*r22*x5363))+((r21*x5365))+(((-1.0)*x5362*x5364)));
evalcond[3]=((-1.0)+((r22*x5358))+((r21*x5366))+(((-1.0)*x5362*x5363)));
evalcond[4]=(cj0+(((-1.0)*x5361*x5364))+(((-1.0)*r12*x5363))+((r11*x5365)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5363))+(((-1.0)*x5359*x5364))+((x5358*x5360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5367=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5367.valid){
continue;
}
CheckValue<IkReal> x5368 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5367.value)))+(x5368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5369=IKcos(j4);
IkReal x5370=IKsin(j4);
IkReal x5371=(cj5*r00);
IkReal x5372=(r01*sj5);
IkReal x5373=(cj5*r10);
IkReal x5374=(cj5*r20);
IkReal x5375=((1.0)*x5369);
IkReal x5376=((1.0)*x5370);
IkReal x5377=(sj5*x5370);
IkReal x5378=(sj5*x5369);
evalcond[0]=(((x5369*x5372))+(((-1.0)*x5371*x5375))+((r02*x5370)));
evalcond[1]=((((-1.0)*x5373*x5375))+((r12*x5370))+((r11*x5378)));
evalcond[2]=((((-1.0)*r22*x5375))+((r21*x5377))+(((-1.0)*x5374*x5376)));
evalcond[3]=((-1.0)+((r21*x5378))+((r22*x5370))+(((-1.0)*x5374*x5375)));
evalcond[4]=(cj0+(((-1.0)*r12*x5375))+(((-1.0)*x5373*x5376))+((r11*x5377)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5371*x5376))+((x5370*x5372))+(((-1.0)*r02*x5375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.60250563402813)*py))+(((-0.488329212470918)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.60250563402813)*px))+(((0.488329212470918)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.60250563402813)*py))+(((-0.488329212470918)*px))))+IKsqr(((((1.60250563402813)*px))+(((0.488329212470918)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.60250563402813)*py))+(((-0.488329212470918)*px))), ((((1.60250563402813)*px))+(((0.488329212470918)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5379=IKcos(j0);
IkReal x5380=IKsin(j0);
evalcond[0]=((((-0.174)*x5380))+(((0.571)*x5379))+(((-1.0)*px)));
evalcond[1]=((((0.571)*x5380))+(((0.174)*x5379))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5381=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5381;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5382=((1.0)*cj5);
IkReal x5383=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5382)));
j4eval[0]=x5383;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5382)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5384=((1.0)*cj5);
IkReal x5385=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5384)));
j4eval[0]=x5385;
j4eval[1]=IKsign(x5385);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5384))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5386=((1.0)*cj5);
CheckValue<IkReal> x5387=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5386)))),-1);
if(!x5387.valid){
continue;
}
CheckValue<IkReal> x5388 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5386))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5387.value)))+(x5388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5389=IKcos(j4);
IkReal x5390=IKsin(j4);
IkReal x5391=((1.0)*sj0);
IkReal x5392=(cj5*r00);
IkReal x5393=(cj5*r10);
IkReal x5394=(cj5*r20);
IkReal x5395=((1.0)*x5389);
IkReal x5396=((1.0)*x5390);
IkReal x5397=(sj5*x5389);
IkReal x5398=(sj5*x5390);
evalcond[0]=(((r22*x5390))+(((-1.0)*x5394*x5395))+((r21*x5397)));
evalcond[1]=((((-1.0)*x5394*x5396))+(((-1.0)*r22*x5395))+((r21*x5398)));
evalcond[2]=(cj0+(((-1.0)*x5393*x5396))+((r11*x5398))+(((-1.0)*r12*x5395)));
evalcond[3]=(((r02*x5390))+(((-1.0)*x5392*x5395))+((r01*x5397))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5393*x5395))+((r11*x5397))+((r12*x5390))+(((-1.0)*x5391)));
evalcond[5]=((((-1.0)*x5392*x5396))+(((-1.0)*r02*x5395))+(((-1.0)*x5391))+((r01*x5398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5399=((1.0)*cj5);
CheckValue<IkReal> x5400 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5400.valid){
continue;
}
CheckValue<IkReal> x5401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5399)))),-1);
if(!x5401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5400.value)+(((1.5707963267949)*(x5401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5402=IKcos(j4);
IkReal x5403=IKsin(j4);
IkReal x5404=((1.0)*sj0);
IkReal x5405=(cj5*r00);
IkReal x5406=(cj5*r10);
IkReal x5407=(cj5*r20);
IkReal x5408=((1.0)*x5402);
IkReal x5409=((1.0)*x5403);
IkReal x5410=(sj5*x5402);
IkReal x5411=(sj5*x5403);
evalcond[0]=(((r22*x5403))+(((-1.0)*x5407*x5408))+((r21*x5410)));
evalcond[1]=((((-1.0)*x5407*x5409))+(((-1.0)*r22*x5408))+((r21*x5411)));
evalcond[2]=(((r11*x5411))+cj0+(((-1.0)*x5406*x5409))+(((-1.0)*r12*x5408)));
evalcond[3]=(((r02*x5403))+((r01*x5410))+(((-1.0)*x5405*x5408))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5403))+((r11*x5410))+(((-1.0)*x5406*x5408))+(((-1.0)*x5404)));
evalcond[5]=((((-1.0)*r02*x5408))+(((-1.0)*x5404))+((r01*x5411))+(((-1.0)*x5405*x5409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5412 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5412.valid){
continue;
}
CheckValue<IkReal> x5413=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5412.value)+(((1.5707963267949)*(x5413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5414=IKcos(j4);
IkReal x5415=IKsin(j4);
IkReal x5416=((1.0)*sj0);
IkReal x5417=(cj5*r00);
IkReal x5418=(cj5*r10);
IkReal x5419=(cj5*r20);
IkReal x5420=((1.0)*x5414);
IkReal x5421=((1.0)*x5415);
IkReal x5422=(sj5*x5414);
IkReal x5423=(sj5*x5415);
evalcond[0]=(((r22*x5415))+((r21*x5422))+(((-1.0)*x5419*x5420)));
evalcond[1]=(((r21*x5423))+(((-1.0)*x5419*x5421))+(((-1.0)*r22*x5420)));
evalcond[2]=(cj0+((r11*x5423))+(((-1.0)*x5418*x5421))+(((-1.0)*r12*x5420)));
evalcond[3]=((((-1.0)*x5417*x5420))+((r01*x5422))+((r02*x5415))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5416))+((r12*x5415))+((r11*x5422))+(((-1.0)*x5418*x5420)));
evalcond[5]=((((-1.0)*x5417*x5421))+((r01*x5423))+(((-1.0)*x5416))+(((-1.0)*r02*x5420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5424=IKsin(j0);
IkReal x5425=IKcos(j0);
IkReal x5426=(r00*sj5);
IkReal x5427=(cj5*r01);
IkReal x5428=(r10*sj5);
IkReal x5429=(cj5*r11);
evalcond[0]=(x5427+x5426+(((-1.0)*x5425)));
evalcond[1]=(x5429+x5428+(((-1.0)*x5424)));
evalcond[2]=((((-0.12)*x5426))+(((-0.12)*x5427))+(((-0.174)*x5424))+(((-1.0)*px)));
evalcond[3]=((((0.174)*x5425))+(((-0.12)*x5428))+(((-0.12)*x5429))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5430=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5430;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5431=((1.0)*cj5);
IkReal x5432=((((-1.0)*r01*x5431))+(((-1.0)*r00*sj5)));
j4eval[0]=x5432;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5431))))));
j4eval[2]=IKsign(x5432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5433=cj5*cj5;
IkReal x5434=(r01*r11);
IkReal x5435=((1.0)*r00);
IkReal x5436=(r01*sj5);
IkReal x5437=((((-1.0)*x5434))+(((-1.0)*r02*r12))+((x5433*x5434))+(((-1.0)*r10*x5433*x5435))+((cj5*r10*x5436))+((cj5*r00*r11*sj5)));
j4eval[0]=x5437;
j4eval[1]=IKsign(x5437);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5435))+((cj0*x5436))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5438=cj5*cj5;
IkReal x5439=(r01*r11);
IkReal x5440=(cj5*r00);
IkReal x5441=(r01*sj5);
CheckValue<IkReal> x5442=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5439))+(((-1.0)*r02*r12))+((cj5*r10*x5441))+((x5438*x5439))+((r11*sj5*x5440))+(((-1.0)*r00*r10*x5438)))),-1);
if(!x5442.valid){
continue;
}
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5440))+((cj0*x5441)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5442.value)))+(x5443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5444=IKcos(j4);
IkReal x5445=IKsin(j4);
IkReal x5446=(cj5*r00);
IkReal x5447=(r01*sj5);
IkReal x5448=(cj5*r10);
IkReal x5449=(cj5*r20);
IkReal x5450=((1.0)*x5444);
IkReal x5451=((1.0)*x5445);
IkReal x5452=(sj5*x5445);
IkReal x5453=(sj5*x5444);
evalcond[0]=(((x5444*x5447))+((r02*x5445))+(((-1.0)*x5446*x5450)));
evalcond[1]=(((r12*x5445))+(((-1.0)*x5448*x5450))+((r11*x5453)));
evalcond[2]=(((r21*x5452))+(((-1.0)*r22*x5450))+(((-1.0)*x5449*x5451)));
evalcond[3]=((1.0)+((r21*x5453))+((r22*x5445))+(((-1.0)*x5449*x5450)));
evalcond[4]=((((-1.0)*r12*x5450))+cj0+(((-1.0)*x5448*x5451))+((r11*x5452)));
evalcond[5]=((((-1.0)*sj0))+((x5445*x5447))+(((-1.0)*r02*x5450))+(((-1.0)*x5446*x5451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5454=((1.0)*cj5);
CheckValue<IkReal> x5455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5454)))),-1);
if(!x5455.valid){
continue;
}
CheckValue<IkReal> x5456 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5454)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5455.value)))+(x5456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5457=IKcos(j4);
IkReal x5458=IKsin(j4);
IkReal x5459=(cj5*r00);
IkReal x5460=(r01*sj5);
IkReal x5461=(cj5*r10);
IkReal x5462=(cj5*r20);
IkReal x5463=((1.0)*x5457);
IkReal x5464=((1.0)*x5458);
IkReal x5465=(sj5*x5458);
IkReal x5466=(sj5*x5457);
evalcond[0]=((((-1.0)*x5459*x5463))+((r02*x5458))+((x5457*x5460)));
evalcond[1]=(((r12*x5458))+((r11*x5466))+(((-1.0)*x5461*x5463)));
evalcond[2]=(((r21*x5465))+(((-1.0)*x5462*x5464))+(((-1.0)*r22*x5463)));
evalcond[3]=((1.0)+((r22*x5458))+((r21*x5466))+(((-1.0)*x5462*x5463)));
evalcond[4]=(cj0+((r11*x5465))+(((-1.0)*x5461*x5464))+(((-1.0)*r12*x5463)));
evalcond[5]=((((-1.0)*x5459*x5464))+(((-1.0)*sj0))+((x5458*x5460))+(((-1.0)*r02*x5463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5467 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5467.valid){
continue;
}
CheckValue<IkReal> x5468=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5467.value)+(((1.5707963267949)*(x5468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5469=IKcos(j4);
IkReal x5470=IKsin(j4);
IkReal x5471=(cj5*r00);
IkReal x5472=(r01*sj5);
IkReal x5473=(cj5*r10);
IkReal x5474=(cj5*r20);
IkReal x5475=((1.0)*x5469);
IkReal x5476=((1.0)*x5470);
IkReal x5477=(sj5*x5470);
IkReal x5478=(sj5*x5469);
evalcond[0]=((((-1.0)*x5471*x5475))+((x5469*x5472))+((r02*x5470)));
evalcond[1]=((((-1.0)*x5473*x5475))+((r12*x5470))+((r11*x5478)));
evalcond[2]=((((-1.0)*x5474*x5476))+(((-1.0)*r22*x5475))+((r21*x5477)));
evalcond[3]=((1.0)+(((-1.0)*x5474*x5475))+((r22*x5470))+((r21*x5478)));
evalcond[4]=(cj0+(((-1.0)*r12*x5475))+(((-1.0)*x5473*x5476))+((r11*x5477)));
evalcond[5]=((((-1.0)*sj0))+((x5470*x5472))+(((-1.0)*x5471*x5476))+(((-1.0)*r02*x5475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.60250563402813)*py))+(((-0.488329212470918)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.60250563402813)*px))+(((0.488329212470918)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.60250563402813)*py))+(((-0.488329212470918)*px))))+IKsqr(((((-1.60250563402813)*px))+(((0.488329212470918)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.60250563402813)*py))+(((-0.488329212470918)*px))), ((((-1.60250563402813)*px))+(((0.488329212470918)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5479=IKcos(j0);
IkReal x5480=IKsin(j0);
evalcond[0]=((((-0.571)*x5479))+(((-0.174)*x5480))+(((-1.0)*px)));
evalcond[1]=((((-0.571)*x5480))+(((0.174)*x5479))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5481=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5481;
j4eval[1]=IKsign(x5481);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5482=((1.0)*cj5);
IkReal x5483=((((-1.0)*r11*x5482))+(((-1.0)*r10*sj5)));
j4eval[0]=x5483;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5482)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5484=cj5*cj5;
IkReal x5485=((1.0)*r20);
IkReal x5486=(r01*r21);
IkReal x5487=(r21*sj5);
IkReal x5488=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5487))+((x5484*x5486))+(((-1.0)*r00*x5484*x5485))+(((-1.0)*x5486)));
j4eval[0]=x5488;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5487))+(((-1.0)*cj0*cj5*x5485))))));
j4eval[2]=IKsign(x5488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5489=cj5*cj5;
IkReal x5490=((1.0)*r20);
IkReal x5491=(r01*r21);
IkReal x5492=(r21*sj5);
CheckValue<IkReal> x5493=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5489*x5491))+(((-1.0)*r02*r22))+((cj5*r00*x5492))+(((-1.0)*r00*x5489*x5490))+(((-1.0)*x5491)))),-1);
if(!x5493.valid){
continue;
}
CheckValue<IkReal> x5494 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5492))+(((-1.0)*cj0*cj5*x5490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5493.value)))+(x5494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5495=IKcos(j4);
IkReal x5496=IKsin(j4);
IkReal x5497=(cj5*r00);
IkReal x5498=(cj5*r10);
IkReal x5499=(cj5*r20);
IkReal x5500=((1.0)*x5495);
IkReal x5501=((1.0)*x5496);
IkReal x5502=(sj5*x5495);
IkReal x5503=(sj5*x5496);
evalcond[0]=(((r21*x5502))+((r22*x5496))+(((-1.0)*x5499*x5500)));
evalcond[1]=((((-1.0)*r22*x5500))+((r21*x5503))+(((-1.0)*x5499*x5501)));
evalcond[2]=(cj0+(((-1.0)*x5497*x5500))+((r01*x5502))+((r02*x5496)));
evalcond[3]=(sj0+(((-1.0)*x5498*x5500))+((r12*x5496))+((r11*x5502)));
evalcond[4]=(cj0+(((-1.0)*x5498*x5501))+(((-1.0)*r12*x5500))+((r11*x5503)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5497*x5501))+(((-1.0)*r02*x5500))+((r01*x5503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5504=((1.0)*cj5);
CheckValue<IkReal> x5505 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5504)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5505.valid){
continue;
}
CheckValue<IkReal> x5506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5504)))),-1);
if(!x5506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5505.value)+(((1.5707963267949)*(x5506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5507=IKcos(j4);
IkReal x5508=IKsin(j4);
IkReal x5509=(cj5*r00);
IkReal x5510=(cj5*r10);
IkReal x5511=(cj5*r20);
IkReal x5512=((1.0)*x5507);
IkReal x5513=((1.0)*x5508);
IkReal x5514=(sj5*x5507);
IkReal x5515=(sj5*x5508);
evalcond[0]=(((r21*x5514))+(((-1.0)*x5511*x5512))+((r22*x5508)));
evalcond[1]=((((-1.0)*r22*x5512))+((r21*x5515))+(((-1.0)*x5511*x5513)));
evalcond[2]=(cj0+((r02*x5508))+((r01*x5514))+(((-1.0)*x5509*x5512)));
evalcond[3]=((((-1.0)*x5510*x5512))+sj0+((r12*x5508))+((r11*x5514)));
evalcond[4]=((((-1.0)*x5510*x5513))+cj0+(((-1.0)*r12*x5512))+((r11*x5515)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5512))+((r01*x5515))+(((-1.0)*x5509*x5513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5516 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5516.valid){
continue;
}
CheckValue<IkReal> x5517=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5516.value)+(((1.5707963267949)*(x5517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5518=IKcos(j4);
IkReal x5519=IKsin(j4);
IkReal x5520=(cj5*r00);
IkReal x5521=(cj5*r10);
IkReal x5522=(cj5*r20);
IkReal x5523=((1.0)*x5518);
IkReal x5524=((1.0)*x5519);
IkReal x5525=(sj5*x5518);
IkReal x5526=(sj5*x5519);
evalcond[0]=(((r21*x5525))+((r22*x5519))+(((-1.0)*x5522*x5523)));
evalcond[1]=((((-1.0)*r22*x5523))+((r21*x5526))+(((-1.0)*x5522*x5524)));
evalcond[2]=(cj0+((r02*x5519))+((r01*x5525))+(((-1.0)*x5520*x5523)));
evalcond[3]=(sj0+((r12*x5519))+((r11*x5525))+(((-1.0)*x5521*x5523)));
evalcond[4]=(cj0+((r11*x5526))+(((-1.0)*x5521*x5524))+(((-1.0)*r12*x5523)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5523))+((r01*x5526))+(((-1.0)*x5520*x5524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5527=cj1*cj1;
IkReal x5528=((500.0)*py);
IkReal x5529=(cj1*sj2);
IkReal x5530=(cj1*sj1);
IkReal x5531=(r00*sj5);
IkReal x5532=(cj2*sj1);
IkReal x5533=(cj5*r01);
IkReal x5534=(sj2*x5527);
IkReal x5535=((60.0)*r10*sj5);
IkReal x5536=((60.0)*cj5*r11);
CheckValue<IkReal> x5537=IKPowWithIntegerCheck(((((-306.5)*x5534))+(((-571.0)*cj2*x5534))+(((-571.0)*x5530*(cj2*cj2)))+(((285.5)*x5530))+(((285.5)*cj2*sj2))+(((-306.5)*cj2*x5530))),-1);
if(!x5537.valid){
continue;
}
CheckValue<IkReal> x5538=IKPowWithIntegerCheck(((((-1.0)*x5529))+(((-1.0)*x5532))),-1);
if(!x5538.valid){
continue;
}
if( IKabs(((x5537.value)*(((((-1.0)*x5528*x5532))+(((-1.0)*x5528*x5529))+(((87.0)*x5533))+(((87.0)*x5531))+(((-1.0)*x5532*x5536))+(((-1.0)*x5532*x5535))+(((-1.0)*x5529*x5536))+(((-1.0)*x5529*x5535)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5538.value)*(((((-1.0)*x5533))+(((-1.0)*x5531)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5537.value)*(((((-1.0)*x5528*x5532))+(((-1.0)*x5528*x5529))+(((87.0)*x5533))+(((87.0)*x5531))+(((-1.0)*x5532*x5536))+(((-1.0)*x5532*x5535))+(((-1.0)*x5529*x5536))+(((-1.0)*x5529*x5535))))))+IKsqr(((x5538.value)*(((((-1.0)*x5533))+(((-1.0)*x5531))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5537.value)*(((((-1.0)*x5528*x5532))+(((-1.0)*x5528*x5529))+(((87.0)*x5533))+(((87.0)*x5531))+(((-1.0)*x5532*x5536))+(((-1.0)*x5532*x5535))+(((-1.0)*x5529*x5536))+(((-1.0)*x5529*x5535))))), ((x5538.value)*(((((-1.0)*x5533))+(((-1.0)*x5531))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5539=IKcos(j0);
IkReal x5540=IKsin(j0);
IkReal x5541=((0.571)*sj1);
IkReal x5542=(cj5*r01);
IkReal x5543=((1.0)*cj1);
IkReal x5544=((1.0)*sj1);
IkReal x5545=(cj5*r11);
IkReal x5546=(r00*sj5);
IkReal x5547=(r10*sj5);
IkReal x5548=(sj2*x5539);
IkReal x5549=(sj2*x5540);
IkReal x5550=(cj2*x5539);
IkReal x5551=(cj1*x5540);
evalcond[0]=(x5542+x5546+(((-1.0)*x5543*x5548))+(((-1.0)*x5544*x5550)));
evalcond[1]=(x5547+x5545+(((-1.0)*x5543*x5549))+(((-1.0)*cj2*x5540*x5544)));
evalcond[2]=((((-0.174)*x5540))+(((-1.0)*x5541*x5548))+(((-0.12)*x5542))+(((-0.12)*x5546))+(((0.571)*cj1*x5550))+(((0.613)*cj1*x5539))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*x5541*x5549))+(((-0.12)*x5545))+(((-0.12)*x5547))+(((0.571)*cj2*x5551))+(((-1.0)*py))+(((0.613)*x5551))+(((0.174)*x5539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5552=((1.0)*cj5);
IkReal x5553=((((-1.0)*r01*x5552))+(((-1.0)*r00*sj5)));
j4eval[0]=x5553;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5552)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5554=((1.0)*cj5);
IkReal x5555=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5554)));
j4eval[0]=x5555;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x5554))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5556=((1.0)*sj0);
IkReal x5557=((1.0)*cj0);
IkReal x5558=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5558;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5556))+(((-1.0)*r01*sj5*x5557)))))+(IKabs(((((-1.0)*r12*x5556))+(((-1.0)*r02*x5557))))));
j4eval[2]=IKsign(x5558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5559=((-1.0)*r20);
IkReal x5561 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5561)==0){
continue;
}
IkReal x5560=pow(x5561,-0.5);
CheckValue<IkReal> x5562 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5559),IKFAST_ATAN2_MAGTHRESH);
if(!x5562.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5562.value));
IkReal gconst115=(r21*x5560);
IkReal gconst116=(x5559*x5560);
CheckValue<IkReal> x5563 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5563.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5563.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5564=((-1.0)*r20);
IkReal x5565=x5560;
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5564),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
IkReal x5566=((-1.0)*(x5567.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5566;
IkReal gconst114=x5566;
IkReal gconst115=(r21*x5565);
IkReal gconst116=(x5564*x5565);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5568=((-1.0)*r20);
IkReal x5569=x5560;
CheckValue<IkReal> x5571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5568),IKFAST_ATAN2_MAGTHRESH);
if(!x5571.valid){
continue;
}
IkReal x5570=((-1.0)*(x5571.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5570;
IkReal gconst114=x5570;
IkReal gconst115=(r21*x5569);
IkReal gconst116=(x5568*x5569);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5572=((-1.0)*r20);
IkReal x5573=x5560;
CheckValue<IkReal> x5575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5572),IKFAST_ATAN2_MAGTHRESH);
if(!x5575.valid){
continue;
}
IkReal x5574=((-1.0)*(x5575.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5574;
IkReal gconst114=x5574;
IkReal gconst115=(r21*x5573);
IkReal gconst116=(x5572*x5573);
IkReal x5576=((1.0)*(r22*r22));
CheckValue<IkReal> x5580=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5576))),-1);
if(!x5580.valid){
continue;
}
IkReal x5577=x5580.value;
IkReal x5578=((1.0)*x5577);
IkReal x5579=((((-1.0)*x5578*(r21*r21*r21*r21)))+(((-1.0)*x5576))+(((-2.0)*x5577*(r20*r20)*(r21*r21)))+(((-1.0)*x5578*(r20*r20*r20*r20))));
j4eval[0]=x5579;
j4eval[1]=IKsign(x5579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5581=(cj2*sj1);
IkReal x5582=(gconst115*r21);
IkReal x5583=(cj1*sj2);
IkReal x5584=((1.0)*gconst116*r20);
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal((((r22*x5583))+((r22*x5581)))),IkReal((((x5581*x5582))+(((-1.0)*x5583*x5584))+((x5582*x5583))+(((-1.0)*x5581*x5584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
CheckValue<IkReal> x5586=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5582))+(((-1.0)*gconst116*r20*x5584))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5582*x5582))))),-1);
if(!x5586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5585.value)+(((1.5707963267949)*(x5586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5587=IKsin(j4);
IkReal x5588=IKcos(j4);
IkReal x5589=(sj1*sj2);
IkReal x5590=((1.0)*x5588);
IkReal x5591=((1.0)*cj1*cj2);
IkReal x5592=(gconst115*x5587);
IkReal x5593=(gconst115*x5588);
IkReal x5594=((1.0)*gconst116*x5587);
evalcond[0]=(((r21*x5592))+(((-1.0)*r20*x5594))+(((-1.0)*r22*x5590)));
evalcond[1]=((((-1.0)*r12*x5590))+cj0+((r11*x5592))+(((-1.0)*r10*x5594)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5590))+(((-1.0)*r00*x5594))+((r01*x5592)));
evalcond[3]=(((r21*x5593))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5590))+((r22*x5587)));
evalcond[4]=((((-1.0)*cj0*x5591))+((cj0*x5589))+((r02*x5587))+(((-1.0)*gconst116*r00*x5590))+((r01*x5593)));
evalcond[5]=(((sj0*x5589))+((r11*x5593))+((r12*x5587))+(((-1.0)*gconst116*r10*x5590))+(((-1.0)*sj0*x5591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5595=((1.0)*gconst116);
CheckValue<IkReal> x5596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5595))+(((-1.0)*gconst115*r10)))),-1);
if(!x5596.valid){
continue;
}
CheckValue<IkReal> x5597 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5596.value)))+(x5597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5598=IKsin(j4);
IkReal x5599=IKcos(j4);
IkReal x5600=(sj1*sj2);
IkReal x5601=((1.0)*x5599);
IkReal x5602=((1.0)*cj1*cj2);
IkReal x5603=(gconst115*x5598);
IkReal x5604=(gconst115*x5599);
IkReal x5605=((1.0)*gconst116*x5598);
evalcond[0]=((((-1.0)*r22*x5601))+((r21*x5603))+(((-1.0)*r20*x5605)));
evalcond[1]=((((-1.0)*r10*x5605))+cj0+(((-1.0)*r12*x5601))+((r11*x5603)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5605))+((r01*x5603))+(((-1.0)*r02*x5601)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5601))+((r21*x5604))+((r22*x5598)));
evalcond[4]=((((-1.0)*cj0*x5602))+((r02*x5598))+((r01*x5604))+(((-1.0)*gconst116*r00*x5601))+((cj0*x5600)));
evalcond[5]=(((sj0*x5600))+((r12*x5598))+(((-1.0)*gconst116*r10*x5601))+(((-1.0)*sj0*x5602))+((r11*x5604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5606=((1.0)*gconst116);
CheckValue<IkReal> x5607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5606))+(((-1.0)*gconst115*r00)))),-1);
if(!x5607.valid){
continue;
}
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5606))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5607.value)))+(x5608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5609=IKsin(j4);
IkReal x5610=IKcos(j4);
IkReal x5611=(sj1*sj2);
IkReal x5612=((1.0)*x5610);
IkReal x5613=((1.0)*cj1*cj2);
IkReal x5614=(gconst115*x5609);
IkReal x5615=(gconst115*x5610);
IkReal x5616=((1.0)*gconst116*x5609);
evalcond[0]=((((-1.0)*r22*x5612))+((r21*x5614))+(((-1.0)*r20*x5616)));
evalcond[1]=(cj0+(((-1.0)*r10*x5616))+(((-1.0)*r12*x5612))+((r11*x5614)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5616))+((r01*x5614))+(((-1.0)*r02*x5612)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5612))+((cj1*sj2))+((r21*x5615))+((r22*x5609)));
evalcond[4]=(((cj0*x5611))+((r02*x5609))+(((-1.0)*cj0*x5613))+((r01*x5615))+(((-1.0)*gconst116*r00*x5612)));
evalcond[5]=(((sj0*x5611))+(((-1.0)*gconst116*r10*x5612))+((r12*x5609))+(((-1.0)*sj0*x5613))+((r11*x5615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5617=((-1.0)*r21);
IkReal x5619 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5619)==0){
continue;
}
IkReal x5618=pow(x5619,-0.5);
CheckValue<IkReal> x5620 = IKatan2WithCheck(IkReal(x5617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5620.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5620.value))));
IkReal gconst118=(x5617*x5618);
IkReal gconst119=((1.0)*r20*x5618);
CheckValue<IkReal> x5621 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5621.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5621.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5622=((-1.0)*r21);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(x5622),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
IkReal x5623=((1.0)*(x5625.value));
IkReal x5624=x5618;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5623)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5623)));
IkReal gconst118=(x5622*x5624);
IkReal gconst119=((1.0)*r20*x5624);
IkReal x5626=r22*r22;
IkReal x5627=((1.0)*x5626);
CheckValue<IkReal> x5631=IKPowWithIntegerCheck(((-1.0)+x5626),-1);
if(!x5631.valid){
continue;
}
IkReal x5628=x5631.value;
if((((1.0)+(((-1.0)*x5627)))) < -0.00001)
continue;
IkReal x5629=IKsqrt(((1.0)+(((-1.0)*x5627))));
IkReal x5630=(cj0*x5628*x5629);
j4eval[0]=((IKabs((x5630+(((-1.0)*x5627*x5630)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5632=((-1.0)*r21);
CheckValue<IkReal> x5635 = IKatan2WithCheck(IkReal(x5632),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5635.valid){
continue;
}
IkReal x5633=((1.0)*(x5635.value));
IkReal x5634=x5618;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5633)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5633)));
IkReal gconst118=(x5632*x5634);
IkReal gconst119=((1.0)*r20*x5634);
IkReal x5636=r22*r22;
IkReal x5637=((1.0)*x5636);
CheckValue<IkReal> x5641=IKPowWithIntegerCheck(((-1.0)+x5636),-1);
if(!x5641.valid){
continue;
}
IkReal x5638=x5641.value;
if((((1.0)+(((-1.0)*x5637)))) < -0.00001)
continue;
IkReal x5639=IKsqrt(((1.0)+(((-1.0)*x5637))));
IkReal x5640=(sj0*x5638*x5639);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5640+(((-1.0)*x5637*x5640))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5642=((-1.0)*r21);
CheckValue<IkReal> x5645 = IKatan2WithCheck(IkReal(x5642),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5645.valid){
continue;
}
IkReal x5643=((1.0)*(x5645.value));
IkReal x5644=x5618;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5643)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5643)));
IkReal gconst118=(x5642*x5644);
IkReal gconst119=((1.0)*r20*x5644);
IkReal x5646=r22*r22;
IkReal x5647=(r12*sj0);
IkReal x5648=(cj0*r02);
CheckValue<IkReal> x5652=IKPowWithIntegerCheck(((-1.0)+x5646),-1);
if(!x5652.valid){
continue;
}
IkReal x5649=x5652.value;
if((((1.0)+(((-1.0)*x5646)))) < -0.00001)
continue;
IkReal x5650=IKsqrt(((1.0)+(((-1.0)*x5646))));
IkReal x5651=(r22*x5649*x5650);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5647))+(((-1.0)*x5648)))))+(IKabs((((x5647*x5651))+((x5648*x5651))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5653=((1.0)*sj0);
IkReal x5654=((1.0)*gconst118);
CheckValue<IkReal> x5655=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5654)))),-1);
if(!x5655.valid){
continue;
}
CheckValue<IkReal> x5656 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5653))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5654))+(((-1.0)*gconst118*r11*x5653))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5655.value)))+(x5656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5657=IKsin(j4);
IkReal x5658=IKcos(j4);
IkReal x5659=(gconst118*r01);
IkReal x5660=(sj1*sj2);
IkReal x5661=(gconst119*r20);
IkReal x5662=(gconst119*r10);
IkReal x5663=(gconst119*r00);
IkReal x5664=(gconst118*r21);
IkReal x5665=(gconst118*r11);
IkReal x5666=((1.0)*x5658);
IkReal x5667=((1.0)*cj1*cj2);
IkReal x5668=((1.0)*x5657);
evalcond[0]=((((-1.0)*r22*x5666))+(((-1.0)*x5661*x5668))+((x5657*x5664)));
evalcond[1]=(cj0+(((-1.0)*x5662*x5668))+(((-1.0)*r12*x5666))+((x5657*x5665)));
evalcond[2]=((((-1.0)*sj0))+((x5657*x5659))+(((-1.0)*r02*x5666))+(((-1.0)*x5663*x5668)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5657))+(((-1.0)*x5661*x5666))+((x5658*x5664)));
evalcond[4]=((((-1.0)*cj0*x5667))+(((-1.0)*x5663*x5666))+((r02*x5657))+((x5658*x5659))+((cj0*x5660)));
evalcond[5]=(((r12*x5657))+(((-1.0)*sj0*x5667))+(((-1.0)*x5662*x5666))+((sj0*x5660))+((x5658*x5665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5669=((1.0)*gconst119);
CheckValue<IkReal> x5670=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5669)))),-1);
if(!x5670.valid){
continue;
}
CheckValue<IkReal> x5671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5669))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5670.value)))+(x5671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5672=IKsin(j4);
IkReal x5673=IKcos(j4);
IkReal x5674=(gconst118*r01);
IkReal x5675=(sj1*sj2);
IkReal x5676=(gconst119*r20);
IkReal x5677=(gconst119*r10);
IkReal x5678=(gconst119*r00);
IkReal x5679=(gconst118*r21);
IkReal x5680=(gconst118*r11);
IkReal x5681=((1.0)*x5673);
IkReal x5682=((1.0)*cj1*cj2);
IkReal x5683=((1.0)*x5672);
evalcond[0]=((((-1.0)*r22*x5681))+(((-1.0)*x5676*x5683))+((x5672*x5679)));
evalcond[1]=(((x5672*x5680))+cj0+(((-1.0)*x5677*x5683))+(((-1.0)*r12*x5681)));
evalcond[2]=((((-1.0)*r02*x5681))+(((-1.0)*sj0))+(((-1.0)*x5678*x5683))+((x5672*x5674)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5673*x5679))+(((-1.0)*x5676*x5681))+((r22*x5672)));
evalcond[4]=(((r02*x5672))+((cj0*x5675))+(((-1.0)*cj0*x5682))+(((-1.0)*x5678*x5681))+((x5673*x5674)));
evalcond[5]=(((x5673*x5680))+((sj0*x5675))+(((-1.0)*sj0*x5682))+((r12*x5672))+(((-1.0)*x5677*x5681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5684=((1.0)*gconst119);
CheckValue<IkReal> x5685=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5684)))),-1);
if(!x5685.valid){
continue;
}
CheckValue<IkReal> x5686 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5685.value)))+(x5686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5687=IKsin(j4);
IkReal x5688=IKcos(j4);
IkReal x5689=(gconst118*r01);
IkReal x5690=(sj1*sj2);
IkReal x5691=(gconst119*r20);
IkReal x5692=(gconst119*r10);
IkReal x5693=(gconst119*r00);
IkReal x5694=(gconst118*r21);
IkReal x5695=(gconst118*r11);
IkReal x5696=((1.0)*x5688);
IkReal x5697=((1.0)*cj1*cj2);
IkReal x5698=((1.0)*x5687);
evalcond[0]=(((x5687*x5694))+(((-1.0)*x5691*x5698))+(((-1.0)*r22*x5696)));
evalcond[1]=(((x5687*x5695))+cj0+(((-1.0)*x5692*x5698))+(((-1.0)*r12*x5696)));
evalcond[2]=(((x5687*x5689))+(((-1.0)*sj0))+(((-1.0)*r02*x5696))+(((-1.0)*x5693*x5698)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5691*x5696))+((r22*x5687))+((cj1*sj2))+((x5688*x5694)));
evalcond[4]=((((-1.0)*cj0*x5697))+((r02*x5687))+((x5688*x5689))+((cj0*x5690))+(((-1.0)*x5693*x5696)));
evalcond[5]=((((-1.0)*x5692*x5696))+(((-1.0)*sj0*x5697))+((r12*x5687))+((sj0*x5690))+((x5688*x5695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5699=((-1.0)*r10);
IkReal x5701 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5701)==0){
continue;
}
IkReal x5700=pow(x5701,-0.5);
CheckValue<IkReal> x5702 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5699),IKFAST_ATAN2_MAGTHRESH);
if(!x5702.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5702.value));
IkReal gconst121=(r11*x5700);
IkReal gconst122=(x5699*x5700);
CheckValue<IkReal> x5703 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5703.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5703.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5704=((-1.0)*r10);
IkReal x5705=x5700;
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5704),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
IkReal x5706=((-1.0)*(x5707.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5706;
IkReal gconst120=x5706;
IkReal gconst121=(r11*x5705);
IkReal gconst122=(x5704*x5705);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5708=((1.0)*sj0);
IkReal x5709=((1.0)*gconst121);
CheckValue<IkReal> x5710=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5709)))),-1);
if(!x5710.valid){
continue;
}
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5708))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5709))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5708))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5710.value)))+(x5711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5712=IKsin(j4);
IkReal x5713=IKcos(j4);
IkReal x5714=(gconst121*r11);
IkReal x5715=(sj1*sj2);
IkReal x5716=(gconst122*r00);
IkReal x5717=(gconst122*r10);
IkReal x5718=(gconst122*r20);
IkReal x5719=((1.0)*x5713);
IkReal x5720=((1.0)*cj1*cj2);
IkReal x5721=((1.0)*x5712);
IkReal x5722=(gconst121*x5712);
IkReal x5723=(gconst121*x5713);
evalcond[0]=(((r21*x5722))+(((-1.0)*r22*x5719))+(((-1.0)*x5718*x5721)));
evalcond[1]=(cj0+(((-1.0)*x5717*x5721))+((x5712*x5714))+(((-1.0)*r12*x5719)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5722))+(((-1.0)*x5716*x5721))+(((-1.0)*r02*x5719)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5718*x5719))+((r21*x5723))+((r22*x5712))+((cj1*sj2)));
evalcond[4]=(((r02*x5712))+((r01*x5723))+((cj0*x5715))+(((-1.0)*x5716*x5719))+(((-1.0)*cj0*x5720)));
evalcond[5]=((((-1.0)*sj0*x5720))+((sj0*x5715))+((r12*x5712))+((x5713*x5714))+(((-1.0)*x5717*x5719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5724=((1.0)*gconst122);
CheckValue<IkReal> x5725=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5724)))),-1);
if(!x5725.valid){
continue;
}
CheckValue<IkReal> x5726 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5724))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5725.value)))+(x5726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5727=IKsin(j4);
IkReal x5728=IKcos(j4);
IkReal x5729=(gconst121*r11);
IkReal x5730=(sj1*sj2);
IkReal x5731=(gconst122*r00);
IkReal x5732=(gconst122*r10);
IkReal x5733=(gconst122*r20);
IkReal x5734=((1.0)*x5728);
IkReal x5735=((1.0)*cj1*cj2);
IkReal x5736=((1.0)*x5727);
IkReal x5737=(gconst121*x5727);
IkReal x5738=(gconst121*x5728);
evalcond[0]=(((r21*x5737))+(((-1.0)*x5733*x5736))+(((-1.0)*r22*x5734)));
evalcond[1]=((((-1.0)*x5732*x5736))+((x5727*x5729))+cj0+(((-1.0)*r12*x5734)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5737))+(((-1.0)*r02*x5734))+(((-1.0)*x5731*x5736)));
evalcond[3]=(((cj2*sj1))+((r21*x5738))+((cj1*sj2))+(((-1.0)*x5733*x5734))+((r22*x5727)));
evalcond[4]=(((r01*x5738))+(((-1.0)*cj0*x5735))+((cj0*x5730))+(((-1.0)*x5731*x5734))+((r02*x5727)));
evalcond[5]=((((-1.0)*x5732*x5734))+((r12*x5727))+((x5728*x5729))+(((-1.0)*sj0*x5735))+((sj0*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5739=((-1.0)*r11);
IkReal x5741 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5741)==0){
continue;
}
IkReal x5740=pow(x5741,-0.5);
CheckValue<IkReal> x5742 = IKatan2WithCheck(IkReal(x5739),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5742.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5742.value))));
IkReal gconst124=(x5739*x5740);
IkReal gconst125=((1.0)*r10*x5740);
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5743.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5744=((-1.0)*r11);
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal(x5744),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
IkReal x5745=((1.0)*(x5747.value));
IkReal x5746=x5740;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5745)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5745)));
IkReal gconst124=(x5744*x5746);
IkReal gconst125=((1.0)*r10*x5746);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5748=((-1.0)*r11);
CheckValue<IkReal> x5751 = IKatan2WithCheck(IkReal(x5748),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5751.valid){
continue;
}
IkReal x5749=((1.0)*(x5751.value));
IkReal x5750=x5740;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5749)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5749)));
IkReal gconst124=(x5748*x5750);
IkReal gconst125=((1.0)*r10*x5750);
IkReal x5752=r12*r12;
IkReal x5753=((1.0)*sj0);
IkReal x5754=(cj0*r02);
IkReal x5755=x5740;
j4eval[0]=((IKabs(((((-1.0)*r12*x5753))+(((-1.0)*x5754)))))+(IKabs((((sj0*x5752*x5755))+((r12*x5754*x5755))+(((-1.0)*x5753*x5755))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5756=((-1.0)*r11);
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal(x5756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
IkReal x5757=((1.0)*(x5759.value));
IkReal x5758=x5740;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5757)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5757)));
IkReal gconst124=(x5756*x5758);
IkReal gconst125=((1.0)*r10*x5758);
IkReal x5760=r12*r12;
IkReal x5761=((1.0)+(((-1.0)*x5760)));
IkReal x5762=(cj2*r22*sj1);
IkReal x5763=(cj1*r22*sj2);
CheckValue<IkReal> x5770=IKPowWithIntegerCheck(x5761,-1);
if(!x5770.valid){
continue;
}
IkReal x5764=x5770.value;
CheckValue<IkReal> x5771=IKPowWithIntegerCheck(((-1.0)+x5760),-1);
if(!x5771.valid){
continue;
}
IkReal x5765=x5771.value;
IkReal x5766=((1.0)*x5764);
if((x5761) < -0.00001)
continue;
IkReal x5767=IKsqrt(x5761);
IkReal x5768=((1.0)*r12*x5765*x5767);
IkReal x5769=((((-1.0)*x5766*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x5764))+(((-1.0)*(r22*r22)))+(((-1.0)*x5766*(r10*r10)*(r20*r20))));
j4eval[0]=x5769;
j4eval[1]=IKsign(x5769);
j4eval[2]=((IKabs((x5762+x5763)))+(IKabs(((((-1.0)*x5762*x5768))+(((-1.0)*x5763*x5768))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5772=(gconst124*r21);
IkReal x5773=(cj1*sj2);
IkReal x5774=(cj2*sj1);
IkReal x5775=(gconst125*r20);
CheckValue<IkReal> x5776=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5772*x5772)))+(((2.0)*x5772*x5775))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5775*x5775))))),-1);
if(!x5776.valid){
continue;
}
CheckValue<IkReal> x5777 = IKatan2WithCheck(IkReal((((r22*x5774))+((r22*x5773)))),IkReal(((((-1.0)*x5774*x5775))+(((-1.0)*x5773*x5775))+((x5772*x5774))+((x5772*x5773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5776.value)))+(x5777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5778=IKsin(j4);
IkReal x5779=IKcos(j4);
IkReal x5780=(sj1*sj2);
IkReal x5781=(gconst125*r20);
IkReal x5782=(gconst124*r01);
IkReal x5783=(gconst125*r00);
IkReal x5784=(gconst125*r10);
IkReal x5785=((1.0)*x5779);
IkReal x5786=((1.0)*cj1*cj2);
IkReal x5787=((1.0)*x5778);
IkReal x5788=(gconst124*x5778);
IkReal x5789=(gconst124*x5779);
evalcond[0]=(((r21*x5788))+(((-1.0)*r22*x5785))+(((-1.0)*x5781*x5787)));
evalcond[1]=((((-1.0)*x5784*x5787))+cj0+((r11*x5788))+(((-1.0)*r12*x5785)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5783*x5787))+((x5778*x5782))+(((-1.0)*r02*x5785)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5789))+((r22*x5778))+(((-1.0)*x5781*x5785)));
evalcond[4]=((((-1.0)*x5783*x5785))+((x5779*x5782))+((r02*x5778))+(((-1.0)*cj0*x5786))+((cj0*x5780)));
evalcond[5]=((((-1.0)*x5784*x5785))+((r11*x5789))+((sj0*x5780))+((r12*x5778))+(((-1.0)*sj0*x5786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5790=((1.0)*sj0);
IkReal x5791=((1.0)*cj0);
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5790))+(((-1.0)*r02*x5791)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5791))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x5790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
CheckValue<IkReal> x5793=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5792.value)+(((1.5707963267949)*(x5793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5794=IKsin(j4);
IkReal x5795=IKcos(j4);
IkReal x5796=(sj1*sj2);
IkReal x5797=(gconst125*r20);
IkReal x5798=(gconst124*r01);
IkReal x5799=(gconst125*r00);
IkReal x5800=(gconst125*r10);
IkReal x5801=((1.0)*x5795);
IkReal x5802=((1.0)*cj1*cj2);
IkReal x5803=((1.0)*x5794);
IkReal x5804=(gconst124*x5794);
IkReal x5805=(gconst124*x5795);
evalcond[0]=((((-1.0)*x5797*x5803))+(((-1.0)*r22*x5801))+((r21*x5804)));
evalcond[1]=((((-1.0)*x5800*x5803))+cj0+(((-1.0)*r12*x5801))+((r11*x5804)));
evalcond[2]=((((-1.0)*sj0))+((x5794*x5798))+(((-1.0)*x5799*x5803))+(((-1.0)*r02*x5801)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5797*x5801))+((cj1*sj2))+((r21*x5805))+((r22*x5794)));
evalcond[4]=(((x5795*x5798))+(((-1.0)*cj0*x5802))+(((-1.0)*x5799*x5801))+((cj0*x5796))+((r02*x5794)));
evalcond[5]=((((-1.0)*x5800*x5801))+((r12*x5794))+((r11*x5805))+((sj0*x5796))+(((-1.0)*sj0*x5802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5806=((1.0)*gconst125);
CheckValue<IkReal> x5807 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5806))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5807.valid){
continue;
}
CheckValue<IkReal> x5808=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5806)))),-1);
if(!x5808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5807.value)+(((1.5707963267949)*(x5808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5809=IKsin(j4);
IkReal x5810=IKcos(j4);
IkReal x5811=(sj1*sj2);
IkReal x5812=(gconst125*r20);
IkReal x5813=(gconst124*r01);
IkReal x5814=(gconst125*r00);
IkReal x5815=(gconst125*r10);
IkReal x5816=((1.0)*x5810);
IkReal x5817=((1.0)*cj1*cj2);
IkReal x5818=((1.0)*x5809);
IkReal x5819=(gconst124*x5809);
IkReal x5820=(gconst124*x5810);
evalcond[0]=(((r21*x5819))+(((-1.0)*x5812*x5818))+(((-1.0)*r22*x5816)));
evalcond[1]=((((-1.0)*r12*x5816))+cj0+(((-1.0)*x5815*x5818))+((r11*x5819)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5814*x5818))+(((-1.0)*r02*x5816))+((x5809*x5813)));
evalcond[3]=(((r21*x5820))+((cj2*sj1))+((cj1*sj2))+((r22*x5809))+(((-1.0)*x5812*x5816)));
evalcond[4]=((((-1.0)*x5814*x5816))+(((-1.0)*cj0*x5817))+((x5810*x5813))+((r02*x5809))+((cj0*x5811)));
evalcond[5]=((((-1.0)*sj0*x5817))+(((-1.0)*x5815*x5816))+((sj0*x5811))+((r11*x5820))+((r12*x5809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5821=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5821;
j4eval[1]=IKsign(x5821);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5822=((1.0)*cj5);
IkReal x5823=((((-1.0)*r01*x5822))+(((-1.0)*r00*sj5)));
j4eval[0]=x5823;
j4eval[1]=((IKabs(((((-1.0)*r20*x5822))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5824=cj5*cj5;
IkReal x5825=r11*r11;
IkReal x5826=(cj5*r10);
IkReal x5827=(r11*sj5);
IkReal x5828=((((2.0)*x5826*x5827))+(((-1.0)*(r12*r12)))+((x5824*x5825))+(((-1.0)*x5824*(r10*r10)))+(((-1.0)*x5825)));
j4eval[0]=x5828;
j4eval[1]=IKsign(x5828);
j4eval[2]=((IKabs(r12))+(IKabs((x5827+(((-1.0)*x5826))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5829=cj5*cj5;
IkReal x5830=r11*r11;
IkReal x5831=(cj5*r10);
IkReal x5832=(r11*sj5);
CheckValue<IkReal> x5833=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5829*(r10*r10)))+((x5829*x5830))+(((-1.0)*(r12*r12)))+(((2.0)*x5831*x5832))+(((-1.0)*x5830)))),-1);
if(!x5833.valid){
continue;
}
CheckValue<IkReal> x5834 = IKatan2WithCheck(IkReal(((((-1.0)*x5831))+x5832)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5833.value)))+(x5834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5835=IKcos(j4);
IkReal x5836=IKsin(j4);
IkReal x5837=(cj5*r00);
IkReal x5838=(cj5*r10);
IkReal x5839=(r21*sj5);
IkReal x5840=(cj5*r20);
IkReal x5841=((1.0)*x5835);
IkReal x5842=((1.0)*x5836);
IkReal x5843=(sj5*x5836);
IkReal x5844=(sj5*x5835);
evalcond[0]=(((r11*x5844))+((r12*x5836))+(((-1.0)*x5838*x5841)));
evalcond[1]=(((x5836*x5839))+(((-1.0)*x5840*x5842))+(((-1.0)*r22*x5841)));
evalcond[2]=((((-1.0)*x5837*x5842))+(((-1.0)*r02*x5841))+((r01*x5843)));
evalcond[3]=((1.0)+((r11*x5843))+(((-1.0)*x5838*x5842))+(((-1.0)*r12*x5841)));
evalcond[4]=(((cj2*sj1))+((x5835*x5839))+((cj1*sj2))+(((-1.0)*x5840*x5841))+((r22*x5836)));
evalcond[5]=((((-1.0)*x5837*x5841))+((r02*x5836))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5845=((1.0)*cj5);
CheckValue<IkReal> x5846 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5846.valid){
continue;
}
CheckValue<IkReal> x5847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5845))+(((-1.0)*r00*sj5)))),-1);
if(!x5847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5846.value)+(((1.5707963267949)*(x5847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5848=IKcos(j4);
IkReal x5849=IKsin(j4);
IkReal x5850=(cj5*r00);
IkReal x5851=(cj5*r10);
IkReal x5852=(r21*sj5);
IkReal x5853=(cj5*r20);
IkReal x5854=((1.0)*x5848);
IkReal x5855=((1.0)*x5849);
IkReal x5856=(sj5*x5849);
IkReal x5857=(sj5*x5848);
evalcond[0]=(((r11*x5857))+((r12*x5849))+(((-1.0)*x5851*x5854)));
evalcond[1]=((((-1.0)*x5853*x5855))+(((-1.0)*r22*x5854))+((x5849*x5852)));
evalcond[2]=(((r01*x5856))+(((-1.0)*r02*x5854))+(((-1.0)*x5850*x5855)));
evalcond[3]=((1.0)+((r11*x5856))+(((-1.0)*r12*x5854))+(((-1.0)*x5851*x5855)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5853*x5854))+((cj1*sj2))+((x5848*x5852))+((r22*x5849)));
evalcond[5]=(((r01*x5857))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5850*x5854))+((r02*x5849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5858=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5858.valid){
continue;
}
CheckValue<IkReal> x5859 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5858.value)))+(x5859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5860=IKcos(j4);
IkReal x5861=IKsin(j4);
IkReal x5862=(cj5*r00);
IkReal x5863=(cj5*r10);
IkReal x5864=(r21*sj5);
IkReal x5865=(cj5*r20);
IkReal x5866=((1.0)*x5860);
IkReal x5867=((1.0)*x5861);
IkReal x5868=(sj5*x5861);
IkReal x5869=(sj5*x5860);
evalcond[0]=((((-1.0)*x5863*x5866))+((r11*x5869))+((r12*x5861)));
evalcond[1]=((((-1.0)*r22*x5866))+((x5861*x5864))+(((-1.0)*x5865*x5867)));
evalcond[2]=((((-1.0)*x5862*x5867))+(((-1.0)*r02*x5866))+((r01*x5868)));
evalcond[3]=((1.0)+(((-1.0)*x5863*x5867))+((r11*x5868))+(((-1.0)*r12*x5866)));
evalcond[4]=(((x5860*x5864))+((cj2*sj1))+((r22*x5861))+((cj1*sj2))+(((-1.0)*x5865*x5866)));
evalcond[5]=((((-1.0)*x5862*x5866))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5861))+((r01*x5869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5870=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5870;
j4eval[1]=IKsign(x5870);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5871=((1.0)*cj5);
IkReal x5872=((((-1.0)*r21*x5871))+(((-1.0)*r20*sj5)));
j4eval[0]=x5872;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5871))))));
j4eval[2]=IKsign(x5872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5873=cj5*cj5;
IkReal x5874=r11*r11;
IkReal x5875=(r11*sj5);
IkReal x5876=(cj5*r10);
IkReal x5877=((r12*r12)+(((-1.0)*x5873*x5874))+(((-2.0)*x5875*x5876))+((x5873*(r10*r10)))+x5874);
j4eval[0]=x5877;
j4eval[1]=IKsign(x5877);
j4eval[2]=((IKabs(r12))+(IKabs((x5875+(((-1.0)*x5876))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5878=cj5*cj5;
IkReal x5879=r11*r11;
IkReal x5880=(cj5*r10);
IkReal x5881=(r11*sj5);
CheckValue<IkReal> x5882=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5880*x5881))+(((-1.0)*x5878*x5879))+((x5878*(r10*r10)))+x5879)),-1);
if(!x5882.valid){
continue;
}
CheckValue<IkReal> x5883 = IKatan2WithCheck(IkReal(((((-1.0)*x5880))+x5881)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5882.value)))+(x5883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5884=IKcos(j4);
IkReal x5885=IKsin(j4);
IkReal x5886=(cj5*r00);
IkReal x5887=(cj5*r10);
IkReal x5888=(r21*sj5);
IkReal x5889=(cj5*r20);
IkReal x5890=((1.0)*x5884);
IkReal x5891=((1.0)*x5885);
IkReal x5892=(sj5*x5885);
IkReal x5893=(sj5*x5884);
evalcond[0]=(((r12*x5885))+(((-1.0)*x5887*x5890))+((r11*x5893)));
evalcond[1]=((((-1.0)*x5889*x5891))+(((-1.0)*r22*x5890))+((x5885*x5888)));
evalcond[2]=((((-1.0)*x5886*x5891))+(((-1.0)*r02*x5890))+((r01*x5892)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5890))+(((-1.0)*x5887*x5891))+((r11*x5892)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5889*x5890))+((cj1*sj2))+((x5884*x5888))+((r22*x5885)));
evalcond[5]=((((-1.0)*x5886*x5890))+(((-1.0)*sj1*sj2))+((r01*x5893))+((cj1*cj2))+((r02*x5885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5894=((1.0)*cj5);
CheckValue<IkReal> x5895 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5895.valid){
continue;
}
CheckValue<IkReal> x5896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5894))+(((-1.0)*r20*sj5)))),-1);
if(!x5896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5895.value)+(((1.5707963267949)*(x5896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5897=IKcos(j4);
IkReal x5898=IKsin(j4);
IkReal x5899=(cj5*r00);
IkReal x5900=(cj5*r10);
IkReal x5901=(r21*sj5);
IkReal x5902=(cj5*r20);
IkReal x5903=((1.0)*x5897);
IkReal x5904=((1.0)*x5898);
IkReal x5905=(sj5*x5898);
IkReal x5906=(sj5*x5897);
evalcond[0]=((((-1.0)*x5900*x5903))+((r12*x5898))+((r11*x5906)));
evalcond[1]=((((-1.0)*x5902*x5904))+((x5898*x5901))+(((-1.0)*r22*x5903)));
evalcond[2]=((((-1.0)*r02*x5903))+(((-1.0)*x5899*x5904))+((r01*x5905)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5903))+(((-1.0)*x5900*x5904))+((r11*x5905)));
evalcond[4]=(((r22*x5898))+((cj2*sj1))+(((-1.0)*x5902*x5903))+((x5897*x5901))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5898))+((cj1*cj2))+(((-1.0)*x5899*x5903))+((r01*x5906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5907 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5907.valid){
continue;
}
CheckValue<IkReal> x5908=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5907.value)+(((1.5707963267949)*(x5908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5909=IKcos(j4);
IkReal x5910=IKsin(j4);
IkReal x5911=(cj5*r00);
IkReal x5912=(cj5*r10);
IkReal x5913=(r21*sj5);
IkReal x5914=(cj5*r20);
IkReal x5915=((1.0)*x5909);
IkReal x5916=((1.0)*x5910);
IkReal x5917=(sj5*x5910);
IkReal x5918=(sj5*x5909);
evalcond[0]=(((r12*x5910))+(((-1.0)*x5912*x5915))+((r11*x5918)));
evalcond[1]=((((-1.0)*r22*x5915))+((x5910*x5913))+(((-1.0)*x5914*x5916)));
evalcond[2]=(((r01*x5917))+(((-1.0)*r02*x5915))+(((-1.0)*x5911*x5916)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5915))+(((-1.0)*x5912*x5916))+((r11*x5917)));
evalcond[4]=(((cj2*sj1))+((r22*x5910))+((x5909*x5913))+((cj1*sj2))+(((-1.0)*x5914*x5915)));
evalcond[5]=(((r01*x5918))+(((-1.0)*sj1*sj2))+((r02*x5910))+((cj1*cj2))+(((-1.0)*x5911*x5915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5919=((-1.0)*r00);
IkReal x5921 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5921)==0){
continue;
}
IkReal x5920=pow(x5921,-0.5);
CheckValue<IkReal> x5922 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5919),IKFAST_ATAN2_MAGTHRESH);
if(!x5922.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5922.value));
IkReal gconst127=(r01*x5920);
IkReal gconst128=(x5919*x5920);
CheckValue<IkReal> x5923 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5923.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5923.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5924=((-1.0)*r00);
IkReal x5925=x5920;
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5924),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
IkReal x5926=((-1.0)*(x5927.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5926;
IkReal gconst126=x5926;
IkReal gconst127=(r01*x5925);
IkReal gconst128=(x5924*x5925);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5928=((1.0)*sj0);
IkReal x5929=((1.0)*gconst127);
CheckValue<IkReal> x5930 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5928)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5929))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5930.valid){
continue;
}
CheckValue<IkReal> x5931=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5929)))),-1);
if(!x5931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5930.value)+(((1.5707963267949)*(x5931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5932=IKsin(j4);
IkReal x5933=IKcos(j4);
IkReal x5934=(gconst127*r01);
IkReal x5935=(sj1*sj2);
IkReal x5936=(gconst128*r10);
IkReal x5937=(gconst128*r00);
IkReal x5938=(gconst128*r20);
IkReal x5939=((1.0)*x5933);
IkReal x5940=((1.0)*cj1*cj2);
IkReal x5941=((1.0)*x5932);
IkReal x5942=(gconst127*x5933);
IkReal x5943=(gconst127*x5932);
evalcond[0]=(((r21*x5943))+(((-1.0)*x5938*x5941))+(((-1.0)*r22*x5939)));
evalcond[1]=(cj0+(((-1.0)*x5936*x5941))+(((-1.0)*r12*x5939))+((r11*x5943)));
evalcond[2]=((((-1.0)*sj0))+((x5932*x5934))+(((-1.0)*r02*x5939))+(((-1.0)*x5937*x5941)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5938*x5939))+((r22*x5932))+((r21*x5942)));
evalcond[4]=(((x5933*x5934))+(((-1.0)*cj0*x5940))+((cj0*x5935))+(((-1.0)*x5937*x5939))+((r02*x5932)));
evalcond[5]=((((-1.0)*sj0*x5940))+((r12*x5932))+(((-1.0)*x5936*x5939))+((sj0*x5935))+((r11*x5942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5944=((1.0)*gconst128);
CheckValue<IkReal> x5945 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5945.valid){
continue;
}
CheckValue<IkReal> x5946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5944))+(((-1.0)*gconst127*r10)))),-1);
if(!x5946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5945.value)+(((1.5707963267949)*(x5946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5947=IKsin(j4);
IkReal x5948=IKcos(j4);
IkReal x5949=(gconst127*r01);
IkReal x5950=(sj1*sj2);
IkReal x5951=(gconst128*r10);
IkReal x5952=(gconst128*r00);
IkReal x5953=(gconst128*r20);
IkReal x5954=((1.0)*x5948);
IkReal x5955=((1.0)*cj1*cj2);
IkReal x5956=((1.0)*x5947);
IkReal x5957=(gconst127*x5948);
IkReal x5958=(gconst127*x5947);
evalcond[0]=(((r21*x5958))+(((-1.0)*r22*x5954))+(((-1.0)*x5953*x5956)));
evalcond[1]=(cj0+((r11*x5958))+(((-1.0)*x5951*x5956))+(((-1.0)*r12*x5954)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5954))+((x5947*x5949))+(((-1.0)*x5952*x5956)));
evalcond[3]=(((cj2*sj1))+((r21*x5957))+((cj1*sj2))+((r22*x5947))+(((-1.0)*x5953*x5954)));
evalcond[4]=((((-1.0)*x5952*x5954))+((cj0*x5950))+(((-1.0)*cj0*x5955))+((r02*x5947))+((x5948*x5949)));
evalcond[5]=(((sj0*x5950))+((r11*x5957))+(((-1.0)*x5951*x5954))+((r12*x5947))+(((-1.0)*sj0*x5955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5959=((-1.0)*r01);
IkReal x5961 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5961)==0){
continue;
}
IkReal x5960=pow(x5961,-0.5);
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal(x5959),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5962.value))));
IkReal gconst130=(x5959*x5960);
IkReal gconst131=((1.0)*r00*x5960);
CheckValue<IkReal> x5963 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5963.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5963.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5964=((-1.0)*r01);
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal(x5964),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
IkReal x5965=((1.0)*(x5967.value));
IkReal x5966=x5960;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5965)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5965)));
IkReal gconst130=(x5964*x5966);
IkReal gconst131=((1.0)*r00*x5966);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5968=((-1.0)*r01);
CheckValue<IkReal> x5971 = IKatan2WithCheck(IkReal(x5968),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5971.valid){
continue;
}
IkReal x5969=((1.0)*(x5971.value));
IkReal x5970=x5960;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5969)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5969)));
IkReal gconst130=(x5968*x5970);
IkReal gconst131=((1.0)*r00*x5970);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5972=((-1.0)*r01);
CheckValue<IkReal> x5975 = IKatan2WithCheck(IkReal(x5972),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5975.valid){
continue;
}
IkReal x5973=((1.0)*(x5975.value));
IkReal x5974=x5960;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5973)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5973)));
IkReal gconst130=(x5972*x5974);
IkReal gconst131=((1.0)*r00*x5974);
IkReal x5976=r02*r02;
IkReal x5977=(r12*sj0);
IkReal x5978=((1.0)*cj0);
IkReal x5979=x5960;
j4eval[0]=((IKabs((((cj0*x5976*x5979))+(((-1.0)*x5978*x5979))+((r02*x5977*x5979)))))+(IKabs(((((-1.0)*r02*x5978))+(((-1.0)*x5977))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5980=((1.0)*sj0);
IkReal x5981=((1.0)*gconst130);
CheckValue<IkReal> x5982 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5980))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x5980))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*cj0*r01*x5981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5982.valid){
continue;
}
CheckValue<IkReal> x5983=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5981)))),-1);
if(!x5983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5982.value)+(((1.5707963267949)*(x5983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5984=IKsin(j4);
IkReal x5985=IKcos(j4);
IkReal x5986=(gconst131*r10);
IkReal x5987=(sj1*sj2);
IkReal x5988=(gconst131*r20);
IkReal x5989=(gconst131*r00);
IkReal x5990=((1.0)*x5985);
IkReal x5991=((1.0)*cj1*cj2);
IkReal x5992=(gconst130*x5984);
IkReal x5993=((1.0)*x5984);
IkReal x5994=(gconst130*x5985);
evalcond[0]=(((r21*x5992))+(((-1.0)*x5988*x5993))+(((-1.0)*r22*x5990)));
evalcond[1]=((((-1.0)*r12*x5990))+cj0+(((-1.0)*x5986*x5993))+((r11*x5992)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5990))+((r01*x5992))+(((-1.0)*x5989*x5993)));
evalcond[3]=(((r21*x5994))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5988*x5990))+((r22*x5984)));
evalcond[4]=(((r02*x5984))+(((-1.0)*cj0*x5991))+((cj0*x5987))+((r01*x5994))+(((-1.0)*x5989*x5990)));
evalcond[5]=(((r12*x5984))+(((-1.0)*x5986*x5990))+((r11*x5994))+((sj0*x5987))+(((-1.0)*sj0*x5991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5995=((1.0)*gconst131);
CheckValue<IkReal> x5996=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5995))+(((-1.0)*gconst130*r10)))),-1);
if(!x5996.valid){
continue;
}
CheckValue<IkReal> x5997 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5995))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5996.value)))+(x5997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5998=IKsin(j4);
IkReal x5999=IKcos(j4);
IkReal x6000=(gconst131*r10);
IkReal x6001=(sj1*sj2);
IkReal x6002=(gconst131*r20);
IkReal x6003=(gconst131*r00);
IkReal x6004=((1.0)*x5999);
IkReal x6005=((1.0)*cj1*cj2);
IkReal x6006=(gconst130*x5998);
IkReal x6007=((1.0)*x5998);
IkReal x6008=(gconst130*x5999);
evalcond[0]=(((r21*x6006))+(((-1.0)*r22*x6004))+(((-1.0)*x6002*x6007)));
evalcond[1]=(cj0+((r11*x6006))+(((-1.0)*r12*x6004))+(((-1.0)*x6000*x6007)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6006))+(((-1.0)*x6003*x6007))+(((-1.0)*r02*x6004)));
evalcond[3]=(((r21*x6008))+((cj2*sj1))+((cj1*sj2))+((r22*x5998))+(((-1.0)*x6002*x6004)));
evalcond[4]=(((cj0*x6001))+((r02*x5998))+(((-1.0)*cj0*x6005))+((r01*x6008))+(((-1.0)*x6003*x6004)));
evalcond[5]=(((r12*x5998))+(((-1.0)*sj0*x6005))+((r11*x6008))+((sj0*x6001))+(((-1.0)*x6000*x6004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6009=((1.0)*gconst131);
CheckValue<IkReal> x6010 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6010.valid){
continue;
}
CheckValue<IkReal> x6011=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6009))+(((-1.0)*gconst130*r00)))),-1);
if(!x6011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6010.value)+(((1.5707963267949)*(x6011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6012=IKsin(j4);
IkReal x6013=IKcos(j4);
IkReal x6014=(gconst131*r10);
IkReal x6015=(sj1*sj2);
IkReal x6016=(gconst131*r20);
IkReal x6017=(gconst131*r00);
IkReal x6018=((1.0)*x6013);
IkReal x6019=((1.0)*cj1*cj2);
IkReal x6020=(gconst130*x6012);
IkReal x6021=((1.0)*x6012);
IkReal x6022=(gconst130*x6013);
evalcond[0]=(((r21*x6020))+(((-1.0)*x6016*x6021))+(((-1.0)*r22*x6018)));
evalcond[1]=(cj0+(((-1.0)*r12*x6018))+(((-1.0)*x6014*x6021))+((r11*x6020)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6018))+((r01*x6020))+(((-1.0)*x6017*x6021)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6022))+((r22*x6012))+(((-1.0)*x6016*x6018)));
evalcond[4]=((((-1.0)*x6017*x6018))+((cj0*x6015))+((r01*x6022))+((r02*x6012))+(((-1.0)*cj0*x6019)));
evalcond[5]=(((r12*x6012))+(((-1.0)*sj0*x6019))+((sj0*x6015))+((r11*x6022))+(((-1.0)*x6014*x6018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6023=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6023;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6024=((1.0)*cj5);
IkReal x6025=((((-1.0)*r11*x6024))+(((-1.0)*r10*sj5)));
j4eval[0]=x6025;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6024))))));
j4eval[2]=IKsign(x6025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6026=cj5*cj5;
IkReal x6027=r01*r01;
IkReal x6028=(cj5*r00);
IkReal x6029=(r01*sj5);
IkReal x6030=((((-1.0)*x6026*x6027))+x6027+(((-2.0)*x6028*x6029))+(r02*r02)+((x6026*(r00*r00))));
j4eval[0]=x6030;
j4eval[1]=IKsign(x6030);
j4eval[2]=((IKabs(r02))+(IKabs((x6029+(((-1.0)*x6028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6031=cj5*cj5;
IkReal x6032=r01*r01;
IkReal x6033=(r01*sj5);
IkReal x6034=(cj5*r00);
CheckValue<IkReal> x6035=IKPowWithIntegerCheck(IKsign((x6032+((x6031*(r00*r00)))+(r02*r02)+(((-2.0)*x6033*x6034))+(((-1.0)*x6031*x6032)))),-1);
if(!x6035.valid){
continue;
}
CheckValue<IkReal> x6036 = IKatan2WithCheck(IkReal((x6033+(((-1.0)*x6034)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6035.value)))+(x6036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6037=IKcos(j4);
IkReal x6038=IKsin(j4);
IkReal x6039=(cj5*r00);
IkReal x6040=(cj5*r10);
IkReal x6041=(r21*sj5);
IkReal x6042=(cj5*r20);
IkReal x6043=((1.0)*x6037);
IkReal x6044=((1.0)*x6038);
IkReal x6045=(sj5*x6038);
IkReal x6046=(sj5*x6037);
evalcond[0]=((((-1.0)*x6039*x6043))+((r02*x6038))+((r01*x6046)));
evalcond[1]=((((-1.0)*x6042*x6044))+((x6038*x6041))+(((-1.0)*r22*x6043)));
evalcond[2]=(((r11*x6045))+(((-1.0)*x6040*x6044))+(((-1.0)*r12*x6043)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6043))+(((-1.0)*x6039*x6044))+((r01*x6045)));
evalcond[4]=(((r22*x6038))+((cj2*sj1))+((x6037*x6041))+((cj1*sj2))+(((-1.0)*x6042*x6043)));
evalcond[5]=(((r11*x6046))+((r12*x6038))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6040*x6043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6047=((1.0)*cj5);
CheckValue<IkReal> x6048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6047)))),-1);
if(!x6048.valid){
continue;
}
CheckValue<IkReal> x6049 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6047))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6048.value)))+(x6049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6050=IKcos(j4);
IkReal x6051=IKsin(j4);
IkReal x6052=(cj5*r00);
IkReal x6053=(cj5*r10);
IkReal x6054=(r21*sj5);
IkReal x6055=(cj5*r20);
IkReal x6056=((1.0)*x6050);
IkReal x6057=((1.0)*x6051);
IkReal x6058=(sj5*x6051);
IkReal x6059=(sj5*x6050);
evalcond[0]=((((-1.0)*x6052*x6056))+((r01*x6059))+((r02*x6051)));
evalcond[1]=((((-1.0)*x6055*x6057))+(((-1.0)*r22*x6056))+((x6051*x6054)));
evalcond[2]=((((-1.0)*x6053*x6057))+(((-1.0)*r12*x6056))+((r11*x6058)));
evalcond[3]=((-1.0)+(((-1.0)*x6052*x6057))+((r01*x6058))+(((-1.0)*r02*x6056)));
evalcond[4]=(((cj2*sj1))+((r22*x6051))+((cj1*sj2))+(((-1.0)*x6055*x6056))+((x6050*x6054)));
evalcond[5]=((((-1.0)*x6053*x6056))+((r12*x6051))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6060=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6060.valid){
continue;
}
CheckValue<IkReal> x6061 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6060.value)))+(x6061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6062=IKcos(j4);
IkReal x6063=IKsin(j4);
IkReal x6064=(cj5*r00);
IkReal x6065=(cj5*r10);
IkReal x6066=(r21*sj5);
IkReal x6067=(cj5*r20);
IkReal x6068=((1.0)*x6062);
IkReal x6069=((1.0)*x6063);
IkReal x6070=(sj5*x6063);
IkReal x6071=(sj5*x6062);
evalcond[0]=((((-1.0)*x6064*x6068))+((r01*x6071))+((r02*x6063)));
evalcond[1]=((((-1.0)*r22*x6068))+((x6063*x6066))+(((-1.0)*x6067*x6069)));
evalcond[2]=(((r11*x6070))+(((-1.0)*r12*x6068))+(((-1.0)*x6065*x6069)));
evalcond[3]=((-1.0)+(((-1.0)*x6064*x6069))+((r01*x6070))+(((-1.0)*r02*x6068)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6063))+(((-1.0)*x6067*x6068))+((x6062*x6066)));
evalcond[5]=(((r11*x6071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6063))+(((-1.0)*x6065*x6068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6072=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6072;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6073=((1.0)*cj5);
IkReal x6074=((((-1.0)*r21*x6073))+(((-1.0)*r20*sj5)));
j4eval[0]=x6074;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6073))+((r11*sj5))))));
j4eval[2]=IKsign(x6074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6075=(r01*sj5);
IkReal x6076=(cj1*sj2);
IkReal x6077=(cj2*sj1);
IkReal x6078=((1.0)*r02);
IkReal x6079=((1.0)*cj5*r00);
IkReal x6080=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6080;
j4eval[1]=((IKabs(((((-1.0)*x6077*x6078))+(((-1.0)*x6076*x6078)))))+(IKabs((((x6075*x6076))+((x6075*x6077))+(((-1.0)*x6077*x6079))+(((-1.0)*x6076*x6079))))));
j4eval[2]=IKsign(x6080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6081=(r01*sj5);
IkReal x6082=(cj1*sj2);
IkReal x6083=(cj2*sj1);
IkReal x6084=((1.0)*r02);
IkReal x6085=((1.0)*cj5*r00);
CheckValue<IkReal> x6086 = IKatan2WithCheck(IkReal(((((-1.0)*x6083*x6085))+(((-1.0)*x6082*x6085))+((x6081*x6083))+((x6081*x6082)))),IkReal(((((-1.0)*x6083*x6084))+(((-1.0)*x6082*x6084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6086.valid){
continue;
}
CheckValue<IkReal> x6087=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6086.value)+(((1.5707963267949)*(x6087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6088=IKcos(j4);
IkReal x6089=IKsin(j4);
IkReal x6090=(cj5*r00);
IkReal x6091=(cj5*r10);
IkReal x6092=(r21*sj5);
IkReal x6093=(cj5*r20);
IkReal x6094=((1.0)*x6088);
IkReal x6095=((1.0)*x6089);
IkReal x6096=(sj5*x6089);
IkReal x6097=(sj5*x6088);
evalcond[0]=(((r01*x6097))+(((-1.0)*x6090*x6094))+((r02*x6089)));
evalcond[1]=((((-1.0)*r22*x6094))+((x6089*x6092))+(((-1.0)*x6093*x6095)));
evalcond[2]=((((-1.0)*x6091*x6095))+((r11*x6096))+(((-1.0)*r12*x6094)));
evalcond[3]=((1.0)+((r01*x6096))+(((-1.0)*x6090*x6095))+(((-1.0)*r02*x6094)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6088*x6092))+(((-1.0)*x6093*x6094))+((r22*x6089)));
evalcond[5]=((((-1.0)*x6091*x6094))+(((-1.0)*sj1*sj2))+((r12*x6089))+((r11*x6097))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6098=((1.0)*cj5);
CheckValue<IkReal> x6099 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6098))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6099.valid){
continue;
}
CheckValue<IkReal> x6100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6098))+(((-1.0)*r20*sj5)))),-1);
if(!x6100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6099.value)+(((1.5707963267949)*(x6100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6101=IKcos(j4);
IkReal x6102=IKsin(j4);
IkReal x6103=(cj5*r00);
IkReal x6104=(cj5*r10);
IkReal x6105=(r21*sj5);
IkReal x6106=(cj5*r20);
IkReal x6107=((1.0)*x6101);
IkReal x6108=((1.0)*x6102);
IkReal x6109=(sj5*x6102);
IkReal x6110=(sj5*x6101);
evalcond[0]=((((-1.0)*x6103*x6107))+((r01*x6110))+((r02*x6102)));
evalcond[1]=(((x6102*x6105))+(((-1.0)*r22*x6107))+(((-1.0)*x6106*x6108)));
evalcond[2]=(((r11*x6109))+(((-1.0)*x6104*x6108))+(((-1.0)*r12*x6107)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6107))+(((-1.0)*x6103*x6108))+((r01*x6109)));
evalcond[4]=(((cj2*sj1))+((r22*x6102))+((x6101*x6105))+((cj1*sj2))+(((-1.0)*x6106*x6107)));
evalcond[5]=((((-1.0)*x6104*x6107))+(((-1.0)*sj1*sj2))+((r11*x6110))+((cj1*cj2))+((r12*x6102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6111 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6111.valid){
continue;
}
CheckValue<IkReal> x6112=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6111.value)+(((1.5707963267949)*(x6112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6113=IKcos(j4);
IkReal x6114=IKsin(j4);
IkReal x6115=(cj5*r00);
IkReal x6116=(cj5*r10);
IkReal x6117=(r21*sj5);
IkReal x6118=(cj5*r20);
IkReal x6119=((1.0)*x6113);
IkReal x6120=((1.0)*x6114);
IkReal x6121=(sj5*x6114);
IkReal x6122=(sj5*x6113);
evalcond[0]=(((r01*x6122))+((r02*x6114))+(((-1.0)*x6115*x6119)));
evalcond[1]=((((-1.0)*r22*x6119))+(((-1.0)*x6118*x6120))+((x6114*x6117)));
evalcond[2]=((((-1.0)*r12*x6119))+(((-1.0)*x6116*x6120))+((r11*x6121)));
evalcond[3]=((1.0)+((r01*x6121))+(((-1.0)*r02*x6119))+(((-1.0)*x6115*x6120)));
evalcond[4]=(((x6113*x6117))+((cj2*sj1))+((cj1*sj2))+((r22*x6114))+(((-1.0)*x6118*x6119)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6116*x6119))+((r12*x6114))+((cj1*cj2))+((r11*x6122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6123=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6123);
rxp1_1=(px*r21);
rxp1_2=(r11*x6123);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6124=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6124);
rxp1_1=(px*r21);
rxp1_2=(r11*x6124);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6125=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6125);
rxp1_1=(px*r21);
rxp1_2=(r11*x6125);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6128=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6128.valid){
continue;
}
IkReal x6126=x6128.value;
IkReal x6127=(sj0*x6126);
cj4array[0]=(((cj1*cj2*x6127))+(((-1.0)*sj1*sj2*x6127)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6129=IKsin(j4);
IkReal x6130=IKcos(j4);
IkReal x6131=(r21*sj5);
IkReal x6132=((1.0)*cj5*r20);
evalcond[0]=(r02*x6129);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6130)));
evalcond[2]=(((x6129*x6131))+(((-1.0)*x6129*x6132)));
evalcond[3]=((((-1.0)*cj5*r10*x6129))+((r11*sj5*x6129)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6130*x6132))+((cj1*sj2))+((x6130*x6131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6135=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6135.valid){
continue;
}
IkReal x6133=x6135.value;
IkReal x6134=((1.0)*x6133);
cj4array[0]=((((-1.0)*cj2*sj1*x6134))+(((-1.0)*cj1*sj2*x6134)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6136=IKsin(j4);
IkReal x6137=IKcos(j4);
IkReal x6138=((1.0)*sj0);
IkReal x6139=((1.0)*cj5);
IkReal x6140=(sj5*x6136);
evalcond[0]=(r02*x6136);
evalcond[1]=((((-1.0)*x6138))+(((-1.0)*r02*x6137)));
evalcond[2]=((((-1.0)*r20*x6136*x6139))+((r21*x6140)));
evalcond[3]=(((r11*x6140))+(((-1.0)*r10*x6136*x6139)));
evalcond[4]=(((r11*sj5*x6137))+(((-1.0)*r10*x6137*x6139))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6141=IKPowWithIntegerCheck(r02,-1);
if(!x6141.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6141.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6142=IKsin(j4);
IkReal x6143=IKcos(j4);
IkReal x6144=(r21*sj5);
IkReal x6145=((1.0)*cj5);
IkReal x6146=(r11*sj5);
evalcond[0]=(r02*x6142);
evalcond[1]=(((x6142*x6144))+(((-1.0)*r20*x6142*x6145)));
evalcond[2]=(((x6142*x6146))+(((-1.0)*r10*x6142*x6145)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6143*x6144))+(((-1.0)*r20*x6143*x6145)));
evalcond[4]=((((-1.0)*r10*x6143*x6145))+(((-1.0)*cj1*cj2*sj0))+((x6143*x6146))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6147=((1.0)*sj0);
IkReal x6148=((1.0)*cj0);
CheckValue<IkReal> x6149 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6148))+(((-1.0)*r12*x6147)))),IkReal(((((-1.0)*r11*sj5*x6147))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6149.valid){
continue;
}
CheckValue<IkReal> x6150=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6149.value)+(((1.5707963267949)*(x6150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6151=IKsin(j4);
IkReal x6152=IKcos(j4);
IkReal x6153=(cj5*r00);
IkReal x6154=(cj5*r10);
IkReal x6155=(r21*sj5);
IkReal x6156=(sj1*sj2);
IkReal x6157=(cj5*r20);
IkReal x6158=((1.0)*x6152);
IkReal x6159=((1.0)*cj1*cj2);
IkReal x6160=((1.0)*x6151);
IkReal x6161=(sj5*x6151);
IkReal x6162=(sj5*x6152);
evalcond[0]=((((-1.0)*r22*x6158))+(((-1.0)*x6157*x6160))+((x6151*x6155)));
evalcond[1]=((((-1.0)*x6154*x6160))+cj0+((r11*x6161))+(((-1.0)*r12*x6158)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6158))+(((-1.0)*x6153*x6160))+((r01*x6161)));
evalcond[3]=(((r22*x6151))+((cj2*sj1))+((x6152*x6155))+((cj1*sj2))+(((-1.0)*x6157*x6158)));
evalcond[4]=(((cj0*x6156))+((r02*x6151))+((r01*x6162))+(((-1.0)*cj0*x6159))+(((-1.0)*x6153*x6158)));
evalcond[5]=(((r12*x6151))+((sj0*x6156))+((r11*x6162))+(((-1.0)*x6154*x6158))+(((-1.0)*sj0*x6159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6163=((1.0)*cj5);
CheckValue<IkReal> x6164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6163)))),-1);
if(!x6164.valid){
continue;
}
CheckValue<IkReal> x6165 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6164.value)))+(x6165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6166=IKsin(j4);
IkReal x6167=IKcos(j4);
IkReal x6168=(cj5*r00);
IkReal x6169=(cj5*r10);
IkReal x6170=(r21*sj5);
IkReal x6171=(sj1*sj2);
IkReal x6172=(cj5*r20);
IkReal x6173=((1.0)*x6167);
IkReal x6174=((1.0)*cj1*cj2);
IkReal x6175=((1.0)*x6166);
IkReal x6176=(sj5*x6166);
IkReal x6177=(sj5*x6167);
evalcond[0]=(((x6166*x6170))+(((-1.0)*x6172*x6175))+(((-1.0)*r22*x6173)));
evalcond[1]=(cj0+((r11*x6176))+(((-1.0)*r12*x6173))+(((-1.0)*x6169*x6175)));
evalcond[2]=((((-1.0)*x6168*x6175))+(((-1.0)*sj0))+((r01*x6176))+(((-1.0)*r02*x6173)));
evalcond[3]=(((cj2*sj1))+((x6167*x6170))+((cj1*sj2))+(((-1.0)*x6172*x6173))+((r22*x6166)));
evalcond[4]=((((-1.0)*x6168*x6173))+(((-1.0)*cj0*x6174))+((r02*x6166))+((r01*x6177))+((cj0*x6171)));
evalcond[5]=((((-1.0)*sj0*x6174))+((r12*x6166))+((r11*x6177))+((sj0*x6171))+(((-1.0)*x6169*x6173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6178=((1.0)*cj5);
CheckValue<IkReal> x6179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6178)))),-1);
if(!x6179.valid){
continue;
}
CheckValue<IkReal> x6180 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6178))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6179.value)))+(x6180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6181=IKsin(j4);
IkReal x6182=IKcos(j4);
IkReal x6183=(cj5*r00);
IkReal x6184=(cj5*r10);
IkReal x6185=(r21*sj5);
IkReal x6186=(sj1*sj2);
IkReal x6187=(cj5*r20);
IkReal x6188=((1.0)*x6182);
IkReal x6189=((1.0)*cj1*cj2);
IkReal x6190=((1.0)*x6181);
IkReal x6191=(sj5*x6181);
IkReal x6192=(sj5*x6182);
evalcond[0]=((((-1.0)*r22*x6188))+((x6181*x6185))+(((-1.0)*x6187*x6190)));
evalcond[1]=(cj0+((r11*x6191))+(((-1.0)*r12*x6188))+(((-1.0)*x6184*x6190)));
evalcond[2]=((((-1.0)*x6183*x6190))+(((-1.0)*sj0))+(((-1.0)*r02*x6188))+((r01*x6191)));
evalcond[3]=(((cj2*sj1))+((r22*x6181))+((cj1*sj2))+(((-1.0)*x6187*x6188))+((x6182*x6185)));
evalcond[4]=(((cj0*x6186))+(((-1.0)*x6183*x6188))+((r02*x6181))+((r01*x6192))+(((-1.0)*cj0*x6189)));
evalcond[5]=(((r11*x6192))+(((-1.0)*x6184*x6188))+((sj0*x6186))+((r12*x6181))+(((-1.0)*sj0*x6189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6193=r21*r21;
IkReal x6194=cj5*cj5;
IkReal x6195=(cj2*sj1);
IkReal x6196=(cj1*sj2);
IkReal x6197=(r21*sj5);
IkReal x6198=((1.0)*cj5*r20);
CheckValue<IkReal> x6199=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6194*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6193))+((x6193*x6194))+(((2.0)*cj5*r20*x6197)))),-1);
if(!x6199.valid){
continue;
}
CheckValue<IkReal> x6200 = IKatan2WithCheck(IkReal((((r22*x6195))+((r22*x6196)))),IkReal((((x6195*x6197))+(((-1.0)*x6195*x6198))+(((-1.0)*x6196*x6198))+((x6196*x6197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6199.value)))+(x6200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6201=IKsin(j4);
IkReal x6202=IKcos(j4);
IkReal x6203=(r21*sj5);
IkReal x6204=(cj5*r20);
IkReal x6205=((1.0)*x6202);
evalcond[0]=((((-1.0)*x6201*x6204))+(((-1.0)*r22*x6205))+((x6201*x6203)));
evalcond[1]=(((cj2*sj1))+((r22*x6201))+((cj1*sj2))+((x6202*x6203))+(((-1.0)*x6204*x6205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6206=(cj5*sj4);
IkReal x6207=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6207))+(((-1.0)*r00*x6206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6206))+(((-1.0)*r11*x6207))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6207))+(((-1.0)*r00*x6206))))+IKsqr((((r10*x6206))+(((-1.0)*r11*x6207))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6207))+(((-1.0)*r00*x6206))), (((r10*x6206))+(((-1.0)*r11*x6207))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6208=IKcos(j0);
IkReal x6209=IKsin(j0);
IkReal x6210=(cj1*cj2);
IkReal x6211=(sj1*sj2);
IkReal x6212=(cj5*r01);
IkReal x6213=((1.0)*sj2);
IkReal x6214=(r11*sj5);
IkReal x6215=(cj2*sj1);
IkReal x6216=(cj5*r11);
IkReal x6217=(r00*sj5);
IkReal x6218=((1.0)*cj4);
IkReal x6219=(r01*sj5);
IkReal x6220=(r10*sj5);
IkReal x6221=((0.571)*x6208);
IkReal x6222=(cj1*x6209);
IkReal x6223=(cj1*x6208);
IkReal x6224=(cj5*x6218);
IkReal x6225=((0.571)*x6209);
IkReal x6226=((1.0)*x6208);
IkReal x6227=((1.0)*x6209);
IkReal x6228=((1.0)*cj5*sj4);
evalcond[0]=(x6208+(((-1.0)*r12*x6218))+((sj4*x6214))+(((-1.0)*r10*x6228)));
evalcond[1]=((((-1.0)*x6227))+((sj4*x6219))+(((-1.0)*r00*x6228))+(((-1.0)*r02*x6218)));
evalcond[2]=(x6217+x6212+(((-1.0)*x6213*x6223))+(((-1.0)*x6215*x6226)));
evalcond[3]=(x6216+x6220+(((-1.0)*x6213*x6222))+(((-1.0)*x6215*x6227)));
evalcond[4]=((((-1.0)*x6210*x6226))+(((-1.0)*r00*x6224))+((r02*sj4))+((x6208*x6211))+((cj4*x6219)));
evalcond[5]=((((-1.0)*x6210*x6227))+((x6209*x6211))+((r12*sj4))+((cj4*x6214))+(((-1.0)*r10*x6224)));
evalcond[6]=(((x6210*x6221))+(((-1.0)*px))+(((-0.12)*x6212))+(((-0.12)*x6217))+(((0.613)*x6223))+(((-0.174)*x6209))+(((-1.0)*x6211*x6221)));
evalcond[7]=(((x6210*x6225))+(((-0.12)*x6220))+(((-1.0)*py))+(((-0.12)*x6216))+(((0.613)*x6222))+(((0.174)*x6208))+(((-1.0)*x6211*x6225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6229=((1.0)*cj5);
IkReal x6230=((1.0)*sj5);
CheckValue<IkReal> x6231 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6230))+(((-1.0)*r11*x6229)))),IkReal(((((-1.0)*r01*x6229))+(((-1.0)*r00*x6230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6231.valid){
continue;
}
CheckValue<IkReal> x6232=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6232.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6231.value)+(((1.5707963267949)*(x6232.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6233=IKcos(j0);
IkReal x6234=IKsin(j0);
IkReal x6235=((0.571)*sj1);
IkReal x6236=(cj5*r01);
IkReal x6237=((1.0)*cj1);
IkReal x6238=((1.0)*sj1);
IkReal x6239=(cj5*r11);
IkReal x6240=(r00*sj5);
IkReal x6241=(r10*sj5);
IkReal x6242=(sj2*x6233);
IkReal x6243=(sj2*x6234);
IkReal x6244=(cj2*x6233);
IkReal x6245=(cj1*x6234);
evalcond[0]=((((-1.0)*x6238*x6244))+x6240+x6236+(((-1.0)*x6237*x6242)));
evalcond[1]=((((-1.0)*cj2*x6234*x6238))+x6241+x6239+(((-1.0)*x6237*x6243)));
evalcond[2]=((((-0.174)*x6234))+(((0.571)*cj1*x6244))+(((-0.12)*x6240))+(((-1.0)*px))+(((-0.12)*x6236))+(((-1.0)*x6235*x6242))+(((0.613)*cj1*x6233)));
evalcond[3]=((((0.613)*x6245))+(((0.571)*cj2*x6245))+(((-0.12)*x6241))+(((0.174)*x6233))+(((-1.0)*py))+(((-0.12)*x6239))+(((-1.0)*x6235*x6243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6246=((1.0)*cj5);
IkReal x6247=((((-1.0)*r01*x6246))+(((-1.0)*r00*sj5)));
j4eval[0]=x6247;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6246)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6248=((1.0)*cj5);
IkReal x6249=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6248)));
j4eval[0]=x6249;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x6248))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6250=((1.0)*sj0);
IkReal x6251=((1.0)*cj0);
IkReal x6252=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6252;
j4eval[1]=((IKabs(((((-1.0)*r02*x6251))+(((-1.0)*r12*x6250)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6250))+(((-1.0)*r01*sj5*x6251))))));
j4eval[2]=IKsign(x6252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6253=((-1.0)*r20);
IkReal x6255 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6255)==0){
continue;
}
IkReal x6254=pow(x6255,-0.5);
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6253),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6256.value));
IkReal gconst115=(r21*x6254);
IkReal gconst116=(x6253*x6254);
CheckValue<IkReal> x6257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6257.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6257.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6258=((-1.0)*r20);
IkReal x6259=x6254;
CheckValue<IkReal> x6261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6258),IKFAST_ATAN2_MAGTHRESH);
if(!x6261.valid){
continue;
}
IkReal x6260=((-1.0)*(x6261.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6260;
IkReal gconst114=x6260;
IkReal gconst115=(r21*x6259);
IkReal gconst116=(x6258*x6259);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6262=((-1.0)*r20);
IkReal x6263=x6254;
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6262),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
IkReal x6264=((-1.0)*(x6265.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6264;
IkReal gconst114=x6264;
IkReal gconst115=(r21*x6263);
IkReal gconst116=(x6262*x6263);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6266=((-1.0)*r20);
IkReal x6267=x6254;
CheckValue<IkReal> x6269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6266),IKFAST_ATAN2_MAGTHRESH);
if(!x6269.valid){
continue;
}
IkReal x6268=((-1.0)*(x6269.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6268;
IkReal gconst114=x6268;
IkReal gconst115=(r21*x6267);
IkReal gconst116=(x6266*x6267);
IkReal x6270=((1.0)*(r22*r22));
CheckValue<IkReal> x6274=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6270))),-1);
if(!x6274.valid){
continue;
}
IkReal x6271=x6274.value;
IkReal x6272=((1.0)*x6271);
IkReal x6273=((((-1.0)*x6272*(r21*r21*r21*r21)))+(((-1.0)*x6272*(r20*r20*r20*r20)))+(((-2.0)*x6271*(r20*r20)*(r21*r21)))+(((-1.0)*x6270)));
j4eval[0]=x6273;
j4eval[1]=IKsign(x6273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6275=(cj2*sj1);
IkReal x6276=(gconst115*r21);
IkReal x6277=(cj1*sj2);
IkReal x6278=((1.0)*gconst116*r20);
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal((((r22*x6275))+((r22*x6277)))),IkReal(((((-1.0)*x6275*x6278))+(((-1.0)*x6277*x6278))+((x6276*x6277))+((x6275*x6276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
CheckValue<IkReal> x6280=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6276*x6276)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6276))+(((-1.0)*gconst116*r20*x6278)))),-1);
if(!x6280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6279.value)+(((1.5707963267949)*(x6280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6281=IKsin(j4);
IkReal x6282=IKcos(j4);
IkReal x6283=(sj1*sj2);
IkReal x6284=((1.0)*x6282);
IkReal x6285=((1.0)*cj1*cj2);
IkReal x6286=(gconst115*x6281);
IkReal x6287=(gconst115*x6282);
IkReal x6288=((1.0)*gconst116*x6281);
evalcond[0]=((((-1.0)*r20*x6288))+(((-1.0)*r22*x6284))+((r21*x6286)));
evalcond[1]=(cj0+(((-1.0)*r10*x6288))+((r11*x6286))+(((-1.0)*r12*x6284)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6284))+(((-1.0)*r00*x6288))+((r01*x6286)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6284))+((r22*x6281))+((cj1*sj2))+((r21*x6287)));
evalcond[4]=((((-1.0)*gconst116*r00*x6284))+((cj0*x6283))+(((-1.0)*cj0*x6285))+((r02*x6281))+((r01*x6287)));
evalcond[5]=(((r12*x6281))+(((-1.0)*gconst116*r10*x6284))+((r11*x6287))+((sj0*x6283))+(((-1.0)*sj0*x6285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6289=((1.0)*gconst116);
CheckValue<IkReal> x6290 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6289))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6290.valid){
continue;
}
CheckValue<IkReal> x6291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6289)))),-1);
if(!x6291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6290.value)+(((1.5707963267949)*(x6291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6292=IKsin(j4);
IkReal x6293=IKcos(j4);
IkReal x6294=(sj1*sj2);
IkReal x6295=((1.0)*x6293);
IkReal x6296=((1.0)*cj1*cj2);
IkReal x6297=(gconst115*x6292);
IkReal x6298=(gconst115*x6293);
IkReal x6299=((1.0)*gconst116*x6292);
evalcond[0]=((((-1.0)*r20*x6299))+(((-1.0)*r22*x6295))+((r21*x6297)));
evalcond[1]=(cj0+((r11*x6297))+(((-1.0)*r10*x6299))+(((-1.0)*r12*x6295)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6299))+((r01*x6297))+(((-1.0)*r02*x6295)));
evalcond[3]=(((cj2*sj1))+((r22*x6292))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6295))+((r21*x6298)));
evalcond[4]=(((r01*x6298))+(((-1.0)*gconst116*r00*x6295))+((cj0*x6294))+((r02*x6292))+(((-1.0)*cj0*x6296)));
evalcond[5]=(((r11*x6298))+((r12*x6292))+(((-1.0)*gconst116*r10*x6295))+((sj0*x6294))+(((-1.0)*sj0*x6296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6300=((1.0)*gconst116);
CheckValue<IkReal> x6301 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6300)))),-1);
if(!x6302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6301.value)+(((1.5707963267949)*(x6302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j4);
IkReal x6304=IKcos(j4);
IkReal x6305=(sj1*sj2);
IkReal x6306=((1.0)*x6304);
IkReal x6307=((1.0)*cj1*cj2);
IkReal x6308=(gconst115*x6303);
IkReal x6309=(gconst115*x6304);
IkReal x6310=((1.0)*gconst116*x6303);
evalcond[0]=(((r21*x6308))+(((-1.0)*r20*x6310))+(((-1.0)*r22*x6306)));
evalcond[1]=(cj0+(((-1.0)*r12*x6306))+(((-1.0)*r10*x6310))+((r11*x6308)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6306))+((r01*x6308))+(((-1.0)*r00*x6310)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6303))+((r21*x6309))+(((-1.0)*gconst116*r20*x6306)));
evalcond[4]=(((r01*x6309))+((r02*x6303))+((cj0*x6305))+(((-1.0)*gconst116*r00*x6306))+(((-1.0)*cj0*x6307)));
evalcond[5]=(((r11*x6309))+(((-1.0)*sj0*x6307))+((r12*x6303))+(((-1.0)*gconst116*r10*x6306))+((sj0*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6311=((-1.0)*r21);
IkReal x6313 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6313)==0){
continue;
}
IkReal x6312=pow(x6313,-0.5);
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal(x6311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6314.value))));
IkReal gconst118=(x6311*x6312);
IkReal gconst119=((1.0)*r20*x6312);
CheckValue<IkReal> x6315 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6315.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6315.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6316=((-1.0)*r21);
CheckValue<IkReal> x6319 = IKatan2WithCheck(IkReal(x6316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6319.valid){
continue;
}
IkReal x6317=((1.0)*(x6319.value));
IkReal x6318=x6312;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6317)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6317)));
IkReal gconst118=(x6316*x6318);
IkReal gconst119=((1.0)*r20*x6318);
IkReal x6320=r22*r22;
IkReal x6321=((1.0)*x6320);
CheckValue<IkReal> x6325=IKPowWithIntegerCheck(((-1.0)+x6320),-1);
if(!x6325.valid){
continue;
}
IkReal x6322=x6325.value;
if((((1.0)+(((-1.0)*x6321)))) < -0.00001)
continue;
IkReal x6323=IKsqrt(((1.0)+(((-1.0)*x6321))));
IkReal x6324=(cj0*x6322*x6323);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6324+(((-1.0)*x6321*x6324))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6326=((-1.0)*r21);
CheckValue<IkReal> x6329 = IKatan2WithCheck(IkReal(x6326),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6329.valid){
continue;
}
IkReal x6327=((1.0)*(x6329.value));
IkReal x6328=x6312;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6327)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6327)));
IkReal gconst118=(x6326*x6328);
IkReal gconst119=((1.0)*r20*x6328);
IkReal x6330=r22*r22;
IkReal x6331=((1.0)*x6330);
CheckValue<IkReal> x6335=IKPowWithIntegerCheck(((-1.0)+x6330),-1);
if(!x6335.valid){
continue;
}
IkReal x6332=x6335.value;
if((((1.0)+(((-1.0)*x6331)))) < -0.00001)
continue;
IkReal x6333=IKsqrt(((1.0)+(((-1.0)*x6331))));
IkReal x6334=(sj0*x6332*x6333);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6334+(((-1.0)*x6331*x6334))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6336=((-1.0)*r21);
CheckValue<IkReal> x6339 = IKatan2WithCheck(IkReal(x6336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6339.valid){
continue;
}
IkReal x6337=((1.0)*(x6339.value));
IkReal x6338=x6312;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6337)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6337)));
IkReal gconst118=(x6336*x6338);
IkReal gconst119=((1.0)*r20*x6338);
IkReal x6340=r22*r22;
IkReal x6341=(r12*sj0);
IkReal x6342=(cj0*r02);
CheckValue<IkReal> x6346=IKPowWithIntegerCheck(((-1.0)+x6340),-1);
if(!x6346.valid){
continue;
}
IkReal x6343=x6346.value;
if((((1.0)+(((-1.0)*x6340)))) < -0.00001)
continue;
IkReal x6344=IKsqrt(((1.0)+(((-1.0)*x6340))));
IkReal x6345=(r22*x6343*x6344);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6341*x6345))+((x6342*x6345)))))+(IKabs(((((-1.0)*x6342))+(((-1.0)*x6341))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6347=((1.0)*sj0);
IkReal x6348=((1.0)*gconst118);
CheckValue<IkReal> x6349=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6348)))),-1);
if(!x6349.valid){
continue;
}
CheckValue<IkReal> x6350 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6347)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6347))+(((-1.0)*cj0*r01*x6348))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6349.value)))+(x6350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6351=IKsin(j4);
IkReal x6352=IKcos(j4);
IkReal x6353=(gconst118*r01);
IkReal x6354=(sj1*sj2);
IkReal x6355=(gconst119*r20);
IkReal x6356=(gconst119*r10);
IkReal x6357=(gconst119*r00);
IkReal x6358=(gconst118*r21);
IkReal x6359=(gconst118*r11);
IkReal x6360=((1.0)*x6352);
IkReal x6361=((1.0)*cj1*cj2);
IkReal x6362=((1.0)*x6351);
evalcond[0]=((((-1.0)*r22*x6360))+(((-1.0)*x6355*x6362))+((x6351*x6358)));
evalcond[1]=(cj0+(((-1.0)*x6356*x6362))+(((-1.0)*r12*x6360))+((x6351*x6359)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6360))+(((-1.0)*x6357*x6362))+((x6351*x6353)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6351))+((x6352*x6358))+(((-1.0)*x6355*x6360)));
evalcond[4]=((((-1.0)*x6357*x6360))+((x6352*x6353))+((r02*x6351))+(((-1.0)*cj0*x6361))+((cj0*x6354)));
evalcond[5]=((((-1.0)*sj0*x6361))+((r12*x6351))+((sj0*x6354))+(((-1.0)*x6356*x6360))+((x6352*x6359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6363=((1.0)*gconst119);
CheckValue<IkReal> x6364 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6364.valid){
continue;
}
CheckValue<IkReal> x6365=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6363)))),-1);
if(!x6365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6364.value)+(((1.5707963267949)*(x6365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6366=IKsin(j4);
IkReal x6367=IKcos(j4);
IkReal x6368=(gconst118*r01);
IkReal x6369=(sj1*sj2);
IkReal x6370=(gconst119*r20);
IkReal x6371=(gconst119*r10);
IkReal x6372=(gconst119*r00);
IkReal x6373=(gconst118*r21);
IkReal x6374=(gconst118*r11);
IkReal x6375=((1.0)*x6367);
IkReal x6376=((1.0)*cj1*cj2);
IkReal x6377=((1.0)*x6366);
evalcond[0]=(((x6366*x6373))+(((-1.0)*x6370*x6377))+(((-1.0)*r22*x6375)));
evalcond[1]=(cj0+((x6366*x6374))+(((-1.0)*x6371*x6377))+(((-1.0)*r12*x6375)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6372*x6377))+(((-1.0)*r02*x6375))+((x6366*x6368)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6367*x6373))+(((-1.0)*x6370*x6375))+((r22*x6366)));
evalcond[4]=((((-1.0)*x6372*x6375))+((x6367*x6368))+((cj0*x6369))+((r02*x6366))+(((-1.0)*cj0*x6376)));
evalcond[5]=((((-1.0)*sj0*x6376))+((r12*x6366))+((x6367*x6374))+((sj0*x6369))+(((-1.0)*x6371*x6375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6378=((1.0)*gconst119);
CheckValue<IkReal> x6379 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6379.valid){
continue;
}
CheckValue<IkReal> x6380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6378))+(((-1.0)*gconst118*r00)))),-1);
if(!x6380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6379.value)+(((1.5707963267949)*(x6380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6381=IKsin(j4);
IkReal x6382=IKcos(j4);
IkReal x6383=(gconst118*r01);
IkReal x6384=(sj1*sj2);
IkReal x6385=(gconst119*r20);
IkReal x6386=(gconst119*r10);
IkReal x6387=(gconst119*r00);
IkReal x6388=(gconst118*r21);
IkReal x6389=(gconst118*r11);
IkReal x6390=((1.0)*x6382);
IkReal x6391=((1.0)*cj1*cj2);
IkReal x6392=((1.0)*x6381);
evalcond[0]=(((x6381*x6388))+(((-1.0)*r22*x6390))+(((-1.0)*x6385*x6392)));
evalcond[1]=(cj0+((x6381*x6389))+(((-1.0)*x6386*x6392))+(((-1.0)*r12*x6390)));
evalcond[2]=((((-1.0)*sj0))+((x6381*x6383))+(((-1.0)*x6387*x6392))+(((-1.0)*r02*x6390)));
evalcond[3]=(((cj2*sj1))+((r22*x6381))+((cj1*sj2))+(((-1.0)*x6385*x6390))+((x6382*x6388)));
evalcond[4]=(((cj0*x6384))+(((-1.0)*x6387*x6390))+(((-1.0)*cj0*x6391))+((r02*x6381))+((x6382*x6383)));
evalcond[5]=((((-1.0)*sj0*x6391))+((sj0*x6384))+(((-1.0)*x6386*x6390))+((r12*x6381))+((x6382*x6389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6393=((-1.0)*r10);
IkReal x6395 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6395)==0){
continue;
}
IkReal x6394=pow(x6395,-0.5);
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6393),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6396.value));
IkReal gconst121=(r11*x6394);
IkReal gconst122=(x6393*x6394);
CheckValue<IkReal> x6397 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6397.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6397.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6398=((-1.0)*r10);
IkReal x6399=x6394;
CheckValue<IkReal> x6401 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6398),IKFAST_ATAN2_MAGTHRESH);
if(!x6401.valid){
continue;
}
IkReal x6400=((-1.0)*(x6401.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6400;
IkReal gconst120=x6400;
IkReal gconst121=(r11*x6399);
IkReal gconst122=(x6398*x6399);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6402=((1.0)*sj0);
IkReal x6403=((1.0)*gconst121);
CheckValue<IkReal> x6404 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6402)))),IkReal(((((-1.0)*cj0*r01*x6403))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6402))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6404.valid){
continue;
}
CheckValue<IkReal> x6405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6403))+(((-1.0)*gconst122*r21)))),-1);
if(!x6405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6404.value)+(((1.5707963267949)*(x6405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6406=IKsin(j4);
IkReal x6407=IKcos(j4);
IkReal x6408=(gconst121*r11);
IkReal x6409=(sj1*sj2);
IkReal x6410=(gconst122*r00);
IkReal x6411=(gconst122*r10);
IkReal x6412=(gconst122*r20);
IkReal x6413=((1.0)*x6407);
IkReal x6414=((1.0)*cj1*cj2);
IkReal x6415=((1.0)*x6406);
IkReal x6416=(gconst121*x6406);
IkReal x6417=(gconst121*x6407);
evalcond[0]=(((r21*x6416))+(((-1.0)*x6412*x6415))+(((-1.0)*r22*x6413)));
evalcond[1]=(cj0+((x6406*x6408))+(((-1.0)*x6411*x6415))+(((-1.0)*r12*x6413)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6416))+(((-1.0)*r02*x6413))+(((-1.0)*x6410*x6415)));
evalcond[3]=(((cj2*sj1))+((r21*x6417))+(((-1.0)*x6412*x6413))+((cj1*sj2))+((r22*x6406)));
evalcond[4]=(((r02*x6406))+((r01*x6417))+((cj0*x6409))+(((-1.0)*cj0*x6414))+(((-1.0)*x6410*x6413)));
evalcond[5]=(((sj0*x6409))+((r12*x6406))+(((-1.0)*sj0*x6414))+(((-1.0)*x6411*x6413))+((x6407*x6408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6418=((1.0)*gconst122);
CheckValue<IkReal> x6419 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6418))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6419.valid){
continue;
}
CheckValue<IkReal> x6420=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6418)))),-1);
if(!x6420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6419.value)+(((1.5707963267949)*(x6420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6421=IKsin(j4);
IkReal x6422=IKcos(j4);
IkReal x6423=(gconst121*r11);
IkReal x6424=(sj1*sj2);
IkReal x6425=(gconst122*r00);
IkReal x6426=(gconst122*r10);
IkReal x6427=(gconst122*r20);
IkReal x6428=((1.0)*x6422);
IkReal x6429=((1.0)*cj1*cj2);
IkReal x6430=((1.0)*x6421);
IkReal x6431=(gconst121*x6421);
IkReal x6432=(gconst121*x6422);
evalcond[0]=((((-1.0)*r22*x6428))+(((-1.0)*x6427*x6430))+((r21*x6431)));
evalcond[1]=(cj0+(((-1.0)*x6426*x6430))+((x6421*x6423))+(((-1.0)*r12*x6428)));
evalcond[2]=(((r01*x6431))+(((-1.0)*sj0))+(((-1.0)*x6425*x6430))+(((-1.0)*r02*x6428)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6427*x6428))+((r21*x6432))+((r22*x6421)));
evalcond[4]=(((r01*x6432))+(((-1.0)*cj0*x6429))+((r02*x6421))+(((-1.0)*x6425*x6428))+((cj0*x6424)));
evalcond[5]=(((r12*x6421))+(((-1.0)*sj0*x6429))+(((-1.0)*x6426*x6428))+((x6422*x6423))+((sj0*x6424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6433=((-1.0)*r11);
IkReal x6435 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6435)==0){
continue;
}
IkReal x6434=pow(x6435,-0.5);
CheckValue<IkReal> x6436 = IKatan2WithCheck(IkReal(x6433),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6436.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6436.value))));
IkReal gconst124=(x6433*x6434);
IkReal gconst125=((1.0)*r10*x6434);
CheckValue<IkReal> x6437 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6437.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6437.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6438=((-1.0)*r11);
CheckValue<IkReal> x6441 = IKatan2WithCheck(IkReal(x6438),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6441.valid){
continue;
}
IkReal x6439=((1.0)*(x6441.value));
IkReal x6440=x6434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6439)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6439)));
IkReal gconst124=(x6438*x6440);
IkReal gconst125=((1.0)*r10*x6440);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6442=((-1.0)*r11);
CheckValue<IkReal> x6445 = IKatan2WithCheck(IkReal(x6442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6445.valid){
continue;
}
IkReal x6443=((1.0)*(x6445.value));
IkReal x6444=x6434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6443)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6443)));
IkReal gconst124=(x6442*x6444);
IkReal gconst125=((1.0)*r10*x6444);
IkReal x6446=r12*r12;
IkReal x6447=((1.0)*sj0);
IkReal x6448=(cj0*r02);
IkReal x6449=x6434;
j4eval[0]=((IKabs((((r12*x6448*x6449))+(((-1.0)*x6447*x6449))+((sj0*x6446*x6449)))))+(IKabs(((((-1.0)*x6448))+(((-1.0)*r12*x6447))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6450=((-1.0)*r11);
CheckValue<IkReal> x6453 = IKatan2WithCheck(IkReal(x6450),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6453.valid){
continue;
}
IkReal x6451=((1.0)*(x6453.value));
IkReal x6452=x6434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6451)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6451)));
IkReal gconst124=(x6450*x6452);
IkReal gconst125=((1.0)*r10*x6452);
IkReal x6454=r12*r12;
IkReal x6455=((1.0)+(((-1.0)*x6454)));
IkReal x6456=(cj2*r22*sj1);
IkReal x6457=(cj1*r22*sj2);
CheckValue<IkReal> x6464=IKPowWithIntegerCheck(x6455,-1);
if(!x6464.valid){
continue;
}
IkReal x6458=x6464.value;
CheckValue<IkReal> x6465=IKPowWithIntegerCheck(((-1.0)+x6454),-1);
if(!x6465.valid){
continue;
}
IkReal x6459=x6465.value;
IkReal x6460=((1.0)*x6458);
if((x6455) < -0.00001)
continue;
IkReal x6461=IKsqrt(x6455);
IkReal x6462=((1.0)*r12*x6459*x6461);
IkReal x6463=((((-2.0)*r10*r11*r20*r21*x6458))+(((-1.0)*(r22*r22)))+(((-1.0)*x6460*(r10*r10)*(r20*r20)))+(((-1.0)*x6460*(r11*r11)*(r21*r21))));
j4eval[0]=x6463;
j4eval[1]=IKsign(x6463);
j4eval[2]=((IKabs(((((-1.0)*x6457*x6462))+(((-1.0)*x6456*x6462)))))+(IKabs((x6457+x6456))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6466=(gconst124*r21);
IkReal x6467=(cj1*sj2);
IkReal x6468=(cj2*sj1);
IkReal x6469=(gconst125*r20);
CheckValue<IkReal> x6470=IKPowWithIntegerCheck(IKsign(((((2.0)*x6466*x6469))+(((-1.0)*(x6469*x6469)))+(((-1.0)*(x6466*x6466)))+(((-1.0)*(r22*r22))))),-1);
if(!x6470.valid){
continue;
}
CheckValue<IkReal> x6471 = IKatan2WithCheck(IkReal((((r22*x6467))+((r22*x6468)))),IkReal(((((-1.0)*x6468*x6469))+(((-1.0)*x6467*x6469))+((x6466*x6467))+((x6466*x6468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6470.value)))+(x6471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6472=IKsin(j4);
IkReal x6473=IKcos(j4);
IkReal x6474=(sj1*sj2);
IkReal x6475=(gconst125*r20);
IkReal x6476=(gconst124*r01);
IkReal x6477=(gconst125*r00);
IkReal x6478=(gconst125*r10);
IkReal x6479=((1.0)*x6473);
IkReal x6480=((1.0)*cj1*cj2);
IkReal x6481=((1.0)*x6472);
IkReal x6482=(gconst124*x6472);
IkReal x6483=(gconst124*x6473);
evalcond[0]=(((r21*x6482))+(((-1.0)*r22*x6479))+(((-1.0)*x6475*x6481)));
evalcond[1]=((((-1.0)*r12*x6479))+(((-1.0)*x6478*x6481))+((r11*x6482))+cj0);
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6477*x6481))+((x6472*x6476))+(((-1.0)*r02*x6479)));
evalcond[3]=(((r22*x6472))+((r21*x6483))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6475*x6479)));
evalcond[4]=(((x6473*x6476))+((r02*x6472))+(((-1.0)*cj0*x6480))+(((-1.0)*x6477*x6479))+((cj0*x6474)));
evalcond[5]=(((r11*x6483))+(((-1.0)*x6478*x6479))+(((-1.0)*sj0*x6480))+((r12*x6472))+((sj0*x6474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6484=((1.0)*sj0);
IkReal x6485=((1.0)*cj0);
CheckValue<IkReal> x6486 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6484))+(((-1.0)*r02*x6485)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6484))+(((-1.0)*gconst124*r01*x6485))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6486.valid){
continue;
}
CheckValue<IkReal> x6487=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6486.value)+(((1.5707963267949)*(x6487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6488=IKsin(j4);
IkReal x6489=IKcos(j4);
IkReal x6490=(sj1*sj2);
IkReal x6491=(gconst125*r20);
IkReal x6492=(gconst124*r01);
IkReal x6493=(gconst125*r00);
IkReal x6494=(gconst125*r10);
IkReal x6495=((1.0)*x6489);
IkReal x6496=((1.0)*cj1*cj2);
IkReal x6497=((1.0)*x6488);
IkReal x6498=(gconst124*x6488);
IkReal x6499=(gconst124*x6489);
evalcond[0]=((((-1.0)*r22*x6495))+(((-1.0)*x6491*x6497))+((r21*x6498)));
evalcond[1]=(cj0+((r11*x6498))+(((-1.0)*r12*x6495))+(((-1.0)*x6494*x6497)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6495))+(((-1.0)*x6493*x6497))+((x6488*x6492)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6491*x6495))+((r22*x6488))+((r21*x6499)));
evalcond[4]=(((cj0*x6490))+((r02*x6488))+((x6489*x6492))+(((-1.0)*cj0*x6496))+(((-1.0)*x6493*x6495)));
evalcond[5]=(((r11*x6499))+(((-1.0)*sj0*x6496))+((r12*x6488))+(((-1.0)*x6494*x6495))+((sj0*x6490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6500=((1.0)*gconst125);
CheckValue<IkReal> x6501=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6500)))),-1);
if(!x6501.valid){
continue;
}
CheckValue<IkReal> x6502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6500))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6501.value)))+(x6502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6503=IKsin(j4);
IkReal x6504=IKcos(j4);
IkReal x6505=(sj1*sj2);
IkReal x6506=(gconst125*r20);
IkReal x6507=(gconst124*r01);
IkReal x6508=(gconst125*r00);
IkReal x6509=(gconst125*r10);
IkReal x6510=((1.0)*x6504);
IkReal x6511=((1.0)*cj1*cj2);
IkReal x6512=((1.0)*x6503);
IkReal x6513=(gconst124*x6503);
IkReal x6514=(gconst124*x6504);
evalcond[0]=((((-1.0)*r22*x6510))+(((-1.0)*x6506*x6512))+((r21*x6513)));
evalcond[1]=(cj0+((r11*x6513))+(((-1.0)*r12*x6510))+(((-1.0)*x6509*x6512)));
evalcond[2]=((((-1.0)*r02*x6510))+(((-1.0)*sj0))+((x6503*x6507))+(((-1.0)*x6508*x6512)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6506*x6510))+((cj1*sj2))+((r22*x6503))+((r21*x6514)));
evalcond[4]=((((-1.0)*cj0*x6511))+((r02*x6503))+((x6504*x6507))+((cj0*x6505))+(((-1.0)*x6508*x6510)));
evalcond[5]=(((r12*x6503))+((sj0*x6505))+((r11*x6514))+(((-1.0)*x6509*x6510))+(((-1.0)*sj0*x6511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6515=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6515;
j4eval[1]=IKsign(x6515);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6516=((1.0)*cj5);
IkReal x6517=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6516)));
j4eval[0]=x6517;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6516))))));
j4eval[2]=IKsign(x6517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6518=cj5*cj5;
IkReal x6519=r11*r11;
IkReal x6520=(cj5*r10);
IkReal x6521=(r11*sj5);
IkReal x6522=(((x6518*x6519))+(((-1.0)*x6518*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x6520*x6521))+(((-1.0)*x6519)));
j4eval[0]=x6522;
j4eval[1]=IKsign(x6522);
j4eval[2]=((IKabs(r12))+(IKabs((x6521+(((-1.0)*x6520))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6523=cj5*cj5;
IkReal x6524=r11*r11;
IkReal x6525=(cj5*r10);
IkReal x6526=(r11*sj5);
CheckValue<IkReal> x6527=IKPowWithIntegerCheck(IKsign(((((2.0)*x6525*x6526))+(((-1.0)*x6523*(r10*r10)))+(((-1.0)*x6524))+(((-1.0)*(r12*r12)))+((x6523*x6524)))),-1);
if(!x6527.valid){
continue;
}
CheckValue<IkReal> x6528 = IKatan2WithCheck(IkReal((x6526+(((-1.0)*x6525)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6527.value)))+(x6528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6529=IKcos(j4);
IkReal x6530=IKsin(j4);
IkReal x6531=(cj5*r00);
IkReal x6532=(cj5*r10);
IkReal x6533=(r21*sj5);
IkReal x6534=(cj5*r20);
IkReal x6535=((1.0)*x6529);
IkReal x6536=((1.0)*x6530);
IkReal x6537=(sj5*x6530);
IkReal x6538=(sj5*x6529);
evalcond[0]=((((-1.0)*x6532*x6535))+((r11*x6538))+((r12*x6530)));
evalcond[1]=((((-1.0)*x6534*x6536))+(((-1.0)*r22*x6535))+((x6530*x6533)));
evalcond[2]=((((-1.0)*r02*x6535))+((r01*x6537))+(((-1.0)*x6531*x6536)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6535))+(((-1.0)*x6532*x6536))+((r11*x6537)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6534*x6535))+((cj1*sj2))+((r22*x6530))+((x6529*x6533)));
evalcond[5]=(((r02*x6530))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6538))+(((-1.0)*x6531*x6535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6539=((1.0)*cj5);
CheckValue<IkReal> x6540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6539))+(((-1.0)*r00*sj5)))),-1);
if(!x6540.valid){
continue;
}
CheckValue<IkReal> x6541 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6540.value)))+(x6541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6542=IKcos(j4);
IkReal x6543=IKsin(j4);
IkReal x6544=(cj5*r00);
IkReal x6545=(cj5*r10);
IkReal x6546=(r21*sj5);
IkReal x6547=(cj5*r20);
IkReal x6548=((1.0)*x6542);
IkReal x6549=((1.0)*x6543);
IkReal x6550=(sj5*x6543);
IkReal x6551=(sj5*x6542);
evalcond[0]=((((-1.0)*x6545*x6548))+((r11*x6551))+((r12*x6543)));
evalcond[1]=(((x6543*x6546))+(((-1.0)*r22*x6548))+(((-1.0)*x6547*x6549)));
evalcond[2]=((((-1.0)*r02*x6548))+((r01*x6550))+(((-1.0)*x6544*x6549)));
evalcond[3]=((1.0)+(((-1.0)*x6545*x6549))+(((-1.0)*r12*x6548))+((r11*x6550)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6542*x6546))+((r22*x6543))+(((-1.0)*x6547*x6548)));
evalcond[5]=(((r02*x6543))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6551))+(((-1.0)*x6544*x6548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6552=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6552.valid){
continue;
}
CheckValue<IkReal> x6553 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6552.value)))+(x6553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6554=IKcos(j4);
IkReal x6555=IKsin(j4);
IkReal x6556=(cj5*r00);
IkReal x6557=(cj5*r10);
IkReal x6558=(r21*sj5);
IkReal x6559=(cj5*r20);
IkReal x6560=((1.0)*x6554);
IkReal x6561=((1.0)*x6555);
IkReal x6562=(sj5*x6555);
IkReal x6563=(sj5*x6554);
evalcond[0]=(((r11*x6563))+(((-1.0)*x6557*x6560))+((r12*x6555)));
evalcond[1]=((((-1.0)*r22*x6560))+(((-1.0)*x6559*x6561))+((x6555*x6558)));
evalcond[2]=((((-1.0)*x6556*x6561))+(((-1.0)*r02*x6560))+((r01*x6562)));
evalcond[3]=((1.0)+((r11*x6562))+(((-1.0)*x6557*x6561))+(((-1.0)*r12*x6560)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6555))+((x6554*x6558))+(((-1.0)*x6559*x6560)));
evalcond[5]=(((r02*x6555))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6556*x6560))+((r01*x6563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6564=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6564;
j4eval[1]=IKsign(x6564);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6565=((1.0)*cj5);
IkReal x6566=((((-1.0)*r21*x6565))+(((-1.0)*r20*sj5)));
j4eval[0]=x6566;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6565))))));
j4eval[2]=IKsign(x6566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6567=cj5*cj5;
IkReal x6568=r11*r11;
IkReal x6569=(r11*sj5);
IkReal x6570=(cj5*r10);
IkReal x6571=(((x6567*(r10*r10)))+(r12*r12)+(((-1.0)*x6567*x6568))+x6568+(((-2.0)*x6569*x6570)));
j4eval[0]=x6571;
j4eval[1]=IKsign(x6571);
j4eval[2]=((IKabs(r12))+(IKabs((x6569+(((-1.0)*x6570))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6572=cj5*cj5;
IkReal x6573=r11*r11;
IkReal x6574=(cj5*r10);
IkReal x6575=(r11*sj5);
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal((x6575+(((-1.0)*x6574)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
CheckValue<IkReal> x6577=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6572*x6573))+(((-2.0)*x6574*x6575))+((x6572*(r10*r10)))+x6573)),-1);
if(!x6577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6576.value)+(((1.5707963267949)*(x6577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6578=IKcos(j4);
IkReal x6579=IKsin(j4);
IkReal x6580=(cj5*r00);
IkReal x6581=(cj5*r10);
IkReal x6582=(r21*sj5);
IkReal x6583=(cj5*r20);
IkReal x6584=((1.0)*x6578);
IkReal x6585=((1.0)*x6579);
IkReal x6586=(sj5*x6579);
IkReal x6587=(sj5*x6578);
evalcond[0]=(((r11*x6587))+(((-1.0)*x6581*x6584))+((r12*x6579)));
evalcond[1]=(((x6579*x6582))+(((-1.0)*r22*x6584))+(((-1.0)*x6583*x6585)));
evalcond[2]=((((-1.0)*r02*x6584))+((r01*x6586))+(((-1.0)*x6580*x6585)));
evalcond[3]=((-1.0)+((r11*x6586))+(((-1.0)*x6581*x6585))+(((-1.0)*r12*x6584)));
evalcond[4]=(((r22*x6579))+((cj2*sj1))+((cj1*sj2))+((x6578*x6582))+(((-1.0)*x6583*x6584)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x6587))+((cj1*cj2))+((r02*x6579))+(((-1.0)*x6580*x6584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6588=((1.0)*cj5);
CheckValue<IkReal> x6589=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6588))+(((-1.0)*r20*sj5)))),-1);
if(!x6589.valid){
continue;
}
CheckValue<IkReal> x6590 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6588))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6589.value)))+(x6590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6591=IKcos(j4);
IkReal x6592=IKsin(j4);
IkReal x6593=(cj5*r00);
IkReal x6594=(cj5*r10);
IkReal x6595=(r21*sj5);
IkReal x6596=(cj5*r20);
IkReal x6597=((1.0)*x6591);
IkReal x6598=((1.0)*x6592);
IkReal x6599=(sj5*x6592);
IkReal x6600=(sj5*x6591);
evalcond[0]=(((r12*x6592))+(((-1.0)*x6594*x6597))+((r11*x6600)));
evalcond[1]=((((-1.0)*x6596*x6598))+((x6592*x6595))+(((-1.0)*r22*x6597)));
evalcond[2]=((((-1.0)*r02*x6597))+((r01*x6599))+(((-1.0)*x6593*x6598)));
evalcond[3]=((-1.0)+((r11*x6599))+(((-1.0)*r12*x6597))+(((-1.0)*x6594*x6598)));
evalcond[4]=(((cj2*sj1))+((r22*x6592))+((cj1*sj2))+((x6591*x6595))+(((-1.0)*x6596*x6597)));
evalcond[5]=(((r02*x6592))+((r01*x6600))+(((-1.0)*sj1*sj2))+(((-1.0)*x6593*x6597))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
CheckValue<IkReal> x6602=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6601.value)+(((1.5707963267949)*(x6602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6603=IKcos(j4);
IkReal x6604=IKsin(j4);
IkReal x6605=(cj5*r00);
IkReal x6606=(cj5*r10);
IkReal x6607=(r21*sj5);
IkReal x6608=(cj5*r20);
IkReal x6609=((1.0)*x6603);
IkReal x6610=((1.0)*x6604);
IkReal x6611=(sj5*x6604);
IkReal x6612=(sj5*x6603);
evalcond[0]=(((r11*x6612))+(((-1.0)*x6606*x6609))+((r12*x6604)));
evalcond[1]=((((-1.0)*x6608*x6610))+(((-1.0)*r22*x6609))+((x6604*x6607)));
evalcond[2]=((((-1.0)*x6605*x6610))+((r01*x6611))+(((-1.0)*r02*x6609)));
evalcond[3]=((-1.0)+(((-1.0)*x6606*x6610))+((r11*x6611))+(((-1.0)*r12*x6609)));
evalcond[4]=(((cj2*sj1))+((r22*x6604))+((cj1*sj2))+(((-1.0)*x6608*x6609))+((x6603*x6607)));
evalcond[5]=(((r01*x6612))+(((-1.0)*sj1*sj2))+((r02*x6604))+((cj1*cj2))+(((-1.0)*x6605*x6609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6613=((-1.0)*r00);
IkReal x6615 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6615)==0){
continue;
}
IkReal x6614=pow(x6615,-0.5);
CheckValue<IkReal> x6616 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6613),IKFAST_ATAN2_MAGTHRESH);
if(!x6616.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6616.value));
IkReal gconst127=(r01*x6614);
IkReal gconst128=(x6613*x6614);
CheckValue<IkReal> x6617 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6617.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6617.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6618=((-1.0)*r00);
IkReal x6619=x6614;
CheckValue<IkReal> x6621 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6618),IKFAST_ATAN2_MAGTHRESH);
if(!x6621.valid){
continue;
}
IkReal x6620=((-1.0)*(x6621.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6620;
IkReal gconst126=x6620;
IkReal gconst127=(r01*x6619);
IkReal gconst128=(x6618*x6619);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6622=((1.0)*sj0);
IkReal x6623=((1.0)*gconst127);
CheckValue<IkReal> x6624 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6622))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6622))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6624.valid){
continue;
}
CheckValue<IkReal> x6625=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6623)))),-1);
if(!x6625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6624.value)+(((1.5707963267949)*(x6625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6626=IKsin(j4);
IkReal x6627=IKcos(j4);
IkReal x6628=(gconst127*r01);
IkReal x6629=(sj1*sj2);
IkReal x6630=(gconst128*r10);
IkReal x6631=(gconst128*r00);
IkReal x6632=(gconst128*r20);
IkReal x6633=((1.0)*x6627);
IkReal x6634=((1.0)*cj1*cj2);
IkReal x6635=((1.0)*x6626);
IkReal x6636=(gconst127*x6627);
IkReal x6637=(gconst127*x6626);
evalcond[0]=((((-1.0)*r22*x6633))+((r21*x6637))+(((-1.0)*x6632*x6635)));
evalcond[1]=(cj0+((r11*x6637))+(((-1.0)*x6630*x6635))+(((-1.0)*r12*x6633)));
evalcond[2]=((((-1.0)*sj0))+((x6626*x6628))+(((-1.0)*r02*x6633))+(((-1.0)*x6631*x6635)));
evalcond[3]=(((cj2*sj1))+((r21*x6636))+((cj1*sj2))+((r22*x6626))+(((-1.0)*x6632*x6633)));
evalcond[4]=(((r02*x6626))+((x6627*x6628))+((cj0*x6629))+(((-1.0)*cj0*x6634))+(((-1.0)*x6631*x6633)));
evalcond[5]=(((r12*x6626))+((r11*x6636))+(((-1.0)*x6630*x6633))+((sj0*x6629))+(((-1.0)*sj0*x6634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6638=((1.0)*gconst128);
CheckValue<IkReal> x6639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6638))+(((-1.0)*gconst127*r10)))),-1);
if(!x6639.valid){
continue;
}
CheckValue<IkReal> x6640 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6639.value)))+(x6640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6641=IKsin(j4);
IkReal x6642=IKcos(j4);
IkReal x6643=(gconst127*r01);
IkReal x6644=(sj1*sj2);
IkReal x6645=(gconst128*r10);
IkReal x6646=(gconst128*r00);
IkReal x6647=(gconst128*r20);
IkReal x6648=((1.0)*x6642);
IkReal x6649=((1.0)*cj1*cj2);
IkReal x6650=((1.0)*x6641);
IkReal x6651=(gconst127*x6642);
IkReal x6652=(gconst127*x6641);
evalcond[0]=((((-1.0)*r22*x6648))+(((-1.0)*x6647*x6650))+((r21*x6652)));
evalcond[1]=(cj0+(((-1.0)*x6645*x6650))+((r11*x6652))+(((-1.0)*r12*x6648)));
evalcond[2]=((((-1.0)*sj0))+((x6641*x6643))+(((-1.0)*x6646*x6650))+(((-1.0)*r02*x6648)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6641))+(((-1.0)*x6647*x6648))+((r21*x6651)));
evalcond[4]=((((-1.0)*x6646*x6648))+((x6642*x6643))+(((-1.0)*cj0*x6649))+((cj0*x6644))+((r02*x6641)));
evalcond[5]=(((r11*x6651))+(((-1.0)*x6645*x6648))+((r12*x6641))+(((-1.0)*sj0*x6649))+((sj0*x6644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6653=((-1.0)*r01);
IkReal x6655 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6655)==0){
continue;
}
IkReal x6654=pow(x6655,-0.5);
CheckValue<IkReal> x6656 = IKatan2WithCheck(IkReal(x6653),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6656.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6656.value))));
IkReal gconst130=(x6653*x6654);
IkReal gconst131=((1.0)*r00*x6654);
CheckValue<IkReal> x6657 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6657.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6657.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6658=((-1.0)*r01);
CheckValue<IkReal> x6661 = IKatan2WithCheck(IkReal(x6658),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6661.valid){
continue;
}
IkReal x6659=((1.0)*(x6661.value));
IkReal x6660=x6654;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6659)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6659)));
IkReal gconst130=(x6658*x6660);
IkReal gconst131=((1.0)*r00*x6660);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6662=((-1.0)*r01);
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal(x6662),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
IkReal x6663=((1.0)*(x6665.value));
IkReal x6664=x6654;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6663)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6663)));
IkReal gconst130=(x6662*x6664);
IkReal gconst131=((1.0)*r00*x6664);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6666=((-1.0)*r01);
CheckValue<IkReal> x6669 = IKatan2WithCheck(IkReal(x6666),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6669.valid){
continue;
}
IkReal x6667=((1.0)*(x6669.value));
IkReal x6668=x6654;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6667)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6667)));
IkReal gconst130=(x6666*x6668);
IkReal gconst131=((1.0)*r00*x6668);
IkReal x6670=r02*r02;
IkReal x6671=(r12*sj0);
IkReal x6672=((1.0)*cj0);
IkReal x6673=x6654;
j4eval[0]=((IKabs(((((-1.0)*r02*x6672))+(((-1.0)*x6671)))))+(IKabs((((cj0*x6670*x6673))+(((-1.0)*x6672*x6673))+((r02*x6671*x6673))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6674=((1.0)*sj0);
IkReal x6675=((1.0)*gconst130);
CheckValue<IkReal> x6676 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6674))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x6674))+(((-1.0)*cj0*r01*x6675))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6676.valid){
continue;
}
CheckValue<IkReal> x6677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6675))+(((-1.0)*gconst131*r21)))),-1);
if(!x6677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6676.value)+(((1.5707963267949)*(x6677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6678=IKsin(j4);
IkReal x6679=IKcos(j4);
IkReal x6680=(gconst131*r10);
IkReal x6681=(sj1*sj2);
IkReal x6682=(gconst131*r20);
IkReal x6683=(gconst131*r00);
IkReal x6684=((1.0)*x6679);
IkReal x6685=((1.0)*cj1*cj2);
IkReal x6686=(gconst130*x6678);
IkReal x6687=((1.0)*x6678);
IkReal x6688=(gconst130*x6679);
evalcond[0]=(((r21*x6686))+(((-1.0)*x6682*x6687))+(((-1.0)*r22*x6684)));
evalcond[1]=((((-1.0)*x6680*x6687))+cj0+((r11*x6686))+(((-1.0)*r12*x6684)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6684))+(((-1.0)*x6683*x6687))+((r01*x6686)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6688))+((r22*x6678))+(((-1.0)*x6682*x6684)));
evalcond[4]=(((r02*x6678))+(((-1.0)*x6683*x6684))+(((-1.0)*cj0*x6685))+((r01*x6688))+((cj0*x6681)));
evalcond[5]=(((sj0*x6681))+(((-1.0)*sj0*x6685))+(((-1.0)*x6680*x6684))+((r11*x6688))+((r12*x6678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6689=((1.0)*gconst131);
CheckValue<IkReal> x6690 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6690.valid){
continue;
}
CheckValue<IkReal> x6691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6689)))),-1);
if(!x6691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6690.value)+(((1.5707963267949)*(x6691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6692=IKsin(j4);
IkReal x6693=IKcos(j4);
IkReal x6694=(gconst131*r10);
IkReal x6695=(sj1*sj2);
IkReal x6696=(gconst131*r20);
IkReal x6697=(gconst131*r00);
IkReal x6698=((1.0)*x6693);
IkReal x6699=((1.0)*cj1*cj2);
IkReal x6700=(gconst130*x6692);
IkReal x6701=((1.0)*x6692);
IkReal x6702=(gconst130*x6693);
evalcond[0]=((((-1.0)*x6696*x6701))+((r21*x6700))+(((-1.0)*r22*x6698)));
evalcond[1]=(cj0+(((-1.0)*x6694*x6701))+((r11*x6700))+(((-1.0)*r12*x6698)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6697*x6701))+(((-1.0)*r02*x6698))+((r01*x6700)));
evalcond[3]=(((cj2*sj1))+((r21*x6702))+((r22*x6692))+(((-1.0)*x6696*x6698))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x6697*x6698))+((cj0*x6695))+((r01*x6702))+(((-1.0)*cj0*x6699))+((r02*x6692)));
evalcond[5]=((((-1.0)*x6694*x6698))+((r12*x6692))+(((-1.0)*sj0*x6699))+((sj0*x6695))+((r11*x6702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6703=((1.0)*gconst131);
CheckValue<IkReal> x6704 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6704.valid){
continue;
}
CheckValue<IkReal> x6705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6703))+(((-1.0)*gconst130*r00)))),-1);
if(!x6705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6704.value)+(((1.5707963267949)*(x6705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6706=IKsin(j4);
IkReal x6707=IKcos(j4);
IkReal x6708=(gconst131*r10);
IkReal x6709=(sj1*sj2);
IkReal x6710=(gconst131*r20);
IkReal x6711=(gconst131*r00);
IkReal x6712=((1.0)*x6707);
IkReal x6713=((1.0)*cj1*cj2);
IkReal x6714=(gconst130*x6706);
IkReal x6715=((1.0)*x6706);
IkReal x6716=(gconst130*x6707);
evalcond[0]=((((-1.0)*x6710*x6715))+((r21*x6714))+(((-1.0)*r22*x6712)));
evalcond[1]=(cj0+((r11*x6714))+(((-1.0)*x6708*x6715))+(((-1.0)*r12*x6712)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6711*x6715))+(((-1.0)*r02*x6712))+((r01*x6714)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6710*x6712))+((r21*x6716))+((r22*x6706)));
evalcond[4]=((((-1.0)*x6711*x6712))+(((-1.0)*cj0*x6713))+((cj0*x6709))+((r01*x6716))+((r02*x6706)));
evalcond[5]=((((-1.0)*sj0*x6713))+((r11*x6716))+((sj0*x6709))+(((-1.0)*x6708*x6712))+((r12*x6706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6717=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6717;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6718=((1.0)*cj5);
IkReal x6719=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6718)));
j4eval[0]=x6719;
j4eval[1]=((IKabs(((((-1.0)*r20*x6718))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6720=cj5*cj5;
IkReal x6721=r01*r01;
IkReal x6722=(cj5*r00);
IkReal x6723=(r01*sj5);
IkReal x6724=(((x6720*(r00*r00)))+(((-2.0)*x6722*x6723))+x6721+(((-1.0)*x6720*x6721))+(r02*r02));
j4eval[0]=x6724;
j4eval[1]=IKsign(x6724);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6722))+x6723))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6725=cj5*cj5;
IkReal x6726=r01*r01;
IkReal x6727=(r01*sj5);
IkReal x6728=(cj5*r00);
CheckValue<IkReal> x6729 = IKatan2WithCheck(IkReal(((((-1.0)*x6728))+x6727)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6729.valid){
continue;
}
CheckValue<IkReal> x6730=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6725*x6726))+((x6725*(r00*r00)))+x6726+(((-2.0)*x6727*x6728))+(r02*r02))),-1);
if(!x6730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6729.value)+(((1.5707963267949)*(x6730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6731=IKcos(j4);
IkReal x6732=IKsin(j4);
IkReal x6733=(cj5*r00);
IkReal x6734=(cj5*r10);
IkReal x6735=(r21*sj5);
IkReal x6736=(cj5*r20);
IkReal x6737=((1.0)*x6731);
IkReal x6738=((1.0)*x6732);
IkReal x6739=(sj5*x6732);
IkReal x6740=(sj5*x6731);
evalcond[0]=((((-1.0)*x6733*x6737))+((r01*x6740))+((r02*x6732)));
evalcond[1]=(((x6732*x6735))+(((-1.0)*r22*x6737))+(((-1.0)*x6736*x6738)));
evalcond[2]=((((-1.0)*r12*x6737))+((r11*x6739))+(((-1.0)*x6734*x6738)));
evalcond[3]=((-1.0)+(((-1.0)*x6733*x6738))+(((-1.0)*r02*x6737))+((r01*x6739)));
evalcond[4]=(((r22*x6732))+((cj2*sj1))+((x6731*x6735))+((cj1*sj2))+(((-1.0)*x6736*x6737)));
evalcond[5]=(((r11*x6740))+((r12*x6732))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6734*x6737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6741=((1.0)*cj5);
CheckValue<IkReal> x6742=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6741))+(((-1.0)*r10*sj5)))),-1);
if(!x6742.valid){
continue;
}
CheckValue<IkReal> x6743 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6742.value)))+(x6743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6744=IKcos(j4);
IkReal x6745=IKsin(j4);
IkReal x6746=(cj5*r00);
IkReal x6747=(cj5*r10);
IkReal x6748=(r21*sj5);
IkReal x6749=(cj5*r20);
IkReal x6750=((1.0)*x6744);
IkReal x6751=((1.0)*x6745);
IkReal x6752=(sj5*x6745);
IkReal x6753=(sj5*x6744);
evalcond[0]=(((r02*x6745))+((r01*x6753))+(((-1.0)*x6746*x6750)));
evalcond[1]=(((x6745*x6748))+(((-1.0)*r22*x6750))+(((-1.0)*x6749*x6751)));
evalcond[2]=(((r11*x6752))+(((-1.0)*x6747*x6751))+(((-1.0)*r12*x6750)));
evalcond[3]=((-1.0)+((r01*x6752))+(((-1.0)*x6746*x6751))+(((-1.0)*r02*x6750)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6744*x6748))+(((-1.0)*x6749*x6750))+((r22*x6745)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6753))+((r12*x6745))+(((-1.0)*x6747*x6750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6754=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6754.valid){
continue;
}
CheckValue<IkReal> x6755 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6754.value)))+(x6755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6756=IKcos(j4);
IkReal x6757=IKsin(j4);
IkReal x6758=(cj5*r00);
IkReal x6759=(cj5*r10);
IkReal x6760=(r21*sj5);
IkReal x6761=(cj5*r20);
IkReal x6762=((1.0)*x6756);
IkReal x6763=((1.0)*x6757);
IkReal x6764=(sj5*x6757);
IkReal x6765=(sj5*x6756);
evalcond[0]=(((r01*x6765))+(((-1.0)*x6758*x6762))+((r02*x6757)));
evalcond[1]=(((x6757*x6760))+(((-1.0)*r22*x6762))+(((-1.0)*x6761*x6763)));
evalcond[2]=((((-1.0)*x6759*x6763))+((r11*x6764))+(((-1.0)*r12*x6762)));
evalcond[3]=((-1.0)+((r01*x6764))+(((-1.0)*x6758*x6763))+(((-1.0)*r02*x6762)));
evalcond[4]=(((cj2*sj1))+((r22*x6757))+((x6756*x6760))+((cj1*sj2))+(((-1.0)*x6761*x6762)));
evalcond[5]=((((-1.0)*x6759*x6762))+((r12*x6757))+(((-1.0)*cj1*cj2))+((r11*x6765))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6766=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6766;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6767=((1.0)*cj5);
IkReal x6768=((((-1.0)*r20*sj5))+(((-1.0)*r21*x6767)));
j4eval[0]=x6768;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6767))))));
j4eval[2]=IKsign(x6768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6769=(r01*sj5);
IkReal x6770=(cj1*sj2);
IkReal x6771=(cj2*sj1);
IkReal x6772=((1.0)*r02);
IkReal x6773=((1.0)*cj5*r00);
IkReal x6774=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6774;
j4eval[1]=((IKabs(((((-1.0)*x6770*x6772))+(((-1.0)*x6771*x6772)))))+(IKabs(((((-1.0)*x6770*x6773))+((x6769*x6771))+((x6769*x6770))+(((-1.0)*x6771*x6773))))));
j4eval[2]=IKsign(x6774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6775=(r01*sj5);
IkReal x6776=(cj1*sj2);
IkReal x6777=(cj2*sj1);
IkReal x6778=((1.0)*r02);
IkReal x6779=((1.0)*cj5*r00);
CheckValue<IkReal> x6780 = IKatan2WithCheck(IkReal((((x6775*x6776))+((x6775*x6777))+(((-1.0)*x6777*x6779))+(((-1.0)*x6776*x6779)))),IkReal(((((-1.0)*x6777*x6778))+(((-1.0)*x6776*x6778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6780.valid){
continue;
}
CheckValue<IkReal> x6781=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6780.value)+(((1.5707963267949)*(x6781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6782=IKcos(j4);
IkReal x6783=IKsin(j4);
IkReal x6784=(cj5*r00);
IkReal x6785=(cj5*r10);
IkReal x6786=(r21*sj5);
IkReal x6787=(cj5*r20);
IkReal x6788=((1.0)*x6782);
IkReal x6789=((1.0)*x6783);
IkReal x6790=(sj5*x6783);
IkReal x6791=(sj5*x6782);
evalcond[0]=((((-1.0)*x6784*x6788))+((r01*x6791))+((r02*x6783)));
evalcond[1]=((((-1.0)*x6787*x6789))+(((-1.0)*r22*x6788))+((x6783*x6786)));
evalcond[2]=((((-1.0)*x6785*x6789))+(((-1.0)*r12*x6788))+((r11*x6790)));
evalcond[3]=((1.0)+(((-1.0)*x6784*x6789))+((r01*x6790))+(((-1.0)*r02*x6788)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6787*x6788))+((cj1*sj2))+((r22*x6783))+((x6782*x6786)));
evalcond[5]=((((-1.0)*x6785*x6788))+((r12*x6783))+(((-1.0)*sj1*sj2))+((r11*x6791))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6792=((1.0)*cj5);
CheckValue<IkReal> x6793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6792))+(((-1.0)*r20*sj5)))),-1);
if(!x6793.valid){
continue;
}
CheckValue<IkReal> x6794 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6792))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6793.value)))+(x6794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6795=IKcos(j4);
IkReal x6796=IKsin(j4);
IkReal x6797=(cj5*r00);
IkReal x6798=(cj5*r10);
IkReal x6799=(r21*sj5);
IkReal x6800=(cj5*r20);
IkReal x6801=((1.0)*x6795);
IkReal x6802=((1.0)*x6796);
IkReal x6803=(sj5*x6796);
IkReal x6804=(sj5*x6795);
evalcond[0]=(((r02*x6796))+((r01*x6804))+(((-1.0)*x6797*x6801)));
evalcond[1]=(((x6796*x6799))+(((-1.0)*r22*x6801))+(((-1.0)*x6800*x6802)));
evalcond[2]=((((-1.0)*r12*x6801))+((r11*x6803))+(((-1.0)*x6798*x6802)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6801))+((r01*x6803))+(((-1.0)*x6797*x6802)));
evalcond[4]=(((cj2*sj1))+((r22*x6796))+((cj1*sj2))+((x6795*x6799))+(((-1.0)*x6800*x6801)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6804))+(((-1.0)*x6798*x6801))+((r12*x6796))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6805 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6805.valid){
continue;
}
CheckValue<IkReal> x6806=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6805.value)+(((1.5707963267949)*(x6806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6807=IKcos(j4);
IkReal x6808=IKsin(j4);
IkReal x6809=(cj5*r00);
IkReal x6810=(cj5*r10);
IkReal x6811=(r21*sj5);
IkReal x6812=(cj5*r20);
IkReal x6813=((1.0)*x6807);
IkReal x6814=((1.0)*x6808);
IkReal x6815=(sj5*x6808);
IkReal x6816=(sj5*x6807);
evalcond[0]=((((-1.0)*x6809*x6813))+((r01*x6816))+((r02*x6808)));
evalcond[1]=((((-1.0)*x6812*x6814))+((x6808*x6811))+(((-1.0)*r22*x6813)));
evalcond[2]=(((r11*x6815))+(((-1.0)*x6810*x6814))+(((-1.0)*r12*x6813)));
evalcond[3]=((1.0)+(((-1.0)*x6809*x6814))+(((-1.0)*r02*x6813))+((r01*x6815)));
evalcond[4]=(((cj2*sj1))+((x6807*x6811))+((r22*x6808))+((cj1*sj2))+(((-1.0)*x6812*x6813)));
evalcond[5]=(((r11*x6816))+(((-1.0)*sj1*sj2))+(((-1.0)*x6810*x6813))+((r12*x6808))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6817=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6817);
rxp1_1=(px*r21);
rxp1_2=(r11*x6817);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6818=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6818);
rxp1_1=(px*r21);
rxp1_2=(r11*x6818);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6819=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6819);
rxp1_1=(px*r21);
rxp1_2=(r11*x6819);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6822=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6822.valid){
continue;
}
IkReal x6820=x6822.value;
IkReal x6821=(sj0*x6820);
cj4array[0]=(((cj1*cj2*x6821))+(((-1.0)*sj1*sj2*x6821)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6823=IKsin(j4);
IkReal x6824=IKcos(j4);
IkReal x6825=(r21*sj5);
IkReal x6826=((1.0)*cj5*r20);
evalcond[0]=(r02*x6823);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6824)));
evalcond[2]=((((-1.0)*x6823*x6826))+((x6823*x6825)));
evalcond[3]=(((r11*sj5*x6823))+(((-1.0)*cj5*r10*x6823)));
evalcond[4]=(((cj2*sj1))+((x6824*x6825))+((cj1*sj2))+(((-1.0)*x6824*x6826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6829=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6829.valid){
continue;
}
IkReal x6827=x6829.value;
IkReal x6828=((1.0)*x6827);
cj4array[0]=((((-1.0)*cj2*sj1*x6828))+(((-1.0)*cj1*sj2*x6828)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6830=IKsin(j4);
IkReal x6831=IKcos(j4);
IkReal x6832=((1.0)*sj0);
IkReal x6833=((1.0)*cj5);
IkReal x6834=(sj5*x6830);
evalcond[0]=(r02*x6830);
evalcond[1]=((((-1.0)*r02*x6831))+(((-1.0)*x6832)));
evalcond[2]=(((r21*x6834))+(((-1.0)*r20*x6830*x6833)));
evalcond[3]=((((-1.0)*r10*x6830*x6833))+((r11*x6834)));
evalcond[4]=((((-1.0)*cj1*cj2*x6832))+(((-1.0)*r10*x6831*x6833))+((sj0*sj1*sj2))+((r11*sj5*x6831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6835=IKPowWithIntegerCheck(r02,-1);
if(!x6835.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6835.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6836=IKsin(j4);
IkReal x6837=IKcos(j4);
IkReal x6838=(r21*sj5);
IkReal x6839=((1.0)*cj5);
IkReal x6840=(r11*sj5);
evalcond[0]=(r02*x6836);
evalcond[1]=((((-1.0)*r20*x6836*x6839))+((x6836*x6838)));
evalcond[2]=(((x6836*x6840))+(((-1.0)*r10*x6836*x6839)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6837*x6838))+(((-1.0)*r20*x6837*x6839)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6837*x6840))+(((-1.0)*r10*x6837*x6839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6841=((1.0)*sj0);
IkReal x6842=((1.0)*cj0);
CheckValue<IkReal> x6843 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6841))+(((-1.0)*r02*x6842)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6842))+(((-1.0)*r11*sj5*x6841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6843.valid){
continue;
}
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6843.value)+(((1.5707963267949)*(x6844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6845=IKsin(j4);
IkReal x6846=IKcos(j4);
IkReal x6847=(cj5*r00);
IkReal x6848=(cj5*r10);
IkReal x6849=(r21*sj5);
IkReal x6850=(sj1*sj2);
IkReal x6851=(cj5*r20);
IkReal x6852=((1.0)*x6846);
IkReal x6853=((1.0)*cj1*cj2);
IkReal x6854=((1.0)*x6845);
IkReal x6855=(sj5*x6845);
IkReal x6856=(sj5*x6846);
evalcond[0]=((((-1.0)*r22*x6852))+(((-1.0)*x6851*x6854))+((x6845*x6849)));
evalcond[1]=(cj0+(((-1.0)*r12*x6852))+((r11*x6855))+(((-1.0)*x6848*x6854)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6852))+((r01*x6855))+(((-1.0)*x6847*x6854)));
evalcond[3]=(((cj2*sj1))+((r22*x6845))+((cj1*sj2))+((x6846*x6849))+(((-1.0)*x6851*x6852)));
evalcond[4]=(((r01*x6856))+(((-1.0)*x6847*x6852))+(((-1.0)*cj0*x6853))+((cj0*x6850))+((r02*x6845)));
evalcond[5]=(((sj0*x6850))+((r12*x6845))+((r11*x6856))+(((-1.0)*x6848*x6852))+(((-1.0)*sj0*x6853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6857=((1.0)*cj5);
CheckValue<IkReal> x6858 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6857))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6858.valid){
continue;
}
CheckValue<IkReal> x6859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6857)))),-1);
if(!x6859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6858.value)+(((1.5707963267949)*(x6859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6860=IKsin(j4);
IkReal x6861=IKcos(j4);
IkReal x6862=(cj5*r00);
IkReal x6863=(cj5*r10);
IkReal x6864=(r21*sj5);
IkReal x6865=(sj1*sj2);
IkReal x6866=(cj5*r20);
IkReal x6867=((1.0)*x6861);
IkReal x6868=((1.0)*cj1*cj2);
IkReal x6869=((1.0)*x6860);
IkReal x6870=(sj5*x6860);
IkReal x6871=(sj5*x6861);
evalcond[0]=(((x6860*x6864))+(((-1.0)*r22*x6867))+(((-1.0)*x6866*x6869)));
evalcond[1]=(((r11*x6870))+cj0+(((-1.0)*x6863*x6869))+(((-1.0)*r12*x6867)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6862*x6869))+(((-1.0)*r02*x6867))+((r01*x6870)));
evalcond[3]=(((cj2*sj1))+((r22*x6860))+((cj1*sj2))+((x6861*x6864))+(((-1.0)*x6866*x6867)));
evalcond[4]=(((r02*x6860))+((cj0*x6865))+(((-1.0)*x6862*x6867))+((r01*x6871))+(((-1.0)*cj0*x6868)));
evalcond[5]=(((sj0*x6865))+((r11*x6871))+((r12*x6860))+(((-1.0)*x6863*x6867))+(((-1.0)*sj0*x6868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6872=((1.0)*cj5);
CheckValue<IkReal> x6873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6872))+(((-1.0)*r00*sj5)))),-1);
if(!x6873.valid){
continue;
}
CheckValue<IkReal> x6874 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6872))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6873.value)))+(x6874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6875=IKsin(j4);
IkReal x6876=IKcos(j4);
IkReal x6877=(cj5*r00);
IkReal x6878=(cj5*r10);
IkReal x6879=(r21*sj5);
IkReal x6880=(sj1*sj2);
IkReal x6881=(cj5*r20);
IkReal x6882=((1.0)*x6876);
IkReal x6883=((1.0)*cj1*cj2);
IkReal x6884=((1.0)*x6875);
IkReal x6885=(sj5*x6875);
IkReal x6886=(sj5*x6876);
evalcond[0]=((((-1.0)*x6881*x6884))+((x6875*x6879))+(((-1.0)*r22*x6882)));
evalcond[1]=(((r11*x6885))+cj0+(((-1.0)*x6878*x6884))+(((-1.0)*r12*x6882)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6882))+((r01*x6885))+(((-1.0)*x6877*x6884)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6881*x6882))+((r22*x6875))+((cj1*sj2))+((x6876*x6879)));
evalcond[4]=(((r02*x6875))+((cj0*x6880))+((r01*x6886))+(((-1.0)*x6877*x6882))+(((-1.0)*cj0*x6883)));
evalcond[5]=(((r11*x6886))+((r12*x6875))+((sj0*x6880))+(((-1.0)*sj0*x6883))+(((-1.0)*x6878*x6882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6887=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6887;
j0eval[1]=IKsign(x6887);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6888=cj5*cj5;
IkReal x6889=r21*r21;
IkReal x6890=(cj2*sj1);
IkReal x6891=(cj1*sj2);
IkReal x6892=(r21*sj5);
IkReal x6893=((1.0)*cj5*r20);
IkReal x6894=((r22*r22)+(((-2.0)*cj5*r20*x6892))+x6889+(((-1.0)*x6888*x6889))+((x6888*(r20*r20))));
j4eval[0]=x6894;
j4eval[1]=IKsign(x6894);
j4eval[2]=((IKabs((((x6891*x6892))+(((-1.0)*x6890*x6893))+(((-1.0)*x6891*x6893))+((x6890*x6892)))))+(IKabs((((r22*x6891))+((r22*x6890))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6895=cj1*cj1;
IkReal x6896=(cj2*sj2);
IkReal x6897=(cj2*sj1);
IkReal x6898=(cj1*sj1);
j0eval[0]=((((-1.07355516637478)*cj1*x6897))+(((-2.0)*x6895*x6896))+(((-1.07355516637478)*sj2*x6895))+x6896+x6898+(((-2.0)*cj1*cj2*x6897)));
j0eval[1]=((((-1.0)*x6897))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.121497180427502)*px))+(((0.82673943463312)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.121497180427502)*py))+(((0.82673943463312)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.121497180427502)*px))+(((0.82673943463312)*py))))+IKsqr(((((0.121497180427502)*py))+(((0.82673943463312)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.121497180427502)*px))+(((0.82673943463312)*py))), ((((0.121497180427502)*py))+(((0.82673943463312)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6899=IKcos(j0);
IkReal x6900=IKsin(j0);
evalcond[0]=((((-0.174)*x6900))+(((-1.0)*px))+(((1.184)*x6899)));
evalcond[1]=((((-1.0)*py))+(((1.184)*x6900))+(((0.174)*x6899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6901=((1.0)*cj5);
IkReal x6902=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6901)));
j4eval[0]=x6902;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6901))))));
j4eval[2]=IKsign(x6902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6903=((1.0)*cj5);
IkReal x6904=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6903)));
j4eval[0]=x6904;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6903))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6905=cj5*cj5;
IkReal x6906=((1.0)*sj5);
IkReal x6907=(cj5*r20);
IkReal x6908=(r11*r21);
IkReal x6909=((((-1.0)*x6905*x6908))+((r12*r22))+(((-1.0)*r11*x6906*x6907))+((r10*r20*x6905))+x6908+(((-1.0)*cj5*r10*r21*x6906)));
j4eval[0]=x6909;
j4eval[1]=IKsign(x6909);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6906))+((cj0*x6907))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6910=cj5*cj5;
IkReal x6911=((1.0)*sj5);
IkReal x6912=(cj5*r20);
IkReal x6913=(r11*r21);
CheckValue<IkReal> x6914=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6910*x6913))+((r12*r22))+((r10*r20*x6910))+(((-1.0)*cj5*r10*r21*x6911))+x6913+(((-1.0)*r11*x6911*x6912)))),-1);
if(!x6914.valid){
continue;
}
CheckValue<IkReal> x6915 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6911))+((cj0*x6912)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6914.value)))+(x6915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6916=IKsin(j4);
IkReal x6917=IKcos(j4);
IkReal x6918=((1.0)*sj0);
IkReal x6919=(cj5*r00);
IkReal x6920=(r11*sj5);
IkReal x6921=(cj5*r10);
IkReal x6922=(r21*sj5);
IkReal x6923=(cj5*r20);
IkReal x6924=(r01*sj5);
IkReal x6925=((1.0)*x6917);
IkReal x6926=((1.0)*x6916);
evalcond[0]=((((-1.0)*r22*x6925))+((x6916*x6922))+(((-1.0)*x6923*x6926)));
evalcond[1]=((((-1.0)*r22*x6926))+((x6917*x6923))+(((-1.0)*x6922*x6925)));
evalcond[2]=(cj0+((x6916*x6920))+(((-1.0)*r12*x6925))+(((-1.0)*x6921*x6926)));
evalcond[3]=((((-1.0)*r02*x6925))+(((-1.0)*x6919*x6926))+(((-1.0)*x6918))+((x6916*x6924)));
evalcond[4]=((((-1.0)*r02*x6926))+(((-1.0)*x6924*x6925))+((x6917*x6919))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6918))+((x6917*x6921))+(((-1.0)*x6920*x6925))+(((-1.0)*r12*x6926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6927=((1.0)*cj5);
CheckValue<IkReal> x6928 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6928.valid){
continue;
}
CheckValue<IkReal> x6929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6927)))),-1);
if(!x6929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6928.value)+(((1.5707963267949)*(x6929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6930=IKsin(j4);
IkReal x6931=IKcos(j4);
IkReal x6932=((1.0)*sj0);
IkReal x6933=(cj5*r00);
IkReal x6934=(r11*sj5);
IkReal x6935=(cj5*r10);
IkReal x6936=(r21*sj5);
IkReal x6937=(cj5*r20);
IkReal x6938=(r01*sj5);
IkReal x6939=((1.0)*x6931);
IkReal x6940=((1.0)*x6930);
evalcond[0]=((((-1.0)*r22*x6939))+((x6930*x6936))+(((-1.0)*x6937*x6940)));
evalcond[1]=((((-1.0)*r22*x6940))+((x6931*x6937))+(((-1.0)*x6936*x6939)));
evalcond[2]=(cj0+(((-1.0)*r12*x6939))+((x6930*x6934))+(((-1.0)*x6935*x6940)));
evalcond[3]=((((-1.0)*x6933*x6940))+(((-1.0)*r02*x6939))+((x6930*x6938))+(((-1.0)*x6932)));
evalcond[4]=((((-1.0)*x6938*x6939))+(((-1.0)*r02*x6940))+((x6931*x6933))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6940))+(((-1.0)*x6934*x6939))+(((-1.0)*x6932))+((x6931*x6935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6941=((1.0)*cj5);
CheckValue<IkReal> x6942 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6942.valid){
continue;
}
CheckValue<IkReal> x6943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6941)))),-1);
if(!x6943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6942.value)+(((1.5707963267949)*(x6943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6944=IKsin(j4);
IkReal x6945=IKcos(j4);
IkReal x6946=((1.0)*sj0);
IkReal x6947=(cj5*r00);
IkReal x6948=(r11*sj5);
IkReal x6949=(cj5*r10);
IkReal x6950=(r21*sj5);
IkReal x6951=(cj5*r20);
IkReal x6952=(r01*sj5);
IkReal x6953=((1.0)*x6945);
IkReal x6954=((1.0)*x6944);
evalcond[0]=((((-1.0)*x6951*x6954))+((x6944*x6950))+(((-1.0)*r22*x6953)));
evalcond[1]=((((-1.0)*x6950*x6953))+(((-1.0)*r22*x6954))+((x6945*x6951)));
evalcond[2]=(((x6944*x6948))+cj0+(((-1.0)*r12*x6953))+(((-1.0)*x6949*x6954)));
evalcond[3]=(((x6944*x6952))+(((-1.0)*x6946))+(((-1.0)*r02*x6953))+(((-1.0)*x6947*x6954)));
evalcond[4]=((((-1.0)*x6952*x6953))+(((-1.0)*r02*x6954))+(((-1.0)*cj0))+((x6945*x6947)));
evalcond[5]=((((-1.0)*r12*x6954))+(((-1.0)*x6948*x6953))+(((-1.0)*x6946))+((x6945*x6949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-5.43071161048689)*px))+(((1.31086142322097)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.31086142322097)*px))+(((5.43071161048689)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-5.43071161048689)*px))+(((1.31086142322097)*py))))+IKsqr(((((1.31086142322097)*px))+(((5.43071161048689)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-5.43071161048689)*px))+(((1.31086142322097)*py))), ((((1.31086142322097)*px))+(((5.43071161048689)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6955=IKsin(j0);
IkReal x6956=IKcos(j0);
evalcond[0]=((((0.042)*x6956))+(((-1.0)*px))+(((-0.174)*x6955)));
evalcond[1]=((((0.042)*x6955))+(((-1.0)*py))+(((0.174)*x6956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6957=((1.0)*cj5);
IkReal x6958=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6957)));
j4eval[0]=x6958;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6957)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6959=cj5*cj5;
IkReal x6960=((1.0)*r21);
IkReal x6961=(cj5*sj5);
IkReal x6962=((1.0)*r20);
IkReal x6963=((((-1.0)*r01*x6961*x6962))+((r00*r20*x6959))+((r01*r21))+(((-1.0)*r01*x6959*x6960))+(((-1.0)*r00*x6960*x6961))+((r02*r22)));
j4eval[0]=x6963;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6962)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6964=cj5*cj5;
IkReal x6965=(r21*sj5);
IkReal x6966=(r11*r21);
IkReal x6967=((1.0)*cj5*r20);
IkReal x6968=((((-1.0)*cj5*r10*x6965))+((r12*r22))+(((-1.0)*r11*sj5*x6967))+x6966+(((-1.0)*x6964*x6966))+((r10*r20*x6964)));
j4eval[0]=x6968;
j4eval[1]=((IKabs((((sj0*x6965))+(((-1.0)*sj0*x6967)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6969=cj5*cj5;
IkReal x6970=(r21*sj5);
IkReal x6971=(r11*r21);
IkReal x6972=((1.0)*cj5*r20);
CheckValue<IkReal> x6973=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6970))+(((-1.0)*r11*sj5*x6972))+((r12*r22))+x6971+(((-1.0)*x6969*x6971))+((r10*r20*x6969)))),-1);
if(!x6973.valid){
continue;
}
CheckValue<IkReal> x6974 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6970))+(((-1.0)*sj0*x6972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6973.value)))+(x6974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6975=IKsin(j4);
IkReal x6976=IKcos(j4);
IkReal x6977=(r11*sj5);
IkReal x6978=(cj5*r00);
IkReal x6979=(cj5*r10);
IkReal x6980=(r21*sj5);
IkReal x6981=(cj5*r20);
IkReal x6982=(r01*sj5);
IkReal x6983=((1.0)*x6976);
IkReal x6984=((1.0)*x6975);
evalcond[0]=((((-1.0)*r22*x6983))+(((-1.0)*x6981*x6984))+((x6975*x6980)));
evalcond[1]=((((-1.0)*r22*x6984))+((x6976*x6981))+(((-1.0)*x6980*x6983)));
evalcond[2]=(((x6975*x6977))+cj0+(((-1.0)*r12*x6983))+(((-1.0)*x6979*x6984)));
evalcond[3]=(cj0+(((-1.0)*x6982*x6983))+((x6976*x6978))+(((-1.0)*r02*x6984)));
evalcond[4]=(sj0+(((-1.0)*r12*x6984))+(((-1.0)*x6977*x6983))+((x6976*x6979)));
evalcond[5]=((((-1.0)*x6978*x6984))+(((-1.0)*sj0))+((x6975*x6982))+(((-1.0)*r02*x6983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6985=cj5*cj5;
IkReal x6986=((1.0)*r21);
IkReal x6987=(cj5*sj5);
IkReal x6988=((1.0)*r20);
CheckValue<IkReal> x6989 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6988))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6989.valid){
continue;
}
CheckValue<IkReal> x6990=IKPowWithIntegerCheck(IKsign((((r00*r20*x6985))+((r01*r21))+(((-1.0)*r01*x6987*x6988))+(((-1.0)*r01*x6985*x6986))+((r02*r22))+(((-1.0)*r00*x6986*x6987)))),-1);
if(!x6990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6989.value)+(((1.5707963267949)*(x6990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6991=IKsin(j4);
IkReal x6992=IKcos(j4);
IkReal x6993=(r11*sj5);
IkReal x6994=(cj5*r00);
IkReal x6995=(cj5*r10);
IkReal x6996=(r21*sj5);
IkReal x6997=(cj5*r20);
IkReal x6998=(r01*sj5);
IkReal x6999=((1.0)*x6992);
IkReal x7000=((1.0)*x6991);
evalcond[0]=(((x6991*x6996))+(((-1.0)*r22*x6999))+(((-1.0)*x6997*x7000)));
evalcond[1]=((((-1.0)*r22*x7000))+((x6992*x6997))+(((-1.0)*x6996*x6999)));
evalcond[2]=((((-1.0)*r12*x6999))+cj0+((x6991*x6993))+(((-1.0)*x6995*x7000)));
evalcond[3]=((((-1.0)*r02*x7000))+cj0+(((-1.0)*x6998*x6999))+((x6992*x6994)));
evalcond[4]=((((-1.0)*r12*x7000))+(((-1.0)*x6993*x6999))+sj0+((x6992*x6995)));
evalcond[5]=((((-1.0)*sj0))+((x6991*x6998))+(((-1.0)*x6994*x7000))+(((-1.0)*r02*x6999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7001=((1.0)*cj5);
CheckValue<IkReal> x7002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7001)))),-1);
if(!x7002.valid){
continue;
}
CheckValue<IkReal> x7003 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7002.value)))+(x7003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7004=IKsin(j4);
IkReal x7005=IKcos(j4);
IkReal x7006=(r11*sj5);
IkReal x7007=(cj5*r00);
IkReal x7008=(cj5*r10);
IkReal x7009=(r21*sj5);
IkReal x7010=(cj5*r20);
IkReal x7011=(r01*sj5);
IkReal x7012=((1.0)*x7005);
IkReal x7013=((1.0)*x7004);
evalcond[0]=((((-1.0)*r22*x7012))+(((-1.0)*x7010*x7013))+((x7004*x7009)));
evalcond[1]=((((-1.0)*x7009*x7012))+(((-1.0)*r22*x7013))+((x7005*x7010)));
evalcond[2]=(cj0+(((-1.0)*x7008*x7013))+((x7004*x7006))+(((-1.0)*r12*x7012)));
evalcond[3]=((((-1.0)*x7011*x7012))+cj0+((x7005*x7007))+(((-1.0)*r02*x7013)));
evalcond[4]=(sj0+((x7005*x7008))+(((-1.0)*r12*x7013))+(((-1.0)*x7006*x7012)));
evalcond[5]=((((-1.0)*sj0))+((x7004*x7011))+(((-1.0)*x7007*x7013))+(((-1.0)*r02*x7012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7014=((1.0)*sj5);
IkReal x7015=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7015))+(((-1.0)*r10*x7014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7014))+(((-1.0)*r01*x7015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7015))+(((-1.0)*r10*x7014))))+IKsqr(((((-1.0)*r00*x7014))+(((-1.0)*r01*x7015))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7015))+(((-1.0)*r10*x7014))), ((((-1.0)*r00*x7014))+(((-1.0)*r01*x7015))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7016=IKsin(j0);
IkReal x7017=IKcos(j0);
IkReal x7018=((1.0)*cj5);
IkReal x7019=((0.12)*cj5);
IkReal x7020=((1.0)*sj5);
IkReal x7021=((0.12)*sj5);
evalcond[0]=((((-1.0)*r00*x7020))+(((-1.0)*r01*x7018))+(((-1.0)*x7017)));
evalcond[1]=((((-1.0)*r10*x7020))+(((-1.0)*r11*x7018))+(((-1.0)*x7016)));
evalcond[2]=((((-0.174)*x7016))+(((-1.0)*px))+(((-1.0)*r00*x7021))+(((-1.0)*r01*x7019)));
evalcond[3]=((((-1.0)*r10*x7021))+(((-1.0)*py))+(((-1.0)*r11*x7019))+(((0.174)*x7017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7022=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7022;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7023=((1.0)*cj5);
IkReal x7024=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7023)));
j4eval[0]=x7024;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7023)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7025=cj5*cj5;
IkReal x7026=r21*r21;
IkReal x7027=(r21*sj5);
IkReal x7028=(cj5*r20);
IkReal x7029=(x7026+(r22*r22)+(((-1.0)*x7025*x7026))+((x7025*(r20*r20)))+(((-2.0)*x7027*x7028)));
j4eval[0]=x7029;
j4eval[1]=IKsign(x7029);
j4eval[2]=((IKabs((x7027+(((-1.0)*x7028)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7030=cj5*cj5;
IkReal x7031=r21*r21;
IkReal x7032=(r21*sj5);
IkReal x7033=(cj5*r20);
CheckValue<IkReal> x7034=IKPowWithIntegerCheck(IKsign((x7031+(r22*r22)+(((-2.0)*x7032*x7033))+(((-1.0)*x7030*x7031))+((x7030*(r20*r20))))),-1);
if(!x7034.valid){
continue;
}
CheckValue<IkReal> x7035 = IKatan2WithCheck(IkReal(r22),IkReal((x7032+(((-1.0)*x7033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7034.value)))+(x7035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7036=IKsin(j4);
IkReal x7037=IKcos(j4);
IkReal x7038=(r11*sj5);
IkReal x7039=(r21*sj5);
IkReal x7040=(cj5*r00);
IkReal x7041=(cj5*r20);
IkReal x7042=(r01*sj5);
IkReal x7043=(cj5*r10);
IkReal x7044=((1.0)*x7037);
IkReal x7045=((1.0)*x7036);
evalcond[0]=((((-1.0)*r22*x7044))+((x7036*x7039))+(((-1.0)*x7041*x7045)));
evalcond[1]=((((-1.0)*r02*x7045))+(((-1.0)*x7042*x7044))+((x7037*x7040)));
evalcond[2]=((((-1.0)*r12*x7045))+((x7037*x7043))+(((-1.0)*x7038*x7044)));
evalcond[3]=(cj0+(((-1.0)*r12*x7044))+(((-1.0)*x7043*x7045))+((x7036*x7038)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7045))+((x7037*x7041))+(((-1.0)*x7039*x7044)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7044))+(((-1.0)*x7040*x7045))+((x7036*x7042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7046=((1.0)*cj5);
CheckValue<IkReal> x7047 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7047.valid){
continue;
}
CheckValue<IkReal> x7048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7046)))),-1);
if(!x7048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7047.value)+(((1.5707963267949)*(x7048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7049=IKsin(j4);
IkReal x7050=IKcos(j4);
IkReal x7051=(r11*sj5);
IkReal x7052=(r21*sj5);
IkReal x7053=(cj5*r00);
IkReal x7054=(cj5*r20);
IkReal x7055=(r01*sj5);
IkReal x7056=(cj5*r10);
IkReal x7057=((1.0)*x7050);
IkReal x7058=((1.0)*x7049);
evalcond[0]=((((-1.0)*x7054*x7058))+(((-1.0)*r22*x7057))+((x7049*x7052)));
evalcond[1]=(((x7050*x7053))+(((-1.0)*x7055*x7057))+(((-1.0)*r02*x7058)));
evalcond[2]=(((x7050*x7056))+(((-1.0)*r12*x7058))+(((-1.0)*x7051*x7057)));
evalcond[3]=(cj0+(((-1.0)*r12*x7057))+(((-1.0)*x7056*x7058))+((x7049*x7051)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7058))+((x7050*x7054))+(((-1.0)*x7052*x7057)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7053*x7058))+((x7049*x7055))+(((-1.0)*r02*x7057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7059 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7059.valid){
continue;
}
CheckValue<IkReal> x7060=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7059.value)+(((1.5707963267949)*(x7060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7061=IKsin(j4);
IkReal x7062=IKcos(j4);
IkReal x7063=(r11*sj5);
IkReal x7064=(r21*sj5);
IkReal x7065=(cj5*r00);
IkReal x7066=(cj5*r20);
IkReal x7067=(r01*sj5);
IkReal x7068=(cj5*r10);
IkReal x7069=((1.0)*x7062);
IkReal x7070=((1.0)*x7061);
evalcond[0]=((((-1.0)*x7066*x7070))+((x7061*x7064))+(((-1.0)*r22*x7069)));
evalcond[1]=(((x7062*x7065))+(((-1.0)*x7067*x7069))+(((-1.0)*r02*x7070)));
evalcond[2]=(((x7062*x7068))+(((-1.0)*x7063*x7069))+(((-1.0)*r12*x7070)));
evalcond[3]=(cj0+(((-1.0)*x7068*x7070))+(((-1.0)*r12*x7069))+((x7061*x7063)));
evalcond[4]=((1.0)+((x7062*x7066))+(((-1.0)*x7064*x7069))+(((-1.0)*r22*x7070)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7065*x7070))+((x7061*x7067))+(((-1.0)*r02*x7069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.60250563402813)*py))+(((-0.488329212470918)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.60250563402813)*px))+(((0.488329212470918)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.60250563402813)*py))+(((-0.488329212470918)*px))))+IKsqr(((((-1.60250563402813)*px))+(((0.488329212470918)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.60250563402813)*py))+(((-0.488329212470918)*px))), ((((-1.60250563402813)*px))+(((0.488329212470918)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7071=IKcos(j0);
IkReal x7072=IKsin(j0);
evalcond[0]=((((-0.174)*x7072))+(((-1.0)*px))+(((-0.571)*x7071)));
evalcond[1]=((((0.174)*x7071))+(((-1.0)*py))+(((-0.571)*x7072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7073=((1.0)*cj5);
IkReal x7074=((((-1.0)*r01*x7073))+(((-1.0)*r00*sj5)));
j4eval[0]=x7074;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7073)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7075=cj5*cj5;
IkReal x7076=((1.0)*r21);
IkReal x7077=(cj5*sj5);
IkReal x7078=((1.0)*r20);
IkReal x7079=((((-1.0)*r01*x7077*x7078))+((r01*r21))+(((-1.0)*r01*x7075*x7076))+(((-1.0)*r00*x7076*x7077))+((r02*r22))+((r00*r20*x7075)));
j4eval[0]=x7079;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7078))))));
j4eval[2]=IKsign(x7079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7080=cj5*cj5;
IkReal x7081=(r21*sj5);
IkReal x7082=(r11*r21);
IkReal x7083=((1.0)*cj5*r20);
IkReal x7084=((((-1.0)*x7080*x7082))+x7082+(((-1.0)*cj5*r10*x7081))+((r12*r22))+((r10*r20*x7080))+(((-1.0)*r11*sj5*x7083)));
j4eval[0]=x7084;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7081))+(((-1.0)*sj0*x7083))))));
j4eval[2]=IKsign(x7084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7085=cj5*cj5;
IkReal x7086=(r21*sj5);
IkReal x7087=(r11*r21);
IkReal x7088=((1.0)*cj5*r20);
CheckValue<IkReal> x7089=IKPowWithIntegerCheck(IKsign((x7087+(((-1.0)*cj5*r10*x7086))+((r12*r22))+((r10*r20*x7085))+(((-1.0)*x7085*x7087))+(((-1.0)*r11*sj5*x7088)))),-1);
if(!x7089.valid){
continue;
}
CheckValue<IkReal> x7090 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7086))+(((-1.0)*sj0*x7088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7089.value)))+(x7090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7091=IKsin(j4);
IkReal x7092=IKcos(j4);
IkReal x7093=(r11*sj5);
IkReal x7094=(cj5*r00);
IkReal x7095=(cj5*r10);
IkReal x7096=(r21*sj5);
IkReal x7097=(cj5*r20);
IkReal x7098=(r01*sj5);
IkReal x7099=((1.0)*x7092);
IkReal x7100=((1.0)*x7091);
evalcond[0]=((((-1.0)*r22*x7099))+((x7091*x7096))+(((-1.0)*x7097*x7100)));
evalcond[1]=(((x7092*x7097))+(((-1.0)*x7096*x7099))+(((-1.0)*r22*x7100)));
evalcond[2]=(cj0+(((-1.0)*r12*x7099))+(((-1.0)*x7095*x7100))+((x7091*x7093)));
evalcond[3]=(((x7092*x7094))+cj0+(((-1.0)*x7098*x7099))+(((-1.0)*r02*x7100)));
evalcond[4]=((((-1.0)*x7093*x7099))+sj0+((x7092*x7095))+(((-1.0)*r12*x7100)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7094*x7100))+((x7091*x7098))+(((-1.0)*r02*x7099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7101=cj5*cj5;
IkReal x7102=((1.0)*r21);
IkReal x7103=(cj5*sj5);
IkReal x7104=((1.0)*r20);
CheckValue<IkReal> x7105=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7103*x7104))+(((-1.0)*r00*x7102*x7103))+((r00*r20*x7101))+((r02*r22))+(((-1.0)*r01*x7101*x7102)))),-1);
if(!x7105.valid){
continue;
}
CheckValue<IkReal> x7106 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7105.value)))+(x7106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7107=IKsin(j4);
IkReal x7108=IKcos(j4);
IkReal x7109=(r11*sj5);
IkReal x7110=(cj5*r00);
IkReal x7111=(cj5*r10);
IkReal x7112=(r21*sj5);
IkReal x7113=(cj5*r20);
IkReal x7114=(r01*sj5);
IkReal x7115=((1.0)*x7108);
IkReal x7116=((1.0)*x7107);
evalcond[0]=((((-1.0)*r22*x7115))+((x7107*x7112))+(((-1.0)*x7113*x7116)));
evalcond[1]=((((-1.0)*x7112*x7115))+(((-1.0)*r22*x7116))+((x7108*x7113)));
evalcond[2]=(cj0+(((-1.0)*x7111*x7116))+(((-1.0)*r12*x7115))+((x7107*x7109)));
evalcond[3]=(cj0+(((-1.0)*r02*x7116))+((x7108*x7110))+(((-1.0)*x7114*x7115)));
evalcond[4]=(sj0+(((-1.0)*r12*x7116))+(((-1.0)*x7109*x7115))+((x7108*x7111)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7110*x7116))+(((-1.0)*r02*x7115))+((x7107*x7114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7117=((1.0)*cj5);
CheckValue<IkReal> x7118 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7118.valid){
continue;
}
CheckValue<IkReal> x7119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7117)))),-1);
if(!x7119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7118.value)+(((1.5707963267949)*(x7119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7120=IKsin(j4);
IkReal x7121=IKcos(j4);
IkReal x7122=(r11*sj5);
IkReal x7123=(cj5*r00);
IkReal x7124=(cj5*r10);
IkReal x7125=(r21*sj5);
IkReal x7126=(cj5*r20);
IkReal x7127=(r01*sj5);
IkReal x7128=((1.0)*x7121);
IkReal x7129=((1.0)*x7120);
evalcond[0]=(((x7120*x7125))+(((-1.0)*r22*x7128))+(((-1.0)*x7126*x7129)));
evalcond[1]=(((x7121*x7126))+(((-1.0)*r22*x7129))+(((-1.0)*x7125*x7128)));
evalcond[2]=(cj0+((x7120*x7122))+(((-1.0)*r12*x7128))+(((-1.0)*x7124*x7129)));
evalcond[3]=(cj0+((x7121*x7123))+(((-1.0)*x7127*x7128))+(((-1.0)*r02*x7129)));
evalcond[4]=(sj0+((x7121*x7124))+(((-1.0)*x7122*x7128))+(((-1.0)*r12*x7129)));
evalcond[5]=((((-1.0)*x7123*x7129))+(((-1.0)*sj0))+((x7120*x7127))+(((-1.0)*r02*x7128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7130=IKsin(j0);
IkReal x7131=IKcos(j0);
IkReal x7132=((1.0)*cj5);
IkReal x7133=((0.12)*cj5);
IkReal x7134=((1.0)*sj5);
IkReal x7135=((0.12)*sj5);
evalcond[0]=(x7131+(((-1.0)*r01*x7132))+(((-1.0)*r00*x7134)));
evalcond[1]=(x7130+(((-1.0)*r10*x7134))+(((-1.0)*r11*x7132)));
evalcond[2]=((((-1.0)*r01*x7133))+(((-1.0)*r00*x7135))+(((-0.174)*x7130))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r10*x7135))+(((-1.0)*r11*x7133))+(((0.174)*x7131))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7136=((1.0)*sj5);
IkReal x7137=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7136)));
j4eval[0]=x7137;
j4eval[1]=IKsign(x7137);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7136))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7138=((1.0)*cj5);
IkReal x7139=((((-1.0)*r01*x7138))+(((-1.0)*r00*sj5)));
j4eval[0]=x7139;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7138)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7140=r21*r21;
IkReal x7141=cj5*cj5;
IkReal x7142=(r21*sj5);
IkReal x7143=(cj5*r20);
IkReal x7144=(((x7140*x7141))+(((-1.0)*x7140))+(((-1.0)*(r22*r22)))+(((-1.0)*x7141*(r20*r20)))+(((2.0)*x7142*x7143)));
j4eval[0]=x7144;
j4eval[1]=((IKabs((x7142+(((-1.0)*x7143)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7145=r21*r21;
IkReal x7146=cj5*cj5;
IkReal x7147=(r21*sj5);
IkReal x7148=(cj5*r20);
CheckValue<IkReal> x7149=IKPowWithIntegerCheck(IKsign(((((2.0)*x7147*x7148))+((x7145*x7146))+(((-1.0)*x7145))+(((-1.0)*(r22*r22)))+(((-1.0)*x7146*(r20*r20))))),-1);
if(!x7149.valid){
continue;
}
CheckValue<IkReal> x7150 = IKatan2WithCheck(IkReal(r22),IkReal((x7147+(((-1.0)*x7148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7149.value)))+(x7150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7151=IKsin(j4);
IkReal x7152=IKcos(j4);
IkReal x7153=(r11*sj5);
IkReal x7154=(r21*sj5);
IkReal x7155=(cj5*r00);
IkReal x7156=(cj5*r20);
IkReal x7157=(r01*sj5);
IkReal x7158=(cj5*r10);
IkReal x7159=((1.0)*x7152);
IkReal x7160=((1.0)*x7151);
evalcond[0]=((((-1.0)*x7156*x7160))+(((-1.0)*r22*x7159))+((x7151*x7154)));
evalcond[1]=((((-1.0)*r02*x7160))+(((-1.0)*x7157*x7159))+((x7152*x7155)));
evalcond[2]=((((-1.0)*x7153*x7159))+(((-1.0)*r12*x7160))+((x7152*x7158)));
evalcond[3]=((((-1.0)*r12*x7159))+cj0+(((-1.0)*x7158*x7160))+((x7151*x7153)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7160))+(((-1.0)*x7154*x7159))+((x7152*x7156)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7155*x7160))+((x7151*x7157))+(((-1.0)*r02*x7159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7161=((1.0)*cj5);
CheckValue<IkReal> x7162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7161)))),-1);
if(!x7162.valid){
continue;
}
CheckValue<IkReal> x7163 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7162.value)))+(x7163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7164=IKsin(j4);
IkReal x7165=IKcos(j4);
IkReal x7166=(r11*sj5);
IkReal x7167=(r21*sj5);
IkReal x7168=(cj5*r00);
IkReal x7169=(cj5*r20);
IkReal x7170=(r01*sj5);
IkReal x7171=(cj5*r10);
IkReal x7172=((1.0)*x7165);
IkReal x7173=((1.0)*x7164);
evalcond[0]=((((-1.0)*x7169*x7173))+((x7164*x7167))+(((-1.0)*r22*x7172)));
evalcond[1]=((((-1.0)*x7170*x7172))+(((-1.0)*r02*x7173))+((x7165*x7168)));
evalcond[2]=((((-1.0)*r12*x7173))+((x7165*x7171))+(((-1.0)*x7166*x7172)));
evalcond[3]=(cj0+(((-1.0)*x7171*x7173))+((x7164*x7166))+(((-1.0)*r12*x7172)));
evalcond[4]=((-1.0)+((x7165*x7169))+(((-1.0)*x7167*x7172))+(((-1.0)*r22*x7173)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7168*x7173))+(((-1.0)*r02*x7172))+((x7164*x7170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7174=((1.0)*sj5);
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7174))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
CheckValue<IkReal> x7176=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7174)))),-1);
if(!x7176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7175.value)+(((1.5707963267949)*(x7176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7177=IKsin(j4);
IkReal x7178=IKcos(j4);
IkReal x7179=(r11*sj5);
IkReal x7180=(r21*sj5);
IkReal x7181=(cj5*r00);
IkReal x7182=(cj5*r20);
IkReal x7183=(r01*sj5);
IkReal x7184=(cj5*r10);
IkReal x7185=((1.0)*x7178);
IkReal x7186=((1.0)*x7177);
evalcond[0]=((((-1.0)*x7182*x7186))+(((-1.0)*r22*x7185))+((x7177*x7180)));
evalcond[1]=(((x7178*x7181))+(((-1.0)*x7183*x7185))+(((-1.0)*r02*x7186)));
evalcond[2]=(((x7178*x7184))+(((-1.0)*x7179*x7185))+(((-1.0)*r12*x7186)));
evalcond[3]=(((x7177*x7179))+cj0+(((-1.0)*x7184*x7186))+(((-1.0)*r12*x7185)));
evalcond[4]=((-1.0)+((x7178*x7182))+(((-1.0)*x7180*x7185))+(((-1.0)*r22*x7186)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7181*x7186))+(((-1.0)*r02*x7185))+((x7177*x7183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.60250563402813)*py))+(((-0.488329212470918)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.60250563402813)*px))+(((0.488329212470918)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.60250563402813)*py))+(((-0.488329212470918)*px))))+IKsqr(((((1.60250563402813)*px))+(((0.488329212470918)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.60250563402813)*py))+(((-0.488329212470918)*px))), ((((1.60250563402813)*px))+(((0.488329212470918)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7187=IKcos(j0);
IkReal x7188=IKsin(j0);
evalcond[0]=((((0.571)*x7187))+(((-1.0)*px))+(((-0.174)*x7188)));
evalcond[1]=((((0.571)*x7188))+(((-1.0)*py))+(((0.174)*x7187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7189=((1.0)*cj5);
IkReal x7190=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7189)));
j4eval[0]=x7190;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7189)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7191=((1.0)*cj5);
IkReal x7192=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7191)));
j4eval[0]=x7192;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7191)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7193=cj5*cj5;
IkReal x7194=((1.0)*sj5);
IkReal x7195=(cj5*r20);
IkReal x7196=(r11*r21);
IkReal x7197=(x7196+((r12*r22))+(((-1.0)*x7193*x7196))+(((-1.0)*r11*x7194*x7195))+((r10*r20*x7193))+(((-1.0)*cj5*r10*r21*x7194)));
j4eval[0]=x7197;
j4eval[1]=IKsign(x7197);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7194))+((cj0*x7195)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7198=cj5*cj5;
IkReal x7199=((1.0)*sj5);
IkReal x7200=(cj5*r20);
IkReal x7201=(r11*r21);
CheckValue<IkReal> x7202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7199*x7200))+x7201+((r12*r22))+((r10*r20*x7198))+(((-1.0)*cj5*r10*r21*x7199))+(((-1.0)*x7198*x7201)))),-1);
if(!x7202.valid){
continue;
}
CheckValue<IkReal> x7203 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7199))+((cj0*x7200)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7202.value)))+(x7203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7204=IKsin(j4);
IkReal x7205=IKcos(j4);
IkReal x7206=((1.0)*sj0);
IkReal x7207=(cj5*r00);
IkReal x7208=(r11*sj5);
IkReal x7209=(cj5*r10);
IkReal x7210=(r21*sj5);
IkReal x7211=(cj5*r20);
IkReal x7212=(r01*sj5);
IkReal x7213=((1.0)*x7205);
IkReal x7214=((1.0)*x7204);
evalcond[0]=(((x7204*x7210))+(((-1.0)*x7211*x7214))+(((-1.0)*r22*x7213)));
evalcond[1]=(((x7205*x7211))+(((-1.0)*x7210*x7213))+(((-1.0)*r22*x7214)));
evalcond[2]=(cj0+(((-1.0)*r12*x7213))+((x7204*x7208))+(((-1.0)*x7209*x7214)));
evalcond[3]=(((x7204*x7212))+(((-1.0)*r02*x7213))+(((-1.0)*x7206))+(((-1.0)*x7207*x7214)));
evalcond[4]=((((-1.0)*x7212*x7213))+((x7205*x7207))+(((-1.0)*r02*x7214))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7214))+((x7205*x7209))+(((-1.0)*x7206))+(((-1.0)*x7208*x7213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7215=((1.0)*cj5);
CheckValue<IkReal> x7216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7215)))),-1);
if(!x7216.valid){
continue;
}
CheckValue<IkReal> x7217 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7215))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7216.value)))+(x7217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7218=IKsin(j4);
IkReal x7219=IKcos(j4);
IkReal x7220=((1.0)*sj0);
IkReal x7221=(cj5*r00);
IkReal x7222=(r11*sj5);
IkReal x7223=(cj5*r10);
IkReal x7224=(r21*sj5);
IkReal x7225=(cj5*r20);
IkReal x7226=(r01*sj5);
IkReal x7227=((1.0)*x7219);
IkReal x7228=((1.0)*x7218);
evalcond[0]=((((-1.0)*x7225*x7228))+((x7218*x7224))+(((-1.0)*r22*x7227)));
evalcond[1]=(((x7219*x7225))+(((-1.0)*x7224*x7227))+(((-1.0)*r22*x7228)));
evalcond[2]=(cj0+((x7218*x7222))+(((-1.0)*r12*x7227))+(((-1.0)*x7223*x7228)));
evalcond[3]=((((-1.0)*r02*x7227))+(((-1.0)*x7221*x7228))+((x7218*x7226))+(((-1.0)*x7220)));
evalcond[4]=(((x7219*x7221))+(((-1.0)*r02*x7228))+(((-1.0)*x7226*x7227))+(((-1.0)*cj0)));
evalcond[5]=(((x7219*x7223))+(((-1.0)*x7222*x7227))+(((-1.0)*r12*x7228))+(((-1.0)*x7220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7229=((1.0)*cj5);
CheckValue<IkReal> x7230=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7229))+(((-1.0)*r00*sj5)))),-1);
if(!x7230.valid){
continue;
}
CheckValue<IkReal> x7231 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7230.value)))+(x7231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7232=IKsin(j4);
IkReal x7233=IKcos(j4);
IkReal x7234=((1.0)*sj0);
IkReal x7235=(cj5*r00);
IkReal x7236=(r11*sj5);
IkReal x7237=(cj5*r10);
IkReal x7238=(r21*sj5);
IkReal x7239=(cj5*r20);
IkReal x7240=(r01*sj5);
IkReal x7241=((1.0)*x7233);
IkReal x7242=((1.0)*x7232);
evalcond[0]=(((x7232*x7238))+(((-1.0)*r22*x7241))+(((-1.0)*x7239*x7242)));
evalcond[1]=(((x7233*x7239))+(((-1.0)*r22*x7242))+(((-1.0)*x7238*x7241)));
evalcond[2]=(((x7232*x7236))+(((-1.0)*r12*x7241))+cj0+(((-1.0)*x7237*x7242)));
evalcond[3]=(((x7232*x7240))+(((-1.0)*r02*x7241))+(((-1.0)*x7234))+(((-1.0)*x7235*x7242)));
evalcond[4]=(((x7233*x7235))+(((-1.0)*r02*x7242))+(((-1.0)*x7240*x7241))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7236*x7241))+((x7233*x7237))+(((-1.0)*r12*x7242))+(((-1.0)*x7234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.82673943463312)*py))+(((-0.121497180427502)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.82673943463312)*px))+(((0.121497180427502)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.82673943463312)*py))+(((-0.121497180427502)*px))))+IKsqr(((((-0.82673943463312)*px))+(((0.121497180427502)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.82673943463312)*py))+(((-0.121497180427502)*px))), ((((-0.82673943463312)*px))+(((0.121497180427502)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7243=IKcos(j0);
IkReal x7244=IKsin(j0);
evalcond[0]=((((-0.174)*x7244))+(((-1.0)*px))+(((-1.184)*x7243)));
evalcond[1]=((((-1.0)*py))+(((0.174)*x7243))+(((-1.184)*x7244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7245=((1.0)*cj5);
IkReal x7246=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7245)));
j4eval[0]=x7246;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7245)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7246);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7247=cj5*cj5;
IkReal x7248=((1.0)*r21);
IkReal x7249=(cj5*sj5);
IkReal x7250=((1.0)*r20);
IkReal x7251=(((r01*r21))+(((-1.0)*r00*x7248*x7249))+(((-1.0)*r01*x7247*x7248))+((r00*r20*x7247))+((r02*r22))+(((-1.0)*r01*x7249*x7250)));
j4eval[0]=x7251;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7250)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7252=cj5*cj5;
IkReal x7253=(r21*sj5);
IkReal x7254=(r11*r21);
IkReal x7255=((1.0)*cj5*r20);
IkReal x7256=(x7254+(((-1.0)*r11*sj5*x7255))+((r12*r22))+(((-1.0)*cj5*r10*x7253))+(((-1.0)*x7252*x7254))+((r10*r20*x7252)));
j4eval[0]=x7256;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7253))+(((-1.0)*sj0*x7255))))));
j4eval[2]=IKsign(x7256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7257=cj5*cj5;
IkReal x7258=(r21*sj5);
IkReal x7259=(r11*r21);
IkReal x7260=((1.0)*cj5*r20);
CheckValue<IkReal> x7261 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7260))+((sj0*x7258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7261.valid){
continue;
}
CheckValue<IkReal> x7262=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7260))+x7259+((r12*r22))+(((-1.0)*cj5*r10*x7258))+(((-1.0)*x7257*x7259))+((r10*r20*x7257)))),-1);
if(!x7262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7261.value)+(((1.5707963267949)*(x7262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7263=IKsin(j4);
IkReal x7264=IKcos(j4);
IkReal x7265=(r11*sj5);
IkReal x7266=(cj5*r00);
IkReal x7267=(cj5*r10);
IkReal x7268=(r21*sj5);
IkReal x7269=(cj5*r20);
IkReal x7270=(r01*sj5);
IkReal x7271=((1.0)*x7264);
IkReal x7272=((1.0)*x7263);
evalcond[0]=(((x7263*x7268))+(((-1.0)*r22*x7271))+(((-1.0)*x7269*x7272)));
evalcond[1]=((((-1.0)*r22*x7272))+((x7264*x7269))+(((-1.0)*x7268*x7271)));
evalcond[2]=((((-1.0)*x7267*x7272))+((x7263*x7265))+cj0+(((-1.0)*r12*x7271)));
evalcond[3]=(cj0+((x7264*x7266))+(((-1.0)*r02*x7272))+(((-1.0)*x7270*x7271)));
evalcond[4]=(sj0+(((-1.0)*x7265*x7271))+(((-1.0)*r12*x7272))+((x7264*x7267)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7266*x7272))+((x7263*x7270))+(((-1.0)*r02*x7271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7273=cj5*cj5;
IkReal x7274=((1.0)*r21);
IkReal x7275=(cj5*sj5);
IkReal x7276=((1.0)*r20);
CheckValue<IkReal> x7277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7274*x7275))+(((-1.0)*r01*x7273*x7274))+((r01*r21))+((r00*r20*x7273))+((r02*r22))+(((-1.0)*r01*x7275*x7276)))),-1);
if(!x7277.valid){
continue;
}
CheckValue<IkReal> x7278 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7277.value)))+(x7278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7279=IKsin(j4);
IkReal x7280=IKcos(j4);
IkReal x7281=(r11*sj5);
IkReal x7282=(cj5*r00);
IkReal x7283=(cj5*r10);
IkReal x7284=(r21*sj5);
IkReal x7285=(cj5*r20);
IkReal x7286=(r01*sj5);
IkReal x7287=((1.0)*x7280);
IkReal x7288=((1.0)*x7279);
evalcond[0]=((((-1.0)*x7285*x7288))+((x7279*x7284))+(((-1.0)*r22*x7287)));
evalcond[1]=(((x7280*x7285))+(((-1.0)*x7284*x7287))+(((-1.0)*r22*x7288)));
evalcond[2]=(cj0+(((-1.0)*r12*x7287))+((x7279*x7281))+(((-1.0)*x7283*x7288)));
evalcond[3]=(((x7280*x7282))+cj0+(((-1.0)*x7286*x7287))+(((-1.0)*r02*x7288)));
evalcond[4]=(((x7280*x7283))+sj0+(((-1.0)*r12*x7288))+(((-1.0)*x7281*x7287)));
evalcond[5]=((((-1.0)*x7282*x7288))+(((-1.0)*sj0))+((x7279*x7286))+(((-1.0)*r02*x7287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7289=((1.0)*cj5);
CheckValue<IkReal> x7290 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7289))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7290.valid){
continue;
}
CheckValue<IkReal> x7291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7289))+(((-1.0)*r00*sj5)))),-1);
if(!x7291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7290.value)+(((1.5707963267949)*(x7291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7292=IKsin(j4);
IkReal x7293=IKcos(j4);
IkReal x7294=(r11*sj5);
IkReal x7295=(cj5*r00);
IkReal x7296=(cj5*r10);
IkReal x7297=(r21*sj5);
IkReal x7298=(cj5*r20);
IkReal x7299=(r01*sj5);
IkReal x7300=((1.0)*x7293);
IkReal x7301=((1.0)*x7292);
evalcond[0]=(((x7292*x7297))+(((-1.0)*r22*x7300))+(((-1.0)*x7298*x7301)));
evalcond[1]=((((-1.0)*x7297*x7300))+((x7293*x7298))+(((-1.0)*r22*x7301)));
evalcond[2]=(cj0+(((-1.0)*x7296*x7301))+(((-1.0)*r12*x7300))+((x7292*x7294)));
evalcond[3]=((((-1.0)*r02*x7301))+cj0+((x7293*x7295))+(((-1.0)*x7299*x7300)));
evalcond[4]=(sj0+((x7293*x7296))+(((-1.0)*r12*x7301))+(((-1.0)*x7294*x7300)));
evalcond[5]=((((-1.0)*r02*x7300))+(((-1.0)*sj0))+(((-1.0)*x7295*x7301))+((x7292*x7299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-5.43071161048689)*px))+(((-1.31086142322097)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.31086142322097)*px))+(((5.43071161048689)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-5.43071161048689)*px))+(((-1.31086142322097)*py))))+IKsqr(((((-1.31086142322097)*px))+(((5.43071161048689)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-5.43071161048689)*px))+(((-1.31086142322097)*py))), ((((-1.31086142322097)*px))+(((5.43071161048689)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7302=IKcos(j0);
IkReal x7303=IKsin(j0);
evalcond[0]=((((-0.042)*x7302))+(((-1.0)*px))+(((-0.174)*x7303)));
evalcond[1]=((((0.174)*x7302))+(((-0.042)*x7303))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7304=((1.0)*cj5);
IkReal x7305=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7304)));
j4eval[0]=x7305;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7304)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7306=((1.0)*cj5);
IkReal x7307=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7306)));
j4eval[0]=x7307;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7306))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7308=cj5*cj5;
IkReal x7309=((1.0)*sj5);
IkReal x7310=(cj5*r20);
IkReal x7311=(r11*r21);
IkReal x7312=(x7311+(((-1.0)*x7308*x7311))+((r12*r22))+((r10*r20*x7308))+(((-1.0)*r11*x7309*x7310))+(((-1.0)*cj5*r10*r21*x7309)));
j4eval[0]=x7312;
j4eval[1]=IKsign(x7312);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x7310))+(((-1.0)*cj0*r21*x7309))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7313=cj5*cj5;
IkReal x7314=((1.0)*sj5);
IkReal x7315=(cj5*r20);
IkReal x7316=(r11*r21);
CheckValue<IkReal> x7317 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7314))+((cj0*x7315)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7317.valid){
continue;
}
CheckValue<IkReal> x7318=IKPowWithIntegerCheck(IKsign((x7316+((r12*r22))+((r10*r20*x7313))+(((-1.0)*r11*x7314*x7315))+(((-1.0)*x7313*x7316))+(((-1.0)*cj5*r10*r21*x7314)))),-1);
if(!x7318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7317.value)+(((1.5707963267949)*(x7318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7319=IKsin(j4);
IkReal x7320=IKcos(j4);
IkReal x7321=((1.0)*sj0);
IkReal x7322=(cj5*r00);
IkReal x7323=(r11*sj5);
IkReal x7324=(cj5*r10);
IkReal x7325=(r21*sj5);
IkReal x7326=(cj5*r20);
IkReal x7327=(r01*sj5);
IkReal x7328=((1.0)*x7320);
IkReal x7329=((1.0)*x7319);
evalcond[0]=((((-1.0)*r22*x7328))+(((-1.0)*x7326*x7329))+((x7319*x7325)));
evalcond[1]=(((x7320*x7326))+(((-1.0)*r22*x7329))+(((-1.0)*x7325*x7328)));
evalcond[2]=((((-1.0)*x7324*x7329))+cj0+((x7319*x7323))+(((-1.0)*r12*x7328)));
evalcond[3]=((((-1.0)*x7322*x7329))+(((-1.0)*x7321))+((x7319*x7327))+(((-1.0)*r02*x7328)));
evalcond[4]=(((x7320*x7322))+(((-1.0)*cj0))+(((-1.0)*r02*x7329))+(((-1.0)*x7327*x7328)));
evalcond[5]=(((x7320*x7324))+(((-1.0)*x7323*x7328))+(((-1.0)*x7321))+(((-1.0)*r12*x7329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7330=((1.0)*cj5);
CheckValue<IkReal> x7331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7330)))),-1);
if(!x7331.valid){
continue;
}
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7330))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7331.value)))+(x7332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7333=IKsin(j4);
IkReal x7334=IKcos(j4);
IkReal x7335=((1.0)*sj0);
IkReal x7336=(cj5*r00);
IkReal x7337=(r11*sj5);
IkReal x7338=(cj5*r10);
IkReal x7339=(r21*sj5);
IkReal x7340=(cj5*r20);
IkReal x7341=(r01*sj5);
IkReal x7342=((1.0)*x7334);
IkReal x7343=((1.0)*x7333);
evalcond[0]=((((-1.0)*r22*x7342))+(((-1.0)*x7340*x7343))+((x7333*x7339)));
evalcond[1]=((((-1.0)*r22*x7343))+((x7334*x7340))+(((-1.0)*x7339*x7342)));
evalcond[2]=(cj0+(((-1.0)*r12*x7342))+((x7333*x7337))+(((-1.0)*x7338*x7343)));
evalcond[3]=((((-1.0)*r02*x7342))+(((-1.0)*x7335))+((x7333*x7341))+(((-1.0)*x7336*x7343)));
evalcond[4]=((((-1.0)*x7341*x7342))+((x7334*x7336))+(((-1.0)*r02*x7343))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7337*x7342))+(((-1.0)*r12*x7343))+((x7334*x7338))+(((-1.0)*x7335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7344=((1.0)*cj5);
CheckValue<IkReal> x7345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7344))+(((-1.0)*r00*sj5)))),-1);
if(!x7345.valid){
continue;
}
CheckValue<IkReal> x7346 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7345.value)))+(x7346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7347=IKsin(j4);
IkReal x7348=IKcos(j4);
IkReal x7349=((1.0)*sj0);
IkReal x7350=(cj5*r00);
IkReal x7351=(r11*sj5);
IkReal x7352=(cj5*r10);
IkReal x7353=(r21*sj5);
IkReal x7354=(cj5*r20);
IkReal x7355=(r01*sj5);
IkReal x7356=((1.0)*x7348);
IkReal x7357=((1.0)*x7347);
evalcond[0]=((((-1.0)*r22*x7356))+((x7347*x7353))+(((-1.0)*x7354*x7357)));
evalcond[1]=(((x7348*x7354))+(((-1.0)*r22*x7357))+(((-1.0)*x7353*x7356)));
evalcond[2]=(cj0+(((-1.0)*r12*x7356))+((x7347*x7351))+(((-1.0)*x7352*x7357)));
evalcond[3]=(((x7347*x7355))+(((-1.0)*x7349))+(((-1.0)*r02*x7356))+(((-1.0)*x7350*x7357)));
evalcond[4]=(((x7348*x7350))+(((-1.0)*r02*x7357))+(((-1.0)*x7355*x7356))+(((-1.0)*cj0)));
evalcond[5]=(((x7348*x7352))+(((-1.0)*x7351*x7356))+(((-1.0)*r12*x7357))+(((-1.0)*x7349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7358=IKsin(j0);
IkReal x7359=IKcos(j0);
IkReal x7360=((1.0)*cj5);
IkReal x7361=((0.12)*cj5);
IkReal x7362=((1.0)*sj5);
IkReal x7363=((0.12)*sj5);
evalcond[0]=(x7359+(((-1.0)*r00*x7362))+(((-1.0)*r01*x7360)));
evalcond[1]=(x7358+(((-1.0)*r10*x7362))+(((-1.0)*r11*x7360)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*r00*x7363))+(((-1.0)*r01*x7361))+(((-0.174)*x7358)));
evalcond[3]=((((-1.0)*r10*x7363))+(((-1.0)*r11*x7361))+(((-1.0)*py))+(((0.174)*x7359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7364=((1.0)*sj5);
IkReal x7365=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7364)));
j4eval[0]=x7365;
j4eval[1]=IKsign(x7365);
j4eval[2]=((IKabs(((((-1.0)*r01*x7364))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7366=((1.0)*cj5);
IkReal x7367=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7366)));
j4eval[0]=x7367;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7366))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7368=r21*r21;
IkReal x7369=cj5*cj5;
IkReal x7370=(r21*sj5);
IkReal x7371=(cj5*r20);
IkReal x7372=((((-1.0)*x7369*(r20*r20)))+((x7368*x7369))+(((-1.0)*(r22*r22)))+(((2.0)*x7370*x7371))+(((-1.0)*x7368)));
j4eval[0]=x7372;
j4eval[1]=((IKabs(r22))+(IKabs((x7370+(((-1.0)*x7371))))));
j4eval[2]=IKsign(x7372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7373=r21*r21;
IkReal x7374=cj5*cj5;
IkReal x7375=(r21*sj5);
IkReal x7376=(cj5*r20);
CheckValue<IkReal> x7377=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7374*(r20*r20)))+((x7373*x7374))+(((-1.0)*(r22*r22)))+(((-1.0)*x7373))+(((2.0)*x7375*x7376)))),-1);
if(!x7377.valid){
continue;
}
CheckValue<IkReal> x7378 = IKatan2WithCheck(IkReal(r22),IkReal((x7375+(((-1.0)*x7376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7377.value)))+(x7378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7379=IKsin(j4);
IkReal x7380=IKcos(j4);
IkReal x7381=(r11*sj5);
IkReal x7382=(r21*sj5);
IkReal x7383=(cj5*r00);
IkReal x7384=(cj5*r20);
IkReal x7385=(r01*sj5);
IkReal x7386=(cj5*r10);
IkReal x7387=((1.0)*x7380);
IkReal x7388=((1.0)*x7379);
evalcond[0]=((((-1.0)*r22*x7387))+((x7379*x7382))+(((-1.0)*x7384*x7388)));
evalcond[1]=((((-1.0)*r02*x7388))+((x7380*x7383))+(((-1.0)*x7385*x7387)));
evalcond[2]=((((-1.0)*x7381*x7387))+((x7380*x7386))+(((-1.0)*r12*x7388)));
evalcond[3]=((((-1.0)*x7386*x7388))+cj0+((x7379*x7381))+(((-1.0)*r12*x7387)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7388))+((x7380*x7384))+(((-1.0)*x7382*x7387)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7387))+((x7379*x7385))+(((-1.0)*x7383*x7388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7389=((1.0)*cj5);
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
CheckValue<IkReal> x7391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7389)))),-1);
if(!x7391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7390.value)+(((1.5707963267949)*(x7391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7392=IKsin(j4);
IkReal x7393=IKcos(j4);
IkReal x7394=(r11*sj5);
IkReal x7395=(r21*sj5);
IkReal x7396=(cj5*r00);
IkReal x7397=(cj5*r20);
IkReal x7398=(r01*sj5);
IkReal x7399=(cj5*r10);
IkReal x7400=((1.0)*x7393);
IkReal x7401=((1.0)*x7392);
evalcond[0]=((((-1.0)*x7397*x7401))+(((-1.0)*r22*x7400))+((x7392*x7395)));
evalcond[1]=((((-1.0)*x7398*x7400))+((x7393*x7396))+(((-1.0)*r02*x7401)));
evalcond[2]=((((-1.0)*x7394*x7400))+(((-1.0)*r12*x7401))+((x7393*x7399)));
evalcond[3]=((((-1.0)*r12*x7400))+cj0+(((-1.0)*x7399*x7401))+((x7392*x7394)));
evalcond[4]=((-1.0)+(((-1.0)*x7395*x7400))+(((-1.0)*r22*x7401))+((x7393*x7397)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7396*x7401))+(((-1.0)*r02*x7400))+((x7392*x7398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7402=((1.0)*sj5);
CheckValue<IkReal> x7403=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7402)))),-1);
if(!x7403.valid){
continue;
}
CheckValue<IkReal> x7404 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7402))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7403.value)))+(x7404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7405=IKsin(j4);
IkReal x7406=IKcos(j4);
IkReal x7407=(r11*sj5);
IkReal x7408=(r21*sj5);
IkReal x7409=(cj5*r00);
IkReal x7410=(cj5*r20);
IkReal x7411=(r01*sj5);
IkReal x7412=(cj5*r10);
IkReal x7413=((1.0)*x7406);
IkReal x7414=((1.0)*x7405);
evalcond[0]=(((x7405*x7408))+(((-1.0)*r22*x7413))+(((-1.0)*x7410*x7414)));
evalcond[1]=(((x7406*x7409))+(((-1.0)*x7411*x7413))+(((-1.0)*r02*x7414)));
evalcond[2]=((((-1.0)*r12*x7414))+((x7406*x7412))+(((-1.0)*x7407*x7413)));
evalcond[3]=((((-1.0)*r12*x7413))+cj0+((x7405*x7407))+(((-1.0)*x7412*x7414)));
evalcond[4]=((-1.0)+((x7406*x7410))+(((-1.0)*x7408*x7413))+(((-1.0)*r22*x7414)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7409*x7414))+((x7405*x7411))+(((-1.0)*r02*x7413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.60250563402813)*py))+(((-0.488329212470918)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.60250563402813)*px))+(((0.488329212470918)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.60250563402813)*py))+(((-0.488329212470918)*px))))+IKsqr(((((1.60250563402813)*px))+(((0.488329212470918)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.60250563402813)*py))+(((-0.488329212470918)*px))), ((((1.60250563402813)*px))+(((0.488329212470918)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7415=IKcos(j0);
IkReal x7416=IKsin(j0);
evalcond[0]=((((0.571)*x7415))+(((-0.174)*x7416))+(((-1.0)*px)));
evalcond[1]=((((0.571)*x7416))+(((0.174)*x7415))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7417=((1.0)*cj5);
IkReal x7418=((((-1.0)*r01*x7417))+(((-1.0)*r00*sj5)));
j4eval[0]=x7418;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7417)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7419=((1.0)*cj5);
IkReal x7420=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7419)));
j4eval[0]=x7420;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7419))))));
j4eval[2]=IKsign(x7420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7421=cj5*cj5;
IkReal x7422=((1.0)*sj5);
IkReal x7423=(cj5*r20);
IkReal x7424=(r11*r21);
IkReal x7425=((((-1.0)*cj5*r10*r21*x7422))+((r12*r22))+(((-1.0)*x7421*x7424))+((r10*r20*x7421))+(((-1.0)*r11*x7422*x7423))+x7424);
j4eval[0]=x7425;
j4eval[1]=IKsign(x7425);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7422))+((cj0*x7423)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7426=cj5*cj5;
IkReal x7427=((1.0)*sj5);
IkReal x7428=(cj5*r20);
IkReal x7429=(r11*r21);
CheckValue<IkReal> x7430 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7427))+((cj0*x7428)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7430.valid){
continue;
}
CheckValue<IkReal> x7431=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7427))+(((-1.0)*r11*x7427*x7428))+(((-1.0)*x7426*x7429))+((r12*r22))+((r10*r20*x7426))+x7429)),-1);
if(!x7431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7430.value)+(((1.5707963267949)*(x7431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7432=IKsin(j4);
IkReal x7433=IKcos(j4);
IkReal x7434=((1.0)*sj0);
IkReal x7435=(cj5*r00);
IkReal x7436=(r11*sj5);
IkReal x7437=(cj5*r10);
IkReal x7438=(r21*sj5);
IkReal x7439=(cj5*r20);
IkReal x7440=(r01*sj5);
IkReal x7441=((1.0)*x7433);
IkReal x7442=((1.0)*x7432);
evalcond[0]=(((x7432*x7438))+(((-1.0)*r22*x7441))+(((-1.0)*x7439*x7442)));
evalcond[1]=((((-1.0)*x7438*x7441))+((x7433*x7439))+(((-1.0)*r22*x7442)));
evalcond[2]=((((-1.0)*x7437*x7442))+cj0+((x7432*x7436))+(((-1.0)*r12*x7441)));
evalcond[3]=((((-1.0)*x7435*x7442))+(((-1.0)*x7434))+(((-1.0)*r02*x7441))+((x7432*x7440)));
evalcond[4]=((((-1.0)*x7440*x7441))+((x7433*x7435))+(((-1.0)*r02*x7442))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7436*x7441))+(((-1.0)*x7434))+((x7433*x7437))+(((-1.0)*r12*x7442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7443=((1.0)*cj5);
CheckValue<IkReal> x7444 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7444.valid){
continue;
}
CheckValue<IkReal> x7445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7443)))),-1);
if(!x7445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7444.value)+(((1.5707963267949)*(x7445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7446=IKsin(j4);
IkReal x7447=IKcos(j4);
IkReal x7448=((1.0)*sj0);
IkReal x7449=(cj5*r00);
IkReal x7450=(r11*sj5);
IkReal x7451=(cj5*r10);
IkReal x7452=(r21*sj5);
IkReal x7453=(cj5*r20);
IkReal x7454=(r01*sj5);
IkReal x7455=((1.0)*x7447);
IkReal x7456=((1.0)*x7446);
evalcond[0]=(((x7446*x7452))+(((-1.0)*x7453*x7456))+(((-1.0)*r22*x7455)));
evalcond[1]=((((-1.0)*x7452*x7455))+((x7447*x7453))+(((-1.0)*r22*x7456)));
evalcond[2]=(cj0+(((-1.0)*x7451*x7456))+((x7446*x7450))+(((-1.0)*r12*x7455)));
evalcond[3]=((((-1.0)*x7448))+((x7446*x7454))+(((-1.0)*r02*x7455))+(((-1.0)*x7449*x7456)));
evalcond[4]=((((-1.0)*x7454*x7455))+(((-1.0)*r02*x7456))+((x7447*x7449))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7448))+(((-1.0)*x7450*x7455))+((x7447*x7451))+(((-1.0)*r12*x7456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7457=((1.0)*cj5);
CheckValue<IkReal> x7458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7458.valid){
continue;
}
CheckValue<IkReal> x7459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7457))+(((-1.0)*r00*sj5)))),-1);
if(!x7459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7458.value)+(((1.5707963267949)*(x7459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7460=IKsin(j4);
IkReal x7461=IKcos(j4);
IkReal x7462=((1.0)*sj0);
IkReal x7463=(cj5*r00);
IkReal x7464=(r11*sj5);
IkReal x7465=(cj5*r10);
IkReal x7466=(r21*sj5);
IkReal x7467=(cj5*r20);
IkReal x7468=(r01*sj5);
IkReal x7469=((1.0)*x7461);
IkReal x7470=((1.0)*x7460);
evalcond[0]=((((-1.0)*x7467*x7470))+(((-1.0)*r22*x7469))+((x7460*x7466)));
evalcond[1]=((((-1.0)*r22*x7470))+(((-1.0)*x7466*x7469))+((x7461*x7467)));
evalcond[2]=(cj0+(((-1.0)*r12*x7469))+((x7460*x7464))+(((-1.0)*x7465*x7470)));
evalcond[3]=((((-1.0)*r02*x7469))+(((-1.0)*x7462))+(((-1.0)*x7463*x7470))+((x7460*x7468)));
evalcond[4]=((((-1.0)*r02*x7470))+((x7461*x7463))+(((-1.0)*cj0))+(((-1.0)*x7468*x7469)));
evalcond[5]=((((-1.0)*x7464*x7469))+(((-1.0)*x7462))+((x7461*x7465))+(((-1.0)*r12*x7470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7471=((1.0)*sj5);
IkReal x7472=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7472))+(((-1.0)*r10*x7471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7471))+(((-1.0)*r01*x7472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7472))+(((-1.0)*r10*x7471))))+IKsqr(((((-1.0)*r00*x7471))+(((-1.0)*r01*x7472))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7472))+(((-1.0)*r10*x7471))), ((((-1.0)*r00*x7471))+(((-1.0)*r01*x7472))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7473=IKsin(j0);
IkReal x7474=IKcos(j0);
IkReal x7475=((1.0)*cj5);
IkReal x7476=((0.12)*cj5);
IkReal x7477=((1.0)*sj5);
IkReal x7478=((0.12)*sj5);
evalcond[0]=((((-1.0)*r00*x7477))+(((-1.0)*r01*x7475))+(((-1.0)*x7474)));
evalcond[1]=((((-1.0)*r11*x7475))+(((-1.0)*x7473))+(((-1.0)*r10*x7477)));
evalcond[2]=((((-1.0)*r00*x7478))+(((-1.0)*r01*x7476))+(((-1.0)*px))+(((-0.174)*x7473)));
evalcond[3]=((((-1.0)*r11*x7476))+(((0.174)*x7474))+(((-1.0)*py))+(((-1.0)*r10*x7478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7479=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7479;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7480=((1.0)*cj5);
IkReal x7481=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7480)));
j4eval[0]=x7481;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7480)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7482=cj5*cj5;
IkReal x7483=r21*r21;
IkReal x7484=(r21*sj5);
IkReal x7485=(cj5*r20);
IkReal x7486=((((-2.0)*x7484*x7485))+(r22*r22)+((x7482*(r20*r20)))+x7483+(((-1.0)*x7482*x7483)));
j4eval[0]=x7486;
j4eval[1]=IKsign(x7486);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7485))+x7484))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7487=cj5*cj5;
IkReal x7488=r21*r21;
IkReal x7489=(r21*sj5);
IkReal x7490=(cj5*r20);
CheckValue<IkReal> x7491=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7489*x7490))+x7488+((x7487*(r20*r20)))+(((-1.0)*x7487*x7488)))),-1);
if(!x7491.valid){
continue;
}
CheckValue<IkReal> x7492 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7490))+x7489)),IKFAST_ATAN2_MAGTHRESH);
if(!x7492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7491.value)))+(x7492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7493=IKsin(j4);
IkReal x7494=IKcos(j4);
IkReal x7495=(r11*sj5);
IkReal x7496=(r21*sj5);
IkReal x7497=(cj5*r00);
IkReal x7498=(cj5*r20);
IkReal x7499=(r01*sj5);
IkReal x7500=(cj5*r10);
IkReal x7501=((1.0)*x7494);
IkReal x7502=((1.0)*x7493);
evalcond[0]=((((-1.0)*r22*x7501))+(((-1.0)*x7498*x7502))+((x7493*x7496)));
evalcond[1]=((((-1.0)*x7499*x7501))+(((-1.0)*r02*x7502))+((x7494*x7497)));
evalcond[2]=(((x7494*x7500))+(((-1.0)*r12*x7502))+(((-1.0)*x7495*x7501)));
evalcond[3]=((((-1.0)*x7500*x7502))+cj0+((x7493*x7495))+(((-1.0)*r12*x7501)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7502))+(((-1.0)*x7496*x7501))+((x7494*x7498)));
evalcond[5]=((((-1.0)*x7497*x7502))+(((-1.0)*sj0))+(((-1.0)*r02*x7501))+((x7493*x7499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7503=((1.0)*cj5);
CheckValue<IkReal> x7504 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7504.valid){
continue;
}
CheckValue<IkReal> x7505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7503))+(((-1.0)*r00*sj5)))),-1);
if(!x7505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7504.value)+(((1.5707963267949)*(x7505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7506=IKsin(j4);
IkReal x7507=IKcos(j4);
IkReal x7508=(r11*sj5);
IkReal x7509=(r21*sj5);
IkReal x7510=(cj5*r00);
IkReal x7511=(cj5*r20);
IkReal x7512=(r01*sj5);
IkReal x7513=(cj5*r10);
IkReal x7514=((1.0)*x7507);
IkReal x7515=((1.0)*x7506);
evalcond[0]=(((x7506*x7509))+(((-1.0)*x7511*x7515))+(((-1.0)*r22*x7514)));
evalcond[1]=((((-1.0)*x7512*x7514))+(((-1.0)*r02*x7515))+((x7507*x7510)));
evalcond[2]=((((-1.0)*x7508*x7514))+((x7507*x7513))+(((-1.0)*r12*x7515)));
evalcond[3]=(cj0+((x7506*x7508))+(((-1.0)*r12*x7514))+(((-1.0)*x7513*x7515)));
evalcond[4]=((1.0)+(((-1.0)*x7509*x7514))+((x7507*x7511))+(((-1.0)*r22*x7515)));
evalcond[5]=((((-1.0)*sj0))+((x7506*x7512))+(((-1.0)*x7510*x7515))+(((-1.0)*r02*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7516 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7516.valid){
continue;
}
CheckValue<IkReal> x7517=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7516.value)+(((1.5707963267949)*(x7517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7518=IKsin(j4);
IkReal x7519=IKcos(j4);
IkReal x7520=(r11*sj5);
IkReal x7521=(r21*sj5);
IkReal x7522=(cj5*r00);
IkReal x7523=(cj5*r20);
IkReal x7524=(r01*sj5);
IkReal x7525=(cj5*r10);
IkReal x7526=((1.0)*x7519);
IkReal x7527=((1.0)*x7518);
evalcond[0]=(((x7518*x7521))+(((-1.0)*x7523*x7527))+(((-1.0)*r22*x7526)));
evalcond[1]=(((x7519*x7522))+(((-1.0)*r02*x7527))+(((-1.0)*x7524*x7526)));
evalcond[2]=(((x7519*x7525))+(((-1.0)*x7520*x7526))+(((-1.0)*r12*x7527)));
evalcond[3]=(((x7518*x7520))+cj0+(((-1.0)*x7525*x7527))+(((-1.0)*r12*x7526)));
evalcond[4]=((1.0)+((x7519*x7523))+(((-1.0)*x7521*x7526))+(((-1.0)*r22*x7527)));
evalcond[5]=(((x7518*x7524))+(((-1.0)*sj0))+(((-1.0)*x7522*x7527))+(((-1.0)*r02*x7526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.60250563402813)*py))+(((-0.488329212470918)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.60250563402813)*px))+(((0.488329212470918)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.60250563402813)*py))+(((-0.488329212470918)*px))))+IKsqr(((((-1.60250563402813)*px))+(((0.488329212470918)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.60250563402813)*py))+(((-0.488329212470918)*px))), ((((-1.60250563402813)*px))+(((0.488329212470918)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7528=IKcos(j0);
IkReal x7529=IKsin(j0);
evalcond[0]=((((-0.571)*x7528))+(((-1.0)*px))+(((-0.174)*x7529)));
evalcond[1]=((((-0.571)*x7529))+(((-1.0)*py))+(((0.174)*x7528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7530=((1.0)*cj5);
IkReal x7531=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7530)));
j4eval[0]=x7531;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7530))))));
j4eval[2]=IKsign(x7531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7532=cj5*cj5;
IkReal x7533=((1.0)*r21);
IkReal x7534=(cj5*sj5);
IkReal x7535=((1.0)*r20);
IkReal x7536=((((-1.0)*r01*x7532*x7533))+((r01*r21))+(((-1.0)*r01*x7534*x7535))+((r02*r22))+((r00*r20*x7532))+(((-1.0)*r00*x7533*x7534)));
j4eval[0]=x7536;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7535))))));
j4eval[2]=IKsign(x7536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7537=cj5*cj5;
IkReal x7538=(r21*sj5);
IkReal x7539=(r11*r21);
IkReal x7540=((1.0)*cj5*r20);
IkReal x7541=((((-1.0)*cj5*r10*x7538))+(((-1.0)*r11*sj5*x7540))+(((-1.0)*x7537*x7539))+((r10*r20*x7537))+((r12*r22))+x7539);
j4eval[0]=x7541;
j4eval[1]=((IKabs(((((-1.0)*sj0*x7540))+((sj0*x7538)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7542=cj5*cj5;
IkReal x7543=(r21*sj5);
IkReal x7544=(r11*r21);
IkReal x7545=((1.0)*cj5*r20);
CheckValue<IkReal> x7546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7545))+((r10*r20*x7542))+((r12*r22))+x7544+(((-1.0)*cj5*r10*x7543))+(((-1.0)*x7542*x7544)))),-1);
if(!x7546.valid){
continue;
}
CheckValue<IkReal> x7547 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7543))+(((-1.0)*sj0*x7545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7546.value)))+(x7547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7548=IKsin(j4);
IkReal x7549=IKcos(j4);
IkReal x7550=(r11*sj5);
IkReal x7551=(cj5*r00);
IkReal x7552=(cj5*r10);
IkReal x7553=(r21*sj5);
IkReal x7554=(cj5*r20);
IkReal x7555=(r01*sj5);
IkReal x7556=((1.0)*x7549);
IkReal x7557=((1.0)*x7548);
evalcond[0]=(((x7548*x7553))+(((-1.0)*x7554*x7557))+(((-1.0)*r22*x7556)));
evalcond[1]=(((x7549*x7554))+(((-1.0)*r22*x7557))+(((-1.0)*x7553*x7556)));
evalcond[2]=(((x7548*x7550))+cj0+(((-1.0)*r12*x7556))+(((-1.0)*x7552*x7557)));
evalcond[3]=((((-1.0)*x7555*x7556))+cj0+((x7549*x7551))+(((-1.0)*r02*x7557)));
evalcond[4]=(sj0+(((-1.0)*x7550*x7556))+((x7549*x7552))+(((-1.0)*r12*x7557)));
evalcond[5]=(((x7548*x7555))+(((-1.0)*sj0))+(((-1.0)*x7551*x7557))+(((-1.0)*r02*x7556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7558=cj5*cj5;
IkReal x7559=((1.0)*r21);
IkReal x7560=(cj5*sj5);
IkReal x7561=((1.0)*r20);
CheckValue<IkReal> x7562=IKPowWithIntegerCheck(IKsign((((r00*r20*x7558))+(((-1.0)*r00*x7559*x7560))+((r01*r21))+(((-1.0)*r01*x7558*x7559))+(((-1.0)*r01*x7560*x7561))+((r02*r22)))),-1);
if(!x7562.valid){
continue;
}
CheckValue<IkReal> x7563 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7562.value)))+(x7563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7564=IKsin(j4);
IkReal x7565=IKcos(j4);
IkReal x7566=(r11*sj5);
IkReal x7567=(cj5*r00);
IkReal x7568=(cj5*r10);
IkReal x7569=(r21*sj5);
IkReal x7570=(cj5*r20);
IkReal x7571=(r01*sj5);
IkReal x7572=((1.0)*x7565);
IkReal x7573=((1.0)*x7564);
evalcond[0]=((((-1.0)*r22*x7572))+((x7564*x7569))+(((-1.0)*x7570*x7573)));
evalcond[1]=(((x7565*x7570))+(((-1.0)*x7569*x7572))+(((-1.0)*r22*x7573)));
evalcond[2]=(cj0+(((-1.0)*x7568*x7573))+(((-1.0)*r12*x7572))+((x7564*x7566)));
evalcond[3]=((((-1.0)*x7571*x7572))+cj0+((x7565*x7567))+(((-1.0)*r02*x7573)));
evalcond[4]=((((-1.0)*x7566*x7572))+sj0+((x7565*x7568))+(((-1.0)*r12*x7573)));
evalcond[5]=((((-1.0)*x7567*x7573))+(((-1.0)*sj0))+((x7564*x7571))+(((-1.0)*r02*x7572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7574=((1.0)*cj5);
CheckValue<IkReal> x7575 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7575.valid){
continue;
}
CheckValue<IkReal> x7576=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7574))+(((-1.0)*r00*sj5)))),-1);
if(!x7576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7575.value)+(((1.5707963267949)*(x7576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7577=IKsin(j4);
IkReal x7578=IKcos(j4);
IkReal x7579=(r11*sj5);
IkReal x7580=(cj5*r00);
IkReal x7581=(cj5*r10);
IkReal x7582=(r21*sj5);
IkReal x7583=(cj5*r20);
IkReal x7584=(r01*sj5);
IkReal x7585=((1.0)*x7578);
IkReal x7586=((1.0)*x7577);
evalcond[0]=((((-1.0)*r22*x7585))+(((-1.0)*x7583*x7586))+((x7577*x7582)));
evalcond[1]=(((x7578*x7583))+(((-1.0)*r22*x7586))+(((-1.0)*x7582*x7585)));
evalcond[2]=(cj0+(((-1.0)*x7581*x7586))+((x7577*x7579))+(((-1.0)*r12*x7585)));
evalcond[3]=((((-1.0)*x7584*x7585))+cj0+((x7578*x7580))+(((-1.0)*r02*x7586)));
evalcond[4]=(sj0+((x7578*x7581))+(((-1.0)*r12*x7586))+(((-1.0)*x7579*x7585)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7585))+(((-1.0)*x7580*x7586))+((x7577*x7584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7587=cj1*cj1;
IkReal x7588=((500.0)*py);
IkReal x7589=(cj1*sj2);
IkReal x7590=(cj1*sj1);
IkReal x7591=(cj2*sj1);
IkReal x7592=(cj5*r01);
IkReal x7593=(r00*sj5);
IkReal x7594=(sj2*x7587);
IkReal x7595=((60.0)*r10*sj5);
IkReal x7596=((60.0)*cj5*r11);
CheckValue<IkReal> x7597=IKPowWithIntegerCheck(((((-571.0)*x7590*(cj2*cj2)))+(((-306.5)*cj2*x7590))+(((285.5)*x7590))+(((-571.0)*cj2*x7594))+(((285.5)*cj2*sj2))+(((-306.5)*x7594))),-1);
if(!x7597.valid){
continue;
}
CheckValue<IkReal> x7598=IKPowWithIntegerCheck(((((-1.0)*x7589))+(((-1.0)*x7591))),-1);
if(!x7598.valid){
continue;
}
if( IKabs(((x7597.value)*(((((-1.0)*x7591*x7596))+(((-1.0)*x7591*x7595))+(((-1.0)*x7589*x7596))+(((-1.0)*x7589*x7595))+(((-87.0)*x7592))+(((-87.0)*x7593))+(((-1.0)*x7588*x7591))+(((-1.0)*x7588*x7589)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7598.value)*((x7593+x7592)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7597.value)*(((((-1.0)*x7591*x7596))+(((-1.0)*x7591*x7595))+(((-1.0)*x7589*x7596))+(((-1.0)*x7589*x7595))+(((-87.0)*x7592))+(((-87.0)*x7593))+(((-1.0)*x7588*x7591))+(((-1.0)*x7588*x7589))))))+IKsqr(((x7598.value)*((x7593+x7592))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7597.value)*(((((-1.0)*x7591*x7596))+(((-1.0)*x7591*x7595))+(((-1.0)*x7589*x7596))+(((-1.0)*x7589*x7595))+(((-87.0)*x7592))+(((-87.0)*x7593))+(((-1.0)*x7588*x7591))+(((-1.0)*x7588*x7589))))), ((x7598.value)*((x7593+x7592))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7599=IKcos(j0);
IkReal x7600=IKsin(j0);
IkReal x7601=((0.571)*sj1);
IkReal x7602=((1.0)*cj1);
IkReal x7603=((0.571)*cj2);
IkReal x7604=((1.0)*sj5);
IkReal x7605=(cj5*r11);
IkReal x7606=(cj5*r01);
IkReal x7607=((0.12)*sj5);
IkReal x7608=(sj2*x7599);
IkReal x7609=(cj1*x7600);
IkReal x7610=(sj2*x7600);
IkReal x7611=((1.0)*cj2*sj1);
IkReal x7612=(cj1*x7599);
evalcond[0]=((((-1.0)*r00*x7604))+(((-1.0)*x7599*x7611))+(((-1.0)*x7606))+(((-1.0)*x7602*x7608)));
evalcond[1]=((((-1.0)*r10*x7604))+(((-1.0)*x7602*x7610))+(((-1.0)*x7600*x7611))+(((-1.0)*x7605)));
evalcond[2]=((((0.613)*x7612))+((x7603*x7612))+(((-0.174)*x7600))+(((-1.0)*px))+(((-1.0)*r00*x7607))+(((-1.0)*x7601*x7608))+(((-0.12)*x7606)));
evalcond[3]=((((-1.0)*r10*x7607))+(((0.613)*x7609))+(((-1.0)*py))+((x7603*x7609))+(((-0.12)*x7605))+(((-1.0)*x7601*x7610))+(((0.174)*x7599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7613=((1.0)*cj5);
IkReal x7614=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7613)));
j4eval[0]=x7614;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7613)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7615=((1.0)*cj5);
IkReal x7616=((((-1.0)*r11*x7615))+(((-1.0)*r10*sj5)));
j4eval[0]=x7616;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7615))))));
j4eval[2]=IKsign(x7616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7617=((1.0)*sj0);
IkReal x7618=((1.0)*cj0);
IkReal x7619=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7619;
j4eval[1]=((IKabs(((((-1.0)*r12*x7617))+(((-1.0)*r02*x7618)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7617))+(((-1.0)*r01*sj5*x7618))))));
j4eval[2]=IKsign(x7619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7620=((-1.0)*r20);
IkReal x7622 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7622)==0){
continue;
}
IkReal x7621=pow(x7622,-0.5);
CheckValue<IkReal> x7623 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7620),IKFAST_ATAN2_MAGTHRESH);
if(!x7623.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7623.value));
IkReal gconst133=(r21*x7621);
IkReal gconst134=(x7620*x7621);
CheckValue<IkReal> x7624 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7624.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7624.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7625=((-1.0)*r20);
IkReal x7626=x7621;
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7625),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
IkReal x7627=((-1.0)*(x7628.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7627;
IkReal gconst132=x7627;
IkReal gconst133=(r21*x7626);
IkReal gconst134=(x7625*x7626);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7629=((-1.0)*r20);
IkReal x7630=x7621;
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7629),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
IkReal x7631=((-1.0)*(x7632.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7631;
IkReal gconst132=x7631;
IkReal gconst133=(r21*x7630);
IkReal gconst134=(x7629*x7630);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7633=((-1.0)*r20);
IkReal x7634=x7621;
CheckValue<IkReal> x7636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7633),IKFAST_ATAN2_MAGTHRESH);
if(!x7636.valid){
continue;
}
IkReal x7635=((-1.0)*(x7636.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7635;
IkReal gconst132=x7635;
IkReal gconst133=(r21*x7634);
IkReal gconst134=(x7633*x7634);
IkReal x7637=r22*r22;
CheckValue<IkReal> x7640=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7637))),-1);
if(!x7640.valid){
continue;
}
IkReal x7638=x7640.value;
IkReal x7639=(((x7638*(r20*r20*r20*r20)))+(((2.0)*x7638*(r20*r20)*(r21*r21)))+((x7638*(r21*r21*r21*r21)))+x7637);
j4eval[0]=x7639;
j4eval[1]=IKsign(x7639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7641=(gconst133*r21);
IkReal x7642=(cj1*sj2);
IkReal x7643=(gconst134*r20);
IkReal x7644=(cj2*sj1);
CheckValue<IkReal> x7645 = IKatan2WithCheck(IkReal((((r22*x7642))+((r22*x7644)))),IkReal((((x7641*x7644))+((x7641*x7642))+(((-1.0)*x7642*x7643))+(((-1.0)*x7643*x7644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7645.valid){
continue;
}
CheckValue<IkReal> x7646=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7641*x7641)+(((-2.0)*x7641*x7643))+(x7643*x7643))),-1);
if(!x7646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7645.value)+(((1.5707963267949)*(x7646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7647=IKsin(j4);
IkReal x7648=IKcos(j4);
IkReal x7649=(sj1*sj2);
IkReal x7650=(gconst133*r11);
IkReal x7651=(gconst133*r21);
IkReal x7652=(gconst133*r01);
IkReal x7653=((1.0)*x7648);
IkReal x7654=(gconst134*x7648);
IkReal x7655=((1.0)*x7647);
IkReal x7656=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7653))+((x7647*x7651))+(((-1.0)*gconst134*r20*x7655)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7655))+((x7647*x7650))+(((-1.0)*r12*x7653)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7653))+(((-1.0)*gconst134*r00*x7655))+((x7647*x7652)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7655))+((cj1*sj2))+(((-1.0)*x7651*x7653))+((r20*x7654)));
evalcond[4]=((((-1.0)*r02*x7655))+(((-1.0)*cj0*x7656))+((r00*x7654))+((cj0*x7649))+(((-1.0)*x7652*x7653)));
evalcond[5]=((((-1.0)*x7650*x7653))+((sj0*x7649))+(((-1.0)*sj0*x7656))+((r10*x7654))+(((-1.0)*r12*x7655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7657=((1.0)*gconst134);
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7657))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
CheckValue<IkReal> x7659=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7657)))),-1);
if(!x7659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7658.value)+(((1.5707963267949)*(x7659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7660=IKsin(j4);
IkReal x7661=IKcos(j4);
IkReal x7662=(sj1*sj2);
IkReal x7663=(gconst133*r11);
IkReal x7664=(gconst133*r21);
IkReal x7665=(gconst133*r01);
IkReal x7666=((1.0)*x7661);
IkReal x7667=(gconst134*x7661);
IkReal x7668=((1.0)*x7660);
IkReal x7669=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7668))+(((-1.0)*r22*x7666))+((x7660*x7664)));
evalcond[1]=((((-1.0)*gconst134*r10*x7668))+(((-1.0)*r12*x7666))+cj0+((x7660*x7663)));
evalcond[2]=((((-1.0)*sj0))+((x7660*x7665))+(((-1.0)*r02*x7666))+(((-1.0)*gconst134*r00*x7668)));
evalcond[3]=(((cj2*sj1))+((r20*x7667))+((cj1*sj2))+(((-1.0)*r22*x7668))+(((-1.0)*x7664*x7666)));
evalcond[4]=((((-1.0)*cj0*x7669))+((r00*x7667))+(((-1.0)*r02*x7668))+((cj0*x7662))+(((-1.0)*x7665*x7666)));
evalcond[5]=((((-1.0)*r12*x7668))+((r10*x7667))+(((-1.0)*x7663*x7666))+((sj0*x7662))+(((-1.0)*sj0*x7669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7670=((1.0)*gconst134);
CheckValue<IkReal> x7671 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7670))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7671.valid){
continue;
}
CheckValue<IkReal> x7672=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7670)))),-1);
if(!x7672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7671.value)+(((1.5707963267949)*(x7672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7673=IKsin(j4);
IkReal x7674=IKcos(j4);
IkReal x7675=(sj1*sj2);
IkReal x7676=(gconst133*r11);
IkReal x7677=(gconst133*r21);
IkReal x7678=(gconst133*r01);
IkReal x7679=((1.0)*x7674);
IkReal x7680=(gconst134*x7674);
IkReal x7681=((1.0)*x7673);
IkReal x7682=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7681))+((x7673*x7677))+(((-1.0)*r22*x7679)));
evalcond[1]=((((-1.0)*gconst134*r10*x7681))+cj0+(((-1.0)*r12*x7679))+((x7673*x7676)));
evalcond[2]=((((-1.0)*gconst134*r00*x7681))+(((-1.0)*sj0))+(((-1.0)*r02*x7679))+((x7673*x7678)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7681))+((r20*x7680))+(((-1.0)*x7677*x7679)));
evalcond[4]=((((-1.0)*cj0*x7682))+(((-1.0)*x7678*x7679))+((r00*x7680))+((cj0*x7675))+(((-1.0)*r02*x7681)));
evalcond[5]=(((sj0*x7675))+((r10*x7680))+(((-1.0)*r12*x7681))+(((-1.0)*x7676*x7679))+(((-1.0)*sj0*x7682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7683=((-1.0)*r21);
IkReal x7685 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7685)==0){
continue;
}
IkReal x7684=pow(x7685,-0.5);
CheckValue<IkReal> x7686 = IKatan2WithCheck(IkReal(x7683),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7686.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7686.value))));
IkReal gconst136=(x7683*x7684);
IkReal gconst137=((1.0)*r20*x7684);
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7687.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7688=((-1.0)*r21);
CheckValue<IkReal> x7691 = IKatan2WithCheck(IkReal(x7688),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7691.valid){
continue;
}
IkReal x7689=((1.0)*(x7691.value));
IkReal x7690=x7684;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7689)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7689)));
IkReal gconst136=(x7688*x7690);
IkReal gconst137=((1.0)*r20*x7690);
IkReal x7692=r22*r22;
IkReal x7693=((1.0)*x7692);
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(((-1.0)+x7692),-1);
if(!x7697.valid){
continue;
}
IkReal x7694=x7697.value;
if((((1.0)+(((-1.0)*x7693)))) < -0.00001)
continue;
IkReal x7695=IKsqrt(((1.0)+(((-1.0)*x7693))));
IkReal x7696=(cj0*x7694*x7695);
j4eval[0]=((IKabs(((((-1.0)*x7693*x7696))+x7696)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7698=((-1.0)*r21);
CheckValue<IkReal> x7701 = IKatan2WithCheck(IkReal(x7698),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7701.valid){
continue;
}
IkReal x7699=((1.0)*(x7701.value));
IkReal x7700=x7684;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7699)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7699)));
IkReal gconst136=(x7698*x7700);
IkReal gconst137=((1.0)*r20*x7700);
IkReal x7702=r22*r22;
IkReal x7703=((1.0)*x7702);
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(((-1.0)+x7702),-1);
if(!x7707.valid){
continue;
}
IkReal x7704=x7707.value;
if((((1.0)+(((-1.0)*x7703)))) < -0.00001)
continue;
IkReal x7705=IKsqrt(((1.0)+(((-1.0)*x7703))));
IkReal x7706=(sj0*x7704*x7705);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7703*x7706))+x7706))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7708=((-1.0)*r21);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(x7708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal x7709=((1.0)*(x7711.value));
IkReal x7710=x7684;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7709)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7709)));
IkReal gconst136=(x7708*x7710);
IkReal gconst137=((1.0)*r20*x7710);
IkReal x7712=r22*r22;
IkReal x7713=(r12*sj0);
IkReal x7714=(cj0*r02);
CheckValue<IkReal> x7718=IKPowWithIntegerCheck(((-1.0)+x7712),-1);
if(!x7718.valid){
continue;
}
IkReal x7715=x7718.value;
if((((1.0)+(((-1.0)*x7712)))) < -0.00001)
continue;
IkReal x7716=IKsqrt(((1.0)+(((-1.0)*x7712))));
IkReal x7717=(r22*x7715*x7716);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7713*x7717))+((x7714*x7717)))))+(IKabs(((((-1.0)*x7714))+(((-1.0)*x7713))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7719=((1.0)*sj0);
IkReal x7720=((1.0)*cj0);
CheckValue<IkReal> x7721=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7721.valid){
continue;
}
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7719))+(((-1.0)*r02*x7720)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7719))+(((-1.0)*gconst136*r01*x7720))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7721.value)))+(x7722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7723=IKsin(j4);
IkReal x7724=IKcos(j4);
IkReal x7725=(gconst136*r01);
IkReal x7726=(gconst137*r10);
IkReal x7727=(sj1*sj2);
IkReal x7728=(gconst137*r20);
IkReal x7729=(gconst136*r11);
IkReal x7730=(gconst136*r21);
IkReal x7731=(gconst137*r00);
IkReal x7732=((1.0)*x7724);
IkReal x7733=((1.0)*cj1*cj2);
IkReal x7734=((1.0)*x7723);
evalcond[0]=((((-1.0)*x7728*x7734))+(((-1.0)*r22*x7732))+((x7723*x7730)));
evalcond[1]=(cj0+(((-1.0)*r12*x7732))+((x7723*x7729))+(((-1.0)*x7726*x7734)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7731*x7734))+((x7723*x7725))+(((-1.0)*r02*x7732)));
evalcond[3]=(((cj2*sj1))+((x7724*x7728))+(((-1.0)*x7730*x7732))+((cj1*sj2))+(((-1.0)*r22*x7734)));
evalcond[4]=((((-1.0)*cj0*x7733))+(((-1.0)*x7725*x7732))+((x7724*x7731))+((cj0*x7727))+(((-1.0)*r02*x7734)));
evalcond[5]=(((sj0*x7727))+((x7724*x7726))+(((-1.0)*r12*x7734))+(((-1.0)*x7729*x7732))+(((-1.0)*sj0*x7733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7735=((1.0)*gconst137);
CheckValue<IkReal> x7736 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7735))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7736.valid){
continue;
}
CheckValue<IkReal> x7737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7735))+(((-1.0)*gconst136*r10)))),-1);
if(!x7737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7736.value)+(((1.5707963267949)*(x7737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7738=IKsin(j4);
IkReal x7739=IKcos(j4);
IkReal x7740=(gconst136*r01);
IkReal x7741=(gconst137*r10);
IkReal x7742=(sj1*sj2);
IkReal x7743=(gconst137*r20);
IkReal x7744=(gconst136*r11);
IkReal x7745=(gconst136*r21);
IkReal x7746=(gconst137*r00);
IkReal x7747=((1.0)*x7739);
IkReal x7748=((1.0)*cj1*cj2);
IkReal x7749=((1.0)*x7738);
evalcond[0]=((((-1.0)*r22*x7747))+((x7738*x7745))+(((-1.0)*x7743*x7749)));
evalcond[1]=(cj0+(((-1.0)*x7741*x7749))+((x7738*x7744))+(((-1.0)*r12*x7747)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7747))+((x7738*x7740))+(((-1.0)*x7746*x7749)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7749))+((cj1*sj2))+((x7739*x7743))+(((-1.0)*x7745*x7747)));
evalcond[4]=((((-1.0)*r02*x7749))+(((-1.0)*x7740*x7747))+(((-1.0)*cj0*x7748))+((x7739*x7746))+((cj0*x7742)));
evalcond[5]=((((-1.0)*x7744*x7747))+((sj0*x7742))+(((-1.0)*r12*x7749))+((x7739*x7741))+(((-1.0)*sj0*x7748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7750=((1.0)*gconst137);
CheckValue<IkReal> x7751 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7751.valid){
continue;
}
CheckValue<IkReal> x7752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7750)))),-1);
if(!x7752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7751.value)+(((1.5707963267949)*(x7752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7753=IKsin(j4);
IkReal x7754=IKcos(j4);
IkReal x7755=(gconst136*r01);
IkReal x7756=(gconst137*r10);
IkReal x7757=(sj1*sj2);
IkReal x7758=(gconst137*r20);
IkReal x7759=(gconst136*r11);
IkReal x7760=(gconst136*r21);
IkReal x7761=(gconst137*r00);
IkReal x7762=((1.0)*x7754);
IkReal x7763=((1.0)*cj1*cj2);
IkReal x7764=((1.0)*x7753);
evalcond[0]=((((-1.0)*r22*x7762))+(((-1.0)*x7758*x7764))+((x7753*x7760)));
evalcond[1]=(cj0+((x7753*x7759))+(((-1.0)*r12*x7762))+(((-1.0)*x7756*x7764)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7762))+((x7753*x7755))+(((-1.0)*x7761*x7764)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7760*x7762))+(((-1.0)*r22*x7764))+((cj1*sj2))+((x7754*x7758)));
evalcond[4]=((((-1.0)*r02*x7764))+(((-1.0)*x7755*x7762))+(((-1.0)*cj0*x7763))+((cj0*x7757))+((x7754*x7761)));
evalcond[5]=(((sj0*x7757))+(((-1.0)*x7759*x7762))+(((-1.0)*sj0*x7763))+(((-1.0)*r12*x7764))+((x7754*x7756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7765=((-1.0)*r10);
IkReal x7767 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7767)==0){
continue;
}
IkReal x7766=pow(x7767,-0.5);
CheckValue<IkReal> x7768 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7765),IKFAST_ATAN2_MAGTHRESH);
if(!x7768.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7768.value));
IkReal gconst139=(r11*x7766);
IkReal gconst140=(x7765*x7766);
CheckValue<IkReal> x7769 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7769.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7769.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7770=((-1.0)*r10);
IkReal x7771=x7766;
CheckValue<IkReal> x7773 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7770),IKFAST_ATAN2_MAGTHRESH);
if(!x7773.valid){
continue;
}
IkReal x7772=((-1.0)*(x7773.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7772;
IkReal gconst138=x7772;
IkReal gconst139=(r11*x7771);
IkReal gconst140=(x7770*x7771);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7774=((1.0)*sj0);
IkReal x7775=((1.0)*gconst139);
CheckValue<IkReal> x7776=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7775)))),-1);
if(!x7776.valid){
continue;
}
CheckValue<IkReal> x7777 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7774)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7774))+(((-1.0)*cj0*r01*x7775))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7776.value)))+(x7777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7778=IKsin(j4);
IkReal x7779=IKcos(j4);
IkReal x7780=(gconst140*r00);
IkReal x7781=(sj1*sj2);
IkReal x7782=(gconst139*r11);
IkReal x7783=(gconst139*r01);
IkReal x7784=(gconst139*r21);
IkReal x7785=((1.0)*x7779);
IkReal x7786=((1.0)*x7778);
IkReal x7787=((1.0)*cj1*cj2);
IkReal x7788=(gconst140*x7779);
evalcond[0]=(((x7778*x7784))+(((-1.0)*gconst140*r20*x7786))+(((-1.0)*r22*x7785)));
evalcond[1]=(((x7778*x7782))+cj0+(((-1.0)*gconst140*r10*x7786))+(((-1.0)*r12*x7785)));
evalcond[2]=(((x7778*x7783))+(((-1.0)*sj0))+(((-1.0)*r02*x7785))+(((-1.0)*x7780*x7786)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7784*x7785))+((cj1*sj2))+(((-1.0)*r22*x7786))+((r20*x7788)));
evalcond[4]=((((-1.0)*x7783*x7785))+((x7779*x7780))+(((-1.0)*r02*x7786))+(((-1.0)*cj0*x7787))+((cj0*x7781)));
evalcond[5]=((((-1.0)*x7782*x7785))+((sj0*x7781))+((r10*x7788))+(((-1.0)*sj0*x7787))+(((-1.0)*r12*x7786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7789=((1.0)*gconst140);
CheckValue<IkReal> x7790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7789))+(((-1.0)*gconst139*r00)))),-1);
if(!x7790.valid){
continue;
}
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7789))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7790.value)))+(x7791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7792=IKsin(j4);
IkReal x7793=IKcos(j4);
IkReal x7794=(gconst140*r00);
IkReal x7795=(sj1*sj2);
IkReal x7796=(gconst139*r11);
IkReal x7797=(gconst139*r01);
IkReal x7798=(gconst139*r21);
IkReal x7799=((1.0)*x7793);
IkReal x7800=((1.0)*x7792);
IkReal x7801=((1.0)*cj1*cj2);
IkReal x7802=(gconst140*x7793);
evalcond[0]=((((-1.0)*r22*x7799))+(((-1.0)*gconst140*r20*x7800))+((x7792*x7798)));
evalcond[1]=(cj0+(((-1.0)*r12*x7799))+((x7792*x7796))+(((-1.0)*gconst140*r10*x7800)));
evalcond[2]=((((-1.0)*sj0))+((x7792*x7797))+(((-1.0)*x7794*x7800))+(((-1.0)*r02*x7799)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7800))+(((-1.0)*x7798*x7799))+((r20*x7802)));
evalcond[4]=((((-1.0)*r02*x7800))+((x7793*x7794))+((cj0*x7795))+(((-1.0)*cj0*x7801))+(((-1.0)*x7797*x7799)));
evalcond[5]=((((-1.0)*sj0*x7801))+(((-1.0)*r12*x7800))+((sj0*x7795))+((r10*x7802))+(((-1.0)*x7796*x7799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7803=((-1.0)*r11);
IkReal x7805 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7805)==0){
continue;
}
IkReal x7804=pow(x7805,-0.5);
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal(x7803),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7806.value))));
IkReal gconst142=(x7803*x7804);
IkReal gconst143=((1.0)*r10*x7804);
CheckValue<IkReal> x7807 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7807.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7808=((-1.0)*r11);
CheckValue<IkReal> x7811 = IKatan2WithCheck(IkReal(x7808),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7811.valid){
continue;
}
IkReal x7809=((1.0)*(x7811.value));
IkReal x7810=x7804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7809)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7809)));
IkReal gconst142=(x7808*x7810);
IkReal gconst143=((1.0)*r10*x7810);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7812=((-1.0)*r11);
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal(x7812),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
IkReal x7813=((1.0)*(x7815.value));
IkReal x7814=x7804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7813)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7813)));
IkReal gconst142=(x7812*x7814);
IkReal gconst143=((1.0)*r10*x7814);
IkReal x7816=r12*r12;
IkReal x7817=((1.0)*sj0);
IkReal x7818=(cj0*r02);
IkReal x7819=x7804;
j4eval[0]=((IKabs((((sj0*x7816*x7819))+(((-1.0)*x7817*x7819))+((r12*x7818*x7819)))))+(IKabs(((((-1.0)*x7818))+(((-1.0)*r12*x7817))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7820=((-1.0)*r11);
CheckValue<IkReal> x7823 = IKatan2WithCheck(IkReal(x7820),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7823.valid){
continue;
}
IkReal x7821=((1.0)*(x7823.value));
IkReal x7822=x7804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7821)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7821)));
IkReal gconst142=(x7820*x7822);
IkReal gconst143=((1.0)*r10*x7822);
IkReal x7824=r12*r12;
IkReal x7825=(cj1*r22*sj2);
IkReal x7826=(cj2*r22*sj1);
CheckValue<IkReal> x7830=IKPowWithIntegerCheck(((-1.0)+x7824),-1);
if(!x7830.valid){
continue;
}
IkReal x7827=x7830.value;
if((((1.0)+(((-1.0)*x7824)))) < -0.00001)
continue;
IkReal x7828=IKsqrt(((1.0)+(((-1.0)*x7824))));
IkReal x7829=((1.0)*r12*x7827*x7828);
j4eval[0]=((IKabs((x7826+x7825)))+(IKabs(((((-1.0)*x7826*x7829))+(((-1.0)*x7825*x7829))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7831=(gconst142*r21);
IkReal x7832=(cj1*sj2);
IkReal x7833=(cj2*sj1);
IkReal x7834=(gconst143*r20);
CheckValue<IkReal> x7835=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7831*x7834))+(x7831*x7831)+(x7834*x7834)+(r22*r22))),-1);
if(!x7835.valid){
continue;
}
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal((((r22*x7832))+((r22*x7833)))),IkReal((((x7831*x7833))+((x7831*x7832))+(((-1.0)*x7832*x7834))+(((-1.0)*x7833*x7834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7835.value)))+(x7836.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7837=IKsin(j4);
IkReal x7838=IKcos(j4);
IkReal x7839=(sj1*sj2);
IkReal x7840=(gconst143*r20);
IkReal x7841=((1.0)*x7838);
IkReal x7842=((1.0)*cj1*cj2);
IkReal x7843=((1.0)*x7837);
IkReal x7844=(gconst142*x7837);
IkReal x7845=(gconst143*x7838);
evalcond[0]=(((r21*x7844))+(((-1.0)*r22*x7841))+(((-1.0)*x7840*x7843)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7843))+(((-1.0)*r12*x7841))+((r11*x7844)));
evalcond[2]=((((-1.0)*gconst143*r00*x7843))+(((-1.0)*sj0))+(((-1.0)*r02*x7841))+((r01*x7844)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7843))+((cj1*sj2))+((x7838*x7840))+(((-1.0)*gconst142*r21*x7841)));
evalcond[4]=((((-1.0)*cj0*x7842))+(((-1.0)*gconst142*r01*x7841))+((cj0*x7839))+((r00*x7845))+(((-1.0)*r02*x7843)));
evalcond[5]=((((-1.0)*gconst142*r11*x7841))+((r10*x7845))+(((-1.0)*r12*x7843))+(((-1.0)*sj0*x7842))+((sj0*x7839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7846=((1.0)*sj0);
IkReal x7847=((1.0)*gconst142);
CheckValue<IkReal> x7848 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7846))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x7846))+(((-1.0)*cj0*r01*x7847))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7848.valid){
continue;
}
CheckValue<IkReal> x7849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7847))+(((-1.0)*gconst143*r21)))),-1);
if(!x7849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7848.value)+(((1.5707963267949)*(x7849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7850=IKsin(j4);
IkReal x7851=IKcos(j4);
IkReal x7852=(sj1*sj2);
IkReal x7853=(gconst143*r20);
IkReal x7854=((1.0)*x7851);
IkReal x7855=((1.0)*cj1*cj2);
IkReal x7856=((1.0)*x7850);
IkReal x7857=(gconst142*x7850);
IkReal x7858=(gconst143*x7851);
evalcond[0]=(((r21*x7857))+(((-1.0)*x7853*x7856))+(((-1.0)*r22*x7854)));
evalcond[1]=(((r11*x7857))+cj0+(((-1.0)*gconst143*r10*x7856))+(((-1.0)*r12*x7854)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7857))+(((-1.0)*r02*x7854))+(((-1.0)*gconst143*r00*x7856)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7854))+((x7851*x7853))+(((-1.0)*r22*x7856)));
evalcond[4]=((((-1.0)*cj0*x7855))+((cj0*x7852))+((r00*x7858))+(((-1.0)*r02*x7856))+(((-1.0)*gconst142*r01*x7854)));
evalcond[5]=((((-1.0)*sj0*x7855))+((sj0*x7852))+(((-1.0)*gconst142*r11*x7854))+((r10*x7858))+(((-1.0)*r12*x7856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7859=((1.0)*gconst143);
CheckValue<IkReal> x7860 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7860.valid){
continue;
}
CheckValue<IkReal> x7861=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7859)))),-1);
if(!x7861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7860.value)+(((1.5707963267949)*(x7861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7862=IKsin(j4);
IkReal x7863=IKcos(j4);
IkReal x7864=(sj1*sj2);
IkReal x7865=(gconst143*r20);
IkReal x7866=((1.0)*x7863);
IkReal x7867=((1.0)*cj1*cj2);
IkReal x7868=((1.0)*x7862);
IkReal x7869=(gconst142*x7862);
IkReal x7870=(gconst143*x7863);
evalcond[0]=(((r21*x7869))+(((-1.0)*x7865*x7868))+(((-1.0)*r22*x7866)));
evalcond[1]=(cj0+((r11*x7869))+(((-1.0)*r12*x7866))+(((-1.0)*gconst143*r10*x7868)));
evalcond[2]=((((-1.0)*gconst143*r00*x7868))+(((-1.0)*sj0))+((r01*x7869))+(((-1.0)*r02*x7866)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7866))+((x7863*x7865))+(((-1.0)*r22*x7868)));
evalcond[4]=(((cj0*x7864))+(((-1.0)*gconst142*r01*x7866))+((r00*x7870))+(((-1.0)*r02*x7868))+(((-1.0)*cj0*x7867)));
evalcond[5]=(((r10*x7870))+((sj0*x7864))+(((-1.0)*r12*x7868))+(((-1.0)*sj0*x7867))+(((-1.0)*gconst142*r11*x7866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7871=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7871;
j4eval[1]=IKsign(x7871);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7872=((1.0)*cj5);
IkReal x7873=((((-1.0)*r01*x7872))+(((-1.0)*r00*sj5)));
j4eval[0]=x7873;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7872)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7874=cj5*cj5;
IkReal x7875=r11*r11;
IkReal x7876=(r11*sj5);
IkReal x7877=(cj5*r10);
IkReal x7878=((r12*r12)+((x7874*(r10*r10)))+(((-2.0)*x7876*x7877))+x7875+(((-1.0)*x7874*x7875)));
j4eval[0]=x7878;
j4eval[1]=IKsign(x7878);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7876))+x7877))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7879=cj5*cj5;
IkReal x7880=r11*r11;
IkReal x7881=(cj5*r10);
IkReal x7882=(r11*sj5);
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7879*x7880))+(r12*r12)+x7880+((x7879*(r10*r10)))+(((-2.0)*x7881*x7882)))),-1);
if(!x7883.valid){
continue;
}
CheckValue<IkReal> x7884 = IKatan2WithCheck(IkReal(((((-1.0)*x7882))+x7881)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7883.value)))+(x7884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7885=IKsin(j4);
IkReal x7886=IKcos(j4);
IkReal x7887=(cj5*r10);
IkReal x7888=(r01*sj5);
IkReal x7889=(cj5*r00);
IkReal x7890=(cj5*r20);
IkReal x7891=((1.0)*x7886);
IkReal x7892=((1.0)*x7885);
IkReal x7893=(sj5*x7885);
evalcond[0]=(((r21*x7893))+(((-1.0)*r22*x7891))+(((-1.0)*x7890*x7892)));
evalcond[1]=(((x7885*x7888))+(((-1.0)*x7889*x7892))+(((-1.0)*r02*x7891)));
evalcond[2]=((((-1.0)*r11*sj5*x7891))+((x7886*x7887))+(((-1.0)*r12*x7892)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7891))+(((-1.0)*x7887*x7892))+((r11*x7893)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7891))+(((-1.0)*r22*x7892))+((x7886*x7890)));
evalcond[5]=((((-1.0)*x7888*x7891))+((x7886*x7889))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7894=((1.0)*cj5);
CheckValue<IkReal> x7895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7894)))),-1);
if(!x7895.valid){
continue;
}
CheckValue<IkReal> x7896 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7895.value)))+(x7896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7897=IKsin(j4);
IkReal x7898=IKcos(j4);
IkReal x7899=(cj5*r10);
IkReal x7900=(r01*sj5);
IkReal x7901=(cj5*r00);
IkReal x7902=(cj5*r20);
IkReal x7903=((1.0)*x7898);
IkReal x7904=((1.0)*x7897);
IkReal x7905=(sj5*x7897);
evalcond[0]=(((r21*x7905))+(((-1.0)*r22*x7903))+(((-1.0)*x7902*x7904)));
evalcond[1]=(((x7897*x7900))+(((-1.0)*x7901*x7904))+(((-1.0)*r02*x7903)));
evalcond[2]=((((-1.0)*r12*x7904))+(((-1.0)*r11*sj5*x7903))+((x7898*x7899)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7903))+(((-1.0)*x7899*x7904))+((r11*x7905)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7898*x7902))+(((-1.0)*r22*x7904))+(((-1.0)*r21*sj5*x7903)));
evalcond[5]=(((x7898*x7901))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7900*x7903))+(((-1.0)*r02*x7904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7906.valid){
continue;
}
CheckValue<IkReal> x7907 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7906.value)))+(x7907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7908=IKsin(j4);
IkReal x7909=IKcos(j4);
IkReal x7910=(cj5*r10);
IkReal x7911=(r01*sj5);
IkReal x7912=(cj5*r00);
IkReal x7913=(cj5*r20);
IkReal x7914=((1.0)*x7909);
IkReal x7915=((1.0)*x7908);
IkReal x7916=(sj5*x7908);
evalcond[0]=(((r21*x7916))+(((-1.0)*x7913*x7915))+(((-1.0)*r22*x7914)));
evalcond[1]=((((-1.0)*r02*x7914))+(((-1.0)*x7912*x7915))+((x7908*x7911)));
evalcond[2]=((((-1.0)*r11*sj5*x7914))+(((-1.0)*r12*x7915))+((x7909*x7910)));
evalcond[3]=((1.0)+(((-1.0)*x7910*x7915))+((r11*x7916))+(((-1.0)*r12*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7915))+(((-1.0)*r21*sj5*x7914))+((x7909*x7913)));
evalcond[5]=((((-1.0)*r02*x7915))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7911*x7914))+((x7909*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7917=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7917;
j4eval[1]=IKsign(x7917);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7918=((1.0)*cj5);
IkReal x7919=((((-1.0)*r21*x7918))+(((-1.0)*r20*sj5)));
j4eval[0]=x7919;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7918))))));
j4eval[2]=IKsign(x7919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7920=cj5*cj5;
IkReal x7921=r11*r11;
IkReal x7922=(cj5*r10);
IkReal x7923=(r11*sj5);
IkReal x7924=((((-1.0)*x7921))+((x7920*x7921))+(((-1.0)*x7920*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x7922*x7923)));
j4eval[0]=x7924;
j4eval[1]=((IKabs(((((-1.0)*x7923))+x7922)))+(IKabs(r12)));
j4eval[2]=IKsign(x7924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7925=cj5*cj5;
IkReal x7926=r11*r11;
IkReal x7927=(cj5*r10);
IkReal x7928=(r11*sj5);
CheckValue<IkReal> x7929 = IKatan2WithCheck(IkReal(((((-1.0)*x7928))+x7927)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7929.valid){
continue;
}
CheckValue<IkReal> x7930=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7925*(r10*r10)))+(((-1.0)*x7926))+(((-1.0)*(r12*r12)))+(((2.0)*x7927*x7928))+((x7925*x7926)))),-1);
if(!x7930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7929.value)+(((1.5707963267949)*(x7930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7931=IKsin(j4);
IkReal x7932=IKcos(j4);
IkReal x7933=(cj5*r10);
IkReal x7934=(r01*sj5);
IkReal x7935=(cj5*r00);
IkReal x7936=(cj5*r20);
IkReal x7937=((1.0)*x7932);
IkReal x7938=((1.0)*x7931);
IkReal x7939=(sj5*x7931);
evalcond[0]=(((r21*x7939))+(((-1.0)*r22*x7937))+(((-1.0)*x7936*x7938)));
evalcond[1]=((((-1.0)*x7935*x7938))+(((-1.0)*r02*x7937))+((x7931*x7934)));
evalcond[2]=((((-1.0)*r11*sj5*x7937))+((x7932*x7933))+(((-1.0)*r12*x7938)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7937))+((r11*x7939))+(((-1.0)*x7933*x7938)));
evalcond[4]=(((cj2*sj1))+((x7932*x7936))+(((-1.0)*r22*x7938))+(((-1.0)*r21*sj5*x7937))+((cj1*sj2)));
evalcond[5]=(((x7932*x7935))+(((-1.0)*x7934*x7937))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7938))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7940=((1.0)*cj5);
CheckValue<IkReal> x7941 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x7940))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7941.valid){
continue;
}
CheckValue<IkReal> x7942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7940))+(((-1.0)*r20*sj5)))),-1);
if(!x7942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7941.value)+(((1.5707963267949)*(x7942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7943=IKsin(j4);
IkReal x7944=IKcos(j4);
IkReal x7945=(cj5*r10);
IkReal x7946=(r01*sj5);
IkReal x7947=(cj5*r00);
IkReal x7948=(cj5*r20);
IkReal x7949=((1.0)*x7944);
IkReal x7950=((1.0)*x7943);
IkReal x7951=(sj5*x7943);
evalcond[0]=((((-1.0)*r22*x7949))+(((-1.0)*x7948*x7950))+((r21*x7951)));
evalcond[1]=((((-1.0)*x7947*x7950))+(((-1.0)*r02*x7949))+((x7943*x7946)));
evalcond[2]=((((-1.0)*r11*sj5*x7949))+(((-1.0)*r12*x7950))+((x7944*x7945)));
evalcond[3]=((-1.0)+((r11*x7951))+(((-1.0)*r12*x7949))+(((-1.0)*x7945*x7950)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7949))+(((-1.0)*r22*x7950))+((cj1*sj2))+((x7944*x7948)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7950))+((cj1*cj2))+(((-1.0)*x7946*x7949))+((x7944*x7947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7952.value)+(((1.5707963267949)*(x7953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7954=IKsin(j4);
IkReal x7955=IKcos(j4);
IkReal x7956=(cj5*r10);
IkReal x7957=(r01*sj5);
IkReal x7958=(cj5*r00);
IkReal x7959=(cj5*r20);
IkReal x7960=((1.0)*x7955);
IkReal x7961=((1.0)*x7954);
IkReal x7962=(sj5*x7954);
evalcond[0]=(((r21*x7962))+(((-1.0)*r22*x7960))+(((-1.0)*x7959*x7961)));
evalcond[1]=((((-1.0)*x7958*x7961))+((x7954*x7957))+(((-1.0)*r02*x7960)));
evalcond[2]=(((x7955*x7956))+(((-1.0)*r11*sj5*x7960))+(((-1.0)*r12*x7961)));
evalcond[3]=((-1.0)+(((-1.0)*x7956*x7961))+((r11*x7962))+(((-1.0)*r12*x7960)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7961))+((x7955*x7959))+((cj1*sj2))+(((-1.0)*r21*sj5*x7960)));
evalcond[5]=((((-1.0)*x7957*x7960))+((x7955*x7958))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7961))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7963=((-1.0)*r00);
IkReal x7965 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7965)==0){
continue;
}
IkReal x7964=pow(x7965,-0.5);
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7963),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7966.value));
IkReal gconst145=(r01*x7964);
IkReal gconst146=(x7963*x7964);
CheckValue<IkReal> x7967 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7967.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7967.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7968=((-1.0)*r00);
IkReal x7969=x7964;
CheckValue<IkReal> x7971 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7968),IKFAST_ATAN2_MAGTHRESH);
if(!x7971.valid){
continue;
}
IkReal x7970=((-1.0)*(x7971.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7970;
IkReal gconst144=x7970;
IkReal gconst145=(r01*x7969);
IkReal gconst146=(x7968*x7969);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7972=((1.0)*sj0);
IkReal x7973=((1.0)*gconst145);
CheckValue<IkReal> x7974 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7972)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7973))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7974.valid){
continue;
}
CheckValue<IkReal> x7975=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7973)))),-1);
if(!x7975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7974.value)+(((1.5707963267949)*(x7975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7976=IKsin(j4);
IkReal x7977=IKcos(j4);
IkReal x7978=(gconst146*r10);
IkReal x7979=(sj1*sj2);
IkReal x7980=(gconst146*r20);
IkReal x7981=(gconst146*r00);
IkReal x7982=((1.0)*x7977);
IkReal x7983=((1.0)*x7976);
IkReal x7984=(gconst145*x7976);
IkReal x7985=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7982))+(((-1.0)*x7980*x7983))+((r21*x7984)));
evalcond[1]=((((-1.0)*r12*x7982))+cj0+(((-1.0)*x7978*x7983))+((r11*x7984)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7981*x7983))+((r01*x7984))+(((-1.0)*r02*x7982)));
evalcond[3]=((((-1.0)*r22*x7983))+((cj2*sj1))+((x7977*x7980))+(((-1.0)*gconst145*r21*x7982))+((cj1*sj2)));
evalcond[4]=(((x7977*x7981))+((cj0*x7979))+(((-1.0)*cj0*x7985))+(((-1.0)*r02*x7983))+(((-1.0)*gconst145*r01*x7982)));
evalcond[5]=((((-1.0)*r12*x7983))+(((-1.0)*gconst145*r11*x7982))+((x7977*x7978))+(((-1.0)*sj0*x7985))+((sj0*x7979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7986=((1.0)*gconst146);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7986))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7986))+(((-1.0)*gconst145*r10)))),-1);
if(!x7988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7987.value)+(((1.5707963267949)*(x7988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7989=IKsin(j4);
IkReal x7990=IKcos(j4);
IkReal x7991=(gconst146*r10);
IkReal x7992=(sj1*sj2);
IkReal x7993=(gconst146*r20);
IkReal x7994=(gconst146*r00);
IkReal x7995=((1.0)*x7990);
IkReal x7996=((1.0)*x7989);
IkReal x7997=(gconst145*x7989);
IkReal x7998=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7997))+(((-1.0)*x7993*x7996))+(((-1.0)*r22*x7995)));
evalcond[1]=((((-1.0)*x7991*x7996))+((r11*x7997))+(((-1.0)*r12*x7995))+cj0);
evalcond[2]=((((-1.0)*sj0))+((r01*x7997))+(((-1.0)*r02*x7995))+(((-1.0)*x7994*x7996)));
evalcond[3]=(((cj2*sj1))+((x7990*x7993))+(((-1.0)*gconst145*r21*x7995))+((cj1*sj2))+(((-1.0)*r22*x7996)));
evalcond[4]=((((-1.0)*gconst145*r01*x7995))+((x7990*x7994))+((cj0*x7992))+(((-1.0)*cj0*x7998))+(((-1.0)*r02*x7996)));
evalcond[5]=(((x7990*x7991))+(((-1.0)*r12*x7996))+(((-1.0)*gconst145*r11*x7995))+((sj0*x7992))+(((-1.0)*sj0*x7998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7999=((-1.0)*r01);
IkReal x8001 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8001)==0){
continue;
}
IkReal x8000=pow(x8001,-0.5);
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(x7999),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8002.value))));
IkReal gconst148=(x7999*x8000);
IkReal gconst149=((1.0)*r00*x8000);
CheckValue<IkReal> x8003 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8003.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8003.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8004=((-1.0)*r01);
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal(x8004),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
IkReal x8005=((1.0)*(x8007.value));
IkReal x8006=x8000;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8005)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8005)));
IkReal gconst148=(x8004*x8006);
IkReal gconst149=((1.0)*r00*x8006);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8008=((-1.0)*r01);
CheckValue<IkReal> x8011 = IKatan2WithCheck(IkReal(x8008),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8011.valid){
continue;
}
IkReal x8009=((1.0)*(x8011.value));
IkReal x8010=x8000;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8009)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8009)));
IkReal gconst148=(x8008*x8010);
IkReal gconst149=((1.0)*r00*x8010);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8012=((-1.0)*r01);
CheckValue<IkReal> x8015 = IKatan2WithCheck(IkReal(x8012),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8015.valid){
continue;
}
IkReal x8013=((1.0)*(x8015.value));
IkReal x8014=x8000;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8013)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8013)));
IkReal gconst148=(x8012*x8014);
IkReal gconst149=((1.0)*r00*x8014);
IkReal x8016=r02*r02;
IkReal x8017=(r12*sj0);
IkReal x8018=((1.0)*cj0);
IkReal x8019=x8000;
j4eval[0]=((IKabs(((((-1.0)*x8018*x8019))+((cj0*x8016*x8019))+((r02*x8017*x8019)))))+(IKabs(((((-1.0)*r02*x8018))+(((-1.0)*x8017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8020=((1.0)*sj0);
IkReal x8021=((1.0)*gconst148);
CheckValue<IkReal> x8022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8021))+(((-1.0)*gconst149*r21)))),-1);
if(!x8022.valid){
continue;
}
CheckValue<IkReal> x8023 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8020))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8021))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8022.value)))+(x8023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8024=IKsin(j4);
IkReal x8025=IKcos(j4);
IkReal x8026=(gconst148*r11);
IkReal x8027=(sj1*sj2);
IkReal x8028=((1.0)*x8025);
IkReal x8029=(gconst149*x8025);
IkReal x8030=(gconst148*x8024);
IkReal x8031=((1.0)*cj1*cj2);
IkReal x8032=((1.0)*x8024);
evalcond[0]=((((-1.0)*gconst149*r20*x8032))+((r21*x8030))+(((-1.0)*r22*x8028)));
evalcond[1]=((((-1.0)*r12*x8028))+cj0+((x8024*x8026))+(((-1.0)*gconst149*r10*x8032)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8028))+(((-1.0)*gconst149*r00*x8032))+((r01*x8030)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8028))+((cj1*sj2))+((r20*x8029))+(((-1.0)*r22*x8032)));
evalcond[4]=((((-1.0)*gconst148*r01*x8028))+(((-1.0)*r02*x8032))+((cj0*x8027))+((r00*x8029))+(((-1.0)*cj0*x8031)));
evalcond[5]=(((r10*x8029))+(((-1.0)*sj0*x8031))+(((-1.0)*r12*x8032))+((sj0*x8027))+(((-1.0)*x8026*x8028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8033=((1.0)*gconst149);
CheckValue<IkReal> x8034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8033))+(((-1.0)*gconst148*r10)))),-1);
if(!x8034.valid){
continue;
}
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8033))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8034.value)))+(x8035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8036=IKsin(j4);
IkReal x8037=IKcos(j4);
IkReal x8038=(gconst148*r11);
IkReal x8039=(sj1*sj2);
IkReal x8040=((1.0)*x8037);
IkReal x8041=(gconst149*x8037);
IkReal x8042=(gconst148*x8036);
IkReal x8043=((1.0)*cj1*cj2);
IkReal x8044=((1.0)*x8036);
evalcond[0]=((((-1.0)*gconst149*r20*x8044))+((r21*x8042))+(((-1.0)*r22*x8040)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8044))+((x8036*x8038))+(((-1.0)*r12*x8040)));
evalcond[2]=(((r01*x8042))+(((-1.0)*sj0))+(((-1.0)*r02*x8040))+(((-1.0)*gconst149*r00*x8044)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8040))+((cj1*sj2))+((r20*x8041))+(((-1.0)*r22*x8044)));
evalcond[4]=((((-1.0)*cj0*x8043))+(((-1.0)*gconst148*r01*x8040))+((cj0*x8039))+(((-1.0)*r02*x8044))+((r00*x8041)));
evalcond[5]=(((r10*x8041))+((sj0*x8039))+(((-1.0)*sj0*x8043))+(((-1.0)*x8038*x8040))+(((-1.0)*r12*x8044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8045=((1.0)*gconst149);
CheckValue<IkReal> x8046=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8045)))),-1);
if(!x8046.valid){
continue;
}
CheckValue<IkReal> x8047 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8046.value)))+(x8047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8048=IKsin(j4);
IkReal x8049=IKcos(j4);
IkReal x8050=(gconst148*r11);
IkReal x8051=(sj1*sj2);
IkReal x8052=((1.0)*x8049);
IkReal x8053=(gconst149*x8049);
IkReal x8054=(gconst148*x8048);
IkReal x8055=((1.0)*cj1*cj2);
IkReal x8056=((1.0)*x8048);
evalcond[0]=((((-1.0)*gconst149*r20*x8056))+(((-1.0)*r22*x8052))+((r21*x8054)));
evalcond[1]=((((-1.0)*r12*x8052))+cj0+(((-1.0)*gconst149*r10*x8056))+((x8048*x8050)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8052))+(((-1.0)*gconst149*r00*x8056))+((r01*x8054)));
evalcond[3]=(((cj2*sj1))+((r20*x8053))+(((-1.0)*gconst148*r21*x8052))+((cj1*sj2))+(((-1.0)*r22*x8056)));
evalcond[4]=(((r00*x8053))+(((-1.0)*gconst148*r01*x8052))+((cj0*x8051))+(((-1.0)*r02*x8056))+(((-1.0)*cj0*x8055)));
evalcond[5]=((((-1.0)*r12*x8056))+(((-1.0)*sj0*x8055))+((r10*x8053))+(((-1.0)*x8050*x8052))+((sj0*x8051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8057=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8057;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8058=((1.0)*cj5);
IkReal x8059=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8058)));
j4eval[0]=x8059;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8058))))));
j4eval[2]=IKsign(x8059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8060=cj5*cj5;
IkReal x8061=r01*r01;
IkReal x8062=(r01*sj5);
IkReal x8063=(cj5*r00);
IkReal x8064=((((-1.0)*x8061))+((x8060*x8061))+(((-1.0)*(r02*r02)))+(((-1.0)*x8060*(r00*r00)))+(((2.0)*x8062*x8063)));
j4eval[0]=x8064;
j4eval[1]=IKsign(x8064);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8062))+x8063))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8065=cj5*cj5;
IkReal x8066=r01*r01;
IkReal x8067=(r01*sj5);
IkReal x8068=(cj5*r00);
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal(((((-1.0)*x8067))+x8068)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
CheckValue<IkReal> x8070=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8066))+((x8065*x8066))+(((2.0)*x8067*x8068))+(((-1.0)*(r02*r02)))+(((-1.0)*x8065*(r00*r00))))),-1);
if(!x8070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8069.value)+(((1.5707963267949)*(x8070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8071=IKsin(j4);
IkReal x8072=IKcos(j4);
IkReal x8073=(cj5*r10);
IkReal x8074=(r01*sj5);
IkReal x8075=(cj5*r00);
IkReal x8076=(cj5*r20);
IkReal x8077=((1.0)*x8072);
IkReal x8078=((1.0)*x8071);
IkReal x8079=(sj5*x8071);
evalcond[0]=(((r21*x8079))+(((-1.0)*r22*x8077))+(((-1.0)*x8076*x8078)));
evalcond[1]=((((-1.0)*x8073*x8078))+((r11*x8079))+(((-1.0)*r12*x8077)));
evalcond[2]=(((x8072*x8075))+(((-1.0)*r02*x8078))+(((-1.0)*x8074*x8077)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8077))+(((-1.0)*x8075*x8078))+((x8071*x8074)));
evalcond[4]=(((x8072*x8076))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8077))+(((-1.0)*r22*x8078)));
evalcond[5]=(((x8072*x8073))+(((-1.0)*r11*sj5*x8077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8080=((1.0)*cj5);
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
CheckValue<IkReal> x8082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8080)))),-1);
if(!x8082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8081.value)+(((1.5707963267949)*(x8082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8083=IKsin(j4);
IkReal x8084=IKcos(j4);
IkReal x8085=(cj5*r10);
IkReal x8086=(r01*sj5);
IkReal x8087=(cj5*r00);
IkReal x8088=(cj5*r20);
IkReal x8089=((1.0)*x8084);
IkReal x8090=((1.0)*x8083);
IkReal x8091=(sj5*x8083);
evalcond[0]=((((-1.0)*x8088*x8090))+(((-1.0)*r22*x8089))+((r21*x8091)));
evalcond[1]=((((-1.0)*x8085*x8090))+((r11*x8091))+(((-1.0)*r12*x8089)));
evalcond[2]=((((-1.0)*r02*x8090))+(((-1.0)*x8086*x8089))+((x8084*x8087)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8089))+(((-1.0)*x8087*x8090))+((x8083*x8086)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8089))+((cj1*sj2))+((x8084*x8088))+(((-1.0)*r22*x8090)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8089))+((x8084*x8085))+(((-1.0)*r12*x8090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8092.valid){
continue;
}
CheckValue<IkReal> x8093 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8092.value)))+(x8093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8094=IKsin(j4);
IkReal x8095=IKcos(j4);
IkReal x8096=(cj5*r10);
IkReal x8097=(r01*sj5);
IkReal x8098=(cj5*r00);
IkReal x8099=(cj5*r20);
IkReal x8100=((1.0)*x8095);
IkReal x8101=((1.0)*x8094);
IkReal x8102=(sj5*x8094);
evalcond[0]=((((-1.0)*x8099*x8101))+(((-1.0)*r22*x8100))+((r21*x8102)));
evalcond[1]=((((-1.0)*x8096*x8101))+((r11*x8102))+(((-1.0)*r12*x8100)));
evalcond[2]=(((x8095*x8098))+(((-1.0)*r02*x8101))+(((-1.0)*x8097*x8100)));
evalcond[3]=((-1.0)+(((-1.0)*x8098*x8101))+(((-1.0)*r02*x8100))+((x8094*x8097)));
evalcond[4]=((((-1.0)*r21*sj5*x8100))+((cj2*sj1))+((x8095*x8099))+((cj1*sj2))+(((-1.0)*r22*x8101)));
evalcond[5]=(((x8095*x8096))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8100))+(((-1.0)*r12*x8101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8103=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8103;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8104=((1.0)*cj5);
IkReal x8105=((((-1.0)*r21*x8104))+(((-1.0)*r20*sj5)));
j4eval[0]=x8105;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8104)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8106=cj5*cj5;
IkReal x8107=r01*r01;
IkReal x8108=(cj5*r00);
IkReal x8109=(r01*sj5);
IkReal x8110=((((-1.0)*x8106*x8107))+((x8106*(r00*r00)))+(((-2.0)*x8108*x8109))+(r02*r02)+x8107);
j4eval[0]=x8110;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8109))+x8108))));
j4eval[2]=IKsign(x8110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8111=cj5*cj5;
IkReal x8112=r01*r01;
IkReal x8113=(r01*sj5);
IkReal x8114=(cj5*r00);
CheckValue<IkReal> x8115 = IKatan2WithCheck(IkReal((x8114+(((-1.0)*x8113)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8113*x8114))+(r02*r02)+((x8111*(r00*r00)))+x8112+(((-1.0)*x8111*x8112)))),-1);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8115.value)+(((1.5707963267949)*(x8116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKsin(j4);
IkReal x8118=IKcos(j4);
IkReal x8119=(cj5*r10);
IkReal x8120=(r01*sj5);
IkReal x8121=(cj5*r00);
IkReal x8122=(cj5*r20);
IkReal x8123=((1.0)*x8118);
IkReal x8124=((1.0)*x8117);
IkReal x8125=(sj5*x8117);
evalcond[0]=((((-1.0)*x8122*x8124))+((r21*x8125))+(((-1.0)*r22*x8123)));
evalcond[1]=((((-1.0)*r12*x8123))+((r11*x8125))+(((-1.0)*x8119*x8124)));
evalcond[2]=(((x8118*x8121))+(((-1.0)*r02*x8124))+(((-1.0)*x8120*x8123)));
evalcond[3]=((1.0)+(((-1.0)*x8121*x8124))+((x8117*x8120))+(((-1.0)*r02*x8123)));
evalcond[4]=(((cj2*sj1))+((x8118*x8122))+(((-1.0)*r21*sj5*x8123))+((cj1*sj2))+(((-1.0)*r22*x8124)));
evalcond[5]=((((-1.0)*r11*sj5*x8123))+(((-1.0)*r12*x8124))+((x8118*x8119))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8126=((1.0)*cj5);
CheckValue<IkReal> x8127 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8127.valid){
continue;
}
CheckValue<IkReal> x8128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8126))+(((-1.0)*r20*sj5)))),-1);
if(!x8128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8127.value)+(((1.5707963267949)*(x8128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8129=IKsin(j4);
IkReal x8130=IKcos(j4);
IkReal x8131=(cj5*r10);
IkReal x8132=(r01*sj5);
IkReal x8133=(cj5*r00);
IkReal x8134=(cj5*r20);
IkReal x8135=((1.0)*x8130);
IkReal x8136=((1.0)*x8129);
IkReal x8137=(sj5*x8129);
evalcond[0]=((((-1.0)*x8134*x8136))+(((-1.0)*r22*x8135))+((r21*x8137)));
evalcond[1]=(((r11*x8137))+(((-1.0)*x8131*x8136))+(((-1.0)*r12*x8135)));
evalcond[2]=((((-1.0)*r02*x8136))+(((-1.0)*x8132*x8135))+((x8130*x8133)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8135))+((x8129*x8132))+(((-1.0)*x8133*x8136)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8136))+(((-1.0)*r21*sj5*x8135))+((cj1*sj2))+((x8130*x8134)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8130*x8131))+(((-1.0)*r12*x8136))+(((-1.0)*r11*sj5*x8135))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8138 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8138.valid){
continue;
}
CheckValue<IkReal> x8139=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8138.value)+(((1.5707963267949)*(x8139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8140=IKsin(j4);
IkReal x8141=IKcos(j4);
IkReal x8142=(cj5*r10);
IkReal x8143=(r01*sj5);
IkReal x8144=(cj5*r00);
IkReal x8145=(cj5*r20);
IkReal x8146=((1.0)*x8141);
IkReal x8147=((1.0)*x8140);
IkReal x8148=(sj5*x8140);
evalcond[0]=((((-1.0)*x8145*x8147))+(((-1.0)*r22*x8146))+((r21*x8148)));
evalcond[1]=(((r11*x8148))+(((-1.0)*r12*x8146))+(((-1.0)*x8142*x8147)));
evalcond[2]=(((x8141*x8144))+(((-1.0)*x8143*x8146))+(((-1.0)*r02*x8147)));
evalcond[3]=((1.0)+((x8140*x8143))+(((-1.0)*x8144*x8147))+(((-1.0)*r02*x8146)));
evalcond[4]=(((cj2*sj1))+((x8141*x8145))+((cj1*sj2))+(((-1.0)*r22*x8147))+(((-1.0)*r21*sj5*x8146)));
evalcond[5]=((((-1.0)*r11*sj5*x8146))+((x8141*x8142))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8147))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8149=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8149);
rxp1_1=(px*r21);
rxp1_2=(r11*x8149);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8150=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8150);
rxp1_1=(px*r21);
rxp1_2=(r11*x8150);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8151=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8151);
rxp1_1=(px*r21);
rxp1_2=(r11*x8151);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8154=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8154.valid){
continue;
}
IkReal x8152=x8154.value;
IkReal x8153=(sj0*x8152);
cj4array[0]=((((-1.0)*sj1*sj2*x8153))+((cj1*cj2*x8153)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8155=IKsin(j4);
IkReal x8156=IKcos(j4);
IkReal x8157=(r21*sj5);
IkReal x8158=(cj5*r20);
IkReal x8159=((1.0)*x8155);
IkReal x8160=((1.0)*x8156);
evalcond[0]=((-1.0)*r02*x8155);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8160)));
evalcond[2]=((((-1.0)*x8158*x8159))+((x8155*x8157)));
evalcond[3]=((((-1.0)*cj5*r10*x8159))+((r11*sj5*x8155)));
evalcond[4]=(((cj2*sj1))+((x8156*x8158))+(((-1.0)*x8157*x8160))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8163=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8163.valid){
continue;
}
IkReal x8161=x8163.value;
IkReal x8162=((1.0)*x8161);
cj4array[0]=((((-1.0)*cj2*sj1*x8162))+(((-1.0)*cj1*sj2*x8162)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8164=IKsin(j4);
IkReal x8165=IKcos(j4);
IkReal x8166=(r11*sj5);
IkReal x8167=((1.0)*sj0);
IkReal x8168=((1.0)*x8165);
IkReal x8169=((1.0)*cj5*x8164);
evalcond[0]=((-1.0)*r02*x8164);
evalcond[1]=((((-1.0)*r02*x8168))+(((-1.0)*x8167)));
evalcond[2]=(((r21*sj5*x8164))+(((-1.0)*r20*x8169)));
evalcond[3]=(((x8164*x8166))+(((-1.0)*r10*x8169)));
evalcond[4]=((((-1.0)*cj1*cj2*x8167))+(((-1.0)*x8166*x8168))+((cj5*r10*x8165))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8170=IKPowWithIntegerCheck(r02,-1);
if(!x8170.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8170.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(cj5*x8172);
IkReal x8174=(sj5*x8171);
IkReal x8175=((1.0)*sj5*x8172);
IkReal x8176=((1.0)*cj5*x8171);
evalcond[0]=((-1.0)*r02*x8171);
evalcond[1]=((((-1.0)*r20*x8176))+((r21*x8174)));
evalcond[2]=(((r11*x8174))+(((-1.0)*r10*x8176)));
evalcond[3]=(((cj2*sj1))+((r20*x8173))+((cj1*sj2))+(((-1.0)*r21*x8175)));
evalcond[4]=((((-1.0)*r11*x8175))+(((-1.0)*cj1*cj2*sj0))+((r10*x8173))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8177=((1.0)*sj0);
IkReal x8178=((1.0)*cj0);
CheckValue<IkReal> x8179 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8177))+(((-1.0)*r02*x8178)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8178))+(((-1.0)*r11*sj5*x8177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8179.valid){
continue;
}
CheckValue<IkReal> x8180=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8179.value)+(((1.5707963267949)*(x8180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8181=IKsin(j4);
IkReal x8182=IKcos(j4);
IkReal x8183=(cj5*r10);
IkReal x8184=(sj1*sj2);
IkReal x8185=(r01*sj5);
IkReal x8186=(cj5*r00);
IkReal x8187=(cj5*r20);
IkReal x8188=((1.0)*x8182);
IkReal x8189=((1.0)*cj1*cj2);
IkReal x8190=((1.0)*x8181);
IkReal x8191=(sj5*x8181);
evalcond[0]=((((-1.0)*r22*x8188))+((r21*x8191))+(((-1.0)*x8187*x8190)));
evalcond[1]=(((r11*x8191))+cj0+(((-1.0)*x8183*x8190))+(((-1.0)*r12*x8188)));
evalcond[2]=((((-1.0)*r02*x8188))+(((-1.0)*sj0))+(((-1.0)*x8186*x8190))+((x8181*x8185)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8190))+((cj1*sj2))+(((-1.0)*r21*sj5*x8188))+((x8182*x8187)));
evalcond[4]=((((-1.0)*r02*x8190))+((x8182*x8186))+(((-1.0)*x8185*x8188))+(((-1.0)*cj0*x8189))+((cj0*x8184)));
evalcond[5]=(((sj0*x8184))+((x8182*x8183))+(((-1.0)*r12*x8190))+(((-1.0)*sj0*x8189))+(((-1.0)*r11*sj5*x8188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8192=((1.0)*cj5);
CheckValue<IkReal> x8193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8192)))),-1);
if(!x8193.valid){
continue;
}
CheckValue<IkReal> x8194 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8193.value)))+(x8194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8195=IKsin(j4);
IkReal x8196=IKcos(j4);
IkReal x8197=(cj5*r10);
IkReal x8198=(sj1*sj2);
IkReal x8199=(r01*sj5);
IkReal x8200=(cj5*r00);
IkReal x8201=(cj5*r20);
IkReal x8202=((1.0)*x8196);
IkReal x8203=((1.0)*cj1*cj2);
IkReal x8204=((1.0)*x8195);
IkReal x8205=(sj5*x8195);
evalcond[0]=((((-1.0)*x8201*x8204))+(((-1.0)*r22*x8202))+((r21*x8205)));
evalcond[1]=(((r11*x8205))+cj0+(((-1.0)*r12*x8202))+(((-1.0)*x8197*x8204)));
evalcond[2]=((((-1.0)*sj0))+((x8195*x8199))+(((-1.0)*x8200*x8204))+(((-1.0)*r02*x8202)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8202))+(((-1.0)*r22*x8204))+((x8196*x8201)));
evalcond[4]=((((-1.0)*cj0*x8203))+(((-1.0)*r02*x8204))+((x8196*x8200))+(((-1.0)*x8199*x8202))+((cj0*x8198)));
evalcond[5]=(((sj0*x8198))+(((-1.0)*r12*x8204))+((x8196*x8197))+(((-1.0)*r11*sj5*x8202))+(((-1.0)*sj0*x8203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8206=((1.0)*cj5);
CheckValue<IkReal> x8207 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8207.valid){
continue;
}
CheckValue<IkReal> x8208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8206))+(((-1.0)*r00*sj5)))),-1);
if(!x8208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8207.value)+(((1.5707963267949)*(x8208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8209=IKsin(j4);
IkReal x8210=IKcos(j4);
IkReal x8211=(cj5*r10);
IkReal x8212=(sj1*sj2);
IkReal x8213=(r01*sj5);
IkReal x8214=(cj5*r00);
IkReal x8215=(cj5*r20);
IkReal x8216=((1.0)*x8210);
IkReal x8217=((1.0)*cj1*cj2);
IkReal x8218=((1.0)*x8209);
IkReal x8219=(sj5*x8209);
evalcond[0]=((((-1.0)*r22*x8216))+(((-1.0)*x8215*x8218))+((r21*x8219)));
evalcond[1]=(((r11*x8219))+cj0+(((-1.0)*x8211*x8218))+(((-1.0)*r12*x8216)));
evalcond[2]=(((x8209*x8213))+(((-1.0)*sj0))+(((-1.0)*r02*x8216))+(((-1.0)*x8214*x8218)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8216))+((x8210*x8215))+(((-1.0)*r22*x8218)));
evalcond[4]=((((-1.0)*cj0*x8217))+((cj0*x8212))+(((-1.0)*r02*x8218))+((x8210*x8214))+(((-1.0)*x8213*x8216)));
evalcond[5]=(((x8210*x8211))+(((-1.0)*r12*x8218))+(((-1.0)*sj0*x8217))+(((-1.0)*r11*sj5*x8216))+((sj0*x8212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8220=cj5*cj5;
IkReal x8221=r21*r21;
IkReal x8222=(cj2*sj1);
IkReal x8223=(cj1*sj2);
IkReal x8224=(r21*sj5);
IkReal x8225=((1.0)*cj5*r20);
CheckValue<IkReal> x8226=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8220*x8221))+(r22*r22)+(((-2.0)*cj5*r20*x8224))+((x8220*(r20*r20)))+x8221)),-1);
if(!x8226.valid){
continue;
}
CheckValue<IkReal> x8227 = IKatan2WithCheck(IkReal((((r22*x8222))+((r22*x8223)))),IkReal((((x8222*x8224))+(((-1.0)*x8223*x8225))+((x8223*x8224))+(((-1.0)*x8222*x8225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8226.value)))+(x8227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8228=IKsin(j4);
IkReal x8229=IKcos(j4);
IkReal x8230=(r21*sj5);
IkReal x8231=(cj5*r20);
IkReal x8232=((1.0)*x8229);
IkReal x8233=((1.0)*x8228);
evalcond[0]=(((x8228*x8230))+(((-1.0)*r22*x8232))+(((-1.0)*x8231*x8233)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x8229*x8231))+(((-1.0)*r22*x8233))+(((-1.0)*x8230*x8232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8234=(cj5*sj4);
IkReal x8235=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8235))+(((-1.0)*r00*x8234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8235))+((r10*x8234))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8235))+(((-1.0)*r00*x8234))))+IKsqr(((((-1.0)*r11*x8235))+((r10*x8234))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8235))+(((-1.0)*r00*x8234))), ((((-1.0)*r11*x8235))+((r10*x8234))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8236=IKcos(j0);
IkReal x8237=IKsin(j0);
IkReal x8238=(cj4*cj5);
IkReal x8239=(cj1*cj2);
IkReal x8240=(sj1*sj2);
IkReal x8241=((1.0)*sj2);
IkReal x8242=(r11*sj5);
IkReal x8243=((1.0)*sj5);
IkReal x8244=(cj5*r11);
IkReal x8245=((1.0)*sj4);
IkReal x8246=(cj5*r01);
IkReal x8247=(cj2*sj1);
IkReal x8248=((0.12)*sj5);
IkReal x8249=((1.0)*cj4);
IkReal x8250=((0.571)*x8236);
IkReal x8251=(cj1*x8237);
IkReal x8252=(cj1*x8236);
IkReal x8253=((0.571)*x8237);
IkReal x8254=((1.0)*x8236);
IkReal x8255=((1.0)*x8237);
evalcond[0]=((((-1.0)*cj5*r10*x8245))+(((-1.0)*r12*x8249))+((sj4*x8242))+x8236);
evalcond[1]=((((-1.0)*x8255))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8245))+(((-1.0)*r02*x8249)));
evalcond[2]=((((-1.0)*r00*x8243))+(((-1.0)*x8241*x8252))+(((-1.0)*x8247*x8254))+(((-1.0)*x8246)));
evalcond[3]=((((-1.0)*r10*x8243))+(((-1.0)*x8241*x8251))+(((-1.0)*x8247*x8255))+(((-1.0)*x8244)));
evalcond[4]=(((x8236*x8240))+((r00*x8238))+(((-1.0)*r02*x8245))+(((-1.0)*x8239*x8254))+(((-1.0)*cj4*r01*x8243)));
evalcond[5]=((((-1.0)*x8242*x8249))+((x8237*x8240))+((r10*x8238))+(((-1.0)*x8239*x8255))+(((-1.0)*r12*x8245)));
evalcond[6]=((((-1.0)*r00*x8248))+(((-0.174)*x8237))+(((-1.0)*x8240*x8250))+(((-1.0)*px))+(((-0.12)*x8246))+((x8239*x8250))+(((0.613)*x8252)));
evalcond[7]=((((0.174)*x8236))+(((-1.0)*x8240*x8253))+(((-1.0)*py))+(((-0.12)*x8244))+(((-1.0)*r10*x8248))+((x8239*x8253))+(((0.613)*x8251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
CheckValue<IkReal> x8257=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8257.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8256.value)+(((1.5707963267949)*(x8257.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8258=IKcos(j0);
IkReal x8259=IKsin(j0);
IkReal x8260=((0.571)*sj1);
IkReal x8261=((1.0)*cj1);
IkReal x8262=((0.571)*cj2);
IkReal x8263=((1.0)*sj5);
IkReal x8264=(cj5*r11);
IkReal x8265=(cj5*r01);
IkReal x8266=((0.12)*sj5);
IkReal x8267=(sj2*x8258);
IkReal x8268=(cj1*x8259);
IkReal x8269=(sj2*x8259);
IkReal x8270=((1.0)*cj2*sj1);
IkReal x8271=(cj1*x8258);
evalcond[0]=((((-1.0)*x8261*x8267))+(((-1.0)*x8258*x8270))+(((-1.0)*r00*x8263))+(((-1.0)*x8265)));
evalcond[1]=((((-1.0)*x8261*x8269))+(((-1.0)*r10*x8263))+(((-1.0)*x8259*x8270))+(((-1.0)*x8264)));
evalcond[2]=(((x8262*x8271))+(((0.613)*x8271))+(((-1.0)*x8260*x8267))+(((-0.12)*x8265))+(((-1.0)*px))+(((-0.174)*x8259))+(((-1.0)*r00*x8266)));
evalcond[3]=((((0.613)*x8268))+(((-1.0)*x8260*x8269))+(((-0.12)*x8264))+(((-1.0)*r10*x8266))+(((-1.0)*py))+(((0.174)*x8258))+((x8262*x8268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8272=((1.0)*cj5);
IkReal x8273=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8272)));
j4eval[0]=x8273;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8272)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8274=((1.0)*cj5);
IkReal x8275=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8274)));
j4eval[0]=x8275;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8274))))));
j4eval[2]=IKsign(x8275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8276=((1.0)*sj0);
IkReal x8277=((1.0)*cj0);
IkReal x8278=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8278;
j4eval[1]=((IKabs(((((-1.0)*r02*x8277))+(((-1.0)*r12*x8276)))))+(IKabs(((((-1.0)*r01*sj5*x8277))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8276))))));
j4eval[2]=IKsign(x8278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8279=((-1.0)*r20);
IkReal x8281 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8281)==0){
continue;
}
IkReal x8280=pow(x8281,-0.5);
CheckValue<IkReal> x8282 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8279),IKFAST_ATAN2_MAGTHRESH);
if(!x8282.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8282.value));
IkReal gconst133=(r21*x8280);
IkReal gconst134=(x8279*x8280);
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8283.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8284=((-1.0)*r20);
IkReal x8285=x8280;
CheckValue<IkReal> x8287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8284),IKFAST_ATAN2_MAGTHRESH);
if(!x8287.valid){
continue;
}
IkReal x8286=((-1.0)*(x8287.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8286;
IkReal gconst132=x8286;
IkReal gconst133=(r21*x8285);
IkReal gconst134=(x8284*x8285);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8288=((-1.0)*r20);
IkReal x8289=x8280;
CheckValue<IkReal> x8291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8288),IKFAST_ATAN2_MAGTHRESH);
if(!x8291.valid){
continue;
}
IkReal x8290=((-1.0)*(x8291.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8290;
IkReal gconst132=x8290;
IkReal gconst133=(r21*x8289);
IkReal gconst134=(x8288*x8289);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8292=((-1.0)*r20);
IkReal x8293=x8280;
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8292),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
IkReal x8294=((-1.0)*(x8295.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8294;
IkReal gconst132=x8294;
IkReal gconst133=(r21*x8293);
IkReal gconst134=(x8292*x8293);
IkReal x8296=r22*r22;
CheckValue<IkReal> x8299=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8296))),-1);
if(!x8299.valid){
continue;
}
IkReal x8297=x8299.value;
IkReal x8298=(((x8297*(r21*r21*r21*r21)))+((x8297*(r20*r20*r20*r20)))+(((2.0)*x8297*(r20*r20)*(r21*r21)))+x8296);
j4eval[0]=x8298;
j4eval[1]=IKsign(x8298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8300=(gconst133*r21);
IkReal x8301=(cj1*sj2);
IkReal x8302=(gconst134*r20);
IkReal x8303=(cj2*sj1);
CheckValue<IkReal> x8304 = IKatan2WithCheck(IkReal((((r22*x8303))+((r22*x8301)))),IkReal(((((-1.0)*x8302*x8303))+((x8300*x8301))+((x8300*x8303))+(((-1.0)*x8301*x8302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8304.valid){
continue;
}
CheckValue<IkReal> x8305=IKPowWithIntegerCheck(IKsign(((x8300*x8300)+(r22*r22)+(x8302*x8302)+(((-2.0)*x8300*x8302)))),-1);
if(!x8305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8304.value)+(((1.5707963267949)*(x8305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8306=IKsin(j4);
IkReal x8307=IKcos(j4);
IkReal x8308=(sj1*sj2);
IkReal x8309=(gconst133*r11);
IkReal x8310=(gconst133*r21);
IkReal x8311=(gconst133*r01);
IkReal x8312=((1.0)*x8307);
IkReal x8313=(gconst134*x8307);
IkReal x8314=((1.0)*x8306);
IkReal x8315=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8312))+((x8306*x8310))+(((-1.0)*gconst134*r20*x8314)));
evalcond[1]=(((x8306*x8309))+(((-1.0)*gconst134*r10*x8314))+cj0+(((-1.0)*r12*x8312)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8312))+((x8306*x8311))+(((-1.0)*gconst134*r00*x8314)));
evalcond[3]=(((cj2*sj1))+((r20*x8313))+(((-1.0)*x8310*x8312))+((cj1*sj2))+(((-1.0)*r22*x8314)));
evalcond[4]=(((r00*x8313))+(((-1.0)*r02*x8314))+(((-1.0)*x8311*x8312))+((cj0*x8308))+(((-1.0)*cj0*x8315)));
evalcond[5]=(((sj0*x8308))+(((-1.0)*sj0*x8315))+((r10*x8313))+(((-1.0)*x8309*x8312))+(((-1.0)*r12*x8314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8316=((1.0)*gconst134);
CheckValue<IkReal> x8317 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8316))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8317.valid){
continue;
}
CheckValue<IkReal> x8318=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8316)))),-1);
if(!x8318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8317.value)+(((1.5707963267949)*(x8318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8319=IKsin(j4);
IkReal x8320=IKcos(j4);
IkReal x8321=(sj1*sj2);
IkReal x8322=(gconst133*r11);
IkReal x8323=(gconst133*r21);
IkReal x8324=(gconst133*r01);
IkReal x8325=((1.0)*x8320);
IkReal x8326=(gconst134*x8320);
IkReal x8327=((1.0)*x8319);
IkReal x8328=((1.0)*cj1*cj2);
evalcond[0]=(((x8319*x8323))+(((-1.0)*gconst134*r20*x8327))+(((-1.0)*r22*x8325)));
evalcond[1]=(((x8319*x8322))+cj0+(((-1.0)*gconst134*r10*x8327))+(((-1.0)*r12*x8325)));
evalcond[2]=(((x8319*x8324))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8327))+(((-1.0)*r02*x8325)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8327))+((cj1*sj2))+(((-1.0)*x8323*x8325))+((r20*x8326)));
evalcond[4]=(((cj0*x8321))+((r00*x8326))+(((-1.0)*r02*x8327))+(((-1.0)*cj0*x8328))+(((-1.0)*x8324*x8325)));
evalcond[5]=(((r10*x8326))+(((-1.0)*x8322*x8325))+((sj0*x8321))+(((-1.0)*sj0*x8328))+(((-1.0)*r12*x8327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8329=((1.0)*gconst134);
CheckValue<IkReal> x8330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8329))+(((-1.0)*gconst133*r00)))),-1);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8329))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8330.value)))+(x8331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j4);
IkReal x8333=IKcos(j4);
IkReal x8334=(sj1*sj2);
IkReal x8335=(gconst133*r11);
IkReal x8336=(gconst133*r21);
IkReal x8337=(gconst133*r01);
IkReal x8338=((1.0)*x8333);
IkReal x8339=(gconst134*x8333);
IkReal x8340=((1.0)*x8332);
IkReal x8341=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8338))+((x8332*x8336))+(((-1.0)*gconst134*r20*x8340)));
evalcond[1]=((((-1.0)*gconst134*r10*x8340))+cj0+(((-1.0)*r12*x8338))+((x8332*x8335)));
evalcond[2]=((((-1.0)*sj0))+((x8332*x8337))+(((-1.0)*r02*x8338))+(((-1.0)*gconst134*r00*x8340)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8340))+((r20*x8339))+(((-1.0)*x8336*x8338)));
evalcond[4]=((((-1.0)*r02*x8340))+((r00*x8339))+(((-1.0)*cj0*x8341))+((cj0*x8334))+(((-1.0)*x8337*x8338)));
evalcond[5]=(((r10*x8339))+(((-1.0)*x8335*x8338))+(((-1.0)*r12*x8340))+((sj0*x8334))+(((-1.0)*sj0*x8341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8342=((-1.0)*r21);
IkReal x8344 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8344)==0){
continue;
}
IkReal x8343=pow(x8344,-0.5);
CheckValue<IkReal> x8345 = IKatan2WithCheck(IkReal(x8342),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8345.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8345.value))));
IkReal gconst136=(x8342*x8343);
IkReal gconst137=((1.0)*r20*x8343);
CheckValue<IkReal> x8346 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8346.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8346.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8347=((-1.0)*r21);
CheckValue<IkReal> x8350 = IKatan2WithCheck(IkReal(x8347),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8350.valid){
continue;
}
IkReal x8348=((1.0)*(x8350.value));
IkReal x8349=x8343;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8348)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8348)));
IkReal gconst136=(x8347*x8349);
IkReal gconst137=((1.0)*r20*x8349);
IkReal x8351=r22*r22;
IkReal x8352=((1.0)*x8351);
CheckValue<IkReal> x8356=IKPowWithIntegerCheck(((-1.0)+x8351),-1);
if(!x8356.valid){
continue;
}
IkReal x8353=x8356.value;
if((((1.0)+(((-1.0)*x8352)))) < -0.00001)
continue;
IkReal x8354=IKsqrt(((1.0)+(((-1.0)*x8352))));
IkReal x8355=(cj0*x8353*x8354);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x8355+(((-1.0)*x8352*x8355))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8357=((-1.0)*r21);
CheckValue<IkReal> x8360 = IKatan2WithCheck(IkReal(x8357),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8360.valid){
continue;
}
IkReal x8358=((1.0)*(x8360.value));
IkReal x8359=x8343;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8358)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8358)));
IkReal gconst136=(x8357*x8359);
IkReal gconst137=((1.0)*r20*x8359);
IkReal x8361=r22*r22;
IkReal x8362=((1.0)*x8361);
CheckValue<IkReal> x8366=IKPowWithIntegerCheck(((-1.0)+x8361),-1);
if(!x8366.valid){
continue;
}
IkReal x8363=x8366.value;
if((((1.0)+(((-1.0)*x8362)))) < -0.00001)
continue;
IkReal x8364=IKsqrt(((1.0)+(((-1.0)*x8362))));
IkReal x8365=(sj0*x8363*x8364);
j4eval[0]=((IKabs((x8365+(((-1.0)*x8362*x8365)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8367=((-1.0)*r21);
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal(x8367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
IkReal x8368=((1.0)*(x8370.value));
IkReal x8369=x8343;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8368)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8368)));
IkReal gconst136=(x8367*x8369);
IkReal gconst137=((1.0)*r20*x8369);
IkReal x8371=r22*r22;
IkReal x8372=(r12*sj0);
IkReal x8373=(cj0*r02);
CheckValue<IkReal> x8377=IKPowWithIntegerCheck(((-1.0)+x8371),-1);
if(!x8377.valid){
continue;
}
IkReal x8374=x8377.value;
if((((1.0)+(((-1.0)*x8371)))) < -0.00001)
continue;
IkReal x8375=IKsqrt(((1.0)+(((-1.0)*x8371))));
IkReal x8376=(r22*x8374*x8375);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8372))+(((-1.0)*x8373)))))+(IKabs((((x8372*x8376))+((x8373*x8376))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8378=((1.0)*sj0);
IkReal x8379=((1.0)*cj0);
CheckValue<IkReal> x8380=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8380.valid){
continue;
}
CheckValue<IkReal> x8381 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8378))+(((-1.0)*r02*x8379)))),IkReal(((((-1.0)*gconst136*r11*x8378))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x8379))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8380.value)))+(x8381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8382=IKsin(j4);
IkReal x8383=IKcos(j4);
IkReal x8384=(gconst136*r01);
IkReal x8385=(gconst137*r10);
IkReal x8386=(sj1*sj2);
IkReal x8387=(gconst137*r20);
IkReal x8388=(gconst136*r11);
IkReal x8389=(gconst136*r21);
IkReal x8390=(gconst137*r00);
IkReal x8391=((1.0)*x8383);
IkReal x8392=((1.0)*cj1*cj2);
IkReal x8393=((1.0)*x8382);
evalcond[0]=((((-1.0)*x8387*x8393))+(((-1.0)*r22*x8391))+((x8382*x8389)));
evalcond[1]=(cj0+(((-1.0)*x8385*x8393))+((x8382*x8388))+(((-1.0)*r12*x8391)));
evalcond[2]=((((-1.0)*x8390*x8393))+(((-1.0)*sj0))+(((-1.0)*r02*x8391))+((x8382*x8384)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8393))+(((-1.0)*x8389*x8391))+((x8383*x8387)));
evalcond[4]=((((-1.0)*r02*x8393))+(((-1.0)*cj0*x8392))+(((-1.0)*x8384*x8391))+((x8383*x8390))+((cj0*x8386)));
evalcond[5]=((((-1.0)*x8388*x8391))+(((-1.0)*sj0*x8392))+((sj0*x8386))+(((-1.0)*r12*x8393))+((x8383*x8385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8394=((1.0)*gconst137);
CheckValue<IkReal> x8395 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8394))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8395.valid){
continue;
}
CheckValue<IkReal> x8396=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8394)))),-1);
if(!x8396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8395.value)+(((1.5707963267949)*(x8396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8397=IKsin(j4);
IkReal x8398=IKcos(j4);
IkReal x8399=(gconst136*r01);
IkReal x8400=(gconst137*r10);
IkReal x8401=(sj1*sj2);
IkReal x8402=(gconst137*r20);
IkReal x8403=(gconst136*r11);
IkReal x8404=(gconst136*r21);
IkReal x8405=(gconst137*r00);
IkReal x8406=((1.0)*x8398);
IkReal x8407=((1.0)*cj1*cj2);
IkReal x8408=((1.0)*x8397);
evalcond[0]=((((-1.0)*r22*x8406))+(((-1.0)*x8402*x8408))+((x8397*x8404)));
evalcond[1]=(cj0+(((-1.0)*x8400*x8408))+(((-1.0)*r12*x8406))+((x8397*x8403)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8405*x8408))+((x8397*x8399))+(((-1.0)*r02*x8406)));
evalcond[3]=(((cj2*sj1))+((x8398*x8402))+((cj1*sj2))+(((-1.0)*r22*x8408))+(((-1.0)*x8404*x8406)));
evalcond[4]=((((-1.0)*cj0*x8407))+((x8398*x8405))+(((-1.0)*r02*x8408))+(((-1.0)*x8399*x8406))+((cj0*x8401)));
evalcond[5]=(((sj0*x8401))+((x8398*x8400))+(((-1.0)*sj0*x8407))+(((-1.0)*r12*x8408))+(((-1.0)*x8403*x8406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8409=((1.0)*gconst137);
CheckValue<IkReal> x8410=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8409))+(((-1.0)*gconst136*r00)))),-1);
if(!x8410.valid){
continue;
}
CheckValue<IkReal> x8411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8410.value)))+(x8411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8412=IKsin(j4);
IkReal x8413=IKcos(j4);
IkReal x8414=(gconst136*r01);
IkReal x8415=(gconst137*r10);
IkReal x8416=(sj1*sj2);
IkReal x8417=(gconst137*r20);
IkReal x8418=(gconst136*r11);
IkReal x8419=(gconst136*r21);
IkReal x8420=(gconst137*r00);
IkReal x8421=((1.0)*x8413);
IkReal x8422=((1.0)*cj1*cj2);
IkReal x8423=((1.0)*x8412);
evalcond[0]=(((x8412*x8419))+(((-1.0)*r22*x8421))+(((-1.0)*x8417*x8423)));
evalcond[1]=(((x8412*x8418))+cj0+(((-1.0)*x8415*x8423))+(((-1.0)*r12*x8421)));
evalcond[2]=((((-1.0)*sj0))+((x8412*x8414))+(((-1.0)*x8420*x8423))+(((-1.0)*r02*x8421)));
evalcond[3]=(((cj2*sj1))+((x8413*x8417))+((cj1*sj2))+(((-1.0)*r22*x8423))+(((-1.0)*x8419*x8421)));
evalcond[4]=(((x8413*x8420))+(((-1.0)*cj0*x8422))+(((-1.0)*r02*x8423))+((cj0*x8416))+(((-1.0)*x8414*x8421)));
evalcond[5]=(((x8413*x8415))+(((-1.0)*x8418*x8421))+(((-1.0)*sj0*x8422))+((sj0*x8416))+(((-1.0)*r12*x8423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8424=((-1.0)*r10);
IkReal x8426 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8426)==0){
continue;
}
IkReal x8425=pow(x8426,-0.5);
CheckValue<IkReal> x8427 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8424),IKFAST_ATAN2_MAGTHRESH);
if(!x8427.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8427.value));
IkReal gconst139=(r11*x8425);
IkReal gconst140=(x8424*x8425);
CheckValue<IkReal> x8428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8428.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8428.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8429=((-1.0)*r10);
IkReal x8430=x8425;
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8429),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
IkReal x8431=((-1.0)*(x8432.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8431;
IkReal gconst138=x8431;
IkReal gconst139=(r11*x8430);
IkReal gconst140=(x8429*x8430);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8433=((1.0)*sj0);
IkReal x8434=((1.0)*gconst139);
CheckValue<IkReal> x8435=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8434)))),-1);
if(!x8435.valid){
continue;
}
CheckValue<IkReal> x8436 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8433))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x8433))+((gconst140*r10*sj0))+((cj0*gconst140*r00))+(((-1.0)*cj0*r01*x8434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8435.value)))+(x8436.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8437=IKsin(j4);
IkReal x8438=IKcos(j4);
IkReal x8439=(gconst140*r00);
IkReal x8440=(sj1*sj2);
IkReal x8441=(gconst139*r11);
IkReal x8442=(gconst139*r01);
IkReal x8443=(gconst139*r21);
IkReal x8444=((1.0)*x8438);
IkReal x8445=((1.0)*x8437);
IkReal x8446=((1.0)*cj1*cj2);
IkReal x8447=(gconst140*x8438);
evalcond[0]=(((x8437*x8443))+(((-1.0)*r22*x8444))+(((-1.0)*gconst140*r20*x8445)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8445))+(((-1.0)*r12*x8444))+((x8437*x8441)));
evalcond[2]=((((-1.0)*sj0))+((x8437*x8442))+(((-1.0)*r02*x8444))+(((-1.0)*x8439*x8445)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8443*x8444))+((r20*x8447))+(((-1.0)*r22*x8445)));
evalcond[4]=(((x8438*x8439))+(((-1.0)*x8442*x8444))+(((-1.0)*cj0*x8446))+(((-1.0)*r02*x8445))+((cj0*x8440)));
evalcond[5]=((((-1.0)*r12*x8445))+((sj0*x8440))+(((-1.0)*sj0*x8446))+((r10*x8447))+(((-1.0)*x8441*x8444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8448=((1.0)*gconst140);
CheckValue<IkReal> x8449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8448))+(((-1.0)*gconst139*r00)))),-1);
if(!x8449.valid){
continue;
}
CheckValue<IkReal> x8450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8449.value)))+(x8450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8451=IKsin(j4);
IkReal x8452=IKcos(j4);
IkReal x8453=(gconst140*r00);
IkReal x8454=(sj1*sj2);
IkReal x8455=(gconst139*r11);
IkReal x8456=(gconst139*r01);
IkReal x8457=(gconst139*r21);
IkReal x8458=((1.0)*x8452);
IkReal x8459=((1.0)*x8451);
IkReal x8460=((1.0)*cj1*cj2);
IkReal x8461=(gconst140*x8452);
evalcond[0]=(((x8451*x8457))+(((-1.0)*r22*x8458))+(((-1.0)*gconst140*r20*x8459)));
evalcond[1]=(((x8451*x8455))+cj0+(((-1.0)*gconst140*r10*x8459))+(((-1.0)*r12*x8458)));
evalcond[2]=((((-1.0)*sj0))+((x8451*x8456))+(((-1.0)*x8453*x8459))+(((-1.0)*r02*x8458)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8457*x8458))+((cj1*sj2))+(((-1.0)*r22*x8459))+((r20*x8461)));
evalcond[4]=((((-1.0)*r02*x8459))+(((-1.0)*x8456*x8458))+((cj0*x8454))+((x8452*x8453))+(((-1.0)*cj0*x8460)));
evalcond[5]=((((-1.0)*sj0*x8460))+(((-1.0)*r12*x8459))+((sj0*x8454))+((r10*x8461))+(((-1.0)*x8455*x8458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8462=((-1.0)*r11);
IkReal x8464 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8464)==0){
continue;
}
IkReal x8463=pow(x8464,-0.5);
CheckValue<IkReal> x8465 = IKatan2WithCheck(IkReal(x8462),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8465.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8465.value))));
IkReal gconst142=(x8462*x8463);
IkReal gconst143=((1.0)*r10*x8463);
CheckValue<IkReal> x8466 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8466.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8466.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8467=((-1.0)*r11);
CheckValue<IkReal> x8470 = IKatan2WithCheck(IkReal(x8467),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8470.valid){
continue;
}
IkReal x8468=((1.0)*(x8470.value));
IkReal x8469=x8463;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8468)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8468)));
IkReal gconst142=(x8467*x8469);
IkReal gconst143=((1.0)*r10*x8469);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8471=((-1.0)*r11);
CheckValue<IkReal> x8474 = IKatan2WithCheck(IkReal(x8471),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8474.valid){
continue;
}
IkReal x8472=((1.0)*(x8474.value));
IkReal x8473=x8463;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8472)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8472)));
IkReal gconst142=(x8471*x8473);
IkReal gconst143=((1.0)*r10*x8473);
IkReal x8475=r12*r12;
IkReal x8476=((1.0)*sj0);
IkReal x8477=(cj0*r02);
IkReal x8478=x8463;
j4eval[0]=((IKabs(((((-1.0)*x8477))+(((-1.0)*r12*x8476)))))+(IKabs((((r12*x8477*x8478))+((sj0*x8475*x8478))+(((-1.0)*x8476*x8478))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8479=((-1.0)*r11);
CheckValue<IkReal> x8482 = IKatan2WithCheck(IkReal(x8479),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8482.valid){
continue;
}
IkReal x8480=((1.0)*(x8482.value));
IkReal x8481=x8463;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8480)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8480)));
IkReal gconst142=(x8479*x8481);
IkReal gconst143=((1.0)*r10*x8481);
IkReal x8483=r12*r12;
IkReal x8484=(cj1*r22*sj2);
IkReal x8485=(cj2*r22*sj1);
CheckValue<IkReal> x8489=IKPowWithIntegerCheck(((-1.0)+x8483),-1);
if(!x8489.valid){
continue;
}
IkReal x8486=x8489.value;
if((((1.0)+(((-1.0)*x8483)))) < -0.00001)
continue;
IkReal x8487=IKsqrt(((1.0)+(((-1.0)*x8483))));
IkReal x8488=((1.0)*r12*x8486*x8487);
j4eval[0]=((IKabs(((((-1.0)*x8484*x8488))+(((-1.0)*x8485*x8488)))))+(IKabs((x8484+x8485))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8490=(gconst142*r21);
IkReal x8491=(cj1*sj2);
IkReal x8492=(cj2*sj1);
IkReal x8493=(gconst143*r20);
CheckValue<IkReal> x8494=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8493*x8493)+(((-2.0)*x8490*x8493))+(x8490*x8490))),-1);
if(!x8494.valid){
continue;
}
CheckValue<IkReal> x8495 = IKatan2WithCheck(IkReal((((r22*x8492))+((r22*x8491)))),IkReal(((((-1.0)*x8492*x8493))+((x8490*x8491))+((x8490*x8492))+(((-1.0)*x8491*x8493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8494.value)))+(x8495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8496=IKsin(j4);
IkReal x8497=IKcos(j4);
IkReal x8498=(sj1*sj2);
IkReal x8499=(gconst143*r20);
IkReal x8500=((1.0)*x8497);
IkReal x8501=((1.0)*cj1*cj2);
IkReal x8502=((1.0)*x8496);
IkReal x8503=(gconst142*x8496);
IkReal x8504=(gconst143*x8497);
evalcond[0]=(((r21*x8503))+(((-1.0)*x8499*x8502))+(((-1.0)*r22*x8500)));
evalcond[1]=((((-1.0)*gconst143*r10*x8502))+cj0+((r11*x8503))+(((-1.0)*r12*x8500)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8502))+(((-1.0)*r02*x8500))+((r01*x8503)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8500))+((cj1*sj2))+((x8497*x8499))+(((-1.0)*r22*x8502)));
evalcond[4]=((((-1.0)*r02*x8502))+(((-1.0)*gconst142*r01*x8500))+(((-1.0)*cj0*x8501))+((r00*x8504))+((cj0*x8498)));
evalcond[5]=(((r10*x8504))+((sj0*x8498))+(((-1.0)*r12*x8502))+(((-1.0)*sj0*x8501))+(((-1.0)*gconst142*r11*x8500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8505=((1.0)*sj0);
IkReal x8506=((1.0)*gconst142);
CheckValue<IkReal> x8507 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8505)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8506))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x8505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8507.valid){
continue;
}
CheckValue<IkReal> x8508=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8506))+(((-1.0)*gconst143*r21)))),-1);
if(!x8508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8507.value)+(((1.5707963267949)*(x8508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8509=IKsin(j4);
IkReal x8510=IKcos(j4);
IkReal x8511=(sj1*sj2);
IkReal x8512=(gconst143*r20);
IkReal x8513=((1.0)*x8510);
IkReal x8514=((1.0)*cj1*cj2);
IkReal x8515=((1.0)*x8509);
IkReal x8516=(gconst142*x8509);
IkReal x8517=(gconst143*x8510);
evalcond[0]=((((-1.0)*x8512*x8515))+((r21*x8516))+(((-1.0)*r22*x8513)));
evalcond[1]=((((-1.0)*gconst143*r10*x8515))+cj0+((r11*x8516))+(((-1.0)*r12*x8513)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8515))+(((-1.0)*r02*x8513))+((r01*x8516)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8513))+((cj1*sj2))+(((-1.0)*r22*x8515))+((x8510*x8512)));
evalcond[4]=(((cj0*x8511))+(((-1.0)*r02*x8515))+(((-1.0)*cj0*x8514))+(((-1.0)*gconst142*r01*x8513))+((r00*x8517)));
evalcond[5]=(((sj0*x8511))+(((-1.0)*r12*x8515))+(((-1.0)*sj0*x8514))+(((-1.0)*gconst142*r11*x8513))+((r10*x8517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8518=((1.0)*gconst143);
CheckValue<IkReal> x8519=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8518)))),-1);
if(!x8519.valid){
continue;
}
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8518))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8519.value)))+(x8520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8521=IKsin(j4);
IkReal x8522=IKcos(j4);
IkReal x8523=(sj1*sj2);
IkReal x8524=(gconst143*r20);
IkReal x8525=((1.0)*x8522);
IkReal x8526=((1.0)*cj1*cj2);
IkReal x8527=((1.0)*x8521);
IkReal x8528=(gconst142*x8521);
IkReal x8529=(gconst143*x8522);
evalcond[0]=(((r21*x8528))+(((-1.0)*x8524*x8527))+(((-1.0)*r22*x8525)));
evalcond[1]=((((-1.0)*gconst143*r10*x8527))+cj0+((r11*x8528))+(((-1.0)*r12*x8525)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8525))+((r01*x8528))+(((-1.0)*gconst143*r00*x8527)));
evalcond[3]=(((cj2*sj1))+((x8522*x8524))+(((-1.0)*gconst142*r21*x8525))+((cj1*sj2))+(((-1.0)*r22*x8527)));
evalcond[4]=((((-1.0)*r02*x8527))+(((-1.0)*cj0*x8526))+((r00*x8529))+((cj0*x8523))+(((-1.0)*gconst142*r01*x8525)));
evalcond[5]=(((sj0*x8523))+(((-1.0)*gconst142*r11*x8525))+(((-1.0)*sj0*x8526))+(((-1.0)*r12*x8527))+((r10*x8529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8530=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8530;
j4eval[1]=IKsign(x8530);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8531=((1.0)*cj5);
IkReal x8532=((((-1.0)*r01*x8531))+(((-1.0)*r00*sj5)));
j4eval[0]=x8532;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8531)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8533=cj5*cj5;
IkReal x8534=r11*r11;
IkReal x8535=(r11*sj5);
IkReal x8536=(cj5*r10);
IkReal x8537=((r12*r12)+(((-2.0)*x8535*x8536))+x8534+((x8533*(r10*r10)))+(((-1.0)*x8533*x8534)));
j4eval[0]=x8537;
j4eval[1]=IKsign(x8537);
j4eval[2]=((IKabs(((((-1.0)*x8535))+x8536)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8538=cj5*cj5;
IkReal x8539=r11*r11;
IkReal x8540=(cj5*r10);
IkReal x8541=(r11*sj5);
CheckValue<IkReal> x8542=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8539+((x8538*(r10*r10)))+(((-1.0)*x8538*x8539))+(((-2.0)*x8540*x8541)))),-1);
if(!x8542.valid){
continue;
}
CheckValue<IkReal> x8543 = IKatan2WithCheck(IkReal((x8540+(((-1.0)*x8541)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8542.value)))+(x8543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8544=IKsin(j4);
IkReal x8545=IKcos(j4);
IkReal x8546=(cj5*r10);
IkReal x8547=(r01*sj5);
IkReal x8548=(cj5*r00);
IkReal x8549=(cj5*r20);
IkReal x8550=((1.0)*x8545);
IkReal x8551=((1.0)*x8544);
IkReal x8552=(sj5*x8544);
evalcond[0]=(((r21*x8552))+(((-1.0)*r22*x8550))+(((-1.0)*x8549*x8551)));
evalcond[1]=(((x8544*x8547))+(((-1.0)*x8548*x8551))+(((-1.0)*r02*x8550)));
evalcond[2]=((((-1.0)*r12*x8551))+(((-1.0)*r11*sj5*x8550))+((x8545*x8546)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8550))+(((-1.0)*x8546*x8551))+((r11*x8552)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8551))+(((-1.0)*r21*sj5*x8550))+((cj1*sj2))+((x8545*x8549)));
evalcond[5]=((((-1.0)*x8547*x8550))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8545*x8548))+(((-1.0)*r02*x8551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8553=((1.0)*cj5);
CheckValue<IkReal> x8554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8553))+(((-1.0)*r00*sj5)))),-1);
if(!x8554.valid){
continue;
}
CheckValue<IkReal> x8555 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8554.value)))+(x8555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8556=IKsin(j4);
IkReal x8557=IKcos(j4);
IkReal x8558=(cj5*r10);
IkReal x8559=(r01*sj5);
IkReal x8560=(cj5*r00);
IkReal x8561=(cj5*r20);
IkReal x8562=((1.0)*x8557);
IkReal x8563=((1.0)*x8556);
IkReal x8564=(sj5*x8556);
evalcond[0]=((((-1.0)*r22*x8562))+(((-1.0)*x8561*x8563))+((r21*x8564)));
evalcond[1]=((((-1.0)*x8560*x8563))+(((-1.0)*r02*x8562))+((x8556*x8559)));
evalcond[2]=((((-1.0)*r12*x8563))+(((-1.0)*r11*sj5*x8562))+((x8557*x8558)));
evalcond[3]=((1.0)+((r11*x8564))+(((-1.0)*r12*x8562))+(((-1.0)*x8558*x8563)));
evalcond[4]=(((x8557*x8561))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8563))+(((-1.0)*r21*sj5*x8562)));
evalcond[5]=(((x8557*x8560))+(((-1.0)*x8559*x8562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8565=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8565.valid){
continue;
}
CheckValue<IkReal> x8566 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8565.value)))+(x8566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8567=IKsin(j4);
IkReal x8568=IKcos(j4);
IkReal x8569=(cj5*r10);
IkReal x8570=(r01*sj5);
IkReal x8571=(cj5*r00);
IkReal x8572=(cj5*r20);
IkReal x8573=((1.0)*x8568);
IkReal x8574=((1.0)*x8567);
IkReal x8575=(sj5*x8567);
evalcond[0]=(((r21*x8575))+(((-1.0)*x8572*x8574))+(((-1.0)*r22*x8573)));
evalcond[1]=((((-1.0)*x8571*x8574))+(((-1.0)*r02*x8573))+((x8567*x8570)));
evalcond[2]=((((-1.0)*r11*sj5*x8573))+((x8568*x8569))+(((-1.0)*r12*x8574)));
evalcond[3]=((1.0)+(((-1.0)*x8569*x8574))+((r11*x8575))+(((-1.0)*r12*x8573)));
evalcond[4]=((((-1.0)*r21*sj5*x8573))+((cj2*sj1))+((cj1*sj2))+((x8568*x8572))+(((-1.0)*r22*x8574)));
evalcond[5]=((((-1.0)*r02*x8574))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8570*x8573))+((x8568*x8571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8576=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8576;
j4eval[1]=IKsign(x8576);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8577=((1.0)*cj5);
IkReal x8578=((((-1.0)*r21*x8577))+(((-1.0)*r20*sj5)));
j4eval[0]=x8578;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8577))))));
j4eval[2]=IKsign(x8578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8579=cj5*cj5;
IkReal x8580=r11*r11;
IkReal x8581=(cj5*r10);
IkReal x8582=(r11*sj5);
IkReal x8583=((((-1.0)*x8580))+(((2.0)*x8581*x8582))+(((-1.0)*(r12*r12)))+((x8579*x8580))+(((-1.0)*x8579*(r10*r10))));
j4eval[0]=x8583;
j4eval[1]=((IKabs(r12))+(IKabs((x8581+(((-1.0)*x8582))))));
j4eval[2]=IKsign(x8583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8584=cj5*cj5;
IkReal x8585=r11*r11;
IkReal x8586=(cj5*r10);
IkReal x8587=(r11*sj5);
CheckValue<IkReal> x8588 = IKatan2WithCheck(IkReal((x8586+(((-1.0)*x8587)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8588.valid){
continue;
}
CheckValue<IkReal> x8589=IKPowWithIntegerCheck(IKsign(((((2.0)*x8586*x8587))+(((-1.0)*x8585))+(((-1.0)*(r12*r12)))+(((-1.0)*x8584*(r10*r10)))+((x8584*x8585)))),-1);
if(!x8589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8588.value)+(((1.5707963267949)*(x8589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8590=IKsin(j4);
IkReal x8591=IKcos(j4);
IkReal x8592=(cj5*r10);
IkReal x8593=(r01*sj5);
IkReal x8594=(cj5*r00);
IkReal x8595=(cj5*r20);
IkReal x8596=((1.0)*x8591);
IkReal x8597=((1.0)*x8590);
IkReal x8598=(sj5*x8590);
evalcond[0]=((((-1.0)*r22*x8596))+(((-1.0)*x8595*x8597))+((r21*x8598)));
evalcond[1]=((((-1.0)*r02*x8596))+((x8590*x8593))+(((-1.0)*x8594*x8597)));
evalcond[2]=((((-1.0)*r11*sj5*x8596))+(((-1.0)*r12*x8597))+((x8591*x8592)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8596))+(((-1.0)*x8592*x8597))+((r11*x8598)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8597))+((cj1*sj2))+((x8591*x8595))+(((-1.0)*r21*sj5*x8596)));
evalcond[5]=((((-1.0)*r02*x8597))+(((-1.0)*sj1*sj2))+(((-1.0)*x8593*x8596))+((x8591*x8594))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8599=((1.0)*cj5);
CheckValue<IkReal> x8600 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8600.valid){
continue;
}
CheckValue<IkReal> x8601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8599))+(((-1.0)*r20*sj5)))),-1);
if(!x8601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8600.value)+(((1.5707963267949)*(x8601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8602=IKsin(j4);
IkReal x8603=IKcos(j4);
IkReal x8604=(cj5*r10);
IkReal x8605=(r01*sj5);
IkReal x8606=(cj5*r00);
IkReal x8607=(cj5*r20);
IkReal x8608=((1.0)*x8603);
IkReal x8609=((1.0)*x8602);
IkReal x8610=(sj5*x8602);
evalcond[0]=((((-1.0)*x8607*x8609))+(((-1.0)*r22*x8608))+((r21*x8610)));
evalcond[1]=((((-1.0)*r02*x8608))+((x8602*x8605))+(((-1.0)*x8606*x8609)));
evalcond[2]=((((-1.0)*r12*x8609))+(((-1.0)*r11*sj5*x8608))+((x8603*x8604)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8608))+((r11*x8610))+(((-1.0)*x8604*x8609)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8609))+(((-1.0)*r21*sj5*x8608))+((x8603*x8607)));
evalcond[5]=((((-1.0)*r02*x8609))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x8605*x8608))+((x8603*x8606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8611 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8611.valid){
continue;
}
CheckValue<IkReal> x8612=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8611.value)+(((1.5707963267949)*(x8612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8613=IKsin(j4);
IkReal x8614=IKcos(j4);
IkReal x8615=(cj5*r10);
IkReal x8616=(r01*sj5);
IkReal x8617=(cj5*r00);
IkReal x8618=(cj5*r20);
IkReal x8619=((1.0)*x8614);
IkReal x8620=((1.0)*x8613);
IkReal x8621=(sj5*x8613);
evalcond[0]=((((-1.0)*x8618*x8620))+((r21*x8621))+(((-1.0)*r22*x8619)));
evalcond[1]=((((-1.0)*r02*x8619))+((x8613*x8616))+(((-1.0)*x8617*x8620)));
evalcond[2]=((((-1.0)*r12*x8620))+((x8614*x8615))+(((-1.0)*r11*sj5*x8619)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8619))+(((-1.0)*x8615*x8620))+((r11*x8621)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8614*x8618))+(((-1.0)*r21*sj5*x8619))+(((-1.0)*r22*x8620)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8614*x8617))+((cj1*cj2))+(((-1.0)*x8616*x8619))+(((-1.0)*r02*x8620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8622=((-1.0)*r00);
IkReal x8624 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8624)==0){
continue;
}
IkReal x8623=pow(x8624,-0.5);
CheckValue<IkReal> x8625 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8622),IKFAST_ATAN2_MAGTHRESH);
if(!x8625.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8625.value));
IkReal gconst145=(r01*x8623);
IkReal gconst146=(x8622*x8623);
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8627=((-1.0)*r00);
IkReal x8628=x8623;
CheckValue<IkReal> x8630 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8627),IKFAST_ATAN2_MAGTHRESH);
if(!x8630.valid){
continue;
}
IkReal x8629=((-1.0)*(x8630.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8629;
IkReal gconst144=x8629;
IkReal gconst145=(r01*x8628);
IkReal gconst146=(x8627*x8628);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8631=((1.0)*sj0);
IkReal x8632=((1.0)*gconst145);
CheckValue<IkReal> x8633=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8632)))),-1);
if(!x8633.valid){
continue;
}
CheckValue<IkReal> x8634 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8631))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8632))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8633.value)))+(x8634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8635=IKsin(j4);
IkReal x8636=IKcos(j4);
IkReal x8637=(gconst146*r10);
IkReal x8638=(sj1*sj2);
IkReal x8639=(gconst146*r20);
IkReal x8640=(gconst146*r00);
IkReal x8641=((1.0)*x8636);
IkReal x8642=((1.0)*x8635);
IkReal x8643=(gconst145*x8635);
IkReal x8644=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8639*x8642))+(((-1.0)*r22*x8641))+((r21*x8643)));
evalcond[1]=(((r11*x8643))+cj0+(((-1.0)*x8637*x8642))+(((-1.0)*r12*x8641)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8641))+((r01*x8643))+(((-1.0)*x8640*x8642)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8642))+((x8636*x8639))+(((-1.0)*gconst145*r21*x8641)));
evalcond[4]=((((-1.0)*gconst145*r01*x8641))+((x8636*x8640))+((cj0*x8638))+(((-1.0)*cj0*x8644))+(((-1.0)*r02*x8642)));
evalcond[5]=(((sj0*x8638))+(((-1.0)*gconst145*r11*x8641))+((x8636*x8637))+(((-1.0)*sj0*x8644))+(((-1.0)*r12*x8642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8645=((1.0)*gconst146);
CheckValue<IkReal> x8646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8645)))),-1);
if(!x8646.valid){
continue;
}
CheckValue<IkReal> x8647 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8645))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8646.value)))+(x8647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8648=IKsin(j4);
IkReal x8649=IKcos(j4);
IkReal x8650=(gconst146*r10);
IkReal x8651=(sj1*sj2);
IkReal x8652=(gconst146*r20);
IkReal x8653=(gconst146*r00);
IkReal x8654=((1.0)*x8649);
IkReal x8655=((1.0)*x8648);
IkReal x8656=(gconst145*x8648);
IkReal x8657=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8656))+(((-1.0)*x8652*x8655))+(((-1.0)*r22*x8654)));
evalcond[1]=((((-1.0)*r12*x8654))+cj0+((r11*x8656))+(((-1.0)*x8650*x8655)));
evalcond[2]=(((r01*x8656))+(((-1.0)*sj0))+(((-1.0)*x8653*x8655))+(((-1.0)*r02*x8654)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8654))+((x8649*x8652))+(((-1.0)*r22*x8655)));
evalcond[4]=((((-1.0)*gconst145*r01*x8654))+((x8649*x8653))+((cj0*x8651))+(((-1.0)*cj0*x8657))+(((-1.0)*r02*x8655)));
evalcond[5]=((((-1.0)*gconst145*r11*x8654))+(((-1.0)*r12*x8655))+(((-1.0)*sj0*x8657))+((sj0*x8651))+((x8649*x8650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8658=((-1.0)*r01);
IkReal x8660 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8660)==0){
continue;
}
IkReal x8659=pow(x8660,-0.5);
CheckValue<IkReal> x8661 = IKatan2WithCheck(IkReal(x8658),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8661.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8661.value))));
IkReal gconst148=(x8658*x8659);
IkReal gconst149=((1.0)*r00*x8659);
CheckValue<IkReal> x8662 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8662.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8662.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8663=((-1.0)*r01);
CheckValue<IkReal> x8666 = IKatan2WithCheck(IkReal(x8663),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8666.valid){
continue;
}
IkReal x8664=((1.0)*(x8666.value));
IkReal x8665=x8659;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8664)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8664)));
IkReal gconst148=(x8663*x8665);
IkReal gconst149=((1.0)*r00*x8665);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8667=((-1.0)*r01);
CheckValue<IkReal> x8670 = IKatan2WithCheck(IkReal(x8667),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8670.valid){
continue;
}
IkReal x8668=((1.0)*(x8670.value));
IkReal x8669=x8659;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8668)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8668)));
IkReal gconst148=(x8667*x8669);
IkReal gconst149=((1.0)*r00*x8669);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8671=((-1.0)*r01);
CheckValue<IkReal> x8674 = IKatan2WithCheck(IkReal(x8671),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8674.valid){
continue;
}
IkReal x8672=((1.0)*(x8674.value));
IkReal x8673=x8659;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8672)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8672)));
IkReal gconst148=(x8671*x8673);
IkReal gconst149=((1.0)*r00*x8673);
IkReal x8675=r02*r02;
IkReal x8676=(r12*sj0);
IkReal x8677=((1.0)*cj0);
IkReal x8678=x8659;
j4eval[0]=((IKabs((((cj0*x8675*x8678))+((r02*x8676*x8678))+(((-1.0)*x8677*x8678)))))+(IKabs(((((-1.0)*r02*x8677))+(((-1.0)*x8676))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8679=((1.0)*sj0);
IkReal x8680=((1.0)*gconst148);
CheckValue<IkReal> x8681=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8680)))),-1);
if(!x8681.valid){
continue;
}
CheckValue<IkReal> x8682 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8679))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8680))+(((-1.0)*gconst148*r11*x8679))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8681.value)))+(x8682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8683=IKsin(j4);
IkReal x8684=IKcos(j4);
IkReal x8685=(gconst148*r11);
IkReal x8686=(sj1*sj2);
IkReal x8687=((1.0)*x8684);
IkReal x8688=(gconst149*x8684);
IkReal x8689=(gconst148*x8683);
IkReal x8690=((1.0)*cj1*cj2);
IkReal x8691=((1.0)*x8683);
evalcond[0]=((((-1.0)*r22*x8687))+(((-1.0)*gconst149*r20*x8691))+((r21*x8689)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8691))+((x8683*x8685))+(((-1.0)*r12*x8687)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8687))+((r01*x8689))+(((-1.0)*gconst149*r00*x8691)));
evalcond[3]=(((cj2*sj1))+((r20*x8688))+(((-1.0)*gconst148*r21*x8687))+((cj1*sj2))+(((-1.0)*r22*x8691)));
evalcond[4]=(((r00*x8688))+(((-1.0)*cj0*x8690))+(((-1.0)*r02*x8691))+(((-1.0)*gconst148*r01*x8687))+((cj0*x8686)));
evalcond[5]=(((r10*x8688))+(((-1.0)*sj0*x8690))+(((-1.0)*x8685*x8687))+(((-1.0)*r12*x8691))+((sj0*x8686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8692=((1.0)*gconst149);
CheckValue<IkReal> x8693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8692)))),-1);
if(!x8693.valid){
continue;
}
CheckValue<IkReal> x8694 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8692))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8693.value)))+(x8694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8695=IKsin(j4);
IkReal x8696=IKcos(j4);
IkReal x8697=(gconst148*r11);
IkReal x8698=(sj1*sj2);
IkReal x8699=((1.0)*x8696);
IkReal x8700=(gconst149*x8696);
IkReal x8701=(gconst148*x8695);
IkReal x8702=((1.0)*cj1*cj2);
IkReal x8703=((1.0)*x8695);
evalcond[0]=(((r21*x8701))+(((-1.0)*gconst149*r20*x8703))+(((-1.0)*r22*x8699)));
evalcond[1]=((((-1.0)*gconst149*r10*x8703))+cj0+((x8695*x8697))+(((-1.0)*r12*x8699)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8703))+(((-1.0)*r02*x8699))+((r01*x8701)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8699))+(((-1.0)*r22*x8703))+((r20*x8700)));
evalcond[4]=((((-1.0)*cj0*x8702))+((cj0*x8698))+(((-1.0)*r02*x8703))+((r00*x8700))+(((-1.0)*gconst148*r01*x8699)));
evalcond[5]=(((r10*x8700))+((sj0*x8698))+(((-1.0)*x8697*x8699))+(((-1.0)*sj0*x8702))+(((-1.0)*r12*x8703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8704=((1.0)*gconst149);
CheckValue<IkReal> x8705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8704)))),-1);
if(!x8705.valid){
continue;
}
CheckValue<IkReal> x8706 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8705.value)))+(x8706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8707=IKsin(j4);
IkReal x8708=IKcos(j4);
IkReal x8709=(gconst148*r11);
IkReal x8710=(sj1*sj2);
IkReal x8711=((1.0)*x8708);
IkReal x8712=(gconst149*x8708);
IkReal x8713=(gconst148*x8707);
IkReal x8714=((1.0)*cj1*cj2);
IkReal x8715=((1.0)*x8707);
evalcond[0]=((((-1.0)*r22*x8711))+(((-1.0)*gconst149*r20*x8715))+((r21*x8713)));
evalcond[1]=(cj0+(((-1.0)*r12*x8711))+((x8707*x8709))+(((-1.0)*gconst149*r10*x8715)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8711))+(((-1.0)*gconst149*r00*x8715))+((r01*x8713)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8711))+((cj1*sj2))+(((-1.0)*r22*x8715))+((r20*x8712)));
evalcond[4]=(((cj0*x8710))+(((-1.0)*gconst148*r01*x8711))+(((-1.0)*r02*x8715))+((r00*x8712))+(((-1.0)*cj0*x8714)));
evalcond[5]=((((-1.0)*x8709*x8711))+(((-1.0)*sj0*x8714))+(((-1.0)*r12*x8715))+((sj0*x8710))+((r10*x8712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8716=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8716;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8717=((1.0)*cj5);
IkReal x8718=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8717)));
j4eval[0]=x8718;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x8717))+((r21*sj5))))));
j4eval[2]=IKsign(x8718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8719=cj5*cj5;
IkReal x8720=r01*r01;
IkReal x8721=(r01*sj5);
IkReal x8722=(cj5*r00);
IkReal x8723=((((-1.0)*x8719*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8720))+(((2.0)*x8721*x8722))+((x8719*x8720)));
j4eval[0]=x8723;
j4eval[1]=IKsign(x8723);
j4eval[2]=((IKabs(r02))+(IKabs((x8722+(((-1.0)*x8721))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8724=cj5*cj5;
IkReal x8725=r01*r01;
IkReal x8726=(r01*sj5);
IkReal x8727=(cj5*r00);
CheckValue<IkReal> x8728 = IKatan2WithCheck(IkReal((x8727+(((-1.0)*x8726)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8728.valid){
continue;
}
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(IKsign((((x8724*x8725))+(((-1.0)*(r02*r02)))+(((-1.0)*x8725))+(((-1.0)*x8724*(r00*r00)))+(((2.0)*x8726*x8727)))),-1);
if(!x8729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8728.value)+(((1.5707963267949)*(x8729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8730=IKsin(j4);
IkReal x8731=IKcos(j4);
IkReal x8732=(cj5*r10);
IkReal x8733=(r01*sj5);
IkReal x8734=(cj5*r00);
IkReal x8735=(cj5*r20);
IkReal x8736=((1.0)*x8731);
IkReal x8737=((1.0)*x8730);
IkReal x8738=(sj5*x8730);
evalcond[0]=(((r21*x8738))+(((-1.0)*x8735*x8737))+(((-1.0)*r22*x8736)));
evalcond[1]=(((r11*x8738))+(((-1.0)*x8732*x8737))+(((-1.0)*r12*x8736)));
evalcond[2]=(((x8731*x8734))+(((-1.0)*x8733*x8736))+(((-1.0)*r02*x8737)));
evalcond[3]=((-1.0)+(((-1.0)*x8734*x8737))+(((-1.0)*r02*x8736))+((x8730*x8733)));
evalcond[4]=(((cj2*sj1))+((x8731*x8735))+((cj1*sj2))+(((-1.0)*r21*sj5*x8736))+(((-1.0)*r22*x8737)));
evalcond[5]=((((-1.0)*r11*sj5*x8736))+((x8731*x8732))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8739=((1.0)*cj5);
CheckValue<IkReal> x8740 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8740.valid){
continue;
}
CheckValue<IkReal> x8741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8739)))),-1);
if(!x8741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8740.value)+(((1.5707963267949)*(x8741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8742=IKsin(j4);
IkReal x8743=IKcos(j4);
IkReal x8744=(cj5*r10);
IkReal x8745=(r01*sj5);
IkReal x8746=(cj5*r00);
IkReal x8747=(cj5*r20);
IkReal x8748=((1.0)*x8743);
IkReal x8749=((1.0)*x8742);
IkReal x8750=(sj5*x8742);
evalcond[0]=((((-1.0)*r22*x8748))+((r21*x8750))+(((-1.0)*x8747*x8749)));
evalcond[1]=((((-1.0)*r12*x8748))+((r11*x8750))+(((-1.0)*x8744*x8749)));
evalcond[2]=(((x8743*x8746))+(((-1.0)*x8745*x8748))+(((-1.0)*r02*x8749)));
evalcond[3]=((-1.0)+((x8742*x8745))+(((-1.0)*x8746*x8749))+(((-1.0)*r02*x8748)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8748))+((cj1*sj2))+(((-1.0)*r22*x8749))+((x8743*x8747)));
evalcond[5]=((((-1.0)*r12*x8749))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8743*x8744))+(((-1.0)*r11*sj5*x8748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8751=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8751.valid){
continue;
}
CheckValue<IkReal> x8752 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8751.value)))+(x8752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8753=IKsin(j4);
IkReal x8754=IKcos(j4);
IkReal x8755=(cj5*r10);
IkReal x8756=(r01*sj5);
IkReal x8757=(cj5*r00);
IkReal x8758=(cj5*r20);
IkReal x8759=((1.0)*x8754);
IkReal x8760=((1.0)*x8753);
IkReal x8761=(sj5*x8753);
evalcond[0]=((((-1.0)*r22*x8759))+((r21*x8761))+(((-1.0)*x8758*x8760)));
evalcond[1]=((((-1.0)*x8755*x8760))+(((-1.0)*r12*x8759))+((r11*x8761)));
evalcond[2]=((((-1.0)*r02*x8760))+(((-1.0)*x8756*x8759))+((x8754*x8757)));
evalcond[3]=((-1.0)+(((-1.0)*x8757*x8760))+((x8753*x8756))+(((-1.0)*r02*x8759)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8760))+(((-1.0)*r21*sj5*x8759))+((x8754*x8758)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8759))+(((-1.0)*r12*x8760))+((x8754*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8762=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8762;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8763=((1.0)*cj5);
IkReal x8764=((((-1.0)*r21*x8763))+(((-1.0)*r20*sj5)));
j4eval[0]=x8764;
j4eval[1]=((IKabs(((((-1.0)*r10*x8763))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8765=cj5*cj5;
IkReal x8766=r01*r01;
IkReal x8767=(cj5*r00);
IkReal x8768=(r01*sj5);
IkReal x8769=(x8766+((x8765*(r00*r00)))+(((-2.0)*x8767*x8768))+(r02*r02)+(((-1.0)*x8765*x8766)));
j4eval[0]=x8769;
j4eval[1]=((IKabs(r02))+(IKabs((x8767+(((-1.0)*x8768))))));
j4eval[2]=IKsign(x8769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8770=cj5*cj5;
IkReal x8771=r01*r01;
IkReal x8772=(r01*sj5);
IkReal x8773=(cj5*r00);
CheckValue<IkReal> x8774=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8772*x8773))+x8771+(((-1.0)*x8770*x8771))+(r02*r02)+((x8770*(r00*r00))))),-1);
if(!x8774.valid){
continue;
}
CheckValue<IkReal> x8775 = IKatan2WithCheck(IkReal((x8773+(((-1.0)*x8772)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8774.value)))+(x8775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8776=IKsin(j4);
IkReal x8777=IKcos(j4);
IkReal x8778=(cj5*r10);
IkReal x8779=(r01*sj5);
IkReal x8780=(cj5*r00);
IkReal x8781=(cj5*r20);
IkReal x8782=((1.0)*x8777);
IkReal x8783=((1.0)*x8776);
IkReal x8784=(sj5*x8776);
evalcond[0]=(((r21*x8784))+(((-1.0)*x8781*x8783))+(((-1.0)*r22*x8782)));
evalcond[1]=(((r11*x8784))+(((-1.0)*x8778*x8783))+(((-1.0)*r12*x8782)));
evalcond[2]=(((x8777*x8780))+(((-1.0)*x8779*x8782))+(((-1.0)*r02*x8783)));
evalcond[3]=((1.0)+(((-1.0)*x8780*x8783))+(((-1.0)*r02*x8782))+((x8776*x8779)));
evalcond[4]=(((cj2*sj1))+((x8777*x8781))+((cj1*sj2))+(((-1.0)*r22*x8783))+(((-1.0)*r21*sj5*x8782)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x8777*x8778))+(((-1.0)*r12*x8783))+(((-1.0)*r11*sj5*x8782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8785=((1.0)*cj5);
CheckValue<IkReal> x8786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8785))+(((-1.0)*r20*sj5)))),-1);
if(!x8786.valid){
continue;
}
CheckValue<IkReal> x8787 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8786.value)))+(x8787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8788=IKsin(j4);
IkReal x8789=IKcos(j4);
IkReal x8790=(cj5*r10);
IkReal x8791=(r01*sj5);
IkReal x8792=(cj5*r00);
IkReal x8793=(cj5*r20);
IkReal x8794=((1.0)*x8789);
IkReal x8795=((1.0)*x8788);
IkReal x8796=(sj5*x8788);
evalcond[0]=(((r21*x8796))+(((-1.0)*x8793*x8795))+(((-1.0)*r22*x8794)));
evalcond[1]=((((-1.0)*r12*x8794))+((r11*x8796))+(((-1.0)*x8790*x8795)));
evalcond[2]=(((x8789*x8792))+(((-1.0)*r02*x8795))+(((-1.0)*x8791*x8794)));
evalcond[3]=((1.0)+(((-1.0)*x8792*x8795))+((x8788*x8791))+(((-1.0)*r02*x8794)));
evalcond[4]=(((cj2*sj1))+((x8789*x8793))+((cj1*sj2))+(((-1.0)*r22*x8795))+(((-1.0)*r21*sj5*x8794)));
evalcond[5]=((((-1.0)*r12*x8795))+(((-1.0)*r11*sj5*x8794))+((x8789*x8790))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8797 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8797.valid){
continue;
}
CheckValue<IkReal> x8798=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8797.value)+(((1.5707963267949)*(x8798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8799=IKsin(j4);
IkReal x8800=IKcos(j4);
IkReal x8801=(cj5*r10);
IkReal x8802=(r01*sj5);
IkReal x8803=(cj5*r00);
IkReal x8804=(cj5*r20);
IkReal x8805=((1.0)*x8800);
IkReal x8806=((1.0)*x8799);
IkReal x8807=(sj5*x8799);
evalcond[0]=(((r21*x8807))+(((-1.0)*r22*x8805))+(((-1.0)*x8804*x8806)));
evalcond[1]=((((-1.0)*r12*x8805))+((r11*x8807))+(((-1.0)*x8801*x8806)));
evalcond[2]=(((x8800*x8803))+(((-1.0)*r02*x8806))+(((-1.0)*x8802*x8805)));
evalcond[3]=((1.0)+(((-1.0)*x8803*x8806))+(((-1.0)*r02*x8805))+((x8799*x8802)));
evalcond[4]=(((cj2*sj1))+((x8800*x8804))+(((-1.0)*r22*x8806))+((cj1*sj2))+(((-1.0)*r21*sj5*x8805)));
evalcond[5]=((((-1.0)*r12*x8806))+((x8800*x8801))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8808=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8808);
rxp1_1=(px*r21);
rxp1_2=(r11*x8808);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8809=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8809);
rxp1_1=(px*r21);
rxp1_2=(r11*x8809);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8810=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8810);
rxp1_1=(px*r21);
rxp1_2=(r11*x8810);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8813=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8813.valid){
continue;
}
IkReal x8811=x8813.value;
IkReal x8812=(sj0*x8811);
cj4array[0]=((((-1.0)*sj1*sj2*x8812))+((cj1*cj2*x8812)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8814=IKsin(j4);
IkReal x8815=IKcos(j4);
IkReal x8816=(r21*sj5);
IkReal x8817=(cj5*r20);
IkReal x8818=((1.0)*x8814);
IkReal x8819=((1.0)*x8815);
evalcond[0]=((-1.0)*r02*x8814);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8819)));
evalcond[2]=(((x8814*x8816))+(((-1.0)*x8817*x8818)));
evalcond[3]=((((-1.0)*cj5*r10*x8818))+((r11*sj5*x8814)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8816*x8819))+((cj1*sj2))+((x8815*x8817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8822=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8822.valid){
continue;
}
IkReal x8820=x8822.value;
IkReal x8821=((1.0)*x8820);
cj4array[0]=((((-1.0)*cj1*sj2*x8821))+(((-1.0)*cj2*sj1*x8821)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8823=IKsin(j4);
IkReal x8824=IKcos(j4);
IkReal x8825=(r11*sj5);
IkReal x8826=((1.0)*sj0);
IkReal x8827=((1.0)*x8824);
IkReal x8828=((1.0)*cj5*x8823);
evalcond[0]=((-1.0)*r02*x8823);
evalcond[1]=((((-1.0)*r02*x8827))+(((-1.0)*x8826)));
evalcond[2]=((((-1.0)*r20*x8828))+((r21*sj5*x8823)));
evalcond[3]=(((x8823*x8825))+(((-1.0)*r10*x8828)));
evalcond[4]=(((sj0*sj1*sj2))+((cj5*r10*x8824))+(((-1.0)*x8825*x8827))+(((-1.0)*cj1*cj2*x8826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8829=IKPowWithIntegerCheck(r02,-1);
if(!x8829.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8829.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8830=IKsin(j4);
IkReal x8831=IKcos(j4);
IkReal x8832=(cj5*x8831);
IkReal x8833=(sj5*x8830);
IkReal x8834=((1.0)*sj5*x8831);
IkReal x8835=((1.0)*cj5*x8830);
evalcond[0]=((-1.0)*r02*x8830);
evalcond[1]=(((r21*x8833))+(((-1.0)*r20*x8835)));
evalcond[2]=((((-1.0)*r10*x8835))+((r11*x8833)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8832))+(((-1.0)*r21*x8834)));
evalcond[4]=(((r10*x8832))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8836=((1.0)*sj0);
IkReal x8837=((1.0)*cj0);
CheckValue<IkReal> x8838 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8837))+(((-1.0)*r12*x8836)))),IkReal(((((-1.0)*r01*sj5*x8837))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8838.valid){
continue;
}
CheckValue<IkReal> x8839=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8838.value)+(((1.5707963267949)*(x8839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8840=IKsin(j4);
IkReal x8841=IKcos(j4);
IkReal x8842=(cj5*r10);
IkReal x8843=(sj1*sj2);
IkReal x8844=(r01*sj5);
IkReal x8845=(cj5*r00);
IkReal x8846=(cj5*r20);
IkReal x8847=((1.0)*x8841);
IkReal x8848=((1.0)*cj1*cj2);
IkReal x8849=((1.0)*x8840);
IkReal x8850=(sj5*x8840);
evalcond[0]=(((r21*x8850))+(((-1.0)*r22*x8847))+(((-1.0)*x8846*x8849)));
evalcond[1]=((((-1.0)*x8842*x8849))+cj0+((r11*x8850))+(((-1.0)*r12*x8847)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8845*x8849))+((x8840*x8844))+(((-1.0)*r02*x8847)));
evalcond[3]=(((cj2*sj1))+((x8841*x8846))+((cj1*sj2))+(((-1.0)*r21*sj5*x8847))+(((-1.0)*r22*x8849)));
evalcond[4]=((((-1.0)*cj0*x8848))+((cj0*x8843))+((x8841*x8845))+(((-1.0)*r02*x8849))+(((-1.0)*x8844*x8847)));
evalcond[5]=(((x8841*x8842))+(((-1.0)*sj0*x8848))+((sj0*x8843))+(((-1.0)*r11*sj5*x8847))+(((-1.0)*r12*x8849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8851=((1.0)*cj5);
CheckValue<IkReal> x8852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8851)))),-1);
if(!x8852.valid){
continue;
}
CheckValue<IkReal> x8853 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8852.value)))+(x8853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8854=IKsin(j4);
IkReal x8855=IKcos(j4);
IkReal x8856=(cj5*r10);
IkReal x8857=(sj1*sj2);
IkReal x8858=(r01*sj5);
IkReal x8859=(cj5*r00);
IkReal x8860=(cj5*r20);
IkReal x8861=((1.0)*x8855);
IkReal x8862=((1.0)*cj1*cj2);
IkReal x8863=((1.0)*x8854);
IkReal x8864=(sj5*x8854);
evalcond[0]=(((r21*x8864))+(((-1.0)*r22*x8861))+(((-1.0)*x8860*x8863)));
evalcond[1]=(cj0+((r11*x8864))+(((-1.0)*r12*x8861))+(((-1.0)*x8856*x8863)));
evalcond[2]=((((-1.0)*sj0))+((x8854*x8858))+(((-1.0)*r02*x8861))+(((-1.0)*x8859*x8863)));
evalcond[3]=(((cj2*sj1))+((x8855*x8860))+((cj1*sj2))+(((-1.0)*r22*x8863))+(((-1.0)*r21*sj5*x8861)));
evalcond[4]=((((-1.0)*cj0*x8862))+((cj0*x8857))+(((-1.0)*x8858*x8861))+(((-1.0)*r02*x8863))+((x8855*x8859)));
evalcond[5]=(((sj0*x8857))+(((-1.0)*r11*sj5*x8861))+(((-1.0)*sj0*x8862))+(((-1.0)*r12*x8863))+((x8855*x8856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8865=((1.0)*cj5);
CheckValue<IkReal> x8866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8865)))),-1);
if(!x8866.valid){
continue;
}
CheckValue<IkReal> x8867 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8866.value)))+(x8867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8868=IKsin(j4);
IkReal x8869=IKcos(j4);
IkReal x8870=(cj5*r10);
IkReal x8871=(sj1*sj2);
IkReal x8872=(r01*sj5);
IkReal x8873=(cj5*r00);
IkReal x8874=(cj5*r20);
IkReal x8875=((1.0)*x8869);
IkReal x8876=((1.0)*cj1*cj2);
IkReal x8877=((1.0)*x8868);
IkReal x8878=(sj5*x8868);
evalcond[0]=((((-1.0)*r22*x8875))+((r21*x8878))+(((-1.0)*x8874*x8877)));
evalcond[1]=((((-1.0)*x8870*x8877))+cj0+((r11*x8878))+(((-1.0)*r12*x8875)));
evalcond[2]=((((-1.0)*x8873*x8877))+(((-1.0)*sj0))+(((-1.0)*r02*x8875))+((x8868*x8872)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8875))+(((-1.0)*r22*x8877))+((cj1*sj2))+((x8869*x8874)));
evalcond[4]=((((-1.0)*r02*x8877))+(((-1.0)*x8872*x8875))+((x8869*x8873))+(((-1.0)*cj0*x8876))+((cj0*x8871)));
evalcond[5]=((((-1.0)*r11*sj5*x8875))+(((-1.0)*r12*x8877))+(((-1.0)*sj0*x8876))+((x8869*x8870))+((sj0*x8871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8879=cj1*cj1;
IkReal x8880=cj2*cj2;
IkReal x8881=(cj1*cj2);
IkReal x8882=(sj1*sj2);
IkReal x8883=(r00*sj5);
IkReal x8884=((18390.0)*cj1);
IkReal x8885=((153250.0)*cj1);
IkReal x8886=(cj5*r01);
IkReal x8887=(cj5*r11);
IkReal x8888=((142750.0)*py);
IkReal x8889=(r10*sj5);
IkReal x8890=((142750.0)*px);
IkReal x8891=((17130.0)*x8886);
IkReal x8892=((17130.0)*x8889);
CheckValue<IkReal> x8893=IKPowWithIntegerCheck(IKsign(((89079.25)+(((-81510.25)*x8880))+(((175011.5)*cj2*x8879))+(((12432.0)*x8879))+(((163020.5)*x8879*x8880))+(((-163020.5)*x8881*x8882))+(((-175011.5)*cj1*x8882)))),-1);
if(!x8893.valid){
continue;
}
CheckValue<IkReal> x8894 = IKatan2WithCheck(IkReal(((((-5220.0)*x8883))+(((-5220.0)*x8886))+(((-1.0)*x8882*x8888))+((x8884*x8889))+((x8884*x8887))+(((-17130.0)*x8882*x8887))+((x8881*x8888))+((py*x8885))+((x8881*x8892))+(((17130.0)*x8881*x8887))+(((-1.0)*x8882*x8892))+(((-43500.0)*px)))),IkReal((((x8884*x8886))+(((-17130.0)*x8882*x8883))+(((5220.0)*x8889))+(((5220.0)*x8887))+(((43500.0)*py))+((x8881*x8891))+((x8881*x8890))+(((17130.0)*x8881*x8883))+((px*x8885))+(((-1.0)*x8882*x8890))+(((-1.0)*x8882*x8891))+((x8883*x8884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8894.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8893.value)))+(x8894.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8895=IKcos(j0);
IkReal x8896=IKsin(j0);
IkReal x8897=(cj1*cj2);
IkReal x8898=((0.613)*cj1);
IkReal x8899=((0.12)*cj5);
IkReal x8900=(sj1*sj2);
IkReal x8901=((0.12)*sj5);
IkReal x8902=((0.571)*x8895);
IkReal x8903=((0.571)*x8896);
evalcond[0]=((((-1.0)*r01*x8899))+((x8897*x8902))+(((-1.0)*x8900*x8902))+(((-1.0)*px))+((x8895*x8898))+(((-0.174)*x8896))+(((-1.0)*r00*x8901)));
evalcond[1]=((((-1.0)*r10*x8901))+((x8897*x8903))+(((-1.0)*x8900*x8903))+((x8896*x8898))+(((-1.0)*py))+(((-1.0)*r11*x8899))+(((0.174)*x8895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8904=((1.0)*cj5);
IkReal x8905=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8904)));
j4eval[0]=x8905;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8904))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8906=((1.0)*cj5);
IkReal x8907=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8906)));
j4eval[0]=x8907;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8906))))));
j4eval[2]=IKsign(x8907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8908=((1.0)*sj0);
IkReal x8909=((1.0)*cj0);
IkReal x8910=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8910;
j4eval[1]=((IKabs(((((-1.0)*r02*x8909))+(((-1.0)*r12*x8908)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8909))+(((-1.0)*r11*sj5*x8908))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x8910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8911=((-1.0)*r20);
IkReal x8913 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8913)==0){
continue;
}
IkReal x8912=pow(x8913,-0.5);
CheckValue<IkReal> x8914 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8911),IKFAST_ATAN2_MAGTHRESH);
if(!x8914.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8914.value));
IkReal gconst1=(r21*x8912);
IkReal gconst2=(x8911*x8912);
CheckValue<IkReal> x8915 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8915.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8915.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8916=((-1.0)*r20);
IkReal x8917=x8912;
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8916),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
IkReal x8918=((-1.0)*(x8919.value));
sj5=gconst1;
cj5=gconst2;
j5=x8918;
IkReal gconst0=x8918;
IkReal gconst1=(r21*x8917);
IkReal gconst2=(x8916*x8917);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8920=((-1.0)*r20);
IkReal x8921=x8912;
CheckValue<IkReal> x8923 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8920),IKFAST_ATAN2_MAGTHRESH);
if(!x8923.valid){
continue;
}
IkReal x8922=((-1.0)*(x8923.value));
sj5=gconst1;
cj5=gconst2;
j5=x8922;
IkReal gconst0=x8922;
IkReal gconst1=(r21*x8921);
IkReal gconst2=(x8920*x8921);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8924=((-1.0)*r20);
IkReal x8925=x8912;
CheckValue<IkReal> x8927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8924),IKFAST_ATAN2_MAGTHRESH);
if(!x8927.valid){
continue;
}
IkReal x8926=((-1.0)*(x8927.value));
sj5=gconst1;
cj5=gconst2;
j5=x8926;
IkReal gconst0=x8926;
IkReal gconst1=(r21*x8925);
IkReal gconst2=(x8924*x8925);
IkReal x8928=r22*r22;
CheckValue<IkReal> x8932=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8928))),-1);
if(!x8932.valid){
continue;
}
IkReal x8929=x8932.value;
IkReal x8930=(sj3*x8929);
IkReal x8931=(((x8930*(r20*r20*r20*r20)))+(((2.0)*x8930*(r20*r20)*(r21*r21)))+((x8930*(r21*r21*r21*r21)))+((sj3*x8928)));
j4eval[0]=x8931;
j4eval[1]=IKsign(x8931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8933=((-1.0)*r20);
IkReal x8934=x8912;
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8933),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
IkReal x8935=((-1.0)*(x8936.value));
sj5=gconst1;
cj5=gconst2;
j5=x8935;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8935;
IkReal gconst1=(r21*x8934);
IkReal gconst2=(x8933*x8934);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8937=((-1.0)*r20);
IkReal x8938=x8912;
CheckValue<IkReal> x8940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8937),IKFAST_ATAN2_MAGTHRESH);
if(!x8940.valid){
continue;
}
IkReal x8939=((-1.0)*(x8940.value));
sj5=gconst1;
cj5=gconst2;
j5=x8939;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8939;
IkReal gconst1=(r21*x8938);
IkReal gconst2=(x8937*x8938);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8941=((-1.0)*r20);
IkReal x8942=x8912;
CheckValue<IkReal> x8944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8941),IKFAST_ATAN2_MAGTHRESH);
if(!x8944.valid){
continue;
}
IkReal x8943=((-1.0)*(x8944.value));
sj5=gconst1;
cj5=gconst2;
j5=x8943;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8943;
IkReal gconst1=(r21*x8942);
IkReal gconst2=(x8941*x8942);
IkReal x8945=((1.0)*(r22*r22));
CheckValue<IkReal> x8949=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8945))),-1);
if(!x8949.valid){
continue;
}
IkReal x8946=x8949.value;
IkReal x8947=((1.0)*x8946);
IkReal x8948=((((-1.0)*x8947*(r21*r21*r21*r21)))+(((-1.0)*x8947*(r20*r20*r20*r20)))+(((-2.0)*x8946*(r20*r20)*(r21*r21)))+(((-1.0)*x8945)));
j4eval[0]=x8948;
j4eval[1]=IKsign(x8948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8950=((-1.0)*r20);
IkReal x8951=x8912;
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8950),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
IkReal x8952=((-1.0)*(x8953.value));
sj5=gconst1;
cj5=gconst2;
j5=x8952;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8952;
IkReal gconst1=(r21*x8951);
IkReal gconst2=(x8950*x8951);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8954=((-1.0)*r20);
IkReal x8955=x8912;
CheckValue<IkReal> x8957 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8954),IKFAST_ATAN2_MAGTHRESH);
if(!x8957.valid){
continue;
}
IkReal x8956=((-1.0)*(x8957.value));
sj5=gconst1;
cj5=gconst2;
j5=x8956;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8956;
IkReal gconst1=(r21*x8955);
IkReal gconst2=(x8954*x8955);
IkReal x8958=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8962=IKPowWithIntegerCheck(x8958,-1);
if(!x8962.valid){
continue;
}
IkReal x8959=x8962.value;
IkReal x8960=((1.0)*x8959);
IkReal x8961=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8959))+(((-1.0)*x8960*(r11*r11)*(r21*r21)))+(((-1.0)*x8960*(r10*r10)*(r20*r20))));
j4eval[0]=x8961;
j4eval[1]=r12;
j4eval[2]=x8958;
j4eval[3]=IKsign(x8961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8963=((-1.0)*r20);
IkReal x8964=x8912;
CheckValue<IkReal> x8966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8963),IKFAST_ATAN2_MAGTHRESH);
if(!x8966.valid){
continue;
}
IkReal x8965=((-1.0)*(x8966.value));
sj5=gconst1;
cj5=gconst2;
j5=x8965;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8965;
IkReal gconst1=(r21*x8964);
IkReal gconst2=(x8963*x8964);
IkReal x8967=r22*r22;
IkReal x8968=(cj1*r12*sj2);
IkReal x8969=(cj2*r12*sj1);
CheckValue<IkReal> x8973=IKPowWithIntegerCheck(((-1.0)+x8967),-1);
if(!x8973.valid){
continue;
}
IkReal x8970=x8973.value;
if((((1.0)+(((-1.0)*x8967)))) < -0.00001)
continue;
IkReal x8971=IKsqrt(((1.0)+(((-1.0)*x8967))));
IkReal x8972=(r22*x8970*x8971);
j4eval[0]=((IKabs((((x8968*x8972))+((x8969*x8972)))))+(IKabs(((((-1.0)*x8969))+(((-1.0)*x8968))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8974=(cj1*sj2);
IkReal x8975=(cj2*sj1);
IkReal x8976=((1.0)*r12);
IkReal x8977=(gconst1*r11);
IkReal x8978=((1.0)*gconst2*r10);
CheckValue<IkReal> x8979=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8979.valid){
continue;
}
CheckValue<IkReal> x8980 = IKatan2WithCheck(IkReal(((((-1.0)*x8975*x8978))+(((-1.0)*x8974*x8978))+((x8975*x8977))+((x8974*x8977)))),IkReal(((((-1.0)*x8975*x8976))+(((-1.0)*x8974*x8976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8979.value)))+(x8980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8981=IKcos(j4);
IkReal x8982=IKsin(j4);
IkReal x8983=((1.0)*x8981);
IkReal x8984=(gconst1*x8981);
IkReal x8985=(gconst1*x8982);
IkReal x8986=((1.0)*gconst2*x8982);
evalcond[0]=((((-1.0)*gconst2*r10*x8983))+((r11*x8984))+((r12*x8982)));
evalcond[1]=((((-1.0)*r20*x8986))+((r21*x8985))+(((-1.0)*r22*x8983)));
evalcond[2]=(((r01*x8985))+(((-1.0)*r02*x8983))+(((-1.0)*r00*x8986)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8983))+((r11*x8985))+(((-1.0)*r10*x8986)));
evalcond[4]=((((-1.0)*gconst2*r20*x8983))+((cj2*sj1))+((r22*x8982))+((cj1*sj2))+((r21*x8984)));
evalcond[5]=(((r01*x8984))+((r02*x8982))+(((-1.0)*gconst2*r00*x8983))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8987=(gconst2*r10);
IkReal x8988=(gconst1*r11);
CheckValue<IkReal> x8989 = IKatan2WithCheck(IkReal(((((-1.0)*x8987))+x8988)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8989.valid){
continue;
}
CheckValue<IkReal> x8990=IKPowWithIntegerCheck(IKsign(((((2.0)*x8987*x8988))+(((-1.0)*(x8987*x8987)))+(((-1.0)*(x8988*x8988)))+(((-1.0)*(r12*r12))))),-1);
if(!x8990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8989.value)+(((1.5707963267949)*(x8990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8991=IKcos(j4);
IkReal x8992=IKsin(j4);
IkReal x8993=((1.0)*x8991);
IkReal x8994=(gconst1*x8991);
IkReal x8995=(gconst1*x8992);
IkReal x8996=((1.0)*gconst2*x8992);
evalcond[0]=(((r11*x8994))+((r12*x8992))+(((-1.0)*gconst2*r10*x8993)));
evalcond[1]=(((r21*x8995))+(((-1.0)*r22*x8993))+(((-1.0)*r20*x8996)));
evalcond[2]=(((r01*x8995))+(((-1.0)*r02*x8993))+(((-1.0)*r00*x8996)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8993))+((r11*x8995))+(((-1.0)*r10*x8996)));
evalcond[4]=(((cj2*sj1))+((r21*x8994))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8993))+((r22*x8992)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8994))+(((-1.0)*gconst2*r00*x8993))+((r02*x8992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8997=((1.0)*gconst2);
CheckValue<IkReal> x8998 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8998.valid){
continue;
}
CheckValue<IkReal> x8999=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8997)))),-1);
if(!x8999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8998.value)+(((1.5707963267949)*(x8999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9000=IKcos(j4);
IkReal x9001=IKsin(j4);
IkReal x9002=((1.0)*x9000);
IkReal x9003=(gconst1*x9000);
IkReal x9004=(gconst1*x9001);
IkReal x9005=((1.0)*gconst2*x9001);
evalcond[0]=((((-1.0)*gconst2*r10*x9002))+((r11*x9003))+((r12*x9001)));
evalcond[1]=((((-1.0)*r22*x9002))+((r21*x9004))+(((-1.0)*r20*x9005)));
evalcond[2]=((((-1.0)*r02*x9002))+(((-1.0)*r00*x9005))+((r01*x9004)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9002))+(((-1.0)*r10*x9005))+((r11*x9004)));
evalcond[4]=(((cj2*sj1))+((r21*x9003))+((r22*x9001))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9002)));
evalcond[5]=(((r02*x9001))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9002))+((r01*x9003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9006=((-1.0)*r20);
IkReal x9007=x8912;
CheckValue<IkReal> x9009 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9006),IKFAST_ATAN2_MAGTHRESH);
if(!x9009.valid){
continue;
}
IkReal x9008=((-1.0)*(x9009.value));
sj5=gconst1;
cj5=gconst2;
j5=x9008;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9008;
IkReal gconst1=(r21*x9007);
IkReal gconst2=(x9006*x9007);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9010=((-1.0)*r20);
IkReal x9011=x8912;
CheckValue<IkReal> x9013 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9010),IKFAST_ATAN2_MAGTHRESH);
if(!x9013.valid){
continue;
}
IkReal x9012=((-1.0)*(x9013.value));
sj5=gconst1;
cj5=gconst2;
j5=x9012;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9012;
IkReal gconst1=(r21*x9011);
IkReal gconst2=(x9010*x9011);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9014=((-1.0)*r20);
IkReal x9015=x8912;
CheckValue<IkReal> x9017 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9014),IKFAST_ATAN2_MAGTHRESH);
if(!x9017.valid){
continue;
}
IkReal x9016=((-1.0)*(x9017.value));
sj5=gconst1;
cj5=gconst2;
j5=x9016;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9016;
IkReal gconst1=(r21*x9015);
IkReal gconst2=(x9014*x9015);
IkReal x9018=r22*r22;
IkReal x9019=(cj1*r12*sj2);
IkReal x9020=(cj2*r12*sj1);
CheckValue<IkReal> x9024=IKPowWithIntegerCheck(((-1.0)+x9018),-1);
if(!x9024.valid){
continue;
}
IkReal x9021=x9024.value;
if((((1.0)+(((-1.0)*x9018)))) < -0.00001)
continue;
IkReal x9022=IKsqrt(((1.0)+(((-1.0)*x9018))));
IkReal x9023=(r22*x9021*x9022);
j4eval[0]=((IKabs(((((-1.0)*x9019))+(((-1.0)*x9020)))))+(IKabs((((x9019*x9023))+((x9020*x9023))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9025=(cj1*sj2);
IkReal x9026=(cj2*sj1);
IkReal x9027=((1.0)*r12);
IkReal x9028=(gconst1*r11);
IkReal x9029=((1.0)*gconst2*r10);
CheckValue<IkReal> x9030=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9030.valid){
continue;
}
CheckValue<IkReal> x9031 = IKatan2WithCheck(IkReal((((x9026*x9028))+(((-1.0)*x9026*x9029))+((x9025*x9028))+(((-1.0)*x9025*x9029)))),IkReal(((((-1.0)*x9026*x9027))+(((-1.0)*x9025*x9027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9030.value)))+(x9031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9032=IKcos(j4);
IkReal x9033=IKsin(j4);
IkReal x9034=((1.0)*x9032);
IkReal x9035=(gconst1*x9032);
IkReal x9036=(gconst1*x9033);
IkReal x9037=((1.0)*gconst2*x9033);
evalcond[0]=((((-1.0)*gconst2*r10*x9034))+((r11*x9035))+((r12*x9033)));
evalcond[1]=(((r21*x9036))+(((-1.0)*r20*x9037))+(((-1.0)*r22*x9034)));
evalcond[2]=(((r01*x9036))+(((-1.0)*r00*x9037))+(((-1.0)*r02*x9034)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9037))+(((-1.0)*r12*x9034))+((r11*x9036)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9034))+((cj1*sj2))+((r22*x9033))+((r21*x9035)));
evalcond[5]=(((r01*x9035))+(((-1.0)*sj1*sj2))+((r02*x9033))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9038=(gconst1*r11);
IkReal x9039=(gconst2*r10);
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal((x9038+(((-1.0)*x9039)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
CheckValue<IkReal> x9041=IKPowWithIntegerCheck(IKsign(((x9039*x9039)+(r12*r12)+(x9038*x9038)+(((-2.0)*x9038*x9039)))),-1);
if(!x9041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9040.value)+(((1.5707963267949)*(x9041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9042=IKcos(j4);
IkReal x9043=IKsin(j4);
IkReal x9044=((1.0)*x9042);
IkReal x9045=(gconst1*x9042);
IkReal x9046=(gconst1*x9043);
IkReal x9047=((1.0)*gconst2*x9043);
evalcond[0]=(((r12*x9043))+((r11*x9045))+(((-1.0)*gconst2*r10*x9044)));
evalcond[1]=((((-1.0)*r22*x9044))+(((-1.0)*r20*x9047))+((r21*x9046)));
evalcond[2]=(((r01*x9046))+(((-1.0)*r00*x9047))+(((-1.0)*r02*x9044)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9047))+(((-1.0)*r12*x9044))+((r11*x9046)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9043))+((r21*x9045))+(((-1.0)*gconst2*r20*x9044)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9045))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9044))+((r02*x9043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9048 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9048.valid){
continue;
}
CheckValue<IkReal> x9049=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9048.value)+(((1.5707963267949)*(x9049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9050=IKcos(j4);
IkReal x9051=IKsin(j4);
IkReal x9052=((1.0)*x9050);
IkReal x9053=(gconst1*x9050);
IkReal x9054=(gconst1*x9051);
IkReal x9055=((1.0)*gconst2*x9051);
evalcond[0]=((((-1.0)*gconst2*r10*x9052))+((r12*x9051))+((r11*x9053)));
evalcond[1]=((((-1.0)*r22*x9052))+(((-1.0)*r20*x9055))+((r21*x9054)));
evalcond[2]=((((-1.0)*r02*x9052))+(((-1.0)*r00*x9055))+((r01*x9054)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9055))+(((-1.0)*r12*x9052))+((r11*x9054)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9051))+(((-1.0)*gconst2*r20*x9052))+((r21*x9053)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9053))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9052))+((r02*x9051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9056=((-1.0)*r20);
IkReal x9057=x8912;
CheckValue<IkReal> x9059 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9056),IKFAST_ATAN2_MAGTHRESH);
if(!x9059.valid){
continue;
}
IkReal x9058=((-1.0)*(x9059.value));
sj5=gconst1;
cj5=gconst2;
j5=x9058;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9058;
IkReal gconst1=(r21*x9057);
IkReal gconst2=(x9056*x9057);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9060=((-1.0)*r20);
IkReal x9061=x8912;
CheckValue<IkReal> x9063 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9060),IKFAST_ATAN2_MAGTHRESH);
if(!x9063.valid){
continue;
}
IkReal x9062=((-1.0)*(x9063.value));
sj5=gconst1;
cj5=gconst2;
j5=x9062;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9062;
IkReal gconst1=(r21*x9061);
IkReal gconst2=(x9060*x9061);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9064=((-1.0)*r20);
IkReal x9065=x8912;
CheckValue<IkReal> x9067 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9064),IKFAST_ATAN2_MAGTHRESH);
if(!x9067.valid){
continue;
}
IkReal x9066=((-1.0)*(x9067.value));
sj5=gconst1;
cj5=gconst2;
j5=x9066;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9066;
IkReal gconst1=(r21*x9065);
IkReal gconst2=(x9064*x9065);
IkReal x9068=r22*r22;
IkReal x9069=((1.0)*r02);
IkReal x9070=(cj1*sj2);
IkReal x9071=(cj2*sj1);
CheckValue<IkReal> x9075=IKPowWithIntegerCheck(((-1.0)+x9068),-1);
if(!x9075.valid){
continue;
}
IkReal x9072=x9075.value;
if((((1.0)+(((-1.0)*x9068)))) < -0.00001)
continue;
IkReal x9073=IKsqrt(((1.0)+(((-1.0)*x9068))));
IkReal x9074=(r02*r22*x9072*x9073);
j4eval[0]=((IKabs((((x9071*x9074))+((x9070*x9074)))))+(IKabs(((((-1.0)*x9069*x9071))+(((-1.0)*x9069*x9070))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9076=(cj1*sj2);
IkReal x9077=(gconst1*r01);
IkReal x9078=((1.0)*r02);
IkReal x9079=(cj2*sj1);
IkReal x9080=((1.0)*gconst2*r00);
CheckValue<IkReal> x9081=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9081.valid){
continue;
}
CheckValue<IkReal> x9082 = IKatan2WithCheck(IkReal(((((-1.0)*x9076*x9080))+(((-1.0)*x9079*x9080))+((x9077*x9079))+((x9076*x9077)))),IkReal(((((-1.0)*x9076*x9078))+(((-1.0)*x9078*x9079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9081.value)))+(x9082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9083=IKcos(j4);
IkReal x9084=IKsin(j4);
IkReal x9085=((1.0)*x9083);
IkReal x9086=(gconst1*x9083);
IkReal x9087=(gconst1*x9084);
IkReal x9088=((1.0)*gconst2*x9084);
evalcond[0]=((((-1.0)*gconst2*r00*x9085))+((r01*x9086))+((r02*x9084)));
evalcond[1]=(((r21*x9087))+(((-1.0)*r20*x9088))+(((-1.0)*r22*x9085)));
evalcond[2]=(((r11*x9087))+(((-1.0)*r10*x9088))+(((-1.0)*r12*x9085)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9088))+((r01*x9087))+(((-1.0)*r02*x9085)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9085))+((cj1*sj2))+((r21*x9086))+((r22*x9084)));
evalcond[5]=(((r11*x9086))+((r12*x9084))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9089=(gconst1*r01);
IkReal x9090=(gconst2*r00);
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(IKsign(((x9090*x9090)+(x9089*x9089)+(((-2.0)*x9089*x9090))+(r02*r02))),-1);
if(!x9091.valid){
continue;
}
CheckValue<IkReal> x9092 = IKatan2WithCheck(IkReal((x9089+(((-1.0)*x9090)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9091.value)))+(x9092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9093=IKcos(j4);
IkReal x9094=IKsin(j4);
IkReal x9095=((1.0)*x9093);
IkReal x9096=(gconst1*x9093);
IkReal x9097=(gconst1*x9094);
IkReal x9098=((1.0)*gconst2*x9094);
evalcond[0]=((((-1.0)*gconst2*r00*x9095))+((r01*x9096))+((r02*x9094)));
evalcond[1]=((((-1.0)*r20*x9098))+((r21*x9097))+(((-1.0)*r22*x9095)));
evalcond[2]=(((r11*x9097))+(((-1.0)*r10*x9098))+(((-1.0)*r12*x9095)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9098))+((r01*x9097))+(((-1.0)*r02*x9095)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9095))+((cj1*sj2))+((r21*x9096))+((r22*x9094)));
evalcond[5]=(((r11*x9096))+((r12*x9094))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9099=((1.0)*gconst2);
CheckValue<IkReal> x9100 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9099))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9100.valid){
continue;
}
CheckValue<IkReal> x9101=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9099)))),-1);
if(!x9101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9100.value)+(((1.5707963267949)*(x9101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9102=IKcos(j4);
IkReal x9103=IKsin(j4);
IkReal x9104=((1.0)*x9102);
IkReal x9105=(gconst1*x9102);
IkReal x9106=(gconst1*x9103);
IkReal x9107=((1.0)*gconst2*x9103);
evalcond[0]=(((r02*x9103))+(((-1.0)*gconst2*r00*x9104))+((r01*x9105)));
evalcond[1]=((((-1.0)*r22*x9104))+((r21*x9106))+(((-1.0)*r20*x9107)));
evalcond[2]=((((-1.0)*r10*x9107))+(((-1.0)*r12*x9104))+((r11*x9106)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9104))+(((-1.0)*r00*x9107))+((r01*x9106)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9103))+((r21*x9105))+(((-1.0)*gconst2*r20*x9104)));
evalcond[5]=((((-1.0)*gconst2*r10*x9104))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9103))+((r11*x9105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9108=((-1.0)*r20);
IkReal x9109=x8912;
CheckValue<IkReal> x9111 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9108),IKFAST_ATAN2_MAGTHRESH);
if(!x9111.valid){
continue;
}
IkReal x9110=((-1.0)*(x9111.value));
sj5=gconst1;
cj5=gconst2;
j5=x9110;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9110;
IkReal gconst1=(r21*x9109);
IkReal gconst2=(x9108*x9109);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9112=((-1.0)*r20);
IkReal x9113=x8912;
CheckValue<IkReal> x9115 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9112),IKFAST_ATAN2_MAGTHRESH);
if(!x9115.valid){
continue;
}
IkReal x9114=((-1.0)*(x9115.value));
sj5=gconst1;
cj5=gconst2;
j5=x9114;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9114;
IkReal gconst1=(r21*x9113);
IkReal gconst2=(x9112*x9113);
IkReal x9116=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9120=IKPowWithIntegerCheck(x9116,-1);
if(!x9120.valid){
continue;
}
IkReal x9117=x9120.value;
IkReal x9118=((1.0)*x9117);
IkReal x9119=((((-2.0)*r00*r01*r20*r21*x9117))+(((-1.0)*(r02*r02)))+(((-1.0)*x9118*(r00*r00)*(r20*r20)))+(((-1.0)*x9118*(r01*r01)*(r21*r21))));
j4eval[0]=x9119;
j4eval[1]=IKsign(x9119);
j4eval[2]=r02;
j4eval[3]=x9116;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9121=((-1.0)*r20);
IkReal x9122=x8912;
CheckValue<IkReal> x9124 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9121),IKFAST_ATAN2_MAGTHRESH);
if(!x9124.valid){
continue;
}
IkReal x9123=((-1.0)*(x9124.value));
sj5=gconst1;
cj5=gconst2;
j5=x9123;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9123;
IkReal gconst1=(r21*x9122);
IkReal gconst2=(x9121*x9122);
IkReal x9125=r22*r22;
IkReal x9126=((1.0)*r02);
IkReal x9127=(cj1*sj2);
IkReal x9128=(cj2*sj1);
CheckValue<IkReal> x9132=IKPowWithIntegerCheck(((-1.0)+x9125),-1);
if(!x9132.valid){
continue;
}
IkReal x9129=x9132.value;
if((((1.0)+(((-1.0)*x9125)))) < -0.00001)
continue;
IkReal x9130=IKsqrt(((1.0)+(((-1.0)*x9125))));
IkReal x9131=(r02*r22*x9129*x9130);
j4eval[0]=((IKabs((((x9128*x9131))+((x9127*x9131)))))+(IKabs(((((-1.0)*x9126*x9127))+(((-1.0)*x9126*x9128))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9133=(cj1*sj2);
IkReal x9134=(gconst1*r01);
IkReal x9135=((1.0)*r02);
IkReal x9136=(cj2*sj1);
IkReal x9137=((1.0)*gconst2*r00);
CheckValue<IkReal> x9138=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9138.valid){
continue;
}
CheckValue<IkReal> x9139 = IKatan2WithCheck(IkReal((((x9134*x9136))+(((-1.0)*x9133*x9137))+(((-1.0)*x9136*x9137))+((x9133*x9134)))),IkReal(((((-1.0)*x9133*x9135))+(((-1.0)*x9135*x9136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9138.value)))+(x9139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9140=IKcos(j4);
IkReal x9141=IKsin(j4);
IkReal x9142=((1.0)*x9140);
IkReal x9143=(gconst1*x9140);
IkReal x9144=(gconst1*x9141);
IkReal x9145=((1.0)*gconst2*x9141);
evalcond[0]=((((-1.0)*gconst2*r00*x9142))+((r01*x9143))+((r02*x9141)));
evalcond[1]=((((-1.0)*r20*x9145))+((r21*x9144))+(((-1.0)*r22*x9142)));
evalcond[2]=((((-1.0)*r10*x9145))+(((-1.0)*r12*x9142))+((r11*x9144)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9145))+((r01*x9144))+(((-1.0)*r02*x9142)));
evalcond[4]=((((-1.0)*gconst2*r20*x9142))+((cj2*sj1))+((cj1*sj2))+((r21*x9143))+((r22*x9141)));
evalcond[5]=((((-1.0)*gconst2*r10*x9142))+(((-1.0)*sj1*sj2))+((r12*x9141))+((cj1*cj2))+((r11*x9143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9146=(gconst1*r01);
IkReal x9147=(gconst2*r00);
CheckValue<IkReal> x9148 = IKatan2WithCheck(IkReal(((((-1.0)*x9147))+x9146)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9148.valid){
continue;
}
CheckValue<IkReal> x9149=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9147*x9147)))+(((2.0)*x9146*x9147))+(((-1.0)*(x9146*x9146))))),-1);
if(!x9149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9148.value)+(((1.5707963267949)*(x9149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9150=IKcos(j4);
IkReal x9151=IKsin(j4);
IkReal x9152=((1.0)*x9150);
IkReal x9153=(gconst1*x9150);
IkReal x9154=(gconst1*x9151);
IkReal x9155=((1.0)*gconst2*x9151);
evalcond[0]=(((r02*x9151))+(((-1.0)*gconst2*r00*x9152))+((r01*x9153)));
evalcond[1]=((((-1.0)*r20*x9155))+(((-1.0)*r22*x9152))+((r21*x9154)));
evalcond[2]=(((r11*x9154))+(((-1.0)*r12*x9152))+(((-1.0)*r10*x9155)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9152))+((r01*x9154))+(((-1.0)*r00*x9155)));
evalcond[4]=(((cj2*sj1))+((r22*x9151))+(((-1.0)*gconst2*r20*x9152))+((cj1*sj2))+((r21*x9153)));
evalcond[5]=(((r11*x9153))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9152))+((cj1*cj2))+((r12*x9151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9156 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9156.valid){
continue;
}
CheckValue<IkReal> x9157=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9156.value)+(((1.5707963267949)*(x9157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9158=IKcos(j4);
IkReal x9159=IKsin(j4);
IkReal x9160=((1.0)*x9158);
IkReal x9161=(gconst1*x9158);
IkReal x9162=(gconst1*x9159);
IkReal x9163=((1.0)*gconst2*x9159);
evalcond[0]=(((r01*x9161))+((r02*x9159))+(((-1.0)*gconst2*r00*x9160)));
evalcond[1]=((((-1.0)*r22*x9160))+((r21*x9162))+(((-1.0)*r20*x9163)));
evalcond[2]=((((-1.0)*r12*x9160))+(((-1.0)*r10*x9163))+((r11*x9162)));
evalcond[3]=((1.0)+((r01*x9162))+(((-1.0)*r02*x9160))+(((-1.0)*r00*x9163)));
evalcond[4]=(((cj2*sj1))+((r22*x9159))+((cj1*sj2))+((r21*x9161))+(((-1.0)*gconst2*r20*x9160)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9160))+((r11*x9161))+((cj1*cj2))+((r12*x9159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9164=((-1.0)*r20);
IkReal x9165=((-1.0)*px);
CheckValue<IkReal> x9167 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9164),IKFAST_ATAN2_MAGTHRESH);
if(!x9167.valid){
continue;
}
IkReal x9166=((-1.0)*(x9167.value));
sj5=gconst1;
cj5=gconst2;
j5=x9166;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9165);
rxp1_1=(px*r21);
rxp1_2=(r11*x9165);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9166;
IkReal gconst1=r21;
IkReal gconst2=x9164;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9168=((-1.0)*r20);
IkReal x9169=((-1.0)*px);
CheckValue<IkReal> x9171 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9168),IKFAST_ATAN2_MAGTHRESH);
if(!x9171.valid){
continue;
}
IkReal x9170=((-1.0)*(x9171.value));
sj5=gconst1;
cj5=gconst2;
j5=x9170;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9169);
rxp1_1=(px*r21);
rxp1_2=(r11*x9169);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9170;
IkReal gconst1=r21;
IkReal gconst2=x9168;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9172=((-1.0)*r20);
IkReal x9173=((-1.0)*px);
CheckValue<IkReal> x9175 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9172),IKFAST_ATAN2_MAGTHRESH);
if(!x9175.valid){
continue;
}
IkReal x9174=((-1.0)*(x9175.value));
sj5=gconst1;
cj5=gconst2;
j5=x9174;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9173);
rxp1_1=(px*r21);
rxp1_2=(r11*x9173);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9174;
IkReal gconst1=r21;
IkReal gconst2=x9172;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9178=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9178.valid){
continue;
}
IkReal x9176=x9178.value;
IkReal x9177=(sj0*x9176);
cj4array[0]=(((cj1*cj2*x9177))+(((-1.0)*sj1*sj2*x9177)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9179=IKsin(j4);
IkReal x9180=IKcos(j4);
IkReal x9181=((1.0)*gconst2);
IkReal x9182=(gconst1*r21);
evalcond[0]=(r02*x9179);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9180)));
evalcond[2]=(((x9179*x9182))+(((-1.0)*r20*x9179*x9181)));
evalcond[3]=((((-1.0)*r10*x9179*x9181))+((gconst1*r11*x9179)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9180*x9182))+(((-1.0)*r20*x9180*x9181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9185=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9185.valid){
continue;
}
IkReal x9183=x9185.value;
IkReal x9184=((1.0)*x9183);
cj4array[0]=((((-1.0)*cj2*sj1*x9184))+(((-1.0)*cj1*sj2*x9184)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9186=IKsin(j4);
IkReal x9187=IKcos(j4);
IkReal x9188=((1.0)*sj0);
IkReal x9189=(gconst1*x9186);
IkReal x9190=((1.0)*x9187);
IkReal x9191=((1.0)*gconst2*x9186);
evalcond[0]=(r02*x9186);
evalcond[1]=((((-1.0)*r02*x9190))+(((-1.0)*x9188)));
evalcond[2]=((((-1.0)*r20*x9191))+((r21*x9189)));
evalcond[3]=(((r11*x9189))+(((-1.0)*r10*x9191)));
evalcond[4]=((((-1.0)*gconst2*r10*x9190))+((gconst1*r11*x9187))+(((-1.0)*cj1*cj2*x9188))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9192=IKPowWithIntegerCheck(r02,-1);
if(!x9192.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9192.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9193=IKsin(j4);
IkReal x9194=IKcos(j4);
IkReal x9195=(gconst1*r21);
IkReal x9196=(gconst1*r11);
IkReal x9197=((1.0)*gconst2*r10);
IkReal x9198=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9193);
evalcond[1]=(((x9193*x9195))+(((-1.0)*x9193*x9198)));
evalcond[2]=(((x9193*x9196))+(((-1.0)*x9193*x9197)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9194*x9198))+((x9194*x9195)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9194*x9197))+((sj0*sj1*sj2))+((x9194*x9196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9199=(cj2*sj1);
IkReal x9200=(cj1*sj2);
IkReal x9201=(gconst1*r21);
IkReal x9202=((1.0)*gconst2*r20);
CheckValue<IkReal> x9203 = IKatan2WithCheck(IkReal((((r22*x9199))+((r22*x9200)))),IkReal((((x9200*x9201))+(((-1.0)*x9200*x9202))+(((-1.0)*x9199*x9202))+((x9199*x9201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9203.valid){
continue;
}
CheckValue<IkReal> x9204=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9202))+(((2.0)*gconst2*r20*x9201))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9201*x9201))))),-1);
if(!x9204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9203.value)+(((1.5707963267949)*(x9204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9205=IKsin(j4);
IkReal x9206=IKcos(j4);
IkReal x9207=(sj1*sj2);
IkReal x9208=(gconst2*r10);
IkReal x9209=(gconst2*r00);
IkReal x9210=(gconst2*r20);
IkReal x9211=((1.0)*x9206);
IkReal x9212=(gconst1*x9206);
IkReal x9213=((1.0)*cj1*cj2);
IkReal x9214=(gconst1*x9205);
IkReal x9215=((1.0)*x9205);
evalcond[0]=((((-1.0)*x9210*x9215))+((r21*x9214))+(((-1.0)*r22*x9211)));
evalcond[1]=(cj0+(((-1.0)*x9208*x9215))+((r11*x9214))+(((-1.0)*r12*x9211)));
evalcond[2]=((((-1.0)*r02*x9211))+(((-1.0)*sj0))+(((-1.0)*x9209*x9215))+((r01*x9214)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9210*x9211))+((r21*x9212))+((r22*x9205))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x9213))+((r02*x9205))+((cj0*x9207))+(((-1.0)*x9209*x9211))+((r01*x9212)));
evalcond[5]=((((-1.0)*x9208*x9211))+((r11*x9212))+((r12*x9205))+(((-1.0)*sj0*x9213))+((sj0*x9207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9216=((1.0)*gconst2);
CheckValue<IkReal> x9217 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9216))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9217.valid){
continue;
}
CheckValue<IkReal> x9218=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9216)))),-1);
if(!x9218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9217.value)+(((1.5707963267949)*(x9218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9219=IKsin(j4);
IkReal x9220=IKcos(j4);
IkReal x9221=(sj1*sj2);
IkReal x9222=(gconst2*r10);
IkReal x9223=(gconst2*r00);
IkReal x9224=(gconst2*r20);
IkReal x9225=((1.0)*x9220);
IkReal x9226=(gconst1*x9220);
IkReal x9227=((1.0)*cj1*cj2);
IkReal x9228=(gconst1*x9219);
IkReal x9229=((1.0)*x9219);
evalcond[0]=(((r21*x9228))+(((-1.0)*x9224*x9229))+(((-1.0)*r22*x9225)));
evalcond[1]=(cj0+((r11*x9228))+(((-1.0)*r12*x9225))+(((-1.0)*x9222*x9229)));
evalcond[2]=(((r01*x9228))+(((-1.0)*sj0))+(((-1.0)*r02*x9225))+(((-1.0)*x9223*x9229)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9226))+((r22*x9219))+(((-1.0)*x9224*x9225)));
evalcond[4]=(((r01*x9226))+(((-1.0)*cj0*x9227))+((r02*x9219))+((cj0*x9221))+(((-1.0)*x9223*x9225)));
evalcond[5]=(((r12*x9219))+((r11*x9226))+((sj0*x9221))+(((-1.0)*sj0*x9227))+(((-1.0)*x9222*x9225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9230=((1.0)*gconst2);
CheckValue<IkReal> x9231=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9230)))),-1);
if(!x9231.valid){
continue;
}
CheckValue<IkReal> x9232 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9230))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9231.value)))+(x9232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9233=IKsin(j4);
IkReal x9234=IKcos(j4);
IkReal x9235=(sj1*sj2);
IkReal x9236=(gconst2*r10);
IkReal x9237=(gconst2*r00);
IkReal x9238=(gconst2*r20);
IkReal x9239=((1.0)*x9234);
IkReal x9240=(gconst1*x9234);
IkReal x9241=((1.0)*cj1*cj2);
IkReal x9242=(gconst1*x9233);
IkReal x9243=((1.0)*x9233);
evalcond[0]=(((r21*x9242))+(((-1.0)*x9238*x9243))+(((-1.0)*r22*x9239)));
evalcond[1]=((((-1.0)*x9236*x9243))+cj0+(((-1.0)*r12*x9239))+((r11*x9242)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9237*x9243))+((r01*x9242))+(((-1.0)*r02*x9239)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9240))+((r22*x9233))+(((-1.0)*x9238*x9239)));
evalcond[4]=((((-1.0)*x9237*x9239))+((r02*x9233))+((cj0*x9235))+((r01*x9240))+(((-1.0)*cj0*x9241)));
evalcond[5]=((((-1.0)*x9236*x9239))+((sj0*x9235))+((r12*x9233))+((r11*x9240))+(((-1.0)*sj0*x9241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9244=((-1.0)*r20);
IkReal x9245=x8912;
CheckValue<IkReal> x9247 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9244),IKFAST_ATAN2_MAGTHRESH);
if(!x9247.valid){
continue;
}
IkReal x9246=((-1.0)*(x9247.value));
sj5=gconst1;
cj5=gconst2;
j5=x9246;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9246;
IkReal gconst1=(r21*x9245);
IkReal gconst2=(x9244*x9245);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9248=((-1.0)*r20);
IkReal x9249=x8912;
CheckValue<IkReal> x9251 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9248),IKFAST_ATAN2_MAGTHRESH);
if(!x9251.valid){
continue;
}
IkReal x9250=((-1.0)*(x9251.value));
sj5=gconst1;
cj5=gconst2;
j5=x9250;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9250;
IkReal gconst1=(r21*x9249);
IkReal gconst2=(x9248*x9249);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9252=((-1.0)*r20);
IkReal x9253=x8912;
CheckValue<IkReal> x9255 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9252),IKFAST_ATAN2_MAGTHRESH);
if(!x9255.valid){
continue;
}
IkReal x9254=((-1.0)*(x9255.value));
sj5=gconst1;
cj5=gconst2;
j5=x9254;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9254;
IkReal gconst1=(r21*x9253);
IkReal gconst2=(x9252*x9253);
IkReal x9256=r22*r22;
CheckValue<IkReal> x9259=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9256))),-1);
if(!x9259.valid){
continue;
}
IkReal x9257=x9259.value;
IkReal x9258=(((x9257*(r20*r20*r20*r20)))+x9256+((x9257*(r21*r21*r21*r21)))+(((2.0)*x9257*(r20*r20)*(r21*r21))));
j4eval[0]=x9258;
j4eval[1]=IKsign(x9258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9260=((-1.0)*r20);
IkReal x9261=x8912;
CheckValue<IkReal> x9263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9260),IKFAST_ATAN2_MAGTHRESH);
if(!x9263.valid){
continue;
}
IkReal x9262=((-1.0)*(x9263.value));
sj5=gconst1;
cj5=gconst2;
j5=x9262;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9262;
IkReal gconst1=(r21*x9261);
IkReal gconst2=(x9260*x9261);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9264=((-1.0)*r20);
IkReal x9265=x8912;
CheckValue<IkReal> x9267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9264),IKFAST_ATAN2_MAGTHRESH);
if(!x9267.valid){
continue;
}
IkReal x9266=((-1.0)*(x9267.value));
sj5=gconst1;
cj5=gconst2;
j5=x9266;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9266;
IkReal gconst1=(r21*x9265);
IkReal gconst2=(x9264*x9265);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9268=((-1.0)*r20);
IkReal x9269=x8912;
CheckValue<IkReal> x9271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9268),IKFAST_ATAN2_MAGTHRESH);
if(!x9271.valid){
continue;
}
IkReal x9270=((-1.0)*(x9271.value));
sj5=gconst1;
cj5=gconst2;
j5=x9270;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9270;
IkReal gconst1=(r21*x9269);
IkReal gconst2=(x9268*x9269);
IkReal x9272=r22*r22;
IkReal x9273=(cj1*r12*sj2);
IkReal x9274=(cj2*r12*sj1);
CheckValue<IkReal> x9278=IKPowWithIntegerCheck(((-1.0)+x9272),-1);
if(!x9278.valid){
continue;
}
IkReal x9275=x9278.value;
if((((1.0)+(((-1.0)*x9272)))) < -0.00001)
continue;
IkReal x9276=IKsqrt(((1.0)+(((-1.0)*x9272))));
IkReal x9277=((1.0)*r22*x9275*x9276);
j4eval[0]=((IKabs(((((-1.0)*x9273*x9277))+(((-1.0)*x9274*x9277)))))+(IKabs((x9273+x9274))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9279=((1.0)*gconst1);
IkReal x9280=(cj2*sj1);
IkReal x9281=(gconst2*r10);
IkReal x9282=(cj1*sj2);
CheckValue<IkReal> x9283=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9279)))),-1);
if(!x9283.valid){
continue;
}
CheckValue<IkReal> x9284 = IKatan2WithCheck(IkReal((((x9281*x9282))+(((-1.0)*r11*x9279*x9282))+(((-1.0)*r11*x9279*x9280))+((x9280*x9281)))),IkReal((((r12*x9280))+((r12*x9282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9283.value)))+(x9284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9285=IKsin(j4);
IkReal x9286=IKcos(j4);
IkReal x9287=((1.0)*x9286);
IkReal x9288=(gconst2*x9286);
IkReal x9289=(gconst1*x9285);
IkReal x9290=((1.0)*x9285);
evalcond[0]=((((-1.0)*gconst2*r20*x9290))+(((-1.0)*r22*x9287))+((r21*x9289)));
evalcond[1]=((((-1.0)*gconst2*r00*x9290))+((r01*x9289))+(((-1.0)*r02*x9287)));
evalcond[2]=((((-1.0)*gconst1*r11*x9287))+((r10*x9288))+(((-1.0)*r12*x9290)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9287))+((r11*x9289))+(((-1.0)*gconst2*r10*x9290)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9287))+((cj1*sj2))+((r20*x9288))+(((-1.0)*r22*x9290)));
evalcond[5]=((((-1.0)*gconst1*r01*x9287))+((r00*x9288))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9291=(gconst1*r11);
IkReal x9292=(gconst2*r10);
CheckValue<IkReal> x9293 = IKatan2WithCheck(IkReal((x9292+(((-1.0)*x9291)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9293.valid){
continue;
}
CheckValue<IkReal> x9294=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9291*x9292))+(x9291*x9291)+(x9292*x9292))),-1);
if(!x9294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9293.value)+(((1.5707963267949)*(x9294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9295=IKsin(j4);
IkReal x9296=IKcos(j4);
IkReal x9297=((1.0)*x9296);
IkReal x9298=(gconst2*x9296);
IkReal x9299=(gconst1*x9295);
IkReal x9300=((1.0)*x9295);
evalcond[0]=((((-1.0)*r22*x9297))+((r21*x9299))+(((-1.0)*gconst2*r20*x9300)));
evalcond[1]=(((r01*x9299))+(((-1.0)*gconst2*r00*x9300))+(((-1.0)*r02*x9297)));
evalcond[2]=((((-1.0)*gconst1*r11*x9297))+((r10*x9298))+(((-1.0)*r12*x9300)));
evalcond[3]=((1.0)+((r11*x9299))+(((-1.0)*gconst2*r10*x9300))+(((-1.0)*r12*x9297)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9297))+((cj1*sj2))+((r20*x9298))+(((-1.0)*r22*x9300)));
evalcond[5]=(((r00*x9298))+(((-1.0)*gconst1*r01*x9297))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9301=((1.0)*gconst2);
CheckValue<IkReal> x9302 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9301))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9302.valid){
continue;
}
CheckValue<IkReal> x9303=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9301)))),-1);
if(!x9303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9302.value)+(((1.5707963267949)*(x9303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9304=IKsin(j4);
IkReal x9305=IKcos(j4);
IkReal x9306=((1.0)*x9305);
IkReal x9307=(gconst2*x9305);
IkReal x9308=(gconst1*x9304);
IkReal x9309=((1.0)*x9304);
evalcond[0]=(((r21*x9308))+(((-1.0)*r22*x9306))+(((-1.0)*gconst2*r20*x9309)));
evalcond[1]=((((-1.0)*gconst2*r00*x9309))+((r01*x9308))+(((-1.0)*r02*x9306)));
evalcond[2]=((((-1.0)*gconst1*r11*x9306))+((r10*x9307))+(((-1.0)*r12*x9309)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9309))+((r11*x9308))+(((-1.0)*r12*x9306)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9306))+((cj1*sj2))+((r20*x9307))+(((-1.0)*r22*x9309)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9306))+(((-1.0)*r02*x9309))+((r00*x9307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9310=((-1.0)*r20);
IkReal x9311=x8912;
CheckValue<IkReal> x9313 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9310),IKFAST_ATAN2_MAGTHRESH);
if(!x9313.valid){
continue;
}
IkReal x9312=((-1.0)*(x9313.value));
sj5=gconst1;
cj5=gconst2;
j5=x9312;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9312;
IkReal gconst1=(r21*x9311);
IkReal gconst2=(x9310*x9311);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9314=((-1.0)*r20);
IkReal x9315=x8912;
CheckValue<IkReal> x9317 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9314),IKFAST_ATAN2_MAGTHRESH);
if(!x9317.valid){
continue;
}
IkReal x9316=((-1.0)*(x9317.value));
sj5=gconst1;
cj5=gconst2;
j5=x9316;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9316;
IkReal gconst1=(r21*x9315);
IkReal gconst2=(x9314*x9315);
IkReal x9318=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9322=IKPowWithIntegerCheck(x9318,-1);
if(!x9322.valid){
continue;
}
IkReal x9319=x9322.value;
IkReal x9320=((1.0)*x9319);
IkReal x9321=((((-2.0)*r10*r11*r20*r21*x9319))+(((-1.0)*x9320*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9320*(r11*r11)*(r21*r21))));
j4eval[0]=x9321;
j4eval[1]=r12;
j4eval[2]=x9318;
j4eval[3]=IKsign(x9321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9323=((-1.0)*r20);
IkReal x9324=x8912;
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9323),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
IkReal x9325=((-1.0)*(x9326.value));
sj5=gconst1;
cj5=gconst2;
j5=x9325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9325;
IkReal gconst1=(r21*x9324);
IkReal gconst2=(x9323*x9324);
IkReal x9327=r22*r22;
IkReal x9328=(cj1*r12*sj2);
IkReal x9329=(cj2*r12*sj1);
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(((-1.0)+x9327),-1);
if(!x9333.valid){
continue;
}
IkReal x9330=x9333.value;
if((((1.0)+(((-1.0)*x9327)))) < -0.00001)
continue;
IkReal x9331=IKsqrt(((1.0)+(((-1.0)*x9327))));
IkReal x9332=((1.0)*r22*x9330*x9331);
j4eval[0]=((IKabs((x9328+x9329)))+(IKabs(((((-1.0)*x9329*x9332))+(((-1.0)*x9328*x9332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9334=((1.0)*gconst1);
IkReal x9335=(cj2*sj1);
IkReal x9336=(gconst2*r10);
IkReal x9337=(cj1*sj2);
CheckValue<IkReal> x9338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9334))+(((-1.0)*gconst2*r01)))),-1);
if(!x9338.valid){
continue;
}
CheckValue<IkReal> x9339 = IKatan2WithCheck(IkReal((((x9336*x9337))+(((-1.0)*r11*x9334*x9337))+(((-1.0)*r11*x9334*x9335))+((x9335*x9336)))),IkReal((((r12*x9337))+((r12*x9335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9338.value)))+(x9339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9340=IKsin(j4);
IkReal x9341=IKcos(j4);
IkReal x9342=((1.0)*x9341);
IkReal x9343=(gconst2*x9341);
IkReal x9344=(gconst1*x9340);
IkReal x9345=((1.0)*x9340);
evalcond[0]=((((-1.0)*r22*x9342))+(((-1.0)*gconst2*r20*x9345))+((r21*x9344)));
evalcond[1]=((((-1.0)*r02*x9342))+((r01*x9344))+(((-1.0)*gconst2*r00*x9345)));
evalcond[2]=(((r10*x9343))+(((-1.0)*r12*x9345))+(((-1.0)*gconst1*r11*x9342)));
evalcond[3]=((-1.0)+((r11*x9344))+(((-1.0)*r12*x9342))+(((-1.0)*gconst2*r10*x9345)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9345))+((cj1*sj2))+((r20*x9343))+(((-1.0)*gconst1*r21*x9342)));
evalcond[5]=((((-1.0)*gconst1*r01*x9342))+((r00*x9343))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x9345))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9346=(gconst1*r11);
IkReal x9347=(gconst2*r10);
CheckValue<IkReal> x9348 = IKatan2WithCheck(IkReal((x9347+(((-1.0)*x9346)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9348.valid){
continue;
}
CheckValue<IkReal> x9349=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9346*x9346)))+(((-1.0)*(x9347*x9347)))+(((-1.0)*(r12*r12)))+(((2.0)*x9346*x9347)))),-1);
if(!x9349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9348.value)+(((1.5707963267949)*(x9349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9350=IKsin(j4);
IkReal x9351=IKcos(j4);
IkReal x9352=((1.0)*x9351);
IkReal x9353=(gconst2*x9351);
IkReal x9354=(gconst1*x9350);
IkReal x9355=((1.0)*x9350);
evalcond[0]=((((-1.0)*r22*x9352))+(((-1.0)*gconst2*r20*x9355))+((r21*x9354)));
evalcond[1]=((((-1.0)*r02*x9352))+((r01*x9354))+(((-1.0)*gconst2*r00*x9355)));
evalcond[2]=((((-1.0)*r12*x9355))+((r10*x9353))+(((-1.0)*gconst1*r11*x9352)));
evalcond[3]=((-1.0)+((r11*x9354))+(((-1.0)*r12*x9352))+(((-1.0)*gconst2*r10*x9355)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9355))+((cj1*sj2))+((r20*x9353))+(((-1.0)*gconst1*r21*x9352)));
evalcond[5]=((((-1.0)*gconst1*r01*x9352))+(((-1.0)*r02*x9355))+(((-1.0)*sj1*sj2))+((r00*x9353))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9356 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9356.valid){
continue;
}
CheckValue<IkReal> x9357=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9356.value)+(((1.5707963267949)*(x9357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9358=IKsin(j4);
IkReal x9359=IKcos(j4);
IkReal x9360=((1.0)*x9359);
IkReal x9361=(gconst2*x9359);
IkReal x9362=(gconst1*x9358);
IkReal x9363=((1.0)*x9358);
evalcond[0]=(((r21*x9362))+(((-1.0)*r22*x9360))+(((-1.0)*gconst2*r20*x9363)));
evalcond[1]=((((-1.0)*r02*x9360))+((r01*x9362))+(((-1.0)*gconst2*r00*x9363)));
evalcond[2]=((((-1.0)*gconst1*r11*x9360))+(((-1.0)*r12*x9363))+((r10*x9361)));
evalcond[3]=((-1.0)+((r11*x9362))+(((-1.0)*gconst2*r10*x9363))+(((-1.0)*r12*x9360)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9360))+((cj1*sj2))+(((-1.0)*r22*x9363))+((r20*x9361)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9363))+(((-1.0)*gconst1*r01*x9360))+((cj1*cj2))+((r00*x9361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9364=((-1.0)*r20);
IkReal x9365=x8912;
CheckValue<IkReal> x9367 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9364),IKFAST_ATAN2_MAGTHRESH);
if(!x9367.valid){
continue;
}
IkReal x9366=((-1.0)*(x9367.value));
sj5=gconst1;
cj5=gconst2;
j5=x9366;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9366;
IkReal gconst1=(r21*x9365);
IkReal gconst2=(x9364*x9365);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9368=((-1.0)*r20);
IkReal x9369=x8912;
CheckValue<IkReal> x9371 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9368),IKFAST_ATAN2_MAGTHRESH);
if(!x9371.valid){
continue;
}
IkReal x9370=((-1.0)*(x9371.value));
sj5=gconst1;
cj5=gconst2;
j5=x9370;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9370;
IkReal gconst1=(r21*x9369);
IkReal gconst2=(x9368*x9369);
IkReal x9372=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9376=IKPowWithIntegerCheck(x9372,-1);
if(!x9376.valid){
continue;
}
IkReal x9373=x9376.value;
IkReal x9374=((1.0)*x9373);
IkReal x9375=((((-2.0)*r00*r01*r20*r21*x9373))+(((-1.0)*(r02*r02)))+(((-1.0)*x9374*(r01*r01)*(r21*r21)))+(((-1.0)*x9374*(r00*r00)*(r20*r20))));
j4eval[0]=x9375;
j4eval[1]=IKsign(x9375);
j4eval[2]=r02;
j4eval[3]=x9372;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9377=((-1.0)*r20);
IkReal x9378=x8912;
CheckValue<IkReal> x9380 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9377),IKFAST_ATAN2_MAGTHRESH);
if(!x9380.valid){
continue;
}
IkReal x9379=((-1.0)*(x9380.value));
sj5=gconst1;
cj5=gconst2;
j5=x9379;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9379;
IkReal gconst1=(r21*x9378);
IkReal gconst2=(x9377*x9378);
IkReal x9381=r22*r22;
IkReal x9382=(cj1*r02*sj2);
IkReal x9383=(cj2*r02*sj1);
CheckValue<IkReal> x9387=IKPowWithIntegerCheck(((-1.0)+x9381),-1);
if(!x9387.valid){
continue;
}
IkReal x9384=x9387.value;
if((((1.0)+(((-1.0)*x9381)))) < -0.00001)
continue;
IkReal x9385=IKsqrt(((1.0)+(((-1.0)*x9381))));
IkReal x9386=((1.0)*r22*x9384*x9385);
j4eval[0]=((IKabs((x9382+x9383)))+(IKabs(((((-1.0)*x9383*x9386))+(((-1.0)*x9382*x9386))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9388=(cj2*sj1);
IkReal x9389=(cj1*sj2);
IkReal x9390=(gconst2*r00);
IkReal x9391=((1.0)*gconst1*r01);
CheckValue<IkReal> x9392 = IKatan2WithCheck(IkReal(((((-1.0)*x9388*x9391))+((x9388*x9390))+(((-1.0)*x9389*x9391))+((x9389*x9390)))),IkReal((((r02*x9388))+((r02*x9389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9392.valid){
continue;
}
CheckValue<IkReal> x9393=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9392.value)+(((1.5707963267949)*(x9393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9394=IKsin(j4);
IkReal x9395=IKcos(j4);
IkReal x9396=(gconst1*r11);
IkReal x9397=(gconst1*r21);
IkReal x9398=(gconst1*r01);
IkReal x9399=((1.0)*x9395);
IkReal x9400=(gconst2*x9395);
IkReal x9401=((1.0)*x9394);
evalcond[0]=(((x9394*x9397))+(((-1.0)*r22*x9399))+(((-1.0)*gconst2*r20*x9401)));
evalcond[1]=((((-1.0)*r12*x9399))+((x9394*x9396))+(((-1.0)*gconst2*r10*x9401)));
evalcond[2]=((((-1.0)*x9398*x9399))+(((-1.0)*r02*x9401))+((r00*x9400)));
evalcond[3]=((-1.0)+((x9394*x9398))+(((-1.0)*r02*x9399))+(((-1.0)*gconst2*r00*x9401)));
evalcond[4]=((((-1.0)*r22*x9401))+((cj2*sj1))+((cj1*sj2))+((r20*x9400))+(((-1.0)*x9397*x9399)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9401))+((r10*x9400))+(((-1.0)*x9396*x9399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9402=(gconst2*r00);
IkReal x9403=(gconst1*r01);
CheckValue<IkReal> x9404 = IKatan2WithCheck(IkReal(((((-1.0)*x9403))+x9402)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9404.valid){
continue;
}
CheckValue<IkReal> x9405=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9402*x9403))+(((-1.0)*(x9402*x9402)))+(((-1.0)*(x9403*x9403))))),-1);
if(!x9405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9404.value)+(((1.5707963267949)*(x9405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9406=IKsin(j4);
IkReal x9407=IKcos(j4);
IkReal x9408=(gconst1*r11);
IkReal x9409=(gconst1*r21);
IkReal x9410=(gconst1*r01);
IkReal x9411=((1.0)*x9407);
IkReal x9412=(gconst2*x9407);
IkReal x9413=((1.0)*x9406);
evalcond[0]=((((-1.0)*gconst2*r20*x9413))+((x9406*x9409))+(((-1.0)*r22*x9411)));
evalcond[1]=((((-1.0)*r12*x9411))+((x9406*x9408))+(((-1.0)*gconst2*r10*x9413)));
evalcond[2]=((((-1.0)*r02*x9413))+((r00*x9412))+(((-1.0)*x9410*x9411)));
evalcond[3]=((-1.0)+((x9406*x9410))+(((-1.0)*r02*x9411))+(((-1.0)*gconst2*r00*x9413)));
evalcond[4]=(((r20*x9412))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9413))+(((-1.0)*x9409*x9411)));
evalcond[5]=((((-1.0)*r12*x9413))+(((-1.0)*x9408*x9411))+((r10*x9412))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9414=((1.0)*gconst2);
CheckValue<IkReal> x9415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9414))+(((-1.0)*gconst1*r10)))),-1);
if(!x9415.valid){
continue;
}
CheckValue<IkReal> x9416 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9414))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9415.value)))+(x9416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9417=IKsin(j4);
IkReal x9418=IKcos(j4);
IkReal x9419=(gconst1*r11);
IkReal x9420=(gconst1*r21);
IkReal x9421=(gconst1*r01);
IkReal x9422=((1.0)*x9418);
IkReal x9423=(gconst2*x9418);
IkReal x9424=((1.0)*x9417);
evalcond[0]=(((x9417*x9420))+(((-1.0)*gconst2*r20*x9424))+(((-1.0)*r22*x9422)));
evalcond[1]=((((-1.0)*gconst2*r10*x9424))+(((-1.0)*r12*x9422))+((x9417*x9419)));
evalcond[2]=(((r00*x9423))+(((-1.0)*x9421*x9422))+(((-1.0)*r02*x9424)));
evalcond[3]=((-1.0)+((x9417*x9421))+(((-1.0)*r02*x9422))+(((-1.0)*gconst2*r00*x9424)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9420*x9422))+((cj1*sj2))+((r20*x9423))+(((-1.0)*r22*x9424)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9424))+((r10*x9423))+(((-1.0)*x9419*x9422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9425=((-1.0)*r20);
IkReal x9426=x8912;
CheckValue<IkReal> x9428 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9425),IKFAST_ATAN2_MAGTHRESH);
if(!x9428.valid){
continue;
}
IkReal x9427=((-1.0)*(x9428.value));
sj5=gconst1;
cj5=gconst2;
j5=x9427;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9427;
IkReal gconst1=(r21*x9426);
IkReal gconst2=(x9425*x9426);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9429=((-1.0)*r20);
IkReal x9430=x8912;
CheckValue<IkReal> x9432 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9429),IKFAST_ATAN2_MAGTHRESH);
if(!x9432.valid){
continue;
}
IkReal x9431=((-1.0)*(x9432.value));
sj5=gconst1;
cj5=gconst2;
j5=x9431;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9431;
IkReal gconst1=(r21*x9430);
IkReal gconst2=(x9429*x9430);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9433=((-1.0)*r20);
IkReal x9434=x8912;
CheckValue<IkReal> x9436 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9433),IKFAST_ATAN2_MAGTHRESH);
if(!x9436.valid){
continue;
}
IkReal x9435=((-1.0)*(x9436.value));
sj5=gconst1;
cj5=gconst2;
j5=x9435;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9435;
IkReal gconst1=(r21*x9434);
IkReal gconst2=(x9433*x9434);
IkReal x9437=r22*r22;
IkReal x9438=(cj1*r02*sj2);
IkReal x9439=(cj2*r02*sj1);
CheckValue<IkReal> x9443=IKPowWithIntegerCheck(((-1.0)+x9437),-1);
if(!x9443.valid){
continue;
}
IkReal x9440=x9443.value;
if((((1.0)+(((-1.0)*x9437)))) < -0.00001)
continue;
IkReal x9441=IKsqrt(((1.0)+(((-1.0)*x9437))));
IkReal x9442=((1.0)*r22*x9440*x9441);
j4eval[0]=((IKabs(((((-1.0)*x9439*x9442))+(((-1.0)*x9438*x9442)))))+(IKabs((x9438+x9439))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9444=(cj2*sj1);
IkReal x9445=(cj1*sj2);
IkReal x9446=(gconst2*r00);
IkReal x9447=((1.0)*gconst1*r01);
CheckValue<IkReal> x9448=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9448.valid){
continue;
}
CheckValue<IkReal> x9449 = IKatan2WithCheck(IkReal(((((-1.0)*x9445*x9447))+((x9444*x9446))+((x9445*x9446))+(((-1.0)*x9444*x9447)))),IkReal((((r02*x9444))+((r02*x9445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9448.value)))+(x9449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9450=IKsin(j4);
IkReal x9451=IKcos(j4);
IkReal x9452=(gconst1*r11);
IkReal x9453=(gconst1*r21);
IkReal x9454=(gconst1*r01);
IkReal x9455=((1.0)*x9451);
IkReal x9456=(gconst2*x9451);
IkReal x9457=((1.0)*x9450);
evalcond[0]=((((-1.0)*gconst2*r20*x9457))+(((-1.0)*r22*x9455))+((x9450*x9453)));
evalcond[1]=(((x9450*x9452))+(((-1.0)*gconst2*r10*x9457))+(((-1.0)*r12*x9455)));
evalcond[2]=(((r00*x9456))+(((-1.0)*x9454*x9455))+(((-1.0)*r02*x9457)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9457))+((x9450*x9454))+(((-1.0)*r02*x9455)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9453*x9455))+(((-1.0)*r22*x9457))+((r20*x9456)));
evalcond[5]=(((r10*x9456))+(((-1.0)*x9452*x9455))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x9457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9458=(gconst1*r01);
IkReal x9459=(gconst2*r00);
CheckValue<IkReal> x9460=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9458*x9459))+(r02*r02)+(x9459*x9459)+(x9458*x9458))),-1);
if(!x9460.valid){
continue;
}
CheckValue<IkReal> x9461 = IKatan2WithCheck(IkReal(((((-1.0)*x9458))+x9459)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9460.value)))+(x9461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9462=IKsin(j4);
IkReal x9463=IKcos(j4);
IkReal x9464=(gconst1*r11);
IkReal x9465=(gconst1*r21);
IkReal x9466=(gconst1*r01);
IkReal x9467=((1.0)*x9463);
IkReal x9468=(gconst2*x9463);
IkReal x9469=((1.0)*x9462);
evalcond[0]=((((-1.0)*gconst2*r20*x9469))+(((-1.0)*r22*x9467))+((x9462*x9465)));
evalcond[1]=((((-1.0)*r12*x9467))+((x9462*x9464))+(((-1.0)*gconst2*r10*x9469)));
evalcond[2]=(((r00*x9468))+(((-1.0)*r02*x9469))+(((-1.0)*x9466*x9467)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9469))+((x9462*x9466))+(((-1.0)*r02*x9467)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9469))+((r20*x9468))+(((-1.0)*x9465*x9467)));
evalcond[5]=(((r10*x9468))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9469))+((cj1*cj2))+(((-1.0)*x9464*x9467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9470 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9470.valid){
continue;
}
CheckValue<IkReal> x9471=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9470.value)+(((1.5707963267949)*(x9471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9472=IKsin(j4);
IkReal x9473=IKcos(j4);
IkReal x9474=(gconst1*r11);
IkReal x9475=(gconst1*r21);
IkReal x9476=(gconst1*r01);
IkReal x9477=((1.0)*x9473);
IkReal x9478=(gconst2*x9473);
IkReal x9479=((1.0)*x9472);
evalcond[0]=((((-1.0)*gconst2*r20*x9479))+(((-1.0)*r22*x9477))+((x9472*x9475)));
evalcond[1]=((((-1.0)*r12*x9477))+((x9472*x9474))+(((-1.0)*gconst2*r10*x9479)));
evalcond[2]=((((-1.0)*r02*x9479))+(((-1.0)*x9476*x9477))+((r00*x9478)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9477))+(((-1.0)*gconst2*r00*x9479))+((x9472*x9476)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9475*x9477))+(((-1.0)*r22*x9479))+((r20*x9478)));
evalcond[5]=(((r10*x9478))+(((-1.0)*sj1*sj2))+(((-1.0)*x9474*x9477))+(((-1.0)*r12*x9479))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9480=((-1.0)*r20);
IkReal x9481=((-1.0)*px);
CheckValue<IkReal> x9483 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9480),IKFAST_ATAN2_MAGTHRESH);
if(!x9483.valid){
continue;
}
IkReal x9482=((-1.0)*(x9483.value));
sj5=gconst1;
cj5=gconst2;
j5=x9482;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9481);
rxp1_1=(px*r21);
rxp1_2=(r11*x9481);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9482;
IkReal gconst1=r21;
IkReal gconst2=x9480;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9484=((-1.0)*r20);
IkReal x9485=((-1.0)*px);
CheckValue<IkReal> x9487 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9484),IKFAST_ATAN2_MAGTHRESH);
if(!x9487.valid){
continue;
}
IkReal x9486=((-1.0)*(x9487.value));
sj5=gconst1;
cj5=gconst2;
j5=x9486;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9485);
rxp1_1=(px*r21);
rxp1_2=(r11*x9485);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9486;
IkReal gconst1=r21;
IkReal gconst2=x9484;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9488=((-1.0)*r20);
IkReal x9489=((-1.0)*px);
CheckValue<IkReal> x9491 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9488),IKFAST_ATAN2_MAGTHRESH);
if(!x9491.valid){
continue;
}
IkReal x9490=((-1.0)*(x9491.value));
sj5=gconst1;
cj5=gconst2;
j5=x9490;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9489);
rxp1_1=(px*r21);
rxp1_2=(r11*x9489);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9490;
IkReal gconst1=r21;
IkReal gconst2=x9488;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9494=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9494.valid){
continue;
}
IkReal x9492=x9494.value;
IkReal x9493=(sj0*x9492);
cj4array[0]=((((-1.0)*sj1*sj2*x9493))+((cj1*cj2*x9493)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9495=IKsin(j4);
IkReal x9496=IKcos(j4);
IkReal x9497=(gconst1*x9495);
IkReal x9498=((1.0)*x9496);
IkReal x9499=((1.0)*gconst2*x9495);
evalcond[0]=((-1.0)*r02*x9495);
evalcond[1]=((((-1.0)*r02*x9498))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9499))+((r21*x9497)));
evalcond[3]=((((-1.0)*r10*x9499))+((r11*x9497)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9498))+((gconst2*r20*x9496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9502=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9502.valid){
continue;
}
IkReal x9500=x9502.value;
IkReal x9501=((1.0)*x9500);
cj4array[0]=((((-1.0)*cj2*sj1*x9501))+(((-1.0)*cj1*sj2*x9501)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9503=IKsin(j4);
IkReal x9504=IKcos(j4);
IkReal x9505=(gconst2*r10);
IkReal x9506=((1.0)*sj0);
IkReal x9507=(gconst1*r11);
IkReal x9508=((1.0)*x9503);
IkReal x9509=((1.0)*x9504);
evalcond[0]=((-1.0)*r02*x9503);
evalcond[1]=((((-1.0)*r02*x9509))+(((-1.0)*x9506)));
evalcond[2]=((((-1.0)*gconst2*r20*x9508))+((gconst1*r21*x9503)));
evalcond[3]=((((-1.0)*x9505*x9508))+((x9503*x9507)));
evalcond[4]=(((x9504*x9505))+(((-1.0)*x9507*x9509))+(((-1.0)*cj1*cj2*x9506))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9510=IKPowWithIntegerCheck(r02,-1);
if(!x9510.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9510.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9511=IKsin(j4);
IkReal x9512=IKcos(j4);
IkReal x9513=(gconst2*r10);
IkReal x9514=(gconst1*r11);
IkReal x9515=(gconst1*r21);
IkReal x9516=(gconst2*r20);
IkReal x9517=((1.0)*x9511);
IkReal x9518=((1.0)*x9512);
evalcond[0]=((-1.0)*r02*x9511);
evalcond[1]=(((x9511*x9515))+(((-1.0)*x9516*x9517)));
evalcond[2]=((((-1.0)*x9513*x9517))+((x9511*x9514)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9512*x9516))+(((-1.0)*x9515*x9518)));
evalcond[4]=((((-1.0)*x9514*x9518))+(((-1.0)*cj1*cj2*sj0))+((x9512*x9513))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9519=(cj2*sj1);
IkReal x9520=(cj1*sj2);
IkReal x9521=(gconst1*r21);
IkReal x9522=((1.0)*gconst2*r20);
CheckValue<IkReal> x9523 = IKatan2WithCheck(IkReal((((r22*x9519))+((r22*x9520)))),IkReal((((x9519*x9521))+((x9520*x9521))+(((-1.0)*x9519*x9522))+(((-1.0)*x9520*x9522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9523.valid){
continue;
}
CheckValue<IkReal> x9524=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9521*x9521)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9521)))),-1);
if(!x9524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9523.value)+(((1.5707963267949)*(x9524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9525=IKsin(j4);
IkReal x9526=IKcos(j4);
IkReal x9527=(gconst1*r11);
IkReal x9528=(sj1*sj2);
IkReal x9529=(gconst1*r21);
IkReal x9530=(gconst1*r01);
IkReal x9531=((1.0)*x9526);
IkReal x9532=(gconst2*x9526);
IkReal x9533=((1.0)*cj1*cj2);
IkReal x9534=((1.0)*x9525);
evalcond[0]=((((-1.0)*r22*x9531))+((x9525*x9529))+(((-1.0)*gconst2*r20*x9534)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9534))+((x9525*x9527))+(((-1.0)*r12*x9531)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9534))+(((-1.0)*r02*x9531))+((x9525*x9530)));
evalcond[3]=(((cj2*sj1))+((r20*x9532))+(((-1.0)*r22*x9534))+((cj1*sj2))+(((-1.0)*x9529*x9531)));
evalcond[4]=((((-1.0)*cj0*x9533))+((cj0*x9528))+(((-1.0)*r02*x9534))+(((-1.0)*x9530*x9531))+((r00*x9532)));
evalcond[5]=(((sj0*x9528))+((r10*x9532))+(((-1.0)*x9527*x9531))+(((-1.0)*sj0*x9533))+(((-1.0)*r12*x9534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9535=((1.0)*gconst2);
CheckValue<IkReal> x9536 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst1*r21*sj0))+(((-1.0)*r20*sj0*x9535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9536.valid){
continue;
}
CheckValue<IkReal> x9537=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9535)))),-1);
if(!x9537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9536.value)+(((1.5707963267949)*(x9537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9538=IKsin(j4);
IkReal x9539=IKcos(j4);
IkReal x9540=(gconst1*r11);
IkReal x9541=(sj1*sj2);
IkReal x9542=(gconst1*r21);
IkReal x9543=(gconst1*r01);
IkReal x9544=((1.0)*x9539);
IkReal x9545=(gconst2*x9539);
IkReal x9546=((1.0)*cj1*cj2);
IkReal x9547=((1.0)*x9538);
evalcond[0]=(((x9538*x9542))+(((-1.0)*r22*x9544))+(((-1.0)*gconst2*r20*x9547)));
evalcond[1]=((((-1.0)*r12*x9544))+cj0+((x9538*x9540))+(((-1.0)*gconst2*r10*x9547)));
evalcond[2]=((((-1.0)*sj0))+((x9538*x9543))+(((-1.0)*r02*x9544))+(((-1.0)*gconst2*r00*x9547)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9542*x9544))+((cj1*sj2))+(((-1.0)*r22*x9547))+((r20*x9545)));
evalcond[4]=((((-1.0)*cj0*x9546))+(((-1.0)*x9543*x9544))+(((-1.0)*r02*x9547))+((cj0*x9541))+((r00*x9545)));
evalcond[5]=((((-1.0)*r12*x9547))+(((-1.0)*x9540*x9544))+(((-1.0)*sj0*x9546))+((r10*x9545))+((sj0*x9541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9548=((1.0)*gconst2);
CheckValue<IkReal> x9549 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9549.valid){
continue;
}
CheckValue<IkReal> x9550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9548))+(((-1.0)*gconst1*r00)))),-1);
if(!x9550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9549.value)+(((1.5707963267949)*(x9550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9551=IKsin(j4);
IkReal x9552=IKcos(j4);
IkReal x9553=(gconst1*r11);
IkReal x9554=(sj1*sj2);
IkReal x9555=(gconst1*r21);
IkReal x9556=(gconst1*r01);
IkReal x9557=((1.0)*x9552);
IkReal x9558=(gconst2*x9552);
IkReal x9559=((1.0)*cj1*cj2);
IkReal x9560=((1.0)*x9551);
evalcond[0]=((((-1.0)*gconst2*r20*x9560))+(((-1.0)*r22*x9557))+((x9551*x9555)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9560))+((x9551*x9553))+(((-1.0)*r12*x9557)));
evalcond[2]=((((-1.0)*gconst2*r00*x9560))+(((-1.0)*sj0))+(((-1.0)*r02*x9557))+((x9551*x9556)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9555*x9557))+((cj1*sj2))+((r20*x9558))+(((-1.0)*r22*x9560)));
evalcond[4]=((((-1.0)*x9556*x9557))+(((-1.0)*cj0*x9559))+((r00*x9558))+((cj0*x9554))+(((-1.0)*r02*x9560)));
evalcond[5]=(((sj0*x9554))+(((-1.0)*sj0*x9559))+(((-1.0)*x9553*x9557))+((r10*x9558))+(((-1.0)*r12*x9560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9561=((-1.0)*r20);
IkReal x9562=x8912;
CheckValue<IkReal> x9564 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9561),IKFAST_ATAN2_MAGTHRESH);
if(!x9564.valid){
continue;
}
IkReal x9563=((-1.0)*(x9564.value));
sj5=gconst1;
cj5=gconst2;
j5=x9563;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9563;
IkReal gconst1=(r21*x9562);
IkReal gconst2=(x9561*x9562);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9565=((-1.0)*r20);
IkReal x9566=x8912;
CheckValue<IkReal> x9568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9565),IKFAST_ATAN2_MAGTHRESH);
if(!x9568.valid){
continue;
}
IkReal x9567=((-1.0)*(x9568.value));
sj5=gconst1;
cj5=gconst2;
j5=x9567;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9567;
IkReal gconst1=(r21*x9566);
IkReal gconst2=(x9565*x9566);
CheckValue<IkReal> x9576=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9576.valid){
continue;
}
IkReal x9569=x9576.value;
IkReal x9570=(sj3*x9569);
IkReal x9571=(r11*x9570);
IkReal x9572=(r00*x9570);
IkReal x9573=(r01*x9570);
IkReal x9574=(r10*x9570);
IkReal x9575=(r20*r21*x9570);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9572*(r20*r20)))+((r10*r20*r21*x9573))+((r00*r20*r21*x9571))+((r01*x9571*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9577=gconst2*gconst2;
IkReal x9578=gconst1*gconst1;
IkReal x9579=((1.0)*cj3);
IkReal x9580=((1.0)*sj3);
IkReal x9581=(r11*sj3);
IkReal x9582=(r10*sj3);
IkReal x9583=(gconst1*gconst2*r00);
IkReal x9584=(gconst1*gconst2*r01);
IkReal x9585=(r00*x9577);
IkReal x9586=(r01*x9578);
CheckValue<IkReal> x9587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9579*x9585))+((cj3*r11*x9583))+((cj3*r10*x9584))+(((-1.0)*r02*r12*x9579))+(((-1.0)*r11*x9579*x9586)))),-1);
if(!x9587.valid){
continue;
}
CheckValue<IkReal> x9588 = IKatan2WithCheck(IkReal((((gconst2*r02*x9581))+((gconst1*r02*x9582)))),IkReal((((x9582*x9586))+(((-1.0)*r11*x9580*x9585))+((x9581*x9584))+(((-1.0)*r10*x9580*x9583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9587.value)))+(x9588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9589=IKsin(j4);
IkReal x9590=IKcos(j4);
IkReal x9591=(sj1*sj2);
IkReal x9592=(gconst1*sj3);
IkReal x9593=(cj3*gconst1);
IkReal x9594=(cj3*gconst2);
IkReal x9595=((1.0)*cj2);
IkReal x9596=(cj1*sj2);
IkReal x9597=(gconst2*sj3);
IkReal x9598=(cj1*x9595);
IkReal x9599=((1.0)*x9590);
IkReal x9600=((1.0)*x9589);
IkReal x9601=(gconst1*x9589);
IkReal x9602=(cj3*x9589);
IkReal x9603=(x9590*x9597);
evalcond[0]=(((r21*x9601))+(((-1.0)*r22*x9599))+(((-1.0)*gconst2*r20*x9600)));
evalcond[1]=(((r01*x9601))+(((-1.0)*gconst2*r00*x9600))+(((-1.0)*r02*x9599)));
evalcond[2]=((1.0)+((r11*x9601))+(((-1.0)*gconst2*r10*x9600))+(((-1.0)*r12*x9599)));
evalcond[3]=(((r11*x9597))+((r11*x9590*x9593))+((r12*x9602))+(((-1.0)*r10*x9594*x9599))+((r10*x9592)));
evalcond[4]=(((r11*x9594))+((r10*x9603))+(((-1.0)*r12*sj3*x9600))+((r10*x9593))+(((-1.0)*r11*x9592*x9599)));
evalcond[5]=(((r20*x9592))+((cj2*sj1))+(((-1.0)*r20*x9594*x9599))+((r21*x9590*x9593))+x9596+((r21*x9597))+((r22*x9602)));
evalcond[6]=(((r01*x9597))+((r00*x9592))+(((-1.0)*x9598))+x9591+((r01*x9590*x9593))+(((-1.0)*r00*x9594*x9599))+((r02*x9602)));
evalcond[7]=(((r20*x9593))+(((-1.0)*r21*x9592*x9599))+((r20*x9603))+(((-1.0)*x9598))+x9591+((r21*x9594))+(((-1.0)*r22*sj3*x9600)));
evalcond[8]=((((-1.0)*sj1*x9595))+(((-1.0)*r02*sj3*x9600))+((r01*x9594))+(((-1.0)*r01*x9592*x9599))+((r00*x9603))+((r00*x9593))+(((-1.0)*x9596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9604=gconst2*gconst2;
IkReal x9605=gconst1*gconst1;
IkReal x9606=(gconst2*r11);
IkReal x9607=(cj3*r02);
IkReal x9608=(gconst1*r01);
IkReal x9609=(cj3*r10);
IkReal x9610=(r10*sj3);
IkReal x9611=((1.0)*gconst1*r00);
IkReal x9612=(r01*x9605);
IkReal x9613=(r00*x9604);
CheckValue<IkReal> x9614 = IKatan2WithCheck(IkReal((((gconst1*r10*x9607))+((x9606*x9607)))),IkReal((((cj3*x9606*x9608))+((x9609*x9612))+(((-1.0)*cj3*r11*x9613))+(((-1.0)*gconst2*x9609*x9611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9614.valid){
continue;
}
CheckValue<IkReal> x9615=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9608*x9610))+((x9610*x9613))+((r11*sj3*x9612))+(((-1.0)*sj3*x9606*x9611)))),-1);
if(!x9615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9614.value)+(((1.5707963267949)*(x9615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9616=IKsin(j4);
IkReal x9617=IKcos(j4);
IkReal x9618=(sj1*sj2);
IkReal x9619=(gconst1*sj3);
IkReal x9620=(cj3*gconst1);
IkReal x9621=(cj3*gconst2);
IkReal x9622=((1.0)*cj2);
IkReal x9623=(cj1*sj2);
IkReal x9624=(gconst2*sj3);
IkReal x9625=(cj1*x9622);
IkReal x9626=((1.0)*x9617);
IkReal x9627=((1.0)*x9616);
IkReal x9628=(gconst1*x9616);
IkReal x9629=(cj3*x9616);
IkReal x9630=(x9617*x9624);
evalcond[0]=((((-1.0)*r22*x9626))+((r21*x9628))+(((-1.0)*gconst2*r20*x9627)));
evalcond[1]=(((r01*x9628))+(((-1.0)*gconst2*r00*x9627))+(((-1.0)*r02*x9626)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9626))+((r11*x9628))+(((-1.0)*gconst2*r10*x9627)));
evalcond[3]=(((r10*x9619))+((r12*x9629))+((r11*x9617*x9620))+((r11*x9624))+(((-1.0)*r10*x9621*x9626)));
evalcond[4]=(((r10*x9630))+((r10*x9620))+(((-1.0)*r12*sj3*x9627))+((r11*x9621))+(((-1.0)*r11*x9619*x9626)));
evalcond[5]=(((cj2*sj1))+((r20*x9619))+(((-1.0)*r20*x9621*x9626))+((r21*x9617*x9620))+((r21*x9624))+((r22*x9629))+x9623);
evalcond[6]=(((r01*x9624))+((r00*x9619))+((r02*x9629))+x9618+(((-1.0)*r00*x9621*x9626))+((r01*x9617*x9620))+(((-1.0)*x9625)));
evalcond[7]=(((r20*x9620))+((r20*x9630))+(((-1.0)*r22*sj3*x9627))+((r21*x9621))+x9618+(((-1.0)*r21*x9619*x9626))+(((-1.0)*x9625)));
evalcond[8]=(((r01*x9621))+((r00*x9630))+((r00*x9620))+(((-1.0)*x9623))+(((-1.0)*r02*sj3*x9627))+(((-1.0)*r01*x9619*x9626))+(((-1.0)*sj1*x9622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9631=((1.0)*gconst2);
CheckValue<IkReal> x9632=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9631)))),-1);
if(!x9632.valid){
continue;
}
CheckValue<IkReal> x9633 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9632.value)))+(x9633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9634=IKsin(j4);
IkReal x9635=IKcos(j4);
IkReal x9636=(sj1*sj2);
IkReal x9637=(gconst1*sj3);
IkReal x9638=(cj3*gconst1);
IkReal x9639=(cj3*gconst2);
IkReal x9640=((1.0)*cj2);
IkReal x9641=(cj1*sj2);
IkReal x9642=(gconst2*sj3);
IkReal x9643=(cj1*x9640);
IkReal x9644=((1.0)*x9635);
IkReal x9645=((1.0)*x9634);
IkReal x9646=(gconst1*x9634);
IkReal x9647=(cj3*x9634);
IkReal x9648=(x9635*x9642);
evalcond[0]=((((-1.0)*gconst2*r20*x9645))+((r21*x9646))+(((-1.0)*r22*x9644)));
evalcond[1]=((((-1.0)*gconst2*r00*x9645))+((r01*x9646))+(((-1.0)*r02*x9644)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9644))+((r11*x9646))+(((-1.0)*gconst2*r10*x9645)));
evalcond[3]=(((r11*x9642))+((r11*x9635*x9638))+((r10*x9637))+(((-1.0)*r10*x9639*x9644))+((r12*x9647)));
evalcond[4]=(((r10*x9638))+(((-1.0)*r11*x9637*x9644))+((r10*x9648))+(((-1.0)*r12*sj3*x9645))+((r11*x9639)));
evalcond[5]=(((r22*x9647))+((cj2*sj1))+((r20*x9637))+(((-1.0)*r20*x9639*x9644))+x9641+((r21*x9635*x9638))+((r21*x9642)));
evalcond[6]=(((r00*x9637))+((r02*x9647))+(((-1.0)*r00*x9639*x9644))+(((-1.0)*x9643))+((r01*x9642))+x9636+((r01*x9635*x9638)));
evalcond[7]=((((-1.0)*r22*sj3*x9645))+((r20*x9638))+((r21*x9639))+(((-1.0)*x9643))+x9636+((r20*x9648))+(((-1.0)*r21*x9637*x9644)));
evalcond[8]=(((r00*x9638))+((r01*x9639))+(((-1.0)*sj1*x9640))+((r00*x9648))+(((-1.0)*r02*sj3*x9645))+(((-1.0)*r01*x9637*x9644))+(((-1.0)*x9641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9649=((-1.0)*r20);
IkReal x9650=x8912;
CheckValue<IkReal> x9652 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9649),IKFAST_ATAN2_MAGTHRESH);
if(!x9652.valid){
continue;
}
IkReal x9651=((-1.0)*(x9652.value));
sj5=gconst1;
cj5=gconst2;
j5=x9651;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9651;
IkReal gconst1=(r21*x9650);
IkReal gconst2=(x9649*x9650);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9653=((-1.0)*r20);
IkReal x9654=x8912;
CheckValue<IkReal> x9656 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9653),IKFAST_ATAN2_MAGTHRESH);
if(!x9656.valid){
continue;
}
IkReal x9655=((-1.0)*(x9656.value));
sj5=gconst1;
cj5=gconst2;
j5=x9655;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9655;
IkReal gconst1=(r21*x9654);
IkReal gconst2=(x9653*x9654);
CheckValue<IkReal> x9664=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9664.valid){
continue;
}
IkReal x9657=x9664.value;
IkReal x9658=(sj3*x9657);
IkReal x9659=(r11*x9658);
IkReal x9660=(r00*x9658);
IkReal x9661=(r01*x9658);
IkReal x9662=(r10*x9658);
IkReal x9663=(r20*r21*x9658);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9659))+((r10*r20*r21*x9661))+((r10*x9660*(r20*r20)))+((r01*x9659*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9665=gconst2*gconst2;
IkReal x9666=gconst1*gconst1;
IkReal x9667=((1.0)*cj3);
IkReal x9668=((1.0)*sj3);
IkReal x9669=(r11*sj3);
IkReal x9670=(r10*sj3);
IkReal x9671=(gconst1*gconst2*r00);
IkReal x9672=(gconst1*gconst2*r01);
IkReal x9673=(r00*x9665);
IkReal x9674=(r01*x9666);
CheckValue<IkReal> x9675 = IKatan2WithCheck(IkReal((((gconst1*r02*x9670))+((gconst2*r02*x9669)))),IkReal(((((-1.0)*r10*x9668*x9671))+(((-1.0)*r11*x9668*x9673))+((x9670*x9674))+((x9669*x9672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9675.valid){
continue;
}
CheckValue<IkReal> x9676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9667))+(((-1.0)*r11*x9667*x9674))+((cj3*r11*x9671))+((cj3*r10*x9672))+(((-1.0)*r10*x9667*x9673)))),-1);
if(!x9676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9675.value)+(((1.5707963267949)*(x9676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9677=IKsin(j4);
IkReal x9678=IKcos(j4);
IkReal x9679=(cj2*sj1);
IkReal x9680=(cj1*sj2);
IkReal x9681=(gconst1*sj3);
IkReal x9682=(cj3*gconst1);
IkReal x9683=(sj1*sj2);
IkReal x9684=(cj3*gconst2);
IkReal x9685=(cj1*cj2);
IkReal x9686=(gconst2*sj3);
IkReal x9687=((1.0)*x9678);
IkReal x9688=((1.0)*x9677);
IkReal x9689=(gconst1*x9677);
IkReal x9690=(cj3*x9677);
IkReal x9691=(x9679+x9680);
IkReal x9692=(x9678*x9686);
evalcond[0]=(((r21*x9689))+(((-1.0)*r22*x9687))+(((-1.0)*gconst2*r20*x9688)));
evalcond[1]=((((-1.0)*r02*x9687))+(((-1.0)*gconst2*r00*x9688))+((r01*x9689)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9688))+(((-1.0)*r12*x9687))+((r11*x9689)));
evalcond[3]=(((r11*x9678*x9682))+((r12*x9690))+((r11*x9686))+((r10*x9681))+(((-1.0)*r10*x9684*x9687)));
evalcond[4]=((((-1.0)*r11*x9681*x9687))+((r10*x9692))+((r11*x9684))+((r10*x9682))+(((-1.0)*r12*sj3*x9688)));
evalcond[5]=((((-1.0)*r20*x9684*x9687))+((r22*x9690))+((r21*x9686))+x9691+((r20*x9681))+((r21*x9678*x9682)));
evalcond[6]=(((r01*x9678*x9682))+(((-1.0)*x9683))+((r02*x9690))+x9685+((r01*x9686))+((r00*x9681))+(((-1.0)*r00*x9684*x9687)));
evalcond[7]=((((-1.0)*r01*x9681*x9687))+(((-1.0)*r02*sj3*x9688))+x9691+((r01*x9684))+((r00*x9692))+((r00*x9682)));
evalcond[8]=((((-1.0)*r21*x9681*x9687))+(((-1.0)*x9685))+(((-1.0)*r22*sj3*x9688))+((r21*x9684))+x9683+((r20*x9682))+((r20*x9692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9693=gconst2*gconst2;
IkReal x9694=gconst1*gconst1;
IkReal x9695=(gconst2*r11);
IkReal x9696=(cj3*r02);
IkReal x9697=(gconst1*r01);
IkReal x9698=(cj3*r10);
IkReal x9699=(r10*sj3);
IkReal x9700=((1.0)*gconst1*r00);
IkReal x9701=(r01*x9694);
IkReal x9702=(r00*x9693);
CheckValue<IkReal> x9703=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj3*x9695*x9700))+((r02*r12*sj3))+(((-1.0)*gconst2*x9697*x9699))+((x9699*x9702))+((r11*sj3*x9701)))),-1);
if(!x9703.valid){
continue;
}
CheckValue<IkReal> x9704 = IKatan2WithCheck(IkReal((((x9695*x9696))+((gconst1*r10*x9696)))),IkReal(((((-1.0)*cj3*r11*x9702))+((cj3*x9695*x9697))+((x9698*x9701))+(((-1.0)*gconst2*x9698*x9700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9703.value)))+(x9704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9705=IKsin(j4);
IkReal x9706=IKcos(j4);
IkReal x9707=(cj2*sj1);
IkReal x9708=(cj1*sj2);
IkReal x9709=(gconst1*sj3);
IkReal x9710=(cj3*gconst1);
IkReal x9711=(sj1*sj2);
IkReal x9712=(cj3*gconst2);
IkReal x9713=(cj1*cj2);
IkReal x9714=(gconst2*sj3);
IkReal x9715=((1.0)*x9706);
IkReal x9716=((1.0)*x9705);
IkReal x9717=(gconst1*x9705);
IkReal x9718=(cj3*x9705);
IkReal x9719=(x9708+x9707);
IkReal x9720=(x9706*x9714);
evalcond[0]=((((-1.0)*gconst2*r20*x9716))+((r21*x9717))+(((-1.0)*r22*x9715)));
evalcond[1]=((((-1.0)*r02*x9715))+(((-1.0)*gconst2*r00*x9716))+((r01*x9717)));
evalcond[2]=((-1.0)+((r11*x9717))+(((-1.0)*gconst2*r10*x9716))+(((-1.0)*r12*x9715)));
evalcond[3]=(((r10*x9709))+(((-1.0)*r10*x9712*x9715))+((r12*x9718))+((r11*x9706*x9710))+((r11*x9714)));
evalcond[4]=((((-1.0)*r12*sj3*x9716))+(((-1.0)*r11*x9709*x9715))+((r11*x9712))+((r10*x9710))+((r10*x9720)));
evalcond[5]=(((r21*x9706*x9710))+((r22*x9718))+(((-1.0)*r20*x9712*x9715))+((r20*x9709))+x9719+((r21*x9714)));
evalcond[6]=((((-1.0)*r00*x9712*x9715))+((r02*x9718))+((r00*x9709))+x9713+((r01*x9714))+(((-1.0)*x9711))+((r01*x9706*x9710)));
evalcond[7]=((((-1.0)*r02*sj3*x9716))+x9719+(((-1.0)*r01*x9709*x9715))+((r01*x9712))+((r00*x9710))+((r00*x9720)));
evalcond[8]=((((-1.0)*r21*x9709*x9715))+(((-1.0)*r22*sj3*x9716))+x9711+((r20*x9720))+((r20*x9710))+((r21*x9712))+(((-1.0)*x9713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9721 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9721.valid){
continue;
}
CheckValue<IkReal> x9722=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9721.value)+(((1.5707963267949)*(x9722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9723=IKsin(j4);
IkReal x9724=IKcos(j4);
IkReal x9725=(cj2*sj1);
IkReal x9726=(cj1*sj2);
IkReal x9727=(gconst1*sj3);
IkReal x9728=(cj3*gconst1);
IkReal x9729=(sj1*sj2);
IkReal x9730=(cj3*gconst2);
IkReal x9731=(cj1*cj2);
IkReal x9732=(gconst2*sj3);
IkReal x9733=((1.0)*x9724);
IkReal x9734=((1.0)*x9723);
IkReal x9735=(gconst1*x9723);
IkReal x9736=(cj3*x9723);
IkReal x9737=(x9726+x9725);
IkReal x9738=(x9724*x9732);
evalcond[0]=((((-1.0)*r22*x9733))+((r21*x9735))+(((-1.0)*gconst2*r20*x9734)));
evalcond[1]=((((-1.0)*r02*x9733))+(((-1.0)*gconst2*r00*x9734))+((r01*x9735)));
evalcond[2]=((-1.0)+((r11*x9735))+(((-1.0)*r12*x9733))+(((-1.0)*gconst2*r10*x9734)));
evalcond[3]=(((r11*x9724*x9728))+((r11*x9732))+((r12*x9736))+(((-1.0)*r10*x9730*x9733))+((r10*x9727)));
evalcond[4]=((((-1.0)*r11*x9727*x9733))+((r11*x9730))+(((-1.0)*r12*sj3*x9734))+((r10*x9728))+((r10*x9738)));
evalcond[5]=(((r21*x9724*x9728))+(((-1.0)*r20*x9730*x9733))+x9737+((r20*x9727))+((r21*x9732))+((r22*x9736)));
evalcond[6]=((((-1.0)*r00*x9730*x9733))+((r02*x9736))+((r01*x9724*x9728))+x9731+(((-1.0)*x9729))+((r00*x9727))+((r01*x9732)));
evalcond[7]=((((-1.0)*r02*sj3*x9734))+x9737+(((-1.0)*r01*x9727*x9733))+((r00*x9728))+((r01*x9730))+((r00*x9738)));
evalcond[8]=(((r20*x9738))+x9729+((r20*x9728))+(((-1.0)*r22*sj3*x9734))+((r21*x9730))+(((-1.0)*r21*x9727*x9733))+(((-1.0)*x9731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9739=((-1.0)*r20);
IkReal x9740=x8912;
CheckValue<IkReal> x9742 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9739),IKFAST_ATAN2_MAGTHRESH);
if(!x9742.valid){
continue;
}
IkReal x9741=((-1.0)*(x9742.value));
sj5=gconst1;
cj5=gconst2;
j5=x9741;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9741;
IkReal gconst1=(r21*x9740);
IkReal gconst2=(x9739*x9740);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9743=((-1.0)*r20);
IkReal x9744=x8912;
CheckValue<IkReal> x9746 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9743),IKFAST_ATAN2_MAGTHRESH);
if(!x9746.valid){
continue;
}
IkReal x9745=((-1.0)*(x9746.value));
sj5=gconst1;
cj5=gconst2;
j5=x9745;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9745;
IkReal gconst1=(r21*x9744);
IkReal gconst2=(x9743*x9744);
CheckValue<IkReal> x9754=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9754.valid){
continue;
}
IkReal x9747=x9754.value;
IkReal x9748=(sj3*x9747);
IkReal x9749=(r11*x9748);
IkReal x9750=(r00*x9748);
IkReal x9751=(r01*x9748);
IkReal x9752=(r10*x9748);
IkReal x9753=(r20*r21*x9748);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9749*(r21*r21)))+((r10*r20*r21*x9751))+((r00*r20*r21*x9749))+((r10*x9750*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9755=gconst1*gconst1;
IkReal x9756=gconst2*gconst2;
IkReal x9757=((1.0)*cj3);
IkReal x9758=(gconst2*r10);
IkReal x9759=(r01*sj3);
IkReal x9760=(gconst1*r00*sj3);
IkReal x9761=(gconst1*gconst2*r11);
IkReal x9762=(r10*x9756);
IkReal x9763=(r11*x9755);
CheckValue<IkReal> x9764 = IKatan2WithCheck(IkReal((((r12*x9760))+((gconst2*r12*x9759)))),IkReal((((r00*sj3*x9763))+(((-1.0)*x9759*x9762))+(((-1.0)*x9758*x9760))+((x9759*x9761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9764.valid){
continue;
}
CheckValue<IkReal> x9765=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9761))+(((-1.0)*r00*x9757*x9762))+((cj3*gconst1*r01*x9758))+(((-1.0)*r02*r12*x9757))+(((-1.0)*r01*x9757*x9763)))),-1);
if(!x9765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9764.value)+(((1.5707963267949)*(x9765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9766=IKsin(j4);
IkReal x9767=IKcos(j4);
IkReal x9768=(sj1*sj2);
IkReal x9769=(gconst1*sj3);
IkReal x9770=(cj3*gconst1);
IkReal x9771=(cj3*gconst2);
IkReal x9772=((1.0)*cj2);
IkReal x9773=(cj1*sj2);
IkReal x9774=(gconst2*sj3);
IkReal x9775=(cj1*x9772);
IkReal x9776=((1.0)*x9767);
IkReal x9777=((1.0)*x9766);
IkReal x9778=(gconst1*x9766);
IkReal x9779=(cj3*x9766);
IkReal x9780=(x9767*x9774);
evalcond[0]=((((-1.0)*r22*x9776))+(((-1.0)*gconst2*r20*x9777))+((r21*x9778)));
evalcond[1]=((((-1.0)*gconst2*r10*x9777))+(((-1.0)*r12*x9776))+((r11*x9778)));
evalcond[2]=((-1.0)+((r01*x9778))+(((-1.0)*gconst2*r00*x9777))+(((-1.0)*r02*x9776)));
evalcond[3]=(((r00*x9769))+((r01*x9774))+((r01*x9767*x9770))+((r02*x9779))+(((-1.0)*r00*x9771*x9776)));
evalcond[4]=(((r00*x9780))+((r01*x9771))+((r00*x9770))+(((-1.0)*r01*x9769*x9776))+(((-1.0)*r02*sj3*x9777)));
evalcond[5]=((((-1.0)*r20*x9771*x9776))+((cj2*sj1))+((r22*x9779))+x9773+((r21*x9767*x9770))+((r21*x9774))+((r20*x9769)));
evalcond[6]=(((r12*x9779))+((r10*x9769))+(((-1.0)*r10*x9771*x9776))+x9768+((r11*x9767*x9770))+(((-1.0)*x9775))+((r11*x9774)));
evalcond[7]=(x9768+((r21*x9771))+((r20*x9770))+((r20*x9780))+(((-1.0)*x9775))+(((-1.0)*r22*sj3*x9777))+(((-1.0)*r21*x9769*x9776)));
evalcond[8]=((((-1.0)*r11*x9769*x9776))+((r10*x9770))+(((-1.0)*x9773))+((r10*x9780))+(((-1.0)*r12*sj3*x9777))+(((-1.0)*sj1*x9772))+((r11*x9771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9781=gconst2*gconst2;
IkReal x9782=gconst1*gconst1;
IkReal x9783=(gconst1*r00);
IkReal x9784=(r11*sj3);
IkReal x9785=((1.0)*gconst2);
IkReal x9786=(cj3*r12);
IkReal x9787=(cj3*r11);
IkReal x9788=(gconst2*r01);
IkReal x9789=(cj3*r10);
IkReal x9790=(r10*sj3);
CheckValue<IkReal> x9791=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9785*x9790))+((r01*x9782*x9784))+(((-1.0)*x9783*x9784*x9785))+((r00*x9781*x9790)))),-1);
if(!x9791.valid){
continue;
}
CheckValue<IkReal> x9792 = IKatan2WithCheck(IkReal((((x9786*x9788))+((x9783*x9786)))),IkReal((((gconst1*x9787*x9788))+(((-1.0)*x9783*x9785*x9789))+(((-1.0)*r01*x9781*x9789))+((r00*x9782*x9787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9791.value)))+(x9792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9793=IKsin(j4);
IkReal x9794=IKcos(j4);
IkReal x9795=(sj1*sj2);
IkReal x9796=(gconst1*sj3);
IkReal x9797=(cj3*gconst1);
IkReal x9798=(cj3*gconst2);
IkReal x9799=((1.0)*cj2);
IkReal x9800=(cj1*sj2);
IkReal x9801=(gconst2*sj3);
IkReal x9802=(cj1*x9799);
IkReal x9803=((1.0)*x9794);
IkReal x9804=((1.0)*x9793);
IkReal x9805=(gconst1*x9793);
IkReal x9806=(cj3*x9793);
IkReal x9807=(x9794*x9801);
evalcond[0]=(((r21*x9805))+(((-1.0)*r22*x9803))+(((-1.0)*gconst2*r20*x9804)));
evalcond[1]=((((-1.0)*gconst2*r10*x9804))+((r11*x9805))+(((-1.0)*r12*x9803)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9804))+(((-1.0)*r02*x9803))+((r01*x9805)));
evalcond[3]=(((r00*x9796))+((r02*x9806))+(((-1.0)*r00*x9798*x9803))+((r01*x9794*x9797))+((r01*x9801)));
evalcond[4]=(((r00*x9807))+(((-1.0)*r01*x9796*x9803))+((r00*x9797))+((r01*x9798))+(((-1.0)*r02*sj3*x9804)));
evalcond[5]=(((cj2*sj1))+((r21*x9801))+((r20*x9796))+((r22*x9806))+(((-1.0)*r20*x9798*x9803))+((r21*x9794*x9797))+x9800);
evalcond[6]=((((-1.0)*r10*x9798*x9803))+(((-1.0)*x9802))+((r12*x9806))+((r10*x9796))+((r11*x9801))+x9795+((r11*x9794*x9797)));
evalcond[7]=((((-1.0)*x9802))+(((-1.0)*r22*sj3*x9804))+((r20*x9797))+x9795+((r21*x9798))+((r20*x9807))+(((-1.0)*r21*x9796*x9803)));
evalcond[8]=(((r10*x9807))+(((-1.0)*sj1*x9799))+((r11*x9798))+((r10*x9797))+(((-1.0)*x9800))+(((-1.0)*r12*sj3*x9804))+(((-1.0)*r11*x9796*x9803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9808=((1.0)*gconst2);
CheckValue<IkReal> x9809=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9808)))),-1);
if(!x9809.valid){
continue;
}
CheckValue<IkReal> x9810 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9808))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9809.value)))+(x9810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9811=IKsin(j4);
IkReal x9812=IKcos(j4);
IkReal x9813=(sj1*sj2);
IkReal x9814=(gconst1*sj3);
IkReal x9815=(cj3*gconst1);
IkReal x9816=(cj3*gconst2);
IkReal x9817=((1.0)*cj2);
IkReal x9818=(cj1*sj2);
IkReal x9819=(gconst2*sj3);
IkReal x9820=(cj1*x9817);
IkReal x9821=((1.0)*x9812);
IkReal x9822=((1.0)*x9811);
IkReal x9823=(gconst1*x9811);
IkReal x9824=(cj3*x9811);
IkReal x9825=(x9812*x9819);
evalcond[0]=((((-1.0)*gconst2*r20*x9822))+((r21*x9823))+(((-1.0)*r22*x9821)));
evalcond[1]=(((r11*x9823))+(((-1.0)*r12*x9821))+(((-1.0)*gconst2*r10*x9822)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9822))+(((-1.0)*r02*x9821))+((r01*x9823)));
evalcond[3]=((((-1.0)*r00*x9816*x9821))+((r02*x9824))+((r01*x9812*x9815))+((r00*x9814))+((r01*x9819)));
evalcond[4]=(((r00*x9825))+(((-1.0)*r02*sj3*x9822))+(((-1.0)*r01*x9814*x9821))+((r00*x9815))+((r01*x9816)));
evalcond[5]=(((cj2*sj1))+((r21*x9819))+((r22*x9824))+(((-1.0)*r20*x9816*x9821))+((r21*x9812*x9815))+x9818+((r20*x9814)));
evalcond[6]=((((-1.0)*x9820))+((r11*x9812*x9815))+((r11*x9819))+((r12*x9824))+(((-1.0)*r10*x9816*x9821))+x9813+((r10*x9814)));
evalcond[7]=(((r20*x9825))+((r21*x9816))+(((-1.0)*r21*x9814*x9821))+(((-1.0)*x9820))+(((-1.0)*r22*sj3*x9822))+x9813+((r20*x9815)));
evalcond[8]=((((-1.0)*x9818))+((r11*x9816))+(((-1.0)*sj1*x9817))+(((-1.0)*r12*sj3*x9822))+(((-1.0)*r11*x9814*x9821))+((r10*x9825))+((r10*x9815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9826=((-1.0)*r20);
IkReal x9827=x8912;
CheckValue<IkReal> x9829 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9826),IKFAST_ATAN2_MAGTHRESH);
if(!x9829.valid){
continue;
}
IkReal x9828=((-1.0)*(x9829.value));
sj5=gconst1;
cj5=gconst2;
j5=x9828;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9828;
IkReal gconst1=(r21*x9827);
IkReal gconst2=(x9826*x9827);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9830=((-1.0)*r20);
IkReal x9831=x8912;
CheckValue<IkReal> x9833 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9830),IKFAST_ATAN2_MAGTHRESH);
if(!x9833.valid){
continue;
}
IkReal x9832=((-1.0)*(x9833.value));
sj5=gconst1;
cj5=gconst2;
j5=x9832;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9832;
IkReal gconst1=(r21*x9831);
IkReal gconst2=(x9830*x9831);
CheckValue<IkReal> x9841=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9841.valid){
continue;
}
IkReal x9834=x9841.value;
IkReal x9835=(sj3*x9834);
IkReal x9836=(r11*x9835);
IkReal x9837=(r00*x9835);
IkReal x9838=(r01*x9835);
IkReal x9839=(r10*x9835);
IkReal x9840=(r20*r21*x9835);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9838))+((r01*x9836*(r21*r21)))+((r00*r20*r21*x9836))+((r10*x9837*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9842=gconst1*gconst1;
IkReal x9843=gconst2*gconst2;
IkReal x9844=((1.0)*cj3);
IkReal x9845=(gconst2*r10);
IkReal x9846=(r01*sj3);
IkReal x9847=(gconst1*r00*sj3);
IkReal x9848=(gconst1*gconst2*r11);
IkReal x9849=(r10*x9843);
IkReal x9850=(r11*x9842);
CheckValue<IkReal> x9851=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9848))+(((-1.0)*r02*r12*x9844))+(((-1.0)*r01*x9844*x9850))+((cj3*gconst1*r01*x9845))+(((-1.0)*r00*x9844*x9849)))),-1);
if(!x9851.valid){
continue;
}
CheckValue<IkReal> x9852 = IKatan2WithCheck(IkReal((((gconst2*r12*x9846))+((r12*x9847)))),IkReal((((x9846*x9848))+(((-1.0)*x9846*x9849))+(((-1.0)*x9845*x9847))+((r00*sj3*x9850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9851.value)))+(x9852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9853=IKsin(j4);
IkReal x9854=IKcos(j4);
IkReal x9855=(cj2*sj1);
IkReal x9856=(cj1*sj2);
IkReal x9857=(gconst1*sj3);
IkReal x9858=(cj3*gconst1);
IkReal x9859=(sj1*sj2);
IkReal x9860=(cj3*gconst2);
IkReal x9861=(cj1*cj2);
IkReal x9862=(gconst2*sj3);
IkReal x9863=((1.0)*x9854);
IkReal x9864=((1.0)*x9853);
IkReal x9865=(gconst1*x9853);
IkReal x9866=(cj3*x9853);
IkReal x9867=(x9855+x9856);
IkReal x9868=(x9854*x9862);
evalcond[0]=((((-1.0)*r22*x9863))+((r21*x9865))+(((-1.0)*gconst2*r20*x9864)));
evalcond[1]=((((-1.0)*r12*x9863))+((r11*x9865))+(((-1.0)*gconst2*r10*x9864)));
evalcond[2]=((1.0)+((r01*x9865))+(((-1.0)*gconst2*r00*x9864))+(((-1.0)*r02*x9863)));
evalcond[3]=(((r01*x9854*x9858))+((r01*x9862))+((r02*x9866))+((r00*x9857))+(((-1.0)*r00*x9860*x9863)));
evalcond[4]=(((r00*x9868))+((r01*x9860))+(((-1.0)*r01*x9857*x9863))+((r00*x9858))+(((-1.0)*r02*sj3*x9864)));
evalcond[5]=(((r22*x9866))+(((-1.0)*r20*x9860*x9863))+((r20*x9857))+((r21*x9854*x9858))+((r21*x9862))+x9867);
evalcond[6]=(((r10*x9857))+(((-1.0)*x9859))+((r11*x9862))+((r12*x9866))+(((-1.0)*r10*x9860*x9863))+x9861+((r11*x9854*x9858)));
evalcond[7]=(((r10*x9858))+(((-1.0)*r11*x9857*x9863))+((r11*x9860))+((r10*x9868))+(((-1.0)*r12*sj3*x9864))+x9867);
evalcond[8]=(((r20*x9858))+(((-1.0)*x9861))+(((-1.0)*r21*x9857*x9863))+((r21*x9860))+((r20*x9868))+x9859+(((-1.0)*r22*sj3*x9864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9869=gconst2*gconst2;
IkReal x9870=gconst1*gconst1;
IkReal x9871=(gconst1*r00);
IkReal x9872=(r11*sj3);
IkReal x9873=((1.0)*gconst2);
IkReal x9874=(cj3*r12);
IkReal x9875=(cj3*r11);
IkReal x9876=(gconst2*r01);
IkReal x9877=(cj3*r10);
IkReal x9878=(r10*sj3);
CheckValue<IkReal> x9879=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9871*x9872*x9873))+(((-1.0)*gconst1*r01*x9873*x9878))+((r00*x9869*x9878))+((r01*x9870*x9872)))),-1);
if(!x9879.valid){
continue;
}
CheckValue<IkReal> x9880 = IKatan2WithCheck(IkReal((((x9874*x9876))+((x9871*x9874)))),IkReal(((((-1.0)*x9871*x9873*x9877))+(((-1.0)*r01*x9869*x9877))+((gconst1*x9875*x9876))+((r00*x9870*x9875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9879.value)))+(x9880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9881=IKsin(j4);
IkReal x9882=IKcos(j4);
IkReal x9883=(cj2*sj1);
IkReal x9884=(cj1*sj2);
IkReal x9885=(gconst1*sj3);
IkReal x9886=(cj3*gconst1);
IkReal x9887=(sj1*sj2);
IkReal x9888=(cj3*gconst2);
IkReal x9889=(cj1*cj2);
IkReal x9890=(gconst2*sj3);
IkReal x9891=((1.0)*x9882);
IkReal x9892=((1.0)*x9881);
IkReal x9893=(gconst1*x9881);
IkReal x9894=(cj3*x9881);
IkReal x9895=(x9884+x9883);
IkReal x9896=(x9882*x9890);
evalcond[0]=(((r21*x9893))+(((-1.0)*gconst2*r20*x9892))+(((-1.0)*r22*x9891)));
evalcond[1]=((((-1.0)*r12*x9891))+((r11*x9893))+(((-1.0)*gconst2*r10*x9892)));
evalcond[2]=((1.0)+((r01*x9893))+(((-1.0)*gconst2*r00*x9892))+(((-1.0)*r02*x9891)));
evalcond[3]=(((r01*x9890))+((r00*x9885))+((r02*x9894))+((r01*x9882*x9886))+(((-1.0)*r00*x9888*x9891)));
evalcond[4]=(((r01*x9888))+((r00*x9896))+(((-1.0)*r01*x9885*x9891))+((r00*x9886))+(((-1.0)*r02*sj3*x9892)));
evalcond[5]=(((r20*x9885))+((r22*x9894))+((r21*x9882*x9886))+((r21*x9890))+(((-1.0)*r20*x9888*x9891))+x9895);
evalcond[6]=((((-1.0)*r10*x9888*x9891))+((r11*x9890))+((r12*x9894))+((r11*x9882*x9886))+((r10*x9885))+(((-1.0)*x9887))+x9889);
evalcond[7]=(((r11*x9888))+(((-1.0)*r11*x9885*x9891))+((r10*x9886))+((r10*x9896))+(((-1.0)*r12*sj3*x9892))+x9895);
evalcond[8]=(((r20*x9886))+((r21*x9888))+(((-1.0)*r21*x9885*x9891))+((r20*x9896))+(((-1.0)*x9889))+x9887+(((-1.0)*r22*sj3*x9892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9897 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9897.valid){
continue;
}
CheckValue<IkReal> x9898=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9897.value)+(((1.5707963267949)*(x9898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9899=IKsin(j4);
IkReal x9900=IKcos(j4);
IkReal x9901=(cj2*sj1);
IkReal x9902=(cj1*sj2);
IkReal x9903=(gconst1*sj3);
IkReal x9904=(cj3*gconst1);
IkReal x9905=(sj1*sj2);
IkReal x9906=(cj3*gconst2);
IkReal x9907=(cj1*cj2);
IkReal x9908=(gconst2*sj3);
IkReal x9909=((1.0)*x9900);
IkReal x9910=((1.0)*x9899);
IkReal x9911=(gconst1*x9899);
IkReal x9912=(cj3*x9899);
IkReal x9913=(x9902+x9901);
IkReal x9914=(x9900*x9908);
evalcond[0]=((((-1.0)*gconst2*r20*x9910))+(((-1.0)*r22*x9909))+((r21*x9911)));
evalcond[1]=((((-1.0)*gconst2*r10*x9910))+(((-1.0)*r12*x9909))+((r11*x9911)));
evalcond[2]=((1.0)+((r01*x9911))+(((-1.0)*r02*x9909))+(((-1.0)*gconst2*r00*x9910)));
evalcond[3]=(((r01*x9900*x9904))+((r00*x9903))+(((-1.0)*r00*x9906*x9909))+((r01*x9908))+((r02*x9912)));
evalcond[4]=(((r00*x9904))+((r01*x9906))+((r00*x9914))+(((-1.0)*r01*x9903*x9909))+(((-1.0)*r02*sj3*x9910)));
evalcond[5]=(((r20*x9903))+((r22*x9912))+((r21*x9900*x9904))+((r21*x9908))+x9913+(((-1.0)*r20*x9906*x9909)));
evalcond[6]=(((r11*x9900*x9904))+((r12*x9912))+(((-1.0)*x9905))+((r11*x9908))+x9907+((r10*x9903))+(((-1.0)*r10*x9906*x9909)));
evalcond[7]=((((-1.0)*r11*x9903*x9909))+((r11*x9906))+x9913+((r10*x9904))+((r10*x9914))+(((-1.0)*r12*sj3*x9910)));
evalcond[8]=((((-1.0)*r22*sj3*x9910))+((r20*x9914))+((r20*x9904))+(((-1.0)*x9907))+(((-1.0)*r21*x9903*x9909))+((r21*x9906))+x9905);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9915=((-1.0)*r20);
IkReal x9916=((-1.0)*px);
CheckValue<IkReal> x9918 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9915),IKFAST_ATAN2_MAGTHRESH);
if(!x9918.valid){
continue;
}
IkReal x9917=((-1.0)*(x9918.value));
sj5=gconst1;
cj5=gconst2;
j5=x9917;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9916);
rxp1_1=(px*r21);
rxp1_2=(r11*x9916);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9917;
IkReal gconst1=r21;
IkReal gconst2=x9915;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9919=((-1.0)*r20);
IkReal x9920=((-1.0)*px);
CheckValue<IkReal> x9922 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9919),IKFAST_ATAN2_MAGTHRESH);
if(!x9922.valid){
continue;
}
IkReal x9921=((-1.0)*(x9922.value));
sj5=gconst1;
cj5=gconst2;
j5=x9921;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9920);
rxp1_1=(px*r21);
rxp1_2=(r11*x9920);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9921;
IkReal gconst1=r21;
IkReal gconst2=x9919;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9923=((-1.0)*r20);
IkReal x9924=((-1.0)*px);
CheckValue<IkReal> x9926 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9923),IKFAST_ATAN2_MAGTHRESH);
if(!x9926.valid){
continue;
}
IkReal x9925=((-1.0)*(x9926.value));
sj5=gconst1;
cj5=gconst2;
j5=x9925;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9924);
rxp1_1=(px*r21);
rxp1_2=(r11*x9924);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9925;
IkReal gconst1=r21;
IkReal gconst2=x9923;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9927=((-1.0)*r20);
IkReal x9928=((-1.0)*px);
CheckValue<IkReal> x9930 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9927),IKFAST_ATAN2_MAGTHRESH);
if(!x9930.valid){
continue;
}
IkReal x9929=((-1.0)*(x9930.value));
sj5=gconst1;
cj5=gconst2;
j5=x9929;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9928);
rxp1_1=(px*r21);
rxp1_2=(r11*x9928);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9929;
IkReal gconst1=r21;
IkReal gconst2=x9927;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9931=((-1.0)*r20);
IkReal x9932=((-1.0)*px);
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9931),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
IkReal x9933=((-1.0)*(x9934.value));
sj5=gconst1;
cj5=gconst2;
j5=x9933;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9932);
rxp1_1=(px*r21);
rxp1_2=(r11*x9932);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9933;
IkReal gconst1=r21;
IkReal gconst2=x9931;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9935=((-1.0)*r20);
IkReal x9936=((-1.0)*px);
CheckValue<IkReal> x9938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9935),IKFAST_ATAN2_MAGTHRESH);
if(!x9938.valid){
continue;
}
IkReal x9937=((-1.0)*(x9938.value));
sj5=gconst1;
cj5=gconst2;
j5=x9937;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9936);
rxp1_1=(px*r21);
rxp1_2=(r11*x9936);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9937;
IkReal gconst1=r21;
IkReal gconst2=x9935;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9941=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9941.valid){
continue;
}
IkReal x9939=x9941.value;
IkReal x9940=(sj0*x9939);
cj4array[0]=(((cj1*sj2*x9940))+((cj2*sj1*x9940)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9942=IKsin(j4);
IkReal x9943=IKcos(j4);
IkReal x9944=(gconst1*x9942);
IkReal x9945=((1.0)*x9943);
IkReal x9946=((1.0)*gconst2*x9942);
evalcond[0]=((-1.0)*r02*x9942);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9945)));
evalcond[2]=((((-1.0)*r20*x9946))+((r21*x9944)));
evalcond[3]=((((-1.0)*r10*x9946))+((r11*x9944)));
evalcond[4]=((((-1.0)*gconst1*r21*x9945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9948=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9948.valid){
continue;
}
IkReal x9947=x9948.value;
cj4array[0]=(((cj1*cj2*x9947))+(((-1.0)*sj1*sj2*x9947)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9949=IKsin(j4);
IkReal x9950=IKcos(j4);
IkReal x9951=(gconst2*r10);
IkReal x9952=((1.0)*sj0);
IkReal x9953=((1.0)*x9949);
IkReal x9954=(gconst1*x9949);
IkReal x9955=((1.0)*x9950);
evalcond[0]=((-1.0)*r02*x9949);
evalcond[1]=((((-1.0)*r02*x9955))+(((-1.0)*x9952)));
evalcond[2]=((((-1.0)*gconst2*r20*x9953))+((r21*x9954)));
evalcond[3]=(((r11*x9954))+(((-1.0)*x9951*x9953)));
evalcond[4]=(((x9950*x9951))+(((-1.0)*cj2*sj1*x9952))+(((-1.0)*cj1*sj2*x9952))+(((-1.0)*gconst1*r11*x9955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9956=IKPowWithIntegerCheck(r02,-1);
if(!x9956.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9956.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9957=IKsin(j4);
IkReal x9958=IKcos(j4);
IkReal x9959=(gconst2*r10);
IkReal x9960=((1.0)*sj0);
IkReal x9961=(gconst1*r11);
IkReal x9962=(gconst1*r21);
IkReal x9963=(gconst2*r20);
IkReal x9964=((1.0)*x9957);
IkReal x9965=((1.0)*x9958);
evalcond[0]=((-1.0)*r02*x9957);
evalcond[1]=((((-1.0)*x9963*x9964))+((x9957*x9962)));
evalcond[2]=((((-1.0)*x9959*x9964))+((x9957*x9961)));
evalcond[3]=(((x9958*x9963))+(((-1.0)*x9962*x9965))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj2*sj1*x9960))+(((-1.0)*cj1*sj2*x9960))+(((-1.0)*x9961*x9965))+((x9958*x9959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9966=((-1.0)*r20);
IkReal x9967=((-1.0)*px);
CheckValue<IkReal> x9969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9966),IKFAST_ATAN2_MAGTHRESH);
if(!x9969.valid){
continue;
}
IkReal x9968=((-1.0)*(x9969.value));
sj5=gconst1;
cj5=gconst2;
j5=x9968;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9967);
rxp1_1=(px*r21);
rxp1_2=(r11*x9967);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9968;
IkReal gconst1=r21;
IkReal gconst2=x9966;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9970=((-1.0)*r20);
IkReal x9971=((-1.0)*px);
CheckValue<IkReal> x9973 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9970),IKFAST_ATAN2_MAGTHRESH);
if(!x9973.valid){
continue;
}
IkReal x9972=((-1.0)*(x9973.value));
sj5=gconst1;
cj5=gconst2;
j5=x9972;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9971);
rxp1_1=(px*r21);
rxp1_2=(r11*x9971);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9972;
IkReal gconst1=r21;
IkReal gconst2=x9970;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9974=((-1.0)*r20);
IkReal x9975=((-1.0)*px);
CheckValue<IkReal> x9977 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9974),IKFAST_ATAN2_MAGTHRESH);
if(!x9977.valid){
continue;
}
IkReal x9976=((-1.0)*(x9977.value));
sj5=gconst1;
cj5=gconst2;
j5=x9976;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9975);
rxp1_1=(px*r21);
rxp1_2=(r11*x9975);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9976;
IkReal gconst1=r21;
IkReal gconst2=x9974;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9980=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9980.valid){
continue;
}
IkReal x9978=x9980.value;
IkReal x9979=(sj0*x9978);
cj4array[0]=(((cj2*sj1*x9979))+((cj1*sj2*x9979)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9981=IKsin(j4);
IkReal x9982=IKcos(j4);
IkReal x9983=((1.0)*gconst2);
IkReal x9984=(gconst1*r21);
evalcond[0]=(r02*x9981);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9982)));
evalcond[2]=((((-1.0)*r20*x9981*x9983))+((x9981*x9984)));
evalcond[3]=(((gconst1*r11*x9981))+(((-1.0)*r10*x9981*x9983)));
evalcond[4]=((((-1.0)*r20*x9982*x9983))+((x9982*x9984))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9986=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9986.valid){
continue;
}
IkReal x9985=x9986.value;
cj4array[0]=(((cj1*cj2*x9985))+(((-1.0)*sj1*sj2*x9985)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9987=IKsin(j4);
IkReal x9988=IKcos(j4);
IkReal x9989=((1.0)*sj0);
IkReal x9990=(gconst1*x9987);
IkReal x9991=((1.0)*x9988);
IkReal x9992=((1.0)*gconst2*x9987);
evalcond[0]=(r02*x9987);
evalcond[1]=((((-1.0)*r02*x9991))+(((-1.0)*x9989)));
evalcond[2]=(((r21*x9990))+(((-1.0)*r20*x9992)));
evalcond[3]=((((-1.0)*r10*x9992))+((r11*x9990)));
evalcond[4]=((((-1.0)*gconst2*r10*x9991))+((gconst1*r11*x9988))+(((-1.0)*cj2*sj1*x9989))+(((-1.0)*cj1*sj2*x9989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9993=IKPowWithIntegerCheck(r02,-1);
if(!x9993.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9993.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9994=IKsin(j4);
IkReal x9995=IKcos(j4);
IkReal x9996=(gconst1*r21);
IkReal x9997=((1.0)*sj0);
IkReal x9998=(gconst1*r11);
IkReal x9999=((1.0)*gconst2*r10);
IkReal x10000=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9994);
evalcond[1]=((((-1.0)*x10000*x9994))+((x9994*x9996)));
evalcond[2]=((((-1.0)*x9994*x9999))+((x9994*x9998)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10000*x9995))+((x9995*x9996)));
evalcond[4]=((((-1.0)*x9995*x9999))+(((-1.0)*cj2*sj1*x9997))+(((-1.0)*cj1*sj2*x9997))+((x9995*x9998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10002=IKPowWithIntegerCheck(r02,-1);
if(!x10002.valid){
continue;
}
IkReal x10001=x10002.value;
CheckValue<IkReal> x10003=IKPowWithIntegerCheck(cj3,-1);
if(!x10003.valid){
continue;
}
if( IKabs((x10001*(x10003.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10001)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10001*(x10003.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10001))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10001*(x10003.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10001));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10004=IKsin(j4);
IkReal x10005=IKcos(j4);
IkReal x10006=(gconst2*r10);
IkReal x10007=(gconst1*r11);
IkReal x10008=(sj1*sj2);
IkReal x10009=(gconst2*r20);
IkReal x10010=(cj2*sj1);
IkReal x10011=((1.0)*sj0);
IkReal x10012=(gconst1*r20);
IkReal x10013=(gconst2*r11);
IkReal x10014=(gconst1*r21);
IkReal x10015=((1.0)*cj0);
IkReal x10016=(gconst1*r10);
IkReal x10017=(cj1*sj2);
IkReal x10018=(gconst2*r21);
IkReal x10019=(sj3*x10005);
IkReal x10020=((1.0)*cj1*cj2);
IkReal x10021=(cj3*x10005);
IkReal x10022=(r02*x10004);
IkReal x10023=((1.0)*x10004);
evalcond[0]=((((-1.0)*r02*x10005))+(((-1.0)*x10011)));
evalcond[1]=((((-1.0)*x10009*x10023))+((x10004*x10014)));
evalcond[2]=(cj0+((x10004*x10007))+(((-1.0)*x10006*x10023)));
evalcond[3]=(((cj0*x10008))+(((-1.0)*cj1*cj2*x10015))+((cj3*x10022)));
evalcond[4]=((((-1.0)*x10015*x10017))+(((-1.0)*sj3*x10022))+(((-1.0)*x10010*x10015)));
evalcond[5]=((((-1.0)*x10009*x10021))+x10010+x10017+((sj3*x10018))+((sj3*x10012))+((x10014*x10021)));
evalcond[6]=(((x10009*x10019))+((cj3*x10018))+((cj3*x10012))+x10008+(((-1.0)*x10020))+(((-1.0)*x10014*x10019)));
evalcond[7]=(((x10007*x10021))+(((-1.0)*cj1*cj2*x10011))+((sj3*x10016))+((sj3*x10013))+(((-1.0)*x10006*x10021))+((sj0*x10008)));
evalcond[8]=((((-1.0)*x10007*x10019))+((x10006*x10019))+((cj3*x10013))+((cj3*x10016))+(((-1.0)*x10011*x10017))+(((-1.0)*x10010*x10011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10024=((1.0)*sj3);
IkReal x10025=((1.0)*gconst2);
CheckValue<IkReal> x10026=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10025))),-1);
if(!x10026.valid){
continue;
}
CheckValue<IkReal> x10027=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10025))),-1);
if(!x10027.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10026.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10027.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10024))+(((-1.0)*gconst2*r21*x10024)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10026.value)))+IKsqr(((x10027.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10024))+(((-1.0)*gconst2*r21*x10024))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10026.value)), ((x10027.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10024))+(((-1.0)*gconst2*r21*x10024))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10028=IKsin(j4);
IkReal x10029=IKcos(j4);
IkReal x10030=(gconst2*r10);
IkReal x10031=(gconst1*r11);
IkReal x10032=(sj1*sj2);
IkReal x10033=(gconst2*r20);
IkReal x10034=(cj2*sj1);
IkReal x10035=((1.0)*sj0);
IkReal x10036=(gconst1*r20);
IkReal x10037=(gconst2*r11);
IkReal x10038=(gconst1*r21);
IkReal x10039=((1.0)*cj0);
IkReal x10040=(gconst1*r10);
IkReal x10041=(cj1*sj2);
IkReal x10042=(gconst2*r21);
IkReal x10043=(sj3*x10029);
IkReal x10044=((1.0)*cj1*cj2);
IkReal x10045=(cj3*x10029);
IkReal x10046=(r02*x10028);
IkReal x10047=((1.0)*x10028);
evalcond[0]=((((-1.0)*r02*x10029))+(((-1.0)*x10035)));
evalcond[1]=(((x10028*x10038))+(((-1.0)*x10033*x10047)));
evalcond[2]=(cj0+(((-1.0)*x10030*x10047))+((x10028*x10031)));
evalcond[3]=(((cj0*x10032))+(((-1.0)*cj1*cj2*x10039))+((cj3*x10046)));
evalcond[4]=((((-1.0)*sj3*x10046))+(((-1.0)*x10034*x10039))+(((-1.0)*x10039*x10041)));
evalcond[5]=(((sj3*x10036))+((sj3*x10042))+x10041+x10034+(((-1.0)*x10033*x10045))+((x10038*x10045)));
evalcond[6]=((((-1.0)*x10038*x10043))+((x10033*x10043))+x10032+((cj3*x10036))+((cj3*x10042))+(((-1.0)*x10044)));
evalcond[7]=(((x10031*x10045))+(((-1.0)*x10030*x10045))+((sj0*x10032))+((sj3*x10037))+((sj3*x10040))+(((-1.0)*cj1*cj2*x10035)));
evalcond[8]=((((-1.0)*x10034*x10035))+(((-1.0)*x10035*x10041))+((cj3*x10037))+((cj3*x10040))+((x10030*x10043))+(((-1.0)*x10031*x10043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10048=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10048.valid){
continue;
}
CheckValue<IkReal> x10049=IKPowWithIntegerCheck(r02,-1);
if(!x10049.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10048.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10049.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10048.value)))+IKsqr(((-1.0)*sj0*(x10049.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10048.value)), ((-1.0)*sj0*(x10049.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10050=IKsin(j4);
IkReal x10051=IKcos(j4);
IkReal x10052=(gconst2*r10);
IkReal x10053=(gconst1*r11);
IkReal x10054=(sj1*sj2);
IkReal x10055=(gconst2*r20);
IkReal x10056=(cj2*sj1);
IkReal x10057=((1.0)*sj0);
IkReal x10058=(gconst1*r20);
IkReal x10059=(gconst2*r11);
IkReal x10060=(gconst1*r21);
IkReal x10061=((1.0)*cj0);
IkReal x10062=(gconst1*r10);
IkReal x10063=(cj1*sj2);
IkReal x10064=(gconst2*r21);
IkReal x10065=(sj3*x10051);
IkReal x10066=((1.0)*cj1*cj2);
IkReal x10067=(cj3*x10051);
IkReal x10068=(r02*x10050);
IkReal x10069=((1.0)*x10050);
evalcond[0]=((((-1.0)*x10057))+(((-1.0)*r02*x10051)));
evalcond[1]=((((-1.0)*x10055*x10069))+((x10050*x10060)));
evalcond[2]=(cj0+(((-1.0)*x10052*x10069))+((x10050*x10053)));
evalcond[3]=((((-1.0)*cj1*cj2*x10061))+((cj0*x10054))+((cj3*x10068)));
evalcond[4]=((((-1.0)*x10056*x10061))+(((-1.0)*sj3*x10068))+(((-1.0)*x10061*x10063)));
evalcond[5]=(((sj3*x10064))+((x10060*x10067))+((sj3*x10058))+(((-1.0)*x10055*x10067))+x10063+x10056);
evalcond[6]=((((-1.0)*x10060*x10065))+(((-1.0)*x10066))+x10054+((x10055*x10065))+((cj3*x10064))+((cj3*x10058)));
evalcond[7]=(((sj3*x10062))+((sj3*x10059))+(((-1.0)*cj1*cj2*x10057))+((sj0*x10054))+((x10053*x10067))+(((-1.0)*x10052*x10067)));
evalcond[8]=((((-1.0)*x10056*x10057))+(((-1.0)*x10057*x10063))+(((-1.0)*x10053*x10065))+((x10052*x10065))+((cj3*x10062))+((cj3*x10059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10070=gconst1*gconst1;
IkReal x10071=r21*r21;
IkReal x10072=gconst2*gconst2;
IkReal x10073=r20*r20;
IkReal x10074=(gconst2*r20);
IkReal x10075=(cj1*cj2);
IkReal x10076=(sj1*sj2);
IkReal x10077=(gconst1*r21);
IkReal x10078=(cj3*gconst2);
IkReal x10079=(cj3*r20);
CheckValue<IkReal> x10080=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10070*x10071))+(((-2.0)*sj3*x10074*x10077))+((sj3*x10072*x10073)))),-1);
if(!x10080.valid){
continue;
}
CheckValue<IkReal> x10081 = IKatan2WithCheck(IkReal((((r21*r22*x10078))+((gconst1*r22*x10079))+(((-1.0)*r22*x10075))+((r22*x10076)))),IkReal((((x10076*x10077))+(((-1.0)*gconst1*x10073*x10078))+(((-1.0)*x10075*x10077))+((r21*x10070*x10079))+((gconst1*x10071*x10078))+((x10074*x10075))+(((-1.0)*r21*x10072*x10079))+(((-1.0)*x10074*x10076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10080.value)))+(x10081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10082=IKsin(j4);
IkReal x10083=IKcos(j4);
IkReal x10084=(cj3*gconst1);
IkReal x10085=(gconst1*r01);
IkReal x10086=(gconst1*r11);
IkReal x10087=(sj1*sj2);
IkReal x10088=(cj3*gconst2);
IkReal x10089=(gconst1*sj3);
IkReal x10090=(gconst2*sj3);
IkReal x10091=((1.0)*sj0);
IkReal x10092=(cj1*sj2);
IkReal x10093=((1.0)*x10083);
IkReal x10094=((1.0)*x10082);
IkReal x10095=((1.0)*cj1*cj2);
IkReal x10096=(cj3*x10082);
IkReal x10097=((1.0)*cj2*sj1);
IkReal x10098=(x10083*x10090);
evalcond[0]=(((gconst1*r21*x10082))+(((-1.0)*gconst2*r20*x10094))+(((-1.0)*r22*x10093)));
evalcond[1]=(cj0+(((-1.0)*r12*x10093))+(((-1.0)*gconst2*r10*x10094))+((x10082*x10086)));
evalcond[2]=((((-1.0)*gconst2*r00*x10094))+(((-1.0)*r02*x10093))+((x10082*x10085))+(((-1.0)*x10091)));
evalcond[3]=(((cj2*sj1))+((r20*x10089))+(((-1.0)*r20*x10088*x10093))+x10092+((r22*x10096))+((r21*x10090))+((r21*x10083*x10084)));
evalcond[4]=((((-1.0)*r21*x10089*x10093))+(((-1.0)*r22*sj3*x10094))+((r20*x10084))+x10087+((r21*x10088))+((r20*x10098))+(((-1.0)*x10095)));
evalcond[5]=(((r01*x10083*x10084))+((r00*x10089))+((r02*x10096))+((cj0*x10087))+(((-1.0)*cj0*x10095))+(((-1.0)*r00*x10088*x10093))+((r01*x10090)));
evalcond[6]=(((r11*x10083*x10084))+(((-1.0)*r10*x10088*x10093))+((r11*x10090))+((r12*x10096))+((sj0*x10087))+(((-1.0)*cj1*cj2*x10091))+((r10*x10089)));
evalcond[7]=(((r00*x10084))+((r01*x10088))+(((-1.0)*r02*sj3*x10094))+(((-1.0)*sj3*x10085*x10093))+(((-1.0)*cj0*x10097))+(((-1.0)*cj0*x10092))+((r00*x10098)));
evalcond[8]=((((-1.0)*sj3*x10086*x10093))+(((-1.0)*cj2*sj1*x10091))+(((-1.0)*r12*sj3*x10094))+((r10*x10098))+(((-1.0)*x10091*x10092))+((r10*x10084))+((r11*x10088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10099=((1.0)*gconst2);
CheckValue<IkReal> x10100=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10099)))),-1);
if(!x10100.valid){
continue;
}
CheckValue<IkReal> x10101 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10099))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10100.value)))+(x10101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10102=IKsin(j4);
IkReal x10103=IKcos(j4);
IkReal x10104=(cj3*gconst1);
IkReal x10105=(gconst1*r01);
IkReal x10106=(gconst1*r11);
IkReal x10107=(sj1*sj2);
IkReal x10108=(cj3*gconst2);
IkReal x10109=(gconst1*sj3);
IkReal x10110=(gconst2*sj3);
IkReal x10111=((1.0)*sj0);
IkReal x10112=(cj1*sj2);
IkReal x10113=((1.0)*x10103);
IkReal x10114=((1.0)*x10102);
IkReal x10115=((1.0)*cj1*cj2);
IkReal x10116=(cj3*x10102);
IkReal x10117=((1.0)*cj2*sj1);
IkReal x10118=(x10103*x10110);
evalcond[0]=((((-1.0)*gconst2*r20*x10114))+(((-1.0)*r22*x10113))+((gconst1*r21*x10102)));
evalcond[1]=((((-1.0)*r12*x10113))+((x10102*x10106))+cj0+(((-1.0)*gconst2*r10*x10114)));
evalcond[2]=(((x10102*x10105))+(((-1.0)*r02*x10113))+(((-1.0)*gconst2*r00*x10114))+(((-1.0)*x10111)));
evalcond[3]=(((r21*x10110))+((cj2*sj1))+((r20*x10109))+x10112+((r21*x10103*x10104))+(((-1.0)*r20*x10108*x10113))+((r22*x10116)));
evalcond[4]=(((r21*x10108))+((r20*x10118))+((r20*x10104))+x10107+(((-1.0)*r21*x10109*x10113))+(((-1.0)*r22*sj3*x10114))+(((-1.0)*x10115)));
evalcond[5]=(((r01*x10110))+(((-1.0)*r00*x10108*x10113))+((cj0*x10107))+((r00*x10109))+(((-1.0)*cj0*x10115))+((r02*x10116))+((r01*x10103*x10104)));
evalcond[6]=(((r11*x10103*x10104))+(((-1.0)*cj1*cj2*x10111))+((r11*x10110))+((sj0*x10107))+((r12*x10116))+((r10*x10109))+(((-1.0)*r10*x10108*x10113)));
evalcond[7]=(((r01*x10108))+((r00*x10104))+((r00*x10118))+(((-1.0)*cj0*x10117))+(((-1.0)*r02*sj3*x10114))+(((-1.0)*cj0*x10112))+(((-1.0)*sj3*x10105*x10113)));
evalcond[8]=((((-1.0)*r12*sj3*x10114))+(((-1.0)*cj2*sj1*x10111))+((r11*x10108))+((r10*x10104))+((r10*x10118))+(((-1.0)*sj3*x10106*x10113))+(((-1.0)*x10111*x10112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10119=((1.0)*gconst2);
CheckValue<IkReal> x10120 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10120.valid){
continue;
}
CheckValue<IkReal> x10121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10119)))),-1);
if(!x10121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10120.value)+(((1.5707963267949)*(x10121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10122=IKsin(j4);
IkReal x10123=IKcos(j4);
IkReal x10124=(cj3*gconst1);
IkReal x10125=(gconst1*r01);
IkReal x10126=(gconst1*r11);
IkReal x10127=(sj1*sj2);
IkReal x10128=(cj3*gconst2);
IkReal x10129=(gconst1*sj3);
IkReal x10130=(gconst2*sj3);
IkReal x10131=((1.0)*sj0);
IkReal x10132=(cj1*sj2);
IkReal x10133=((1.0)*x10123);
IkReal x10134=((1.0)*x10122);
IkReal x10135=((1.0)*cj1*cj2);
IkReal x10136=(cj3*x10122);
IkReal x10137=((1.0)*cj2*sj1);
IkReal x10138=(x10123*x10130);
evalcond[0]=(((gconst1*r21*x10122))+(((-1.0)*gconst2*r20*x10134))+(((-1.0)*r22*x10133)));
evalcond[1]=(cj0+((x10122*x10126))+(((-1.0)*gconst2*r10*x10134))+(((-1.0)*r12*x10133)));
evalcond[2]=((((-1.0)*r02*x10133))+(((-1.0)*gconst2*r00*x10134))+((x10122*x10125))+(((-1.0)*x10131)));
evalcond[3]=((((-1.0)*r20*x10128*x10133))+((cj2*sj1))+((r20*x10129))+((r21*x10130))+x10132+((r21*x10123*x10124))+((r22*x10136)));
evalcond[4]=(((r20*x10138))+((r20*x10124))+((r21*x10128))+(((-1.0)*r22*sj3*x10134))+(((-1.0)*r21*x10129*x10133))+x10127+(((-1.0)*x10135)));
evalcond[5]=(((r02*x10136))+(((-1.0)*r00*x10128*x10133))+((r00*x10129))+((r01*x10130))+((cj0*x10127))+(((-1.0)*cj0*x10135))+((r01*x10123*x10124)));
evalcond[6]=(((r11*x10130))+((r10*x10129))+((r11*x10123*x10124))+(((-1.0)*r10*x10128*x10133))+((r12*x10136))+((sj0*x10127))+(((-1.0)*cj1*cj2*x10131)));
evalcond[7]=((((-1.0)*sj3*x10125*x10133))+(((-1.0)*cj0*x10132))+((r00*x10124))+((r00*x10138))+((r01*x10128))+(((-1.0)*cj0*x10137))+(((-1.0)*r02*sj3*x10134)));
evalcond[8]=((((-1.0)*x10131*x10132))+(((-1.0)*sj3*x10126*x10133))+((r10*x10124))+((r10*x10138))+(((-1.0)*cj2*sj1*x10131))+(((-1.0)*r12*sj3*x10134))+((r11*x10128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10139=((-1.0)*r21);
IkReal x10141 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10141)==0){
continue;
}
IkReal x10140=pow(x10141,-0.5);
CheckValue<IkReal> x10142 = IKatan2WithCheck(IkReal(x10139),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10142.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10142.value))));
IkReal gconst4=(x10139*x10140);
IkReal gconst5=((1.0)*r20*x10140);
CheckValue<IkReal> x10143 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10143.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10143.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10144=((-1.0)*r21);
CheckValue<IkReal> x10147 = IKatan2WithCheck(IkReal(x10144),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10147.valid){
continue;
}
IkReal x10145=((1.0)*(x10147.value));
IkReal x10146=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10145)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10145)));
IkReal gconst4=(x10144*x10146);
IkReal gconst5=((1.0)*r20*x10146);
IkReal x10148=r22*r22;
IkReal x10149=((1.0)*x10148);
CheckValue<IkReal> x10153=IKPowWithIntegerCheck(((-1.0)+x10148),-1);
if(!x10153.valid){
continue;
}
IkReal x10150=x10153.value;
if((((1.0)+(((-1.0)*x10149)))) < -0.00001)
continue;
IkReal x10151=IKsqrt(((1.0)+(((-1.0)*x10149))));
IkReal x10152=(cj0*x10150*x10151);
j4eval[0]=((IKabs(((((-1.0)*x10149*x10152))+x10152)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10154=((-1.0)*r21);
CheckValue<IkReal> x10157 = IKatan2WithCheck(IkReal(x10154),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10157.valid){
continue;
}
IkReal x10155=((1.0)*(x10157.value));
IkReal x10156=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10155)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10155)));
IkReal gconst4=(x10154*x10156);
IkReal gconst5=((1.0)*r20*x10156);
IkReal x10158=r22*r22;
IkReal x10159=((1.0)*x10158);
CheckValue<IkReal> x10163=IKPowWithIntegerCheck(((-1.0)+x10158),-1);
if(!x10163.valid){
continue;
}
IkReal x10160=x10163.value;
if((((1.0)+(((-1.0)*x10159)))) < -0.00001)
continue;
IkReal x10161=IKsqrt(((1.0)+(((-1.0)*x10159))));
IkReal x10162=(sj0*x10160*x10161);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10162+(((-1.0)*x10159*x10162))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10164=((-1.0)*r21);
CheckValue<IkReal> x10167 = IKatan2WithCheck(IkReal(x10164),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10167.valid){
continue;
}
IkReal x10165=((1.0)*(x10167.value));
IkReal x10166=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10165)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10165)));
IkReal gconst4=(x10164*x10166);
IkReal gconst5=((1.0)*r20*x10166);
IkReal x10168=r22*r22;
IkReal x10169=(r12*sj0);
IkReal x10170=(cj0*r02);
CheckValue<IkReal> x10174=IKPowWithIntegerCheck(((-1.0)+x10168),-1);
if(!x10174.valid){
continue;
}
IkReal x10171=x10174.value;
if((((1.0)+(((-1.0)*x10168)))) < -0.00001)
continue;
IkReal x10172=IKsqrt(((1.0)+(((-1.0)*x10168))));
IkReal x10173=(r22*x10171*x10172);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10170*x10173))+((x10169*x10173)))))+(IKabs(((((-1.0)*x10169))+(((-1.0)*x10170))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10175=((-1.0)*r21);
CheckValue<IkReal> x10178 = IKatan2WithCheck(IkReal(x10175),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10178.valid){
continue;
}
IkReal x10176=((1.0)*(x10178.value));
IkReal x10177=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10176)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10176)));
IkReal gconst4=(x10175*x10177);
IkReal gconst5=((1.0)*r20*x10177);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10179=((-1.0)*r21);
CheckValue<IkReal> x10182 = IKatan2WithCheck(IkReal(x10179),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10182.valid){
continue;
}
IkReal x10180=((1.0)*(x10182.value));
IkReal x10181=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10180)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10180)));
IkReal gconst4=(x10179*x10181);
IkReal gconst5=((1.0)*r20*x10181);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10183=((-1.0)*r21);
CheckValue<IkReal> x10186 = IKatan2WithCheck(IkReal(x10183),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10186.valid){
continue;
}
IkReal x10184=((1.0)*(x10186.value));
IkReal x10185=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10184)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10184)));
IkReal gconst4=(x10183*x10185);
IkReal gconst5=((1.0)*r20*x10185);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10187=((-1.0)*r21);
CheckValue<IkReal> x10190 = IKatan2WithCheck(IkReal(x10187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10190.valid){
continue;
}
IkReal x10188=((1.0)*(x10190.value));
IkReal x10189=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10188)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10188)));
IkReal gconst4=(x10187*x10189);
IkReal gconst5=((1.0)*r20*x10189);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10191=((-1.0)*r21);
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(x10191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
IkReal x10192=((1.0)*(x10194.value));
IkReal x10193=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10192)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10192)));
IkReal gconst4=(x10191*x10193);
IkReal gconst5=((1.0)*r20*x10193);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10195=((-1.0)*r21);
CheckValue<IkReal> x10198 = IKatan2WithCheck(IkReal(x10195),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10198.valid){
continue;
}
IkReal x10196=((1.0)*(x10198.value));
IkReal x10197=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10196)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10196)));
IkReal gconst4=(x10195*x10197);
IkReal gconst5=((1.0)*r20*x10197);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10199=(gconst5*r10);
IkReal x10200=(gconst4*r11);
CheckValue<IkReal> x10201=IKPowWithIntegerCheck(IKsign(((x10200*x10200)+(r12*r12)+(((-2.0)*x10199*x10200))+(x10199*x10199))),-1);
if(!x10201.valid){
continue;
}
CheckValue<IkReal> x10202 = IKatan2WithCheck(IkReal(((((-1.0)*x10200))+x10199)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10201.value)))+(x10202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10203=IKsin(j4);
IkReal x10204=IKcos(j4);
IkReal x10205=(gconst4*r11);
IkReal x10206=((1.0)*cj1);
IkReal x10207=(gconst5*r10);
IkReal x10208=(gconst4*r01);
IkReal x10209=(gconst5*r00);
IkReal x10210=(gconst4*r21);
IkReal x10211=(gconst5*r20);
IkReal x10212=((1.0)*x10204);
IkReal x10213=((1.0)*x10203);
evalcond[0]=((((-1.0)*x10211*x10213))+((x10203*x10210))+(((-1.0)*r22*x10212)));
evalcond[1]=(((x10203*x10208))+(((-1.0)*r02*x10212))+(((-1.0)*x10209*x10213)));
evalcond[2]=((((-1.0)*x10205*x10212))+((x10204*x10207))+(((-1.0)*r12*x10213)));
evalcond[3]=((1.0)+(((-1.0)*x10207*x10213))+((x10203*x10205))+(((-1.0)*r12*x10212)));
evalcond[4]=((((-1.0)*x10210*x10212))+(((-1.0)*r22*x10213))+(((-1.0)*cj2*x10206))+((sj1*sj2))+((x10204*x10211)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10204*x10209))+(((-1.0)*sj2*x10206))+(((-1.0)*r02*x10213))+(((-1.0)*x10208*x10212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10214=((1.0)*gconst5);
CheckValue<IkReal> x10215=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10214)))),-1);
if(!x10215.valid){
continue;
}
CheckValue<IkReal> x10216 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10214))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10215.value)))+(x10216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10217=IKsin(j4);
IkReal x10218=IKcos(j4);
IkReal x10219=(gconst4*r11);
IkReal x10220=((1.0)*cj1);
IkReal x10221=(gconst5*r10);
IkReal x10222=(gconst4*r01);
IkReal x10223=(gconst5*r00);
IkReal x10224=(gconst4*r21);
IkReal x10225=(gconst5*r20);
IkReal x10226=((1.0)*x10218);
IkReal x10227=((1.0)*x10217);
evalcond[0]=((((-1.0)*x10225*x10227))+(((-1.0)*r22*x10226))+((x10217*x10224)));
evalcond[1]=((((-1.0)*r02*x10226))+((x10217*x10222))+(((-1.0)*x10223*x10227)));
evalcond[2]=(((x10218*x10221))+(((-1.0)*x10219*x10226))+(((-1.0)*r12*x10227)));
evalcond[3]=((1.0)+((x10217*x10219))+(((-1.0)*x10221*x10227))+(((-1.0)*r12*x10226)));
evalcond[4]=((((-1.0)*x10224*x10226))+(((-1.0)*cj2*x10220))+((sj1*sj2))+((x10218*x10225))+(((-1.0)*r22*x10227)));
evalcond[5]=((((-1.0)*r02*x10227))+(((-1.0)*x10222*x10226))+(((-1.0)*cj2*sj1))+((x10218*x10223))+(((-1.0)*sj2*x10220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
CheckValue<IkReal> x10229=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10228.value)+(((1.5707963267949)*(x10229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10230=IKsin(j4);
IkReal x10231=IKcos(j4);
IkReal x10232=(gconst4*r11);
IkReal x10233=((1.0)*cj1);
IkReal x10234=(gconst5*r10);
IkReal x10235=(gconst4*r01);
IkReal x10236=(gconst5*r00);
IkReal x10237=(gconst4*r21);
IkReal x10238=(gconst5*r20);
IkReal x10239=((1.0)*x10231);
IkReal x10240=((1.0)*x10230);
evalcond[0]=(((x10230*x10237))+(((-1.0)*x10238*x10240))+(((-1.0)*r22*x10239)));
evalcond[1]=(((x10230*x10235))+(((-1.0)*x10236*x10240))+(((-1.0)*r02*x10239)));
evalcond[2]=((((-1.0)*x10232*x10239))+(((-1.0)*r12*x10240))+((x10231*x10234)));
evalcond[3]=((1.0)+(((-1.0)*x10234*x10240))+((x10230*x10232))+(((-1.0)*r12*x10239)));
evalcond[4]=((((-1.0)*x10237*x10239))+((sj1*sj2))+(((-1.0)*cj2*x10233))+(((-1.0)*r22*x10240))+((x10231*x10238)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10235*x10239))+((x10231*x10236))+(((-1.0)*sj2*x10233))+(((-1.0)*r02*x10240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10241=((-1.0)*r21);
CheckValue<IkReal> x10244 = IKatan2WithCheck(IkReal(x10241),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10244.valid){
continue;
}
IkReal x10242=((1.0)*(x10244.value));
IkReal x10243=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10242)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10242)));
IkReal gconst4=(x10241*x10243);
IkReal gconst5=((1.0)*r20*x10243);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10245=((-1.0)*r21);
CheckValue<IkReal> x10248 = IKatan2WithCheck(IkReal(x10245),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10248.valid){
continue;
}
IkReal x10246=((1.0)*(x10248.value));
IkReal x10247=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10246)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10246)));
IkReal gconst4=(x10245*x10247);
IkReal gconst5=((1.0)*r20*x10247);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10249=((-1.0)*r21);
CheckValue<IkReal> x10252 = IKatan2WithCheck(IkReal(x10249),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10252.valid){
continue;
}
IkReal x10250=((1.0)*(x10252.value));
IkReal x10251=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10250)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10250)));
IkReal gconst4=(x10249*x10251);
IkReal gconst5=((1.0)*r20*x10251);
IkReal x10253=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10257=IKPowWithIntegerCheck(x10253,-1);
if(!x10257.valid){
continue;
}
IkReal x10254=x10257.value;
IkReal x10255=((1.0)*x10254);
IkReal x10256=((((-2.0)*r10*r11*r20*r21*x10254))+(((-1.0)*(r12*r12)))+(((-1.0)*x10255*(r11*r11)*(r21*r21)))+(((-1.0)*x10255*(r10*r10)*(r20*r20))));
j4eval[0]=x10256;
j4eval[1]=r12;
j4eval[2]=x10253;
j4eval[3]=IKsign(x10256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10258=(gconst5*r10);
IkReal x10259=(gconst4*r11);
CheckValue<IkReal> x10260 = IKatan2WithCheck(IkReal((x10259+(((-1.0)*x10258)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10260.valid){
continue;
}
CheckValue<IkReal> x10261=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10258*x10258)))+(((2.0)*x10258*x10259))+(((-1.0)*(x10259*x10259)))+(((-1.0)*(r12*r12))))),-1);
if(!x10261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10260.value)+(((1.5707963267949)*(x10261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10262=IKcos(j4);
IkReal x10263=IKsin(j4);
IkReal x10264=(gconst4*r11);
IkReal x10265=(gconst5*r10);
IkReal x10266=((1.0)*cj1);
IkReal x10267=(gconst5*r00);
IkReal x10268=(gconst5*r20);
IkReal x10269=((1.0)*x10262);
IkReal x10270=(gconst4*x10262);
IkReal x10271=((1.0)*x10263);
IkReal x10272=(gconst4*x10263);
evalcond[0]=(((r12*x10263))+((x10262*x10264))+(((-1.0)*x10265*x10269)));
evalcond[1]=((((-1.0)*r22*x10269))+(((-1.0)*x10268*x10271))+((r21*x10272)));
evalcond[2]=(((r01*x10272))+(((-1.0)*r02*x10269))+(((-1.0)*x10267*x10271)));
evalcond[3]=((1.0)+((x10263*x10264))+(((-1.0)*x10265*x10271))+(((-1.0)*r12*x10269)));
evalcond[4]=(((r22*x10263))+((sj1*sj2))+((r21*x10270))+(((-1.0)*x10268*x10269))+(((-1.0)*cj2*x10266)));
evalcond[5]=(((r02*x10263))+(((-1.0)*x10267*x10269))+((r01*x10270))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10273=((1.0)*gconst5);
CheckValue<IkReal> x10274=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10273)))),-1);
if(!x10274.valid){
continue;
}
CheckValue<IkReal> x10275 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10274.value)))+(x10275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10276=IKcos(j4);
IkReal x10277=IKsin(j4);
IkReal x10278=(gconst4*r11);
IkReal x10279=(gconst5*r10);
IkReal x10280=((1.0)*cj1);
IkReal x10281=(gconst5*r00);
IkReal x10282=(gconst5*r20);
IkReal x10283=((1.0)*x10276);
IkReal x10284=(gconst4*x10276);
IkReal x10285=((1.0)*x10277);
IkReal x10286=(gconst4*x10277);
evalcond[0]=(((r12*x10277))+((x10276*x10278))+(((-1.0)*x10279*x10283)));
evalcond[1]=((((-1.0)*x10282*x10285))+(((-1.0)*r22*x10283))+((r21*x10286)));
evalcond[2]=(((r01*x10286))+(((-1.0)*x10281*x10285))+(((-1.0)*r02*x10283)));
evalcond[3]=((1.0)+((x10277*x10278))+(((-1.0)*r12*x10283))+(((-1.0)*x10279*x10285)));
evalcond[4]=((((-1.0)*x10282*x10283))+((sj1*sj2))+(((-1.0)*cj2*x10280))+((r21*x10284))+((r22*x10277)));
evalcond[5]=(((r01*x10284))+(((-1.0)*x10281*x10283))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10280))+((r02*x10277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10287 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10287.valid){
continue;
}
CheckValue<IkReal> x10288=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10287.value)+(((1.5707963267949)*(x10288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10289=IKcos(j4);
IkReal x10290=IKsin(j4);
IkReal x10291=(gconst4*r11);
IkReal x10292=(gconst5*r10);
IkReal x10293=((1.0)*cj1);
IkReal x10294=(gconst5*r00);
IkReal x10295=(gconst5*r20);
IkReal x10296=((1.0)*x10289);
IkReal x10297=(gconst4*x10289);
IkReal x10298=((1.0)*x10290);
IkReal x10299=(gconst4*x10290);
evalcond[0]=(((x10289*x10291))+(((-1.0)*x10292*x10296))+((r12*x10290)));
evalcond[1]=((((-1.0)*x10295*x10298))+((r21*x10299))+(((-1.0)*r22*x10296)));
evalcond[2]=((((-1.0)*x10294*x10298))+(((-1.0)*r02*x10296))+((r01*x10299)));
evalcond[3]=((1.0)+(((-1.0)*x10292*x10298))+(((-1.0)*r12*x10296))+((x10290*x10291)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10295*x10296))+((r21*x10297))+((r22*x10290))+(((-1.0)*cj2*x10293)));
evalcond[5]=((((-1.0)*sj2*x10293))+(((-1.0)*x10294*x10296))+(((-1.0)*cj2*sj1))+((r02*x10290))+((r01*x10297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10300=((-1.0)*r21);
CheckValue<IkReal> x10303 = IKatan2WithCheck(IkReal(x10300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10303.valid){
continue;
}
IkReal x10301=((1.0)*(x10303.value));
IkReal x10302=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10301)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10301)));
IkReal gconst4=(x10300*x10302);
IkReal gconst5=((1.0)*r20*x10302);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10304=((-1.0)*r21);
CheckValue<IkReal> x10307 = IKatan2WithCheck(IkReal(x10304),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10307.valid){
continue;
}
IkReal x10305=((1.0)*(x10307.value));
IkReal x10306=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10305)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10305)));
IkReal gconst4=(x10304*x10306);
IkReal gconst5=((1.0)*r20*x10306);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10308=((-1.0)*r21);
CheckValue<IkReal> x10311 = IKatan2WithCheck(IkReal(x10308),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10311.valid){
continue;
}
IkReal x10309=((1.0)*(x10311.value));
IkReal x10310=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10309)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10309)));
IkReal gconst4=(x10308*x10310);
IkReal gconst5=((1.0)*r20*x10310);
IkReal x10312=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10316=IKPowWithIntegerCheck(x10312,-1);
if(!x10316.valid){
continue;
}
IkReal x10313=x10316.value;
IkReal x10314=((1.0)*x10313);
IkReal x10315=((((-2.0)*r10*r11*r20*r21*x10313))+(((-1.0)*x10314*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10314*(r10*r10)*(r20*r20))));
j4eval[0]=x10315;
j4eval[1]=r12;
j4eval[2]=x10312;
j4eval[3]=IKsign(x10315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10317=(gconst5*r10);
IkReal x10318=(gconst4*r11);
CheckValue<IkReal> x10319=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10317*x10317)))+(((-1.0)*(x10318*x10318)))+(((2.0)*x10317*x10318))+(((-1.0)*(r12*r12))))),-1);
if(!x10319.valid){
continue;
}
CheckValue<IkReal> x10320 = IKatan2WithCheck(IkReal((x10318+(((-1.0)*x10317)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10319.value)))+(x10320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10321=IKcos(j4);
IkReal x10322=IKsin(j4);
IkReal x10323=(gconst4*r11);
IkReal x10324=(gconst5*r10);
IkReal x10325=(gconst5*r00);
IkReal x10326=(gconst5*r20);
IkReal x10327=((1.0)*x10321);
IkReal x10328=(gconst4*x10321);
IkReal x10329=((1.0)*x10322);
IkReal x10330=(gconst4*x10322);
evalcond[0]=((((-1.0)*x10324*x10327))+((x10321*x10323))+((r12*x10322)));
evalcond[1]=((((-1.0)*r22*x10327))+((r21*x10330))+(((-1.0)*x10326*x10329)));
evalcond[2]=((((-1.0)*r02*x10327))+((r01*x10330))+(((-1.0)*x10325*x10329)));
evalcond[3]=((1.0)+(((-1.0)*x10324*x10329))+((x10322*x10323))+(((-1.0)*r12*x10327)));
evalcond[4]=(((cj2*sj1))+((r22*x10322))+((cj1*sj2))+((r21*x10328))+(((-1.0)*x10326*x10327)));
evalcond[5]=(((r02*x10322))+(((-1.0)*cj1*cj2))+((r01*x10328))+((sj1*sj2))+(((-1.0)*x10325*x10327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10331=((1.0)*gconst5);
CheckValue<IkReal> x10332 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10332.valid){
continue;
}
CheckValue<IkReal> x10333=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10331)))),-1);
if(!x10333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10332.value)+(((1.5707963267949)*(x10333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10334=IKcos(j4);
IkReal x10335=IKsin(j4);
IkReal x10336=(gconst4*r11);
IkReal x10337=(gconst5*r10);
IkReal x10338=(gconst5*r00);
IkReal x10339=(gconst5*r20);
IkReal x10340=((1.0)*x10334);
IkReal x10341=(gconst4*x10334);
IkReal x10342=((1.0)*x10335);
IkReal x10343=(gconst4*x10335);
evalcond[0]=((((-1.0)*x10337*x10340))+((r12*x10335))+((x10334*x10336)));
evalcond[1]=((((-1.0)*x10339*x10342))+((r21*x10343))+(((-1.0)*r22*x10340)));
evalcond[2]=((((-1.0)*x10338*x10342))+((r01*x10343))+(((-1.0)*r02*x10340)));
evalcond[3]=((1.0)+(((-1.0)*x10337*x10342))+(((-1.0)*r12*x10340))+((x10335*x10336)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10339*x10340))+((r22*x10335))+((cj1*sj2))+((r21*x10341)));
evalcond[5]=((((-1.0)*x10338*x10340))+((r02*x10335))+((r01*x10341))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10344 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10344.valid){
continue;
}
CheckValue<IkReal> x10345=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10344.value)+(((1.5707963267949)*(x10345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10346=IKcos(j4);
IkReal x10347=IKsin(j4);
IkReal x10348=(gconst4*r11);
IkReal x10349=(gconst5*r10);
IkReal x10350=(gconst5*r00);
IkReal x10351=(gconst5*r20);
IkReal x10352=((1.0)*x10346);
IkReal x10353=(gconst4*x10346);
IkReal x10354=((1.0)*x10347);
IkReal x10355=(gconst4*x10347);
evalcond[0]=(((r12*x10347))+((x10346*x10348))+(((-1.0)*x10349*x10352)));
evalcond[1]=(((r21*x10355))+(((-1.0)*r22*x10352))+(((-1.0)*x10351*x10354)));
evalcond[2]=(((r01*x10355))+(((-1.0)*x10350*x10354))+(((-1.0)*r02*x10352)));
evalcond[3]=((1.0)+((x10347*x10348))+(((-1.0)*r12*x10352))+(((-1.0)*x10349*x10354)));
evalcond[4]=(((r21*x10353))+((cj2*sj1))+((cj1*sj2))+((r22*x10347))+(((-1.0)*x10351*x10352)));
evalcond[5]=(((r01*x10353))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10350*x10352))+((r02*x10347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10356=((-1.0)*r21);
CheckValue<IkReal> x10359 = IKatan2WithCheck(IkReal(x10356),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10359.valid){
continue;
}
IkReal x10357=((1.0)*(x10359.value));
IkReal x10358=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10357)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10357)));
IkReal gconst4=(x10356*x10358);
IkReal gconst5=((1.0)*r20*x10358);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10360=((-1.0)*r21);
CheckValue<IkReal> x10363 = IKatan2WithCheck(IkReal(x10360),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10363.valid){
continue;
}
IkReal x10361=((1.0)*(x10363.value));
IkReal x10362=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10361)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10361)));
IkReal gconst4=(x10360*x10362);
IkReal gconst5=((1.0)*r20*x10362);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10364=((-1.0)*r21);
CheckValue<IkReal> x10367 = IKatan2WithCheck(IkReal(x10364),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10367.valid){
continue;
}
IkReal x10365=((1.0)*(x10367.value));
IkReal x10366=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10365)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10365)));
IkReal gconst4=(x10364*x10366);
IkReal gconst5=((1.0)*r20*x10366);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10368=(gconst5*r10);
IkReal x10369=(gconst4*r11);
CheckValue<IkReal> x10370 = IKatan2WithCheck(IkReal(((((-1.0)*x10369))+x10368)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10370.valid){
continue;
}
CheckValue<IkReal> x10371=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10368*x10368)+(((-2.0)*x10368*x10369))+(x10369*x10369))),-1);
if(!x10371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10370.value)+(((1.5707963267949)*(x10371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10372=IKsin(j4);
IkReal x10373=IKcos(j4);
IkReal x10374=(gconst4*r11);
IkReal x10375=(gconst5*r10);
IkReal x10376=(gconst4*r01);
IkReal x10377=(gconst5*r00);
IkReal x10378=(gconst4*r21);
IkReal x10379=(gconst5*r20);
IkReal x10380=((1.0)*x10373);
IkReal x10381=((1.0)*x10372);
evalcond[0]=((((-1.0)*x10379*x10381))+((x10372*x10378))+(((-1.0)*r22*x10380)));
evalcond[1]=((((-1.0)*x10377*x10381))+(((-1.0)*r02*x10380))+((x10372*x10376)));
evalcond[2]=((((-1.0)*x10374*x10380))+((x10373*x10375))+(((-1.0)*r12*x10381)));
evalcond[3]=((1.0)+(((-1.0)*x10375*x10381))+((x10372*x10374))+(((-1.0)*r12*x10380)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10373*x10379))+(((-1.0)*x10378*x10380))+(((-1.0)*r22*x10381)));
evalcond[5]=((((-1.0)*x10376*x10380))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10381))+((x10373*x10377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10382=((1.0)*gconst5);
CheckValue<IkReal> x10383 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10382))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10383.valid){
continue;
}
CheckValue<IkReal> x10384=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10382)))),-1);
if(!x10384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10383.value)+(((1.5707963267949)*(x10384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10385=IKsin(j4);
IkReal x10386=IKcos(j4);
IkReal x10387=(gconst4*r11);
IkReal x10388=(gconst5*r10);
IkReal x10389=(gconst4*r01);
IkReal x10390=(gconst5*r00);
IkReal x10391=(gconst4*r21);
IkReal x10392=(gconst5*r20);
IkReal x10393=((1.0)*x10386);
IkReal x10394=((1.0)*x10385);
evalcond[0]=((((-1.0)*x10392*x10394))+(((-1.0)*r22*x10393))+((x10385*x10391)));
evalcond[1]=(((x10385*x10389))+(((-1.0)*r02*x10393))+(((-1.0)*x10390*x10394)));
evalcond[2]=((((-1.0)*x10387*x10393))+(((-1.0)*r12*x10394))+((x10386*x10388)));
evalcond[3]=((1.0)+((x10385*x10387))+(((-1.0)*r12*x10393))+(((-1.0)*x10388*x10394)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10391*x10393))+(((-1.0)*r22*x10394))+((x10386*x10392)));
evalcond[5]=((((-1.0)*x10389*x10393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10394))+((x10386*x10390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10395 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10395.valid){
continue;
}
CheckValue<IkReal> x10396=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10395.value)+(((1.5707963267949)*(x10396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10397=IKsin(j4);
IkReal x10398=IKcos(j4);
IkReal x10399=(gconst4*r11);
IkReal x10400=(gconst5*r10);
IkReal x10401=(gconst4*r01);
IkReal x10402=(gconst5*r00);
IkReal x10403=(gconst4*r21);
IkReal x10404=(gconst5*r20);
IkReal x10405=((1.0)*x10398);
IkReal x10406=((1.0)*x10397);
evalcond[0]=((((-1.0)*r22*x10405))+((x10397*x10403))+(((-1.0)*x10404*x10406)));
evalcond[1]=((((-1.0)*x10402*x10406))+((x10397*x10401))+(((-1.0)*r02*x10405)));
evalcond[2]=(((x10398*x10400))+(((-1.0)*r12*x10406))+(((-1.0)*x10399*x10405)));
evalcond[3]=((1.0)+((x10397*x10399))+(((-1.0)*r12*x10405))+(((-1.0)*x10400*x10406)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10398*x10404))+(((-1.0)*r22*x10406))+(((-1.0)*x10403*x10405)));
evalcond[5]=(((x10398*x10402))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10401*x10405))+(((-1.0)*r02*x10406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10407=gconst4*gconst4;
IkReal x10408=gconst5*gconst5;
IkReal x10409=(r10*r21);
IkReal x10410=((1.0)*cj3);
IkReal x10411=(r11*r21);
IkReal x10412=(r11*r20);
IkReal x10413=(r22*sj3);
IkReal x10414=(gconst4*r10);
IkReal x10415=((1.0)*sj3);
IkReal x10416=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10417=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10407*x10410*x10411))+(((-1.0)*r10*r20*x10408*x10410))+(((-1.0)*r12*r22*x10410))+((x10412*x10416))+((x10409*x10416)))),-1);
if(!x10417.valid){
continue;
}
CheckValue<IkReal> x10418 = IKatan2WithCheck(IkReal((((x10413*x10414))+((gconst5*r11*x10413)))),IkReal(((((-1.0)*gconst5*r20*x10414*x10415))+(((-1.0)*x10408*x10412*x10415))+((gconst4*gconst5*sj3*x10411))+((sj3*x10407*x10409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10417.value)))+(x10418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10419=IKsin(j4);
IkReal x10420=IKcos(j4);
IkReal x10421=(sj1*sj2);
IkReal x10422=(gconst5*sj3);
IkReal x10423=(cj3*gconst5);
IkReal x10424=(gconst4*r11);
IkReal x10425=((1.0)*cj1);
IkReal x10426=(gconst4*r01);
IkReal x10427=(cj2*sj1);
IkReal x10428=(gconst4*r21);
IkReal x10429=(gconst4*sj3);
IkReal x10430=(cj3*gconst4);
IkReal x10431=(cj2*x10425);
IkReal x10432=((1.0)*x10420);
IkReal x10433=((1.0)*x10419);
IkReal x10434=(cj3*x10419);
IkReal x10435=(cj3*x10420);
evalcond[0]=(((x10419*x10428))+(((-1.0)*gconst5*r20*x10433))+(((-1.0)*r22*x10432)));
evalcond[1]=((((-1.0)*gconst5*r00*x10433))+((x10419*x10426))+(((-1.0)*r02*x10432)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10433))+((x10419*x10424))+(((-1.0)*r12*x10432)));
evalcond[3]=((((-1.0)*r10*x10423*x10432))+((r12*x10434))+((r10*x10429))+((r11*x10422))+((x10424*x10435)));
evalcond[4]=(((r10*x10420*x10422))+(((-1.0)*sj3*x10424*x10432))+(((-1.0)*r12*sj3*x10433))+((r10*x10430))+((r11*x10423)));
evalcond[5]=(((r22*x10434))+((cj1*sj2))+((x10428*x10435))+(((-1.0)*r20*x10423*x10432))+x10427+((r20*x10429))+((r21*x10422)));
evalcond[6]=(((r01*x10422))+((r00*x10429))+((x10426*x10435))+(((-1.0)*r00*x10423*x10432))+((r02*x10434))+x10421+(((-1.0)*x10431)));
evalcond[7]=((((-1.0)*r22*sj3*x10433))+(((-1.0)*sj3*x10428*x10432))+((r20*x10420*x10422))+x10421+(((-1.0)*x10431))+((r20*x10430))+((r21*x10423)));
evalcond[8]=(((r01*x10423))+(((-1.0)*sj3*x10426*x10432))+(((-1.0)*sj2*x10425))+(((-1.0)*x10427))+(((-1.0)*r02*sj3*x10433))+((r00*x10420*x10422))+((r00*x10430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10436=((1.0)*gconst5);
CheckValue<IkReal> x10437=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10436)))),-1);
if(!x10437.valid){
continue;
}
CheckValue<IkReal> x10438 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10436))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10437.value)))+(x10438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10439=IKsin(j4);
IkReal x10440=IKcos(j4);
IkReal x10441=(sj1*sj2);
IkReal x10442=(gconst5*sj3);
IkReal x10443=(cj3*gconst5);
IkReal x10444=(gconst4*r11);
IkReal x10445=((1.0)*cj1);
IkReal x10446=(gconst4*r01);
IkReal x10447=(cj2*sj1);
IkReal x10448=(gconst4*r21);
IkReal x10449=(gconst4*sj3);
IkReal x10450=(cj3*gconst4);
IkReal x10451=(cj2*x10445);
IkReal x10452=((1.0)*x10440);
IkReal x10453=((1.0)*x10439);
IkReal x10454=(cj3*x10439);
IkReal x10455=(cj3*x10440);
evalcond[0]=((((-1.0)*gconst5*r20*x10453))+(((-1.0)*r22*x10452))+((x10439*x10448)));
evalcond[1]=((((-1.0)*gconst5*r00*x10453))+(((-1.0)*r02*x10452))+((x10439*x10446)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10452))+((x10439*x10444))+(((-1.0)*gconst5*r10*x10453)));
evalcond[3]=((((-1.0)*r10*x10443*x10452))+((r12*x10454))+((r11*x10442))+((r10*x10449))+((x10444*x10455)));
evalcond[4]=(((r10*x10450))+((r11*x10443))+(((-1.0)*sj3*x10444*x10452))+((r10*x10440*x10442))+(((-1.0)*r12*sj3*x10453)));
evalcond[5]=(((cj1*sj2))+((r22*x10454))+((r20*x10449))+(((-1.0)*r20*x10443*x10452))+((r21*x10442))+x10447+((x10448*x10455)));
evalcond[6]=(((x10446*x10455))+((r00*x10449))+x10441+((r01*x10442))+((r02*x10454))+(((-1.0)*r00*x10443*x10452))+(((-1.0)*x10451)));
evalcond[7]=((((-1.0)*sj3*x10448*x10452))+((r20*x10440*x10442))+(((-1.0)*r22*sj3*x10453))+((r21*x10443))+x10441+(((-1.0)*x10451))+((r20*x10450)));
evalcond[8]=((((-1.0)*x10447))+(((-1.0)*sj3*x10446*x10452))+((r00*x10450))+((r00*x10440*x10442))+(((-1.0)*r02*sj3*x10453))+(((-1.0)*sj2*x10445))+((r01*x10443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
CheckValue<IkReal> x10457=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10456.value)+(((1.5707963267949)*(x10457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10458=IKsin(j4);
IkReal x10459=IKcos(j4);
IkReal x10460=(sj1*sj2);
IkReal x10461=(gconst5*sj3);
IkReal x10462=(cj3*gconst5);
IkReal x10463=(gconst4*r11);
IkReal x10464=((1.0)*cj1);
IkReal x10465=(gconst4*r01);
IkReal x10466=(cj2*sj1);
IkReal x10467=(gconst4*r21);
IkReal x10468=(gconst4*sj3);
IkReal x10469=(cj3*gconst4);
IkReal x10470=(cj2*x10464);
IkReal x10471=((1.0)*x10459);
IkReal x10472=((1.0)*x10458);
IkReal x10473=(cj3*x10458);
IkReal x10474=(cj3*x10459);
evalcond[0]=((((-1.0)*gconst5*r20*x10472))+(((-1.0)*r22*x10471))+((x10458*x10467)));
evalcond[1]=((((-1.0)*r02*x10471))+(((-1.0)*gconst5*r00*x10472))+((x10458*x10465)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10472))+((x10458*x10463))+(((-1.0)*r12*x10471)));
evalcond[3]=(((r12*x10473))+((x10463*x10474))+((r11*x10461))+(((-1.0)*r10*x10462*x10471))+((r10*x10468)));
evalcond[4]=(((r11*x10462))+(((-1.0)*sj3*x10463*x10471))+((r10*x10459*x10461))+(((-1.0)*r12*sj3*x10472))+((r10*x10469)));
evalcond[5]=(((r20*x10468))+(((-1.0)*r20*x10462*x10471))+((cj1*sj2))+((r22*x10473))+((x10467*x10474))+((r21*x10461))+x10466);
evalcond[6]=(((r01*x10461))+(((-1.0)*r00*x10462*x10471))+((r00*x10468))+((x10465*x10474))+x10460+((r02*x10473))+(((-1.0)*x10470)));
evalcond[7]=(((r20*x10469))+(((-1.0)*r22*sj3*x10472))+((r20*x10459*x10461))+((r21*x10462))+x10460+(((-1.0)*sj3*x10467*x10471))+(((-1.0)*x10470)));
evalcond[8]=((((-1.0)*x10466))+((r00*x10459*x10461))+((r01*x10462))+((r00*x10469))+(((-1.0)*r02*sj3*x10472))+(((-1.0)*sj3*x10465*x10471))+(((-1.0)*sj2*x10464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10475=((-1.0)*r21);
CheckValue<IkReal> x10478 = IKatan2WithCheck(IkReal(x10475),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10478.valid){
continue;
}
IkReal x10476=((1.0)*(x10478.value));
IkReal x10477=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10476)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10476)));
IkReal gconst4=(x10475*x10477);
IkReal gconst5=((1.0)*r20*x10477);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10479=((-1.0)*r21);
CheckValue<IkReal> x10482 = IKatan2WithCheck(IkReal(x10479),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10482.valid){
continue;
}
IkReal x10480=((1.0)*(x10482.value));
IkReal x10481=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10480)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10480)));
IkReal gconst4=(x10479*x10481);
IkReal gconst5=((1.0)*r20*x10481);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10483=((-1.0)*r21);
CheckValue<IkReal> x10486 = IKatan2WithCheck(IkReal(x10483),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10486.valid){
continue;
}
IkReal x10484=((1.0)*(x10486.value));
IkReal x10485=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10484)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10484)));
IkReal gconst4=(x10483*x10485);
IkReal gconst5=((1.0)*r20*x10485);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10487=((-1.0)*r21);
CheckValue<IkReal> x10490 = IKatan2WithCheck(IkReal(x10487),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10490.valid){
continue;
}
IkReal x10488=((1.0)*(x10490.value));
IkReal x10489=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10488)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10488)));
IkReal gconst4=(x10487*x10489);
IkReal gconst5=((1.0)*r20*x10489);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10491=((-1.0)*r21);
CheckValue<IkReal> x10494 = IKatan2WithCheck(IkReal(x10491),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10494.valid){
continue;
}
IkReal x10492=((1.0)*(x10494.value));
IkReal x10493=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10492)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10492)));
IkReal gconst4=(x10491*x10493);
IkReal gconst5=((1.0)*r20*x10493);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10495=((-1.0)*r21);
CheckValue<IkReal> x10498 = IKatan2WithCheck(IkReal(x10495),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10498.valid){
continue;
}
IkReal x10496=((1.0)*(x10498.value));
IkReal x10497=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10496)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10496)));
IkReal gconst4=(x10495*x10497);
IkReal gconst5=((1.0)*r20*x10497);
IkReal x10499=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10503=IKPowWithIntegerCheck(x10499,-1);
if(!x10503.valid){
continue;
}
IkReal x10500=x10503.value;
IkReal x10501=((1.0)*x10500);
IkReal x10502=((((-1.0)*x10501*(r10*r10)*(r20*r20)))+(((-1.0)*x10501*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10500)));
j4eval[0]=x10502;
j4eval[1]=r12;
j4eval[2]=x10499;
j4eval[3]=IKsign(x10502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10504=(gconst5*r10);
IkReal x10505=(gconst4*r11);
CheckValue<IkReal> x10506 = IKatan2WithCheck(IkReal((x10504+(((-1.0)*x10505)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10506.valid){
continue;
}
CheckValue<IkReal> x10507=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10505*x10505)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10504*x10504)))+(((2.0)*x10504*x10505)))),-1);
if(!x10507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10506.value)+(((1.5707963267949)*(x10507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10508=IKsin(j4);
IkReal x10509=IKcos(j4);
IkReal x10510=(gconst4*r11);
IkReal x10511=(gconst5*r10);
IkReal x10512=(gconst4*r01);
IkReal x10513=(gconst5*r00);
IkReal x10514=(gconst4*r21);
IkReal x10515=(gconst5*r20);
IkReal x10516=((1.0)*x10509);
IkReal x10517=((1.0)*x10508);
evalcond[0]=((((-1.0)*r22*x10516))+(((-1.0)*x10515*x10517))+((x10508*x10514)));
evalcond[1]=((((-1.0)*r02*x10516))+(((-1.0)*x10513*x10517))+((x10508*x10512)));
evalcond[2]=(((x10509*x10511))+(((-1.0)*x10510*x10516))+(((-1.0)*r12*x10517)));
evalcond[3]=((-1.0)+(((-1.0)*x10511*x10517))+(((-1.0)*r12*x10516))+((x10508*x10510)));
evalcond[4]=(((cj2*sj1))+((x10509*x10513))+(((-1.0)*r02*x10517))+((cj1*sj2))+(((-1.0)*x10512*x10516)));
evalcond[5]=(((x10509*x10515))+(((-1.0)*r22*x10517))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10514*x10516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10518=((1.0)*gconst5);
CheckValue<IkReal> x10519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10518))+(((-1.0)*gconst4*r20)))),-1);
if(!x10519.valid){
continue;
}
CheckValue<IkReal> x10520 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10518))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10519.value)))+(x10520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10521=IKsin(j4);
IkReal x10522=IKcos(j4);
IkReal x10523=(gconst4*r11);
IkReal x10524=(gconst5*r10);
IkReal x10525=(gconst4*r01);
IkReal x10526=(gconst5*r00);
IkReal x10527=(gconst4*r21);
IkReal x10528=(gconst5*r20);
IkReal x10529=((1.0)*x10522);
IkReal x10530=((1.0)*x10521);
evalcond[0]=(((x10521*x10527))+(((-1.0)*r22*x10529))+(((-1.0)*x10528*x10530)));
evalcond[1]=(((x10521*x10525))+(((-1.0)*r02*x10529))+(((-1.0)*x10526*x10530)));
evalcond[2]=((((-1.0)*x10523*x10529))+(((-1.0)*r12*x10530))+((x10522*x10524)));
evalcond[3]=((-1.0)+(((-1.0)*x10524*x10530))+((x10521*x10523))+(((-1.0)*r12*x10529)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10530))+((x10522*x10526))+(((-1.0)*x10525*x10529)));
evalcond[5]=((((-1.0)*r22*x10530))+(((-1.0)*x10527*x10529))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10522*x10528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10531=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10531.valid){
continue;
}
CheckValue<IkReal> x10532 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10531.value)))+(x10532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10533=IKsin(j4);
IkReal x10534=IKcos(j4);
IkReal x10535=(gconst4*r11);
IkReal x10536=(gconst5*r10);
IkReal x10537=(gconst4*r01);
IkReal x10538=(gconst5*r00);
IkReal x10539=(gconst4*r21);
IkReal x10540=(gconst5*r20);
IkReal x10541=((1.0)*x10534);
IkReal x10542=((1.0)*x10533);
evalcond[0]=(((x10533*x10539))+(((-1.0)*r22*x10541))+(((-1.0)*x10540*x10542)));
evalcond[1]=(((x10533*x10537))+(((-1.0)*x10538*x10542))+(((-1.0)*r02*x10541)));
evalcond[2]=((((-1.0)*x10535*x10541))+(((-1.0)*r12*x10542))+((x10534*x10536)));
evalcond[3]=((-1.0)+((x10533*x10535))+(((-1.0)*r12*x10541))+(((-1.0)*x10536*x10542)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10542))+((x10534*x10538))+(((-1.0)*x10537*x10541)));
evalcond[5]=(((x10534*x10540))+(((-1.0)*x10539*x10541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10543=((-1.0)*r21);
CheckValue<IkReal> x10546 = IKatan2WithCheck(IkReal(x10543),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10546.valid){
continue;
}
IkReal x10544=((1.0)*(x10546.value));
IkReal x10545=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10544)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10544)));
IkReal gconst4=(x10543*x10545);
IkReal gconst5=((1.0)*r20*x10545);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10547=((-1.0)*r21);
CheckValue<IkReal> x10550 = IKatan2WithCheck(IkReal(x10547),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10550.valid){
continue;
}
IkReal x10548=((1.0)*(x10550.value));
IkReal x10549=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10548)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10548)));
IkReal gconst4=(x10547*x10549);
IkReal gconst5=((1.0)*r20*x10549);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10551=((-1.0)*r21);
CheckValue<IkReal> x10554 = IKatan2WithCheck(IkReal(x10551),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10554.valid){
continue;
}
IkReal x10552=((1.0)*(x10554.value));
IkReal x10553=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10552)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10552)));
IkReal gconst4=(x10551*x10553);
IkReal gconst5=((1.0)*r20*x10553);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10555=(gconst5*r10);
IkReal x10556=(gconst4*r11);
CheckValue<IkReal> x10557=IKPowWithIntegerCheck(IKsign(((x10555*x10555)+(r12*r12)+(x10556*x10556)+(((-2.0)*x10555*x10556)))),-1);
if(!x10557.valid){
continue;
}
CheckValue<IkReal> x10558 = IKatan2WithCheck(IkReal(((((-1.0)*x10555))+x10556)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10557.value)))+(x10558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10559=IKcos(j4);
IkReal x10560=IKsin(j4);
IkReal x10561=(gconst4*r11);
IkReal x10562=(gconst5*r10);
IkReal x10563=(gconst5*r00);
IkReal x10564=(gconst5*r20);
IkReal x10565=((1.0)*x10559);
IkReal x10566=(gconst4*x10559);
IkReal x10567=((1.0)*x10560);
IkReal x10568=(gconst4*x10560);
evalcond[0]=((((-1.0)*x10562*x10565))+((r12*x10560))+((x10559*x10561)));
evalcond[1]=((((-1.0)*r22*x10565))+((r21*x10568))+(((-1.0)*x10564*x10567)));
evalcond[2]=(((r01*x10568))+(((-1.0)*x10563*x10567))+(((-1.0)*r02*x10565)));
evalcond[3]=((-1.0)+(((-1.0)*x10562*x10567))+(((-1.0)*r12*x10565))+((x10560*x10561)));
evalcond[4]=(((r01*x10566))+((cj2*sj1))+(((-1.0)*x10563*x10565))+((cj1*sj2))+((r02*x10560)));
evalcond[5]=(((r21*x10566))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10564*x10565))+((r22*x10560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10569=((1.0)*gconst5);
CheckValue<IkReal> x10570 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10569))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10570.valid){
continue;
}
CheckValue<IkReal> x10571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10569))+(((-1.0)*gconst4*r20)))),-1);
if(!x10571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10570.value)+(((1.5707963267949)*(x10571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10572=IKcos(j4);
IkReal x10573=IKsin(j4);
IkReal x10574=(gconst4*r11);
IkReal x10575=(gconst5*r10);
IkReal x10576=(gconst5*r00);
IkReal x10577=(gconst5*r20);
IkReal x10578=((1.0)*x10572);
IkReal x10579=(gconst4*x10572);
IkReal x10580=((1.0)*x10573);
IkReal x10581=(gconst4*x10573);
evalcond[0]=(((x10572*x10574))+(((-1.0)*x10575*x10578))+((r12*x10573)));
evalcond[1]=((((-1.0)*x10577*x10580))+(((-1.0)*r22*x10578))+((r21*x10581)));
evalcond[2]=((((-1.0)*r02*x10578))+(((-1.0)*x10576*x10580))+((r01*x10581)));
evalcond[3]=((-1.0)+(((-1.0)*x10575*x10580))+(((-1.0)*r12*x10578))+((x10573*x10574)));
evalcond[4]=(((cj2*sj1))+((r01*x10579))+((cj1*sj2))+(((-1.0)*x10576*x10578))+((r02*x10573)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10579))+((r22*x10573))+(((-1.0)*x10577*x10578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10582=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10582.valid){
continue;
}
CheckValue<IkReal> x10583 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10582.value)))+(x10583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10584=IKcos(j4);
IkReal x10585=IKsin(j4);
IkReal x10586=(gconst4*r11);
IkReal x10587=(gconst5*r10);
IkReal x10588=(gconst5*r00);
IkReal x10589=(gconst5*r20);
IkReal x10590=((1.0)*x10584);
IkReal x10591=(gconst4*x10584);
IkReal x10592=((1.0)*x10585);
IkReal x10593=(gconst4*x10585);
evalcond[0]=(((r12*x10585))+(((-1.0)*x10587*x10590))+((x10584*x10586)));
evalcond[1]=(((r21*x10593))+(((-1.0)*r22*x10590))+(((-1.0)*x10589*x10592)));
evalcond[2]=((((-1.0)*r02*x10590))+((r01*x10593))+(((-1.0)*x10588*x10592)));
evalcond[3]=((-1.0)+(((-1.0)*x10587*x10592))+(((-1.0)*r12*x10590))+((x10585*x10586)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10591))+(((-1.0)*x10588*x10590))+((r02*x10585)));
evalcond[5]=(((r21*x10591))+(((-1.0)*x10589*x10590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10594=((-1.0)*r21);
CheckValue<IkReal> x10597 = IKatan2WithCheck(IkReal(x10594),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10597.valid){
continue;
}
IkReal x10595=((1.0)*(x10597.value));
IkReal x10596=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10595)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10595)));
IkReal gconst4=(x10594*x10596);
IkReal gconst5=((1.0)*r20*x10596);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10598=((-1.0)*r21);
CheckValue<IkReal> x10601 = IKatan2WithCheck(IkReal(x10598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10601.valid){
continue;
}
IkReal x10599=((1.0)*(x10601.value));
IkReal x10600=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10599)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10599)));
IkReal gconst4=(x10598*x10600);
IkReal gconst5=((1.0)*r20*x10600);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10602=((-1.0)*r21);
CheckValue<IkReal> x10605 = IKatan2WithCheck(IkReal(x10602),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10605.valid){
continue;
}
IkReal x10603=((1.0)*(x10605.value));
IkReal x10604=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10603)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10603)));
IkReal gconst4=(x10602*x10604);
IkReal gconst5=((1.0)*r20*x10604);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10606=(gconst5*r10);
IkReal x10607=(gconst4*r11);
CheckValue<IkReal> x10608 = IKatan2WithCheck(IkReal(((((-1.0)*x10606))+x10607)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10608.valid){
continue;
}
CheckValue<IkReal> x10609=IKPowWithIntegerCheck(IKsign(((x10607*x10607)+(r12*r12)+(((-2.0)*x10606*x10607))+(x10606*x10606))),-1);
if(!x10609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10608.value)+(((1.5707963267949)*(x10609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10610=IKcos(j4);
IkReal x10611=IKsin(j4);
IkReal x10612=(gconst5*r10);
IkReal x10613=(gconst5*r00);
IkReal x10614=(gconst5*r20);
IkReal x10615=((1.0)*x10610);
IkReal x10616=(gconst4*x10611);
IkReal x10617=(gconst4*x10610);
IkReal x10618=((1.0)*x10611);
evalcond[0]=(((r12*x10611))+(((-1.0)*x10612*x10615))+((r11*x10617)));
evalcond[1]=((((-1.0)*x10614*x10618))+(((-1.0)*r22*x10615))+((r21*x10616)));
evalcond[2]=((((-1.0)*r02*x10615))+((r01*x10616))+(((-1.0)*x10613*x10618)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10615))+(((-1.0)*x10612*x10618))+((r11*x10616)));
evalcond[4]=(((cj2*sj1))+((r22*x10611))+((cj1*sj2))+(((-1.0)*x10614*x10615))+((r21*x10617)));
evalcond[5]=(((r02*x10611))+(((-1.0)*sj1*sj2))+((r01*x10617))+((cj1*cj2))+(((-1.0)*x10613*x10615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10619=((1.0)*gconst5);
CheckValue<IkReal> x10620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10619))+(((-1.0)*gconst4*r20)))),-1);
if(!x10620.valid){
continue;
}
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10620.value)))+(x10621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10622=IKcos(j4);
IkReal x10623=IKsin(j4);
IkReal x10624=(gconst5*r10);
IkReal x10625=(gconst5*r00);
IkReal x10626=(gconst5*r20);
IkReal x10627=((1.0)*x10622);
IkReal x10628=(gconst4*x10623);
IkReal x10629=(gconst4*x10622);
IkReal x10630=((1.0)*x10623);
evalcond[0]=((((-1.0)*x10624*x10627))+((r11*x10629))+((r12*x10623)));
evalcond[1]=(((r21*x10628))+(((-1.0)*x10626*x10630))+(((-1.0)*r22*x10627)));
evalcond[2]=((((-1.0)*r02*x10627))+(((-1.0)*x10625*x10630))+((r01*x10628)));
evalcond[3]=((-1.0)+(((-1.0)*x10624*x10630))+(((-1.0)*r12*x10627))+((r11*x10628)));
evalcond[4]=(((r21*x10629))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10626*x10627))+((r22*x10623)));
evalcond[5]=((((-1.0)*x10625*x10627))+(((-1.0)*sj1*sj2))+((r01*x10629))+((r02*x10623))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10631=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10631.value)))+(x10632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10633=IKcos(j4);
IkReal x10634=IKsin(j4);
IkReal x10635=(gconst5*r10);
IkReal x10636=(gconst5*r00);
IkReal x10637=(gconst5*r20);
IkReal x10638=((1.0)*x10633);
IkReal x10639=(gconst4*x10634);
IkReal x10640=(gconst4*x10633);
IkReal x10641=((1.0)*x10634);
evalcond[0]=((((-1.0)*x10635*x10638))+((r11*x10640))+((r12*x10634)));
evalcond[1]=((((-1.0)*r22*x10638))+(((-1.0)*x10637*x10641))+((r21*x10639)));
evalcond[2]=((((-1.0)*r02*x10638))+((r01*x10639))+(((-1.0)*x10636*x10641)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10638))+((r11*x10639))+(((-1.0)*x10635*x10641)));
evalcond[4]=(((r21*x10640))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10637*x10638))+((r22*x10634)));
evalcond[5]=(((r01*x10640))+(((-1.0)*sj1*sj2))+(((-1.0)*x10636*x10638))+((r02*x10634))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10642=((-1.0)*r21);
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal(x10642),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
IkReal x10643=((1.0)*(x10645.value));
IkReal x10644=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10643)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10643)));
IkReal gconst4=(x10642*x10644);
IkReal gconst5=((1.0)*r20*x10644);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10646=((-1.0)*r21);
CheckValue<IkReal> x10649 = IKatan2WithCheck(IkReal(x10646),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10649.valid){
continue;
}
IkReal x10647=((1.0)*(x10649.value));
IkReal x10648=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10647)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10647)));
IkReal gconst4=(x10646*x10648);
IkReal gconst5=((1.0)*r20*x10648);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10650=((-1.0)*r21);
CheckValue<IkReal> x10653 = IKatan2WithCheck(IkReal(x10650),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10653.valid){
continue;
}
IkReal x10651=((1.0)*(x10653.value));
IkReal x10652=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10651)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10651)));
IkReal gconst4=(x10650*x10652);
IkReal gconst5=((1.0)*r20*x10652);
IkReal x10654=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10658=IKPowWithIntegerCheck(x10654,-1);
if(!x10658.valid){
continue;
}
IkReal x10655=x10658.value;
IkReal x10656=((1.0)*x10655);
IkReal x10657=((((-2.0)*r10*r11*r20*r21*x10655))+(((-1.0)*x10656*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10656*(r11*r11)*(r21*r21))));
j4eval[0]=x10657;
j4eval[1]=r12;
j4eval[2]=x10654;
j4eval[3]=IKsign(x10657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10659=(gconst5*r10);
IkReal x10660=(gconst4*r11);
CheckValue<IkReal> x10661=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10659*x10659)))+(((-1.0)*(x10660*x10660)))+(((2.0)*x10659*x10660))+(((-1.0)*(r12*r12))))),-1);
if(!x10661.valid){
continue;
}
CheckValue<IkReal> x10662 = IKatan2WithCheck(IkReal(((((-1.0)*x10660))+x10659)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10661.value)))+(x10662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10663=IKsin(j4);
IkReal x10664=IKcos(j4);
IkReal x10665=(gconst4*r11);
IkReal x10666=(gconst5*r10);
IkReal x10667=(gconst5*r00);
IkReal x10668=(gconst5*r20);
IkReal x10669=((1.0)*x10664);
IkReal x10670=(gconst4*x10663);
IkReal x10671=((1.0)*x10663);
evalcond[0]=((((-1.0)*r22*x10669))+((r21*x10670))+(((-1.0)*x10668*x10671)));
evalcond[1]=((((-1.0)*r02*x10669))+((r01*x10670))+(((-1.0)*x10667*x10671)));
evalcond[2]=(((x10664*x10666))+(((-1.0)*x10665*x10669))+(((-1.0)*r12*x10671)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10669))+((x10663*x10665))+(((-1.0)*x10666*x10671)));
evalcond[4]=(((x10664*x10668))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10669))+(((-1.0)*r22*x10671)));
evalcond[5]=(((x10664*x10667))+(((-1.0)*r02*x10671))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10672=((1.0)*gconst5);
CheckValue<IkReal> x10673 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10673.valid){
continue;
}
CheckValue<IkReal> x10674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10672))+(((-1.0)*gconst4*r20)))),-1);
if(!x10674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10673.value)+(((1.5707963267949)*(x10674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10675=IKsin(j4);
IkReal x10676=IKcos(j4);
IkReal x10677=(gconst4*r11);
IkReal x10678=(gconst5*r10);
IkReal x10679=(gconst5*r00);
IkReal x10680=(gconst5*r20);
IkReal x10681=((1.0)*x10676);
IkReal x10682=(gconst4*x10675);
IkReal x10683=((1.0)*x10675);
evalcond[0]=((((-1.0)*r22*x10681))+((r21*x10682))+(((-1.0)*x10680*x10683)));
evalcond[1]=((((-1.0)*r02*x10681))+(((-1.0)*x10679*x10683))+((r01*x10682)));
evalcond[2]=((((-1.0)*r12*x10683))+(((-1.0)*x10677*x10681))+((x10676*x10678)));
evalcond[3]=((-1.0)+(((-1.0)*x10678*x10683))+(((-1.0)*r12*x10681))+((x10675*x10677)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10683))+((cj1*sj2))+((x10676*x10680))+(((-1.0)*gconst4*r21*x10681)));
evalcond[5]=((((-1.0)*gconst4*r01*x10681))+(((-1.0)*r02*x10683))+(((-1.0)*sj1*sj2))+((x10676*x10679))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10684=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10684.valid){
continue;
}
CheckValue<IkReal> x10685 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10684.value)))+(x10685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10686=IKsin(j4);
IkReal x10687=IKcos(j4);
IkReal x10688=(gconst4*r11);
IkReal x10689=(gconst5*r10);
IkReal x10690=(gconst5*r00);
IkReal x10691=(gconst5*r20);
IkReal x10692=((1.0)*x10687);
IkReal x10693=(gconst4*x10686);
IkReal x10694=((1.0)*x10686);
evalcond[0]=(((r21*x10693))+(((-1.0)*x10691*x10694))+(((-1.0)*r22*x10692)));
evalcond[1]=((((-1.0)*x10690*x10694))+(((-1.0)*r02*x10692))+((r01*x10693)));
evalcond[2]=((((-1.0)*r12*x10694))+((x10687*x10689))+(((-1.0)*x10688*x10692)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10692))+((x10686*x10688))+(((-1.0)*x10689*x10694)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10692))+((cj1*sj2))+(((-1.0)*r22*x10694))+((x10687*x10691)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10694))+(((-1.0)*gconst4*r01*x10692))+((cj1*cj2))+((x10687*x10690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10695=((-1.0)*r21);
IkReal x10696=((-1.0)*px);
CheckValue<IkReal> x10698 = IKatan2WithCheck(IkReal(x10695),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10698.valid){
continue;
}
IkReal x10697=((1.0)*(x10698.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10697)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10696);
rxp1_1=(px*r21);
rxp1_2=(r11*x10696);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10697)));
IkReal gconst4=x10695;
IkReal gconst5=((1.0)*r20);
IkReal x10699=((1.0)*cj3);
IkReal x10700=(r10*r20);
IkReal x10701=(r11*r21);
j4eval[0]=((((-1.0)*x10701))+(((-1.0)*x10700)));
j4eval[1]=((((-1.0)*x10699*x10700))+(((-1.0)*x10699*x10701)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10702=((-1.0)*r21);
IkReal x10703=((-1.0)*px);
CheckValue<IkReal> x10705 = IKatan2WithCheck(IkReal(x10702),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10705.valid){
continue;
}
IkReal x10704=((1.0)*(x10705.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10704)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10703);
rxp1_1=(px*r21);
rxp1_2=(r11*x10703);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10704)));
IkReal gconst4=x10702;
IkReal gconst5=((1.0)*r20);
IkReal x10706=((1.0)*r11*r21);
IkReal x10707=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10706))+(((-1.0)*x10707)));
j4eval[1]=(((sj3*x10706))+((sj3*x10707)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10708=((-1.0)*r21);
IkReal x10709=((-1.0)*px);
CheckValue<IkReal> x10711 = IKatan2WithCheck(IkReal(x10708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10711.valid){
continue;
}
IkReal x10710=((1.0)*(x10711.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10710)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10709);
rxp1_1=(px*r21);
rxp1_2=(r11*x10709);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10710)));
IkReal gconst4=x10708;
IkReal gconst5=((1.0)*r20);
IkReal x10712=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10712))+(((-1.0)*r11*r21*x10712)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10713=((1.0)*r10);
CheckValue<IkReal> x10714=IKPowWithIntegerCheck(cj3,-1);
if(!x10714.valid){
continue;
}
CheckValue<IkReal> x10715=IKPowWithIntegerCheck(r02,-1);
if(!x10715.valid){
continue;
}
CheckValue<IkReal> x10716=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10713))+((cj3*gconst4*r11))),-1);
if(!x10716.valid){
continue;
}
if( IKabs(((x10714.value)*(x10715.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10716.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10713)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10714.value)*(x10715.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10716.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10713))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10714.value)*(x10715.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10716.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10713))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10717=IKsin(j4);
IkReal x10718=IKcos(j4);
IkReal x10719=(cj2*sj1);
IkReal x10720=(cj1*sj2);
IkReal x10721=(gconst5*sj3);
IkReal x10722=(gconst4*r11);
IkReal x10723=(sj1*sj2);
IkReal x10724=((1.0)*gconst5);
IkReal x10725=(cj1*cj2);
IkReal x10726=(gconst4*r21);
IkReal x10727=(cj3*gconst4);
IkReal x10728=(gconst4*sj3);
IkReal x10729=(cj3*gconst5);
IkReal x10730=(r20*x10718);
IkReal x10731=(r10*x10718);
IkReal x10732=(cj3*x10718);
IkReal x10733=(r02*x10717);
IkReal x10734=(x10719+x10720);
IkReal x10735=((1.0)*sj3*x10718);
evalcond[0]=((-1.0)*r02*x10718);
evalcond[1]=(((x10717*x10726))+(((-1.0)*r20*x10717*x10724)));
evalcond[2]=((((-1.0)*x10723))+x10725+((cj3*x10733)));
evalcond[3]=((((-1.0)*sj3*x10733))+x10734);
evalcond[4]=((-1.0)+((x10717*x10722))+(((-1.0)*r10*x10717*x10724)));
evalcond[5]=((((-1.0)*cj3*x10724*x10731))+((r10*x10728))+((x10722*x10732))+((r11*x10721)));
evalcond[6]=(((r10*x10727))+(((-1.0)*x10722*x10735))+((x10721*x10731))+((r11*x10729)));
evalcond[7]=((((-1.0)*cj3*x10724*x10730))+((r21*x10721))+((x10726*x10732))+((r20*x10728))+x10734);
evalcond[8]=(((r21*x10729))+(((-1.0)*x10726*x10735))+(((-1.0)*x10725))+((r20*x10727))+((x10721*x10730))+x10723);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10736=((1.0)*gconst5);
IkReal x10737=(gconst4*r11);
CheckValue<IkReal> x10738=IKPowWithIntegerCheck((x10737+(((-1.0)*r10*x10736))),-1);
if(!x10738.valid){
continue;
}
CheckValue<IkReal> x10739=IKPowWithIntegerCheck(((((-1.0)*sj3*x10737))+((gconst5*r10*sj3))),-1);
if(!x10739.valid){
continue;
}
if( IKabs(x10738.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10739.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10736)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10738.value)+IKsqr(((x10739.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10736))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10738.value, ((x10739.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10736))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10740=IKsin(j4);
IkReal x10741=IKcos(j4);
IkReal x10742=(cj2*sj1);
IkReal x10743=(cj1*sj2);
IkReal x10744=(gconst5*sj3);
IkReal x10745=(gconst4*r11);
IkReal x10746=(sj1*sj2);
IkReal x10747=((1.0)*gconst5);
IkReal x10748=(cj1*cj2);
IkReal x10749=(gconst4*r21);
IkReal x10750=(cj3*gconst4);
IkReal x10751=(gconst4*sj3);
IkReal x10752=(cj3*gconst5);
IkReal x10753=(r20*x10741);
IkReal x10754=(r10*x10741);
IkReal x10755=(cj3*x10741);
IkReal x10756=(r02*x10740);
IkReal x10757=(x10743+x10742);
IkReal x10758=((1.0)*sj3*x10741);
evalcond[0]=((-1.0)*r02*x10741);
evalcond[1]=((((-1.0)*r20*x10740*x10747))+((x10740*x10749)));
evalcond[2]=((((-1.0)*x10746))+((cj3*x10756))+x10748);
evalcond[3]=((((-1.0)*sj3*x10756))+x10757);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10740*x10747))+((x10740*x10745)));
evalcond[5]=(((x10745*x10755))+(((-1.0)*cj3*x10747*x10754))+((r10*x10751))+((r11*x10744)));
evalcond[6]=(((r10*x10750))+(((-1.0)*x10745*x10758))+((r11*x10752))+((x10744*x10754)));
evalcond[7]=((((-1.0)*cj3*x10747*x10753))+((x10749*x10755))+((r20*x10751))+x10757+((r21*x10744)));
evalcond[8]=((((-1.0)*x10748))+((r20*x10750))+(((-1.0)*x10749*x10758))+x10746+((x10744*x10753))+((r21*x10752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10759=((1.0)*sj3);
IkReal x10760=(gconst4*r11);
IkReal x10761=((1.0)*gconst5*r10);
CheckValue<IkReal> x10762=IKPowWithIntegerCheck(((((-1.0)*x10761))+x10760),-1);
if(!x10762.valid){
continue;
}
CheckValue<IkReal> x10763=IKPowWithIntegerCheck(((((-1.0)*cj3*x10761))+((cj3*x10760))),-1);
if(!x10763.valid){
continue;
}
if( IKabs(x10762.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10763.value)*(((((-1.0)*gconst4*r10*x10759))+(((-1.0)*gconst5*r11*x10759)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10762.value)+IKsqr(((x10763.value)*(((((-1.0)*gconst4*r10*x10759))+(((-1.0)*gconst5*r11*x10759))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10762.value, ((x10763.value)*(((((-1.0)*gconst4*r10*x10759))+(((-1.0)*gconst5*r11*x10759))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10764=IKsin(j4);
IkReal x10765=IKcos(j4);
IkReal x10766=(cj2*sj1);
IkReal x10767=(cj1*sj2);
IkReal x10768=(gconst5*sj3);
IkReal x10769=(gconst4*r11);
IkReal x10770=(sj1*sj2);
IkReal x10771=((1.0)*gconst5);
IkReal x10772=(cj1*cj2);
IkReal x10773=(gconst4*r21);
IkReal x10774=(cj3*gconst4);
IkReal x10775=(gconst4*sj3);
IkReal x10776=(cj3*gconst5);
IkReal x10777=(r20*x10765);
IkReal x10778=(r10*x10765);
IkReal x10779=(cj3*x10765);
IkReal x10780=(r02*x10764);
IkReal x10781=(x10767+x10766);
IkReal x10782=((1.0)*sj3*x10765);
evalcond[0]=((-1.0)*r02*x10765);
evalcond[1]=((((-1.0)*r20*x10764*x10771))+((x10764*x10773)));
evalcond[2]=((((-1.0)*x10770))+x10772+((cj3*x10780)));
evalcond[3]=((((-1.0)*sj3*x10780))+x10781);
evalcond[4]=((-1.0)+((x10764*x10769))+(((-1.0)*r10*x10764*x10771)));
evalcond[5]=(((r11*x10768))+(((-1.0)*cj3*x10771*x10778))+((r10*x10775))+((x10769*x10779)));
evalcond[6]=(((r11*x10776))+(((-1.0)*x10769*x10782))+((r10*x10774))+((x10768*x10778)));
evalcond[7]=(((x10773*x10779))+((r20*x10775))+((r21*x10768))+x10781+(((-1.0)*cj3*x10771*x10777)));
evalcond[8]=(((r20*x10774))+(((-1.0)*x10772))+((r21*x10776))+x10770+((x10768*x10777))+(((-1.0)*x10773*x10782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10783=gconst4*gconst4;
IkReal x10784=gconst5*gconst5;
IkReal x10785=(r10*r21);
IkReal x10786=((1.0)*cj3);
IkReal x10787=(r11*r21);
IkReal x10788=(r11*r20);
IkReal x10789=(r22*sj3);
IkReal x10790=(gconst4*r10);
IkReal x10791=((1.0)*sj3);
IkReal x10792=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10786))+(((-1.0)*x10783*x10786*x10787))+((x10785*x10792))+(((-1.0)*r10*r20*x10784*x10786))+((x10788*x10792)))),-1);
if(!x10793.valid){
continue;
}
CheckValue<IkReal> x10794 = IKatan2WithCheck(IkReal((((gconst5*r11*x10789))+((x10789*x10790)))),IkReal((((sj3*x10783*x10785))+(((-1.0)*gconst5*r20*x10790*x10791))+((gconst4*gconst5*sj3*x10787))+(((-1.0)*x10784*x10788*x10791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10793.value)))+(x10794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10795=IKsin(j4);
IkReal x10796=IKcos(j4);
IkReal x10797=(cj2*sj1);
IkReal x10798=(cj1*sj2);
IkReal x10799=(gconst5*sj3);
IkReal x10800=(gconst4*r11);
IkReal x10801=(sj1*sj2);
IkReal x10802=(gconst5*r10);
IkReal x10803=(cj1*cj2);
IkReal x10804=(gconst4*r01);
IkReal x10805=(gconst4*r21);
IkReal x10806=(gconst5*r00);
IkReal x10807=(gconst4*sj3);
IkReal x10808=(cj3*gconst5);
IkReal x10809=(cj3*gconst4);
IkReal x10810=((1.0)*x10796);
IkReal x10811=((1.0)*x10795);
IkReal x10812=(cj3*x10795);
IkReal x10813=(cj3*x10796);
IkReal x10814=(x10798+x10797);
evalcond[0]=(((x10795*x10805))+(((-1.0)*gconst5*r20*x10811))+(((-1.0)*r22*x10810)));
evalcond[1]=((((-1.0)*r02*x10810))+((x10795*x10804))+(((-1.0)*x10806*x10811)));
evalcond[2]=((-1.0)+((x10795*x10800))+(((-1.0)*r12*x10810))+(((-1.0)*x10802*x10811)));
evalcond[3]=(((r10*x10807))+(((-1.0)*cj3*x10802*x10810))+((r11*x10799))+((r12*x10812))+((x10800*x10813)));
evalcond[4]=(((r10*x10809))+((r10*x10796*x10799))+((r11*x10808))+(((-1.0)*sj3*x10800*x10810))+(((-1.0)*r12*sj3*x10811)));
evalcond[5]=(((r22*x10812))+((x10805*x10813))+((r20*x10807))+(((-1.0)*r20*x10808*x10810))+((r21*x10799))+x10814);
evalcond[6]=(((x10804*x10813))+((r02*x10812))+((r00*x10807))+(((-1.0)*cj3*x10806*x10810))+(((-1.0)*x10801))+((r01*x10799))+x10803);
evalcond[7]=(((r00*x10796*x10799))+((r01*x10808))+((r00*x10809))+(((-1.0)*r02*sj3*x10811))+(((-1.0)*sj3*x10804*x10810))+x10814);
evalcond[8]=((((-1.0)*sj3*x10805*x10810))+((r20*x10809))+(((-1.0)*r22*sj3*x10811))+((r21*x10808))+(((-1.0)*x10803))+((r20*x10796*x10799))+x10801);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10815=((1.0)*gconst5);
CheckValue<IkReal> x10816 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10816.valid){
continue;
}
CheckValue<IkReal> x10817=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10815))+(((-1.0)*gconst4*r20)))),-1);
if(!x10817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10816.value)+(((1.5707963267949)*(x10817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10818=IKsin(j4);
IkReal x10819=IKcos(j4);
IkReal x10820=(cj2*sj1);
IkReal x10821=(cj1*sj2);
IkReal x10822=(gconst5*sj3);
IkReal x10823=(gconst4*r11);
IkReal x10824=(sj1*sj2);
IkReal x10825=(gconst5*r10);
IkReal x10826=(cj1*cj2);
IkReal x10827=(gconst4*r01);
IkReal x10828=(gconst4*r21);
IkReal x10829=(gconst5*r00);
IkReal x10830=(gconst4*sj3);
IkReal x10831=(cj3*gconst5);
IkReal x10832=(cj3*gconst4);
IkReal x10833=((1.0)*x10819);
IkReal x10834=((1.0)*x10818);
IkReal x10835=(cj3*x10818);
IkReal x10836=(cj3*x10819);
IkReal x10837=(x10820+x10821);
evalcond[0]=((((-1.0)*gconst5*r20*x10834))+((x10818*x10828))+(((-1.0)*r22*x10833)));
evalcond[1]=((((-1.0)*x10829*x10834))+((x10818*x10827))+(((-1.0)*r02*x10833)));
evalcond[2]=((-1.0)+(((-1.0)*x10825*x10834))+(((-1.0)*r12*x10833))+((x10818*x10823)));
evalcond[3]=(((x10823*x10836))+(((-1.0)*cj3*x10825*x10833))+((r10*x10830))+((r12*x10835))+((r11*x10822)));
evalcond[4]=(((r10*x10819*x10822))+((r10*x10832))+(((-1.0)*r12*sj3*x10834))+(((-1.0)*sj3*x10823*x10833))+((r11*x10831)));
evalcond[5]=(((r21*x10822))+((r22*x10835))+(((-1.0)*r20*x10831*x10833))+((r20*x10830))+((x10828*x10836))+x10837);
evalcond[6]=((((-1.0)*x10824))+((x10827*x10836))+((r02*x10835))+(((-1.0)*cj3*x10829*x10833))+((r00*x10830))+((r01*x10822))+x10826);
evalcond[7]=((((-1.0)*sj3*x10827*x10833))+(((-1.0)*r02*sj3*x10834))+((r01*x10831))+((r00*x10832))+((r00*x10819*x10822))+x10837);
evalcond[8]=(((r20*x10819*x10822))+(((-1.0)*x10826))+(((-1.0)*r22*sj3*x10834))+(((-1.0)*sj3*x10828*x10833))+((r20*x10832))+((r21*x10831))+x10824);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10838=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10838.valid){
continue;
}
CheckValue<IkReal> x10839 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10838.value)))+(x10839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10840=IKsin(j4);
IkReal x10841=IKcos(j4);
IkReal x10842=(cj2*sj1);
IkReal x10843=(cj1*sj2);
IkReal x10844=(gconst5*sj3);
IkReal x10845=(gconst4*r11);
IkReal x10846=(sj1*sj2);
IkReal x10847=(gconst5*r10);
IkReal x10848=(cj1*cj2);
IkReal x10849=(gconst4*r01);
IkReal x10850=(gconst4*r21);
IkReal x10851=(gconst5*r00);
IkReal x10852=(gconst4*sj3);
IkReal x10853=(cj3*gconst5);
IkReal x10854=(cj3*gconst4);
IkReal x10855=((1.0)*x10841);
IkReal x10856=((1.0)*x10840);
IkReal x10857=(cj3*x10840);
IkReal x10858=(cj3*x10841);
IkReal x10859=(x10842+x10843);
evalcond[0]=((((-1.0)*gconst5*r20*x10856))+((x10840*x10850))+(((-1.0)*r22*x10855)));
evalcond[1]=(((x10840*x10849))+(((-1.0)*r02*x10855))+(((-1.0)*x10851*x10856)));
evalcond[2]=((-1.0)+((x10840*x10845))+(((-1.0)*r12*x10855))+(((-1.0)*x10847*x10856)));
evalcond[3]=(((x10845*x10858))+((r12*x10857))+(((-1.0)*cj3*x10847*x10855))+((r10*x10852))+((r11*x10844)));
evalcond[4]=(((r11*x10853))+((r10*x10854))+(((-1.0)*r12*sj3*x10856))+(((-1.0)*sj3*x10845*x10855))+((r10*x10841*x10844)));
evalcond[5]=(((r20*x10852))+((r21*x10844))+((x10850*x10858))+((r22*x10857))+(((-1.0)*r20*x10853*x10855))+x10859);
evalcond[6]=(((r01*x10844))+(((-1.0)*cj3*x10851*x10855))+(((-1.0)*x10846))+((x10849*x10858))+((r00*x10852))+((r02*x10857))+x10848);
evalcond[7]=((((-1.0)*sj3*x10849*x10855))+((r00*x10841*x10844))+((r01*x10853))+((r00*x10854))+(((-1.0)*r02*sj3*x10856))+x10859);
evalcond[8]=((((-1.0)*r22*sj3*x10856))+((r21*x10853))+((r20*x10841*x10844))+((r20*x10854))+(((-1.0)*x10848))+(((-1.0)*sj3*x10850*x10855))+x10846);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10860=((-1.0)*r21);
CheckValue<IkReal> x10863 = IKatan2WithCheck(IkReal(x10860),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10863.valid){
continue;
}
IkReal x10861=((1.0)*(x10863.value));
IkReal x10862=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10861)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10861)));
IkReal gconst4=(x10860*x10862);
IkReal gconst5=((1.0)*r20*x10862);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10864=((-1.0)*r21);
CheckValue<IkReal> x10867 = IKatan2WithCheck(IkReal(x10864),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10867.valid){
continue;
}
IkReal x10865=((1.0)*(x10867.value));
IkReal x10866=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10865)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10865)));
IkReal gconst4=(x10864*x10866);
IkReal gconst5=((1.0)*r20*x10866);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10868=((-1.0)*r21);
CheckValue<IkReal> x10871 = IKatan2WithCheck(IkReal(x10868),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10871.valid){
continue;
}
IkReal x10869=((1.0)*(x10871.value));
IkReal x10870=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10869)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10869)));
IkReal gconst4=(x10868*x10870);
IkReal gconst5=((1.0)*r20*x10870);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10872=((-1.0)*r21);
CheckValue<IkReal> x10875 = IKatan2WithCheck(IkReal(x10872),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10875.valid){
continue;
}
IkReal x10873=((1.0)*(x10875.value));
IkReal x10874=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10873)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10873)));
IkReal gconst4=(x10872*x10874);
IkReal gconst5=((1.0)*r20*x10874);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10876=((-1.0)*r21);
CheckValue<IkReal> x10879 = IKatan2WithCheck(IkReal(x10876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10879.valid){
continue;
}
IkReal x10877=((1.0)*(x10879.value));
IkReal x10878=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10877)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10877)));
IkReal gconst4=(x10876*x10878);
IkReal gconst5=((1.0)*r20*x10878);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10880=((-1.0)*r21);
CheckValue<IkReal> x10883 = IKatan2WithCheck(IkReal(x10880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10883.valid){
continue;
}
IkReal x10881=((1.0)*(x10883.value));
IkReal x10882=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10881)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10881)));
IkReal gconst4=(x10880*x10882);
IkReal gconst5=((1.0)*r20*x10882);
IkReal x10884=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10888=IKPowWithIntegerCheck(x10884,-1);
if(!x10888.valid){
continue;
}
IkReal x10885=x10888.value;
IkReal x10886=((1.0)*x10885);
IkReal x10887=((((-1.0)*(r02*r02)))+(((-1.0)*x10886*(r00*r00)*(r20*r20)))+(((-1.0)*x10886*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10885)));
j4eval[0]=x10887;
j4eval[1]=r02;
j4eval[2]=x10884;
j4eval[3]=IKsign(x10887);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10889=(gconst5*r00);
IkReal x10890=(gconst4*r01);
CheckValue<IkReal> x10891 = IKatan2WithCheck(IkReal(((((-1.0)*x10890))+x10889)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10891.valid){
continue;
}
CheckValue<IkReal> x10892=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10889*x10889)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10890*x10890)))+(((2.0)*x10889*x10890)))),-1);
if(!x10892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10891.value)+(((1.5707963267949)*(x10892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10893=IKsin(j4);
IkReal x10894=IKcos(j4);
IkReal x10895=(gconst4*r11);
IkReal x10896=((1.0)*cj1);
IkReal x10897=(gconst5*r10);
IkReal x10898=(gconst4*r01);
IkReal x10899=(gconst5*r00);
IkReal x10900=(gconst4*r21);
IkReal x10901=(gconst5*r20);
IkReal x10902=((1.0)*x10894);
IkReal x10903=((1.0)*x10893);
evalcond[0]=(((x10893*x10900))+(((-1.0)*x10901*x10903))+(((-1.0)*r22*x10902)));
evalcond[1]=(((x10893*x10895))+(((-1.0)*r12*x10902))+(((-1.0)*x10897*x10903)));
evalcond[2]=(((x10894*x10899))+(((-1.0)*x10898*x10902))+(((-1.0)*r02*x10903)));
evalcond[3]=((-1.0)+((x10893*x10898))+(((-1.0)*x10899*x10903))+(((-1.0)*r02*x10902)));
evalcond[4]=((((-1.0)*x10900*x10902))+((sj1*sj2))+(((-1.0)*r22*x10903))+(((-1.0)*cj2*x10896))+((x10894*x10901)));
evalcond[5]=((((-1.0)*sj2*x10896))+(((-1.0)*x10895*x10902))+(((-1.0)*cj2*sj1))+((x10894*x10897))+(((-1.0)*r12*x10903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10904=((1.0)*gconst5);
CheckValue<IkReal> x10905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10904))+(((-1.0)*gconst4*r10)))),-1);
if(!x10905.valid){
continue;
}
CheckValue<IkReal> x10906 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10904))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10905.value)))+(x10906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10907=IKsin(j4);
IkReal x10908=IKcos(j4);
IkReal x10909=(gconst4*r11);
IkReal x10910=((1.0)*cj1);
IkReal x10911=(gconst5*r10);
IkReal x10912=(gconst4*r01);
IkReal x10913=(gconst5*r00);
IkReal x10914=(gconst4*r21);
IkReal x10915=(gconst5*r20);
IkReal x10916=((1.0)*x10908);
IkReal x10917=((1.0)*x10907);
evalcond[0]=((((-1.0)*r22*x10916))+((x10907*x10914))+(((-1.0)*x10915*x10917)));
evalcond[1]=((((-1.0)*r12*x10916))+(((-1.0)*x10911*x10917))+((x10907*x10909)));
evalcond[2]=((((-1.0)*r02*x10917))+(((-1.0)*x10912*x10916))+((x10908*x10913)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10916))+((x10907*x10912))+(((-1.0)*x10913*x10917)));
evalcond[4]=((((-1.0)*x10914*x10916))+(((-1.0)*r22*x10917))+((sj1*sj2))+((x10908*x10915))+(((-1.0)*cj2*x10910)));
evalcond[5]=((((-1.0)*sj2*x10910))+(((-1.0)*r12*x10917))+(((-1.0)*cj2*sj1))+((x10908*x10911))+(((-1.0)*x10909*x10916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10918 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10918.valid){
continue;
}
CheckValue<IkReal> x10919=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10918.value)+(((1.5707963267949)*(x10919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10920=IKsin(j4);
IkReal x10921=IKcos(j4);
IkReal x10922=(gconst4*r11);
IkReal x10923=((1.0)*cj1);
IkReal x10924=(gconst5*r10);
IkReal x10925=(gconst4*r01);
IkReal x10926=(gconst5*r00);
IkReal x10927=(gconst4*r21);
IkReal x10928=(gconst5*r20);
IkReal x10929=((1.0)*x10921);
IkReal x10930=((1.0)*x10920);
evalcond[0]=((((-1.0)*r22*x10929))+(((-1.0)*x10928*x10930))+((x10920*x10927)));
evalcond[1]=((((-1.0)*r12*x10929))+(((-1.0)*x10924*x10930))+((x10920*x10922)));
evalcond[2]=((((-1.0)*r02*x10930))+((x10921*x10926))+(((-1.0)*x10925*x10929)));
evalcond[3]=((-1.0)+(((-1.0)*x10926*x10930))+(((-1.0)*r02*x10929))+((x10920*x10925)));
evalcond[4]=((((-1.0)*r22*x10930))+(((-1.0)*x10927*x10929))+((sj1*sj2))+((x10921*x10928))+(((-1.0)*cj2*x10923)));
evalcond[5]=((((-1.0)*sj2*x10923))+(((-1.0)*r12*x10930))+(((-1.0)*cj2*sj1))+((x10921*x10924))+(((-1.0)*x10922*x10929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10931=((-1.0)*r21);
CheckValue<IkReal> x10934 = IKatan2WithCheck(IkReal(x10931),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10934.valid){
continue;
}
IkReal x10932=((1.0)*(x10934.value));
IkReal x10933=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10932)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10932)));
IkReal gconst4=(x10931*x10933);
IkReal gconst5=((1.0)*r20*x10933);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10935=((-1.0)*r21);
CheckValue<IkReal> x10938 = IKatan2WithCheck(IkReal(x10935),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10938.valid){
continue;
}
IkReal x10936=((1.0)*(x10938.value));
IkReal x10937=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10936)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10936)));
IkReal gconst4=(x10935*x10937);
IkReal gconst5=((1.0)*r20*x10937);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10939=((-1.0)*r21);
CheckValue<IkReal> x10942 = IKatan2WithCheck(IkReal(x10939),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10942.valid){
continue;
}
IkReal x10940=((1.0)*(x10942.value));
IkReal x10941=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10940)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10940)));
IkReal gconst4=(x10939*x10941);
IkReal gconst5=((1.0)*r20*x10941);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10943=(gconst4*r01);
IkReal x10944=(gconst5*r00);
CheckValue<IkReal> x10945=IKPowWithIntegerCheck(IKsign(((x10943*x10943)+(((-2.0)*x10943*x10944))+(x10944*x10944)+(r02*r02))),-1);
if(!x10945.valid){
continue;
}
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(((((-1.0)*x10944))+x10943)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10945.value)))+(x10946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10947=IKcos(j4);
IkReal x10948=IKsin(j4);
IkReal x10949=(gconst4*r11);
IkReal x10950=(gconst5*r10);
IkReal x10951=((1.0)*cj1);
IkReal x10952=(gconst5*r00);
IkReal x10953=(gconst5*r20);
IkReal x10954=((1.0)*x10947);
IkReal x10955=(gconst4*x10947);
IkReal x10956=((1.0)*x10948);
IkReal x10957=(gconst4*x10948);
evalcond[0]=(((r01*x10955))+((r02*x10948))+(((-1.0)*x10952*x10954)));
evalcond[1]=((((-1.0)*r22*x10954))+((r21*x10957))+(((-1.0)*x10953*x10956)));
evalcond[2]=(((x10948*x10949))+(((-1.0)*x10950*x10956))+(((-1.0)*r12*x10954)));
evalcond[3]=((-1.0)+((r01*x10957))+(((-1.0)*x10952*x10956))+(((-1.0)*r02*x10954)));
evalcond[4]=((((-1.0)*cj2*x10951))+((sj1*sj2))+((r21*x10955))+(((-1.0)*x10953*x10954))+((r22*x10948)));
evalcond[5]=(((r12*x10948))+(((-1.0)*cj2*sj1))+((x10947*x10949))+(((-1.0)*x10950*x10954))+(((-1.0)*sj2*x10951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10958=((1.0)*gconst5);
CheckValue<IkReal> x10959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10958))+(((-1.0)*gconst4*r10)))),-1);
if(!x10959.valid){
continue;
}
CheckValue<IkReal> x10960 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10958))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10959.value)))+(x10960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10961=IKcos(j4);
IkReal x10962=IKsin(j4);
IkReal x10963=(gconst4*r11);
IkReal x10964=(gconst5*r10);
IkReal x10965=((1.0)*cj1);
IkReal x10966=(gconst5*r00);
IkReal x10967=(gconst5*r20);
IkReal x10968=((1.0)*x10961);
IkReal x10969=(gconst4*x10961);
IkReal x10970=((1.0)*x10962);
IkReal x10971=(gconst4*x10962);
evalcond[0]=(((r02*x10962))+((r01*x10969))+(((-1.0)*x10966*x10968)));
evalcond[1]=((((-1.0)*r22*x10968))+((r21*x10971))+(((-1.0)*x10967*x10970)));
evalcond[2]=(((x10962*x10963))+(((-1.0)*r12*x10968))+(((-1.0)*x10964*x10970)));
evalcond[3]=((-1.0)+((r01*x10971))+(((-1.0)*x10966*x10970))+(((-1.0)*r02*x10968)));
evalcond[4]=(((r22*x10962))+((sj1*sj2))+((r21*x10969))+(((-1.0)*x10967*x10968))+(((-1.0)*cj2*x10965)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10965))+((x10961*x10963))+((r12*x10962))+(((-1.0)*x10964*x10968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10972 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10972.valid){
continue;
}
CheckValue<IkReal> x10973=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10972.value)+(((1.5707963267949)*(x10973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10974=IKcos(j4);
IkReal x10975=IKsin(j4);
IkReal x10976=(gconst4*r11);
IkReal x10977=(gconst5*r10);
IkReal x10978=((1.0)*cj1);
IkReal x10979=(gconst5*r00);
IkReal x10980=(gconst5*r20);
IkReal x10981=((1.0)*x10974);
IkReal x10982=(gconst4*x10974);
IkReal x10983=((1.0)*x10975);
IkReal x10984=(gconst4*x10975);
evalcond[0]=(((r02*x10975))+((r01*x10982))+(((-1.0)*x10979*x10981)));
evalcond[1]=(((r21*x10984))+(((-1.0)*r22*x10981))+(((-1.0)*x10980*x10983)));
evalcond[2]=((((-1.0)*r12*x10981))+(((-1.0)*x10977*x10983))+((x10975*x10976)));
evalcond[3]=((-1.0)+((r01*x10984))+(((-1.0)*r02*x10981))+(((-1.0)*x10979*x10983)));
evalcond[4]=((((-1.0)*cj2*x10978))+((r21*x10982))+((r22*x10975))+((sj1*sj2))+(((-1.0)*x10980*x10981)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10977*x10981))+((x10974*x10976))+(((-1.0)*sj2*x10978))+((r12*x10975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10985=((-1.0)*r21);
CheckValue<IkReal> x10988 = IKatan2WithCheck(IkReal(x10985),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10988.valid){
continue;
}
IkReal x10986=((1.0)*(x10988.value));
IkReal x10987=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10986)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10986)));
IkReal gconst4=(x10985*x10987);
IkReal gconst5=((1.0)*r20*x10987);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10989=((-1.0)*r21);
CheckValue<IkReal> x10992 = IKatan2WithCheck(IkReal(x10989),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10992.valid){
continue;
}
IkReal x10990=((1.0)*(x10992.value));
IkReal x10991=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10990)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10990)));
IkReal gconst4=(x10989*x10991);
IkReal gconst5=((1.0)*r20*x10991);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10993=((-1.0)*r21);
CheckValue<IkReal> x10996 = IKatan2WithCheck(IkReal(x10993),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10996.valid){
continue;
}
IkReal x10994=((1.0)*(x10996.value));
IkReal x10995=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10994)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10994)));
IkReal gconst4=(x10993*x10995);
IkReal gconst5=((1.0)*r20*x10995);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10997=(gconst4*r01);
IkReal x10998=(gconst5*r00);
CheckValue<IkReal> x10999=IKPowWithIntegerCheck(IKsign(((x10998*x10998)+(x10997*x10997)+(r02*r02)+(((-2.0)*x10997*x10998)))),-1);
if(!x10999.valid){
continue;
}
CheckValue<IkReal> x11000 = IKatan2WithCheck(IkReal(((((-1.0)*x10998))+x10997)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10999.value)))+(x11000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11001=IKcos(j4);
IkReal x11002=IKsin(j4);
IkReal x11003=(gconst4*r11);
IkReal x11004=(gconst5*r10);
IkReal x11005=(gconst5*r00);
IkReal x11006=(gconst5*r20);
IkReal x11007=((1.0)*x11001);
IkReal x11008=(gconst4*x11001);
IkReal x11009=((1.0)*x11002);
IkReal x11010=(gconst4*x11002);
evalcond[0]=(((r02*x11002))+(((-1.0)*x11005*x11007))+((r01*x11008)));
evalcond[1]=((((-1.0)*r22*x11007))+((r21*x11010))+(((-1.0)*x11006*x11009)));
evalcond[2]=(((x11002*x11003))+(((-1.0)*x11004*x11009))+(((-1.0)*r12*x11007)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11007))+(((-1.0)*x11005*x11009))+((r01*x11010)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11008))+((r22*x11002))+(((-1.0)*x11006*x11007)));
evalcond[5]=(((x11001*x11003))+(((-1.0)*x11004*x11007))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11011=((1.0)*gconst5);
CheckValue<IkReal> x11012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11011))+(((-1.0)*gconst4*r10)))),-1);
if(!x11012.valid){
continue;
}
CheckValue<IkReal> x11013 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11012.value)))+(x11013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11014=IKcos(j4);
IkReal x11015=IKsin(j4);
IkReal x11016=(gconst4*r11);
IkReal x11017=(gconst5*r10);
IkReal x11018=(gconst5*r00);
IkReal x11019=(gconst5*r20);
IkReal x11020=((1.0)*x11014);
IkReal x11021=(gconst4*x11014);
IkReal x11022=((1.0)*x11015);
IkReal x11023=(gconst4*x11015);
evalcond[0]=(((r01*x11021))+(((-1.0)*x11018*x11020))+((r02*x11015)));
evalcond[1]=(((r21*x11023))+(((-1.0)*r22*x11020))+(((-1.0)*x11019*x11022)));
evalcond[2]=((((-1.0)*r12*x11020))+(((-1.0)*x11017*x11022))+((x11015*x11016)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11020))+((r01*x11023))+(((-1.0)*x11018*x11022)));
evalcond[4]=(((cj2*sj1))+((r21*x11021))+((cj1*sj2))+((r22*x11015))+(((-1.0)*x11019*x11020)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11015))+(((-1.0)*x11017*x11020))+((x11014*x11016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11024 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11024.valid){
continue;
}
CheckValue<IkReal> x11025=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11024.value)+(((1.5707963267949)*(x11025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11026=IKcos(j4);
IkReal x11027=IKsin(j4);
IkReal x11028=(gconst4*r11);
IkReal x11029=(gconst5*r10);
IkReal x11030=(gconst5*r00);
IkReal x11031=(gconst5*r20);
IkReal x11032=((1.0)*x11026);
IkReal x11033=(gconst4*x11026);
IkReal x11034=((1.0)*x11027);
IkReal x11035=(gconst4*x11027);
evalcond[0]=(((r01*x11033))+(((-1.0)*x11030*x11032))+((r02*x11027)));
evalcond[1]=(((r21*x11035))+(((-1.0)*x11031*x11034))+(((-1.0)*r22*x11032)));
evalcond[2]=((((-1.0)*x11029*x11034))+((x11027*x11028))+(((-1.0)*r12*x11032)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11032))+((r01*x11035))+(((-1.0)*x11030*x11034)));
evalcond[4]=(((cj2*sj1))+((r21*x11033))+((cj1*sj2))+(((-1.0)*x11031*x11032))+((r22*x11027)));
evalcond[5]=(((x11026*x11028))+(((-1.0)*x11029*x11032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11036=((-1.0)*r21);
CheckValue<IkReal> x11039 = IKatan2WithCheck(IkReal(x11036),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11039.valid){
continue;
}
IkReal x11037=((1.0)*(x11039.value));
IkReal x11038=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11037)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11037)));
IkReal gconst4=(x11036*x11038);
IkReal gconst5=((1.0)*r20*x11038);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11040=((-1.0)*r21);
CheckValue<IkReal> x11043 = IKatan2WithCheck(IkReal(x11040),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11043.valid){
continue;
}
IkReal x11041=((1.0)*(x11043.value));
IkReal x11042=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11041)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11041)));
IkReal gconst4=(x11040*x11042);
IkReal gconst5=((1.0)*r20*x11042);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11044=((-1.0)*r21);
CheckValue<IkReal> x11047 = IKatan2WithCheck(IkReal(x11044),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11047.valid){
continue;
}
IkReal x11045=((1.0)*(x11047.value));
IkReal x11046=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11045)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11045)));
IkReal gconst4=(x11044*x11046);
IkReal gconst5=((1.0)*r20*x11046);
IkReal x11048=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11052=IKPowWithIntegerCheck(x11048,-1);
if(!x11052.valid){
continue;
}
IkReal x11049=x11052.value;
IkReal x11050=((1.0)*x11049);
IkReal x11051=((((-1.0)*x11050*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11049))+(((-1.0)*x11050*(r00*r00)*(r20*r20))));
j4eval[0]=x11051;
j4eval[1]=r02;
j4eval[2]=x11048;
j4eval[3]=IKsign(x11051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11053=(gconst5*r00);
IkReal x11054=(gconst4*r01);
CheckValue<IkReal> x11055=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11053*x11053)))+(((-1.0)*(r02*r02)))+(((2.0)*x11053*x11054))+(((-1.0)*(x11054*x11054))))),-1);
if(!x11055.valid){
continue;
}
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal((x11053+(((-1.0)*x11054)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11055.value)))+(x11056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11057=IKsin(j4);
IkReal x11058=IKcos(j4);
IkReal x11059=(gconst4*r11);
IkReal x11060=(gconst5*r10);
IkReal x11061=(gconst4*r01);
IkReal x11062=(gconst5*r00);
IkReal x11063=(gconst4*r21);
IkReal x11064=(gconst5*r20);
IkReal x11065=((1.0)*x11058);
IkReal x11066=((1.0)*x11057);
evalcond[0]=((((-1.0)*r22*x11065))+(((-1.0)*x11064*x11066))+((x11057*x11063)));
evalcond[1]=((((-1.0)*x11060*x11066))+(((-1.0)*r12*x11065))+((x11057*x11059)));
evalcond[2]=(((x11058*x11062))+(((-1.0)*r02*x11066))+(((-1.0)*x11061*x11065)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11065))+(((-1.0)*x11062*x11066))+((x11057*x11061)));
evalcond[4]=((((-1.0)*r22*x11066))+((cj2*sj1))+((x11058*x11064))+((cj1*sj2))+(((-1.0)*x11063*x11065)));
evalcond[5]=(((x11058*x11060))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11066))+(((-1.0)*x11059*x11065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11067=((1.0)*gconst5);
CheckValue<IkReal> x11068=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11067))+(((-1.0)*gconst4*r10)))),-1);
if(!x11068.valid){
continue;
}
CheckValue<IkReal> x11069 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11068.value)))+(x11069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11070=IKsin(j4);
IkReal x11071=IKcos(j4);
IkReal x11072=(gconst4*r11);
IkReal x11073=(gconst5*r10);
IkReal x11074=(gconst4*r01);
IkReal x11075=(gconst5*r00);
IkReal x11076=(gconst4*r21);
IkReal x11077=(gconst5*r20);
IkReal x11078=((1.0)*x11071);
IkReal x11079=((1.0)*x11070);
evalcond[0]=((((-1.0)*x11077*x11079))+(((-1.0)*r22*x11078))+((x11070*x11076)));
evalcond[1]=((((-1.0)*x11073*x11079))+((x11070*x11072))+(((-1.0)*r12*x11078)));
evalcond[2]=((((-1.0)*r02*x11079))+((x11071*x11075))+(((-1.0)*x11074*x11078)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11078))+(((-1.0)*x11075*x11079))+((x11070*x11074)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11071*x11077))+(((-1.0)*x11076*x11078))+(((-1.0)*r22*x11079)));
evalcond[5]=((((-1.0)*x11072*x11078))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11071*x11073))+(((-1.0)*r12*x11079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11080 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11080.valid){
continue;
}
CheckValue<IkReal> x11081=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11080.value)+(((1.5707963267949)*(x11081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11082=IKsin(j4);
IkReal x11083=IKcos(j4);
IkReal x11084=(gconst4*r11);
IkReal x11085=(gconst5*r10);
IkReal x11086=(gconst4*r01);
IkReal x11087=(gconst5*r00);
IkReal x11088=(gconst4*r21);
IkReal x11089=(gconst5*r20);
IkReal x11090=((1.0)*x11083);
IkReal x11091=((1.0)*x11082);
evalcond[0]=(((x11082*x11088))+(((-1.0)*r22*x11090))+(((-1.0)*x11089*x11091)));
evalcond[1]=((((-1.0)*r12*x11090))+((x11082*x11084))+(((-1.0)*x11085*x11091)));
evalcond[2]=((((-1.0)*x11086*x11090))+(((-1.0)*r02*x11091))+((x11083*x11087)));
evalcond[3]=((-1.0)+((x11082*x11086))+(((-1.0)*r02*x11090))+(((-1.0)*x11087*x11091)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11091))+((cj1*sj2))+((x11083*x11089))+(((-1.0)*x11088*x11090)));
evalcond[5]=((((-1.0)*r12*x11091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11084*x11090))+((x11083*x11085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11092=gconst4*gconst4;
IkReal x11093=gconst5*gconst5;
IkReal x11094=(r01*r20);
IkReal x11095=(gconst4*sj3);
IkReal x11096=(r01*r21);
IkReal x11097=((1.0)*cj3);
IkReal x11098=(r00*r21);
IkReal x11099=(r00*r20);
IkReal x11100=(cj3*gconst4*gconst5);
IkReal x11101=((1.0)*x11093);
CheckValue<IkReal> x11102=IKPowWithIntegerCheck(IKsign((((x11094*x11100))+(((-1.0)*x11093*x11097*x11099))+((x11098*x11100))+(((-1.0)*x11092*x11096*x11097))+(((-1.0)*r02*r22*x11097)))),-1);
if(!x11102.valid){
continue;
}
CheckValue<IkReal> x11103 = IKatan2WithCheck(IkReal((((r00*r22*x11095))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11095*x11096))+((sj3*x11092*x11098))+(((-1.0)*gconst5*x11095*x11099))+(((-1.0)*sj3*x11094*x11101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11102.value)))+(x11103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11104=IKsin(j4);
IkReal x11105=IKcos(j4);
IkReal x11106=(sj1*sj2);
IkReal x11107=(gconst5*sj3);
IkReal x11108=(gconst4*r11);
IkReal x11109=(gconst5*r10);
IkReal x11110=((1.0)*cj1);
IkReal x11111=(gconst4*r01);
IkReal x11112=(cj2*sj1);
IkReal x11113=(gconst5*r00);
IkReal x11114=(gconst4*sj3);
IkReal x11115=(cj3*gconst5);
IkReal x11116=(cj3*gconst4);
IkReal x11117=(gconst4*r21);
IkReal x11118=(cj2*x11110);
IkReal x11119=((1.0)*x11105);
IkReal x11120=((1.0)*x11104);
IkReal x11121=(cj3*x11104);
IkReal x11122=(cj3*x11105);
evalcond[0]=((((-1.0)*gconst5*r20*x11120))+((x11104*x11117))+(((-1.0)*r22*x11119)));
evalcond[1]=(((x11104*x11108))+(((-1.0)*x11109*x11120))+(((-1.0)*r12*x11119)));
evalcond[2]=((-1.0)+((x11104*x11111))+(((-1.0)*x11113*x11120))+(((-1.0)*r02*x11119)));
evalcond[3]=((((-1.0)*cj3*x11113*x11119))+((r02*x11121))+((x11111*x11122))+((r00*x11114))+((r01*x11107)));
evalcond[4]=((((-1.0)*sj3*x11111*x11119))+(((-1.0)*r02*sj3*x11120))+((r00*x11116))+((r00*x11105*x11107))+((r01*x11115)));
evalcond[5]=(((cj1*sj2))+((r22*x11121))+(((-1.0)*r20*x11115*x11119))+x11112+((r21*x11107))+((r20*x11114))+((r21*x11105*x11116)));
evalcond[6]=((((-1.0)*cj3*x11109*x11119))+((x11108*x11122))+((r10*x11114))+((r12*x11121))+x11106+((r11*x11107))+(((-1.0)*x11118)));
evalcond[7]=(x11106+((r21*x11115))+((r20*x11116))+(((-1.0)*x11118))+(((-1.0)*r22*sj3*x11120))+(((-1.0)*r21*x11114*x11119))+((r20*x11105*x11107)));
evalcond[8]=((((-1.0)*x11112))+(((-1.0)*r12*sj3*x11120))+((r10*x11116))+((r10*x11105*x11107))+(((-1.0)*sj2*x11110))+((r11*x11115))+(((-1.0)*sj3*x11108*x11119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11123=((1.0)*gconst5);
CheckValue<IkReal> x11124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11123))+(((-1.0)*gconst4*r10)))),-1);
if(!x11124.valid){
continue;
}
CheckValue<IkReal> x11125 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11123))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11124.value)))+(x11125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11126=IKsin(j4);
IkReal x11127=IKcos(j4);
IkReal x11128=(sj1*sj2);
IkReal x11129=(gconst5*sj3);
IkReal x11130=(gconst4*r11);
IkReal x11131=(gconst5*r10);
IkReal x11132=((1.0)*cj1);
IkReal x11133=(gconst4*r01);
IkReal x11134=(cj2*sj1);
IkReal x11135=(gconst5*r00);
IkReal x11136=(gconst4*sj3);
IkReal x11137=(cj3*gconst5);
IkReal x11138=(cj3*gconst4);
IkReal x11139=(gconst4*r21);
IkReal x11140=(cj2*x11132);
IkReal x11141=((1.0)*x11127);
IkReal x11142=((1.0)*x11126);
IkReal x11143=(cj3*x11126);
IkReal x11144=(cj3*x11127);
evalcond[0]=(((x11126*x11139))+(((-1.0)*r22*x11141))+(((-1.0)*gconst5*r20*x11142)));
evalcond[1]=((((-1.0)*x11131*x11142))+((x11126*x11130))+(((-1.0)*r12*x11141)));
evalcond[2]=((-1.0)+(((-1.0)*x11135*x11142))+((x11126*x11133))+(((-1.0)*r02*x11141)));
evalcond[3]=(((x11133*x11144))+((r02*x11143))+(((-1.0)*cj3*x11135*x11141))+((r01*x11129))+((r00*x11136)));
evalcond[4]=((((-1.0)*sj3*x11133*x11141))+((r00*x11127*x11129))+(((-1.0)*r02*sj3*x11142))+((r01*x11137))+((r00*x11138)));
evalcond[5]=((((-1.0)*r20*x11137*x11141))+((r21*x11129))+((r22*x11143))+((cj1*sj2))+x11134+((r20*x11136))+((r21*x11127*x11138)));
evalcond[6]=(x11128+((r10*x11136))+((r11*x11129))+((r12*x11143))+((x11130*x11144))+(((-1.0)*cj3*x11131*x11141))+(((-1.0)*x11140)));
evalcond[7]=(((r21*x11137))+x11128+((r20*x11127*x11129))+((r20*x11138))+(((-1.0)*r22*sj3*x11142))+(((-1.0)*r21*x11136*x11141))+(((-1.0)*x11140)));
evalcond[8]=((((-1.0)*x11134))+(((-1.0)*r12*sj3*x11142))+((r10*x11138))+((r11*x11137))+(((-1.0)*sj2*x11132))+((r10*x11127*x11129))+(((-1.0)*sj3*x11130*x11141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11145 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11145.valid){
continue;
}
CheckValue<IkReal> x11146=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11145.value)+(((1.5707963267949)*(x11146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11147=IKsin(j4);
IkReal x11148=IKcos(j4);
IkReal x11149=(sj1*sj2);
IkReal x11150=(gconst5*sj3);
IkReal x11151=(gconst4*r11);
IkReal x11152=(gconst5*r10);
IkReal x11153=((1.0)*cj1);
IkReal x11154=(gconst4*r01);
IkReal x11155=(cj2*sj1);
IkReal x11156=(gconst5*r00);
IkReal x11157=(gconst4*sj3);
IkReal x11158=(cj3*gconst5);
IkReal x11159=(cj3*gconst4);
IkReal x11160=(gconst4*r21);
IkReal x11161=(cj2*x11153);
IkReal x11162=((1.0)*x11148);
IkReal x11163=((1.0)*x11147);
IkReal x11164=(cj3*x11147);
IkReal x11165=(cj3*x11148);
evalcond[0]=(((x11147*x11160))+(((-1.0)*r22*x11162))+(((-1.0)*gconst5*r20*x11163)));
evalcond[1]=(((x11147*x11151))+(((-1.0)*r12*x11162))+(((-1.0)*x11152*x11163)));
evalcond[2]=((-1.0)+((x11147*x11154))+(((-1.0)*x11156*x11163))+(((-1.0)*r02*x11162)));
evalcond[3]=(((r00*x11157))+((r01*x11150))+(((-1.0)*cj3*x11156*x11162))+((r02*x11164))+((x11154*x11165)));
evalcond[4]=(((r00*x11159))+((r01*x11158))+(((-1.0)*r02*sj3*x11163))+((r00*x11148*x11150))+(((-1.0)*sj3*x11154*x11162)));
evalcond[5]=(((r21*x11150))+((cj1*sj2))+((r21*x11148*x11159))+(((-1.0)*r20*x11158*x11162))+x11155+((r22*x11164))+((r20*x11157)));
evalcond[6]=(((r12*x11164))+(((-1.0)*cj3*x11152*x11162))+(((-1.0)*x11161))+((r11*x11150))+x11149+((r10*x11157))+((x11151*x11165)));
evalcond[7]=(((r21*x11158))+(((-1.0)*x11161))+((r20*x11148*x11150))+x11149+(((-1.0)*r21*x11157*x11162))+((r20*x11159))+(((-1.0)*r22*sj3*x11163)));
evalcond[8]=((((-1.0)*sj3*x11151*x11162))+(((-1.0)*x11155))+((r11*x11158))+((r10*x11159))+(((-1.0)*r12*sj3*x11163))+(((-1.0)*sj2*x11153))+((r10*x11148*x11150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11166=((-1.0)*r21);
CheckValue<IkReal> x11169 = IKatan2WithCheck(IkReal(x11166),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11169.valid){
continue;
}
IkReal x11167=((1.0)*(x11169.value));
IkReal x11168=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11167)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11167)));
IkReal gconst4=(x11166*x11168);
IkReal gconst5=((1.0)*r20*x11168);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11170=((-1.0)*r21);
CheckValue<IkReal> x11173 = IKatan2WithCheck(IkReal(x11170),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11173.valid){
continue;
}
IkReal x11171=((1.0)*(x11173.value));
IkReal x11172=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11171)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11171)));
IkReal gconst4=(x11170*x11172);
IkReal gconst5=((1.0)*r20*x11172);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11174=((-1.0)*r21);
CheckValue<IkReal> x11177 = IKatan2WithCheck(IkReal(x11174),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11177.valid){
continue;
}
IkReal x11175=((1.0)*(x11177.value));
IkReal x11176=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11175)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11175)));
IkReal gconst4=(x11174*x11176);
IkReal gconst5=((1.0)*r20*x11176);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11178=((-1.0)*r21);
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal(x11178),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
IkReal x11179=((1.0)*(x11181.value));
IkReal x11180=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11179)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11179)));
IkReal gconst4=(x11178*x11180);
IkReal gconst5=((1.0)*r20*x11180);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11182=((-1.0)*r21);
CheckValue<IkReal> x11185 = IKatan2WithCheck(IkReal(x11182),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11185.valid){
continue;
}
IkReal x11183=((1.0)*(x11185.value));
IkReal x11184=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11183)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11183)));
IkReal gconst4=(x11182*x11184);
IkReal gconst5=((1.0)*r20*x11184);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11186=((-1.0)*r21);
CheckValue<IkReal> x11189 = IKatan2WithCheck(IkReal(x11186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11189.valid){
continue;
}
IkReal x11187=((1.0)*(x11189.value));
IkReal x11188=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11187)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11187)));
IkReal gconst4=(x11186*x11188);
IkReal gconst5=((1.0)*r20*x11188);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11190=(gconst5*r00);
IkReal x11191=(gconst4*r01);
CheckValue<IkReal> x11192=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11190*x11191))+(x11191*x11191)+(x11190*x11190)+(r02*r02))),-1);
if(!x11192.valid){
continue;
}
CheckValue<IkReal> x11193 = IKatan2WithCheck(IkReal((x11190+(((-1.0)*x11191)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11192.value)))+(x11193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11194=IKsin(j4);
IkReal x11195=IKcos(j4);
IkReal x11196=(gconst4*r11);
IkReal x11197=(gconst5*r10);
IkReal x11198=(gconst4*r01);
IkReal x11199=(gconst5*r00);
IkReal x11200=(gconst4*r21);
IkReal x11201=(gconst5*r20);
IkReal x11202=((1.0)*x11195);
IkReal x11203=((1.0)*x11194);
evalcond[0]=((((-1.0)*r22*x11202))+((x11194*x11200))+(((-1.0)*x11201*x11203)));
evalcond[1]=((((-1.0)*x11197*x11203))+((x11194*x11196))+(((-1.0)*r12*x11202)));
evalcond[2]=((((-1.0)*x11198*x11202))+((x11195*x11199))+(((-1.0)*r02*x11203)));
evalcond[3]=((1.0)+(((-1.0)*x11199*x11203))+((x11194*x11198))+(((-1.0)*r02*x11202)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11196*x11202))+((cj1*sj2))+(((-1.0)*r12*x11203))+((x11195*x11197)));
evalcond[5]=((((-1.0)*r22*x11203))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11195*x11201))+(((-1.0)*x11200*x11202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11204=((1.0)*gconst5);
CheckValue<IkReal> x11205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11204))+(((-1.0)*gconst4*r20)))),-1);
if(!x11205.valid){
continue;
}
CheckValue<IkReal> x11206 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11204))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11205.value)))+(x11206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11207=IKsin(j4);
IkReal x11208=IKcos(j4);
IkReal x11209=(gconst4*r11);
IkReal x11210=(gconst5*r10);
IkReal x11211=(gconst4*r01);
IkReal x11212=(gconst5*r00);
IkReal x11213=(gconst4*r21);
IkReal x11214=(gconst5*r20);
IkReal x11215=((1.0)*x11208);
IkReal x11216=((1.0)*x11207);
evalcond[0]=(((x11207*x11213))+(((-1.0)*x11214*x11216))+(((-1.0)*r22*x11215)));
evalcond[1]=(((x11207*x11209))+(((-1.0)*r12*x11215))+(((-1.0)*x11210*x11216)));
evalcond[2]=(((x11208*x11212))+(((-1.0)*r02*x11216))+(((-1.0)*x11211*x11215)));
evalcond[3]=((1.0)+((x11207*x11211))+(((-1.0)*x11212*x11216))+(((-1.0)*r02*x11215)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11209*x11215))+((cj1*sj2))+(((-1.0)*r12*x11216))+((x11208*x11210)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11208*x11214))+(((-1.0)*x11213*x11215))+(((-1.0)*r22*x11216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11217=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11217.valid){
continue;
}
CheckValue<IkReal> x11218 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11217.value)))+(x11218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11219=IKsin(j4);
IkReal x11220=IKcos(j4);
IkReal x11221=(gconst4*r11);
IkReal x11222=(gconst5*r10);
IkReal x11223=(gconst4*r01);
IkReal x11224=(gconst5*r00);
IkReal x11225=(gconst4*r21);
IkReal x11226=(gconst5*r20);
IkReal x11227=((1.0)*x11220);
IkReal x11228=((1.0)*x11219);
evalcond[0]=(((x11219*x11225))+(((-1.0)*x11226*x11228))+(((-1.0)*r22*x11227)));
evalcond[1]=((((-1.0)*x11222*x11228))+((x11219*x11221))+(((-1.0)*r12*x11227)));
evalcond[2]=(((x11220*x11224))+(((-1.0)*x11223*x11227))+(((-1.0)*r02*x11228)));
evalcond[3]=((1.0)+(((-1.0)*x11224*x11228))+((x11219*x11223))+(((-1.0)*r02*x11227)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11220*x11222))+(((-1.0)*x11221*x11227))+(((-1.0)*r12*x11228)));
evalcond[5]=((((-1.0)*x11225*x11227))+((x11220*x11226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11229=((-1.0)*r21);
CheckValue<IkReal> x11232 = IKatan2WithCheck(IkReal(x11229),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11232.valid){
continue;
}
IkReal x11230=((1.0)*(x11232.value));
IkReal x11231=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11230)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11230)));
IkReal gconst4=(x11229*x11231);
IkReal gconst5=((1.0)*r20*x11231);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11233=((-1.0)*r21);
CheckValue<IkReal> x11236 = IKatan2WithCheck(IkReal(x11233),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11236.valid){
continue;
}
IkReal x11234=((1.0)*(x11236.value));
IkReal x11235=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11234)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11234)));
IkReal gconst4=(x11233*x11235);
IkReal gconst5=((1.0)*r20*x11235);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11237=((-1.0)*r21);
CheckValue<IkReal> x11240 = IKatan2WithCheck(IkReal(x11237),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11240.valid){
continue;
}
IkReal x11238=((1.0)*(x11240.value));
IkReal x11239=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11238)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11238)));
IkReal gconst4=(x11237*x11239);
IkReal gconst5=((1.0)*r20*x11239);
IkReal x11241=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11245=IKPowWithIntegerCheck(x11241,-1);
if(!x11245.valid){
continue;
}
IkReal x11242=x11245.value;
IkReal x11243=((1.0)*x11242);
IkReal x11244=((((-2.0)*r00*r01*r20*r21*x11242))+(((-1.0)*x11243*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11243*(r00*r00)*(r20*r20))));
j4eval[0]=x11244;
j4eval[1]=IKsign(x11244);
j4eval[2]=r02;
j4eval[3]=x11241;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11246=(gconst4*r01);
IkReal x11247=(gconst5*r00);
CheckValue<IkReal> x11248=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11246*x11247))+(((-1.0)*(x11247*x11247)))+(((-1.0)*(x11246*x11246))))),-1);
if(!x11248.valid){
continue;
}
CheckValue<IkReal> x11249 = IKatan2WithCheck(IkReal(((((-1.0)*x11247))+x11246)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11248.value)))+(x11249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11250=IKcos(j4);
IkReal x11251=IKsin(j4);
IkReal x11252=(gconst4*r11);
IkReal x11253=(gconst5*r10);
IkReal x11254=(gconst5*r00);
IkReal x11255=(gconst5*r20);
IkReal x11256=((1.0)*x11250);
IkReal x11257=(gconst4*x11250);
IkReal x11258=((1.0)*x11251);
IkReal x11259=(gconst4*x11251);
evalcond[0]=(((r02*x11251))+((r01*x11257))+(((-1.0)*x11254*x11256)));
evalcond[1]=(((r21*x11259))+(((-1.0)*r22*x11256))+(((-1.0)*x11255*x11258)));
evalcond[2]=((((-1.0)*x11253*x11258))+((x11251*x11252))+(((-1.0)*r12*x11256)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11256))+((r01*x11259))+(((-1.0)*x11254*x11258)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11250*x11252))+((r12*x11251))+(((-1.0)*x11253*x11256)));
evalcond[5]=(((r22*x11251))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11257))+(((-1.0)*x11255*x11256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11260=((1.0)*gconst5);
CheckValue<IkReal> x11261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11260))+(((-1.0)*gconst4*r20)))),-1);
if(!x11261.valid){
continue;
}
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11260))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11261.value)))+(x11262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11263=IKcos(j4);
IkReal x11264=IKsin(j4);
IkReal x11265=(gconst4*r11);
IkReal x11266=(gconst5*r10);
IkReal x11267=(gconst5*r00);
IkReal x11268=(gconst5*r20);
IkReal x11269=((1.0)*x11263);
IkReal x11270=(gconst4*x11263);
IkReal x11271=((1.0)*x11264);
IkReal x11272=(gconst4*x11264);
evalcond[0]=(((r01*x11270))+((r02*x11264))+(((-1.0)*x11267*x11269)));
evalcond[1]=(((r21*x11272))+(((-1.0)*x11268*x11271))+(((-1.0)*r22*x11269)));
evalcond[2]=(((x11264*x11265))+(((-1.0)*r12*x11269))+(((-1.0)*x11266*x11271)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11269))+((r01*x11272))+(((-1.0)*x11267*x11271)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11263*x11265))+(((-1.0)*x11266*x11269))+((r12*x11264)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11264))+((r21*x11270))+(((-1.0)*x11268*x11269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11273=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11273.valid){
continue;
}
CheckValue<IkReal> x11274 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11273.value)))+(x11274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11275=IKcos(j4);
IkReal x11276=IKsin(j4);
IkReal x11277=(gconst4*r11);
IkReal x11278=(gconst5*r10);
IkReal x11279=(gconst5*r00);
IkReal x11280=(gconst5*r20);
IkReal x11281=((1.0)*x11275);
IkReal x11282=(gconst4*x11275);
IkReal x11283=((1.0)*x11276);
IkReal x11284=(gconst4*x11276);
evalcond[0]=((((-1.0)*x11279*x11281))+((r02*x11276))+((r01*x11282)));
evalcond[1]=((((-1.0)*r22*x11281))+((r21*x11284))+(((-1.0)*x11280*x11283)));
evalcond[2]=((((-1.0)*r12*x11281))+(((-1.0)*x11278*x11283))+((x11276*x11277)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11281))+(((-1.0)*x11279*x11283))+((r01*x11284)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11278*x11281))+((r12*x11276))+((cj1*sj2))+((x11275*x11277)));
evalcond[5]=(((r22*x11276))+((r21*x11282))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11280*x11281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11285=((-1.0)*r21);
CheckValue<IkReal> x11288 = IKatan2WithCheck(IkReal(x11285),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11288.valid){
continue;
}
IkReal x11286=((1.0)*(x11288.value));
IkReal x11287=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11286)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11286)));
IkReal gconst4=(x11285*x11287);
IkReal gconst5=((1.0)*r20*x11287);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11289=((-1.0)*r21);
CheckValue<IkReal> x11292 = IKatan2WithCheck(IkReal(x11289),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11292.valid){
continue;
}
IkReal x11290=((1.0)*(x11292.value));
IkReal x11291=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11290)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11290)));
IkReal gconst4=(x11289*x11291);
IkReal gconst5=((1.0)*r20*x11291);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11293=((-1.0)*r21);
CheckValue<IkReal> x11296 = IKatan2WithCheck(IkReal(x11293),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11296.valid){
continue;
}
IkReal x11294=((1.0)*(x11296.value));
IkReal x11295=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11294)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11294)));
IkReal gconst4=(x11293*x11295);
IkReal gconst5=((1.0)*r20*x11295);
IkReal x11297=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11301=IKPowWithIntegerCheck(x11297,-1);
if(!x11301.valid){
continue;
}
IkReal x11298=x11301.value;
IkReal x11299=((1.0)*x11298);
IkReal x11300=((((-1.0)*x11299*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11298))+(((-1.0)*x11299*(r01*r01)*(r21*r21))));
j4eval[0]=x11300;
j4eval[1]=IKsign(x11300);
j4eval[2]=r02;
j4eval[3]=x11297;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11302=(gconst4*r01);
IkReal x11303=(gconst5*r00);
CheckValue<IkReal> x11304 = IKatan2WithCheck(IkReal((x11302+(((-1.0)*x11303)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11304.valid){
continue;
}
CheckValue<IkReal> x11305=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11303*x11303)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11302*x11302)))+(((2.0)*x11302*x11303)))),-1);
if(!x11305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11304.value)+(((1.5707963267949)*(x11305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11306=IKcos(j4);
IkReal x11307=IKsin(j4);
IkReal x11308=(gconst5*r10);
IkReal x11309=(gconst5*r00);
IkReal x11310=(gconst5*r20);
IkReal x11311=((1.0)*x11306);
IkReal x11312=(gconst4*x11307);
IkReal x11313=(gconst4*x11306);
IkReal x11314=((1.0)*x11307);
evalcond[0]=(((r02*x11307))+(((-1.0)*x11309*x11311))+((r01*x11313)));
evalcond[1]=((((-1.0)*r22*x11311))+((r21*x11312))+(((-1.0)*x11310*x11314)));
evalcond[2]=(((r11*x11312))+(((-1.0)*r12*x11311))+(((-1.0)*x11308*x11314)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11311))+(((-1.0)*x11309*x11314))+((r01*x11312)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11313))+(((-1.0)*x11310*x11311))+((r22*x11307)));
evalcond[5]=(((r11*x11313))+(((-1.0)*sj1*sj2))+((r12*x11307))+(((-1.0)*x11308*x11311))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11315=((1.0)*gconst5);
CheckValue<IkReal> x11316 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11316.valid){
continue;
}
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11315))+(((-1.0)*gconst4*r20)))),-1);
if(!x11317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11316.value)+(((1.5707963267949)*(x11317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11318=IKcos(j4);
IkReal x11319=IKsin(j4);
IkReal x11320=(gconst5*r10);
IkReal x11321=(gconst5*r00);
IkReal x11322=(gconst5*r20);
IkReal x11323=((1.0)*x11318);
IkReal x11324=(gconst4*x11319);
IkReal x11325=(gconst4*x11318);
IkReal x11326=((1.0)*x11319);
evalcond[0]=(((r02*x11319))+(((-1.0)*x11321*x11323))+((r01*x11325)));
evalcond[1]=((((-1.0)*r22*x11323))+(((-1.0)*x11322*x11326))+((r21*x11324)));
evalcond[2]=((((-1.0)*r12*x11323))+(((-1.0)*x11320*x11326))+((r11*x11324)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11323))+(((-1.0)*x11321*x11326))+((r01*x11324)));
evalcond[4]=(((cj2*sj1))+((r22*x11319))+(((-1.0)*x11322*x11323))+((cj1*sj2))+((r21*x11325)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11320*x11323))+((r12*x11319))+((r11*x11325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11327.valid){
continue;
}
CheckValue<IkReal> x11328 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11327.value)))+(x11328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11329=IKcos(j4);
IkReal x11330=IKsin(j4);
IkReal x11331=(gconst5*r10);
IkReal x11332=(gconst5*r00);
IkReal x11333=(gconst5*r20);
IkReal x11334=((1.0)*x11329);
IkReal x11335=(gconst4*x11330);
IkReal x11336=(gconst4*x11329);
IkReal x11337=((1.0)*x11330);
evalcond[0]=((((-1.0)*x11332*x11334))+((r01*x11336))+((r02*x11330)));
evalcond[1]=((((-1.0)*x11333*x11337))+(((-1.0)*r22*x11334))+((r21*x11335)));
evalcond[2]=((((-1.0)*r12*x11334))+((r11*x11335))+(((-1.0)*x11331*x11337)));
evalcond[3]=((1.0)+(((-1.0)*x11332*x11337))+((r01*x11335))+(((-1.0)*r02*x11334)));
evalcond[4]=((((-1.0)*x11333*x11334))+((cj2*sj1))+((cj1*sj2))+((r22*x11330))+((r21*x11336)));
evalcond[5]=(((r11*x11336))+((r12*x11330))+(((-1.0)*sj1*sj2))+(((-1.0)*x11331*x11334))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11338=((-1.0)*r21);
CheckValue<IkReal> x11341 = IKatan2WithCheck(IkReal(x11338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11341.valid){
continue;
}
IkReal x11339=((1.0)*(x11341.value));
IkReal x11340=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11339)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11339)));
IkReal gconst4=(x11338*x11340);
IkReal gconst5=((1.0)*r20*x11340);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11342=((-1.0)*r21);
CheckValue<IkReal> x11345 = IKatan2WithCheck(IkReal(x11342),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11345.valid){
continue;
}
IkReal x11343=((1.0)*(x11345.value));
IkReal x11344=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11343)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11343)));
IkReal gconst4=(x11342*x11344);
IkReal gconst5=((1.0)*r20*x11344);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11346=((-1.0)*r21);
CheckValue<IkReal> x11349 = IKatan2WithCheck(IkReal(x11346),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11349.valid){
continue;
}
IkReal x11347=((1.0)*(x11349.value));
IkReal x11348=x10140;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11347)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11347)));
IkReal gconst4=(x11346*x11348);
IkReal gconst5=((1.0)*r20*x11348);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11350=(gconst5*r00);
IkReal x11351=(gconst4*r01);
CheckValue<IkReal> x11352 = IKatan2WithCheck(IkReal((x11350+(((-1.0)*x11351)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11352.valid){
continue;
}
CheckValue<IkReal> x11353=IKPowWithIntegerCheck(IKsign(((x11350*x11350)+(x11351*x11351)+(((-2.0)*x11350*x11351))+(r02*r02))),-1);
if(!x11353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11352.value)+(((1.5707963267949)*(x11353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11354=IKsin(j4);
IkReal x11355=IKcos(j4);
IkReal x11356=(gconst4*r11);
IkReal x11357=(gconst5*r10);
IkReal x11358=(gconst5*r00);
IkReal x11359=(gconst5*r20);
IkReal x11360=((1.0)*x11355);
IkReal x11361=(gconst4*x11354);
IkReal x11362=((1.0)*x11354);
evalcond[0]=(((r21*x11361))+(((-1.0)*r22*x11360))+(((-1.0)*x11359*x11362)));
evalcond[1]=((((-1.0)*x11357*x11362))+((x11354*x11356))+(((-1.0)*r12*x11360)));
evalcond[2]=((((-1.0)*gconst4*r01*x11360))+(((-1.0)*r02*x11362))+((x11355*x11358)));
evalcond[3]=((1.0)+((r01*x11361))+(((-1.0)*r02*x11360))+(((-1.0)*x11358*x11362)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11362))+((cj1*sj2))+((x11355*x11359))+(((-1.0)*gconst4*r21*x11360)));
evalcond[5]=((((-1.0)*x11356*x11360))+(((-1.0)*sj1*sj2))+((x11355*x11357))+(((-1.0)*r12*x11362))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11363=((1.0)*gconst5);
CheckValue<IkReal> x11364 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11363))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11364.valid){
continue;
}
CheckValue<IkReal> x11365=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11363))+(((-1.0)*gconst4*r20)))),-1);
if(!x11365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11364.value)+(((1.5707963267949)*(x11365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11366=IKsin(j4);
IkReal x11367=IKcos(j4);
IkReal x11368=(gconst4*r11);
IkReal x11369=(gconst5*r10);
IkReal x11370=(gconst5*r00);
IkReal x11371=(gconst5*r20);
IkReal x11372=((1.0)*x11367);
IkReal x11373=(gconst4*x11366);
IkReal x11374=((1.0)*x11366);
evalcond[0]=(((r21*x11373))+(((-1.0)*r22*x11372))+(((-1.0)*x11371*x11374)));
evalcond[1]=((((-1.0)*x11369*x11374))+((x11366*x11368))+(((-1.0)*r12*x11372)));
evalcond[2]=((((-1.0)*gconst4*r01*x11372))+(((-1.0)*r02*x11374))+((x11367*x11370)));
evalcond[3]=((1.0)+((r01*x11373))+(((-1.0)*r02*x11372))+(((-1.0)*x11370*x11374)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11374))+((cj1*sj2))+((x11367*x11371))+(((-1.0)*gconst4*r21*x11372)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11368*x11372))+((x11367*x11369))+(((-1.0)*r12*x11374))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11375=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11375.valid){
continue;
}
CheckValue<IkReal> x11376 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11375.value)))+(x11376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11377=IKsin(j4);
IkReal x11378=IKcos(j4);
IkReal x11379=(gconst4*r11);
IkReal x11380=(gconst5*r10);
IkReal x11381=(gconst5*r00);
IkReal x11382=(gconst5*r20);
IkReal x11383=((1.0)*x11378);
IkReal x11384=(gconst4*x11377);
IkReal x11385=((1.0)*x11377);
evalcond[0]=((((-1.0)*x11382*x11385))+(((-1.0)*r22*x11383))+((r21*x11384)));
evalcond[1]=((((-1.0)*x11380*x11385))+((x11377*x11379))+(((-1.0)*r12*x11383)));
evalcond[2]=(((x11378*x11381))+(((-1.0)*r02*x11385))+(((-1.0)*gconst4*r01*x11383)));
evalcond[3]=((1.0)+(((-1.0)*x11381*x11385))+((r01*x11384))+(((-1.0)*r02*x11383)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11383))+((x11378*x11382))+((cj1*sj2))+(((-1.0)*r22*x11385)));
evalcond[5]=(((x11378*x11380))+(((-1.0)*x11379*x11383))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11385))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11386=((-1.0)*r21);
IkReal x11387=((-1.0)*r20);
CheckValue<IkReal> x11389 = IKatan2WithCheck(IkReal(x11386),IkReal(x11387),IKFAST_ATAN2_MAGTHRESH);
if(!x11389.valid){
continue;
}
IkReal x11388=((1.0)*(x11389.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11388)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11387);
rxp0_2=(py*r00);
rxp1_0=(py*x11386);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11388)));
IkReal gconst4=x11386;
IkReal gconst5=((1.0)*r20);
IkReal x11390=((1.0)*r01*r21);
IkReal x11391=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11390))+(((-1.0)*x11391)));
j4eval[1]=((((-1.0)*cj3*x11391))+(((-1.0)*cj3*x11390)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11392=((-1.0)*r21);
IkReal x11393=((-1.0)*r20);
CheckValue<IkReal> x11395 = IKatan2WithCheck(IkReal(x11392),IkReal(x11393),IKFAST_ATAN2_MAGTHRESH);
if(!x11395.valid){
continue;
}
IkReal x11394=((1.0)*(x11395.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11394)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11393);
rxp0_2=(py*r00);
rxp1_0=(py*x11392);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11394)));
IkReal gconst4=x11392;
IkReal gconst5=((1.0)*r20);
IkReal x11396=((1.0)*r01*r21);
IkReal x11397=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11396))+(((-1.0)*x11397)));
j4eval[1]=(((sj3*x11396))+((sj3*x11397)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11398=((-1.0)*r21);
IkReal x11399=((-1.0)*r20);
CheckValue<IkReal> x11401 = IKatan2WithCheck(IkReal(x11398),IkReal(x11399),IKFAST_ATAN2_MAGTHRESH);
if(!x11401.valid){
continue;
}
IkReal x11400=((1.0)*(x11401.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11400)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11399);
rxp0_2=(py*r00);
rxp1_0=(py*x11398);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11400)));
IkReal gconst4=x11398;
IkReal gconst5=((1.0)*r20);
IkReal x11402=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11402))+(((-1.0)*r01*r21*x11402)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11403=((1.0)*gconst5);
CheckValue<IkReal> x11404=IKPowWithIntegerCheck(cj3,-1);
if(!x11404.valid){
continue;
}
CheckValue<IkReal> x11405=IKPowWithIntegerCheck(r12,-1);
if(!x11405.valid){
continue;
}
CheckValue<IkReal> x11406=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11403))+((cj3*gconst4*r01))),-1);
if(!x11406.valid){
continue;
}
if( IKabs(((x11404.value)*(x11405.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11406.value)*(((((-1.0)*r01*sj3*x11403))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11404.value)*(x11405.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11406.value)*(((((-1.0)*r01*sj3*x11403))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11404.value)*(x11405.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11406.value)*(((((-1.0)*r01*sj3*x11403))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11407=IKsin(j4);
IkReal x11408=IKcos(j4);
IkReal x11409=(cj2*sj1);
IkReal x11410=(cj1*sj2);
IkReal x11411=(sj1*sj2);
IkReal x11412=(gconst5*sj3);
IkReal x11413=(gconst5*r00);
IkReal x11414=(cj3*gconst5);
IkReal x11415=(gconst4*sj3);
IkReal x11416=(cj3*gconst4);
IkReal x11417=(cj1*cj2);
IkReal x11418=((1.0)*x11407);
IkReal x11419=(gconst4*x11407);
IkReal x11420=((1.0)*x11408);
IkReal x11421=(x11410+x11409);
IkReal x11422=(x11408*x11412);
IkReal x11423=(x11408*x11416);
evalcond[0]=((-1.0)*r12*x11408);
evalcond[1]=((((-1.0)*gconst5*r20*x11418))+((r21*x11419)));
evalcond[2]=(x11417+(((-1.0)*x11411))+((cj3*r12*x11407)));
evalcond[3]=(x11421+(((-1.0)*r12*sj3*x11418)));
evalcond[4]=((1.0)+(((-1.0)*x11413*x11418))+((r01*x11419)));
evalcond[5]=(((r01*x11412))+((r00*x11415))+((r01*x11423))+(((-1.0)*cj3*x11413*x11420)));
evalcond[6]=(((r01*x11414))+((r00*x11416))+(((-1.0)*r01*x11415*x11420))+((r00*x11422)));
evalcond[7]=(x11421+((r21*x11412))+((r21*x11423))+((r20*x11415))+(((-1.0)*r20*x11414*x11420)));
evalcond[8]=((((-1.0)*r21*x11415*x11420))+((r20*x11422))+x11411+((r21*x11414))+(((-1.0)*x11417))+((r20*x11416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11424=((1.0)*gconst4);
IkReal x11425=(gconst5*r00);
CheckValue<IkReal> x11426=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11425))),-1);
if(!x11426.valid){
continue;
}
CheckValue<IkReal> x11427=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11424))+((sj3*x11425))),-1);
if(!x11427.valid){
continue;
}
if( IKabs(((-1.0)*(x11426.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11427.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11424)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11426.value)))+IKsqr(((x11427.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11424))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11426.value)), ((x11427.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11424))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11428=IKsin(j4);
IkReal x11429=IKcos(j4);
IkReal x11430=(cj2*sj1);
IkReal x11431=(cj1*sj2);
IkReal x11432=(sj1*sj2);
IkReal x11433=(gconst5*sj3);
IkReal x11434=(gconst5*r00);
IkReal x11435=(cj3*gconst5);
IkReal x11436=(gconst4*sj3);
IkReal x11437=(cj3*gconst4);
IkReal x11438=(cj1*cj2);
IkReal x11439=((1.0)*x11428);
IkReal x11440=(gconst4*x11428);
IkReal x11441=((1.0)*x11429);
IkReal x11442=(x11430+x11431);
IkReal x11443=(x11429*x11433);
IkReal x11444=(x11429*x11437);
evalcond[0]=((-1.0)*r12*x11429);
evalcond[1]=((((-1.0)*gconst5*r20*x11439))+((r21*x11440)));
evalcond[2]=(x11438+((cj3*r12*x11428))+(((-1.0)*x11432)));
evalcond[3]=(x11442+(((-1.0)*r12*sj3*x11439)));
evalcond[4]=((1.0)+(((-1.0)*x11434*x11439))+((r01*x11440)));
evalcond[5]=((((-1.0)*cj3*x11434*x11441))+((r01*x11433))+((r00*x11436))+((r01*x11444)));
evalcond[6]=(((r00*x11443))+(((-1.0)*r01*x11436*x11441))+((r01*x11435))+((r00*x11437)));
evalcond[7]=(((r20*x11436))+x11442+(((-1.0)*r20*x11435*x11441))+((r21*x11433))+((r21*x11444)));
evalcond[8]=(((r20*x11437))+x11432+((r21*x11435))+(((-1.0)*x11438))+((r20*x11443))+(((-1.0)*r21*x11436*x11441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11445=((1.0)*gconst5);
IkReal x11446=(gconst4*r01);
CheckValue<IkReal> x11447=IKPowWithIntegerCheck((x11446+(((-1.0)*r00*x11445))),-1);
if(!x11447.valid){
continue;
}
CheckValue<IkReal> x11448=IKPowWithIntegerCheck((((cj3*x11446))+(((-1.0)*cj3*r00*x11445))),-1);
if(!x11448.valid){
continue;
}
if( IKabs(((-1.0)*(x11447.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11448.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*r01*sj3*x11445)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11447.value)))+IKsqr(((x11448.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*r01*sj3*x11445))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11447.value)), ((x11448.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*r01*sj3*x11445))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11449=IKsin(j4);
IkReal x11450=IKcos(j4);
IkReal x11451=(cj2*sj1);
IkReal x11452=(cj1*sj2);
IkReal x11453=(sj1*sj2);
IkReal x11454=(gconst5*sj3);
IkReal x11455=(gconst5*r00);
IkReal x11456=(cj3*gconst5);
IkReal x11457=(gconst4*sj3);
IkReal x11458=(cj3*gconst4);
IkReal x11459=(cj1*cj2);
IkReal x11460=((1.0)*x11449);
IkReal x11461=(gconst4*x11449);
IkReal x11462=((1.0)*x11450);
IkReal x11463=(x11452+x11451);
IkReal x11464=(x11450*x11454);
IkReal x11465=(x11450*x11458);
evalcond[0]=((-1.0)*r12*x11450);
evalcond[1]=((((-1.0)*gconst5*r20*x11460))+((r21*x11461)));
evalcond[2]=(((cj3*r12*x11449))+x11459+(((-1.0)*x11453)));
evalcond[3]=(x11463+(((-1.0)*r12*sj3*x11460)));
evalcond[4]=((1.0)+(((-1.0)*x11455*x11460))+((r01*x11461)));
evalcond[5]=(((r01*x11465))+(((-1.0)*cj3*x11455*x11462))+((r01*x11454))+((r00*x11457)));
evalcond[6]=((((-1.0)*r01*x11457*x11462))+((r01*x11456))+((r00*x11458))+((r00*x11464)));
evalcond[7]=(x11463+((r20*x11457))+((r21*x11454))+(((-1.0)*r20*x11456*x11462))+((r21*x11465)));
evalcond[8]=(x11453+(((-1.0)*r21*x11457*x11462))+((r20*x11458))+((r21*x11456))+(((-1.0)*x11459))+((r20*x11464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11466=gconst4*gconst4;
IkReal x11467=gconst5*gconst5;
IkReal x11468=(r01*r20);
IkReal x11469=(gconst4*sj3);
IkReal x11470=(r01*r21);
IkReal x11471=((1.0)*cj3);
IkReal x11472=(r00*r21);
IkReal x11473=(r00*r20);
IkReal x11474=(cj3*gconst4*gconst5);
IkReal x11475=((1.0)*x11467);
CheckValue<IkReal> x11476=IKPowWithIntegerCheck(IKsign((((x11468*x11474))+((x11472*x11474))+(((-1.0)*x11467*x11471*x11473))+(((-1.0)*r02*r22*x11471))+(((-1.0)*x11466*x11470*x11471)))),-1);
if(!x11476.valid){
continue;
}
CheckValue<IkReal> x11477 = IKatan2WithCheck(IkReal((((r00*r22*x11469))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11469*x11473))+((sj3*x11466*x11472))+(((-1.0)*sj3*x11468*x11475))+((gconst5*x11469*x11470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11476.value)))+(x11477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11478=IKsin(j4);
IkReal x11479=IKcos(j4);
IkReal x11480=(cj2*sj1);
IkReal x11481=(cj1*sj2);
IkReal x11482=(gconst5*sj3);
IkReal x11483=(gconst4*r11);
IkReal x11484=(sj1*sj2);
IkReal x11485=(gconst5*r10);
IkReal x11486=(cj1*cj2);
IkReal x11487=(gconst4*r01);
IkReal x11488=(gconst5*r00);
IkReal x11489=(gconst4*sj3);
IkReal x11490=(cj3*gconst5);
IkReal x11491=(cj3*gconst4);
IkReal x11492=(gconst4*r21);
IkReal x11493=((1.0)*x11479);
IkReal x11494=((1.0)*x11478);
IkReal x11495=(cj3*x11478);
IkReal x11496=(cj3*x11479);
IkReal x11497=(x11481+x11480);
evalcond[0]=(((x11478*x11492))+(((-1.0)*gconst5*r20*x11494))+(((-1.0)*r22*x11493)));
evalcond[1]=((((-1.0)*x11485*x11494))+((x11478*x11483))+(((-1.0)*r12*x11493)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11493))+(((-1.0)*x11488*x11494))+((x11478*x11487)));
evalcond[3]=((((-1.0)*cj3*x11488*x11493))+((r02*x11495))+((r00*x11489))+((r01*x11482))+((x11487*x11496)));
evalcond[4]=(((r00*x11491))+((r00*x11479*x11482))+(((-1.0)*r02*sj3*x11494))+(((-1.0)*sj3*x11487*x11493))+((r01*x11490)));
evalcond[5]=(((r22*x11495))+((r20*x11489))+x11497+(((-1.0)*r20*x11490*x11493))+((r21*x11479*x11491))+((r21*x11482)));
evalcond[6]=(((x11483*x11496))+x11486+(((-1.0)*x11484))+(((-1.0)*cj3*x11485*x11493))+((r12*x11495))+((r11*x11482))+((r10*x11489)));
evalcond[7]=(x11497+(((-1.0)*sj3*x11483*x11493))+((r11*x11490))+((r10*x11491))+(((-1.0)*r12*sj3*x11494))+((r10*x11479*x11482)));
evalcond[8]=(x11484+((r21*x11490))+(((-1.0)*r22*sj3*x11494))+(((-1.0)*x11486))+((r20*x11491))+(((-1.0)*r21*x11489*x11493))+((r20*x11479*x11482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11498=((1.0)*gconst5);
CheckValue<IkReal> x11499 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11498))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11499.valid){
continue;
}
CheckValue<IkReal> x11500=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x11498)))),-1);
if(!x11500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11499.value)+(((1.5707963267949)*(x11500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11501=IKsin(j4);
IkReal x11502=IKcos(j4);
IkReal x11503=(cj2*sj1);
IkReal x11504=(cj1*sj2);
IkReal x11505=(gconst5*sj3);
IkReal x11506=(gconst4*r11);
IkReal x11507=(sj1*sj2);
IkReal x11508=(gconst5*r10);
IkReal x11509=(cj1*cj2);
IkReal x11510=(gconst4*r01);
IkReal x11511=(gconst5*r00);
IkReal x11512=(gconst4*sj3);
IkReal x11513=(cj3*gconst5);
IkReal x11514=(cj3*gconst4);
IkReal x11515=(gconst4*r21);
IkReal x11516=((1.0)*x11502);
IkReal x11517=((1.0)*x11501);
IkReal x11518=(cj3*x11501);
IkReal x11519=(cj3*x11502);
IkReal x11520=(x11504+x11503);
evalcond[0]=((((-1.0)*r22*x11516))+((x11501*x11515))+(((-1.0)*gconst5*r20*x11517)));
evalcond[1]=(((x11501*x11506))+(((-1.0)*x11508*x11517))+(((-1.0)*r12*x11516)));
evalcond[2]=((1.0)+(((-1.0)*x11511*x11517))+(((-1.0)*r02*x11516))+((x11501*x11510)));
evalcond[3]=(((x11510*x11519))+(((-1.0)*cj3*x11511*x11516))+((r01*x11505))+((r02*x11518))+((r00*x11512)));
evalcond[4]=(((r01*x11513))+(((-1.0)*sj3*x11510*x11516))+((r00*x11502*x11505))+(((-1.0)*r02*sj3*x11517))+((r00*x11514)));
evalcond[5]=(x11520+((r20*x11512))+((r21*x11505))+((r22*x11518))+((r21*x11502*x11514))+(((-1.0)*r20*x11513*x11516)));
evalcond[6]=(x11509+(((-1.0)*cj3*x11508*x11516))+((r11*x11505))+((x11506*x11519))+(((-1.0)*x11507))+((r12*x11518))+((r10*x11512)));
evalcond[7]=((((-1.0)*sj3*x11506*x11516))+x11520+(((-1.0)*r12*sj3*x11517))+((r10*x11502*x11505))+((r10*x11514))+((r11*x11513)));
evalcond[8]=(x11507+((r20*x11514))+(((-1.0)*r21*x11512*x11516))+(((-1.0)*r22*sj3*x11517))+(((-1.0)*x11509))+((r20*x11502*x11505))+((r21*x11513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11521=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11521.valid){
continue;
}
CheckValue<IkReal> x11522 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11521.value)))+(x11522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11523=IKsin(j4);
IkReal x11524=IKcos(j4);
IkReal x11525=(cj2*sj1);
IkReal x11526=(cj1*sj2);
IkReal x11527=(gconst5*sj3);
IkReal x11528=(gconst4*r11);
IkReal x11529=(sj1*sj2);
IkReal x11530=(gconst5*r10);
IkReal x11531=(cj1*cj2);
IkReal x11532=(gconst4*r01);
IkReal x11533=(gconst5*r00);
IkReal x11534=(gconst4*sj3);
IkReal x11535=(cj3*gconst5);
IkReal x11536=(cj3*gconst4);
IkReal x11537=(gconst4*r21);
IkReal x11538=((1.0)*x11524);
IkReal x11539=((1.0)*x11523);
IkReal x11540=(cj3*x11523);
IkReal x11541=(cj3*x11524);
IkReal x11542=(x11526+x11525);
evalcond[0]=((((-1.0)*gconst5*r20*x11539))+(((-1.0)*r22*x11538))+((x11523*x11537)));
evalcond[1]=((((-1.0)*r12*x11538))+(((-1.0)*x11530*x11539))+((x11523*x11528)));
evalcond[2]=((1.0)+(((-1.0)*x11533*x11539))+((x11523*x11532))+(((-1.0)*r02*x11538)));
evalcond[3]=(((x11532*x11541))+((r00*x11534))+((r01*x11527))+(((-1.0)*cj3*x11533*x11538))+((r02*x11540)));
evalcond[4]=((((-1.0)*sj3*x11532*x11538))+((r00*x11524*x11527))+(((-1.0)*r02*sj3*x11539))+((r01*x11535))+((r00*x11536)));
evalcond[5]=(x11542+((r21*x11527))+((r20*x11534))+((r22*x11540))+(((-1.0)*r20*x11535*x11538))+((r21*x11524*x11536)));
evalcond[6]=(x11531+((r11*x11527))+(((-1.0)*cj3*x11530*x11538))+((r10*x11534))+((r12*x11540))+((x11528*x11541))+(((-1.0)*x11529)));
evalcond[7]=(((r10*x11524*x11527))+(((-1.0)*r12*sj3*x11539))+x11542+(((-1.0)*sj3*x11528*x11538))+((r11*x11535))+((r10*x11536)));
evalcond[8]=(x11529+((r20*x11524*x11527))+((r21*x11535))+((r20*x11536))+(((-1.0)*r22*sj3*x11539))+(((-1.0)*x11531))+(((-1.0)*r21*x11534*x11538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11543=((-1.0)*r21);
IkReal x11544=((-1.0)*px);
CheckValue<IkReal> x11546 = IKatan2WithCheck(IkReal(x11543),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11546.valid){
continue;
}
IkReal x11545=((1.0)*(x11546.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11545)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11544);
rxp1_1=(px*r21);
rxp1_2=(r11*x11544);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11545)));
IkReal gconst4=x11543;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11547=((-1.0)*r21);
IkReal x11548=((-1.0)*px);
CheckValue<IkReal> x11550 = IKatan2WithCheck(IkReal(x11547),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11550.valid){
continue;
}
IkReal x11549=((1.0)*(x11550.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11549)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11548);
rxp1_1=(px*r21);
rxp1_2=(r11*x11548);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11549)));
IkReal gconst4=x11547;
IkReal gconst5=((1.0)*r20);
IkReal x11551=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11551*(r10*r10)))+(((-1.0)*x11551))+(((-1.0)*x11551*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11552=((-1.0)*r21);
IkReal x11553=((-1.0)*px);
CheckValue<IkReal> x11555 = IKatan2WithCheck(IkReal(x11552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11555.valid){
continue;
}
IkReal x11554=((1.0)*(x11555.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11554)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11553);
rxp1_1=(px*r21);
rxp1_2=(r11*x11553);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11554)));
IkReal gconst4=x11552;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11556=((-1.0)*r21);
IkReal x11557=((-1.0)*px);
CheckValue<IkReal> x11559 = IKatan2WithCheck(IkReal(x11556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11559.valid){
continue;
}
IkReal x11558=((1.0)*(x11559.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11558)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11557);
rxp1_1=(px*r21);
rxp1_2=(r11*x11557);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11558)));
IkReal gconst4=x11556;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11560=((-1.0)*r21);
IkReal x11561=((-1.0)*px);
CheckValue<IkReal> x11563 = IKatan2WithCheck(IkReal(x11560),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11563.valid){
continue;
}
IkReal x11562=((1.0)*(x11563.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11562)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11561);
rxp1_1=(px*r21);
rxp1_2=(r11*x11561);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11562)));
IkReal gconst4=x11560;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11564=((-1.0)*r21);
IkReal x11565=((-1.0)*px);
CheckValue<IkReal> x11567 = IKatan2WithCheck(IkReal(x11564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11567.valid){
continue;
}
IkReal x11566=((1.0)*(x11567.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11566)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11565);
rxp1_1=(px*r21);
rxp1_2=(r11*x11565);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11566)));
IkReal gconst4=x11564;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11570=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11570.valid){
continue;
}
IkReal x11568=x11570.value;
IkReal x11569=(sj0*x11568);
cj4array[0]=(((cj1*sj2*x11569))+((cj2*sj1*x11569)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11571=IKsin(j4);
IkReal x11572=IKcos(j4);
IkReal x11573=(gconst5*r20);
IkReal x11574=(gconst4*x11571);
IkReal x11575=((1.0)*x11572);
IkReal x11576=((1.0)*x11571);
evalcond[0]=((-1.0)*r02*x11571);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11575)));
evalcond[2]=((((-1.0)*x11573*x11576))+((r21*x11574)));
evalcond[3]=((((-1.0)*gconst5*r10*x11576))+((r11*x11574)));
evalcond[4]=((((-1.0)*gconst4*r21*x11575))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11572*x11573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11578=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11578.valid){
continue;
}
IkReal x11577=x11578.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11577))+((cj1*cj2*x11577)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11579=IKsin(j4);
IkReal x11580=IKcos(j4);
IkReal x11581=(gconst5*r10);
IkReal x11582=((1.0)*sj0);
IkReal x11583=(gconst4*x11579);
IkReal x11584=((1.0)*x11580);
IkReal x11585=((1.0)*x11579);
evalcond[0]=((-1.0)*r02*x11579);
evalcond[1]=((((-1.0)*x11582))+(((-1.0)*r02*x11584)));
evalcond[2]=((((-1.0)*gconst5*r20*x11585))+((r21*x11583)));
evalcond[3]=((((-1.0)*x11581*x11585))+((r11*x11583)));
evalcond[4]=((((-1.0)*gconst4*r11*x11584))+(((-1.0)*cj2*sj1*x11582))+(((-1.0)*cj1*sj2*x11582))+((x11580*x11581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11586=IKPowWithIntegerCheck(r02,-1);
if(!x11586.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11586.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11587=IKsin(j4);
IkReal x11588=IKcos(j4);
IkReal x11589=((1.0)*sj0);
IkReal x11590=(gconst5*x11588);
IkReal x11591=(gconst4*x11587);
IkReal x11592=((1.0)*gconst4*x11588);
IkReal x11593=((1.0)*gconst5*x11587);
evalcond[0]=((-1.0)*r02*x11587);
evalcond[1]=(((r21*x11591))+(((-1.0)*r20*x11593)));
evalcond[2]=(((r11*x11591))+(((-1.0)*r10*x11593)));
evalcond[3]=(((r20*x11590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11592)));
evalcond[4]=((((-1.0)*cj2*sj1*x11589))+((r10*x11590))+(((-1.0)*cj1*sj2*x11589))+(((-1.0)*r11*x11592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11594=((-1.0)*r21);
IkReal x11595=((-1.0)*px);
CheckValue<IkReal> x11597 = IKatan2WithCheck(IkReal(x11594),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11597.valid){
continue;
}
IkReal x11596=((1.0)*(x11597.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11596)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11595);
rxp1_1=(px*r21);
rxp1_2=(r11*x11595);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11596)));
IkReal gconst4=x11594;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11598=((-1.0)*r21);
IkReal x11599=((-1.0)*px);
CheckValue<IkReal> x11601 = IKatan2WithCheck(IkReal(x11598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11601.valid){
continue;
}
IkReal x11600=((1.0)*(x11601.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11600)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11599);
rxp1_1=(px*r21);
rxp1_2=(r11*x11599);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11600)));
IkReal gconst4=x11598;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11602=((-1.0)*r21);
IkReal x11603=((-1.0)*px);
CheckValue<IkReal> x11605 = IKatan2WithCheck(IkReal(x11602),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11605.valid){
continue;
}
IkReal x11604=((1.0)*(x11605.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11604)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11603);
rxp1_1=(px*r21);
rxp1_2=(r11*x11603);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11604)));
IkReal gconst4=x11602;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11608=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11608.valid){
continue;
}
IkReal x11606=x11608.value;
IkReal x11607=(sj0*x11606);
cj4array[0]=(((cj2*sj1*x11607))+((cj1*sj2*x11607)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11609=IKsin(j4);
IkReal x11610=IKcos(j4);
IkReal x11611=(gconst5*r20);
IkReal x11612=(gconst4*x11609);
IkReal x11613=((1.0)*x11610);
IkReal x11614=((1.0)*x11609);
evalcond[0]=(r02*x11609);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11613)));
evalcond[2]=(((r21*x11612))+(((-1.0)*x11611*x11614)));
evalcond[3]=(((r11*x11612))+(((-1.0)*gconst5*r10*x11614)));
evalcond[4]=(((gconst4*r21*x11610))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11611*x11613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11616=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11616.valid){
continue;
}
IkReal x11615=x11616.value;
cj4array[0]=(((cj1*cj2*x11615))+(((-1.0)*sj1*sj2*x11615)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11617=IKsin(j4);
IkReal x11618=IKcos(j4);
IkReal x11619=(gconst4*r11);
IkReal x11620=((1.0)*sj0);
IkReal x11621=(gconst5*r10);
IkReal x11622=((1.0)*x11618);
IkReal x11623=((1.0)*x11617);
evalcond[0]=(r02*x11617);
evalcond[1]=((((-1.0)*x11620))+(((-1.0)*r02*x11622)));
evalcond[2]=(((gconst4*r21*x11617))+(((-1.0)*gconst5*r20*x11623)));
evalcond[3]=(((x11617*x11619))+(((-1.0)*x11621*x11623)));
evalcond[4]=((((-1.0)*x11621*x11622))+((x11618*x11619))+(((-1.0)*cj1*sj2*x11620))+(((-1.0)*cj2*sj1*x11620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11624=IKPowWithIntegerCheck(r02,-1);
if(!x11624.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11624.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11625=IKsin(j4);
IkReal x11626=IKcos(j4);
IkReal x11627=(gconst4*r11);
IkReal x11628=((1.0)*cj1);
IkReal x11629=(gconst4*r21);
IkReal x11630=((1.0)*gconst5*x11626);
IkReal x11631=((1.0)*gconst5*x11625);
evalcond[0]=(r02*x11625);
evalcond[1]=(((x11625*x11629))+(((-1.0)*r20*x11631)));
evalcond[2]=(((x11625*x11627))+(((-1.0)*r10*x11631)));
evalcond[3]=((((-1.0)*cj2*x11628))+((sj1*sj2))+((x11626*x11629))+(((-1.0)*r20*x11630)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11630))+((x11626*x11627))+(((-1.0)*sj0*sj2*x11628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11633=IKPowWithIntegerCheck(r02,-1);
if(!x11633.valid){
continue;
}
IkReal x11632=x11633.value;
CheckValue<IkReal> x11634=IKPowWithIntegerCheck(cj3,-1);
if(!x11634.valid){
continue;
}
if( IKabs((x11632*(x11634.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11632)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11632*(x11634.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11632))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11632*(x11634.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11632));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11635=IKsin(j4);
IkReal x11636=IKcos(j4);
IkReal x11637=(gconst5*sj3);
IkReal x11638=(gconst4*r11);
IkReal x11639=(sj1*sj2);
IkReal x11640=((1.0)*gconst5);
IkReal x11641=(cj2*sj1);
IkReal x11642=((1.0)*sj0);
IkReal x11643=((1.0)*cj0);
IkReal x11644=(gconst4*r21);
IkReal x11645=(cj1*sj2);
IkReal x11646=(cj3*gconst4);
IkReal x11647=(gconst4*sj3);
IkReal x11648=(cj3*gconst5);
IkReal x11649=(r20*x11636);
IkReal x11650=((1.0)*cj1*cj2);
IkReal x11651=(r10*x11636);
IkReal x11652=(cj3*x11636);
IkReal x11653=(r02*x11635);
IkReal x11654=((1.0)*sj3*x11636);
evalcond[0]=((((-1.0)*r02*x11636))+(((-1.0)*x11642)));
evalcond[1]=(((x11635*x11644))+(((-1.0)*r20*x11635*x11640)));
evalcond[2]=((((-1.0)*r10*x11635*x11640))+((x11635*x11638))+cj0);
evalcond[3]=((((-1.0)*cj1*cj2*x11643))+((cj3*x11653))+((cj0*x11639)));
evalcond[4]=((((-1.0)*sj3*x11653))+(((-1.0)*x11641*x11643))+(((-1.0)*x11643*x11645)));
evalcond[5]=(x11641+x11645+((x11644*x11652))+((r21*x11637))+((r20*x11647))+(((-1.0)*cj3*x11640*x11649)));
evalcond[6]=((((-1.0)*x11650))+x11639+((x11637*x11649))+((r21*x11648))+((r20*x11646))+(((-1.0)*x11644*x11654)));
evalcond[7]=((((-1.0)*cj3*x11640*x11651))+((r11*x11637))+(((-1.0)*cj1*cj2*x11642))+((r10*x11647))+((sj0*x11639))+((x11638*x11652)));
evalcond[8]=(((r11*x11648))+(((-1.0)*x11641*x11642))+((r10*x11646))+((x11637*x11651))+(((-1.0)*x11642*x11645))+(((-1.0)*x11638*x11654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11655=((1.0)*gconst5);
CheckValue<IkReal> x11656=IKPowWithIntegerCheck(((((-1.0)*r10*x11655))+((gconst4*r11))),-1);
if(!x11656.valid){
continue;
}
CheckValue<IkReal> x11657=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11655))+((cj3*gconst4*r21))),-1);
if(!x11657.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11656.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11657.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11655))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11656.value)))+IKsqr(((x11657.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11655))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11656.value)), ((x11657.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11655))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11658=IKsin(j4);
IkReal x11659=IKcos(j4);
IkReal x11660=(gconst5*sj3);
IkReal x11661=(gconst4*r11);
IkReal x11662=(sj1*sj2);
IkReal x11663=((1.0)*gconst5);
IkReal x11664=(cj2*sj1);
IkReal x11665=((1.0)*sj0);
IkReal x11666=((1.0)*cj0);
IkReal x11667=(gconst4*r21);
IkReal x11668=(cj1*sj2);
IkReal x11669=(cj3*gconst4);
IkReal x11670=(gconst4*sj3);
IkReal x11671=(cj3*gconst5);
IkReal x11672=(r20*x11659);
IkReal x11673=((1.0)*cj1*cj2);
IkReal x11674=(r10*x11659);
IkReal x11675=(cj3*x11659);
IkReal x11676=(r02*x11658);
IkReal x11677=((1.0)*sj3*x11659);
evalcond[0]=((((-1.0)*x11665))+(((-1.0)*r02*x11659)));
evalcond[1]=(((x11658*x11667))+(((-1.0)*r20*x11658*x11663)));
evalcond[2]=(cj0+((x11658*x11661))+(((-1.0)*r10*x11658*x11663)));
evalcond[3]=(((cj0*x11662))+((cj3*x11676))+(((-1.0)*cj1*cj2*x11666)));
evalcond[4]=((((-1.0)*x11666*x11668))+(((-1.0)*sj3*x11676))+(((-1.0)*x11664*x11666)));
evalcond[5]=(((r21*x11660))+(((-1.0)*cj3*x11663*x11672))+x11664+x11668+((r20*x11670))+((x11667*x11675)));
evalcond[6]=(x11662+((r20*x11669))+(((-1.0)*x11667*x11677))+((x11660*x11672))+((r21*x11671))+(((-1.0)*x11673)));
evalcond[7]=((((-1.0)*cj3*x11663*x11674))+((x11661*x11675))+((r11*x11660))+((r10*x11670))+(((-1.0)*cj1*cj2*x11665))+((sj0*x11662)));
evalcond[8]=((((-1.0)*x11664*x11665))+((r11*x11671))+((x11660*x11674))+(((-1.0)*x11665*x11668))+((r10*x11669))+(((-1.0)*x11661*x11677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11678=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11678.valid){
continue;
}
CheckValue<IkReal> x11679=IKPowWithIntegerCheck(r02,-1);
if(!x11679.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11678.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11679.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11678.value)))+IKsqr(((-1.0)*sj0*(x11679.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11678.value)), ((-1.0)*sj0*(x11679.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11680=IKsin(j4);
IkReal x11681=IKcos(j4);
IkReal x11682=(gconst5*sj3);
IkReal x11683=(gconst4*r11);
IkReal x11684=(sj1*sj2);
IkReal x11685=((1.0)*gconst5);
IkReal x11686=(cj2*sj1);
IkReal x11687=((1.0)*sj0);
IkReal x11688=((1.0)*cj0);
IkReal x11689=(gconst4*r21);
IkReal x11690=(cj1*sj2);
IkReal x11691=(cj3*gconst4);
IkReal x11692=(gconst4*sj3);
IkReal x11693=(cj3*gconst5);
IkReal x11694=(r20*x11681);
IkReal x11695=((1.0)*cj1*cj2);
IkReal x11696=(r10*x11681);
IkReal x11697=(cj3*x11681);
IkReal x11698=(r02*x11680);
IkReal x11699=((1.0)*sj3*x11681);
evalcond[0]=((((-1.0)*r02*x11681))+(((-1.0)*x11687)));
evalcond[1]=(((x11680*x11689))+(((-1.0)*r20*x11680*x11685)));
evalcond[2]=(cj0+((x11680*x11683))+(((-1.0)*r10*x11680*x11685)));
evalcond[3]=(((cj0*x11684))+(((-1.0)*cj1*cj2*x11688))+((cj3*x11698)));
evalcond[4]=((((-1.0)*sj3*x11698))+(((-1.0)*x11688*x11690))+(((-1.0)*x11686*x11688)));
evalcond[5]=(x11686+x11690+((x11689*x11697))+((r20*x11692))+((r21*x11682))+(((-1.0)*cj3*x11685*x11694)));
evalcond[6]=((((-1.0)*x11689*x11699))+x11684+((r20*x11691))+((x11682*x11694))+(((-1.0)*x11695))+((r21*x11693)));
evalcond[7]=(((sj0*x11684))+((r11*x11682))+((x11683*x11697))+((r10*x11692))+(((-1.0)*cj1*cj2*x11687))+(((-1.0)*cj3*x11685*x11696)));
evalcond[8]=((((-1.0)*x11687*x11690))+(((-1.0)*x11686*x11687))+((x11682*x11696))+(((-1.0)*x11683*x11699))+((r10*x11691))+((r11*x11693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11700=((1.0)*sj0);
IkReal x11701=((1.0)*gconst4);
CheckValue<IkReal> x11702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11701))+(((-1.0)*gconst5*r21)))),-1);
if(!x11702.valid){
continue;
}
CheckValue<IkReal> x11703 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11700)))),IkReal(((((-1.0)*cj0*r01*x11701))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*gconst4*r11*x11700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11702.value)))+(x11703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11704=IKsin(j4);
IkReal x11705=IKcos(j4);
IkReal x11706=(gconst5*sj3);
IkReal x11707=(cj3*gconst5);
IkReal x11708=(gconst4*r11);
IkReal x11709=(sj1*sj2);
IkReal x11710=(cj2*sj1);
IkReal x11711=((1.0)*sj0);
IkReal x11712=(gconst4*r01);
IkReal x11713=(gconst4*r21);
IkReal x11714=((1.0)*cj0);
IkReal x11715=(cj1*sj2);
IkReal x11716=(gconst4*sj3);
IkReal x11717=(cj3*gconst4);
IkReal x11718=((1.0)*x11705);
IkReal x11719=((1.0)*cj1*cj2);
IkReal x11720=(cj3*x11704);
IkReal x11721=(cj3*x11705);
IkReal x11722=((1.0)*gconst5*x11704);
IkReal x11723=((1.0)*sj3*x11704);
evalcond[0]=(((x11704*x11713))+(((-1.0)*r20*x11722))+(((-1.0)*r22*x11718)));
evalcond[1]=(cj0+((x11704*x11708))+(((-1.0)*r10*x11722))+(((-1.0)*r12*x11718)));
evalcond[2]=((((-1.0)*x11711))+((x11704*x11712))+(((-1.0)*r00*x11722))+(((-1.0)*r02*x11718)));
evalcond[3]=(x11710+x11715+(((-1.0)*r20*x11707*x11718))+((r21*x11706))+((r20*x11716))+((x11713*x11721))+((r22*x11720)));
evalcond[4]=(x11709+(((-1.0)*x11719))+((r20*x11705*x11706))+((r21*x11707))+((r20*x11717))+(((-1.0)*r22*x11723))+(((-1.0)*sj3*x11713*x11718)));
evalcond[5]=(((r00*x11716))+(((-1.0)*r00*x11707*x11718))+((r01*x11706))+((x11712*x11721))+((r02*x11720))+((cj0*x11709))+(((-1.0)*cj1*cj2*x11714)));
evalcond[6]=(((x11708*x11721))+((r12*x11720))+(((-1.0)*cj1*cj2*x11711))+(((-1.0)*r10*x11707*x11718))+((r10*x11716))+((sj0*x11709))+((r11*x11706)));
evalcond[7]=(((r00*x11705*x11706))+((r00*x11717))+((r01*x11707))+(((-1.0)*x11710*x11714))+(((-1.0)*r02*x11723))+(((-1.0)*sj3*x11712*x11718))+(((-1.0)*x11714*x11715)));
evalcond[8]=((((-1.0)*r12*x11723))+(((-1.0)*x11710*x11711))+((r10*x11717))+(((-1.0)*x11711*x11715))+(((-1.0)*sj3*x11708*x11718))+((r11*x11707))+((r10*x11705*x11706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11724=((1.0)*gconst5);
CheckValue<IkReal> x11725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11724))+(((-1.0)*gconst4*r10)))),-1);
if(!x11725.valid){
continue;
}
CheckValue<IkReal> x11726 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11724))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11725.value)))+(x11726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11727=IKsin(j4);
IkReal x11728=IKcos(j4);
IkReal x11729=(gconst5*sj3);
IkReal x11730=(cj3*gconst5);
IkReal x11731=(gconst4*r11);
IkReal x11732=(sj1*sj2);
IkReal x11733=(cj2*sj1);
IkReal x11734=((1.0)*sj0);
IkReal x11735=(gconst4*r01);
IkReal x11736=(gconst4*r21);
IkReal x11737=((1.0)*cj0);
IkReal x11738=(cj1*sj2);
IkReal x11739=(gconst4*sj3);
IkReal x11740=(cj3*gconst4);
IkReal x11741=((1.0)*x11728);
IkReal x11742=((1.0)*cj1*cj2);
IkReal x11743=(cj3*x11727);
IkReal x11744=(cj3*x11728);
IkReal x11745=((1.0)*gconst5*x11727);
IkReal x11746=((1.0)*sj3*x11727);
evalcond[0]=((((-1.0)*r20*x11745))+((x11727*x11736))+(((-1.0)*r22*x11741)));
evalcond[1]=(((x11727*x11731))+cj0+(((-1.0)*r10*x11745))+(((-1.0)*r12*x11741)));
evalcond[2]=(((x11727*x11735))+(((-1.0)*r00*x11745))+(((-1.0)*x11734))+(((-1.0)*r02*x11741)));
evalcond[3]=(x11733+x11738+((x11736*x11744))+(((-1.0)*r20*x11730*x11741))+((r20*x11739))+((r22*x11743))+((r21*x11729)));
evalcond[4]=(x11732+(((-1.0)*x11742))+(((-1.0)*r22*x11746))+((r20*x11740))+((r21*x11730))+((r20*x11728*x11729))+(((-1.0)*sj3*x11736*x11741)));
evalcond[5]=(((x11735*x11744))+((r00*x11739))+((cj0*x11732))+((r01*x11729))+(((-1.0)*cj1*cj2*x11737))+((r02*x11743))+(((-1.0)*r00*x11730*x11741)));
evalcond[6]=(((sj0*x11732))+(((-1.0)*r10*x11730*x11741))+(((-1.0)*cj1*cj2*x11734))+((r10*x11739))+((x11731*x11744))+((r11*x11729))+((r12*x11743)));
evalcond[7]=(((r01*x11730))+((r00*x11740))+((r00*x11728*x11729))+(((-1.0)*x11737*x11738))+(((-1.0)*sj3*x11735*x11741))+(((-1.0)*r02*x11746))+(((-1.0)*x11733*x11737)));
evalcond[8]=((((-1.0)*x11734*x11738))+((r11*x11730))+((r10*x11728*x11729))+(((-1.0)*sj3*x11731*x11741))+((r10*x11740))+(((-1.0)*r12*x11746))+(((-1.0)*x11733*x11734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11747=((1.0)*gconst5);
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11747))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
CheckValue<IkReal> x11749=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11747)))),-1);
if(!x11749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11748.value)+(((1.5707963267949)*(x11749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11750=IKsin(j4);
IkReal x11751=IKcos(j4);
IkReal x11752=(gconst5*sj3);
IkReal x11753=(cj3*gconst5);
IkReal x11754=(gconst4*r11);
IkReal x11755=(sj1*sj2);
IkReal x11756=(cj2*sj1);
IkReal x11757=((1.0)*sj0);
IkReal x11758=(gconst4*r01);
IkReal x11759=(gconst4*r21);
IkReal x11760=((1.0)*cj0);
IkReal x11761=(cj1*sj2);
IkReal x11762=(gconst4*sj3);
IkReal x11763=(cj3*gconst4);
IkReal x11764=((1.0)*x11751);
IkReal x11765=((1.0)*cj1*cj2);
IkReal x11766=(cj3*x11750);
IkReal x11767=(cj3*x11751);
IkReal x11768=((1.0)*gconst5*x11750);
IkReal x11769=((1.0)*sj3*x11750);
evalcond[0]=((((-1.0)*r22*x11764))+((x11750*x11759))+(((-1.0)*r20*x11768)));
evalcond[1]=((((-1.0)*r12*x11764))+cj0+(((-1.0)*r10*x11768))+((x11750*x11754)));
evalcond[2]=(((x11750*x11758))+(((-1.0)*r02*x11764))+(((-1.0)*x11757))+(((-1.0)*r00*x11768)));
evalcond[3]=(((x11759*x11767))+x11761+x11756+((r20*x11762))+(((-1.0)*r20*x11753*x11764))+((r22*x11766))+((r21*x11752)));
evalcond[4]=(x11755+((r20*x11763))+(((-1.0)*sj3*x11759*x11764))+((r20*x11751*x11752))+(((-1.0)*r22*x11769))+(((-1.0)*x11765))+((r21*x11753)));
evalcond[5]=(((cj0*x11755))+(((-1.0)*cj1*cj2*x11760))+(((-1.0)*r00*x11753*x11764))+((r02*x11766))+((x11758*x11767))+((r00*x11762))+((r01*x11752)));
evalcond[6]=((((-1.0)*cj1*cj2*x11757))+((r11*x11752))+((r10*x11762))+((r12*x11766))+((sj0*x11755))+(((-1.0)*r10*x11753*x11764))+((x11754*x11767)));
evalcond[7]=((((-1.0)*sj3*x11758*x11764))+(((-1.0)*x11760*x11761))+(((-1.0)*r02*x11769))+(((-1.0)*x11756*x11760))+((r00*x11751*x11752))+((r00*x11763))+((r01*x11753)));
evalcond[8]=(((r10*x11751*x11752))+(((-1.0)*r12*x11769))+((r11*x11753))+((r10*x11763))+(((-1.0)*x11757*x11761))+(((-1.0)*x11756*x11757))+(((-1.0)*sj3*x11754*x11764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11770=((-1.0)*r10);
IkReal x11772 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11772)==0){
continue;
}
IkReal x11771=pow(x11772,-0.5);
CheckValue<IkReal> x11773 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11770),IKFAST_ATAN2_MAGTHRESH);
if(!x11773.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11773.value));
IkReal gconst7=(r11*x11771);
IkReal gconst8=(x11770*x11771);
CheckValue<IkReal> x11774 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11774.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11774.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11775=((-1.0)*r10);
IkReal x11776=x11771;
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11775),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
IkReal x11777=((-1.0)*(x11778.value));
sj5=gconst7;
cj5=gconst8;
j5=x11777;
IkReal gconst6=x11777;
IkReal gconst7=(r11*x11776);
IkReal gconst8=(x11775*x11776);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11779=((1.0)*sj0);
IkReal x11780=((1.0)*gconst7);
CheckValue<IkReal> x11781 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11779))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11780))+(((-1.0)*gconst7*r11*x11779))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11781.valid){
continue;
}
CheckValue<IkReal> x11782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11780))+(((-1.0)*gconst8*r21)))),-1);
if(!x11782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11781.value)+(((1.5707963267949)*(x11782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11783=IKsin(j4);
IkReal x11784=IKcos(j4);
IkReal x11785=(gconst7*sj3);
IkReal x11786=(cj3*gconst8);
IkReal x11787=(cj3*gconst7);
IkReal x11788=(sj1*sj2);
IkReal x11789=(cj2*sj1);
IkReal x11790=((1.0)*sj0);
IkReal x11791=((1.0)*cj0);
IkReal x11792=(gconst8*sj3);
IkReal x11793=(cj1*sj2);
IkReal x11794=((1.0)*x11784);
IkReal x11795=((1.0)*x11783);
IkReal x11796=((1.0)*cj1*cj2);
IkReal x11797=(cj3*x11783);
IkReal x11798=(gconst7*x11783);
IkReal x11799=(x11784*x11792);
evalcond[0]=((((-1.0)*gconst8*r20*x11795))+(((-1.0)*r22*x11794))+((r21*x11798)));
evalcond[1]=(cj0+((r11*x11798))+(((-1.0)*gconst8*r10*x11795))+(((-1.0)*r12*x11794)));
evalcond[2]=((((-1.0)*gconst8*r00*x11795))+(((-1.0)*r02*x11794))+((r01*x11798))+(((-1.0)*x11790)));
evalcond[3]=(x11793+x11789+((r20*x11785))+((r21*x11784*x11787))+((r22*x11797))+((r21*x11792))+(((-1.0)*r20*x11786*x11794)));
evalcond[4]=(((r21*x11786))+x11788+((r20*x11787))+((r20*x11799))+(((-1.0)*r22*sj3*x11795))+(((-1.0)*r21*x11785*x11794))+(((-1.0)*x11796)));
evalcond[5]=((((-1.0)*cj1*cj2*x11791))+((cj0*x11788))+((r02*x11797))+((r01*x11784*x11787))+(((-1.0)*r00*x11786*x11794))+((r01*x11792))+((r00*x11785)));
evalcond[6]=(((r12*x11797))+((r11*x11784*x11787))+(((-1.0)*cj1*cj2*x11790))+((r11*x11792))+((r10*x11785))+((sj0*x11788))+(((-1.0)*r10*x11786*x11794)));
evalcond[7]=((((-1.0)*r01*x11785*x11794))+(((-1.0)*r02*sj3*x11795))+(((-1.0)*x11789*x11791))+(((-1.0)*x11791*x11793))+((r00*x11799))+((r00*x11787))+((r01*x11786)));
evalcond[8]=(((r11*x11786))+(((-1.0)*r11*x11785*x11794))+((r10*x11799))+((r10*x11787))+(((-1.0)*x11789*x11790))+(((-1.0)*r12*sj3*x11795))+(((-1.0)*x11790*x11793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11800=((1.0)*gconst8);
CheckValue<IkReal> x11801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11800)))),-1);
if(!x11801.valid){
continue;
}
CheckValue<IkReal> x11802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11800))+((cj0*gconst7*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11801.value)))+(x11802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11803=IKsin(j4);
IkReal x11804=IKcos(j4);
IkReal x11805=(gconst7*sj3);
IkReal x11806=(cj3*gconst8);
IkReal x11807=(cj3*gconst7);
IkReal x11808=(sj1*sj2);
IkReal x11809=(cj2*sj1);
IkReal x11810=((1.0)*sj0);
IkReal x11811=((1.0)*cj0);
IkReal x11812=(gconst8*sj3);
IkReal x11813=(cj1*sj2);
IkReal x11814=((1.0)*x11804);
IkReal x11815=((1.0)*x11803);
IkReal x11816=((1.0)*cj1*cj2);
IkReal x11817=(cj3*x11803);
IkReal x11818=(gconst7*x11803);
IkReal x11819=(x11804*x11812);
evalcond[0]=((((-1.0)*r22*x11814))+((r21*x11818))+(((-1.0)*gconst8*r20*x11815)));
evalcond[1]=(cj0+(((-1.0)*gconst8*r10*x11815))+(((-1.0)*r12*x11814))+((r11*x11818)));
evalcond[2]=(((r01*x11818))+(((-1.0)*r02*x11814))+(((-1.0)*gconst8*r00*x11815))+(((-1.0)*x11810)));
evalcond[3]=((((-1.0)*r20*x11806*x11814))+((r21*x11804*x11807))+((r21*x11812))+((r22*x11817))+((r20*x11805))+x11813+x11809);
evalcond[4]=((((-1.0)*r22*sj3*x11815))+((r21*x11806))+((r20*x11807))+(((-1.0)*x11816))+((r20*x11819))+(((-1.0)*r21*x11805*x11814))+x11808);
evalcond[5]=(((r00*x11805))+((r01*x11812))+(((-1.0)*r00*x11806*x11814))+((r02*x11817))+((r01*x11804*x11807))+((cj0*x11808))+(((-1.0)*cj1*cj2*x11811)));
evalcond[6]=(((r11*x11804*x11807))+((r10*x11805))+((sj0*x11808))+((r11*x11812))+((r12*x11817))+(((-1.0)*cj1*cj2*x11810))+(((-1.0)*r10*x11806*x11814)));
evalcond[7]=(((r00*x11807))+((r00*x11819))+(((-1.0)*x11809*x11811))+(((-1.0)*x11811*x11813))+((r01*x11806))+(((-1.0)*r02*sj3*x11815))+(((-1.0)*r01*x11805*x11814)));
evalcond[8]=((((-1.0)*x11810*x11813))+(((-1.0)*r11*x11805*x11814))+(((-1.0)*x11809*x11810))+((r11*x11806))+((r10*x11807))+((r10*x11819))+(((-1.0)*r12*sj3*x11815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11820=((-1.0)*r11);
IkReal x11822 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11822)==0){
continue;
}
IkReal x11821=pow(x11822,-0.5);
CheckValue<IkReal> x11823 = IKatan2WithCheck(IkReal(x11820),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11823.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11823.value))));
IkReal gconst10=(x11820*x11821);
IkReal gconst11=((1.0)*r10*x11821);
CheckValue<IkReal> x11824 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11825=((-1.0)*r11);
CheckValue<IkReal> x11828 = IKatan2WithCheck(IkReal(x11825),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11828.valid){
continue;
}
IkReal x11826=((1.0)*(x11828.value));
IkReal x11827=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11826)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11826)));
IkReal gconst10=(x11825*x11827);
IkReal gconst11=((1.0)*r10*x11827);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11829=((-1.0)*r11);
CheckValue<IkReal> x11832 = IKatan2WithCheck(IkReal(x11829),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11832.valid){
continue;
}
IkReal x11830=((1.0)*(x11832.value));
IkReal x11831=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11830)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11830)));
IkReal gconst10=(x11829*x11831);
IkReal gconst11=((1.0)*r10*x11831);
IkReal x11833=r12*r12;
IkReal x11834=((1.0)*sj0);
IkReal x11835=(cj0*r02);
IkReal x11836=x11821;
j4eval[0]=((IKabs(((((-1.0)*r12*x11834))+(((-1.0)*x11835)))))+(IKabs((((sj0*x11833*x11836))+((r12*x11835*x11836))+(((-1.0)*x11834*x11836))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11837=((-1.0)*r11);
CheckValue<IkReal> x11840 = IKatan2WithCheck(IkReal(x11837),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11840.valid){
continue;
}
IkReal x11838=((1.0)*(x11840.value));
IkReal x11839=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11838)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11838)));
IkReal gconst10=(x11837*x11839);
IkReal gconst11=((1.0)*r10*x11839);
IkReal x11841=((1.0)*cj3);
CheckValue<IkReal> x11846=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11846.valid){
continue;
}
IkReal x11842=x11846.value;
IkReal x11843=(cj3*x11842);
IkReal x11844=(x11841*x11842);
IkReal x11845=((((-1.0)*x11841*(r22*r22)))+(((-1.0)*x11844*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11843))+(((-1.0)*x11844*(r10*r10)*(r20*r20))));
j4eval[0]=x11845;
j4eval[1]=IKsign(x11845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11847=((-1.0)*r11);
CheckValue<IkReal> x11850 = IKatan2WithCheck(IkReal(x11847),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11850.valid){
continue;
}
IkReal x11848=((1.0)*(x11850.value));
IkReal x11849=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11848)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11848)));
IkReal gconst10=(x11847*x11849);
IkReal gconst11=((1.0)*r10*x11849);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11851=((-1.0)*r11);
CheckValue<IkReal> x11854 = IKatan2WithCheck(IkReal(x11851),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11854.valid){
continue;
}
IkReal x11852=((1.0)*(x11854.value));
IkReal x11853=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11852)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11852)));
IkReal gconst10=(x11851*x11853);
IkReal gconst11=((1.0)*r10*x11853);
IkReal x11855=r12*r12;
IkReal x11856=((1.0)*sj0);
IkReal x11857=(cj0*r02);
IkReal x11858=x11821;
j4eval[0]=((IKabs((((sj0*x11855*x11858))+((r12*x11857*x11858))+(((-1.0)*x11856*x11858)))))+(IKabs(((((-1.0)*x11857))+(((-1.0)*r12*x11856))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11859=((-1.0)*r11);
CheckValue<IkReal> x11862 = IKatan2WithCheck(IkReal(x11859),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11862.valid){
continue;
}
IkReal x11860=((1.0)*(x11862.value));
IkReal x11861=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11860)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11860)));
IkReal gconst10=(x11859*x11861);
IkReal gconst11=((1.0)*r10*x11861);
IkReal x11863=r12*r12;
IkReal x11864=(cj1*cj2*r22);
IkReal x11865=(r22*sj1*sj2);
CheckValue<IkReal> x11869=IKPowWithIntegerCheck(((-1.0)+x11863),-1);
if(!x11869.valid){
continue;
}
IkReal x11866=x11869.value;
if((((1.0)+(((-1.0)*x11863)))) < -0.00001)
continue;
IkReal x11867=IKsqrt(((1.0)+(((-1.0)*x11863))));
IkReal x11868=(r12*x11866*x11867);
j4eval[0]=((IKabs((((x11864*x11868))+(((-1.0)*x11865*x11868)))))+(IKabs(((((-1.0)*x11864))+x11865))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11870=((-1.0)*r11);
CheckValue<IkReal> x11873 = IKatan2WithCheck(IkReal(x11870),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11873.valid){
continue;
}
IkReal x11871=((1.0)*(x11873.value));
IkReal x11872=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11871)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11871)));
IkReal gconst10=(x11870*x11872);
IkReal gconst11=((1.0)*r10*x11872);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11874=((-1.0)*r11);
CheckValue<IkReal> x11877 = IKatan2WithCheck(IkReal(x11874),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11877.valid){
continue;
}
IkReal x11875=((1.0)*(x11877.value));
IkReal x11876=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11875)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11875)));
IkReal gconst10=(x11874*x11876);
IkReal gconst11=((1.0)*r10*x11876);
IkReal x11878=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11882=IKPowWithIntegerCheck(x11878,-1);
if(!x11882.valid){
continue;
}
IkReal x11879=x11882.value;
IkReal x11880=((1.0)*x11879);
IkReal x11881=((((-1.0)*(r02*r02)))+(((-1.0)*x11880*(r01*r01)*(r11*r11)))+(((-1.0)*x11880*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11879)));
j4eval[0]=x11881;
j4eval[1]=IKsign(x11881);
j4eval[2]=r02;
j4eval[3]=x11878;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11883=((-1.0)*r11);
CheckValue<IkReal> x11886 = IKatan2WithCheck(IkReal(x11883),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11886.valid){
continue;
}
IkReal x11884=((1.0)*(x11886.value));
IkReal x11885=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11884)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11884)));
IkReal gconst10=(x11883*x11885);
IkReal gconst11=((1.0)*r10*x11885);
IkReal x11887=r12*r12;
IkReal x11888=(cj1*cj2*r22);
IkReal x11889=(r22*sj1*sj2);
CheckValue<IkReal> x11893=IKPowWithIntegerCheck(((-1.0)+x11887),-1);
if(!x11893.valid){
continue;
}
IkReal x11890=x11893.value;
if((((1.0)+(((-1.0)*x11887)))) < -0.00001)
continue;
IkReal x11891=IKsqrt(((1.0)+(((-1.0)*x11887))));
IkReal x11892=(r12*x11890*x11891);
j4eval[0]=((IKabs((((x11888*x11892))+(((-1.0)*x11889*x11892)))))+(IKabs(((((-1.0)*x11888))+x11889))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11894=(gconst10*r21);
IkReal x11895=(gconst11*r20);
IkReal x11896=(sj1*sj2);
IkReal x11897=(cj1*cj2);
CheckValue<IkReal> x11898 = IKatan2WithCheck(IkReal((((r22*x11896))+(((-1.0)*r22*x11897)))),IkReal((((x11895*x11897))+((x11894*x11896))+(((-1.0)*x11895*x11896))+(((-1.0)*x11894*x11897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11898.valid){
continue;
}
CheckValue<IkReal> x11899=IKPowWithIntegerCheck(IKsign(((x11894*x11894)+(r22*r22)+(x11895*x11895)+(((-2.0)*x11894*x11895)))),-1);
if(!x11899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11898.value)+(((1.5707963267949)*(x11899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11900=IKsin(j4);
IkReal x11901=IKcos(j4);
IkReal x11902=((1.0)*cj2);
IkReal x11903=((1.0)*x11901);
IkReal x11904=(gconst10*x11900);
IkReal x11905=((1.0)*x11900);
IkReal x11906=(gconst11*x11901);
IkReal x11907=(gconst11*x11905);
evalcond[0]=((((-1.0)*r22*x11903))+(((-1.0)*r20*x11907))+((r21*x11904)));
evalcond[1]=((((-1.0)*r12*x11903))+(((-1.0)*r10*x11907))+((r11*x11904)));
evalcond[2]=((((-1.0)*r02*x11905))+((r00*x11906))+(((-1.0)*gconst10*r01*x11903)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11903))+(((-1.0)*r00*x11907))+((r01*x11904)));
evalcond[4]=((((-1.0)*r22*x11905))+(((-1.0)*gconst10*r21*x11903))+(((-1.0)*cj1*x11902))+((sj1*sj2))+((r20*x11906)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11902))+(((-1.0)*r12*x11905))+(((-1.0)*gconst10*r11*x11903))+((r10*x11906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11908=(gconst11*r00);
IkReal x11909=(gconst10*r01);
CheckValue<IkReal> x11910 = IKatan2WithCheck(IkReal((x11908+(((-1.0)*x11909)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11910.valid){
continue;
}
CheckValue<IkReal> x11911=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11909*x11909)))+(((2.0)*x11908*x11909))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11908*x11908))))),-1);
if(!x11911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11910.value)+(((1.5707963267949)*(x11911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11912=IKsin(j4);
IkReal x11913=IKcos(j4);
IkReal x11914=((1.0)*cj2);
IkReal x11915=((1.0)*x11913);
IkReal x11916=(gconst10*x11912);
IkReal x11917=((1.0)*x11912);
IkReal x11918=(gconst11*x11913);
IkReal x11919=(gconst11*x11917);
evalcond[0]=((((-1.0)*r22*x11915))+(((-1.0)*r20*x11919))+((r21*x11916)));
evalcond[1]=(((r11*x11916))+(((-1.0)*r12*x11915))+(((-1.0)*r10*x11919)));
evalcond[2]=(((r00*x11918))+(((-1.0)*gconst10*r01*x11915))+(((-1.0)*r02*x11917)));
evalcond[3]=((-1.0)+((r01*x11916))+(((-1.0)*r02*x11915))+(((-1.0)*r00*x11919)));
evalcond[4]=((((-1.0)*gconst10*r21*x11915))+(((-1.0)*cj1*x11914))+(((-1.0)*r22*x11917))+((sj1*sj2))+((r20*x11918)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11915))+(((-1.0)*sj1*x11914))+((r10*x11918))+(((-1.0)*r12*x11917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11920 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11920.valid){
continue;
}
CheckValue<IkReal> x11921=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11920.value)+(((1.5707963267949)*(x11921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11922=IKsin(j4);
IkReal x11923=IKcos(j4);
IkReal x11924=((1.0)*cj2);
IkReal x11925=((1.0)*x11923);
IkReal x11926=(gconst10*x11922);
IkReal x11927=((1.0)*x11922);
IkReal x11928=(gconst11*x11923);
IkReal x11929=(gconst11*x11927);
evalcond[0]=((((-1.0)*r20*x11929))+((r21*x11926))+(((-1.0)*r22*x11925)));
evalcond[1]=((((-1.0)*r10*x11929))+((r11*x11926))+(((-1.0)*r12*x11925)));
evalcond[2]=((((-1.0)*r02*x11927))+((r00*x11928))+(((-1.0)*gconst10*r01*x11925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11925))+(((-1.0)*r00*x11929))+((r01*x11926)));
evalcond[4]=((((-1.0)*cj1*x11924))+((r20*x11928))+((sj1*sj2))+(((-1.0)*r22*x11927))+(((-1.0)*gconst10*r21*x11925)));
evalcond[5]=(((r10*x11928))+(((-1.0)*gconst10*r11*x11925))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11927))+(((-1.0)*sj1*x11924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11930=((-1.0)*r11);
CheckValue<IkReal> x11933 = IKatan2WithCheck(IkReal(x11930),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11933.valid){
continue;
}
IkReal x11931=((1.0)*(x11933.value));
IkReal x11932=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11931)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11931)));
IkReal gconst10=(x11930*x11932);
IkReal gconst11=((1.0)*r10*x11932);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11934=((-1.0)*r11);
CheckValue<IkReal> x11937 = IKatan2WithCheck(IkReal(x11934),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11937.valid){
continue;
}
IkReal x11935=((1.0)*(x11937.value));
IkReal x11936=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11935)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11935)));
IkReal gconst10=(x11934*x11936);
IkReal gconst11=((1.0)*r10*x11936);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11938=((-1.0)*r11);
CheckValue<IkReal> x11941 = IKatan2WithCheck(IkReal(x11938),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11941.valid){
continue;
}
IkReal x11939=((1.0)*(x11941.value));
IkReal x11940=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11939)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11939)));
IkReal gconst10=(x11938*x11940);
IkReal gconst11=((1.0)*r10*x11940);
IkReal x11942=r12*r12;
CheckValue<IkReal> x11945=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11942))),-1);
if(!x11945.valid){
continue;
}
IkReal x11943=x11945.value;
IkReal x11944=((1.0)*x11943);
j4eval[0]=IKsign((x11942+((x11944*(r11*r11*r11*r11)))+(((2.0)*x11943*(r10*r10)*(r11*r11)))+((x11944*(r10*r10*r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11946=(cj2*sj1);
IkReal x11947=(gconst10*r11);
IkReal x11948=(gconst11*r10);
IkReal x11949=(cj1*sj2);
CheckValue<IkReal> x11950 = IKatan2WithCheck(IkReal((((r12*x11946))+((r12*x11949)))),IkReal((((x11946*x11947))+((x11947*x11949))+(((-1.0)*x11946*x11948))+(((-1.0)*x11948*x11949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11950.valid){
continue;
}
CheckValue<IkReal> x11951=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11948*x11948)+(x11947*x11947)+(((-2.0)*x11947*x11948)))),-1);
if(!x11951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11950.value)+(((1.5707963267949)*(x11951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11952=IKsin(j4);
IkReal x11953=IKcos(j4);
IkReal x11954=((1.0)*x11953);
IkReal x11955=(gconst10*x11952);
IkReal x11956=((1.0)*x11952);
IkReal x11957=(gconst11*x11953);
IkReal x11958=(gconst11*x11956);
evalcond[0]=((((-1.0)*r20*x11958))+((r21*x11955))+(((-1.0)*r22*x11954)));
evalcond[1]=((((-1.0)*r12*x11954))+((r11*x11955))+(((-1.0)*r10*x11958)));
evalcond[2]=((((-1.0)*gconst10*r01*x11954))+(((-1.0)*r02*x11956))+((r00*x11957)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11954))+(((-1.0)*r00*x11958))+((r01*x11955)));
evalcond[4]=((((-1.0)*r12*x11956))+((cj2*sj1))+(((-1.0)*gconst10*r11*x11954))+((cj1*sj2))+((r10*x11957)));
evalcond[5]=((((-1.0)*gconst10*r21*x11954))+((r20*x11957))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11959=(gconst11*r00);
IkReal x11960=(gconst10*r01);
CheckValue<IkReal> x11961 = IKatan2WithCheck(IkReal((x11959+(((-1.0)*x11960)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11961.valid){
continue;
}
CheckValue<IkReal> x11962=IKPowWithIntegerCheck(IKsign(((x11959*x11959)+(r02*r02)+(((-2.0)*x11959*x11960))+(x11960*x11960))),-1);
if(!x11962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11961.value)+(((1.5707963267949)*(x11962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11963=IKsin(j4);
IkReal x11964=IKcos(j4);
IkReal x11965=((1.0)*x11964);
IkReal x11966=(gconst10*x11963);
IkReal x11967=((1.0)*x11963);
IkReal x11968=(gconst11*x11964);
IkReal x11969=(gconst11*x11967);
evalcond[0]=((((-1.0)*r20*x11969))+(((-1.0)*r22*x11965))+((r21*x11966)));
evalcond[1]=((((-1.0)*r10*x11969))+(((-1.0)*r12*x11965))+((r11*x11966)));
evalcond[2]=(((r00*x11968))+(((-1.0)*gconst10*r01*x11965))+(((-1.0)*r02*x11967)));
evalcond[3]=((1.0)+((r01*x11966))+(((-1.0)*r00*x11969))+(((-1.0)*r02*x11965)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11967))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11965))+((r10*x11968)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11968))+(((-1.0)*r22*x11967))+(((-1.0)*gconst10*r21*x11965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11970=((1.0)*gconst11);
CheckValue<IkReal> x11971 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11971.valid){
continue;
}
CheckValue<IkReal> x11972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11970))+(((-1.0)*gconst10*r20)))),-1);
if(!x11972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11971.value)+(((1.5707963267949)*(x11972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11973=IKsin(j4);
IkReal x11974=IKcos(j4);
IkReal x11975=((1.0)*x11974);
IkReal x11976=(gconst10*x11973);
IkReal x11977=((1.0)*x11973);
IkReal x11978=(gconst11*x11974);
IkReal x11979=(gconst11*x11977);
evalcond[0]=((((-1.0)*r20*x11979))+(((-1.0)*r22*x11975))+((r21*x11976)));
evalcond[1]=((((-1.0)*r10*x11979))+(((-1.0)*r12*x11975))+((r11*x11976)));
evalcond[2]=(((r00*x11978))+(((-1.0)*gconst10*r01*x11975))+(((-1.0)*r02*x11977)));
evalcond[3]=((1.0)+((r01*x11976))+(((-1.0)*r00*x11979))+(((-1.0)*r02*x11975)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11977))+(((-1.0)*gconst10*r11*x11975))+((cj1*sj2))+((r10*x11978)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11978))+(((-1.0)*r22*x11977))+(((-1.0)*gconst10*r21*x11975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11980=((-1.0)*r11);
IkReal x11981=((-1.0)*r10);
CheckValue<IkReal> x11983 = IKatan2WithCheck(IkReal(x11980),IkReal(x11981),IKFAST_ATAN2_MAGTHRESH);
if(!x11983.valid){
continue;
}
IkReal x11982=((1.0)*(x11983.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11982)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11981);
rxp1_1=(px*r21);
rxp1_2=(px*x11980);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11982)));
IkReal gconst10=x11980;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11984=((-1.0)*r11);
IkReal x11985=((-1.0)*r10);
CheckValue<IkReal> x11987 = IKatan2WithCheck(IkReal(x11984),IkReal(x11985),IKFAST_ATAN2_MAGTHRESH);
if(!x11987.valid){
continue;
}
IkReal x11986=((1.0)*(x11987.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11986)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11985);
rxp1_1=(px*r21);
rxp1_2=(px*x11984);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11986)));
IkReal gconst10=x11984;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11988=((-1.0)*r11);
IkReal x11989=((-1.0)*r10);
CheckValue<IkReal> x11991 = IKatan2WithCheck(IkReal(x11988),IkReal(x11989),IKFAST_ATAN2_MAGTHRESH);
if(!x11991.valid){
continue;
}
IkReal x11990=((1.0)*(x11991.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11990)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11989);
rxp1_1=(px*r21);
rxp1_2=(px*x11988);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11990)));
IkReal gconst10=x11988;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11994=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11994.valid){
continue;
}
IkReal x11992=x11994.value;
IkReal x11993=(sj0*x11992);
cj4array[0]=(((cj1*sj2*x11993))+((cj2*sj1*x11993)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11995=IKsin(j4);
IkReal x11996=IKcos(j4);
IkReal x11997=(gconst10*r21);
IkReal x11998=(gconst11*r20);
IkReal x11999=((1.0)*x11995);
IkReal x12000=((1.0)*x11996);
evalcond[0]=((-1.0)*r02*x11995);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12000)));
evalcond[2]=(((x11995*x11997))+(((-1.0)*x11998*x11999)));
evalcond[3]=((((-1.0)*gconst11*r10*x11999))+((gconst10*r11*x11995)));
evalcond[4]=(((x11996*x11998))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11997*x12000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12002=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12002.valid){
continue;
}
IkReal x12001=x12002.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12001))+((cj1*cj2*x12001)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12003=IKsin(j4);
IkReal x12004=IKcos(j4);
IkReal x12005=((1.0)*sj0);
IkReal x12006=(gconst10*x12003);
IkReal x12007=((1.0)*x12004);
IkReal x12008=((1.0)*gconst11*x12003);
evalcond[0]=((-1.0)*r02*x12003);
evalcond[1]=((((-1.0)*x12005))+(((-1.0)*r02*x12007)));
evalcond[2]=(((r21*x12006))+(((-1.0)*r20*x12008)));
evalcond[3]=((((-1.0)*r10*x12008))+((r11*x12006)));
evalcond[4]=((((-1.0)*cj1*sj2*x12005))+(((-1.0)*gconst10*r11*x12007))+((gconst11*r10*x12004))+(((-1.0)*cj2*sj1*x12005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12009=IKPowWithIntegerCheck(r02,-1);
if(!x12009.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12009.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12010=IKsin(j4);
IkReal x12011=IKcos(j4);
IkReal x12012=(gconst10*r21);
IkReal x12013=((1.0)*sj0);
IkReal x12014=(gconst10*r11);
IkReal x12015=(gconst11*x12011);
IkReal x12016=((1.0)*x12011);
IkReal x12017=((1.0)*gconst11*x12010);
evalcond[0]=((-1.0)*r02*x12010);
evalcond[1]=((((-1.0)*r20*x12017))+((x12010*x12012)));
evalcond[2]=((((-1.0)*r10*x12017))+((x12010*x12014)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x12015))+(((-1.0)*x12012*x12016)));
evalcond[4]=((((-1.0)*x12014*x12016))+((r10*x12015))+(((-1.0)*cj2*sj1*x12013))+(((-1.0)*cj1*sj2*x12013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12018=((1.0)*gconst11);
CheckValue<IkReal> x12019 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12018))+(((-1.0)*cj0*r00*x12018))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12019.valid){
continue;
}
CheckValue<IkReal> x12020=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12019.value)+(((1.5707963267949)*(x12020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12021=IKsin(j4);
IkReal x12022=IKcos(j4);
IkReal x12023=((1.0)*cj2);
IkReal x12024=((1.0)*sj0);
IkReal x12025=(cj1*sj2);
IkReal x12026=(gconst10*x12021);
IkReal x12027=((1.0)*x12022);
IkReal x12028=(gconst11*x12022);
IkReal x12029=((1.0)*x12021);
IkReal x12030=(gconst11*x12029);
evalcond[0]=((((-1.0)*r20*x12030))+((r21*x12026)));
evalcond[1]=(cj0+((r11*x12026))+(((-1.0)*r12*x12027))+(((-1.0)*r10*x12030)));
evalcond[2]=((((-1.0)*cj1*x12023))+((r20*x12028))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12027)));
evalcond[3]=(((r01*x12026))+(((-1.0)*x12024))+(((-1.0)*r00*x12030))+(((-1.0)*r02*x12027)));
evalcond[4]=(((r00*x12028))+(((-1.0)*r02*x12029))+(((-1.0)*cj0*sj1*x12023))+(((-1.0)*cj0*x12025))+(((-1.0)*gconst10*r01*x12027)));
evalcond[5]=((((-1.0)*x12024*x12025))+(((-1.0)*gconst10*r11*x12027))+(((-1.0)*r12*x12029))+(((-1.0)*sj0*sj1*x12023))+((r10*x12028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12031=(gconst10*r21);
IkReal x12032=(gconst11*r20);
IkReal x12033=(sj1*sj2);
IkReal x12034=(cj1*cj2);
CheckValue<IkReal> x12035 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12034))+((r22*x12033)))),IkReal(((((-1.0)*x12031*x12034))+(((-1.0)*x12032*x12033))+((x12031*x12033))+((x12032*x12034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12035.valid){
continue;
}
CheckValue<IkReal> x12036=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12031*x12031)+(((-2.0)*x12031*x12032))+(x12032*x12032))),-1);
if(!x12036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12035.value)+(((1.5707963267949)*(x12036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12037=IKsin(j4);
IkReal x12038=IKcos(j4);
IkReal x12039=((1.0)*cj2);
IkReal x12040=((1.0)*sj0);
IkReal x12041=(cj1*sj2);
IkReal x12042=((1.0)*x12038);
IkReal x12043=(gconst10*x12037);
IkReal x12044=((1.0)*x12037);
IkReal x12045=(gconst11*x12038);
IkReal x12046=(gconst11*x12044);
evalcond[0]=((((-1.0)*r20*x12046))+((r21*x12043))+(((-1.0)*r22*x12042)));
evalcond[1]=((((-1.0)*r12*x12042))+cj0+((r11*x12043))+(((-1.0)*r10*x12046)));
evalcond[2]=((((-1.0)*r00*x12046))+(((-1.0)*x12040))+((r01*x12043))+(((-1.0)*r02*x12042)));
evalcond[3]=((((-1.0)*cj1*x12039))+((sj1*sj2))+((r20*x12045))+(((-1.0)*gconst10*r21*x12042))+(((-1.0)*r22*x12044)));
evalcond[4]=((((-1.0)*cj0*x12041))+(((-1.0)*gconst10*r01*x12042))+((r00*x12045))+(((-1.0)*cj0*sj1*x12039))+(((-1.0)*r02*x12044)));
evalcond[5]=(((r10*x12045))+(((-1.0)*x12040*x12041))+(((-1.0)*r12*x12044))+(((-1.0)*gconst10*r11*x12042))+(((-1.0)*sj0*sj1*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12047=((1.0)*sj0);
IkReal x12048=((1.0)*gconst10);
CheckValue<IkReal> x12049 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12047))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12047))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12049.valid){
continue;
}
CheckValue<IkReal> x12050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12048))+(((-1.0)*gconst11*r21)))),-1);
if(!x12050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12049.value)+(((1.5707963267949)*(x12050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12051=IKsin(j4);
IkReal x12052=IKcos(j4);
IkReal x12053=((1.0)*cj2);
IkReal x12054=((1.0)*sj0);
IkReal x12055=(cj1*sj2);
IkReal x12056=((1.0)*x12052);
IkReal x12057=(gconst10*x12051);
IkReal x12058=((1.0)*x12051);
IkReal x12059=(gconst11*x12052);
IkReal x12060=(gconst11*x12058);
evalcond[0]=((((-1.0)*r20*x12060))+(((-1.0)*r22*x12056))+((r21*x12057)));
evalcond[1]=(cj0+(((-1.0)*r10*x12060))+(((-1.0)*r12*x12056))+((r11*x12057)));
evalcond[2]=((((-1.0)*x12054))+((r01*x12057))+(((-1.0)*r02*x12056))+(((-1.0)*r00*x12060)));
evalcond[3]=(((r20*x12059))+(((-1.0)*cj1*x12053))+((sj1*sj2))+(((-1.0)*r22*x12058))+(((-1.0)*gconst10*r21*x12056)));
evalcond[4]=((((-1.0)*cj0*sj1*x12053))+((r00*x12059))+(((-1.0)*r02*x12058))+(((-1.0)*gconst10*r01*x12056))+(((-1.0)*cj0*x12055)));
evalcond[5]=(((r10*x12059))+(((-1.0)*x12054*x12055))+(((-1.0)*gconst10*r11*x12056))+(((-1.0)*r12*x12058))+(((-1.0)*sj0*sj1*x12053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12061=((1.0)*gconst11);
CheckValue<IkReal> x12062 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12061))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12062.valid){
continue;
}
CheckValue<IkReal> x12063=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12061)))),-1);
if(!x12063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12062.value)+(((1.5707963267949)*(x12063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12064=IKsin(j4);
IkReal x12065=IKcos(j4);
IkReal x12066=((1.0)*cj2);
IkReal x12067=((1.0)*sj0);
IkReal x12068=(cj1*sj2);
IkReal x12069=((1.0)*x12065);
IkReal x12070=(gconst10*x12064);
IkReal x12071=((1.0)*x12064);
IkReal x12072=(gconst11*x12065);
IkReal x12073=(gconst11*x12071);
evalcond[0]=((((-1.0)*r20*x12073))+(((-1.0)*r22*x12069))+((r21*x12070)));
evalcond[1]=(cj0+((r11*x12070))+(((-1.0)*r10*x12073))+(((-1.0)*r12*x12069)));
evalcond[2]=((((-1.0)*r02*x12069))+(((-1.0)*x12067))+(((-1.0)*r00*x12073))+((r01*x12070)));
evalcond[3]=((((-1.0)*gconst10*r21*x12069))+((sj1*sj2))+((r20*x12072))+(((-1.0)*r22*x12071))+(((-1.0)*cj1*x12066)));
evalcond[4]=((((-1.0)*cj0*x12068))+(((-1.0)*r02*x12071))+(((-1.0)*cj0*sj1*x12066))+(((-1.0)*gconst10*r01*x12069))+((r00*x12072)));
evalcond[5]=((((-1.0)*sj0*sj1*x12066))+(((-1.0)*x12067*x12068))+((r10*x12072))+(((-1.0)*gconst10*r11*x12069))+(((-1.0)*r12*x12071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12074=((-1.0)*r11);
CheckValue<IkReal> x12077 = IKatan2WithCheck(IkReal(x12074),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12077.valid){
continue;
}
IkReal x12075=((1.0)*(x12077.value));
IkReal x12076=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12075)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12075)));
IkReal gconst10=(x12074*x12076);
IkReal gconst11=((1.0)*r10*x12076);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12078=((-1.0)*r11);
CheckValue<IkReal> x12081 = IKatan2WithCheck(IkReal(x12078),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12081.valid){
continue;
}
IkReal x12079=((1.0)*(x12081.value));
IkReal x12080=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12079)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12079)));
IkReal gconst10=(x12078*x12080);
IkReal gconst11=((1.0)*r10*x12080);
IkReal x12082=r12*r12;
IkReal x12083=((1.0)*sj0);
IkReal x12084=(cj0*r02);
IkReal x12085=x11821;
j4eval[0]=((IKabs(((((-1.0)*x12083*x12085))+((r12*x12084*x12085))+((sj0*x12082*x12085)))))+(IKabs(((((-1.0)*r12*x12083))+(((-1.0)*x12084))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12086=((-1.0)*r11);
CheckValue<IkReal> x12089 = IKatan2WithCheck(IkReal(x12086),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12089.valid){
continue;
}
IkReal x12087=((1.0)*(x12089.value));
IkReal x12088=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12087)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12087)));
IkReal gconst10=(x12086*x12088);
IkReal gconst11=((1.0)*r10*x12088);
IkReal x12090=r12*r12;
IkReal x12091=((1.0)+(((-1.0)*x12090)));
IkReal x12092=(r22*sj1*sj2);
IkReal x12093=(cj1*cj2*r22);
CheckValue<IkReal> x12100=IKPowWithIntegerCheck(x12091,-1);
if(!x12100.valid){
continue;
}
IkReal x12094=x12100.value;
CheckValue<IkReal> x12101=IKPowWithIntegerCheck(((-1.0)+x12090),-1);
if(!x12101.valid){
continue;
}
IkReal x12095=x12101.value;
IkReal x12096=((1.0)*x12094);
if((x12091) < -0.00001)
continue;
IkReal x12097=IKsqrt(x12091);
IkReal x12098=(r12*x12095*x12097);
IkReal x12099=((((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12094))+(((-1.0)*x12096*(r11*r11)*(r21*r21)))+(((-1.0)*x12096*(r10*r10)*(r20*r20))));
j4eval[0]=x12099;
j4eval[1]=((IKabs(((((-1.0)*x12092*x12098))+((x12093*x12098)))))+(IKabs(((((-1.0)*x12093))+x12092))));
j4eval[2]=IKsign(x12099);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12102=((-1.0)*r11);
CheckValue<IkReal> x12105 = IKatan2WithCheck(IkReal(x12102),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12105.valid){
continue;
}
IkReal x12103=((1.0)*(x12105.value));
IkReal x12104=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12103)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12103)));
IkReal gconst10=(x12102*x12104);
IkReal gconst11=((1.0)*r10*x12104);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12106=((-1.0)*r11);
CheckValue<IkReal> x12109 = IKatan2WithCheck(IkReal(x12106),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12109.valid){
continue;
}
IkReal x12107=((1.0)*(x12109.value));
IkReal x12108=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12107)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12107)));
IkReal gconst10=(x12106*x12108);
IkReal gconst11=((1.0)*r10*x12108);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12110=((-1.0)*r11);
CheckValue<IkReal> x12113 = IKatan2WithCheck(IkReal(x12110),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12113.valid){
continue;
}
IkReal x12111=((1.0)*(x12113.value));
IkReal x12112=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12111)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12111)));
IkReal gconst10=(x12110*x12112);
IkReal gconst11=((1.0)*r10*x12112);
IkReal x12114=(cj1*r02*sj2);
IkReal x12115=(cj2*r02*sj1);
IkReal x12116=x11821;
IkReal x12117=(r12*x12116);
j4eval[0]=((IKabs((x12114+x12115)))+(IKabs((((x12115*x12117))+((x12114*x12117))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12118=(cj1*sj2);
IkReal x12119=(cj2*sj1);
IkReal x12120=(gconst11*r00);
IkReal x12121=((1.0)*gconst10*r01);
CheckValue<IkReal> x12122=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12122.valid){
continue;
}
CheckValue<IkReal> x12123 = IKatan2WithCheck(IkReal((((x12119*x12120))+((x12118*x12120))+(((-1.0)*x12118*x12121))+(((-1.0)*x12119*x12121)))),IkReal((((r02*x12118))+((r02*x12119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12122.value)))+(x12123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12124=IKcos(j4);
IkReal x12125=IKsin(j4);
IkReal x12126=((1.0)*cj2);
IkReal x12127=((1.0)*x12124);
IkReal x12128=(gconst10*x12124);
IkReal x12129=(gconst10*x12125);
IkReal x12130=((1.0)*gconst11*x12125);
evalcond[0]=(((r01*x12128))+(((-1.0)*gconst11*r00*x12127))+((r02*x12125)));
evalcond[1]=((((-1.0)*r20*x12130))+((r21*x12129))+(((-1.0)*r22*x12127)));
evalcond[2]=((((-1.0)*r12*x12127))+(((-1.0)*r10*x12130))+((r11*x12129)));
evalcond[3]=((-1.0)+((r01*x12129))+(((-1.0)*r02*x12127))+(((-1.0)*r00*x12130)));
evalcond[4]=(((r21*x12128))+(((-1.0)*cj1*x12126))+((sj1*sj2))+((r22*x12125))+(((-1.0)*gconst11*r20*x12127)));
evalcond[5]=((((-1.0)*sj1*x12126))+((r12*x12125))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12127))+((r11*x12128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12131=(gconst10*r01);
IkReal x12132=(gconst11*r00);
CheckValue<IkReal> x12133 = IKatan2WithCheck(IkReal((x12131+(((-1.0)*x12132)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12133.valid){
continue;
}
CheckValue<IkReal> x12134=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12131*x12132))+(x12132*x12132)+(x12131*x12131)+(r02*r02))),-1);
if(!x12134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12133.value)+(((1.5707963267949)*(x12134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12135=IKcos(j4);
IkReal x12136=IKsin(j4);
IkReal x12137=((1.0)*cj2);
IkReal x12138=((1.0)*x12135);
IkReal x12139=(gconst10*x12135);
IkReal x12140=(gconst10*x12136);
IkReal x12141=((1.0)*gconst11*x12136);
evalcond[0]=((((-1.0)*gconst11*r00*x12138))+((r01*x12139))+((r02*x12136)));
evalcond[1]=((((-1.0)*r22*x12138))+(((-1.0)*r20*x12141))+((r21*x12140)));
evalcond[2]=(((r11*x12140))+(((-1.0)*r12*x12138))+(((-1.0)*r10*x12141)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12141))+((r01*x12140))+(((-1.0)*r02*x12138)));
evalcond[4]=((((-1.0)*cj1*x12137))+((sj1*sj2))+((r21*x12139))+((r22*x12136))+(((-1.0)*gconst11*r20*x12138)));
evalcond[5]=(((r12*x12136))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12138))+((r11*x12139))+(((-1.0)*sj1*x12137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12142 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12142.valid){
continue;
}
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12142.value)+(((1.5707963267949)*(x12143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12144=IKcos(j4);
IkReal x12145=IKsin(j4);
IkReal x12146=((1.0)*cj2);
IkReal x12147=((1.0)*x12144);
IkReal x12148=(gconst10*x12144);
IkReal x12149=(gconst10*x12145);
IkReal x12150=((1.0)*gconst11*x12145);
evalcond[0]=(((r02*x12145))+((r01*x12148))+(((-1.0)*gconst11*r00*x12147)));
evalcond[1]=((((-1.0)*r22*x12147))+((r21*x12149))+(((-1.0)*r20*x12150)));
evalcond[2]=((((-1.0)*r12*x12147))+((r11*x12149))+(((-1.0)*r10*x12150)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12147))+(((-1.0)*r00*x12150))+((r01*x12149)));
evalcond[4]=(((r22*x12145))+(((-1.0)*gconst11*r20*x12147))+((sj1*sj2))+(((-1.0)*cj1*x12146))+((r21*x12148)));
evalcond[5]=((((-1.0)*gconst11*r10*x12147))+(((-1.0)*cj1*sj2))+((r12*x12145))+((r11*x12148))+(((-1.0)*sj1*x12146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12151=((-1.0)*r11);
CheckValue<IkReal> x12154 = IKatan2WithCheck(IkReal(x12151),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12154.valid){
continue;
}
IkReal x12152=((1.0)*(x12154.value));
IkReal x12153=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12152)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12152)));
IkReal gconst10=(x12151*x12153);
IkReal gconst11=((1.0)*r10*x12153);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12155=((-1.0)*r11);
CheckValue<IkReal> x12158 = IKatan2WithCheck(IkReal(x12155),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12158.valid){
continue;
}
IkReal x12156=((1.0)*(x12158.value));
IkReal x12157=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12156)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12156)));
IkReal gconst10=(x12155*x12157);
IkReal gconst11=((1.0)*r10*x12157);
IkReal x12159=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12163=IKPowWithIntegerCheck(x12159,-1);
if(!x12163.valid){
continue;
}
IkReal x12160=x12163.value;
IkReal x12161=((1.0)*x12160);
IkReal x12162=((((-2.0)*r00*r01*r10*r11*x12160))+(((-1.0)*(r02*r02)))+(((-1.0)*x12161*(r00*r00)*(r10*r10)))+(((-1.0)*x12161*(r01*r01)*(r11*r11))));
j4eval[0]=x12162;
j4eval[1]=r02;
j4eval[2]=x12159;
j4eval[3]=IKsign(x12162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12164=((-1.0)*r11);
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(x12164),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
IkReal x12165=((1.0)*(x12167.value));
IkReal x12166=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12165)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12165)));
IkReal gconst10=(x12164*x12166);
IkReal gconst11=((1.0)*r10*x12166);
IkReal x12168=r12*r12;
IkReal x12169=((1.0)*r02);
IkReal x12170=(cj1*sj2);
IkReal x12171=(cj2*sj1);
CheckValue<IkReal> x12175=IKPowWithIntegerCheck(((-1.0)+x12168),-1);
if(!x12175.valid){
continue;
}
IkReal x12172=x12175.value;
if((((1.0)+(((-1.0)*x12168)))) < -0.00001)
continue;
IkReal x12173=IKsqrt(((1.0)+(((-1.0)*x12168))));
IkReal x12174=(r12*x12172*x12173);
j4eval[0]=((IKabs(((((-1.0)*x12169*x12171*x12174))+(((-1.0)*x12169*x12170*x12174)))))+(IKabs(((((-1.0)*x12169*x12171))+(((-1.0)*x12169*x12170))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12176=(cj1*sj2);
IkReal x12177=(gconst10*r01);
IkReal x12178=(cj2*sj1);
IkReal x12179=((1.0)*r02);
IkReal x12180=((1.0)*gconst11*r00);
CheckValue<IkReal> x12181=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12181.valid){
continue;
}
CheckValue<IkReal> x12182 = IKatan2WithCheck(IkReal(((((-1.0)*x12176*x12180))+((x12176*x12177))+((x12177*x12178))+(((-1.0)*x12178*x12180)))),IkReal(((((-1.0)*x12176*x12179))+(((-1.0)*x12178*x12179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12181.value)))+(x12182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12183=IKcos(j4);
IkReal x12184=IKsin(j4);
IkReal x12185=((1.0)*x12183);
IkReal x12186=(gconst10*x12183);
IkReal x12187=(gconst10*x12184);
IkReal x12188=((1.0)*gconst11*x12184);
evalcond[0]=((((-1.0)*gconst11*r00*x12185))+((r02*x12184))+((r01*x12186)));
evalcond[1]=(((r21*x12187))+(((-1.0)*r22*x12185))+(((-1.0)*r20*x12188)));
evalcond[2]=(((r11*x12187))+(((-1.0)*r10*x12188))+(((-1.0)*r12*x12185)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12185))+(((-1.0)*r00*x12188))+((r01*x12187)));
evalcond[4]=(((cj2*sj1))+((r12*x12184))+((r11*x12186))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12185)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r22*x12184))+((sj1*sj2))+((r21*x12186))+(((-1.0)*gconst11*r20*x12185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12189=(gconst10*r01);
IkReal x12190=(gconst11*r00);
CheckValue<IkReal> x12191=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12190*x12190)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12189*x12189)))+(((2.0)*x12189*x12190)))),-1);
if(!x12191.valid){
continue;
}
CheckValue<IkReal> x12192 = IKatan2WithCheck(IkReal((x12189+(((-1.0)*x12190)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12191.value)))+(x12192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12193=IKcos(j4);
IkReal x12194=IKsin(j4);
IkReal x12195=((1.0)*x12193);
IkReal x12196=(gconst10*x12193);
IkReal x12197=(gconst10*x12194);
IkReal x12198=((1.0)*gconst11*x12194);
evalcond[0]=((((-1.0)*gconst11*r00*x12195))+((r02*x12194))+((r01*x12196)));
evalcond[1]=((((-1.0)*r20*x12198))+((r21*x12197))+(((-1.0)*r22*x12195)));
evalcond[2]=(((r11*x12197))+(((-1.0)*r10*x12198))+(((-1.0)*r12*x12195)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12195))+((r01*x12197))+(((-1.0)*r00*x12198)));
evalcond[4]=(((cj2*sj1))+((r12*x12194))+((cj1*sj2))+((r11*x12196))+(((-1.0)*gconst11*r10*x12195)));
evalcond[5]=(((r21*x12196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12194))+(((-1.0)*gconst11*r20*x12195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12199=((1.0)*gconst11);
CheckValue<IkReal> x12200=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12199)))),-1);
if(!x12200.valid){
continue;
}
CheckValue<IkReal> x12201 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12200.value)))+(x12201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12202=IKcos(j4);
IkReal x12203=IKsin(j4);
IkReal x12204=((1.0)*x12202);
IkReal x12205=(gconst10*x12202);
IkReal x12206=(gconst10*x12203);
IkReal x12207=((1.0)*gconst11*x12203);
evalcond[0]=(((r02*x12203))+(((-1.0)*gconst11*r00*x12204))+((r01*x12205)));
evalcond[1]=((((-1.0)*r22*x12204))+((r21*x12206))+(((-1.0)*r20*x12207)));
evalcond[2]=((((-1.0)*r12*x12204))+(((-1.0)*r10*x12207))+((r11*x12206)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12204))+(((-1.0)*r00*x12207))+((r01*x12206)));
evalcond[4]=(((cj2*sj1))+((r12*x12203))+(((-1.0)*gconst11*r10*x12204))+((cj1*sj2))+((r11*x12205)));
evalcond[5]=(((r22*x12203))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12204))+((r21*x12205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12208=((-1.0)*r11);
IkReal x12209=((-1.0)*r10);
CheckValue<IkReal> x12211 = IKatan2WithCheck(IkReal(x12208),IkReal(x12209),IKFAST_ATAN2_MAGTHRESH);
if(!x12211.valid){
continue;
}
IkReal x12210=((1.0)*(x12211.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12210)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12209);
rxp1_1=(px*r21);
rxp1_2=(px*x12208);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12210)));
IkReal gconst10=x12208;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12212=((-1.0)*r11);
IkReal x12213=((-1.0)*r10);
CheckValue<IkReal> x12215 = IKatan2WithCheck(IkReal(x12212),IkReal(x12213),IKFAST_ATAN2_MAGTHRESH);
if(!x12215.valid){
continue;
}
IkReal x12214=((1.0)*(x12215.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12214)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12213);
rxp1_1=(px*r21);
rxp1_2=(px*x12212);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12214)));
IkReal gconst10=x12212;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12216=((-1.0)*r11);
IkReal x12217=((-1.0)*r10);
CheckValue<IkReal> x12219 = IKatan2WithCheck(IkReal(x12216),IkReal(x12217),IKFAST_ATAN2_MAGTHRESH);
if(!x12219.valid){
continue;
}
IkReal x12218=((1.0)*(x12219.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12218)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12217);
rxp1_1=(px*r21);
rxp1_2=(px*x12216);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12218)));
IkReal gconst10=x12216;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12222=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12222.valid){
continue;
}
IkReal x12220=x12222.value;
IkReal x12221=(sj0*x12220);
cj4array[0]=(((cj1*sj2*x12221))+((cj2*sj1*x12221)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12223=IKsin(j4);
IkReal x12224=IKcos(j4);
IkReal x12225=(gconst10*r21);
IkReal x12226=((1.0)*x12224);
IkReal x12227=((1.0)*gconst11*x12223);
evalcond[0]=(r02*x12223);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12226)));
evalcond[2]=(((x12223*x12225))+(((-1.0)*r20*x12227)));
evalcond[3]=(((gconst10*r11*x12223))+(((-1.0)*r10*x12227)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12226))+((x12224*x12225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12229=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12229.valid){
continue;
}
IkReal x12228=x12229.value;
cj4array[0]=(((cj1*cj2*x12228))+(((-1.0)*sj1*sj2*x12228)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12230=IKsin(j4);
IkReal x12231=IKcos(j4);
IkReal x12232=((1.0)*sj0);
IkReal x12233=(gconst10*x12230);
IkReal x12234=((1.0)*x12231);
IkReal x12235=((1.0)*gconst11*x12230);
evalcond[0]=(r02*x12230);
evalcond[1]=((((-1.0)*r02*x12234))+(((-1.0)*x12232)));
evalcond[2]=((((-1.0)*r20*x12235))+((r21*x12233)));
evalcond[3]=(((r11*x12233))+(((-1.0)*r10*x12235)));
evalcond[4]=((((-1.0)*cj1*sj2*x12232))+(((-1.0)*gconst11*r10*x12234))+((gconst10*r11*x12231))+(((-1.0)*cj2*sj1*x12232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12236=IKPowWithIntegerCheck(r02,-1);
if(!x12236.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12236.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12237=IKsin(j4);
IkReal x12238=IKcos(j4);
IkReal x12239=(gconst10*r21);
IkReal x12240=((1.0)*cj1);
IkReal x12241=(gconst10*r11);
IkReal x12242=((1.0)*gconst11*x12237);
IkReal x12243=((1.0)*gconst11*x12238);
evalcond[0]=(r02*x12237);
evalcond[1]=((((-1.0)*r20*x12242))+((x12237*x12239)));
evalcond[2]=((((-1.0)*r10*x12242))+((x12237*x12241)));
evalcond[3]=(((x12238*x12239))+((sj1*sj2))+(((-1.0)*r20*x12243))+(((-1.0)*cj2*x12240)));
evalcond[4]=((((-1.0)*r10*x12243))+((x12238*x12241))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12244=((1.0)*gconst11);
CheckValue<IkReal> x12245 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12244))+((gconst10*r11*sj0))+(((-1.0)*cj0*r00*x12244))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12245.valid){
continue;
}
CheckValue<IkReal> x12246=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12245.value)+(((1.5707963267949)*(x12246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12247=IKsin(j4);
IkReal x12248=IKcos(j4);
IkReal x12249=((1.0)*gconst11);
IkReal x12250=((1.0)*cj2);
IkReal x12251=((1.0)*sj0);
IkReal x12252=(cj1*sj2);
IkReal x12253=(gconst10*x12248);
IkReal x12254=(gconst10*x12247);
IkReal x12255=((1.0)*x12248);
evalcond[0]=((((-1.0)*r20*x12247*x12249))+((r21*x12254)));
evalcond[1]=(cj0+(((-1.0)*r10*x12247*x12249))+(((-1.0)*r12*x12255))+((r11*x12254)));
evalcond[2]=(((sj1*sj2))+((r21*x12253))+(((-1.0)*r20*x12248*x12249))+(((-1.0)*cj1*x12250)));
evalcond[3]=((((-1.0)*r00*x12247*x12249))+((r01*x12254))+(((-1.0)*r02*x12255))+(((-1.0)*x12251)));
evalcond[4]=((((-1.0)*cj0*sj1*x12250))+((r01*x12253))+(((-1.0)*cj0*x12252))+(((-1.0)*r00*x12248*x12249))+((r02*x12247)));
evalcond[5]=((((-1.0)*x12251*x12252))+(((-1.0)*r10*x12248*x12249))+((r11*x12253))+((r12*x12247))+(((-1.0)*sj0*sj1*x12250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12256=(gconst10*r21);
IkReal x12257=(gconst11*r20);
IkReal x12258=(sj1*sj2);
IkReal x12259=(cj1*cj2);
CheckValue<IkReal> x12260=IKPowWithIntegerCheck(IKsign(((((2.0)*x12256*x12257))+(((-1.0)*(x12257*x12257)))+(((-1.0)*(x12256*x12256)))+(((-1.0)*(r22*r22))))),-1);
if(!x12260.valid){
continue;
}
CheckValue<IkReal> x12261 = IKatan2WithCheck(IkReal((((r22*x12258))+(((-1.0)*r22*x12259)))),IkReal((((x12257*x12259))+((x12256*x12258))+(((-1.0)*x12257*x12258))+(((-1.0)*x12256*x12259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12260.value)))+(x12261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12262=IKsin(j4);
IkReal x12263=IKcos(j4);
IkReal x12264=((1.0)*cj2);
IkReal x12265=((1.0)*sj0);
IkReal x12266=(cj1*sj2);
IkReal x12267=((1.0)*x12263);
IkReal x12268=(gconst10*x12263);
IkReal x12269=(gconst10*x12262);
IkReal x12270=((1.0)*gconst11*x12262);
evalcond[0]=(((r21*x12269))+(((-1.0)*r22*x12267))+(((-1.0)*r20*x12270)));
evalcond[1]=((((-1.0)*r12*x12267))+cj0+((r11*x12269))+(((-1.0)*r10*x12270)));
evalcond[2]=(((r01*x12269))+(((-1.0)*r00*x12270))+(((-1.0)*r02*x12267))+(((-1.0)*x12265)));
evalcond[3]=((((-1.0)*gconst11*r20*x12267))+((sj1*sj2))+((r21*x12268))+(((-1.0)*cj1*x12264))+((r22*x12262)));
evalcond[4]=((((-1.0)*gconst11*r00*x12267))+(((-1.0)*cj0*sj1*x12264))+((r01*x12268))+(((-1.0)*cj0*x12266))+((r02*x12262)));
evalcond[5]=(((r12*x12262))+((r11*x12268))+(((-1.0)*x12265*x12266))+(((-1.0)*gconst11*r10*x12267))+(((-1.0)*sj0*sj1*x12264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12271=((1.0)*sj0);
IkReal x12272=((1.0)*gconst10);
CheckValue<IkReal> x12273 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12271)))),IkReal(((((-1.0)*cj0*r01*x12272))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12271))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12273.valid){
continue;
}
CheckValue<IkReal> x12274=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12272)))),-1);
if(!x12274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12273.value)+(((1.5707963267949)*(x12274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12275=IKsin(j4);
IkReal x12276=IKcos(j4);
IkReal x12277=((1.0)*cj2);
IkReal x12278=((1.0)*sj0);
IkReal x12279=(cj1*sj2);
IkReal x12280=((1.0)*x12276);
IkReal x12281=(gconst10*x12276);
IkReal x12282=(gconst10*x12275);
IkReal x12283=((1.0)*gconst11*x12275);
evalcond[0]=((((-1.0)*r22*x12280))+(((-1.0)*r20*x12283))+((r21*x12282)));
evalcond[1]=((((-1.0)*r10*x12283))+cj0+(((-1.0)*r12*x12280))+((r11*x12282)));
evalcond[2]=((((-1.0)*x12278))+((r01*x12282))+(((-1.0)*r00*x12283))+(((-1.0)*r02*x12280)));
evalcond[3]=((((-1.0)*gconst11*r20*x12280))+(((-1.0)*cj1*x12277))+((sj1*sj2))+((r22*x12275))+((r21*x12281)));
evalcond[4]=((((-1.0)*cj0*x12279))+(((-1.0)*gconst11*r00*x12280))+((r02*x12275))+((r01*x12281))+(((-1.0)*cj0*sj1*x12277)));
evalcond[5]=((((-1.0)*gconst11*r10*x12280))+(((-1.0)*x12278*x12279))+(((-1.0)*sj0*sj1*x12277))+((r11*x12281))+((r12*x12275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12284=((1.0)*gconst11);
CheckValue<IkReal> x12285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12285.valid){
continue;
}
CheckValue<IkReal> x12286=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12284)))),-1);
if(!x12286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12285.value)+(((1.5707963267949)*(x12286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12287=IKsin(j4);
IkReal x12288=IKcos(j4);
IkReal x12289=((1.0)*cj2);
IkReal x12290=((1.0)*sj0);
IkReal x12291=(cj1*sj2);
IkReal x12292=((1.0)*x12288);
IkReal x12293=(gconst10*x12288);
IkReal x12294=(gconst10*x12287);
IkReal x12295=((1.0)*gconst11*x12287);
evalcond[0]=(((r21*x12294))+(((-1.0)*r20*x12295))+(((-1.0)*r22*x12292)));
evalcond[1]=((((-1.0)*r10*x12295))+cj0+((r11*x12294))+(((-1.0)*r12*x12292)));
evalcond[2]=(((r01*x12294))+(((-1.0)*r00*x12295))+(((-1.0)*x12290))+(((-1.0)*r02*x12292)));
evalcond[3]=(((r21*x12293))+((r22*x12287))+(((-1.0)*cj1*x12289))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12292)));
evalcond[4]=(((r01*x12293))+((r02*x12287))+(((-1.0)*cj0*x12291))+(((-1.0)*cj0*sj1*x12289))+(((-1.0)*gconst11*r00*x12292)));
evalcond[5]=((((-1.0)*x12290*x12291))+(((-1.0)*sj0*sj1*x12289))+((r11*x12293))+(((-1.0)*gconst11*r10*x12292))+((r12*x12287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12296=((-1.0)*r11);
CheckValue<IkReal> x12299 = IKatan2WithCheck(IkReal(x12296),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12299.valid){
continue;
}
IkReal x12297=((1.0)*(x12299.value));
IkReal x12298=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12297)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12297)));
IkReal gconst10=(x12296*x12298);
IkReal gconst11=((1.0)*r10*x12298);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12300=gconst10*gconst10;
IkReal x12301=gconst11*gconst11;
IkReal x12302=(gconst10*r21);
IkReal x12303=(cj3*r00);
IkReal x12304=(r00*sj3);
IkReal x12305=((1.0)*gconst11);
IkReal x12306=(gconst10*r20);
IkReal x12307=(r01*sj3);
IkReal x12308=(cj3*gconst11*r01);
IkReal x12309=(r21*x12300);
IkReal x12310=(r20*x12301);
CheckValue<IkReal> x12311 = IKatan2WithCheck(IkReal((((r22*x12308))+((gconst10*r22*x12303)))),IkReal((((x12302*x12308))+((x12303*x12309))+(((-1.0)*cj3*r01*x12310))+(((-1.0)*x12303*x12305*x12306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12311.valid){
continue;
}
CheckValue<IkReal> x12312=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12302*x12304*x12305))+((x12307*x12309))+(((-1.0)*x12305*x12306*x12307))+((x12304*x12310))+((r02*r22*sj3)))),-1);
if(!x12312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12311.value)+(((1.5707963267949)*(x12312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12313=IKsin(j4);
IkReal x12314=IKcos(j4);
IkReal x12315=(sj1*sj2);
IkReal x12316=(gconst10*sj3);
IkReal x12317=(cj3*gconst10);
IkReal x12318=(gconst11*r20);
IkReal x12319=(gconst11*r21);
IkReal x12320=(gconst11*r00);
IkReal x12321=(cj3*gconst11);
IkReal x12322=(gconst11*r10);
IkReal x12323=((1.0)*cj1);
IkReal x12324=(cj2*sj1);
IkReal x12325=(gconst11*sj3);
IkReal x12326=(cj2*x12323);
IkReal x12327=((1.0)*x12314);
IkReal x12328=((1.0)*x12313);
IkReal x12329=(gconst10*x12313);
IkReal x12330=(cj3*x12313);
IkReal x12331=(sj3*x12314);
evalcond[0]=((((-1.0)*r22*x12327))+((r21*x12329))+(((-1.0)*x12318*x12328)));
evalcond[1]=((((-1.0)*r12*x12327))+((r11*x12329))+(((-1.0)*x12322*x12328)));
evalcond[2]=((-1.0)+(((-1.0)*x12320*x12328))+((r01*x12329))+(((-1.0)*r02*x12327)));
evalcond[3]=(((r01*x12325))+(((-1.0)*cj3*x12320*x12327))+((r00*x12316))+((r01*x12314*x12317))+((r02*x12330)));
evalcond[4]=(((r01*x12321))+(((-1.0)*r01*x12316*x12327))+((r00*x12317))+(((-1.0)*r02*sj3*x12328))+((x12320*x12331)));
evalcond[5]=(((sj3*x12319))+((cj1*sj2))+x12324+(((-1.0)*cj3*x12318*x12327))+((r22*x12330))+((r20*x12316))+((r21*x12314*x12317)));
evalcond[6]=(((r10*x12316))+((r11*x12314*x12317))+x12315+(((-1.0)*x12326))+(((-1.0)*r10*x12321*x12327))+((r12*x12330))+((r11*x12325)));
evalcond[7]=(x12315+(((-1.0)*x12326))+((x12318*x12331))+(((-1.0)*r22*sj3*x12328))+(((-1.0)*r21*x12316*x12327))+((r20*x12317))+((cj3*x12319)));
evalcond[8]=(((r10*x12317))+((x12322*x12331))+(((-1.0)*r12*sj3*x12328))+(((-1.0)*sj2*x12323))+(((-1.0)*r11*x12316*x12327))+((r11*x12321))+(((-1.0)*x12324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12332 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12332.valid){
continue;
}
CheckValue<IkReal> x12333=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12332.value)+(((1.5707963267949)*(x12333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12334=IKsin(j4);
IkReal x12335=IKcos(j4);
IkReal x12336=(sj1*sj2);
IkReal x12337=(gconst10*sj3);
IkReal x12338=(cj3*gconst10);
IkReal x12339=(gconst11*r20);
IkReal x12340=(gconst11*r21);
IkReal x12341=(gconst11*r00);
IkReal x12342=(cj3*gconst11);
IkReal x12343=(gconst11*r10);
IkReal x12344=((1.0)*cj1);
IkReal x12345=(cj2*sj1);
IkReal x12346=(gconst11*sj3);
IkReal x12347=(cj2*x12344);
IkReal x12348=((1.0)*x12335);
IkReal x12349=((1.0)*x12334);
IkReal x12350=(gconst10*x12334);
IkReal x12351=(cj3*x12334);
IkReal x12352=(sj3*x12335);
evalcond[0]=((((-1.0)*x12339*x12349))+((r21*x12350))+(((-1.0)*r22*x12348)));
evalcond[1]=((((-1.0)*x12343*x12349))+(((-1.0)*r12*x12348))+((r11*x12350)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12348))+(((-1.0)*x12341*x12349))+((r01*x12350)));
evalcond[3]=(((r00*x12337))+((r01*x12335*x12338))+((r01*x12346))+((r02*x12351))+(((-1.0)*cj3*x12341*x12348)));
evalcond[4]=(((x12341*x12352))+((r00*x12338))+((r01*x12342))+(((-1.0)*r01*x12337*x12348))+(((-1.0)*r02*sj3*x12349)));
evalcond[5]=((((-1.0)*cj3*x12339*x12348))+((r20*x12337))+((cj1*sj2))+x12345+((sj3*x12340))+((r22*x12351))+((r21*x12335*x12338)));
evalcond[6]=((((-1.0)*r10*x12342*x12348))+x12336+(((-1.0)*x12347))+((r11*x12335*x12338))+((r11*x12346))+((r10*x12337))+((r12*x12351)));
evalcond[7]=(((x12339*x12352))+((r20*x12338))+x12336+(((-1.0)*x12347))+((cj3*x12340))+(((-1.0)*r21*x12337*x12348))+(((-1.0)*r22*sj3*x12349)));
evalcond[8]=((((-1.0)*r11*x12337*x12348))+((x12343*x12352))+(((-1.0)*sj2*x12344))+((r11*x12342))+((r10*x12338))+(((-1.0)*r12*sj3*x12349))+(((-1.0)*x12345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12353=((-1.0)*r11);
CheckValue<IkReal> x12356 = IKatan2WithCheck(IkReal(x12353),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12356.valid){
continue;
}
IkReal x12354=((1.0)*(x12356.value));
IkReal x12355=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12354)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12354)));
IkReal gconst10=(x12353*x12355);
IkReal gconst11=((1.0)*r10*x12355);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12357=gconst10*gconst10;
IkReal x12358=gconst11*gconst11;
IkReal x12359=(gconst10*r21);
IkReal x12360=(cj3*r00);
IkReal x12361=(r00*sj3);
IkReal x12362=((1.0)*gconst11);
IkReal x12363=(gconst10*r20);
IkReal x12364=(r01*sj3);
IkReal x12365=(cj3*gconst11*r01);
IkReal x12366=(r21*x12357);
IkReal x12367=(r20*x12358);
CheckValue<IkReal> x12368 = IKatan2WithCheck(IkReal((((r22*x12365))+((gconst10*r22*x12360)))),IkReal(((((-1.0)*cj3*r01*x12367))+(((-1.0)*x12360*x12362*x12363))+((x12360*x12366))+((x12359*x12365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12368.valid){
continue;
}
CheckValue<IkReal> x12369=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12362*x12363*x12364))+((x12364*x12366))+(((-1.0)*x12359*x12361*x12362))+((x12361*x12367))+((r02*r22*sj3)))),-1);
if(!x12369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12368.value)+(((1.5707963267949)*(x12369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12370=IKsin(j4);
IkReal x12371=IKcos(j4);
IkReal x12372=(cj2*sj1);
IkReal x12373=(cj1*sj2);
IkReal x12374=(gconst10*sj3);
IkReal x12375=(cj3*gconst10);
IkReal x12376=(gconst11*r20);
IkReal x12377=(gconst11*r21);
IkReal x12378=(gconst11*r00);
IkReal x12379=(sj1*sj2);
IkReal x12380=(cj3*gconst11);
IkReal x12381=(gconst11*r10);
IkReal x12382=(cj1*cj2);
IkReal x12383=(gconst11*sj3);
IkReal x12384=((1.0)*x12371);
IkReal x12385=((1.0)*x12370);
IkReal x12386=(gconst10*x12370);
IkReal x12387=(cj3*x12370);
IkReal x12388=(sj3*x12371);
IkReal x12389=(x12372+x12373);
evalcond[0]=((((-1.0)*x12376*x12385))+((r21*x12386))+(((-1.0)*r22*x12384)));
evalcond[1]=(((r11*x12386))+(((-1.0)*x12381*x12385))+(((-1.0)*r12*x12384)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12384))+((r01*x12386))+(((-1.0)*x12378*x12385)));
evalcond[3]=((((-1.0)*cj3*x12378*x12384))+((r02*x12387))+((r01*x12371*x12375))+((r01*x12383))+((r00*x12374)));
evalcond[4]=((((-1.0)*r01*x12374*x12384))+((r01*x12380))+(((-1.0)*r02*sj3*x12385))+((x12378*x12388))+((r00*x12375)));
evalcond[5]=((((-1.0)*cj3*x12376*x12384))+x12389+((sj3*x12377))+((r21*x12371*x12375))+((r20*x12374))+((r22*x12387)));
evalcond[6]=(((r12*x12387))+((r11*x12383))+((r10*x12374))+x12382+(((-1.0)*r10*x12380*x12384))+((r11*x12371*x12375))+(((-1.0)*x12379)));
evalcond[7]=(((r11*x12380))+((x12381*x12388))+((r10*x12375))+x12389+(((-1.0)*r12*sj3*x12385))+(((-1.0)*r11*x12374*x12384)));
evalcond[8]=(((x12376*x12388))+x12379+(((-1.0)*r22*sj3*x12385))+(((-1.0)*r21*x12374*x12384))+((cj3*x12377))+(((-1.0)*x12382))+((r20*x12375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12390=((1.0)*gconst11);
CheckValue<IkReal> x12391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12390))+(((-1.0)*gconst10*r20)))),-1);
if(!x12391.valid){
continue;
}
CheckValue<IkReal> x12392 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12391.value)))+(x12392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12393=IKsin(j4);
IkReal x12394=IKcos(j4);
IkReal x12395=(cj2*sj1);
IkReal x12396=(cj1*sj2);
IkReal x12397=(gconst10*sj3);
IkReal x12398=(cj3*gconst10);
IkReal x12399=(gconst11*r20);
IkReal x12400=(gconst11*r21);
IkReal x12401=(gconst11*r00);
IkReal x12402=(sj1*sj2);
IkReal x12403=(cj3*gconst11);
IkReal x12404=(gconst11*r10);
IkReal x12405=(cj1*cj2);
IkReal x12406=(gconst11*sj3);
IkReal x12407=((1.0)*x12394);
IkReal x12408=((1.0)*x12393);
IkReal x12409=(gconst10*x12393);
IkReal x12410=(cj3*x12393);
IkReal x12411=(sj3*x12394);
IkReal x12412=(x12395+x12396);
evalcond[0]=((((-1.0)*x12399*x12408))+(((-1.0)*r22*x12407))+((r21*x12409)));
evalcond[1]=((((-1.0)*r12*x12407))+((r11*x12409))+(((-1.0)*x12404*x12408)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12407))+((r01*x12409))+(((-1.0)*x12401*x12408)));
evalcond[3]=(((r01*x12394*x12398))+((r00*x12397))+(((-1.0)*cj3*x12401*x12407))+((r02*x12410))+((r01*x12406)));
evalcond[4]=((((-1.0)*r01*x12397*x12407))+((r00*x12398))+((x12401*x12411))+(((-1.0)*r02*sj3*x12408))+((r01*x12403)));
evalcond[5]=(((r21*x12394*x12398))+(((-1.0)*cj3*x12399*x12407))+((r20*x12397))+((sj3*x12400))+((r22*x12410))+x12412);
evalcond[6]=(((r10*x12397))+((r12*x12410))+(((-1.0)*r10*x12403*x12407))+x12405+((r11*x12394*x12398))+((r11*x12406))+(((-1.0)*x12402)));
evalcond[7]=(((x12404*x12411))+(((-1.0)*r12*sj3*x12408))+((r10*x12398))+(((-1.0)*r11*x12397*x12407))+x12412+((r11*x12403)));
evalcond[8]=(((r20*x12398))+((x12399*x12411))+((cj3*x12400))+(((-1.0)*r21*x12397*x12407))+x12402+(((-1.0)*r22*sj3*x12408))+(((-1.0)*x12405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12413=((-1.0)*r11);
IkReal x12414=((-1.0)*r10);
CheckValue<IkReal> x12416 = IKatan2WithCheck(IkReal(x12413),IkReal(x12414),IKFAST_ATAN2_MAGTHRESH);
if(!x12416.valid){
continue;
}
IkReal x12415=((1.0)*(x12416.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12415)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12414);
rxp1_1=(px*r21);
rxp1_2=(px*x12413);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12415)));
IkReal gconst10=x12413;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12417=((-1.0)*r11);
IkReal x12418=((-1.0)*r10);
CheckValue<IkReal> x12420 = IKatan2WithCheck(IkReal(x12417),IkReal(x12418),IKFAST_ATAN2_MAGTHRESH);
if(!x12420.valid){
continue;
}
IkReal x12419=((1.0)*(x12420.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12419)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12418);
rxp1_1=(px*r21);
rxp1_2=(px*x12417);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12419)));
IkReal gconst10=x12417;
IkReal gconst11=((1.0)*r10);
IkReal x12421=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12421))+(((-1.0)*r10*r20*x12421)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12422=((-1.0)*r11);
IkReal x12423=((-1.0)*r10);
CheckValue<IkReal> x12425 = IKatan2WithCheck(IkReal(x12422),IkReal(x12423),IKFAST_ATAN2_MAGTHRESH);
if(!x12425.valid){
continue;
}
IkReal x12424=((1.0)*(x12425.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12424)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12423);
rxp1_1=(px*r21);
rxp1_2=(px*x12422);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12424)));
IkReal gconst10=x12422;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12427=IKPowWithIntegerCheck(r02,-1);
if(!x12427.valid){
continue;
}
IkReal x12426=x12427.value;
CheckValue<IkReal> x12428=IKPowWithIntegerCheck(cj3,-1);
if(!x12428.valid){
continue;
}
if( IKabs((x12426*(x12428.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12426)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12426*(x12428.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12426))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12426*(x12428.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12426));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12429=IKsin(j4);
IkReal x12430=IKcos(j4);
IkReal x12431=(cj3*r10);
IkReal x12432=((1.0)*gconst11);
IkReal x12433=(sj1*sj2);
IkReal x12434=(gconst11*sj3);
IkReal x12435=(cj3*r11);
IkReal x12436=(cj2*sj1);
IkReal x12437=(gconst10*r20);
IkReal x12438=(gconst10*sj3);
IkReal x12439=((1.0)*cj0);
IkReal x12440=((1.0)*sj0);
IkReal x12441=(cj1*sj2);
IkReal x12442=(cj3*r21);
IkReal x12443=((1.0)*cj1*cj2);
IkReal x12444=(r20*x12430);
IkReal x12445=(gconst10*x12429);
IkReal x12446=(gconst10*x12430);
IkReal x12447=(r02*x12429);
IkReal x12448=((1.0)*x12430);
evalcond[0]=((((-1.0)*r02*x12448))+(((-1.0)*x12440)));
evalcond[1]=(((r21*x12445))+(((-1.0)*r20*x12429*x12432)));
evalcond[2]=(cj0+((r11*x12445))+(((-1.0)*r10*x12429*x12432)));
evalcond[3]=(((cj0*x12433))+((cj3*x12447))+(((-1.0)*cj1*cj2*x12439)));
evalcond[4]=((((-1.0)*sj3*x12447))+(((-1.0)*x12436*x12439))+(((-1.0)*x12439*x12441)));
evalcond[5]=(((r21*x12434))+((x12442*x12446))+x12436+x12441+((sj3*x12437))+(((-1.0)*cj3*x12432*x12444)));
evalcond[6]=(((x12434*x12444))+(((-1.0)*r21*x12438*x12448))+(((-1.0)*x12443))+((cj3*x12437))+x12433+((gconst11*x12442)));
evalcond[7]=((((-1.0)*x12430*x12431*x12432))+((sj0*x12433))+((r10*x12438))+((x12435*x12446))+((r11*x12434))+(((-1.0)*cj1*cj2*x12440)));
evalcond[8]=((((-1.0)*x12440*x12441))+((r10*x12430*x12434))+((gconst10*x12431))+(((-1.0)*x12436*x12440))+((gconst11*x12435))+(((-1.0)*r11*x12438*x12448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12449=((1.0)*r20);
IkReal x12450=((1.0)*gconst11);
CheckValue<IkReal> x12451=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12450))),-1);
if(!x12451.valid){
continue;
}
CheckValue<IkReal> x12452=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12449))+((cj3*gconst10*r21))),-1);
if(!x12452.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12451.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12452.value)*(((((-1.0)*gconst10*sj3*x12449))+(((-1.0)*r21*sj3*x12450))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12451.value)))+IKsqr(((x12452.value)*(((((-1.0)*gconst10*sj3*x12449))+(((-1.0)*r21*sj3*x12450))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12451.value)), ((x12452.value)*(((((-1.0)*gconst10*sj3*x12449))+(((-1.0)*r21*sj3*x12450))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12453=IKsin(j4);
IkReal x12454=IKcos(j4);
IkReal x12455=(cj3*r10);
IkReal x12456=((1.0)*gconst11);
IkReal x12457=(sj1*sj2);
IkReal x12458=(gconst11*sj3);
IkReal x12459=(cj3*r11);
IkReal x12460=(cj2*sj1);
IkReal x12461=(gconst10*r20);
IkReal x12462=(gconst10*sj3);
IkReal x12463=((1.0)*cj0);
IkReal x12464=((1.0)*sj0);
IkReal x12465=(cj1*sj2);
IkReal x12466=(cj3*r21);
IkReal x12467=((1.0)*cj1*cj2);
IkReal x12468=(r20*x12454);
IkReal x12469=(gconst10*x12453);
IkReal x12470=(gconst10*x12454);
IkReal x12471=(r02*x12453);
IkReal x12472=((1.0)*x12454);
evalcond[0]=((((-1.0)*r02*x12472))+(((-1.0)*x12464)));
evalcond[1]=((((-1.0)*r20*x12453*x12456))+((r21*x12469)));
evalcond[2]=((((-1.0)*r10*x12453*x12456))+cj0+((r11*x12469)));
evalcond[3]=(((cj3*x12471))+((cj0*x12457))+(((-1.0)*cj1*cj2*x12463)));
evalcond[4]=((((-1.0)*sj3*x12471))+(((-1.0)*x12460*x12463))+(((-1.0)*x12463*x12465)));
evalcond[5]=(((sj3*x12461))+(((-1.0)*cj3*x12456*x12468))+x12465+x12460+((x12466*x12470))+((r21*x12458)));
evalcond[6]=(((gconst11*x12466))+((cj3*x12461))+(((-1.0)*r21*x12462*x12472))+(((-1.0)*x12467))+((x12458*x12468))+x12457);
evalcond[7]=(((r11*x12458))+((x12459*x12470))+((sj0*x12457))+(((-1.0)*cj1*cj2*x12464))+((r10*x12462))+(((-1.0)*x12454*x12455*x12456)));
evalcond[8]=((((-1.0)*x12464*x12465))+((r10*x12454*x12458))+(((-1.0)*x12460*x12464))+(((-1.0)*r11*x12462*x12472))+((gconst10*x12455))+((gconst11*x12459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12473=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12473.valid){
continue;
}
CheckValue<IkReal> x12474=IKPowWithIntegerCheck(r02,-1);
if(!x12474.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12473.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12474.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12473.value)))+IKsqr(((-1.0)*sj0*(x12474.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12473.value)), ((-1.0)*sj0*(x12474.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12475=IKsin(j4);
IkReal x12476=IKcos(j4);
IkReal x12477=(cj3*r10);
IkReal x12478=((1.0)*gconst11);
IkReal x12479=(sj1*sj2);
IkReal x12480=(gconst11*sj3);
IkReal x12481=(cj3*r11);
IkReal x12482=(cj2*sj1);
IkReal x12483=(gconst10*r20);
IkReal x12484=(gconst10*sj3);
IkReal x12485=((1.0)*cj0);
IkReal x12486=((1.0)*sj0);
IkReal x12487=(cj1*sj2);
IkReal x12488=(cj3*r21);
IkReal x12489=((1.0)*cj1*cj2);
IkReal x12490=(r20*x12476);
IkReal x12491=(gconst10*x12475);
IkReal x12492=(gconst10*x12476);
IkReal x12493=(r02*x12475);
IkReal x12494=((1.0)*x12476);
evalcond[0]=((((-1.0)*x12486))+(((-1.0)*r02*x12494)));
evalcond[1]=(((r21*x12491))+(((-1.0)*r20*x12475*x12478)));
evalcond[2]=(cj0+(((-1.0)*r10*x12475*x12478))+((r11*x12491)));
evalcond[3]=(((cj3*x12493))+((cj0*x12479))+(((-1.0)*cj1*cj2*x12485)));
evalcond[4]=((((-1.0)*sj3*x12493))+(((-1.0)*x12482*x12485))+(((-1.0)*x12485*x12487)));
evalcond[5]=(((x12488*x12492))+((sj3*x12483))+(((-1.0)*cj3*x12478*x12490))+x12482+x12487+((r21*x12480)));
evalcond[6]=((((-1.0)*x12489))+(((-1.0)*r21*x12484*x12494))+((cj3*x12483))+((x12480*x12490))+((gconst11*x12488))+x12479);
evalcond[7]=((((-1.0)*x12476*x12477*x12478))+(((-1.0)*cj1*cj2*x12486))+((r11*x12480))+((sj0*x12479))+((r10*x12484))+((x12481*x12492)));
evalcond[8]=(((gconst10*x12477))+((r10*x12476*x12480))+(((-1.0)*r11*x12484*x12494))+(((-1.0)*x12482*x12486))+((gconst11*x12481))+(((-1.0)*x12486*x12487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12495=((-1.0)*r11);
CheckValue<IkReal> x12498 = IKatan2WithCheck(IkReal(x12495),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12498.valid){
continue;
}
IkReal x12496=((1.0)*(x12498.value));
IkReal x12497=x11821;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12496)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12496)));
IkReal gconst10=(x12495*x12497);
IkReal gconst11=((1.0)*r10*x12497);
IkReal x12499=r12*r12;
IkReal x12500=((1.0)*sj0);
IkReal x12501=(cj0*r02);
IkReal x12502=x11821;
j4eval[0]=((IKabs((((sj0*x12499*x12502))+(((-1.0)*x12500*x12502))+((r12*x12501*x12502)))))+(IKabs(((((-1.0)*r12*x12500))+(((-1.0)*x12501))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12503=((1.0)*r12);
IkReal x12504=(sj1*sj2);
IkReal x12505=((1.0)*r21);
IkReal x12506=(cj3*gconst11);
IkReal x12507=(r11*sj3);
IkReal x12508=(gconst11*r20);
IkReal x12509=((1.0)*sj3);
IkReal x12510=(cj1*cj2);
IkReal x12511=(gconst10*r21*sj3);
IkReal x12512=(cj3*gconst10*r20);
CheckValue<IkReal> x12513=IKPowWithIntegerCheck((((gconst10*x12507*x12508))+(((-1.0)*x12505*x12507*(gconst10*gconst10)))+((gconst11*r10*x12511))+(((-1.0)*gconst11*r10*x12508*x12509))),-1);
if(!x12513.valid){
continue;
}
CheckValue<IkReal> x12514=IKPowWithIntegerCheck((((sj3*x12508))+(((-1.0)*gconst10*sj3*x12505))),-1);
if(!x12514.valid){
continue;
}
if( IKabs(((x12513.value)*((((r12*x12510))+(((-1.0)*r21*x12503*x12506))+(((-1.0)*cj0*x12508*x12509))+(((-1.0)*x12503*x12504))+(((-1.0)*x12503*x12512))+((cj0*x12511)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12514.value)*(((((-1.0)*x12504))+(((-1.0)*x12512))+(((-1.0)*x12505*x12506))+x12510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12513.value)*((((r12*x12510))+(((-1.0)*r21*x12503*x12506))+(((-1.0)*cj0*x12508*x12509))+(((-1.0)*x12503*x12504))+(((-1.0)*x12503*x12512))+((cj0*x12511))))))+IKsqr(((x12514.value)*(((((-1.0)*x12504))+(((-1.0)*x12512))+(((-1.0)*x12505*x12506))+x12510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12513.value)*((((r12*x12510))+(((-1.0)*r21*x12503*x12506))+(((-1.0)*cj0*x12508*x12509))+(((-1.0)*x12503*x12504))+(((-1.0)*x12503*x12512))+((cj0*x12511))))), ((x12514.value)*(((((-1.0)*x12504))+(((-1.0)*x12512))+(((-1.0)*x12505*x12506))+x12510))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12515=IKsin(j4);
IkReal x12516=IKcos(j4);
IkReal x12517=(cj3*r10);
IkReal x12518=(gconst11*r20);
IkReal x12519=(gconst11*sj3);
IkReal x12520=(sj1*sj2);
IkReal x12521=(cj3*r11);
IkReal x12522=(r10*sj3);
IkReal x12523=(gconst10*r01);
IkReal x12524=(gconst10*sj3);
IkReal x12525=(cj2*sj1);
IkReal x12526=((1.0)*sj0);
IkReal x12527=(cj1*sj2);
IkReal x12528=(gconst10*r21);
IkReal x12529=(cj3*gconst10);
IkReal x12530=(cj3*gconst11);
IkReal x12531=((1.0)*cj0);
IkReal x12532=((1.0)*x12515);
IkReal x12533=((1.0)*cj1*cj2);
IkReal x12534=(gconst11*x12516);
IkReal x12535=(sj3*x12516);
IkReal x12536=(gconst10*x12515);
IkReal x12537=((1.0)*x12516);
IkReal x12538=(cj3*x12516);
IkReal x12539=(cj3*x12515);
evalcond[0]=(((x12515*x12528))+(((-1.0)*x12518*x12532)));
evalcond[1]=(((r11*x12536))+cj0+(((-1.0)*gconst11*r10*x12532))+(((-1.0)*r12*x12537)));
evalcond[2]=((((-1.0)*x12526))+(((-1.0)*r02*x12537))+((x12515*x12523))+(((-1.0)*gconst11*r00*x12532)));
evalcond[3]=((((-1.0)*cj3*x12518*x12537))+((x12528*x12538))+((r20*x12524))+((r21*x12519))+x12527+x12525);
evalcond[4]=((((-1.0)*r21*x12524*x12537))+((r21*x12530))+((r20*x12529))+x12520+(((-1.0)*x12533))+((x12518*x12535)));
evalcond[5]=(((cj0*x12520))+(((-1.0)*cj1*cj2*x12531))+((r01*x12519))+((x12523*x12538))+((r02*x12539))+((r00*x12524))+(((-1.0)*r00*x12530*x12537)));
evalcond[6]=(((sj0*x12520))+((gconst10*x12522))+(((-1.0)*x12517*x12534))+((gconst10*x12516*x12521))+((r12*x12539))+((r11*x12519))+(((-1.0)*cj1*cj2*x12526)));
evalcond[7]=((((-1.0)*x12527*x12531))+(((-1.0)*x12525*x12531))+(((-1.0)*x12523*x12535))+((r00*x12516*x12519))+(((-1.0)*r02*sj3*x12532))+((r00*x12529))+((r01*x12530)));
evalcond[8]=(((gconst11*x12521))+(((-1.0)*r12*sj3*x12532))+((r10*x12516*x12519))+(((-1.0)*x12525*x12526))+(((-1.0)*x12526*x12527))+((gconst10*x12517))+(((-1.0)*r11*x12524*x12537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12540=((1.0)*sj0);
IkReal x12541=((1.0)*gconst10);
CheckValue<IkReal> x12542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12541))+(((-1.0)*gconst11*r21)))),-1);
if(!x12542.valid){
continue;
}
CheckValue<IkReal> x12543 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12540)))),IkReal(((((-1.0)*gconst10*r11*x12540))+(((-1.0)*cj0*r01*x12541))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12542.value)))+(x12543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12544=IKsin(j4);
IkReal x12545=IKcos(j4);
IkReal x12546=(cj3*r10);
IkReal x12547=(gconst11*r20);
IkReal x12548=(gconst11*sj3);
IkReal x12549=(sj1*sj2);
IkReal x12550=(cj3*r11);
IkReal x12551=(r10*sj3);
IkReal x12552=(gconst10*r01);
IkReal x12553=(gconst10*sj3);
IkReal x12554=(cj2*sj1);
IkReal x12555=((1.0)*sj0);
IkReal x12556=(cj1*sj2);
IkReal x12557=(gconst10*r21);
IkReal x12558=(cj3*gconst10);
IkReal x12559=(cj3*gconst11);
IkReal x12560=((1.0)*cj0);
IkReal x12561=((1.0)*x12544);
IkReal x12562=((1.0)*cj1*cj2);
IkReal x12563=(gconst11*x12545);
IkReal x12564=(sj3*x12545);
IkReal x12565=(gconst10*x12544);
IkReal x12566=((1.0)*x12545);
IkReal x12567=(cj3*x12545);
IkReal x12568=(cj3*x12544);
evalcond[0]=((((-1.0)*x12547*x12561))+((x12544*x12557)));
evalcond[1]=(((r11*x12565))+(((-1.0)*gconst11*r10*x12561))+cj0+(((-1.0)*r12*x12566)));
evalcond[2]=((((-1.0)*gconst11*r00*x12561))+(((-1.0)*r02*x12566))+((x12544*x12552))+(((-1.0)*x12555)));
evalcond[3]=(((r20*x12553))+(((-1.0)*cj3*x12547*x12566))+((x12557*x12567))+x12556+x12554+((r21*x12548)));
evalcond[4]=(((x12547*x12564))+((r20*x12558))+(((-1.0)*r21*x12553*x12566))+((r21*x12559))+x12549+(((-1.0)*x12562)));
evalcond[5]=(((r01*x12548))+((r00*x12553))+((x12552*x12567))+((cj0*x12549))+(((-1.0)*cj1*cj2*x12560))+((r02*x12568))+(((-1.0)*r00*x12559*x12566)));
evalcond[6]=(((r12*x12568))+((gconst10*x12551))+((r11*x12548))+((sj0*x12549))+(((-1.0)*cj1*cj2*x12555))+(((-1.0)*x12546*x12563))+((gconst10*x12545*x12550)));
evalcond[7]=(((r01*x12559))+((r00*x12558))+(((-1.0)*x12556*x12560))+(((-1.0)*r02*sj3*x12561))+(((-1.0)*x12552*x12564))+((r00*x12545*x12548))+(((-1.0)*x12554*x12560)));
evalcond[8]=(((r10*x12545*x12548))+(((-1.0)*x12555*x12556))+((gconst10*x12546))+(((-1.0)*r11*x12553*x12566))+(((-1.0)*x12554*x12555))+((gconst11*x12550))+(((-1.0)*r12*sj3*x12561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12569=gconst10*gconst10;
IkReal x12570=r21*r21;
IkReal x12571=gconst11*gconst11;
IkReal x12572=r20*r20;
IkReal x12573=((1.0)*cj3);
IkReal x12574=(r20*sj3);
IkReal x12575=(gconst10*gconst11);
IkReal x12576=(cj2*sj1);
IkReal x12577=(gconst10*r21);
IkReal x12578=(cj1*sj2);
IkReal x12579=((1.0)*gconst11*r20);
CheckValue<IkReal> x12580 = IKatan2WithCheck(IkReal((((r22*x12578))+((r22*x12576))+((gconst11*r21*r22*sj3))+((gconst10*r22*x12574)))),IkReal((((r21*x12569*x12574))+((sj3*x12570*x12575))+(((-1.0)*x12578*x12579))+(((-1.0)*x12576*x12579))+(((-1.0)*sj3*x12572*x12575))+((x12576*x12577))+(((-1.0)*r21*x12571*x12574))+((x12577*x12578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12580.valid){
continue;
}
CheckValue<IkReal> x12581=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12573*(r22*r22)))+(((-1.0)*x12569*x12570*x12573))+(((-1.0)*x12571*x12572*x12573))+(((2.0)*cj3*r20*r21*x12575)))),-1);
if(!x12581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12580.value)+(((1.5707963267949)*(x12581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12582=IKsin(j4);
IkReal x12583=IKcos(j4);
IkReal x12584=(cj3*r10);
IkReal x12585=(gconst11*r20);
IkReal x12586=(gconst11*sj3);
IkReal x12587=(sj1*sj2);
IkReal x12588=(gconst11*r00);
IkReal x12589=(cj3*r11);
IkReal x12590=(gconst10*sj3);
IkReal x12591=(cj2*sj1);
IkReal x12592=(cj3*r01);
IkReal x12593=((1.0)*sj0);
IkReal x12594=(cj1*sj2);
IkReal x12595=(cj3*r21);
IkReal x12596=(cj3*gconst10);
IkReal x12597=((1.0)*cj0);
IkReal x12598=((1.0)*x12583);
IkReal x12599=((1.0)*x12582);
IkReal x12600=((1.0)*cj1*cj2);
IkReal x12601=(cj3*x12582);
IkReal x12602=(gconst10*x12582);
IkReal x12603=(gconst10*x12583);
evalcond[0]=((((-1.0)*r22*x12598))+(((-1.0)*x12585*x12599))+((r21*x12602)));
evalcond[1]=(cj0+((r11*x12602))+(((-1.0)*r12*x12598))+(((-1.0)*gconst11*r10*x12599)));
evalcond[2]=((((-1.0)*x12588*x12599))+((r01*x12602))+(((-1.0)*r02*x12598))+(((-1.0)*x12593)));
evalcond[3]=(((x12595*x12603))+((r21*x12586))+((r22*x12601))+x12594+x12591+(((-1.0)*cj3*x12585*x12598))+((r20*x12590)));
evalcond[4]=(((gconst11*x12595))+(((-1.0)*x12600))+(((-1.0)*r22*sj3*x12599))+(((-1.0)*r21*x12590*x12598))+x12587+((r20*x12596))+((sj3*x12583*x12585)));
evalcond[5]=(((r01*x12586))+((x12592*x12603))+((cj0*x12587))+(((-1.0)*cj3*x12588*x12598))+((r00*x12590))+(((-1.0)*cj1*cj2*x12597))+((r02*x12601)));
evalcond[6]=(((sj0*x12587))+(((-1.0)*gconst11*x12584*x12598))+((r12*x12601))+(((-1.0)*cj1*cj2*x12593))+((r11*x12586))+((x12589*x12603))+((r10*x12590)));
evalcond[7]=((((-1.0)*x12591*x12597))+((r00*x12596))+((gconst11*x12592))+((r00*x12583*x12586))+(((-1.0)*r01*x12590*x12598))+(((-1.0)*r02*sj3*x12599))+(((-1.0)*x12594*x12597)));
evalcond[8]=((((-1.0)*x12591*x12593))+((gconst11*x12589))+((r10*x12583*x12586))+(((-1.0)*r11*x12590*x12598))+((gconst10*x12584))+(((-1.0)*x12593*x12594))+(((-1.0)*r12*sj3*x12599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12604=((1.0)*sj0);
IkReal x12605=((1.0)*gconst10);
CheckValue<IkReal> x12606=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12605)))),-1);
if(!x12606.valid){
continue;
}
CheckValue<IkReal> x12607 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12604)))),IkReal((((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12605))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12606.value)))+(x12607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12608=IKsin(j4);
IkReal x12609=IKcos(j4);
IkReal x12610=(cj3*r10);
IkReal x12611=(gconst11*r20);
IkReal x12612=(gconst11*sj3);
IkReal x12613=(sj1*sj2);
IkReal x12614=(gconst11*r00);
IkReal x12615=(cj3*r11);
IkReal x12616=(gconst10*sj3);
IkReal x12617=(cj2*sj1);
IkReal x12618=(cj3*r01);
IkReal x12619=((1.0)*sj0);
IkReal x12620=(cj1*sj2);
IkReal x12621=(cj3*r21);
IkReal x12622=(cj3*gconst10);
IkReal x12623=((1.0)*cj0);
IkReal x12624=((1.0)*x12609);
IkReal x12625=((1.0)*x12608);
IkReal x12626=((1.0)*cj1*cj2);
IkReal x12627=(cj3*x12608);
IkReal x12628=(gconst10*x12608);
IkReal x12629=(gconst10*x12609);
evalcond[0]=((((-1.0)*r22*x12624))+((r21*x12628))+(((-1.0)*x12611*x12625)));
evalcond[1]=(cj0+(((-1.0)*r12*x12624))+(((-1.0)*gconst11*r10*x12625))+((r11*x12628)));
evalcond[2]=((((-1.0)*r02*x12624))+((r01*x12628))+(((-1.0)*x12619))+(((-1.0)*x12614*x12625)));
evalcond[3]=(((r22*x12627))+(((-1.0)*cj3*x12611*x12624))+((x12621*x12629))+((r21*x12612))+((r20*x12616))+x12620+x12617);
evalcond[4]=(((sj3*x12609*x12611))+(((-1.0)*x12626))+((gconst11*x12621))+x12613+((r20*x12622))+(((-1.0)*r21*x12616*x12624))+(((-1.0)*r22*sj3*x12625)));
evalcond[5]=(((r02*x12627))+((x12618*x12629))+(((-1.0)*cj1*cj2*x12623))+((r00*x12616))+(((-1.0)*cj3*x12614*x12624))+((r01*x12612))+((cj0*x12613)));
evalcond[6]=((((-1.0)*gconst11*x12610*x12624))+((sj0*x12613))+((x12615*x12629))+((r11*x12612))+((r12*x12627))+(((-1.0)*cj1*cj2*x12619))+((r10*x12616)));
evalcond[7]=((((-1.0)*x12620*x12623))+((gconst11*x12618))+(((-1.0)*r01*x12616*x12624))+((r00*x12609*x12612))+(((-1.0)*r02*sj3*x12625))+(((-1.0)*x12617*x12623))+((r00*x12622)));
evalcond[8]=(((gconst11*x12615))+((r10*x12609*x12612))+(((-1.0)*r11*x12616*x12624))+((gconst10*x12610))+(((-1.0)*x12617*x12619))+(((-1.0)*x12619*x12620))+(((-1.0)*r12*sj3*x12625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12630=((1.0)*gconst11);
CheckValue<IkReal> x12631 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12630))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12630)))),-1);
if(!x12632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12631.value)+(((1.5707963267949)*(x12632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12633=IKsin(j4);
IkReal x12634=IKcos(j4);
IkReal x12635=(cj3*r10);
IkReal x12636=(gconst11*r20);
IkReal x12637=(gconst11*sj3);
IkReal x12638=(sj1*sj2);
IkReal x12639=(gconst11*r00);
IkReal x12640=(cj3*r11);
IkReal x12641=(gconst10*sj3);
IkReal x12642=(cj2*sj1);
IkReal x12643=(cj3*r01);
IkReal x12644=((1.0)*sj0);
IkReal x12645=(cj1*sj2);
IkReal x12646=(cj3*r21);
IkReal x12647=(cj3*gconst10);
IkReal x12648=((1.0)*cj0);
IkReal x12649=((1.0)*x12634);
IkReal x12650=((1.0)*x12633);
IkReal x12651=((1.0)*cj1*cj2);
IkReal x12652=(cj3*x12633);
IkReal x12653=(gconst10*x12633);
IkReal x12654=(gconst10*x12634);
evalcond[0]=(((r21*x12653))+(((-1.0)*r22*x12649))+(((-1.0)*x12636*x12650)));
evalcond[1]=(cj0+((r11*x12653))+(((-1.0)*gconst11*r10*x12650))+(((-1.0)*r12*x12649)));
evalcond[2]=((((-1.0)*r02*x12649))+(((-1.0)*x12639*x12650))+(((-1.0)*x12644))+((r01*x12653)));
evalcond[3]=(((r22*x12652))+((r20*x12641))+((x12646*x12654))+(((-1.0)*cj3*x12636*x12649))+x12645+x12642+((r21*x12637)));
evalcond[4]=((((-1.0)*x12651))+((r20*x12647))+((sj3*x12634*x12636))+(((-1.0)*r22*sj3*x12650))+x12638+(((-1.0)*r21*x12641*x12649))+((gconst11*x12646)));
evalcond[5]=(((r02*x12652))+(((-1.0)*cj3*x12639*x12649))+((r01*x12637))+((cj0*x12638))+((r00*x12641))+(((-1.0)*cj1*cj2*x12648))+((x12643*x12654)));
evalcond[6]=(((r11*x12637))+((x12640*x12654))+(((-1.0)*cj1*cj2*x12644))+((sj0*x12638))+((r12*x12652))+((r10*x12641))+(((-1.0)*gconst11*x12635*x12649)));
evalcond[7]=((((-1.0)*r01*x12641*x12649))+(((-1.0)*r02*sj3*x12650))+((r00*x12634*x12637))+((r00*x12647))+(((-1.0)*x12645*x12648))+(((-1.0)*x12642*x12648))+((gconst11*x12643)));
evalcond[8]=((((-1.0)*x12642*x12644))+(((-1.0)*r11*x12641*x12649))+((gconst10*x12635))+((r10*x12634*x12637))+(((-1.0)*r12*sj3*x12650))+((gconst11*x12640))+(((-1.0)*x12644*x12645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12655=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12655;
j4eval[1]=IKsign(x12655);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12656=((1.0)*cj5);
IkReal x12657=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12656)));
j4eval[0]=x12657;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12656))))));
j4eval[2]=IKsign(x12657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12658=cj5*cj5;
IkReal x12659=(cj3*r21);
IkReal x12660=(cj5*sj5);
IkReal x12661=((1.0)*cj3);
IkReal x12662=(((r10*x12659*x12660))+((cj3*r11*r20*x12660))+(((-1.0)*r10*r20*x12658*x12661))+(((-1.0)*r11*x12659))+((r11*x12658*x12659))+(((-1.0)*r12*r22*x12661)));
j4eval[0]=x12662;
j4eval[1]=IKsign(x12662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12663=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12663;
j4eval[1]=IKsign(x12663);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12664=((1.0)*cj5);
IkReal x12665=((((-1.0)*r01*x12664))+(((-1.0)*r00*sj5)));
j4eval[0]=x12665;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12664))))));
j4eval[2]=IKsign(x12665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12666=cj5*cj5;
IkReal x12667=r11*r11;
IkReal x12668=(r11*sj5);
IkReal x12669=(cj5*r10);
IkReal x12670=((r12*r12)+((x12666*(r10*r10)))+(((-1.0)*x12666*x12667))+x12667+(((-2.0)*x12668*x12669)));
j4eval[0]=x12670;
j4eval[1]=IKsign(x12670);
j4eval[2]=((IKabs(((((-1.0)*x12668))+x12669)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12671=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12671);
rxp1_1=(px*r21);
rxp1_2=(r11*x12671);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12672=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12672);
rxp1_1=(px*r21);
rxp1_2=(r11*x12672);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12673=((1.0)*sj1);
CheckValue<IkReal> x12674=IKPowWithIntegerCheck(r02,-1);
if(!x12674.valid){
continue;
}
CheckValue<IkReal> x12675=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12675.valid){
continue;
}
if( IKabs(((x12674.value)*(((((-1.0)*cj2*x12673))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12675.value)*((((cj1*cj2))+(((-1.0)*sj2*x12673)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12674.value)*(((((-1.0)*cj2*x12673))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12675.value)*((((cj1*cj2))+(((-1.0)*sj2*x12673))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12674.value)*(((((-1.0)*cj2*x12673))+(((-1.0)*cj1*sj2))))), ((x12675.value)*((((cj1*cj2))+(((-1.0)*sj2*x12673))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12676=IKsin(j4);
IkReal x12677=IKcos(j4);
IkReal x12678=(cj5*r20);
IkReal x12679=((1.0)*cj2);
IkReal x12680=(cj5*r10);
IkReal x12681=((1.0)*x12676);
IkReal x12682=(sj5*x12676);
IkReal x12683=((1.0)*sj5*x12677);
evalcond[0]=((-1.0)*r02*x12677);
evalcond[1]=(((r21*x12682))+(((-1.0)*x12678*x12681)));
evalcond[2]=((((-1.0)*r11*x12683))+((x12677*x12680)));
evalcond[3]=((1.0)+((r11*x12682))+(((-1.0)*x12680*x12681)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12681))+(((-1.0)*sj1*x12679)));
evalcond[5]=((((-1.0)*cj1*x12679))+(((-1.0)*r21*x12683))+((x12677*x12678))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12684=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12684.valid){
continue;
}
CheckValue<IkReal> x12685=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12685.valid){
continue;
}
if( IKabs(((-1.0)*(x12684.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12685.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12684.value)))+IKsqr(((x12685.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12684.value)), ((x12685.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12686=IKsin(j4);
IkReal x12687=IKcos(j4);
IkReal x12688=(cj5*r20);
IkReal x12689=((1.0)*cj2);
IkReal x12690=(cj5*r10);
IkReal x12691=((1.0)*x12686);
IkReal x12692=(sj5*x12686);
IkReal x12693=((1.0)*sj5*x12687);
evalcond[0]=((-1.0)*r02*x12687);
evalcond[1]=(((r21*x12692))+(((-1.0)*x12688*x12691)));
evalcond[2]=((((-1.0)*r11*x12693))+((x12687*x12690)));
evalcond[3]=((1.0)+((r11*x12692))+(((-1.0)*x12690*x12691)));
evalcond[4]=((((-1.0)*sj1*x12689))+(((-1.0)*r02*x12691))+(((-1.0)*cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*x12689))+((x12687*x12688))+((sj1*sj2))+(((-1.0)*r21*x12693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12694=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12694);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12694);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12695=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12695);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12695);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12696=IKPowWithIntegerCheck(r22,-1);
if(!x12696.valid){
continue;
}
CheckValue<IkReal> x12697=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12697.valid){
continue;
}
if( IKabs(((x12696.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12697.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12696.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12697.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12696.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12697.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12698=IKsin(j4);
IkReal x12699=IKcos(j4);
IkReal x12700=((1.0)*cj2);
IkReal x12701=(cj5*x12699);
IkReal x12702=(sj5*x12698);
IkReal x12703=((1.0)*sj5*x12699);
IkReal x12704=((1.0)*cj5*x12698);
evalcond[0]=((-1.0)*r22*x12699);
evalcond[1]=(((r01*x12702))+(((-1.0)*r00*x12704)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12700))+(((-1.0)*r22*x12698)));
evalcond[3]=((((-1.0)*r11*x12703))+((r10*x12701)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12704))+((r11*x12702)));
evalcond[5]=((((-1.0)*r01*x12703))+(((-1.0)*sj1*x12700))+(((-1.0)*cj1*sj2))+((r00*x12701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12705=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12705.valid){
continue;
}
CheckValue<IkReal> x12706=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12706.valid){
continue;
}
if( IKabs(((-1.0)*(x12705.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12706.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12705.value)))+IKsqr(((x12706.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12705.value)), ((x12706.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12707=IKsin(j4);
IkReal x12708=IKcos(j4);
IkReal x12709=((1.0)*cj2);
IkReal x12710=(cj5*x12708);
IkReal x12711=(sj5*x12707);
IkReal x12712=((1.0)*sj5*x12708);
IkReal x12713=((1.0)*cj5*x12707);
evalcond[0]=((-1.0)*r22*x12708);
evalcond[1]=((((-1.0)*r00*x12713))+((r01*x12711)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12709))+(((-1.0)*r22*x12707)));
evalcond[3]=(((r10*x12710))+(((-1.0)*r11*x12712)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12713))+((r11*x12711)));
evalcond[5]=((((-1.0)*sj1*x12709))+(((-1.0)*cj1*sj2))+((r00*x12710))+(((-1.0)*r01*x12712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12714=cj5*cj5;
IkReal x12715=r11*r11;
IkReal x12716=(cj5*r10);
IkReal x12717=(r11*sj5);
CheckValue<IkReal> x12718=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12716*x12717))+x12715+(((-1.0)*x12714*x12715))+((x12714*(r10*r10))))),-1);
if(!x12718.valid){
continue;
}
CheckValue<IkReal> x12719 = IKatan2WithCheck(IkReal(((((-1.0)*x12717))+x12716)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12718.value)))+(x12719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12720=IKsin(j4);
IkReal x12721=IKcos(j4);
IkReal x12722=(cj5*r10);
IkReal x12723=(r01*sj5);
IkReal x12724=((1.0)*cj2);
IkReal x12725=(cj5*r00);
IkReal x12726=(cj5*r20);
IkReal x12727=((1.0)*x12721);
IkReal x12728=((1.0)*x12720);
IkReal x12729=(sj5*x12720);
evalcond[0]=(((r21*x12729))+(((-1.0)*r22*x12727))+(((-1.0)*x12726*x12728)));
evalcond[1]=((((-1.0)*r02*x12727))+(((-1.0)*x12725*x12728))+((x12720*x12723)));
evalcond[2]=(((x12721*x12722))+(((-1.0)*r11*sj5*x12727))+(((-1.0)*r12*x12728)));
evalcond[3]=((1.0)+((r11*x12729))+(((-1.0)*x12722*x12728))+(((-1.0)*r12*x12727)));
evalcond[4]=(((x12721*x12726))+(((-1.0)*r22*x12728))+((sj1*sj2))+(((-1.0)*r21*sj5*x12727))+(((-1.0)*cj1*x12724)));
evalcond[5]=(((x12721*x12725))+(((-1.0)*r02*x12728))+(((-1.0)*sj1*x12724))+(((-1.0)*x12723*x12727))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12730=((1.0)*cj5);
CheckValue<IkReal> x12731 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12731.valid){
continue;
}
CheckValue<IkReal> x12732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12730))+(((-1.0)*r00*sj5)))),-1);
if(!x12732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12731.value)+(((1.5707963267949)*(x12732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12733=IKsin(j4);
IkReal x12734=IKcos(j4);
IkReal x12735=(cj5*r10);
IkReal x12736=(r01*sj5);
IkReal x12737=((1.0)*cj2);
IkReal x12738=(cj5*r00);
IkReal x12739=(cj5*r20);
IkReal x12740=((1.0)*x12734);
IkReal x12741=((1.0)*x12733);
IkReal x12742=(sj5*x12733);
evalcond[0]=((((-1.0)*r22*x12740))+(((-1.0)*x12739*x12741))+((r21*x12742)));
evalcond[1]=(((x12733*x12736))+(((-1.0)*r02*x12740))+(((-1.0)*x12738*x12741)));
evalcond[2]=((((-1.0)*r12*x12741))+((x12734*x12735))+(((-1.0)*r11*sj5*x12740)));
evalcond[3]=((1.0)+((r11*x12742))+(((-1.0)*r12*x12740))+(((-1.0)*x12735*x12741)));
evalcond[4]=(((x12734*x12739))+(((-1.0)*r21*sj5*x12740))+((sj1*sj2))+(((-1.0)*r22*x12741))+(((-1.0)*cj1*x12737)));
evalcond[5]=((((-1.0)*sj1*x12737))+(((-1.0)*r02*x12741))+((x12734*x12738))+(((-1.0)*cj1*sj2))+(((-1.0)*x12736*x12740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12743=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12743.valid){
continue;
}
CheckValue<IkReal> x12744 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12743.value)))+(x12744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12745=IKsin(j4);
IkReal x12746=IKcos(j4);
IkReal x12747=(cj5*r10);
IkReal x12748=(r01*sj5);
IkReal x12749=((1.0)*cj2);
IkReal x12750=(cj5*r00);
IkReal x12751=(cj5*r20);
IkReal x12752=((1.0)*x12746);
IkReal x12753=((1.0)*x12745);
IkReal x12754=(sj5*x12745);
evalcond[0]=((((-1.0)*r22*x12752))+((r21*x12754))+(((-1.0)*x12751*x12753)));
evalcond[1]=(((x12745*x12748))+(((-1.0)*r02*x12752))+(((-1.0)*x12750*x12753)));
evalcond[2]=((((-1.0)*r12*x12753))+(((-1.0)*r11*sj5*x12752))+((x12746*x12747)));
evalcond[3]=((1.0)+((r11*x12754))+(((-1.0)*r12*x12752))+(((-1.0)*x12747*x12753)));
evalcond[4]=((((-1.0)*r21*sj5*x12752))+(((-1.0)*r22*x12753))+((sj1*sj2))+(((-1.0)*cj1*x12749))+((x12746*x12751)));
evalcond[5]=((((-1.0)*r02*x12753))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12749))+(((-1.0)*x12748*x12752))+((x12746*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12755=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12755;
j4eval[1]=IKsign(x12755);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12756=((1.0)*cj5);
IkReal x12757=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12756)));
j4eval[0]=x12757;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12756))))));
j4eval[2]=IKsign(x12757);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12758=(sj1*sj2);
IkReal x12759=(cj5*r10);
IkReal x12760=(r11*sj5);
IkReal x12761=(cj1*cj2);
IkReal x12762=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12762;
j4eval[1]=((IKabs(((((-1.0)*r12*x12758))+((r12*x12761)))))+(IKabs(((((-1.0)*x12760*x12761))+((x12758*x12760))+((x12759*x12761))+(((-1.0)*x12758*x12759))))));
j4eval[2]=IKsign(x12762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12763=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12763);
rxp1_1=(px*r21);
rxp1_2=(r11*x12763);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12764=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12764);
rxp1_1=(px*r21);
rxp1_2=(r11*x12764);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12765=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12765))+((r11*sj5)));
j4eval[1]=((((-1.0)*r20*x12765))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12766=((1.0)*cj5);
CheckValue<IkReal> x12767=IKPowWithIntegerCheck(((((-1.0)*r10*x12766))+((r11*sj5))),-1);
if(!x12767.valid){
continue;
}
CheckValue<IkReal> x12768=IKPowWithIntegerCheck(((((-1.0)*r20*x12766))+((r21*sj5))),-1);
if(!x12768.valid){
continue;
}
if( IKabs(((-1.0)*(x12767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12767.value)))+IKsqr(((x12768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12767.value)), ((x12768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12769=IKsin(j4);
IkReal x12770=IKcos(j4);
IkReal x12771=((1.0)*cj2);
IkReal x12772=(r21*sj5);
IkReal x12773=(r11*sj5);
IkReal x12774=((1.0)*cj5*x12769);
IkReal x12775=((1.0)*cj5*x12770);
evalcond[0]=((-1.0)*r02*x12770);
evalcond[1]=((((-1.0)*r20*x12774))+((x12769*x12772)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r02*x12769))+(((-1.0)*sj1*x12771)));
evalcond[3]=(((x12770*x12773))+(((-1.0)*r10*x12775)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12774))+((x12769*x12773)));
evalcond[5]=((((-1.0)*r20*x12775))+((x12770*x12772))+(((-1.0)*cj1*x12771))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12776=IKPowWithIntegerCheck(r02,-1);
if(!x12776.valid){
continue;
}
CheckValue<IkReal> x12777=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12777.valid){
continue;
}
if( IKabs(((x12776.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12777.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12776.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12777.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12776.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12777.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12778=IKsin(j4);
IkReal x12779=IKcos(j4);
IkReal x12780=((1.0)*cj2);
IkReal x12781=(r21*sj5);
IkReal x12782=(r11*sj5);
IkReal x12783=((1.0)*cj5*x12778);
IkReal x12784=((1.0)*cj5*x12779);
evalcond[0]=((-1.0)*r02*x12779);
evalcond[1]=(((x12778*x12781))+(((-1.0)*r20*x12783)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12780))+((r02*x12778)));
evalcond[3]=((((-1.0)*r10*x12784))+((x12779*x12782)));
evalcond[4]=((1.0)+((x12778*x12782))+(((-1.0)*r10*x12783)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12784))+(((-1.0)*cj1*x12780))+((x12779*x12781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12785=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12785;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12786=((1.0)*cj5);
IkReal x12787=((((-1.0)*r21*x12786))+(((-1.0)*r20*sj5)));
j4eval[0]=x12787;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12786))))));
j4eval[2]=IKsign(x12787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12788=cj5*cj5;
IkReal x12789=(r11*r21);
IkReal x12790=((1.0)*r20);
IkReal x12791=(cj5*sj5);
IkReal x12792=(((x12788*x12789))+(((-1.0)*r12*r22))+((r10*r21*x12791))+(((-1.0)*x12789))+(((-1.0)*r10*x12788*x12790))+((r11*r20*x12791)));
j4eval[0]=x12792;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12790))))));
j4eval[2]=IKsign(x12792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12793=cj5*cj5;
IkReal x12794=(r21*sj5);
IkReal x12795=(r11*r21);
IkReal x12796=((1.0)*r20);
CheckValue<IkReal> x12797=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12794))+(((-1.0)*r12*r22))+((x12793*x12795))+(((-1.0)*x12795))+(((-1.0)*r10*x12793*x12796))+((cj5*r11*r20*sj5)))),-1);
if(!x12797.valid){
continue;
}
CheckValue<IkReal> x12798 = IKatan2WithCheck(IkReal((x12794+(((-1.0)*cj5*x12796)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12797.value)))+(x12798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12799=IKcos(j4);
IkReal x12800=IKsin(j4);
IkReal x12801=(cj5*r00);
IkReal x12802=(cj5*r20);
IkReal x12803=(cj5*r10);
IkReal x12804=((1.0)*x12799);
IkReal x12805=((1.0)*x12800);
IkReal x12806=(sj5*x12799);
IkReal x12807=(sj5*x12800);
evalcond[0]=(((r21*x12806))+(((-1.0)*x12802*x12804))+((r22*x12800)));
evalcond[1]=((((-1.0)*x12803*x12804))+((r11*x12806))+((r12*x12800)));
evalcond[2]=(((r21*x12807))+(((-1.0)*r22*x12804))+(((-1.0)*x12802*x12805)));
evalcond[3]=((((-1.0)*r02*x12804))+((r01*x12807))+(((-1.0)*x12801*x12805)));
evalcond[4]=((-1.0)+((r02*x12800))+((r01*x12806))+(((-1.0)*x12801*x12804)));
evalcond[5]=((1.0)+(((-1.0)*x12803*x12805))+(((-1.0)*r12*x12804))+((r11*x12807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12808=((1.0)*cj5);
CheckValue<IkReal> x12809 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12808))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12809.valid){
continue;
}
CheckValue<IkReal> x12810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12808))+(((-1.0)*r20*sj5)))),-1);
if(!x12810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12809.value)+(((1.5707963267949)*(x12810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12811=IKcos(j4);
IkReal x12812=IKsin(j4);
IkReal x12813=(cj5*r00);
IkReal x12814=(cj5*r20);
IkReal x12815=(cj5*r10);
IkReal x12816=((1.0)*x12811);
IkReal x12817=((1.0)*x12812);
IkReal x12818=(sj5*x12811);
IkReal x12819=(sj5*x12812);
evalcond[0]=((((-1.0)*x12814*x12816))+((r21*x12818))+((r22*x12812)));
evalcond[1]=(((r12*x12812))+((r11*x12818))+(((-1.0)*x12815*x12816)));
evalcond[2]=((((-1.0)*x12814*x12817))+((r21*x12819))+(((-1.0)*r22*x12816)));
evalcond[3]=((((-1.0)*r02*x12816))+(((-1.0)*x12813*x12817))+((r01*x12819)));
evalcond[4]=((-1.0)+((r02*x12812))+(((-1.0)*x12813*x12816))+((r01*x12818)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12816))+((r11*x12819))+(((-1.0)*x12815*x12817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12820 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12820.valid){
continue;
}
CheckValue<IkReal> x12821=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12820.value)+(((1.5707963267949)*(x12821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12822=IKcos(j4);
IkReal x12823=IKsin(j4);
IkReal x12824=(cj5*r00);
IkReal x12825=(cj5*r20);
IkReal x12826=(cj5*r10);
IkReal x12827=((1.0)*x12822);
IkReal x12828=((1.0)*x12823);
IkReal x12829=(sj5*x12822);
IkReal x12830=(sj5*x12823);
evalcond[0]=((((-1.0)*x12825*x12827))+((r22*x12823))+((r21*x12829)));
evalcond[1]=((((-1.0)*x12826*x12827))+((r12*x12823))+((r11*x12829)));
evalcond[2]=((((-1.0)*x12825*x12828))+((r21*x12830))+(((-1.0)*r22*x12827)));
evalcond[3]=((((-1.0)*r02*x12827))+(((-1.0)*x12824*x12828))+((r01*x12830)));
evalcond[4]=((-1.0)+((r01*x12829))+(((-1.0)*x12824*x12827))+((r02*x12823)));
evalcond[5]=((1.0)+((r11*x12830))+(((-1.0)*x12826*x12828))+(((-1.0)*r12*x12827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12831=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12831;
j4eval[1]=IKsign(x12831);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12832=((1.0)*cj5);
IkReal x12833=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12832)));
j4eval[0]=x12833;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12832))))));
j4eval[2]=IKsign(x12833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12834=cj5*cj5;
IkReal x12835=(r11*r21);
IkReal x12836=((1.0)*r20);
IkReal x12837=(cj5*sj5);
IkReal x12838=((((-1.0)*r12*r22))+((x12834*x12835))+((r10*r21*x12837))+((r11*r20*x12837))+(((-1.0)*x12835))+(((-1.0)*r10*x12834*x12836)));
j4eval[0]=x12838;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12836)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12839=cj5*cj5;
IkReal x12840=(r21*sj5);
IkReal x12841=(r11*r21);
IkReal x12842=((1.0)*r20);
CheckValue<IkReal> x12843=IKPowWithIntegerCheck(IKsign((((x12839*x12841))+(((-1.0)*r12*r22))+(((-1.0)*x12841))+(((-1.0)*r10*x12839*x12842))+((cj5*r10*x12840))+((cj5*r11*r20*sj5)))),-1);
if(!x12843.valid){
continue;
}
CheckValue<IkReal> x12844 = IKatan2WithCheck(IkReal((x12840+(((-1.0)*cj5*x12842)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12843.value)))+(x12844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12845=IKcos(j4);
IkReal x12846=IKsin(j4);
IkReal x12847=(cj5*r00);
IkReal x12848=(cj5*r20);
IkReal x12849=(cj5*r10);
IkReal x12850=((1.0)*x12845);
IkReal x12851=((1.0)*x12846);
IkReal x12852=(sj5*x12845);
IkReal x12853=(sj5*x12846);
evalcond[0]=((((-1.0)*x12848*x12850))+((r22*x12846))+((r21*x12852)));
evalcond[1]=(((r11*x12852))+((r12*x12846))+(((-1.0)*x12849*x12850)));
evalcond[2]=((((-1.0)*x12848*x12851))+(((-1.0)*r22*x12850))+((r21*x12853)));
evalcond[3]=((((-1.0)*x12847*x12851))+(((-1.0)*r02*x12850))+((r01*x12853)));
evalcond[4]=((1.0)+(((-1.0)*x12847*x12850))+((r01*x12852))+((r02*x12846)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12850))+((r11*x12853))+(((-1.0)*x12849*x12851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12854=((1.0)*cj5);
CheckValue<IkReal> x12855 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12854)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12855.valid){
continue;
}
CheckValue<IkReal> x12856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12854)))),-1);
if(!x12856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12855.value)+(((1.5707963267949)*(x12856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12857=IKcos(j4);
IkReal x12858=IKsin(j4);
IkReal x12859=(cj5*r00);
IkReal x12860=(cj5*r20);
IkReal x12861=(cj5*r10);
IkReal x12862=((1.0)*x12857);
IkReal x12863=((1.0)*x12858);
IkReal x12864=(sj5*x12857);
IkReal x12865=(sj5*x12858);
evalcond[0]=(((r21*x12864))+((r22*x12858))+(((-1.0)*x12860*x12862)));
evalcond[1]=(((r11*x12864))+(((-1.0)*x12861*x12862))+((r12*x12858)));
evalcond[2]=(((r21*x12865))+(((-1.0)*x12860*x12863))+(((-1.0)*r22*x12862)));
evalcond[3]=((((-1.0)*x12859*x12863))+(((-1.0)*r02*x12862))+((r01*x12865)));
evalcond[4]=((1.0)+(((-1.0)*x12859*x12862))+((r02*x12858))+((r01*x12864)));
evalcond[5]=((1.0)+((r11*x12865))+(((-1.0)*x12861*x12863))+(((-1.0)*r12*x12862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12866=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12866.valid){
continue;
}
CheckValue<IkReal> x12867 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12866.value)))+(x12867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12868=IKcos(j4);
IkReal x12869=IKsin(j4);
IkReal x12870=(cj5*r00);
IkReal x12871=(cj5*r20);
IkReal x12872=(cj5*r10);
IkReal x12873=((1.0)*x12868);
IkReal x12874=((1.0)*x12869);
IkReal x12875=(sj5*x12868);
IkReal x12876=(sj5*x12869);
evalcond[0]=((((-1.0)*x12871*x12873))+((r21*x12875))+((r22*x12869)));
evalcond[1]=(((r12*x12869))+(((-1.0)*x12872*x12873))+((r11*x12875)));
evalcond[2]=((((-1.0)*r22*x12873))+(((-1.0)*x12871*x12874))+((r21*x12876)));
evalcond[3]=(((r01*x12876))+(((-1.0)*r02*x12873))+(((-1.0)*x12870*x12874)));
evalcond[4]=((1.0)+((r01*x12875))+((r02*x12869))+(((-1.0)*x12870*x12873)));
evalcond[5]=((1.0)+(((-1.0)*x12872*x12874))+(((-1.0)*r12*x12873))+((r11*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12877=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12877;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12878=((1.0)*cj5);
IkReal x12879=((((-1.0)*r21*x12878))+(((-1.0)*r20*sj5)));
j4eval[0]=x12879;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12878))))));
j4eval[2]=IKsign(x12879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12880=cj5*cj5;
IkReal x12881=(r11*r21);
IkReal x12882=((1.0)*r20);
IkReal x12883=(cj5*sj5);
IkReal x12884=((((-1.0)*x12881))+(((-1.0)*r12*r22))+((r10*r21*x12883))+((x12880*x12881))+(((-1.0)*r10*x12880*x12882))+((r11*r20*x12883)));
j4eval[0]=x12884;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12882)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12885=cj5*cj5;
IkReal x12886=(r21*sj5);
IkReal x12887=(r11*r21);
IkReal x12888=((1.0)*r20);
CheckValue<IkReal> x12889 = IKatan2WithCheck(IkReal((x12886+(((-1.0)*cj5*x12888)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12889.valid){
continue;
}
CheckValue<IkReal> x12890=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12887))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12885*x12888))+((x12885*x12887))+((cj5*r10*x12886))+((cj5*r11*r20*sj5)))),-1);
if(!x12890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12889.value)+(((1.5707963267949)*(x12890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12891=IKcos(j4);
IkReal x12892=IKsin(j4);
IkReal x12893=(cj5*r00);
IkReal x12894=(cj5*r20);
IkReal x12895=(cj5*r10);
IkReal x12896=((1.0)*x12891);
IkReal x12897=((1.0)*x12892);
IkReal x12898=(sj5*x12891);
IkReal x12899=(sj5*x12892);
evalcond[0]=(((r21*x12898))+((r22*x12892))+(((-1.0)*x12894*x12896)));
evalcond[1]=(((r12*x12892))+(((-1.0)*x12895*x12896))+((r11*x12898)));
evalcond[2]=((((-1.0)*r22*x12896))+((r21*x12899))+(((-1.0)*x12894*x12897)));
evalcond[3]=((((-1.0)*x12893*x12897))+((r01*x12899))+(((-1.0)*r02*x12896)));
evalcond[4]=((-1.0)+(((-1.0)*x12893*x12896))+((r01*x12898))+((r02*x12892)));
evalcond[5]=((1.0)+(((-1.0)*x12895*x12897))+((r11*x12899))+(((-1.0)*r12*x12896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12900=((1.0)*cj5);
CheckValue<IkReal> x12901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12900))+(((-1.0)*r20*sj5)))),-1);
if(!x12901.valid){
continue;
}
CheckValue<IkReal> x12902 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12900))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12901.value)))+(x12902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12903=IKcos(j4);
IkReal x12904=IKsin(j4);
IkReal x12905=(cj5*r00);
IkReal x12906=(cj5*r20);
IkReal x12907=(cj5*r10);
IkReal x12908=((1.0)*x12903);
IkReal x12909=((1.0)*x12904);
IkReal x12910=(sj5*x12903);
IkReal x12911=(sj5*x12904);
evalcond[0]=((((-1.0)*x12906*x12908))+((r21*x12910))+((r22*x12904)));
evalcond[1]=((((-1.0)*x12907*x12908))+((r12*x12904))+((r11*x12910)));
evalcond[2]=((((-1.0)*x12906*x12909))+((r21*x12911))+(((-1.0)*r22*x12908)));
evalcond[3]=((((-1.0)*r02*x12908))+(((-1.0)*x12905*x12909))+((r01*x12911)));
evalcond[4]=((-1.0)+((r02*x12904))+(((-1.0)*x12905*x12908))+((r01*x12910)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12908))+(((-1.0)*x12907*x12909))+((r11*x12911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12912 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12912.valid){
continue;
}
CheckValue<IkReal> x12913=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12912.value)+(((1.5707963267949)*(x12913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12914=IKcos(j4);
IkReal x12915=IKsin(j4);
IkReal x12916=(cj5*r00);
IkReal x12917=(cj5*r20);
IkReal x12918=(cj5*r10);
IkReal x12919=((1.0)*x12914);
IkReal x12920=((1.0)*x12915);
IkReal x12921=(sj5*x12914);
IkReal x12922=(sj5*x12915);
evalcond[0]=((((-1.0)*x12917*x12919))+((r21*x12921))+((r22*x12915)));
evalcond[1]=(((r11*x12921))+((r12*x12915))+(((-1.0)*x12918*x12919)));
evalcond[2]=((((-1.0)*x12917*x12920))+(((-1.0)*r22*x12919))+((r21*x12922)));
evalcond[3]=((((-1.0)*r02*x12919))+((r01*x12922))+(((-1.0)*x12916*x12920)));
evalcond[4]=((-1.0)+((r02*x12915))+(((-1.0)*x12916*x12919))+((r01*x12921)));
evalcond[5]=((1.0)+(((-1.0)*x12918*x12920))+((r11*x12922))+(((-1.0)*r12*x12919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12923=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12923;
j4eval[1]=IKsign(x12923);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12924=((1.0)*cj5);
IkReal x12925=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12924)));
j4eval[0]=x12925;
j4eval[1]=((IKabs(((((-1.0)*r20*x12924))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12925);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12926=cj5*cj5;
IkReal x12927=(r11*r21);
IkReal x12928=((1.0)*r20);
IkReal x12929=(cj5*sj5);
IkReal x12930=((((-1.0)*r10*x12926*x12928))+(((-1.0)*r12*r22))+(((-1.0)*x12927))+((r11*r20*x12929))+((x12926*x12927))+((r10*r21*x12929)));
j4eval[0]=x12930;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12928))))));
j4eval[2]=IKsign(x12930);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12931=cj5*cj5;
IkReal x12932=(r21*sj5);
IkReal x12933=(r11*r21);
IkReal x12934=((1.0)*r20);
CheckValue<IkReal> x12935=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12932))+(((-1.0)*r10*x12931*x12934))+(((-1.0)*r12*r22))+(((-1.0)*x12933))+((x12931*x12933))+((cj5*r11*r20*sj5)))),-1);
if(!x12935.valid){
continue;
}
CheckValue<IkReal> x12936 = IKatan2WithCheck(IkReal((x12932+(((-1.0)*cj5*x12934)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12935.value)))+(x12936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12937=IKcos(j4);
IkReal x12938=IKsin(j4);
IkReal x12939=(cj5*r00);
IkReal x12940=(cj5*r20);
IkReal x12941=(cj5*r10);
IkReal x12942=((1.0)*x12937);
IkReal x12943=((1.0)*x12938);
IkReal x12944=(sj5*x12937);
IkReal x12945=(sj5*x12938);
evalcond[0]=(((r21*x12944))+((r22*x12938))+(((-1.0)*x12940*x12942)));
evalcond[1]=(((r12*x12938))+((r11*x12944))+(((-1.0)*x12941*x12942)));
evalcond[2]=(((r21*x12945))+(((-1.0)*r22*x12942))+(((-1.0)*x12940*x12943)));
evalcond[3]=((((-1.0)*x12939*x12943))+((r01*x12945))+(((-1.0)*r02*x12942)));
evalcond[4]=((1.0)+(((-1.0)*x12939*x12942))+((r02*x12938))+((r01*x12944)));
evalcond[5]=((1.0)+((r11*x12945))+(((-1.0)*x12941*x12943))+(((-1.0)*r12*x12942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12946=((1.0)*cj5);
CheckValue<IkReal> x12947 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12946)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12947.valid){
continue;
}
CheckValue<IkReal> x12948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12946))+(((-1.0)*r10*sj5)))),-1);
if(!x12948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12947.value)+(((1.5707963267949)*(x12948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12949=IKcos(j4);
IkReal x12950=IKsin(j4);
IkReal x12951=(cj5*r00);
IkReal x12952=(cj5*r20);
IkReal x12953=(cj5*r10);
IkReal x12954=((1.0)*x12949);
IkReal x12955=((1.0)*x12950);
IkReal x12956=(sj5*x12949);
IkReal x12957=(sj5*x12950);
evalcond[0]=((((-1.0)*x12952*x12954))+((r22*x12950))+((r21*x12956)));
evalcond[1]=(((r12*x12950))+(((-1.0)*x12953*x12954))+((r11*x12956)));
evalcond[2]=((((-1.0)*x12952*x12955))+((r21*x12957))+(((-1.0)*r22*x12954)));
evalcond[3]=(((r01*x12957))+(((-1.0)*x12951*x12955))+(((-1.0)*r02*x12954)));
evalcond[4]=((1.0)+((r01*x12956))+(((-1.0)*x12951*x12954))+((r02*x12950)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12954))+(((-1.0)*x12953*x12955))+((r11*x12957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12958=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12958.valid){
continue;
}
CheckValue<IkReal> x12959 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12958.value)))+(x12959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12960=IKcos(j4);
IkReal x12961=IKsin(j4);
IkReal x12962=(cj5*r00);
IkReal x12963=(cj5*r20);
IkReal x12964=(cj5*r10);
IkReal x12965=((1.0)*x12960);
IkReal x12966=((1.0)*x12961);
IkReal x12967=(sj5*x12960);
IkReal x12968=(sj5*x12961);
evalcond[0]=(((r22*x12961))+((r21*x12967))+(((-1.0)*x12963*x12965)));
evalcond[1]=(((r11*x12967))+((r12*x12961))+(((-1.0)*x12964*x12965)));
evalcond[2]=((((-1.0)*r22*x12965))+((r21*x12968))+(((-1.0)*x12963*x12966)));
evalcond[3]=(((r01*x12968))+(((-1.0)*x12962*x12966))+(((-1.0)*r02*x12965)));
evalcond[4]=((1.0)+((r01*x12967))+(((-1.0)*x12962*x12965))+((r02*x12961)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12965))+((r11*x12968))+(((-1.0)*x12964*x12966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12969=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12969;
j4eval[1]=IKsign(x12969);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12970=((1.0)*cj5);
IkReal x12971=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12970)));
j4eval[0]=x12971;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12970)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12972=cj5*cj5;
IkReal x12973=(r11*r21);
IkReal x12974=((1.0)*r20);
IkReal x12975=(cj5*sj5);
IkReal x12976=(((r11*r20*x12975))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12972*x12974))+(((-1.0)*x12973))+((x12972*x12973))+((r10*r21*x12975)));
j4eval[0]=x12976;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12974)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12977=cj5*cj5;
IkReal x12978=(r21*sj5);
IkReal x12979=(r11*r21);
IkReal x12980=((1.0)*r20);
CheckValue<IkReal> x12981 = IKatan2WithCheck(IkReal((x12978+(((-1.0)*cj5*x12980)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12981.valid){
continue;
}
CheckValue<IkReal> x12982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12977*x12980))+(((-1.0)*r12*r22))+(((-1.0)*x12979))+((x12977*x12979))+((cj5*r10*x12978))+((cj5*r11*r20*sj5)))),-1);
if(!x12982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12981.value)+(((1.5707963267949)*(x12982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12983=IKcos(j4);
IkReal x12984=IKsin(j4);
IkReal x12985=(cj5*r00);
IkReal x12986=(cj5*r20);
IkReal x12987=(cj5*r10);
IkReal x12988=((1.0)*x12983);
IkReal x12989=((1.0)*x12984);
IkReal x12990=(sj5*x12983);
IkReal x12991=(sj5*x12984);
evalcond[0]=(((r22*x12984))+((r21*x12990))+(((-1.0)*x12986*x12988)));
evalcond[1]=((((-1.0)*x12987*x12988))+((r11*x12990))+((r12*x12984)));
evalcond[2]=((((-1.0)*r22*x12988))+((r21*x12991))+(((-1.0)*x12986*x12989)));
evalcond[3]=(((r01*x12991))+(((-1.0)*r02*x12988))+(((-1.0)*x12985*x12989)));
evalcond[4]=((1.0)+((r01*x12990))+(((-1.0)*x12985*x12988))+((r02*x12984)));
evalcond[5]=((1.0)+(((-1.0)*x12987*x12989))+((r11*x12991))+(((-1.0)*r12*x12988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12992=((1.0)*cj5);
CheckValue<IkReal> x12993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12992)))),-1);
if(!x12993.valid){
continue;
}
CheckValue<IkReal> x12994 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12992)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12993.value)))+(x12994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12995=IKcos(j4);
IkReal x12996=IKsin(j4);
IkReal x12997=(cj5*r00);
IkReal x12998=(cj5*r20);
IkReal x12999=(cj5*r10);
IkReal x13000=((1.0)*x12995);
IkReal x13001=((1.0)*x12996);
IkReal x13002=(sj5*x12995);
IkReal x13003=(sj5*x12996);
evalcond[0]=(((r22*x12996))+(((-1.0)*x12998*x13000))+((r21*x13002)));
evalcond[1]=((((-1.0)*x12999*x13000))+((r12*x12996))+((r11*x13002)));
evalcond[2]=((((-1.0)*r22*x13000))+(((-1.0)*x12998*x13001))+((r21*x13003)));
evalcond[3]=((((-1.0)*r02*x13000))+((r01*x13003))+(((-1.0)*x12997*x13001)));
evalcond[4]=((1.0)+((r02*x12996))+((r01*x13002))+(((-1.0)*x12997*x13000)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13000))+(((-1.0)*x12999*x13001))+((r11*x13003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13004=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13004.valid){
continue;
}
CheckValue<IkReal> x13005 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13004.value)))+(x13005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13006=IKcos(j4);
IkReal x13007=IKsin(j4);
IkReal x13008=(cj5*r00);
IkReal x13009=(cj5*r20);
IkReal x13010=(cj5*r10);
IkReal x13011=((1.0)*x13006);
IkReal x13012=((1.0)*x13007);
IkReal x13013=(sj5*x13006);
IkReal x13014=(sj5*x13007);
evalcond[0]=(((r21*x13013))+(((-1.0)*x13009*x13011))+((r22*x13007)));
evalcond[1]=(((r12*x13007))+((r11*x13013))+(((-1.0)*x13010*x13011)));
evalcond[2]=((((-1.0)*r22*x13011))+((r21*x13014))+(((-1.0)*x13009*x13012)));
evalcond[3]=(((r01*x13014))+(((-1.0)*x13008*x13012))+(((-1.0)*r02*x13011)));
evalcond[4]=((1.0)+((r01*x13013))+(((-1.0)*x13008*x13011))+((r02*x13007)));
evalcond[5]=((1.0)+((r11*x13014))+(((-1.0)*x13010*x13012))+(((-1.0)*r12*x13011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13015=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13015;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13016=((1.0)*cj5);
IkReal x13017=((((-1.0)*r21*x13016))+(((-1.0)*r20*sj5)));
j4eval[0]=x13017;
j4eval[1]=((IKabs(((((-1.0)*r10*x13016))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13017);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13018=cj5*cj5;
IkReal x13019=(r11*r21);
IkReal x13020=((1.0)*r20);
IkReal x13021=(cj5*sj5);
IkReal x13022=((((-1.0)*r12*r22))+((r11*r20*x13021))+(((-1.0)*x13019))+((x13018*x13019))+(((-1.0)*r10*x13018*x13020))+((r10*r21*x13021)));
j4eval[0]=x13022;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13020)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13023=cj5*cj5;
IkReal x13024=(r21*sj5);
IkReal x13025=(r11*r21);
IkReal x13026=((1.0)*r20);
CheckValue<IkReal> x13027=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13024))+(((-1.0)*r12*r22))+((x13023*x13025))+(((-1.0)*x13025))+(((-1.0)*r10*x13023*x13026))+((cj5*r11*r20*sj5)))),-1);
if(!x13027.valid){
continue;
}
CheckValue<IkReal> x13028 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13026))+x13024)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13027.value)))+(x13028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13029=IKcos(j4);
IkReal x13030=IKsin(j4);
IkReal x13031=(cj5*r00);
IkReal x13032=(cj5*r20);
IkReal x13033=(cj5*r10);
IkReal x13034=((1.0)*x13029);
IkReal x13035=((1.0)*x13030);
IkReal x13036=(sj5*x13029);
IkReal x13037=(sj5*x13030);
evalcond[0]=(((r22*x13030))+(((-1.0)*x13032*x13034))+((r21*x13036)));
evalcond[1]=(((r11*x13036))+((r12*x13030))+(((-1.0)*x13033*x13034)));
evalcond[2]=((((-1.0)*x13032*x13035))+(((-1.0)*r22*x13034))+((r21*x13037)));
evalcond[3]=((((-1.0)*x13031*x13035))+(((-1.0)*r02*x13034))+((r01*x13037)));
evalcond[4]=((-1.0)+(((-1.0)*x13031*x13034))+((r01*x13036))+((r02*x13030)));
evalcond[5]=((1.0)+((r11*x13037))+(((-1.0)*x13033*x13035))+(((-1.0)*r12*x13034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13038=((1.0)*cj5);
CheckValue<IkReal> x13039 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13038)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13039.valid){
continue;
}
CheckValue<IkReal> x13040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13038))+(((-1.0)*r20*sj5)))),-1);
if(!x13040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13039.value)+(((1.5707963267949)*(x13040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13041=IKcos(j4);
IkReal x13042=IKsin(j4);
IkReal x13043=(cj5*r00);
IkReal x13044=(cj5*r20);
IkReal x13045=(cj5*r10);
IkReal x13046=((1.0)*x13041);
IkReal x13047=((1.0)*x13042);
IkReal x13048=(sj5*x13041);
IkReal x13049=(sj5*x13042);
evalcond[0]=(((r21*x13048))+((r22*x13042))+(((-1.0)*x13044*x13046)));
evalcond[1]=(((r11*x13048))+(((-1.0)*x13045*x13046))+((r12*x13042)));
evalcond[2]=(((r21*x13049))+(((-1.0)*r22*x13046))+(((-1.0)*x13044*x13047)));
evalcond[3]=((((-1.0)*r02*x13046))+((r01*x13049))+(((-1.0)*x13043*x13047)));
evalcond[4]=((-1.0)+((r02*x13042))+((r01*x13048))+(((-1.0)*x13043*x13046)));
evalcond[5]=((1.0)+((r11*x13049))+(((-1.0)*x13045*x13047))+(((-1.0)*r12*x13046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13050 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13050.valid){
continue;
}
CheckValue<IkReal> x13051=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13050.value)+(((1.5707963267949)*(x13051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13052=IKcos(j4);
IkReal x13053=IKsin(j4);
IkReal x13054=(cj5*r00);
IkReal x13055=(cj5*r20);
IkReal x13056=(cj5*r10);
IkReal x13057=((1.0)*x13052);
IkReal x13058=((1.0)*x13053);
IkReal x13059=(sj5*x13052);
IkReal x13060=(sj5*x13053);
evalcond[0]=(((r21*x13059))+((r22*x13053))+(((-1.0)*x13055*x13057)));
evalcond[1]=(((r12*x13053))+(((-1.0)*x13056*x13057))+((r11*x13059)));
evalcond[2]=(((r21*x13060))+(((-1.0)*r22*x13057))+(((-1.0)*x13055*x13058)));
evalcond[3]=((((-1.0)*x13054*x13058))+(((-1.0)*r02*x13057))+((r01*x13060)));
evalcond[4]=((-1.0)+((r02*x13053))+(((-1.0)*x13054*x13057))+((r01*x13059)));
evalcond[5]=((1.0)+(((-1.0)*x13056*x13058))+(((-1.0)*r12*x13057))+((r11*x13060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13061=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13061;
j4eval[1]=IKsign(x13061);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13062=((1.0)*cj5);
IkReal x13063=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13062)));
j4eval[0]=x13063;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13062))+((r21*sj5))))));
j4eval[2]=IKsign(x13063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13064=cj5*cj5;
IkReal x13065=(r11*r21);
IkReal x13066=((1.0)*r20);
IkReal x13067=(cj5*sj5);
IkReal x13068=((((-1.0)*r10*x13064*x13066))+((r10*r21*x13067))+(((-1.0)*x13065))+((r11*r20*x13067))+(((-1.0)*r12*r22))+((x13064*x13065)));
j4eval[0]=x13068;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13066))))));
j4eval[2]=IKsign(x13068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13069=cj5*cj5;
IkReal x13070=(r21*sj5);
IkReal x13071=(r11*r21);
IkReal x13072=((1.0)*r20);
CheckValue<IkReal> x13073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x13069*x13072))+(((-1.0)*x13071))+((x13069*x13071))+((cj5*r11*r20*sj5))+((cj5*r10*x13070)))),-1);
if(!x13073.valid){
continue;
}
CheckValue<IkReal> x13074 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13072))+x13070)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13073.value)))+(x13074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13075=IKcos(j4);
IkReal x13076=IKsin(j4);
IkReal x13077=(cj5*r00);
IkReal x13078=(cj5*r20);
IkReal x13079=(cj5*r10);
IkReal x13080=((1.0)*x13075);
IkReal x13081=((1.0)*x13076);
IkReal x13082=(sj5*x13075);
IkReal x13083=(sj5*x13076);
evalcond[0]=(((r22*x13076))+(((-1.0)*x13078*x13080))+((r21*x13082)));
evalcond[1]=(((r11*x13082))+((r12*x13076))+(((-1.0)*x13079*x13080)));
evalcond[2]=((((-1.0)*r22*x13080))+(((-1.0)*x13078*x13081))+((r21*x13083)));
evalcond[3]=((((-1.0)*r02*x13080))+(((-1.0)*x13077*x13081))+((r01*x13083)));
evalcond[4]=((1.0)+(((-1.0)*x13077*x13080))+((r02*x13076))+((r01*x13082)));
evalcond[5]=((1.0)+((r11*x13083))+(((-1.0)*x13079*x13081))+(((-1.0)*r12*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13084=((1.0)*cj5);
CheckValue<IkReal> x13085 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13084)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13085.valid){
continue;
}
CheckValue<IkReal> x13086=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13084))+(((-1.0)*r10*sj5)))),-1);
if(!x13086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13085.value)+(((1.5707963267949)*(x13086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13087=IKcos(j4);
IkReal x13088=IKsin(j4);
IkReal x13089=(cj5*r00);
IkReal x13090=(cj5*r20);
IkReal x13091=(cj5*r10);
IkReal x13092=((1.0)*x13087);
IkReal x13093=((1.0)*x13088);
IkReal x13094=(sj5*x13087);
IkReal x13095=(sj5*x13088);
evalcond[0]=((((-1.0)*x13090*x13092))+((r22*x13088))+((r21*x13094)));
evalcond[1]=(((r11*x13094))+((r12*x13088))+(((-1.0)*x13091*x13092)));
evalcond[2]=((((-1.0)*x13090*x13093))+(((-1.0)*r22*x13092))+((r21*x13095)));
evalcond[3]=(((r01*x13095))+(((-1.0)*x13089*x13093))+(((-1.0)*r02*x13092)));
evalcond[4]=((1.0)+((r02*x13088))+((r01*x13094))+(((-1.0)*x13089*x13092)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13092))+((r11*x13095))+(((-1.0)*x13091*x13093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13096=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13096.valid){
continue;
}
CheckValue<IkReal> x13097 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13096.value)))+(x13097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13098=IKcos(j4);
IkReal x13099=IKsin(j4);
IkReal x13100=(cj5*r00);
IkReal x13101=(cj5*r20);
IkReal x13102=(cj5*r10);
IkReal x13103=((1.0)*x13098);
IkReal x13104=((1.0)*x13099);
IkReal x13105=(sj5*x13098);
IkReal x13106=(sj5*x13099);
evalcond[0]=((((-1.0)*x13101*x13103))+((r22*x13099))+((r21*x13105)));
evalcond[1]=((((-1.0)*x13102*x13103))+((r12*x13099))+((r11*x13105)));
evalcond[2]=((((-1.0)*x13101*x13104))+((r21*x13106))+(((-1.0)*r22*x13103)));
evalcond[3]=(((r01*x13106))+(((-1.0)*x13100*x13104))+(((-1.0)*r02*x13103)));
evalcond[4]=((1.0)+((r02*x13099))+((r01*x13105))+(((-1.0)*x13100*x13103)));
evalcond[5]=((1.0)+(((-1.0)*x13102*x13104))+(((-1.0)*r12*x13103))+((r11*x13106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13107=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13107;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13108=((1.0)*cj5);
IkReal x13109=((((-1.0)*r21*x13108))+(((-1.0)*r20*sj5)));
j4eval[0]=x13109;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13108))))));
j4eval[2]=IKsign(x13109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13110=cj5*cj5;
IkReal x13111=(r11*r21);
IkReal x13112=((1.0)*r20);
IkReal x13113=(cj5*sj5);
IkReal x13114=((((-1.0)*r10*x13110*x13112))+(((-1.0)*r12*r22))+(((-1.0)*x13111))+((x13110*x13111))+((r10*r21*x13113))+((r11*r20*x13113)));
j4eval[0]=x13114;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13112))))));
j4eval[2]=IKsign(x13114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13115=cj5*cj5;
IkReal x13116=(r21*sj5);
IkReal x13117=(r11*r21);
IkReal x13118=((1.0)*r20);
CheckValue<IkReal> x13119 = IKatan2WithCheck(IkReal((x13116+(((-1.0)*cj5*x13118)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13119.valid){
continue;
}
CheckValue<IkReal> x13120=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x13115*x13118))+(((-1.0)*x13117))+((x13115*x13117))+((cj5*r10*x13116))+((cj5*r11*r20*sj5)))),-1);
if(!x13120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13119.value)+(((1.5707963267949)*(x13120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13121=IKcos(j4);
IkReal x13122=IKsin(j4);
IkReal x13123=(cj5*r00);
IkReal x13124=(cj5*r20);
IkReal x13125=(cj5*r10);
IkReal x13126=((1.0)*x13121);
IkReal x13127=((1.0)*x13122);
IkReal x13128=(sj5*x13121);
IkReal x13129=(sj5*x13122);
evalcond[0]=((((-1.0)*x13124*x13126))+((r22*x13122))+((r21*x13128)));
evalcond[1]=((((-1.0)*x13125*x13126))+((r11*x13128))+((r12*x13122)));
evalcond[2]=((((-1.0)*x13124*x13127))+(((-1.0)*r22*x13126))+((r21*x13129)));
evalcond[3]=((((-1.0)*r02*x13126))+(((-1.0)*x13123*x13127))+((r01*x13129)));
evalcond[4]=((-1.0)+(((-1.0)*x13123*x13126))+((r01*x13128))+((r02*x13122)));
evalcond[5]=((1.0)+(((-1.0)*x13125*x13127))+((r11*x13129))+(((-1.0)*r12*x13126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13130=((1.0)*cj5);
CheckValue<IkReal> x13131 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13130))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13131.valid){
continue;
}
CheckValue<IkReal> x13132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13130))+(((-1.0)*r20*sj5)))),-1);
if(!x13132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13131.value)+(((1.5707963267949)*(x13132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13133=IKcos(j4);
IkReal x13134=IKsin(j4);
IkReal x13135=(cj5*r00);
IkReal x13136=(cj5*r20);
IkReal x13137=(cj5*r10);
IkReal x13138=((1.0)*x13133);
IkReal x13139=((1.0)*x13134);
IkReal x13140=(sj5*x13133);
IkReal x13141=(sj5*x13134);
evalcond[0]=((((-1.0)*x13136*x13138))+((r21*x13140))+((r22*x13134)));
evalcond[1]=(((r12*x13134))+((r11*x13140))+(((-1.0)*x13137*x13138)));
evalcond[2]=((((-1.0)*x13136*x13139))+(((-1.0)*r22*x13138))+((r21*x13141)));
evalcond[3]=((((-1.0)*x13135*x13139))+((r01*x13141))+(((-1.0)*r02*x13138)));
evalcond[4]=((-1.0)+(((-1.0)*x13135*x13138))+((r02*x13134))+((r01*x13140)));
evalcond[5]=((1.0)+((r11*x13141))+(((-1.0)*x13137*x13139))+(((-1.0)*r12*x13138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13142 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13142.valid){
continue;
}
CheckValue<IkReal> x13143=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13142.value)+(((1.5707963267949)*(x13143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13144=IKcos(j4);
IkReal x13145=IKsin(j4);
IkReal x13146=(cj5*r00);
IkReal x13147=(cj5*r20);
IkReal x13148=(cj5*r10);
IkReal x13149=((1.0)*x13144);
IkReal x13150=((1.0)*x13145);
IkReal x13151=(sj5*x13144);
IkReal x13152=(sj5*x13145);
evalcond[0]=((((-1.0)*x13147*x13149))+((r21*x13151))+((r22*x13145)));
evalcond[1]=(((r12*x13145))+((r11*x13151))+(((-1.0)*x13148*x13149)));
evalcond[2]=(((r21*x13152))+(((-1.0)*x13147*x13150))+(((-1.0)*r22*x13149)));
evalcond[3]=((((-1.0)*x13146*x13150))+(((-1.0)*r02*x13149))+((r01*x13152)));
evalcond[4]=((-1.0)+(((-1.0)*x13146*x13149))+((r02*x13145))+((r01*x13151)));
evalcond[5]=((1.0)+(((-1.0)*x13148*x13150))+(((-1.0)*r12*x13149))+((r11*x13152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13153=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13153);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13153);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13154=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13154);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13154);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13155=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13155)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13155)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13156=((1.0)*cj5);
CheckValue<IkReal> x13157=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13156))),-1);
if(!x13157.valid){
continue;
}
CheckValue<IkReal> x13158=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13156))),-1);
if(!x13158.valid){
continue;
}
if( IKabs(((-1.0)*(x13157.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13158.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13157.value)))+IKsqr(((x13158.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13157.value)), ((x13158.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13159=IKsin(j4);
IkReal x13160=IKcos(j4);
IkReal x13161=((1.0)*cj5);
IkReal x13162=((1.0)*cj2);
IkReal x13163=(sj5*x13160);
IkReal x13164=(sj5*x13159);
evalcond[0]=((-1.0)*r22*x13160);
evalcond[1]=((((-1.0)*cj1*x13162))+((sj1*sj2))+((r22*x13159)));
evalcond[2]=((((-1.0)*r00*x13159*x13161))+((r01*x13164)));
evalcond[3]=((((-1.0)*r10*x13160*x13161))+((r11*x13163)));
evalcond[4]=((1.0)+((r11*x13164))+(((-1.0)*r10*x13159*x13161)));
evalcond[5]=(((r01*x13163))+(((-1.0)*sj1*x13162))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13160*x13161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13165=IKPowWithIntegerCheck(r22,-1);
if(!x13165.valid){
continue;
}
CheckValue<IkReal> x13166=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13166.valid){
continue;
}
if( IKabs(((x13165.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13166.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13165.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13166.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13165.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13166.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13167=IKsin(j4);
IkReal x13168=IKcos(j4);
IkReal x13169=((1.0)*cj5);
IkReal x13170=((1.0)*cj2);
IkReal x13171=(sj5*x13168);
IkReal x13172=(sj5*x13167);
evalcond[0]=((-1.0)*r22*x13168);
evalcond[1]=((((-1.0)*cj1*x13170))+((r22*x13167))+((sj1*sj2)));
evalcond[2]=(((r01*x13172))+(((-1.0)*r00*x13167*x13169)));
evalcond[3]=((((-1.0)*r10*x13168*x13169))+((r11*x13171)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13167*x13169))+((r11*x13172)));
evalcond[5]=(((r01*x13171))+(((-1.0)*sj1*x13170))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13168*x13169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13173=(sj1*sj2);
IkReal x13174=(cj5*r10);
IkReal x13175=(r11*sj5);
IkReal x13176=(cj1*cj2);
CheckValue<IkReal> x13177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13177.valid){
continue;
}
CheckValue<IkReal> x13178 = IKatan2WithCheck(IkReal((((x13173*x13175))+(((-1.0)*x13175*x13176))+(((-1.0)*x13173*x13174))+((x13174*x13176)))),IkReal(((((-1.0)*r12*x13173))+((r12*x13176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13177.value)))+(x13178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13179=IKcos(j4);
IkReal x13180=IKsin(j4);
IkReal x13181=(cj5*r00);
IkReal x13182=(cj5*r10);
IkReal x13183=(r21*sj5);
IkReal x13184=((1.0)*cj2);
IkReal x13185=(cj5*r20);
IkReal x13186=((1.0)*x13179);
IkReal x13187=((1.0)*x13180);
IkReal x13188=(sj5*x13180);
IkReal x13189=(sj5*x13179);
evalcond[0]=(((r12*x13180))+(((-1.0)*x13182*x13186))+((r11*x13189)));
evalcond[1]=((((-1.0)*r22*x13186))+(((-1.0)*x13185*x13187))+((x13180*x13183)));
evalcond[2]=((((-1.0)*r02*x13186))+((r01*x13188))+(((-1.0)*x13181*x13187)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13186))+(((-1.0)*x13182*x13187))+((r11*x13188)));
evalcond[4]=(((x13179*x13183))+((r22*x13180))+((sj1*sj2))+(((-1.0)*cj1*x13184))+(((-1.0)*x13185*x13186)));
evalcond[5]=(((r02*x13180))+(((-1.0)*cj1*sj2))+((r01*x13189))+(((-1.0)*sj1*x13184))+(((-1.0)*x13181*x13186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13190=((1.0)*cj5);
CheckValue<IkReal> x13191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13190)))),-1);
if(!x13191.valid){
continue;
}
CheckValue<IkReal> x13192 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13191.value)))+(x13192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13193=IKcos(j4);
IkReal x13194=IKsin(j4);
IkReal x13195=(cj5*r00);
IkReal x13196=(cj5*r10);
IkReal x13197=(r21*sj5);
IkReal x13198=((1.0)*cj2);
IkReal x13199=(cj5*r20);
IkReal x13200=((1.0)*x13193);
IkReal x13201=((1.0)*x13194);
IkReal x13202=(sj5*x13194);
IkReal x13203=(sj5*x13193);
evalcond[0]=(((r12*x13194))+((r11*x13203))+(((-1.0)*x13196*x13200)));
evalcond[1]=((((-1.0)*x13199*x13201))+((x13194*x13197))+(((-1.0)*r22*x13200)));
evalcond[2]=(((r01*x13202))+(((-1.0)*x13195*x13201))+(((-1.0)*r02*x13200)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13200))+((r11*x13202))+(((-1.0)*x13196*x13201)));
evalcond[4]=((((-1.0)*x13199*x13200))+(((-1.0)*cj1*x13198))+((sj1*sj2))+((x13193*x13197))+((r22*x13194)));
evalcond[5]=(((r01*x13203))+((r02*x13194))+(((-1.0)*x13195*x13200))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13204=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13204.valid){
continue;
}
CheckValue<IkReal> x13205 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13204.value)))+(x13205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13206=IKcos(j4);
IkReal x13207=IKsin(j4);
IkReal x13208=(cj5*r00);
IkReal x13209=(cj5*r10);
IkReal x13210=(r21*sj5);
IkReal x13211=((1.0)*cj2);
IkReal x13212=(cj5*r20);
IkReal x13213=((1.0)*x13206);
IkReal x13214=((1.0)*x13207);
IkReal x13215=(sj5*x13207);
IkReal x13216=(sj5*x13206);
evalcond[0]=(((r11*x13216))+((r12*x13207))+(((-1.0)*x13209*x13213)));
evalcond[1]=((((-1.0)*r22*x13213))+((x13207*x13210))+(((-1.0)*x13212*x13214)));
evalcond[2]=(((r01*x13215))+(((-1.0)*x13208*x13214))+(((-1.0)*r02*x13213)));
evalcond[3]=((1.0)+((r11*x13215))+(((-1.0)*r12*x13213))+(((-1.0)*x13209*x13214)));
evalcond[4]=((((-1.0)*cj1*x13211))+((x13206*x13210))+((sj1*sj2))+((r22*x13207))+(((-1.0)*x13212*x13213)));
evalcond[5]=(((r01*x13216))+(((-1.0)*x13208*x13213))+((r02*x13207))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13217=((-1.0)*r00);
IkReal x13219 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13219)==0){
continue;
}
IkReal x13218=pow(x13219,-0.5);
CheckValue<IkReal> x13220 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13217),IKFAST_ATAN2_MAGTHRESH);
if(!x13220.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13220.value));
IkReal gconst19=(r01*x13218);
IkReal gconst20=(x13217*x13218);
CheckValue<IkReal> x13221 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13221.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13221.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13222=((-1.0)*r00);
IkReal x13223=x13218;
CheckValue<IkReal> x13225 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13222),IKFAST_ATAN2_MAGTHRESH);
if(!x13225.valid){
continue;
}
IkReal x13224=((-1.0)*(x13225.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13224;
IkReal gconst18=x13224;
IkReal gconst19=(r01*x13223);
IkReal gconst20=(x13222*x13223);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13226=((-1.0)*r00);
IkReal x13227=x13218;
CheckValue<IkReal> x13229 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13226),IKFAST_ATAN2_MAGTHRESH);
if(!x13229.valid){
continue;
}
IkReal x13228=((-1.0)*(x13229.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13228;
IkReal gconst18=x13228;
IkReal gconst19=(r01*x13227);
IkReal gconst20=(x13226*x13227);
CheckValue<IkReal> x13237=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13237.valid){
continue;
}
IkReal x13230=x13237.value;
IkReal x13231=(sj3*x13230);
IkReal x13232=(r11*x13231);
IkReal x13233=(r21*x13231);
IkReal x13234=(r20*x13231);
IkReal x13235=(r10*x13231);
IkReal x13236=(r00*r01*x13231);
j4eval[0]=IKsign((((r00*r01*r20*x13232))+((r12*r22*sj3))+((r10*x13234*(r00*r00)))+((r21*x13232*(r01*r01)))+((r00*r01*r10*x13233))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13238=gconst19*gconst19;
IkReal x13239=gconst20*gconst20;
IkReal x13240=(gconst20*sj3);
IkReal x13241=((1.0)*cj3);
IkReal x13242=(r10*sj3);
IkReal x13243=(gconst19*r21);
IkReal x13244=(r11*r20);
IkReal x13245=(cj3*gconst20);
IkReal x13246=((1.0)*r10*r20);
IkReal x13247=(r21*x13238);
CheckValue<IkReal> x13248=IKPowWithIntegerCheck(IKsign((((r10*x13243*x13245))+(((-1.0)*r10*r20*x13239*x13241))+((gconst19*x13244*x13245))+(((-1.0)*r11*x13241*x13247))+(((-1.0)*r12*r22*x13241)))),-1);
if(!x13248.valid){
continue;
}
CheckValue<IkReal> x13249 = IKatan2WithCheck(IkReal((((gconst19*r22*x13242))+((r11*r22*x13240)))),IkReal((((r11*x13240*x13243))+((x13242*x13247))+(((-1.0)*sj3*x13239*x13244))+(((-1.0)*gconst19*x13240*x13246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13248.value)))+(x13249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13250=IKsin(j4);
IkReal x13251=IKcos(j4);
IkReal x13252=(sj1*sj2);
IkReal x13253=(gconst20*sj3);
IkReal x13254=(gconst19*r21);
IkReal x13255=(gconst20*r10);
IkReal x13256=(cj3*gconst19);
IkReal x13257=(gconst19*sj3);
IkReal x13258=((1.0)*cj1);
IkReal x13259=(cj3*gconst20);
IkReal x13260=(cj2*sj1);
IkReal x13261=(cj2*x13258);
IkReal x13262=((1.0)*x13251);
IkReal x13263=((1.0)*x13250);
IkReal x13264=(cj3*x13250);
IkReal x13265=(gconst19*x13250);
evalcond[0]=(((x13250*x13254))+(((-1.0)*r22*x13262))+(((-1.0)*gconst20*r20*x13263)));
evalcond[1]=((((-1.0)*gconst20*r00*x13263))+((r01*x13265))+(((-1.0)*r02*x13262)));
evalcond[2]=((1.0)+((r11*x13265))+(((-1.0)*x13255*x13263))+(((-1.0)*r12*x13262)));
evalcond[3]=(((r11*x13251*x13256))+((r10*x13257))+((r12*x13264))+(((-1.0)*cj3*x13255*x13262))+((r11*x13253)));
evalcond[4]=(((r10*x13256))+((r11*x13259))+((r10*x13251*x13253))+(((-1.0)*r11*x13257*x13262))+(((-1.0)*r12*sj3*x13263)));
evalcond[5]=(((r21*x13253))+((cj1*sj2))+(((-1.0)*r20*x13259*x13262))+((cj3*x13251*x13254))+((r22*x13264))+x13260+((r20*x13257)));
evalcond[6]=((((-1.0)*x13261))+((r01*x13253))+((r00*x13257))+(((-1.0)*r00*x13259*x13262))+((r02*x13264))+((r01*x13251*x13256))+x13252);
evalcond[7]=(((r21*x13259))+(((-1.0)*x13261))+(((-1.0)*r22*sj3*x13263))+(((-1.0)*sj3*x13254*x13262))+((r20*x13251*x13253))+x13252+((r20*x13256)));
evalcond[8]=(((r00*x13251*x13253))+(((-1.0)*x13260))+(((-1.0)*r02*sj3*x13263))+((r01*x13259))+((r00*x13256))+(((-1.0)*r01*x13257*x13262))+(((-1.0)*sj2*x13258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13266=gconst19*gconst19;
IkReal x13267=gconst20*gconst20;
IkReal x13268=(r21*sj3);
IkReal x13269=(cj3*r11);
IkReal x13270=(gconst19*gconst20);
IkReal x13271=((1.0)*r10);
IkReal x13272=(cj3*r10);
IkReal x13273=(r20*x13267);
CheckValue<IkReal> x13274 = IKatan2WithCheck(IkReal((((gconst19*r22*x13272))+((gconst20*r22*x13269)))),IkReal(((((-1.0)*cj3*r20*x13270*x13271))+(((-1.0)*x13269*x13273))+((r21*x13266*x13272))+((r21*x13269*x13270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13274.valid){
continue;
}
CheckValue<IkReal> x13275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj3*x13270))+((r11*x13266*x13268))+((r12*r22*sj3))+(((-1.0)*x13268*x13270*x13271))+((r10*sj3*x13273)))),-1);
if(!x13275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13274.value)+(((1.5707963267949)*(x13275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13276=IKsin(j4);
IkReal x13277=IKcos(j4);
IkReal x13278=(sj1*sj2);
IkReal x13279=(gconst20*sj3);
IkReal x13280=(gconst19*r21);
IkReal x13281=(gconst20*r10);
IkReal x13282=(cj3*gconst19);
IkReal x13283=(gconst19*sj3);
IkReal x13284=((1.0)*cj1);
IkReal x13285=(cj3*gconst20);
IkReal x13286=(cj2*sj1);
IkReal x13287=(cj2*x13284);
IkReal x13288=((1.0)*x13277);
IkReal x13289=((1.0)*x13276);
IkReal x13290=(cj3*x13276);
IkReal x13291=(gconst19*x13276);
evalcond[0]=((((-1.0)*r22*x13288))+(((-1.0)*gconst20*r20*x13289))+((x13276*x13280)));
evalcond[1]=((((-1.0)*gconst20*r00*x13289))+(((-1.0)*r02*x13288))+((r01*x13291)));
evalcond[2]=((1.0)+((r11*x13291))+(((-1.0)*x13281*x13289))+(((-1.0)*r12*x13288)));
evalcond[3]=(((r11*x13279))+((r12*x13290))+((r10*x13283))+(((-1.0)*cj3*x13281*x13288))+((r11*x13277*x13282)));
evalcond[4]=((((-1.0)*r11*x13283*x13288))+((r11*x13285))+((r10*x13282))+((r10*x13277*x13279))+(((-1.0)*r12*sj3*x13289)));
evalcond[5]=(((r21*x13279))+((r20*x13283))+((cj1*sj2))+((cj3*x13277*x13280))+((r22*x13290))+(((-1.0)*r20*x13285*x13288))+x13286);
evalcond[6]=(((r01*x13279))+((r02*x13290))+((r01*x13277*x13282))+(((-1.0)*r00*x13285*x13288))+x13278+((r00*x13283))+(((-1.0)*x13287)));
evalcond[7]=(((r20*x13277*x13279))+(((-1.0)*sj3*x13280*x13288))+((r20*x13282))+(((-1.0)*r22*sj3*x13289))+((r21*x13285))+x13278+(((-1.0)*x13287)));
evalcond[8]=(((r00*x13277*x13279))+(((-1.0)*sj2*x13284))+(((-1.0)*r01*x13283*x13288))+(((-1.0)*x13286))+((r01*x13285))+((r00*x13282))+(((-1.0)*r02*sj3*x13289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13292 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13292.valid){
continue;
}
CheckValue<IkReal> x13293=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13292.value)+(((1.5707963267949)*(x13293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13294=IKsin(j4);
IkReal x13295=IKcos(j4);
IkReal x13296=(sj1*sj2);
IkReal x13297=(gconst20*sj3);
IkReal x13298=(gconst19*r21);
IkReal x13299=(gconst20*r10);
IkReal x13300=(cj3*gconst19);
IkReal x13301=(gconst19*sj3);
IkReal x13302=((1.0)*cj1);
IkReal x13303=(cj3*gconst20);
IkReal x13304=(cj2*sj1);
IkReal x13305=(cj2*x13302);
IkReal x13306=((1.0)*x13295);
IkReal x13307=((1.0)*x13294);
IkReal x13308=(cj3*x13294);
IkReal x13309=(gconst19*x13294);
evalcond[0]=((((-1.0)*gconst20*r20*x13307))+((x13294*x13298))+(((-1.0)*r22*x13306)));
evalcond[1]=((((-1.0)*gconst20*r00*x13307))+((r01*x13309))+(((-1.0)*r02*x13306)));
evalcond[2]=((1.0)+(((-1.0)*x13299*x13307))+(((-1.0)*r12*x13306))+((r11*x13309)));
evalcond[3]=(((r11*x13297))+((r12*x13308))+((r11*x13295*x13300))+((r10*x13301))+(((-1.0)*cj3*x13299*x13306)));
evalcond[4]=((((-1.0)*r12*sj3*x13307))+((r10*x13300))+(((-1.0)*r11*x13301*x13306))+((r10*x13295*x13297))+((r11*x13303)));
evalcond[5]=(((r20*x13301))+((cj3*x13295*x13298))+((cj1*sj2))+((r22*x13308))+(((-1.0)*r20*x13303*x13306))+x13304+((r21*x13297)));
evalcond[6]=(((r00*x13301))+(((-1.0)*x13305))+x13296+((r02*x13308))+((r01*x13295*x13300))+(((-1.0)*r00*x13303*x13306))+((r01*x13297)));
evalcond[7]=(((r21*x13303))+((r20*x13300))+((r20*x13295*x13297))+(((-1.0)*r22*sj3*x13307))+(((-1.0)*x13305))+x13296+(((-1.0)*sj3*x13298*x13306)));
evalcond[8]=((((-1.0)*r02*sj3*x13307))+((r00*x13300))+((r01*x13303))+((r00*x13295*x13297))+(((-1.0)*sj2*x13302))+(((-1.0)*r01*x13301*x13306))+(((-1.0)*x13304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13310=((-1.0)*r01);
IkReal x13312 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13312)==0){
continue;
}
IkReal x13311=pow(x13312,-0.5);
CheckValue<IkReal> x13313 = IKatan2WithCheck(IkReal(x13310),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13313.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13313.value))));
IkReal gconst22=(x13310*x13311);
IkReal gconst23=((1.0)*r00*x13311);
CheckValue<IkReal> x13314 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13314.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13314.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13315=((-1.0)*r01);
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal(x13315),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
IkReal x13316=((1.0)*(x13318.value));
IkReal x13317=x13311;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13316)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13316)));
IkReal gconst22=(x13315*x13317);
IkReal gconst23=((1.0)*r00*x13317);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13319=((-1.0)*r01);
CheckValue<IkReal> x13322 = IKatan2WithCheck(IkReal(x13319),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13322.valid){
continue;
}
IkReal x13320=((1.0)*(x13322.value));
IkReal x13321=x13311;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13320)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13320)));
IkReal gconst22=(x13319*x13321);
IkReal gconst23=((1.0)*r00*x13321);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13323=gconst22*gconst22;
IkReal x13324=gconst23*gconst23;
IkReal x13325=(r21*sj3);
IkReal x13326=((1.0)*cj3);
IkReal x13327=(gconst23*r11);
IkReal x13328=(r22*sj3);
IkReal x13329=(gconst22*r10);
IkReal x13330=((1.0)*r20*sj3);
CheckValue<IkReal> x13331 = IKatan2WithCheck(IkReal((((x13328*x13329))+((x13327*x13328)))),IkReal(((((-1.0)*gconst23*x13329*x13330))+((gconst22*x13325*x13327))+((r10*x13323*x13325))+(((-1.0)*r11*x13324*x13330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13331.valid){
continue;
}
CheckValue<IkReal> x13332=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13326))+(((-1.0)*r10*r20*x13324*x13326))+(((-1.0)*r11*r21*x13323*x13326))+((cj3*gconst23*r21*x13329))+((cj3*gconst22*r20*x13327)))),-1);
if(!x13332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13331.value)+(((1.5707963267949)*(x13332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13333=IKsin(j4);
IkReal x13334=IKcos(j4);
IkReal x13335=(sj1*sj2);
IkReal x13336=(gconst23*sj3);
IkReal x13337=(gconst22*sj3);
IkReal x13338=(cj2*sj1);
IkReal x13339=((1.0)*cj1);
IkReal x13340=(cj3*gconst23);
IkReal x13341=(cj3*gconst22);
IkReal x13342=(cj2*x13339);
IkReal x13343=((1.0)*x13334);
IkReal x13344=(cj3*x13333);
IkReal x13345=(gconst22*x13333);
IkReal x13346=((1.0)*sj3*x13333);
IkReal x13347=(x13334*x13341);
IkReal x13348=((1.0)*gconst23*x13333);
evalcond[0]=(((r21*x13345))+(((-1.0)*r22*x13343))+(((-1.0)*r20*x13348)));
evalcond[1]=((((-1.0)*r02*x13343))+((r01*x13345))+(((-1.0)*r00*x13348)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13348))+(((-1.0)*r12*x13343))+((r11*x13345)));
evalcond[3]=((((-1.0)*r10*x13340*x13343))+((r10*x13337))+((r12*x13344))+((r11*x13347))+((r11*x13336)));
evalcond[4]=(((r10*x13334*x13336))+((r10*x13341))+(((-1.0)*r12*x13346))+((r11*x13340))+(((-1.0)*r11*x13337*x13343)));
evalcond[5]=((((-1.0)*r20*x13340*x13343))+((cj1*sj2))+((r22*x13344))+((r21*x13347))+((r20*x13337))+((r21*x13336))+x13338);
evalcond[6]=((((-1.0)*x13342))+(((-1.0)*r00*x13340*x13343))+((r00*x13337))+((r01*x13336))+((r02*x13344))+((r01*x13347))+x13335);
evalcond[7]=(((r20*x13334*x13336))+(((-1.0)*x13342))+((r21*x13340))+(((-1.0)*r21*x13337*x13343))+((r20*x13341))+(((-1.0)*r22*x13346))+x13335);
evalcond[8]=((((-1.0)*sj2*x13339))+(((-1.0)*x13338))+(((-1.0)*r01*x13337*x13343))+(((-1.0)*r02*x13346))+((r00*x13334*x13336))+((r00*x13341))+((r01*x13340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13349=((1.0)*gconst23);
CheckValue<IkReal> x13350=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13349))+(((-1.0)*gconst22*r00)))),-1);
if(!x13350.valid){
continue;
}
CheckValue<IkReal> x13351 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13350.value)))+(x13351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13352=IKsin(j4);
IkReal x13353=IKcos(j4);
IkReal x13354=(sj1*sj2);
IkReal x13355=(gconst23*sj3);
IkReal x13356=(gconst22*sj3);
IkReal x13357=(cj2*sj1);
IkReal x13358=((1.0)*cj1);
IkReal x13359=(cj3*gconst23);
IkReal x13360=(cj3*gconst22);
IkReal x13361=(cj2*x13358);
IkReal x13362=((1.0)*x13353);
IkReal x13363=(cj3*x13352);
IkReal x13364=(gconst22*x13352);
IkReal x13365=((1.0)*sj3*x13352);
IkReal x13366=(x13353*x13360);
IkReal x13367=((1.0)*gconst23*x13352);
evalcond[0]=((((-1.0)*r22*x13362))+(((-1.0)*r20*x13367))+((r21*x13364)));
evalcond[1]=(((r01*x13364))+(((-1.0)*r00*x13367))+(((-1.0)*r02*x13362)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13362))+(((-1.0)*r10*x13367))+((r11*x13364)));
evalcond[3]=(((r12*x13363))+((r11*x13366))+(((-1.0)*r10*x13359*x13362))+((r10*x13356))+((r11*x13355)));
evalcond[4]=(((r10*x13353*x13355))+((r10*x13360))+(((-1.0)*r12*x13365))+((r11*x13359))+(((-1.0)*r11*x13356*x13362)));
evalcond[5]=(((cj1*sj2))+((r20*x13356))+((r21*x13355))+(((-1.0)*r20*x13359*x13362))+((r21*x13366))+((r22*x13363))+x13357);
evalcond[6]=((((-1.0)*r00*x13359*x13362))+((r01*x13366))+((r01*x13355))+((r00*x13356))+(((-1.0)*x13361))+x13354+((r02*x13363)));
evalcond[7]=((((-1.0)*r21*x13356*x13362))+(((-1.0)*r22*x13365))+((r20*x13360))+((r21*x13359))+(((-1.0)*x13361))+((r20*x13353*x13355))+x13354);
evalcond[8]=(((r00*x13360))+(((-1.0)*x13357))+(((-1.0)*r01*x13356*x13362))+((r00*x13353*x13355))+(((-1.0)*r02*x13365))+((r01*x13359))+(((-1.0)*sj2*x13358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13368=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13368.valid){
continue;
}
CheckValue<IkReal> x13369 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13368.value)))+(x13369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13370=IKsin(j4);
IkReal x13371=IKcos(j4);
IkReal x13372=(sj1*sj2);
IkReal x13373=(gconst23*sj3);
IkReal x13374=(gconst22*sj3);
IkReal x13375=(cj2*sj1);
IkReal x13376=((1.0)*cj1);
IkReal x13377=(cj3*gconst23);
IkReal x13378=(cj3*gconst22);
IkReal x13379=(cj2*x13376);
IkReal x13380=((1.0)*x13371);
IkReal x13381=(cj3*x13370);
IkReal x13382=(gconst22*x13370);
IkReal x13383=((1.0)*sj3*x13370);
IkReal x13384=(x13371*x13378);
IkReal x13385=((1.0)*gconst23*x13370);
evalcond[0]=((((-1.0)*r22*x13380))+(((-1.0)*r20*x13385))+((r21*x13382)));
evalcond[1]=(((r01*x13382))+(((-1.0)*r00*x13385))+(((-1.0)*r02*x13380)));
evalcond[2]=((1.0)+((r11*x13382))+(((-1.0)*r10*x13385))+(((-1.0)*r12*x13380)));
evalcond[3]=(((r10*x13374))+((r11*x13384))+((r11*x13373))+((r12*x13381))+(((-1.0)*r10*x13377*x13380)));
evalcond[4]=(((r10*x13371*x13373))+((r10*x13378))+(((-1.0)*r11*x13374*x13380))+((r11*x13377))+(((-1.0)*r12*x13383)));
evalcond[5]=(((cj1*sj2))+((r20*x13374))+((r22*x13381))+((r21*x13373))+x13375+(((-1.0)*r20*x13377*x13380))+((r21*x13384)));
evalcond[6]=((((-1.0)*r00*x13377*x13380))+((r00*x13374))+((r01*x13373))+((r01*x13384))+(((-1.0)*x13379))+((r02*x13381))+x13372);
evalcond[7]=((((-1.0)*r22*x13383))+((r20*x13378))+((r20*x13371*x13373))+(((-1.0)*r21*x13374*x13380))+(((-1.0)*x13379))+((r21*x13377))+x13372);
evalcond[8]=(((r00*x13378))+((r01*x13377))+((r00*x13371*x13373))+(((-1.0)*r01*x13374*x13380))+(((-1.0)*r02*x13383))+(((-1.0)*sj2*x13376))+(((-1.0)*x13375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13387 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13387)==0){
continue;
}
IkReal x13386=pow(x13387,-0.5);
CheckValue<IkReal> x13388 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13388.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13388.value));
IkReal gconst25=((-1.0)*r21*x13386);
IkReal gconst26=(r20*x13386);
CheckValue<IkReal> x13389 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13389.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13389.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13392 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13392.valid){
continue;
}
IkReal x13390=((-1.0)*(x13392.value));
IkReal x13391=x13386;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13390;
IkReal gconst24=x13390;
IkReal gconst25=((-1.0)*r21*x13391);
IkReal gconst26=(r20*x13391);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13395 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13395.valid){
continue;
}
IkReal x13393=((-1.0)*(x13395.value));
IkReal x13394=x13386;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13393;
IkReal gconst24=x13393;
IkReal gconst25=((-1.0)*r21*x13394);
IkReal gconst26=(r20*x13394);
CheckValue<IkReal> x13403=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13403.valid){
continue;
}
IkReal x13396=x13403.value;
IkReal x13397=(sj3*x13396);
IkReal x13398=(r11*x13397);
IkReal x13399=(r00*x13397);
IkReal x13400=(r01*x13397);
IkReal x13401=(r10*x13397);
IkReal x13402=(r20*r21*x13397);
j4eval[0]=IKsign((((r01*x13398*(r21*r21)))+((r02*r12*sj3))+((r10*r20*r21*x13400))+((r10*x13399*(r20*r20)))+((r00*r20*r21*x13398))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13404=gconst25*gconst25;
IkReal x13405=gconst26*gconst26;
IkReal x13406=(r00*r11);
IkReal x13407=(r01*r10);
IkReal x13408=(r02*sj3);
IkReal x13409=(gconst25*r10);
IkReal x13410=(gconst26*r11);
IkReal x13411=((1.0)*sj3);
IkReal x13412=((1.0)*cj3);
IkReal x13413=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13414 = IKatan2WithCheck(IkReal((((x13408*x13410))+((x13408*x13409)))),IkReal(((((-1.0)*x13405*x13406*x13411))+((gconst25*r01*sj3*x13410))+((sj3*x13404*x13407))+(((-1.0)*gconst26*r00*x13409*x13411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13414.valid){
continue;
}
CheckValue<IkReal> x13415=IKPowWithIntegerCheck(IKsign((((x13406*x13413))+((x13407*x13413))+(((-1.0)*r02*r12*x13412))+(((-1.0)*r01*r11*x13404*x13412))+(((-1.0)*r00*r10*x13405*x13412)))),-1);
if(!x13415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13414.value)+(((1.5707963267949)*(x13415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13416=IKsin(j4);
IkReal x13417=IKcos(j4);
IkReal x13418=(sj1*sj2);
IkReal x13419=(gconst26*sj3);
IkReal x13420=(gconst25*sj3);
IkReal x13421=(gconst26*r10);
IkReal x13422=(gconst25*r11);
IkReal x13423=(cj3*gconst25);
IkReal x13424=((1.0)*cj2);
IkReal x13425=(cj1*sj2);
IkReal x13426=(gconst26*r00);
IkReal x13427=(gconst26*r20);
IkReal x13428=(cj3*gconst26);
IkReal x13429=(cj1*x13424);
IkReal x13430=((1.0)*x13417);
IkReal x13431=((1.0)*x13416);
IkReal x13432=(cj3*x13416);
IkReal x13433=(gconst25*x13416);
evalcond[0]=((((-1.0)*r22*x13430))+(((-1.0)*x13427*x13431))+((r21*x13433)));
evalcond[1]=(((r01*x13433))+(((-1.0)*x13426*x13431))+(((-1.0)*r02*x13430)));
evalcond[2]=((1.0)+(((-1.0)*x13421*x13431))+(((-1.0)*r12*x13430))+((x13416*x13422)));
evalcond[3]=(((cj3*x13417*x13422))+(((-1.0)*cj3*x13421*x13430))+((r12*x13432))+((r11*x13419))+((r10*x13420)));
evalcond[4]=(((r10*x13417*x13419))+(((-1.0)*r11*x13420*x13430))+((r11*x13428))+(((-1.0)*r12*sj3*x13431))+((r10*x13423)));
evalcond[5]=(x13425+((cj2*sj1))+(((-1.0)*cj3*x13427*x13430))+((r21*x13417*x13423))+((r22*x13432))+((r21*x13419))+((r20*x13420)));
evalcond[6]=(x13418+(((-1.0)*cj3*x13426*x13430))+((r02*x13432))+(((-1.0)*x13429))+((r01*x13419))+((r01*x13417*x13423))+((r00*x13420)));
evalcond[7]=(x13418+(((-1.0)*x13429))+(((-1.0)*r21*x13420*x13430))+((r21*x13428))+((r20*x13417*x13419))+(((-1.0)*r22*sj3*x13431))+((r20*x13423)));
evalcond[8]=((((-1.0)*r01*x13420*x13430))+(((-1.0)*x13425))+(((-1.0)*sj1*x13424))+(((-1.0)*r02*sj3*x13431))+((r00*x13423))+((r01*x13428))+((r00*x13417*x13419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13434=gconst26*gconst26;
IkReal x13435=gconst25*gconst25;
IkReal x13436=(r01*r10);
IkReal x13437=(cj3*r11);
IkReal x13438=(gconst25*gconst26);
IkReal x13439=(cj3*r10);
IkReal x13440=(r00*x13434);
IkReal x13441=((1.0)*sj3*x13438);
CheckValue<IkReal> x13442 = IKatan2WithCheck(IkReal((((gconst25*r02*x13439))+((gconst26*r02*x13437)))),IkReal(((((-1.0)*r00*x13438*x13439))+((cj3*x13435*x13436))+((r01*x13437*x13438))+(((-1.0)*x13437*x13440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13442.valid){
continue;
}
CheckValue<IkReal> x13443=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*r11*sj3*x13435))+(((-1.0)*x13436*x13441))+(((-1.0)*r00*r11*x13441))+((r10*sj3*x13440)))),-1);
if(!x13443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13442.value)+(((1.5707963267949)*(x13443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13444=IKsin(j4);
IkReal x13445=IKcos(j4);
IkReal x13446=(sj1*sj2);
IkReal x13447=(gconst26*sj3);
IkReal x13448=(gconst25*sj3);
IkReal x13449=(gconst26*r10);
IkReal x13450=(gconst25*r11);
IkReal x13451=(cj3*gconst25);
IkReal x13452=((1.0)*cj2);
IkReal x13453=(cj1*sj2);
IkReal x13454=(gconst26*r00);
IkReal x13455=(gconst26*r20);
IkReal x13456=(cj3*gconst26);
IkReal x13457=(cj1*x13452);
IkReal x13458=((1.0)*x13445);
IkReal x13459=((1.0)*x13444);
IkReal x13460=(cj3*x13444);
IkReal x13461=(gconst25*x13444);
evalcond[0]=((((-1.0)*r22*x13458))+((r21*x13461))+(((-1.0)*x13455*x13459)));
evalcond[1]=((((-1.0)*x13454*x13459))+(((-1.0)*r02*x13458))+((r01*x13461)));
evalcond[2]=((1.0)+((x13444*x13450))+(((-1.0)*x13449*x13459))+(((-1.0)*r12*x13458)));
evalcond[3]=(((r12*x13460))+(((-1.0)*cj3*x13449*x13458))+((cj3*x13445*x13450))+((r10*x13448))+((r11*x13447)));
evalcond[4]=(((r10*x13451))+((r11*x13456))+(((-1.0)*r12*sj3*x13459))+((r10*x13445*x13447))+(((-1.0)*r11*x13448*x13458)));
evalcond[5]=(x13453+((cj2*sj1))+((r21*x13445*x13451))+((r20*x13448))+((r22*x13460))+(((-1.0)*cj3*x13455*x13458))+((r21*x13447)));
evalcond[6]=(x13446+((r01*x13445*x13451))+(((-1.0)*x13457))+((r00*x13448))+((r01*x13447))+((r02*x13460))+(((-1.0)*cj3*x13454*x13458)));
evalcond[7]=(x13446+((r20*x13451))+((r21*x13456))+(((-1.0)*x13457))+(((-1.0)*r21*x13448*x13458))+((r20*x13445*x13447))+(((-1.0)*r22*sj3*x13459)));
evalcond[8]=((((-1.0)*r02*sj3*x13459))+((r00*x13445*x13447))+(((-1.0)*sj1*x13452))+(((-1.0)*x13453))+(((-1.0)*r01*x13448*x13458))+((r01*x13456))+((r00*x13451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13462=((1.0)*gconst26);
CheckValue<IkReal> x13463 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13462))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13463.valid){
continue;
}
CheckValue<IkReal> x13464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13462))+(((-1.0)*gconst25*r00)))),-1);
if(!x13464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13463.value)+(((1.5707963267949)*(x13464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13465=IKsin(j4);
IkReal x13466=IKcos(j4);
IkReal x13467=(sj1*sj2);
IkReal x13468=(gconst26*sj3);
IkReal x13469=(gconst25*sj3);
IkReal x13470=(gconst26*r10);
IkReal x13471=(gconst25*r11);
IkReal x13472=(cj3*gconst25);
IkReal x13473=((1.0)*cj2);
IkReal x13474=(cj1*sj2);
IkReal x13475=(gconst26*r00);
IkReal x13476=(gconst26*r20);
IkReal x13477=(cj3*gconst26);
IkReal x13478=(cj1*x13473);
IkReal x13479=((1.0)*x13466);
IkReal x13480=((1.0)*x13465);
IkReal x13481=(cj3*x13465);
IkReal x13482=(gconst25*x13465);
evalcond[0]=((((-1.0)*r22*x13479))+((r21*x13482))+(((-1.0)*x13476*x13480)));
evalcond[1]=((((-1.0)*r02*x13479))+(((-1.0)*x13475*x13480))+((r01*x13482)));
evalcond[2]=((1.0)+(((-1.0)*x13470*x13480))+(((-1.0)*r12*x13479))+((x13465*x13471)));
evalcond[3]=(((r10*x13469))+(((-1.0)*cj3*x13470*x13479))+((r11*x13468))+((cj3*x13466*x13471))+((r12*x13481)));
evalcond[4]=(((r10*x13466*x13468))+(((-1.0)*r11*x13469*x13479))+((r11*x13477))+((r10*x13472))+(((-1.0)*r12*sj3*x13480)));
evalcond[5]=(x13474+((r20*x13469))+((cj2*sj1))+((r21*x13468))+(((-1.0)*cj3*x13476*x13479))+((r22*x13481))+((r21*x13466*x13472)));
evalcond[6]=(x13467+((r02*x13481))+(((-1.0)*cj3*x13475*x13479))+((r01*x13466*x13472))+(((-1.0)*x13478))+((r01*x13468))+((r00*x13469)));
evalcond[7]=(x13467+((r21*x13477))+(((-1.0)*x13478))+(((-1.0)*r22*sj3*x13480))+(((-1.0)*r21*x13469*x13479))+((r20*x13466*x13468))+((r20*x13472)));
evalcond[8]=(((r00*x13472))+((r01*x13477))+(((-1.0)*r01*x13469*x13479))+(((-1.0)*sj1*x13473))+((r00*x13466*x13468))+(((-1.0)*x13474))+(((-1.0)*r02*sj3*x13480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13484 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13484)==0){
continue;
}
IkReal x13483=pow(x13484,-0.5);
CheckValue<IkReal> x13485 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13485.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13485.value))));
IkReal gconst28=((1.0)*r21*x13483);
IkReal gconst29=((-1.0)*r20*x13483);
CheckValue<IkReal> x13486 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13486.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13486.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13489 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13489.valid){
continue;
}
IkReal x13487=((1.0)*(x13489.value));
IkReal x13488=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13487)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13487)));
IkReal gconst28=((1.0)*r21*x13488);
IkReal gconst29=((-1.0)*r20*x13488);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13492 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13492.valid){
continue;
}
IkReal x13490=((1.0)*(x13492.value));
IkReal x13491=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13490)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13490)));
IkReal gconst28=((1.0)*r21*x13491);
IkReal gconst29=((-1.0)*r20*x13491);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13495 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13495.valid){
continue;
}
IkReal x13493=((1.0)*(x13495.value));
IkReal x13494=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13493)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13493)));
IkReal gconst28=((1.0)*r21*x13494);
IkReal gconst29=((-1.0)*r20*x13494);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
IkReal x13496=((1.0)*(x13498.value));
IkReal x13497=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13496)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13496)));
IkReal gconst28=((1.0)*r21*x13497);
IkReal gconst29=((-1.0)*r20*x13497);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13501 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13501.valid){
continue;
}
IkReal x13499=((1.0)*(x13501.value));
IkReal x13500=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13499)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13499)));
IkReal gconst28=((1.0)*r21*x13500);
IkReal gconst29=((-1.0)*r20*x13500);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13504 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13504.valid){
continue;
}
IkReal x13502=((1.0)*(x13504.value));
IkReal x13503=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13502)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13502)));
IkReal gconst28=((1.0)*r21*x13503);
IkReal gconst29=((-1.0)*r20*x13503);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13505=(gconst29*r10);
IkReal x13506=(gconst28*r11);
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal((x13505+(((-1.0)*x13506)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
CheckValue<IkReal> x13508=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13506*x13506)+(((-2.0)*x13505*x13506))+(x13505*x13505))),-1);
if(!x13508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13507.value)+(((1.5707963267949)*(x13508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13509=IKsin(j4);
IkReal x13510=IKcos(j4);
IkReal x13511=(gconst28*r11);
IkReal x13512=((1.0)*cj2);
IkReal x13513=((1.0)*x13510);
IkReal x13514=(gconst29*x13510);
IkReal x13515=(gconst28*x13509);
IkReal x13516=((1.0)*x13509);
IkReal x13517=(gconst29*x13516);
evalcond[0]=(((r21*x13515))+(((-1.0)*r22*x13513))+(((-1.0)*r20*x13517)));
evalcond[1]=((((-1.0)*r00*x13517))+((r01*x13515))+(((-1.0)*r02*x13513)));
evalcond[2]=((((-1.0)*r12*x13516))+(((-1.0)*x13511*x13513))+((r10*x13514)));
evalcond[3]=((1.0)+((x13509*x13511))+(((-1.0)*r12*x13513))+(((-1.0)*r10*x13517)));
evalcond[4]=((((-1.0)*r22*x13516))+((r20*x13514))+(((-1.0)*cj1*x13512))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13513)));
evalcond[5]=((((-1.0)*sj1*x13512))+(((-1.0)*gconst28*r01*x13513))+(((-1.0)*cj1*sj2))+((r00*x13514))+(((-1.0)*r02*x13516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13518=((1.0)*gconst29);
CheckValue<IkReal> x13519 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13518))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13519.valid){
continue;
}
CheckValue<IkReal> x13520=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13518)))),-1);
if(!x13520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13519.value)+(((1.5707963267949)*(x13520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13521=IKsin(j4);
IkReal x13522=IKcos(j4);
IkReal x13523=(gconst28*r11);
IkReal x13524=((1.0)*cj2);
IkReal x13525=((1.0)*x13522);
IkReal x13526=(gconst29*x13522);
IkReal x13527=(gconst28*x13521);
IkReal x13528=((1.0)*x13521);
IkReal x13529=(gconst29*x13528);
evalcond[0]=(((r21*x13527))+(((-1.0)*r22*x13525))+(((-1.0)*r20*x13529)));
evalcond[1]=(((r01*x13527))+(((-1.0)*r00*x13529))+(((-1.0)*r02*x13525)));
evalcond[2]=((((-1.0)*r12*x13528))+(((-1.0)*x13523*x13525))+((r10*x13526)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13525))+((x13521*x13523))+(((-1.0)*r10*x13529)));
evalcond[4]=((((-1.0)*r22*x13528))+((r20*x13526))+((sj1*sj2))+(((-1.0)*cj1*x13524))+(((-1.0)*gconst28*r21*x13525)));
evalcond[5]=((((-1.0)*sj1*x13524))+(((-1.0)*gconst28*r01*x13525))+(((-1.0)*cj1*sj2))+((r00*x13526))+(((-1.0)*r02*x13528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13530=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13530.valid){
continue;
}
CheckValue<IkReal> x13531 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13530.value)))+(x13531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13532=IKsin(j4);
IkReal x13533=IKcos(j4);
IkReal x13534=(gconst28*r11);
IkReal x13535=((1.0)*cj2);
IkReal x13536=((1.0)*x13533);
IkReal x13537=(gconst29*x13533);
IkReal x13538=(gconst28*x13532);
IkReal x13539=((1.0)*x13532);
IkReal x13540=(gconst29*x13539);
evalcond[0]=((((-1.0)*r22*x13536))+((r21*x13538))+(((-1.0)*r20*x13540)));
evalcond[1]=((((-1.0)*r00*x13540))+(((-1.0)*r02*x13536))+((r01*x13538)));
evalcond[2]=((((-1.0)*x13534*x13536))+(((-1.0)*r12*x13539))+((r10*x13537)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13536))+(((-1.0)*r10*x13540))+((x13532*x13534)));
evalcond[4]=((((-1.0)*r22*x13539))+((r20*x13537))+(((-1.0)*cj1*x13535))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13536)));
evalcond[5]=((((-1.0)*sj1*x13535))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13536))+(((-1.0)*r02*x13539))+((r00*x13537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13543 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13543.valid){
continue;
}
IkReal x13541=((1.0)*(x13543.value));
IkReal x13542=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13541)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13541)));
IkReal gconst28=((1.0)*r21*x13542);
IkReal gconst29=((-1.0)*r20*x13542);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13546 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13546.valid){
continue;
}
IkReal x13544=((1.0)*(x13546.value));
IkReal x13545=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13544)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13544)));
IkReal gconst28=((1.0)*r21*x13545);
IkReal gconst29=((-1.0)*r20*x13545);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13549 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13549.valid){
continue;
}
IkReal x13547=((1.0)*(x13549.value));
IkReal x13548=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13547)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13547)));
IkReal gconst28=((1.0)*r21*x13548);
IkReal gconst29=((-1.0)*r20*x13548);
IkReal x13550=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13554=IKPowWithIntegerCheck(x13550,-1);
if(!x13554.valid){
continue;
}
IkReal x13551=x13554.value;
IkReal x13552=((1.0)*x13551);
IkReal x13553=((((-1.0)*x13552*(r11*r11)*(r21*r21)))+(((-1.0)*x13552*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13551)));
j4eval[0]=x13553;
j4eval[1]=r12;
j4eval[2]=x13550;
j4eval[3]=IKsign(x13553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13555=(gconst28*r11);
IkReal x13556=(gconst29*r10);
CheckValue<IkReal> x13557 = IKatan2WithCheck(IkReal((x13555+(((-1.0)*x13556)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13557.valid){
continue;
}
CheckValue<IkReal> x13558=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13555*x13555)))+(((2.0)*x13555*x13556))+(((-1.0)*(x13556*x13556)))+(((-1.0)*(r12*r12))))),-1);
if(!x13558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13557.value)+(((1.5707963267949)*(x13558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13559=IKcos(j4);
IkReal x13560=IKsin(j4);
IkReal x13561=(gconst29*r10);
IkReal x13562=(gconst29*r20);
IkReal x13563=(gconst28*r21);
IkReal x13564=((1.0)*cj2);
IkReal x13565=(gconst29*r00);
IkReal x13566=((1.0)*x13559);
IkReal x13567=((1.0)*x13560);
IkReal x13568=(gconst28*x13559);
IkReal x13569=(gconst28*x13560);
evalcond[0]=(((r11*x13568))+((r12*x13560))+(((-1.0)*x13561*x13566)));
evalcond[1]=((((-1.0)*x13562*x13567))+((x13560*x13563))+(((-1.0)*r22*x13566)));
evalcond[2]=(((r01*x13569))+(((-1.0)*r02*x13566))+(((-1.0)*x13565*x13567)));
evalcond[3]=((1.0)+((r11*x13569))+(((-1.0)*r12*x13566))+(((-1.0)*x13561*x13567)));
evalcond[4]=((((-1.0)*x13562*x13566))+((x13559*x13563))+((sj1*sj2))+(((-1.0)*cj1*x13564))+((r22*x13560)));
evalcond[5]=(((r01*x13568))+(((-1.0)*sj1*x13564))+(((-1.0)*cj1*sj2))+((r02*x13560))+(((-1.0)*x13565*x13566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13570=((1.0)*gconst29);
CheckValue<IkReal> x13571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13570))+(((-1.0)*gconst28*r00)))),-1);
if(!x13571.valid){
continue;
}
CheckValue<IkReal> x13572 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13570))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13571.value)))+(x13572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13573=IKcos(j4);
IkReal x13574=IKsin(j4);
IkReal x13575=(gconst29*r10);
IkReal x13576=(gconst29*r20);
IkReal x13577=(gconst28*r21);
IkReal x13578=((1.0)*cj2);
IkReal x13579=(gconst29*r00);
IkReal x13580=((1.0)*x13573);
IkReal x13581=((1.0)*x13574);
IkReal x13582=(gconst28*x13573);
IkReal x13583=(gconst28*x13574);
evalcond[0]=(((r12*x13574))+(((-1.0)*x13575*x13580))+((r11*x13582)));
evalcond[1]=((((-1.0)*x13576*x13581))+(((-1.0)*r22*x13580))+((x13574*x13577)));
evalcond[2]=((((-1.0)*x13579*x13581))+(((-1.0)*r02*x13580))+((r01*x13583)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13580))+(((-1.0)*x13575*x13581))+((r11*x13583)));
evalcond[4]=((((-1.0)*x13576*x13580))+((sj1*sj2))+(((-1.0)*cj1*x13578))+((x13573*x13577))+((r22*x13574)));
evalcond[5]=((((-1.0)*x13579*x13580))+(((-1.0)*sj1*x13578))+(((-1.0)*cj1*sj2))+((r01*x13582))+((r02*x13574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13584=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13584.valid){
continue;
}
CheckValue<IkReal> x13585 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13584.value)))+(x13585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13586=IKcos(j4);
IkReal x13587=IKsin(j4);
IkReal x13588=(gconst29*r10);
IkReal x13589=(gconst29*r20);
IkReal x13590=(gconst28*r21);
IkReal x13591=((1.0)*cj2);
IkReal x13592=(gconst29*r00);
IkReal x13593=((1.0)*x13586);
IkReal x13594=((1.0)*x13587);
IkReal x13595=(gconst28*x13586);
IkReal x13596=(gconst28*x13587);
evalcond[0]=(((r11*x13595))+((r12*x13587))+(((-1.0)*x13588*x13593)));
evalcond[1]=((((-1.0)*x13589*x13594))+((x13587*x13590))+(((-1.0)*r22*x13593)));
evalcond[2]=((((-1.0)*x13592*x13594))+((r01*x13596))+(((-1.0)*r02*x13593)));
evalcond[3]=((1.0)+((r11*x13596))+(((-1.0)*r12*x13593))+(((-1.0)*x13588*x13594)));
evalcond[4]=((((-1.0)*x13589*x13593))+((sj1*sj2))+((x13586*x13590))+(((-1.0)*cj1*x13591))+((r22*x13587)));
evalcond[5]=((((-1.0)*x13592*x13593))+((r01*x13595))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13591))+((r02*x13587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13599 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13599.valid){
continue;
}
IkReal x13597=((1.0)*(x13599.value));
IkReal x13598=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13597)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13597)));
IkReal gconst28=((1.0)*r21*x13598);
IkReal gconst29=((-1.0)*r20*x13598);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13602 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13602.valid){
continue;
}
IkReal x13600=((1.0)*(x13602.value));
IkReal x13601=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13600)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13600)));
IkReal gconst28=((1.0)*r21*x13601);
IkReal gconst29=((-1.0)*r20*x13601);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13605 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13605.valid){
continue;
}
IkReal x13603=((1.0)*(x13605.value));
IkReal x13604=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13603)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13603)));
IkReal gconst28=((1.0)*r21*x13604);
IkReal gconst29=((-1.0)*r20*x13604);
IkReal x13606=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13610=IKPowWithIntegerCheck(x13606,-1);
if(!x13610.valid){
continue;
}
IkReal x13607=x13610.value;
IkReal x13608=((1.0)*x13607);
IkReal x13609=((((-1.0)*x13608*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13608*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13607)));
j4eval[0]=x13609;
j4eval[1]=r12;
j4eval[2]=x13606;
j4eval[3]=IKsign(x13609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13611=(gconst28*r11);
IkReal x13612=(gconst29*r10);
CheckValue<IkReal> x13613=IKPowWithIntegerCheck(IKsign(((((2.0)*x13611*x13612))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13611*x13611)))+(((-1.0)*(x13612*x13612))))),-1);
if(!x13613.valid){
continue;
}
CheckValue<IkReal> x13614 = IKatan2WithCheck(IkReal((x13611+(((-1.0)*x13612)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13613.value)))+(x13614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13615=IKcos(j4);
IkReal x13616=IKsin(j4);
IkReal x13617=(gconst29*r10);
IkReal x13618=(gconst29*r20);
IkReal x13619=(gconst28*r21);
IkReal x13620=(gconst29*r00);
IkReal x13621=((1.0)*x13615);
IkReal x13622=((1.0)*x13616);
IkReal x13623=(gconst28*x13615);
IkReal x13624=(gconst28*x13616);
evalcond[0]=(((r11*x13623))+(((-1.0)*x13617*x13621))+((r12*x13616)));
evalcond[1]=((((-1.0)*r22*x13621))+(((-1.0)*x13618*x13622))+((x13616*x13619)));
evalcond[2]=((((-1.0)*x13620*x13622))+((r01*x13624))+(((-1.0)*r02*x13621)));
evalcond[3]=((1.0)+((r11*x13624))+(((-1.0)*x13617*x13622))+(((-1.0)*r12*x13621)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13615*x13619))+(((-1.0)*x13618*x13621))+((r22*x13616)));
evalcond[5]=((((-1.0)*x13620*x13621))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13623))+((r02*x13616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13625=((1.0)*gconst29);
CheckValue<IkReal> x13626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13625))+(((-1.0)*gconst28*r00)))),-1);
if(!x13626.valid){
continue;
}
CheckValue<IkReal> x13627 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13626.value)))+(x13627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13628=IKcos(j4);
IkReal x13629=IKsin(j4);
IkReal x13630=(gconst29*r10);
IkReal x13631=(gconst29*r20);
IkReal x13632=(gconst28*r21);
IkReal x13633=(gconst29*r00);
IkReal x13634=((1.0)*x13628);
IkReal x13635=((1.0)*x13629);
IkReal x13636=(gconst28*x13628);
IkReal x13637=(gconst28*x13629);
evalcond[0]=(((r11*x13636))+((r12*x13629))+(((-1.0)*x13630*x13634)));
evalcond[1]=((((-1.0)*x13631*x13635))+(((-1.0)*r22*x13634))+((x13629*x13632)));
evalcond[2]=((((-1.0)*r02*x13634))+(((-1.0)*x13633*x13635))+((r01*x13637)));
evalcond[3]=((1.0)+((r11*x13637))+(((-1.0)*x13630*x13635))+(((-1.0)*r12*x13634)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13631*x13634))+((r22*x13629))+((x13628*x13632)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13629))+(((-1.0)*x13633*x13634))+((r01*x13636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13638=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13638.valid){
continue;
}
CheckValue<IkReal> x13639 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13638.value)))+(x13639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13640=IKcos(j4);
IkReal x13641=IKsin(j4);
IkReal x13642=(gconst29*r10);
IkReal x13643=(gconst29*r20);
IkReal x13644=(gconst28*r21);
IkReal x13645=(gconst29*r00);
IkReal x13646=((1.0)*x13640);
IkReal x13647=((1.0)*x13641);
IkReal x13648=(gconst28*x13640);
IkReal x13649=(gconst28*x13641);
evalcond[0]=(((r11*x13648))+((r12*x13641))+(((-1.0)*x13642*x13646)));
evalcond[1]=((((-1.0)*x13643*x13647))+((x13641*x13644))+(((-1.0)*r22*x13646)));
evalcond[2]=(((r01*x13649))+(((-1.0)*r02*x13646))+(((-1.0)*x13645*x13647)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13646))+((r11*x13649))+(((-1.0)*x13642*x13647)));
evalcond[4]=(((cj2*sj1))+((r22*x13641))+((cj1*sj2))+(((-1.0)*x13643*x13646))+((x13640*x13644)));
evalcond[5]=(((r02*x13641))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13648))+(((-1.0)*x13645*x13646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13652 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13652.valid){
continue;
}
IkReal x13650=((1.0)*(x13652.value));
IkReal x13651=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13650)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13650)));
IkReal gconst28=((1.0)*r21*x13651);
IkReal gconst29=((-1.0)*r20*x13651);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13655 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13655.valid){
continue;
}
IkReal x13653=((1.0)*(x13655.value));
IkReal x13654=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13653)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13653)));
IkReal gconst28=((1.0)*r21*x13654);
IkReal gconst29=((-1.0)*r20*x13654);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13658 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13658.valid){
continue;
}
IkReal x13656=((1.0)*(x13658.value));
IkReal x13657=x13483;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13656)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13656)));
IkReal gconst28=((1.0)*r21*x13657);
IkReal gconst29=((-1.0)*r20*x13657);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13659=(gconst29*r10);
IkReal x13660=(gconst28*r11);
CheckValue<IkReal> x13661 = IKatan2WithCheck(IkReal((x13659+(((-1.0)*x13660)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13661.valid){
continue;
}
CheckValue<IkReal> x13662=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13660*x13660)+(x13659*x13659)+(((-2.0)*x13659*x13660)))),-1);
if(!x13662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13661.value)+(((1.5707963267949)*(x13662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13663=IKsin(j4);
IkReal x13664=IKcos(j4);
IkReal x13665=(gconst28*r11);
IkReal x13666=((1.0)*x13664);
IkReal x13667=(gconst29*x13664);
IkReal x13668=(gconst28*x13663);
IkReal x13669=((1.0)*x13663);
IkReal x13670=(gconst29*x13669);
evalcond[0]=((((-1.0)*r22*x13666))+(((-1.0)*r20*x13670))+((r21*x13668)));
evalcond[1]=(((r01*x13668))+(((-1.0)*r00*x13670))+(((-1.0)*r02*x13666)));
evalcond[2]=((((-1.0)*r12*x13669))+((r10*x13667))+(((-1.0)*x13665*x13666)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13666))+((x13663*x13665))+(((-1.0)*r10*x13670)));
evalcond[4]=((((-1.0)*r22*x13669))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13666))+((r20*x13667)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13667))+(((-1.0)*r02*x13669))+(((-1.0)*gconst28*r01*x13666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13671=((1.0)*gconst29);
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13671))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
CheckValue<IkReal> x13673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13671))+(((-1.0)*gconst28*r00)))),-1);
if(!x13673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13672.value)+(((1.5707963267949)*(x13673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13674=IKsin(j4);
IkReal x13675=IKcos(j4);
IkReal x13676=(gconst28*r11);
IkReal x13677=((1.0)*x13675);
IkReal x13678=(gconst29*x13675);
IkReal x13679=(gconst28*x13674);
IkReal x13680=((1.0)*x13674);
IkReal x13681=(gconst29*x13680);
evalcond[0]=((((-1.0)*r20*x13681))+((r21*x13679))+(((-1.0)*r22*x13677)));
evalcond[1]=((((-1.0)*r00*x13681))+((r01*x13679))+(((-1.0)*r02*x13677)));
evalcond[2]=((((-1.0)*r12*x13680))+(((-1.0)*x13676*x13677))+((r10*x13678)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13681))+(((-1.0)*r12*x13677))+((x13674*x13676)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13677))+(((-1.0)*r22*x13680))+((cj1*sj2))+((r20*x13678)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13678))+(((-1.0)*r02*x13680))+(((-1.0)*gconst28*r01*x13677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13682=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13682.valid){
continue;
}
CheckValue<IkReal> x13683 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13682.value)))+(x13683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13684=IKsin(j4);
IkReal x13685=IKcos(j4);
IkReal x13686=(gconst28*r11);
IkReal x13687=((1.0)*x13685);
IkReal x13688=(gconst29*x13685);
IkReal x13689=(gconst28*x13684);
IkReal x13690=((1.0)*x13684);
IkReal x13691=(gconst29*x13690);
evalcond[0]=((((-1.0)*r20*x13691))+(((-1.0)*r22*x13687))+((r21*x13689)));
evalcond[1]=(((r01*x13689))+(((-1.0)*r00*x13691))+(((-1.0)*r02*x13687)));
evalcond[2]=((((-1.0)*x13686*x13687))+((r10*x13688))+(((-1.0)*r12*x13690)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13687))+((x13684*x13686))+(((-1.0)*r10*x13691)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13687))+(((-1.0)*r22*x13690))+((r20*x13688)));
evalcond[5]=((((-1.0)*gconst28*r01*x13687))+(((-1.0)*r02*x13690))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13692=gconst28*gconst28;
IkReal x13693=gconst29*gconst29;
IkReal x13694=(r11*r21);
IkReal x13695=(gconst29*sj3);
IkReal x13696=((1.0)*cj3);
IkReal x13697=(r10*r20);
IkReal x13698=(r10*r21);
IkReal x13699=(r11*r20);
IkReal x13700=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13696))+(((-1.0)*x13693*x13696*x13697))+(((-1.0)*x13692*x13694*x13696))+((x13698*x13700))+((x13699*x13700)))),-1);
if(!x13701.valid){
continue;
}
CheckValue<IkReal> x13702 = IKatan2WithCheck(IkReal((((gconst28*r10*r22*sj3))+((r11*r22*x13695)))),IkReal((((sj3*x13692*x13698))+((gconst28*x13694*x13695))+(((-1.0)*sj3*x13693*x13699))+(((-1.0)*gconst28*x13695*x13697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13701.value)))+(x13702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13703=IKsin(j4);
IkReal x13704=IKcos(j4);
IkReal x13705=(sj1*sj2);
IkReal x13706=(gconst29*r20);
IkReal x13707=(gconst28*r20);
IkReal x13708=((1.0)*cj2);
IkReal x13709=(r11*sj3);
IkReal x13710=(cj1*sj2);
IkReal x13711=(gconst29*r01);
IkReal x13712=(gconst29*r10);
IkReal x13713=(cj3*gconst28);
IkReal x13714=(cj3*gconst29);
IkReal x13715=(gconst28*sj3);
IkReal x13716=(gconst29*r00);
IkReal x13717=(cj1*x13708);
IkReal x13718=((1.0)*x13704);
IkReal x13719=((1.0)*x13703);
IkReal x13720=(gconst28*x13703);
IkReal x13721=(cj3*x13703);
IkReal x13722=(sj3*x13704);
evalcond[0]=((((-1.0)*r22*x13718))+((r21*x13720))+(((-1.0)*x13706*x13719)));
evalcond[1]=(((r01*x13720))+(((-1.0)*r02*x13718))+(((-1.0)*x13716*x13719)));
evalcond[2]=((1.0)+((r11*x13720))+(((-1.0)*r12*x13718))+(((-1.0)*x13712*x13719)));
evalcond[3]=(((r12*x13721))+(((-1.0)*cj3*x13712*x13718))+((r11*x13704*x13713))+((gconst29*x13709))+((r10*x13715)));
evalcond[4]=((((-1.0)*gconst28*x13709*x13718))+((r10*x13713))+((r11*x13714))+(((-1.0)*r12*sj3*x13719))+((x13712*x13722)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13707))+((r21*x13704*x13713))+x13710+((r22*x13721))+(((-1.0)*cj3*x13706*x13718)));
evalcond[6]=(((r01*x13704*x13713))+((sj3*x13711))+x13705+(((-1.0)*r00*x13714*x13718))+((r00*x13715))+((r02*x13721))+(((-1.0)*x13717)));
evalcond[7]=(((r21*x13714))+(((-1.0)*r21*x13715*x13718))+x13705+((x13706*x13722))+((cj3*x13707))+(((-1.0)*r22*sj3*x13719))+(((-1.0)*x13717)));
evalcond[8]=(((x13716*x13722))+(((-1.0)*x13710))+(((-1.0)*sj1*x13708))+(((-1.0)*r01*x13715*x13718))+((cj3*x13711))+((r00*x13713))+(((-1.0)*r02*sj3*x13719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13723=((1.0)*gconst29);
CheckValue<IkReal> x13724=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13723))+(((-1.0)*gconst28*r00)))),-1);
if(!x13724.valid){
continue;
}
CheckValue<IkReal> x13725 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13723))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13724.value)))+(x13725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13726=IKsin(j4);
IkReal x13727=IKcos(j4);
IkReal x13728=(sj1*sj2);
IkReal x13729=(gconst29*r20);
IkReal x13730=(gconst28*r20);
IkReal x13731=((1.0)*cj2);
IkReal x13732=(r11*sj3);
IkReal x13733=(cj1*sj2);
IkReal x13734=(gconst29*r01);
IkReal x13735=(gconst29*r10);
IkReal x13736=(cj3*gconst28);
IkReal x13737=(cj3*gconst29);
IkReal x13738=(gconst28*sj3);
IkReal x13739=(gconst29*r00);
IkReal x13740=(cj1*x13731);
IkReal x13741=((1.0)*x13727);
IkReal x13742=((1.0)*x13726);
IkReal x13743=(gconst28*x13726);
IkReal x13744=(cj3*x13726);
IkReal x13745=(sj3*x13727);
evalcond[0]=((((-1.0)*r22*x13741))+((r21*x13743))+(((-1.0)*x13729*x13742)));
evalcond[1]=((((-1.0)*r02*x13741))+((r01*x13743))+(((-1.0)*x13739*x13742)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13741))+(((-1.0)*x13735*x13742))+((r11*x13743)));
evalcond[3]=(((r10*x13738))+(((-1.0)*cj3*x13735*x13741))+((r11*x13727*x13736))+((r12*x13744))+((gconst29*x13732)));
evalcond[4]=(((r10*x13736))+(((-1.0)*gconst28*x13732*x13741))+((r11*x13737))+(((-1.0)*r12*sj3*x13742))+((x13735*x13745)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13733+(((-1.0)*cj3*x13729*x13741))+((r21*x13727*x13736))+((r22*x13744))+((sj3*x13730)));
evalcond[6]=(((r00*x13738))+x13728+((r01*x13727*x13736))+((sj3*x13734))+(((-1.0)*r00*x13737*x13741))+(((-1.0)*x13740))+((r02*x13744)));
evalcond[7]=(((x13729*x13745))+x13728+(((-1.0)*r21*x13738*x13741))+((r21*x13737))+(((-1.0)*r22*sj3*x13742))+(((-1.0)*x13740))+((cj3*x13730)));
evalcond[8]=(((r00*x13736))+(((-1.0)*sj1*x13731))+(((-1.0)*r02*sj3*x13742))+((x13739*x13745))+(((-1.0)*r01*x13738*x13741))+(((-1.0)*x13733))+((cj3*x13734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13746=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13746.valid){
continue;
}
CheckValue<IkReal> x13747 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13746.value)))+(x13747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13748=IKsin(j4);
IkReal x13749=IKcos(j4);
IkReal x13750=(sj1*sj2);
IkReal x13751=(gconst29*r20);
IkReal x13752=(gconst28*r20);
IkReal x13753=((1.0)*cj2);
IkReal x13754=(r11*sj3);
IkReal x13755=(cj1*sj2);
IkReal x13756=(gconst29*r01);
IkReal x13757=(gconst29*r10);
IkReal x13758=(cj3*gconst28);
IkReal x13759=(cj3*gconst29);
IkReal x13760=(gconst28*sj3);
IkReal x13761=(gconst29*r00);
IkReal x13762=(cj1*x13753);
IkReal x13763=((1.0)*x13749);
IkReal x13764=((1.0)*x13748);
IkReal x13765=(gconst28*x13748);
IkReal x13766=(cj3*x13748);
IkReal x13767=(sj3*x13749);
evalcond[0]=((((-1.0)*r22*x13763))+(((-1.0)*x13751*x13764))+((r21*x13765)));
evalcond[1]=(((r01*x13765))+(((-1.0)*r02*x13763))+(((-1.0)*x13761*x13764)));
evalcond[2]=((1.0)+(((-1.0)*x13757*x13764))+((r11*x13765))+(((-1.0)*r12*x13763)));
evalcond[3]=((((-1.0)*cj3*x13757*x13763))+((r11*x13749*x13758))+((r10*x13760))+((gconst29*x13754))+((r12*x13766)));
evalcond[4]=(((r11*x13759))+((x13757*x13767))+((r10*x13758))+(((-1.0)*r12*sj3*x13764))+(((-1.0)*gconst28*x13754*x13763)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+(((-1.0)*cj3*x13751*x13763))+x13755+((sj3*x13752))+((r22*x13766))+((r21*x13749*x13758)));
evalcond[6]=(x13750+((r01*x13749*x13758))+((r00*x13760))+((sj3*x13756))+(((-1.0)*r00*x13759*x13763))+((r02*x13766))+(((-1.0)*x13762)));
evalcond[7]=(((r21*x13759))+x13750+(((-1.0)*r21*x13760*x13763))+(((-1.0)*r22*sj3*x13764))+((x13751*x13767))+((cj3*x13752))+(((-1.0)*x13762)));
evalcond[8]=((((-1.0)*r01*x13760*x13763))+(((-1.0)*sj1*x13753))+(((-1.0)*x13755))+((x13761*x13767))+(((-1.0)*r02*sj3*x13764))+((r00*x13758))+((cj3*x13756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13768=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13768);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13768);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13769=(r11*sj5);
IkReal x13770=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13770))+x13769);
j4eval[1]=((((-1.0)*cj3*x13770))+((cj3*x13769)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13771=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13771);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13771);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13772=(cj5*r10);
IkReal x13773=(r11*sj5);
j4eval[0]=((((-1.0)*x13772))+x13773);
j4eval[1]=(((sj3*x13772))+(((-1.0)*sj3*x13773)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13774=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13774);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13774);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13775=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13775);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13775);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13776=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13776)));
j4eval[1]=((((-1.0)*r00*x13776))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13777=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13777);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13777);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13778=((1.0)*sj1);
CheckValue<IkReal> x13779=IKPowWithIntegerCheck(r22,-1);
if(!x13779.valid){
continue;
}
CheckValue<IkReal> x13780=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13780.valid){
continue;
}
if( IKabs(((x13779.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13778)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13780.value)*(((((-1.0)*sj2*x13778))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13779.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13778))))))+IKsqr(((x13780.value)*(((((-1.0)*sj2*x13778))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13779.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13778))))), ((x13780.value)*(((((-1.0)*sj2*x13778))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13781=IKsin(j4);
IkReal x13782=IKcos(j4);
IkReal x13783=((1.0)*cj5);
IkReal x13784=(sj5*x13782);
IkReal x13785=(sj5*x13781);
evalcond[0]=((-1.0)*r22*x13782);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13781)));
evalcond[2]=(((r01*x13785))+(((-1.0)*r00*x13781*x13783)));
evalcond[3]=(((r11*x13784))+(((-1.0)*r10*x13782*x13783)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13781*x13783))+((r11*x13785)));
evalcond[5]=(((r01*x13784))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13782*x13783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13786=((1.0)*cj5);
CheckValue<IkReal> x13787=IKPowWithIntegerCheck(((((-1.0)*r10*x13786))+((r11*sj5))),-1);
if(!x13787.valid){
continue;
}
CheckValue<IkReal> x13788=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13786))),-1);
if(!x13788.valid){
continue;
}
if( IKabs(((-1.0)*(x13787.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13788.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13787.value)))+IKsqr(((x13788.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13787.value)), ((x13788.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13789=IKsin(j4);
IkReal x13790=IKcos(j4);
IkReal x13791=((1.0)*cj5);
IkReal x13792=(sj5*x13790);
IkReal x13793=(sj5*x13789);
evalcond[0]=((-1.0)*r22*x13790);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13789)));
evalcond[2]=((((-1.0)*r00*x13789*x13791))+((r01*x13793)));
evalcond[3]=((((-1.0)*r10*x13790*x13791))+((r11*x13792)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13789*x13791))+((r11*x13793)));
evalcond[5]=(((r01*x13792))+(((-1.0)*r00*x13790*x13791))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13794=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13794);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13794);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13795=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13795);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13795);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13796=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13796.valid){
continue;
}
CheckValue<IkReal> x13797=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13797.valid){
continue;
}
if( IKabs(((-1.0)*(x13796.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13797.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13796.value)))+IKsqr(((x13797.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13796.value)), ((x13797.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13798=IKsin(j4);
IkReal x13799=IKcos(j4);
IkReal x13800=(cj5*x13799);
IkReal x13801=(sj5*x13798);
IkReal x13802=((1.0)*cj5*x13798);
IkReal x13803=((1.0)*sj5*x13799);
evalcond[0]=((-1.0)*r22*x13799);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13798))+((cj1*sj2)));
evalcond[2]=(((r01*x13801))+(((-1.0)*r00*x13802)));
evalcond[3]=((((-1.0)*r11*x13803))+((r10*x13800)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13802))+((r11*x13801)));
evalcond[5]=(((r00*x13800))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13804=IKPowWithIntegerCheck(r22,-1);
if(!x13804.valid){
continue;
}
CheckValue<IkReal> x13805=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13805.valid){
continue;
}
if( IKabs(((x13804.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13805.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13804.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13805.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13804.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13805.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13806=IKsin(j4);
IkReal x13807=IKcos(j4);
IkReal x13808=(cj5*x13807);
IkReal x13809=(sj5*x13806);
IkReal x13810=((1.0)*cj5*x13806);
IkReal x13811=((1.0)*sj5*x13807);
evalcond[0]=((-1.0)*r22*x13807);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13806)));
evalcond[2]=(((r01*x13809))+(((-1.0)*r00*x13810)));
evalcond[3]=((((-1.0)*r11*x13811))+((r10*x13808)));
evalcond[4]=((1.0)+((r11*x13809))+(((-1.0)*r10*x13810)));
evalcond[5]=(((r00*x13808))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13812=((1.0)*r10);
CheckValue<IkReal> x13813=IKPowWithIntegerCheck(cj3,-1);
if(!x13813.valid){
continue;
}
CheckValue<IkReal> x13814=IKPowWithIntegerCheck(r22,-1);
if(!x13814.valid){
continue;
}
CheckValue<IkReal> x13815=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13812))+((cj3*r11*sj5))),-1);
if(!x13815.valid){
continue;
}
if( IKabs(((x13813.value)*(x13814.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13815.value)*(((((-1.0)*sj3*sj5*x13812))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13813.value)*(x13814.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13815.value)*(((((-1.0)*sj3*sj5*x13812))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13813.value)*(x13814.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13815.value)*(((((-1.0)*sj3*sj5*x13812))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13816=IKsin(j4);
IkReal x13817=IKcos(j4);
IkReal x13818=(sj1*sj2);
IkReal x13819=(r11*sj5);
IkReal x13820=(r00*sj3);
IkReal x13821=(cj5*r01);
IkReal x13822=((1.0)*cj1);
IkReal x13823=(cj3*sj5);
IkReal x13824=(cj5*r11);
IkReal x13825=(r10*sj3);
IkReal x13826=(cj2*sj1);
IkReal x13827=((1.0)*cj5);
IkReal x13828=((1.0)*sj3);
IkReal x13829=(r01*sj5);
IkReal x13830=(cj2*x13822);
IkReal x13831=(cj3*x13817);
IkReal x13832=(r22*x13816);
IkReal x13833=(cj5*x13817);
IkReal x13834=(x13816*x13827);
evalcond[0]=((-1.0)*r22*x13817);
evalcond[1]=(x13826+((cj1*sj2))+((cj3*x13832)));
evalcond[2]=(((x13816*x13829))+(((-1.0)*r00*x13834)));
evalcond[3]=((1.0)+((x13816*x13819))+(((-1.0)*r10*x13834)));
evalcond[4]=((((-1.0)*x13830))+x13818+(((-1.0)*x13828*x13832)));
evalcond[5]=(((x13819*x13831))+((sj3*x13824))+((sj5*x13825))+(((-1.0)*r10*x13827*x13831)));
evalcond[6]=(((r10*x13823))+((x13825*x13833))+(((-1.0)*x13817*x13819*x13828))+((cj3*x13824)));
evalcond[7]=((((-1.0)*x13830))+((r01*x13817*x13823))+x13818+(((-1.0)*r00*x13827*x13831))+((sj3*x13821))+((sj5*x13820)));
evalcond[8]=((((-1.0)*x13817*x13828*x13829))+((r00*x13823))+(((-1.0)*sj2*x13822))+(((-1.0)*x13826))+((x13820*x13833))+((cj3*x13821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13835=(cj5*r10);
IkReal x13836=((1.0)*r11);
CheckValue<IkReal> x13837=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13835))),-1);
if(!x13837.valid){
continue;
}
CheckValue<IkReal> x13838=IKPowWithIntegerCheck((((sj3*x13835))+(((-1.0)*sj3*sj5*x13836))),-1);
if(!x13838.valid){
continue;
}
if( IKabs(((-1.0)*(x13837.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13838.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13836)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13837.value)))+IKsqr(((x13838.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13836))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13837.value)), ((x13838.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13836))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13839=IKsin(j4);
IkReal x13840=IKcos(j4);
IkReal x13841=(sj1*sj2);
IkReal x13842=(r11*sj5);
IkReal x13843=(r00*sj3);
IkReal x13844=(cj5*r01);
IkReal x13845=((1.0)*cj1);
IkReal x13846=(cj3*sj5);
IkReal x13847=(cj5*r11);
IkReal x13848=(r10*sj3);
IkReal x13849=(cj2*sj1);
IkReal x13850=((1.0)*cj5);
IkReal x13851=((1.0)*sj3);
IkReal x13852=(r01*sj5);
IkReal x13853=(cj2*x13845);
IkReal x13854=(cj3*x13840);
IkReal x13855=(r22*x13839);
IkReal x13856=(cj5*x13840);
IkReal x13857=(x13839*x13850);
evalcond[0]=((-1.0)*r22*x13840);
evalcond[1]=(x13849+((cj1*sj2))+((cj3*x13855)));
evalcond[2]=(((x13839*x13852))+(((-1.0)*r00*x13857)));
evalcond[3]=((1.0)+((x13839*x13842))+(((-1.0)*r10*x13857)));
evalcond[4]=(x13841+(((-1.0)*x13851*x13855))+(((-1.0)*x13853)));
evalcond[5]=(((sj5*x13848))+((sj3*x13847))+((x13842*x13854))+(((-1.0)*r10*x13850*x13854)));
evalcond[6]=(((x13848*x13856))+(((-1.0)*x13840*x13842*x13851))+((r10*x13846))+((cj3*x13847)));
evalcond[7]=(x13841+((sj5*x13843))+((sj3*x13844))+((r01*x13840*x13846))+(((-1.0)*r00*x13850*x13854))+(((-1.0)*x13853)));
evalcond[8]=((((-1.0)*x13840*x13851*x13852))+(((-1.0)*sj2*x13845))+((x13843*x13856))+(((-1.0)*x13849))+((cj3*x13844))+((r00*x13846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13858=((1.0)*sj3);
IkReal x13859=(r11*sj5);
IkReal x13860=((1.0)*cj5*r10);
CheckValue<IkReal> x13861=IKPowWithIntegerCheck((x13859+(((-1.0)*x13860))),-1);
if(!x13861.valid){
continue;
}
CheckValue<IkReal> x13862=IKPowWithIntegerCheck(((((-1.0)*cj3*x13860))+((cj3*x13859))),-1);
if(!x13862.valid){
continue;
}
if( IKabs(((-1.0)*(x13861.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13862.value)*(((((-1.0)*r10*sj5*x13858))+(((-1.0)*cj5*r11*x13858)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13861.value)))+IKsqr(((x13862.value)*(((((-1.0)*r10*sj5*x13858))+(((-1.0)*cj5*r11*x13858))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13861.value)), ((x13862.value)*(((((-1.0)*r10*sj5*x13858))+(((-1.0)*cj5*r11*x13858))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13863=IKsin(j4);
IkReal x13864=IKcos(j4);
IkReal x13865=(sj1*sj2);
IkReal x13866=(r11*sj5);
IkReal x13867=(r00*sj3);
IkReal x13868=(cj5*r01);
IkReal x13869=((1.0)*cj1);
IkReal x13870=(cj3*sj5);
IkReal x13871=(cj5*r11);
IkReal x13872=(r10*sj3);
IkReal x13873=(cj2*sj1);
IkReal x13874=((1.0)*cj5);
IkReal x13875=((1.0)*sj3);
IkReal x13876=(r01*sj5);
IkReal x13877=(cj2*x13869);
IkReal x13878=(cj3*x13864);
IkReal x13879=(r22*x13863);
IkReal x13880=(cj5*x13864);
IkReal x13881=(x13863*x13874);
evalcond[0]=((-1.0)*r22*x13864);
evalcond[1]=(((cj3*x13879))+x13873+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13881))+((x13863*x13876)));
evalcond[3]=((1.0)+((x13863*x13866))+(((-1.0)*r10*x13881)));
evalcond[4]=(x13865+(((-1.0)*x13877))+(((-1.0)*x13875*x13879)));
evalcond[5]=(((sj3*x13871))+((sj5*x13872))+((x13866*x13878))+(((-1.0)*r10*x13874*x13878)));
evalcond[6]=((((-1.0)*x13864*x13866*x13875))+((cj3*x13871))+((x13872*x13880))+((r10*x13870)));
evalcond[7]=((((-1.0)*r00*x13874*x13878))+((r01*x13864*x13870))+x13865+(((-1.0)*x13877))+((sj3*x13868))+((sj5*x13867)));
evalcond[8]=((((-1.0)*x13873))+((x13867*x13880))+(((-1.0)*sj2*x13869))+(((-1.0)*x13864*x13875*x13876))+((r00*x13870))+((cj3*x13868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13882=cj5*cj5;
IkReal x13883=((1.0)*cj3);
IkReal x13884=(r10*r21);
IkReal x13885=(cj5*sj5);
IkReal x13886=(r11*r21);
IkReal x13887=(r11*r20);
IkReal x13888=(r22*sj3);
IkReal x13889=(r10*r20);
IkReal x13890=((1.0)*sj3*x13882);
CheckValue<IkReal> x13891 = IKatan2WithCheck(IkReal((((r10*sj5*x13888))+((cj5*r11*x13888)))),IkReal((((sj3*x13884))+(((-1.0)*sj3*x13885*x13889))+((sj3*x13885*x13886))+(((-1.0)*x13884*x13890))+(((-1.0)*x13887*x13890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13891.valid){
continue;
}
CheckValue<IkReal> x13892=IKPowWithIntegerCheck(IKsign((((cj3*x13885*x13887))+((cj3*x13884*x13885))+((cj3*x13882*x13886))+(((-1.0)*x13883*x13886))+(((-1.0)*r12*r22*x13883))+(((-1.0)*x13882*x13883*x13889)))),-1);
if(!x13892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13891.value)+(((1.5707963267949)*(x13892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13893=IKsin(j4);
IkReal x13894=IKcos(j4);
IkReal x13895=(sj1*sj2);
IkReal x13896=(cj5*sj3);
IkReal x13897=(cj5*r10);
IkReal x13898=(r00*sj5);
IkReal x13899=(r11*sj5);
IkReal x13900=(cj3*cj5);
IkReal x13901=((1.0)*cj1);
IkReal x13902=(cj3*sj5);
IkReal x13903=(r21*sj5);
IkReal x13904=(cj2*sj1);
IkReal x13905=(sj3*sj5);
IkReal x13906=(r01*sj5);
IkReal x13907=(cj2*x13901);
IkReal x13908=((1.0)*x13894);
IkReal x13909=((1.0)*x13893);
IkReal x13910=(cj3*x13893);
IkReal x13911=(cj3*x13894);
evalcond[0]=((((-1.0)*cj5*r20*x13909))+(((-1.0)*r22*x13908))+((x13893*x13903)));
evalcond[1]=((((-1.0)*cj5*r00*x13909))+((x13893*x13906))+(((-1.0)*r02*x13908)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13908))+(((-1.0)*x13897*x13909))+((x13893*x13899)));
evalcond[3]=(((r10*x13905))+((x13899*x13911))+(((-1.0)*cj3*x13897*x13908))+((r12*x13910))+((r11*x13896)));
evalcond[4]=(((r10*x13902))+(((-1.0)*r12*sj3*x13909))+(((-1.0)*sj3*x13899*x13908))+((r11*x13900))+((r10*x13894*x13896)));
evalcond[5]=(((r22*x13910))+((r21*x13894*x13902))+((cj1*sj2))+x13904+((r20*x13905))+((r21*x13896))+(((-1.0)*r20*x13900*x13908)));
evalcond[6]=(((r01*x13894*x13902))+x13895+((sj3*x13898))+((r02*x13910))+(((-1.0)*r00*x13900*x13908))+((r01*x13896))+(((-1.0)*x13907)));
evalcond[7]=((((-1.0)*r22*sj3*x13909))+x13895+(((-1.0)*sj3*x13903*x13908))+((r20*x13902))+((r21*x13900))+(((-1.0)*x13907))+((r20*x13894*x13896)));
evalcond[8]=(((cj3*x13898))+(((-1.0)*x13904))+(((-1.0)*r02*sj3*x13909))+(((-1.0)*sj2*x13901))+(((-1.0)*r01*x13905*x13908))+((r01*x13900))+((r00*x13894*x13896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13912=((1.0)*cj5);
CheckValue<IkReal> x13913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13912)))),-1);
if(!x13913.valid){
continue;
}
CheckValue<IkReal> x13914 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13913.value)))+(x13914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13915=IKsin(j4);
IkReal x13916=IKcos(j4);
IkReal x13917=(sj1*sj2);
IkReal x13918=(cj5*sj3);
IkReal x13919=(cj5*r10);
IkReal x13920=(r00*sj5);
IkReal x13921=(r11*sj5);
IkReal x13922=(cj3*cj5);
IkReal x13923=((1.0)*cj1);
IkReal x13924=(cj3*sj5);
IkReal x13925=(r21*sj5);
IkReal x13926=(cj2*sj1);
IkReal x13927=(sj3*sj5);
IkReal x13928=(r01*sj5);
IkReal x13929=(cj2*x13923);
IkReal x13930=((1.0)*x13916);
IkReal x13931=((1.0)*x13915);
IkReal x13932=(cj3*x13915);
IkReal x13933=(cj3*x13916);
evalcond[0]=(((x13915*x13925))+(((-1.0)*cj5*r20*x13931))+(((-1.0)*r22*x13930)));
evalcond[1]=((((-1.0)*cj5*r00*x13931))+((x13915*x13928))+(((-1.0)*r02*x13930)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13930))+(((-1.0)*x13919*x13931))+((x13915*x13921)));
evalcond[3]=(((r10*x13927))+((r11*x13918))+((x13921*x13933))+(((-1.0)*cj3*x13919*x13930))+((r12*x13932)));
evalcond[4]=((((-1.0)*r12*sj3*x13931))+((r10*x13924))+(((-1.0)*sj3*x13921*x13930))+((r10*x13916*x13918))+((r11*x13922)));
evalcond[5]=(((r20*x13927))+((cj1*sj2))+x13926+((r22*x13932))+((r21*x13916*x13924))+((r21*x13918))+(((-1.0)*r20*x13922*x13930)));
evalcond[6]=(((sj3*x13920))+(((-1.0)*r00*x13922*x13930))+x13917+(((-1.0)*x13929))+((r01*x13916*x13924))+((r01*x13918))+((r02*x13932)));
evalcond[7]=(((r21*x13922))+((r20*x13924))+((r20*x13916*x13918))+(((-1.0)*r22*sj3*x13931))+x13917+(((-1.0)*x13929))+(((-1.0)*sj3*x13925*x13930)));
evalcond[8]=((((-1.0)*sj2*x13923))+(((-1.0)*r02*sj3*x13931))+(((-1.0)*r01*x13927*x13930))+(((-1.0)*x13926))+((r01*x13922))+((r00*x13916*x13918))+((cj3*x13920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13934=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13934.valid){
continue;
}
CheckValue<IkReal> x13935 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13934.value)))+(x13935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13936=IKsin(j4);
IkReal x13937=IKcos(j4);
IkReal x13938=(sj1*sj2);
IkReal x13939=(cj5*sj3);
IkReal x13940=(cj5*r10);
IkReal x13941=(r00*sj5);
IkReal x13942=(r11*sj5);
IkReal x13943=(cj3*cj5);
IkReal x13944=((1.0)*cj1);
IkReal x13945=(cj3*sj5);
IkReal x13946=(r21*sj5);
IkReal x13947=(cj2*sj1);
IkReal x13948=(sj3*sj5);
IkReal x13949=(r01*sj5);
IkReal x13950=(cj2*x13944);
IkReal x13951=((1.0)*x13937);
IkReal x13952=((1.0)*x13936);
IkReal x13953=(cj3*x13936);
IkReal x13954=(cj3*x13937);
evalcond[0]=(((x13936*x13946))+(((-1.0)*cj5*r20*x13952))+(((-1.0)*r22*x13951)));
evalcond[1]=(((x13936*x13949))+(((-1.0)*r02*x13951))+(((-1.0)*cj5*r00*x13952)));
evalcond[2]=((1.0)+((x13936*x13942))+(((-1.0)*x13940*x13952))+(((-1.0)*r12*x13951)));
evalcond[3]=(((r11*x13939))+((r12*x13953))+(((-1.0)*cj3*x13940*x13951))+((x13942*x13954))+((r10*x13948)));
evalcond[4]=((((-1.0)*r12*sj3*x13952))+((r10*x13937*x13939))+(((-1.0)*sj3*x13942*x13951))+((r10*x13945))+((r11*x13943)));
evalcond[5]=(((r21*x13937*x13945))+((r21*x13939))+((cj1*sj2))+x13947+((r22*x13953))+(((-1.0)*r20*x13943*x13951))+((r20*x13948)));
evalcond[6]=(((r01*x13939))+(((-1.0)*x13950))+x13938+((sj3*x13941))+((r02*x13953))+((r01*x13937*x13945))+(((-1.0)*r00*x13943*x13951)));
evalcond[7]=((((-1.0)*x13950))+x13938+((r20*x13945))+(((-1.0)*r22*sj3*x13952))+(((-1.0)*sj3*x13946*x13951))+((r20*x13937*x13939))+((r21*x13943)));
evalcond[8]=(((cj3*x13941))+(((-1.0)*x13947))+(((-1.0)*r02*sj3*x13952))+(((-1.0)*sj2*x13944))+((r01*x13943))+(((-1.0)*r01*x13948*x13951))+((r00*x13937*x13939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13955=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13955;
j4eval[1]=IKsign(x13955);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13956=((1.0)*cj5);
IkReal x13957=((((-1.0)*r21*x13956))+(((-1.0)*r20*sj5)));
j4eval[0]=x13957;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13956))+((r01*sj5))))));
j4eval[2]=IKsign(x13957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13958=cj5*cj5;
IkReal x13959=(cj3*r21);
IkReal x13960=(cj5*sj5);
IkReal x13961=((1.0)*cj3);
IkReal x13962=((((-1.0)*r12*r22*x13961))+(((-1.0)*r10*r20*x13958*x13961))+(((-1.0)*r11*x13959))+((r10*x13959*x13960))+((r11*x13958*x13959))+((cj3*r11*r20*x13960)));
j4eval[0]=x13962;
j4eval[1]=IKsign(x13962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13963=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13963;
j4eval[1]=IKsign(x13963);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13964=((1.0)*cj5);
IkReal x13965=((((-1.0)*r21*x13964))+(((-1.0)*r20*sj5)));
j4eval[0]=x13965;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x13964)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13966=cj5*cj5;
IkReal x13967=r11*r11;
IkReal x13968=(cj5*r10);
IkReal x13969=(r11*sj5);
IkReal x13970=((((2.0)*x13968*x13969))+(((-1.0)*x13967))+(((-1.0)*(r12*r12)))+((x13966*x13967))+(((-1.0)*x13966*(r10*r10))));
j4eval[0]=x13970;
j4eval[1]=((IKabs(r12))+(IKabs((x13968+(((-1.0)*x13969))))));
j4eval[2]=IKsign(x13970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13971=cj5*cj5;
IkReal x13972=r11*r11;
IkReal x13973=(cj5*r10);
IkReal x13974=(r11*sj5);
CheckValue<IkReal> x13975 = IKatan2WithCheck(IkReal((x13973+(((-1.0)*x13974)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13975.valid){
continue;
}
CheckValue<IkReal> x13976=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13972))+((x13971*x13972))+(((-1.0)*(r12*r12)))+(((-1.0)*x13971*(r10*r10)))+(((2.0)*x13973*x13974)))),-1);
if(!x13976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13975.value)+(((1.5707963267949)*(x13976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13977=IKsin(j4);
IkReal x13978=IKcos(j4);
IkReal x13979=(cj5*r10);
IkReal x13980=(r01*sj5);
IkReal x13981=(cj5*r00);
IkReal x13982=(cj5*r20);
IkReal x13983=((1.0)*x13978);
IkReal x13984=((1.0)*x13977);
IkReal x13985=(sj5*x13977);
evalcond[0]=((((-1.0)*x13982*x13984))+((r21*x13985))+(((-1.0)*r22*x13983)));
evalcond[1]=(((x13977*x13980))+(((-1.0)*r02*x13983))+(((-1.0)*x13981*x13984)));
evalcond[2]=(((x13978*x13979))+(((-1.0)*r11*sj5*x13983))+(((-1.0)*r12*x13984)));
evalcond[3]=((-1.0)+(((-1.0)*x13979*x13984))+((r11*x13985))+(((-1.0)*r12*x13983)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13984))+(((-1.0)*x13980*x13983))+((x13978*x13981)));
evalcond[5]=((((-1.0)*r21*sj5*x13983))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13984))+((x13978*x13982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13986=((1.0)*cj5);
CheckValue<IkReal> x13987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13986))+(((-1.0)*r20*sj5)))),-1);
if(!x13987.valid){
continue;
}
CheckValue<IkReal> x13988 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13987.value)))+(x13988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13989=IKsin(j4);
IkReal x13990=IKcos(j4);
IkReal x13991=(cj5*r10);
IkReal x13992=(r01*sj5);
IkReal x13993=(cj5*r00);
IkReal x13994=(cj5*r20);
IkReal x13995=((1.0)*x13990);
IkReal x13996=((1.0)*x13989);
IkReal x13997=(sj5*x13989);
evalcond[0]=(((r21*x13997))+(((-1.0)*x13994*x13996))+(((-1.0)*r22*x13995)));
evalcond[1]=((((-1.0)*x13993*x13996))+(((-1.0)*r02*x13995))+((x13989*x13992)));
evalcond[2]=((((-1.0)*r11*sj5*x13995))+(((-1.0)*r12*x13996))+((x13990*x13991)));
evalcond[3]=((-1.0)+((r11*x13997))+(((-1.0)*r12*x13995))+(((-1.0)*x13991*x13996)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13992*x13995))+(((-1.0)*r02*x13996))+((cj1*sj2))+((x13990*x13993)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13996))+(((-1.0)*r21*sj5*x13995))+((x13990*x13994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13998 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13998.valid){
continue;
}
CheckValue<IkReal> x13999=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13998.value)+(((1.5707963267949)*(x13999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14000=IKsin(j4);
IkReal x14001=IKcos(j4);
IkReal x14002=(cj5*r10);
IkReal x14003=(r01*sj5);
IkReal x14004=(cj5*r00);
IkReal x14005=(cj5*r20);
IkReal x14006=((1.0)*x14001);
IkReal x14007=((1.0)*x14000);
IkReal x14008=(sj5*x14000);
evalcond[0]=(((r21*x14008))+(((-1.0)*x14005*x14007))+(((-1.0)*r22*x14006)));
evalcond[1]=((((-1.0)*r02*x14006))+((x14000*x14003))+(((-1.0)*x14004*x14007)));
evalcond[2]=((((-1.0)*r11*sj5*x14006))+(((-1.0)*r12*x14007))+((x14001*x14002)));
evalcond[3]=((-1.0)+((r11*x14008))+(((-1.0)*x14002*x14007))+(((-1.0)*r12*x14006)));
evalcond[4]=((((-1.0)*r02*x14007))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14003*x14006))+((x14001*x14004)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14006))+((x14001*x14005))+(((-1.0)*r22*x14007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14009=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14009;
j4eval[1]=IKsign(x14009);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14010=((1.0)*cj5);
IkReal x14011=((((-1.0)*r21*x14010))+(((-1.0)*r20*sj5)));
j4eval[0]=x14011;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14010))))));
j4eval[2]=IKsign(x14011);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14012=cj5*cj5;
IkReal x14013=r11*r11;
IkReal x14014=(r11*sj5);
IkReal x14015=(cj5*r10);
IkReal x14016=((r12*r12)+((x14012*(r10*r10)))+x14013+(((-2.0)*x14014*x14015))+(((-1.0)*x14012*x14013)));
j4eval[0]=x14016;
j4eval[1]=IKsign(x14016);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14015))+x14014))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14017=cj5*cj5;
IkReal x14018=r11*r11;
IkReal x14019=(cj5*r10);
IkReal x14020=(r11*sj5);
CheckValue<IkReal> x14021=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x14017*x14018))+(((-2.0)*x14019*x14020))+((x14017*(r10*r10)))+x14018)),-1);
if(!x14021.valid){
continue;
}
CheckValue<IkReal> x14022 = IKatan2WithCheck(IkReal(((((-1.0)*x14019))+x14020)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14021.value)))+(x14022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14023=IKcos(j4);
IkReal x14024=IKsin(j4);
IkReal x14025=(cj5*r00);
IkReal x14026=(cj5*r10);
IkReal x14027=(r21*sj5);
IkReal x14028=(cj5*r20);
IkReal x14029=((1.0)*x14023);
IkReal x14030=((1.0)*x14024);
IkReal x14031=(sj5*x14024);
IkReal x14032=(sj5*x14023);
evalcond[0]=(((r11*x14032))+(((-1.0)*x14026*x14029))+((r12*x14024)));
evalcond[1]=(((x14024*x14027))+(((-1.0)*x14028*x14030))+(((-1.0)*r22*x14029)));
evalcond[2]=(((r01*x14031))+(((-1.0)*r02*x14029))+(((-1.0)*x14025*x14030)));
evalcond[3]=((-1.0)+((r11*x14031))+(((-1.0)*r12*x14029))+(((-1.0)*x14026*x14030)));
evalcond[4]=(((r01*x14032))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14025*x14029))+((r02*x14024)));
evalcond[5]=(((r22*x14024))+((x14023*x14027))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14028*x14029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14033=((1.0)*cj5);
CheckValue<IkReal> x14034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14033))+(((-1.0)*r20*sj5)))),-1);
if(!x14034.valid){
continue;
}
CheckValue<IkReal> x14035 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14034.value)))+(x14035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14036=IKcos(j4);
IkReal x14037=IKsin(j4);
IkReal x14038=(cj5*r00);
IkReal x14039=(cj5*r10);
IkReal x14040=(r21*sj5);
IkReal x14041=(cj5*r20);
IkReal x14042=((1.0)*x14036);
IkReal x14043=((1.0)*x14037);
IkReal x14044=(sj5*x14037);
IkReal x14045=(sj5*x14036);
evalcond[0]=(((r11*x14045))+(((-1.0)*x14039*x14042))+((r12*x14037)));
evalcond[1]=(((x14037*x14040))+(((-1.0)*x14041*x14043))+(((-1.0)*r22*x14042)));
evalcond[2]=(((r01*x14044))+(((-1.0)*x14038*x14043))+(((-1.0)*r02*x14042)));
evalcond[3]=((-1.0)+((r11*x14044))+(((-1.0)*r12*x14042))+(((-1.0)*x14039*x14043)));
evalcond[4]=(((cj2*sj1))+((r01*x14045))+(((-1.0)*x14038*x14042))+((cj1*sj2))+((r02*x14037)));
evalcond[5]=(((r22*x14037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14036*x14040))+(((-1.0)*x14041*x14042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14046 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14046.valid){
continue;
}
CheckValue<IkReal> x14047=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14046.value)+(((1.5707963267949)*(x14047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14048=IKcos(j4);
IkReal x14049=IKsin(j4);
IkReal x14050=(cj5*r00);
IkReal x14051=(cj5*r10);
IkReal x14052=(r21*sj5);
IkReal x14053=(cj5*r20);
IkReal x14054=((1.0)*x14048);
IkReal x14055=((1.0)*x14049);
IkReal x14056=(sj5*x14049);
IkReal x14057=(sj5*x14048);
evalcond[0]=(((r11*x14057))+(((-1.0)*x14051*x14054))+((r12*x14049)));
evalcond[1]=((((-1.0)*x14053*x14055))+(((-1.0)*r22*x14054))+((x14049*x14052)));
evalcond[2]=((((-1.0)*x14050*x14055))+(((-1.0)*r02*x14054))+((r01*x14056)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14054))+((r11*x14056))+(((-1.0)*x14051*x14055)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14050*x14054))+((cj1*sj2))+((r02*x14049))+((r01*x14057)));
evalcond[5]=(((r22*x14049))+(((-1.0)*x14053*x14054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14048*x14052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14059 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14059)==0){
continue;
}
IkReal x14058=pow(x14059,-0.5);
CheckValue<IkReal> x14060 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14060.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14060.value));
IkReal gconst37=((-1.0)*r01*x14058);
IkReal gconst38=(r00*x14058);
CheckValue<IkReal> x14061 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14061.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14061.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14064 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14064.valid){
continue;
}
IkReal x14062=((-1.0)*(x14064.value));
IkReal x14063=x14058;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14062;
IkReal gconst36=x14062;
IkReal gconst37=((-1.0)*r01*x14063);
IkReal gconst38=(r00*x14063);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14067 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14067.valid){
continue;
}
IkReal x14065=((-1.0)*(x14067.value));
IkReal x14066=x14058;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14065;
IkReal gconst36=x14065;
IkReal gconst37=((-1.0)*r01*x14066);
IkReal gconst38=(r00*x14066);
CheckValue<IkReal> x14075=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14075.valid){
continue;
}
IkReal x14068=x14075.value;
IkReal x14069=(sj3*x14068);
IkReal x14070=(r11*x14069);
IkReal x14071=(r21*x14069);
IkReal x14072=(r20*x14069);
IkReal x14073=(r10*x14069);
IkReal x14074=(r00*r01*x14069);
j4eval[0]=IKsign((((r10*x14072*(r00*r00)))+((r21*x14070*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r20*x14070))+((r00*r01*r10*x14071))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14076=gconst38*gconst38;
IkReal x14077=gconst37*gconst37;
IkReal x14078=((1.0)*cj3);
IkReal x14079=(r11*r20);
IkReal x14080=(r10*sj3);
IkReal x14081=(gconst37*gconst38);
IkReal x14082=(r11*sj3);
IkReal x14083=(r21*x14077);
IkReal x14084=(cj3*x14081);
CheckValue<IkReal> x14085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14078*x14083))+((r10*r21*x14084))+((x14079*x14084))+(((-1.0)*r10*r20*x14076*x14078))+(((-1.0)*r12*r22*x14078)))),-1);
if(!x14085.valid){
continue;
}
CheckValue<IkReal> x14086 = IKatan2WithCheck(IkReal((((gconst38*r22*x14082))+((gconst37*r22*x14080)))),IkReal((((r21*x14081*x14082))+(((-1.0)*r20*x14080*x14081))+((x14080*x14083))+(((-1.0)*sj3*x14076*x14079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14085.value)))+(x14086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14087=IKsin(j4);
IkReal x14088=IKcos(j4);
IkReal x14089=(cj2*sj1);
IkReal x14090=(cj1*sj2);
IkReal x14091=(gconst38*r21);
IkReal x14092=(cj3*r20);
IkReal x14093=(gconst38*r10);
IkReal x14094=(cj3*gconst37);
IkReal x14095=(sj1*sj2);
IkReal x14096=(gconst38*r00);
IkReal x14097=(cj1*cj2);
IkReal x14098=(gconst37*sj3);
IkReal x14099=(gconst38*r20);
IkReal x14100=(gconst38*r01);
IkReal x14101=(gconst38*r11);
IkReal x14102=((1.0)*x14088);
IkReal x14103=((1.0)*x14087);
IkReal x14104=(cj3*x14087);
IkReal x14105=(sj3*x14088);
IkReal x14106=(gconst37*x14087);
IkReal x14107=(x14090+x14089);
evalcond[0]=((((-1.0)*x14099*x14103))+(((-1.0)*r22*x14102))+((r21*x14106)));
evalcond[1]=(((r01*x14106))+(((-1.0)*x14096*x14103))+(((-1.0)*r02*x14102)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14102))+(((-1.0)*x14093*x14103))+((r11*x14106)));
evalcond[3]=(((sj3*x14101))+((r11*x14088*x14094))+(((-1.0)*cj3*x14093*x14102))+((r10*x14098))+((r12*x14104)));
evalcond[4]=((((-1.0)*r11*x14098*x14102))+((cj3*x14101))+((x14093*x14105))+((r10*x14094))+(((-1.0)*r12*sj3*x14103)));
evalcond[5]=(((sj3*x14091))+((r20*x14098))+((r22*x14104))+((r21*x14088*x14094))+x14107+(((-1.0)*gconst38*x14092*x14102)));
evalcond[6]=(((r00*x14098))+((sj3*x14100))+((r02*x14104))+(((-1.0)*x14095))+((r01*x14088*x14094))+x14097+(((-1.0)*cj3*x14096*x14102)));
evalcond[7]=(((r00*x14094))+(((-1.0)*r02*sj3*x14103))+((cj3*x14100))+((x14096*x14105))+x14107+(((-1.0)*r01*x14098*x14102)));
evalcond[8]=((((-1.0)*r22*sj3*x14103))+((x14099*x14105))+(((-1.0)*x14097))+((gconst37*x14092))+((cj3*x14091))+(((-1.0)*r21*x14098*x14102))+x14095);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14108=gconst38*gconst38;
IkReal x14109=gconst37*gconst37;
IkReal x14110=(gconst37*r10);
IkReal x14111=(cj3*r22);
IkReal x14112=((1.0)*gconst38);
IkReal x14113=(r21*sj3);
IkReal x14114=(gconst38*r11);
IkReal x14115=(cj3*r20);
IkReal x14116=(cj3*r21);
IkReal x14117=(r20*sj3);
CheckValue<IkReal> x14118 = IKatan2WithCheck(IkReal((((x14111*x14114))+((x14110*x14111)))),IkReal((((r10*x14109*x14116))+((gconst37*x14114*x14116))+(((-1.0)*x14110*x14112*x14115))+(((-1.0)*r11*x14108*x14115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14118.valid){
continue;
}
CheckValue<IkReal> x14119=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r11*x14112*x14117))+(((-1.0)*x14110*x14112*x14113))+((r11*x14109*x14113))+((r12*r22*sj3))+((r10*x14108*x14117)))),-1);
if(!x14119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14118.value)+(((1.5707963267949)*(x14119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14120=IKsin(j4);
IkReal x14121=IKcos(j4);
IkReal x14122=(cj2*sj1);
IkReal x14123=(cj1*sj2);
IkReal x14124=(gconst38*r21);
IkReal x14125=(cj3*r20);
IkReal x14126=(gconst38*r10);
IkReal x14127=(cj3*gconst37);
IkReal x14128=(sj1*sj2);
IkReal x14129=(gconst38*r00);
IkReal x14130=(cj1*cj2);
IkReal x14131=(gconst37*sj3);
IkReal x14132=(gconst38*r20);
IkReal x14133=(gconst38*r01);
IkReal x14134=(gconst38*r11);
IkReal x14135=((1.0)*x14121);
IkReal x14136=((1.0)*x14120);
IkReal x14137=(cj3*x14120);
IkReal x14138=(sj3*x14121);
IkReal x14139=(gconst37*x14120);
IkReal x14140=(x14123+x14122);
evalcond[0]=(((r21*x14139))+(((-1.0)*x14132*x14136))+(((-1.0)*r22*x14135)));
evalcond[1]=((((-1.0)*r02*x14135))+(((-1.0)*x14129*x14136))+((r01*x14139)));
evalcond[2]=((-1.0)+((r11*x14139))+(((-1.0)*r12*x14135))+(((-1.0)*x14126*x14136)));
evalcond[3]=(((sj3*x14134))+((r10*x14131))+((r12*x14137))+((r11*x14121*x14127))+(((-1.0)*cj3*x14126*x14135)));
evalcond[4]=(((x14126*x14138))+(((-1.0)*r11*x14131*x14135))+(((-1.0)*r12*sj3*x14136))+((r10*x14127))+((cj3*x14134)));
evalcond[5]=(((r20*x14131))+(((-1.0)*gconst38*x14125*x14135))+((r22*x14137))+x14140+((r21*x14121*x14127))+((sj3*x14124)));
evalcond[6]=(((sj3*x14133))+((r02*x14137))+((r01*x14121*x14127))+(((-1.0)*x14128))+x14130+(((-1.0)*cj3*x14129*x14135))+((r00*x14131)));
evalcond[7]=((((-1.0)*r02*sj3*x14136))+((r00*x14127))+((x14129*x14138))+x14140+(((-1.0)*r01*x14131*x14135))+((cj3*x14133)));
evalcond[8]=((((-1.0)*x14130))+((cj3*x14124))+(((-1.0)*r22*sj3*x14136))+((x14132*x14138))+x14128+(((-1.0)*r21*x14131*x14135))+((gconst37*x14125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14141=((1.0)*gconst38);
CheckValue<IkReal> x14142=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14141)))),-1);
if(!x14142.valid){
continue;
}
CheckValue<IkReal> x14143 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14141))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14142.value)))+(x14143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14144=IKsin(j4);
IkReal x14145=IKcos(j4);
IkReal x14146=(cj2*sj1);
IkReal x14147=(cj1*sj2);
IkReal x14148=(gconst38*r21);
IkReal x14149=(cj3*r20);
IkReal x14150=(gconst38*r10);
IkReal x14151=(cj3*gconst37);
IkReal x14152=(sj1*sj2);
IkReal x14153=(gconst38*r00);
IkReal x14154=(cj1*cj2);
IkReal x14155=(gconst37*sj3);
IkReal x14156=(gconst38*r20);
IkReal x14157=(gconst38*r01);
IkReal x14158=(gconst38*r11);
IkReal x14159=((1.0)*x14145);
IkReal x14160=((1.0)*x14144);
IkReal x14161=(cj3*x14144);
IkReal x14162=(sj3*x14145);
IkReal x14163=(gconst37*x14144);
IkReal x14164=(x14147+x14146);
evalcond[0]=((((-1.0)*x14156*x14160))+(((-1.0)*r22*x14159))+((r21*x14163)));
evalcond[1]=((((-1.0)*r02*x14159))+(((-1.0)*x14153*x14160))+((r01*x14163)));
evalcond[2]=((-1.0)+(((-1.0)*x14150*x14160))+(((-1.0)*r12*x14159))+((r11*x14163)));
evalcond[3]=(((r10*x14155))+((sj3*x14158))+(((-1.0)*cj3*x14150*x14159))+((r12*x14161))+((r11*x14145*x14151)));
evalcond[4]=(((cj3*x14158))+((r10*x14151))+(((-1.0)*r11*x14155*x14159))+(((-1.0)*r12*sj3*x14160))+((x14150*x14162)));
evalcond[5]=(((sj3*x14148))+((r22*x14161))+((r21*x14145*x14151))+x14164+((r20*x14155))+(((-1.0)*gconst38*x14149*x14159)));
evalcond[6]=(((sj3*x14157))+((r02*x14161))+((r01*x14145*x14151))+(((-1.0)*cj3*x14153*x14159))+((r00*x14155))+x14154+(((-1.0)*x14152)));
evalcond[7]=(((cj3*x14157))+(((-1.0)*r02*sj3*x14160))+(((-1.0)*r01*x14155*x14159))+((r00*x14151))+x14164+((x14153*x14162)));
evalcond[8]=((((-1.0)*r21*x14155*x14159))+((cj3*x14148))+((gconst37*x14149))+(((-1.0)*r22*sj3*x14160))+x14152+((x14156*x14162))+(((-1.0)*x14154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14166 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14166)==0){
continue;
}
IkReal x14165=pow(x14166,-0.5);
CheckValue<IkReal> x14167 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14167.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14167.value))));
IkReal gconst40=((1.0)*r01*x14165);
IkReal gconst41=((-1.0)*r00*x14165);
CheckValue<IkReal> x14168 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14168.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14168.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14171 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14171.valid){
continue;
}
IkReal x14169=((1.0)*(x14171.value));
IkReal x14170=x14165;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14169)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14169)));
IkReal gconst40=((1.0)*r01*x14170);
IkReal gconst41=((-1.0)*r00*x14170);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14174 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14174.valid){
continue;
}
IkReal x14172=((1.0)*(x14174.value));
IkReal x14173=x14165;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14172)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14172)));
IkReal gconst40=((1.0)*r01*x14173);
IkReal gconst41=((-1.0)*r00*x14173);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14175=gconst41*gconst41;
IkReal x14176=gconst40*gconst40;
IkReal x14177=(gconst40*r10);
IkReal x14178=(r22*sj3);
IkReal x14179=(r11*sj3);
IkReal x14180=((1.0)*cj3);
IkReal x14181=(gconst41*r21);
IkReal x14182=(gconst41*r20);
IkReal x14183=(r21*x14176);
IkReal x14184=((1.0)*r20*x14175);
CheckValue<IkReal> x14185 = IKatan2WithCheck(IkReal((((x14177*x14178))+((gconst41*r11*x14178)))),IkReal((((r10*sj3*x14183))+(((-1.0)*x14179*x14184))+(((-1.0)*sj3*x14177*x14182))+((gconst40*x14179*x14181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14185.valid){
continue;
}
CheckValue<IkReal> x14186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14180))+((cj3*x14177*x14181))+(((-1.0)*r11*x14180*x14183))+((cj3*gconst40*r11*x14182))+(((-1.0)*r10*r20*x14175*x14180)))),-1);
if(!x14186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14185.value)+(((1.5707963267949)*(x14186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14187=IKsin(j4);
IkReal x14188=IKcos(j4);
IkReal x14189=(cj2*sj1);
IkReal x14190=(cj1*sj2);
IkReal x14191=(gconst40*sj3);
IkReal x14192=(gconst41*sj3);
IkReal x14193=(gconst41*r20);
IkReal x14194=(cj3*gconst41);
IkReal x14195=(sj1*sj2);
IkReal x14196=(cj1*cj2);
IkReal x14197=(cj3*gconst40);
IkReal x14198=((1.0)*x14188);
IkReal x14199=((1.0)*x14187);
IkReal x14200=(cj3*x14187);
IkReal x14201=(gconst40*x14187);
IkReal x14202=(x14189+x14190);
IkReal x14203=(x14188*x14197);
evalcond[0]=((((-1.0)*r22*x14198))+((r21*x14201))+(((-1.0)*x14193*x14199)));
evalcond[1]=((((-1.0)*gconst41*r00*x14199))+(((-1.0)*r02*x14198))+((r01*x14201)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14198))+(((-1.0)*gconst41*r10*x14199))+((r11*x14201)));
evalcond[3]=(((r10*x14191))+(((-1.0)*r10*x14194*x14198))+((r11*x14192))+((r12*x14200))+((r11*x14203)));
evalcond[4]=(((r10*x14197))+(((-1.0)*r12*sj3*x14199))+(((-1.0)*r11*x14191*x14198))+((r10*x14188*x14192))+((r11*x14194)));
evalcond[5]=(((r21*x14203))+((r22*x14200))+((r21*x14192))+(((-1.0)*cj3*x14193*x14198))+x14202+((r20*x14191)));
evalcond[6]=((((-1.0)*x14195))+(((-1.0)*r00*x14194*x14198))+((r02*x14200))+((r01*x14192))+((r01*x14203))+((r00*x14191))+x14196);
evalcond[7]=(((r00*x14188*x14192))+((r01*x14194))+((r00*x14197))+(((-1.0)*r02*sj3*x14199))+(((-1.0)*r01*x14191*x14198))+x14202);
evalcond[8]=((((-1.0)*x14196))+(((-1.0)*r22*sj3*x14199))+(((-1.0)*r21*x14191*x14198))+((r20*x14188*x14192))+x14195+((r21*x14194))+((r20*x14197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14204=((1.0)*gconst41);
CheckValue<IkReal> x14205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14204))+(((-1.0)*gconst40*r20)))),-1);
if(!x14205.valid){
continue;
}
CheckValue<IkReal> x14206 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14204))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14205.value)))+(x14206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14207=IKsin(j4);
IkReal x14208=IKcos(j4);
IkReal x14209=(cj2*sj1);
IkReal x14210=(cj1*sj2);
IkReal x14211=(gconst40*sj3);
IkReal x14212=(gconst41*sj3);
IkReal x14213=(gconst41*r20);
IkReal x14214=(cj3*gconst41);
IkReal x14215=(sj1*sj2);
IkReal x14216=(cj1*cj2);
IkReal x14217=(cj3*gconst40);
IkReal x14218=((1.0)*x14208);
IkReal x14219=((1.0)*x14207);
IkReal x14220=(cj3*x14207);
IkReal x14221=(gconst40*x14207);
IkReal x14222=(x14210+x14209);
IkReal x14223=(x14208*x14217);
evalcond[0]=((((-1.0)*x14213*x14219))+((r21*x14221))+(((-1.0)*r22*x14218)));
evalcond[1]=((((-1.0)*gconst41*r00*x14219))+(((-1.0)*r02*x14218))+((r01*x14221)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14218))+(((-1.0)*gconst41*r10*x14219))+((r11*x14221)));
evalcond[3]=(((r11*x14212))+((r10*x14211))+(((-1.0)*r10*x14214*x14218))+((r11*x14223))+((r12*x14220)));
evalcond[4]=(((r11*x14214))+((r10*x14208*x14212))+((r10*x14217))+(((-1.0)*r11*x14211*x14218))+(((-1.0)*r12*sj3*x14219)));
evalcond[5]=((((-1.0)*cj3*x14213*x14218))+((r22*x14220))+((r21*x14223))+((r21*x14212))+((r20*x14211))+x14222);
evalcond[6]=(((r02*x14220))+((r01*x14212))+(((-1.0)*r00*x14214*x14218))+((r00*x14211))+(((-1.0)*x14215))+((r01*x14223))+x14216);
evalcond[7]=((((-1.0)*r02*sj3*x14219))+(((-1.0)*r01*x14211*x14218))+((r00*x14208*x14212))+((r01*x14214))+((r00*x14217))+x14222);
evalcond[8]=((((-1.0)*r21*x14211*x14218))+(((-1.0)*r22*sj3*x14219))+(((-1.0)*x14216))+((r20*x14208*x14212))+((r21*x14214))+((r20*x14217))+x14215);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14224 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14224.valid){
continue;
}
CheckValue<IkReal> x14225=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14224.value)+(((1.5707963267949)*(x14225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14226=IKsin(j4);
IkReal x14227=IKcos(j4);
IkReal x14228=(cj2*sj1);
IkReal x14229=(cj1*sj2);
IkReal x14230=(gconst40*sj3);
IkReal x14231=(gconst41*sj3);
IkReal x14232=(gconst41*r20);
IkReal x14233=(cj3*gconst41);
IkReal x14234=(sj1*sj2);
IkReal x14235=(cj1*cj2);
IkReal x14236=(cj3*gconst40);
IkReal x14237=((1.0)*x14227);
IkReal x14238=((1.0)*x14226);
IkReal x14239=(cj3*x14226);
IkReal x14240=(gconst40*x14226);
IkReal x14241=(x14228+x14229);
IkReal x14242=(x14227*x14236);
evalcond[0]=(((r21*x14240))+(((-1.0)*x14232*x14238))+(((-1.0)*r22*x14237)));
evalcond[1]=((((-1.0)*gconst41*r00*x14238))+(((-1.0)*r02*x14237))+((r01*x14240)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14238))+(((-1.0)*r12*x14237))+((r11*x14240)));
evalcond[3]=(((r10*x14230))+((r11*x14242))+((r12*x14239))+(((-1.0)*r10*x14233*x14237))+((r11*x14231)));
evalcond[4]=(((r10*x14236))+(((-1.0)*r11*x14230*x14237))+(((-1.0)*r12*sj3*x14238))+((r10*x14227*x14231))+((r11*x14233)));
evalcond[5]=(((r21*x14242))+((r20*x14230))+((r21*x14231))+(((-1.0)*cj3*x14232*x14237))+((r22*x14239))+x14241);
evalcond[6]=((((-1.0)*r00*x14233*x14237))+((r02*x14239))+((r01*x14231))+((r00*x14230))+(((-1.0)*x14234))+((r01*x14242))+x14235);
evalcond[7]=(((r00*x14227*x14231))+((r01*x14233))+((r00*x14236))+(((-1.0)*r02*sj3*x14238))+(((-1.0)*r01*x14230*x14237))+x14241);
evalcond[8]=(((r20*x14236))+((r21*x14233))+((r20*x14227*x14231))+(((-1.0)*r22*sj3*x14238))+(((-1.0)*x14235))+x14234+(((-1.0)*r21*x14230*x14237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14243=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14243);
rxp1_1=(px*r21);
rxp1_2=(r11*x14243);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14244=(r11*sj5);
IkReal x14245=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14245))+x14244);
j4eval[1]=(((cj3*x14244))+(((-1.0)*cj3*x14245)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14246=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14246);
rxp1_1=(px*r21);
rxp1_2=(r11*x14246);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14247=(cj5*r10);
IkReal x14248=(r11*sj5);
j4eval[0]=((((-1.0)*x14247))+x14248);
j4eval[1]=((((-1.0)*sj3*x14248))+((sj3*x14247)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14249=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14249);
rxp1_1=(px*r21);
rxp1_2=(r11*x14249);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14250=((1.0)*r10);
CheckValue<IkReal> x14251=IKPowWithIntegerCheck(cj3,-1);
if(!x14251.valid){
continue;
}
CheckValue<IkReal> x14252=IKPowWithIntegerCheck(r02,-1);
if(!x14252.valid){
continue;
}
CheckValue<IkReal> x14253=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14250))),-1);
if(!x14253.valid){
continue;
}
if( IKabs(((x14251.value)*(x14252.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14253.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14250)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14251.value)*(x14252.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14253.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14250))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14251.value)*(x14252.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14253.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14250))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14254=IKsin(j4);
IkReal x14255=IKcos(j4);
IkReal x14256=(cj2*sj1);
IkReal x14257=(cj1*sj2);
IkReal x14258=(cj5*r10);
IkReal x14259=(sj1*sj2);
IkReal x14260=(cj5*sj3);
IkReal x14261=(r11*sj5);
IkReal x14262=(cj3*sj5);
IkReal x14263=(r21*sj5);
IkReal x14264=(cj1*cj2);
IkReal x14265=(cj3*cj5);
IkReal x14266=(sj3*sj5);
IkReal x14267=((1.0)*x14254);
IkReal x14268=(r20*x14255);
IkReal x14269=(cj3*x14255);
IkReal x14270=(sj3*x14255);
IkReal x14271=(x14257+x14256);
evalcond[0]=((-1.0)*r02*x14255);
evalcond[1]=((((-1.0)*cj5*r20*x14267))+((x14254*x14263)));
evalcond[2]=(((cj3*r02*x14254))+x14264+(((-1.0)*x14259)));
evalcond[3]=((((-1.0)*r02*sj3*x14267))+x14271);
evalcond[4]=((-1.0)+(((-1.0)*x14258*x14267))+((x14254*x14261)));
evalcond[5]=(((r11*x14260))+((x14261*x14269))+(((-1.0)*x14258*x14269))+((r10*x14266)));
evalcond[6]=(((r11*x14265))+((x14258*x14270))+((r10*x14262))+(((-1.0)*x14261*x14270)));
evalcond[7]=((((-1.0)*x14265*x14268))+((r21*x14260))+((r20*x14266))+((r21*x14255*x14262))+x14271);
evalcond[8]=(((r21*x14265))+(((-1.0)*x14264))+((r20*x14262))+(((-1.0)*x14263*x14270))+((x14260*x14268))+x14259);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14272=(cj5*r10);
IkReal x14273=((1.0)*r11);
CheckValue<IkReal> x14274=IKPowWithIntegerCheck(((((-1.0)*x14272))+((r11*sj5))),-1);
if(!x14274.valid){
continue;
}
CheckValue<IkReal> x14275=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14273))+((sj3*x14272))),-1);
if(!x14275.valid){
continue;
}
if( IKabs(x14274.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14275.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14273)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14274.value)+IKsqr(((x14275.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14273))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14274.value, ((x14275.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14273))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14276=IKsin(j4);
IkReal x14277=IKcos(j4);
IkReal x14278=(cj2*sj1);
IkReal x14279=(cj1*sj2);
IkReal x14280=(cj5*r10);
IkReal x14281=(sj1*sj2);
IkReal x14282=(cj5*sj3);
IkReal x14283=(r11*sj5);
IkReal x14284=(cj3*sj5);
IkReal x14285=(r21*sj5);
IkReal x14286=(cj1*cj2);
IkReal x14287=(cj3*cj5);
IkReal x14288=(sj3*sj5);
IkReal x14289=((1.0)*x14276);
IkReal x14290=(r20*x14277);
IkReal x14291=(cj3*x14277);
IkReal x14292=(sj3*x14277);
IkReal x14293=(x14279+x14278);
evalcond[0]=((-1.0)*r02*x14277);
evalcond[1]=(((x14276*x14285))+(((-1.0)*cj5*r20*x14289)));
evalcond[2]=(((cj3*r02*x14276))+(((-1.0)*x14281))+x14286);
evalcond[3]=((((-1.0)*r02*sj3*x14289))+x14293);
evalcond[4]=((-1.0)+(((-1.0)*x14280*x14289))+((x14276*x14283)));
evalcond[5]=(((x14283*x14291))+((r10*x14288))+(((-1.0)*x14280*x14291))+((r11*x14282)));
evalcond[6]=(((r10*x14284))+((x14280*x14292))+((r11*x14287))+(((-1.0)*x14283*x14292)));
evalcond[7]=(((r21*x14282))+(((-1.0)*x14287*x14290))+((r21*x14277*x14284))+x14293+((r20*x14288)));
evalcond[8]=(((r21*x14287))+(((-1.0)*x14285*x14292))+((x14282*x14290))+(((-1.0)*x14286))+x14281+((r20*x14284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14294=((1.0)*r10);
IkReal x14295=(r11*sj5);
CheckValue<IkReal> x14296=IKPowWithIntegerCheck(((((-1.0)*cj5*x14294))+x14295),-1);
if(!x14296.valid){
continue;
}
CheckValue<IkReal> x14297=IKPowWithIntegerCheck((((cj3*x14295))+(((-1.0)*cj3*cj5*x14294))),-1);
if(!x14297.valid){
continue;
}
if( IKabs(x14296.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14297.value)*(((((-1.0)*sj3*sj5*x14294))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14296.value)+IKsqr(((x14297.value)*(((((-1.0)*sj3*sj5*x14294))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14296.value, ((x14297.value)*(((((-1.0)*sj3*sj5*x14294))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14298=IKsin(j4);
IkReal x14299=IKcos(j4);
IkReal x14300=(cj2*sj1);
IkReal x14301=(cj1*sj2);
IkReal x14302=(cj5*r10);
IkReal x14303=(sj1*sj2);
IkReal x14304=(cj5*sj3);
IkReal x14305=(r11*sj5);
IkReal x14306=(cj3*sj5);
IkReal x14307=(r21*sj5);
IkReal x14308=(cj1*cj2);
IkReal x14309=(cj3*cj5);
IkReal x14310=(sj3*sj5);
IkReal x14311=((1.0)*x14298);
IkReal x14312=(r20*x14299);
IkReal x14313=(cj3*x14299);
IkReal x14314=(sj3*x14299);
IkReal x14315=(x14301+x14300);
evalcond[0]=((-1.0)*r02*x14299);
evalcond[1]=(((x14298*x14307))+(((-1.0)*cj5*r20*x14311)));
evalcond[2]=(((cj3*r02*x14298))+(((-1.0)*x14303))+x14308);
evalcond[3]=((((-1.0)*r02*sj3*x14311))+x14315);
evalcond[4]=((-1.0)+((x14298*x14305))+(((-1.0)*x14302*x14311)));
evalcond[5]=(((r11*x14304))+(((-1.0)*x14302*x14313))+((x14305*x14313))+((r10*x14310)));
evalcond[6]=(((r11*x14309))+(((-1.0)*x14305*x14314))+((x14302*x14314))+((r10*x14306)));
evalcond[7]=(((r21*x14299*x14306))+((r20*x14310))+(((-1.0)*x14309*x14312))+x14315+((r21*x14304)));
evalcond[8]=(((r20*x14306))+((x14304*x14312))+(((-1.0)*x14308))+x14303+((r21*x14309))+(((-1.0)*x14307*x14314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14316=cj5*cj5;
IkReal x14317=((1.0)*cj3);
IkReal x14318=(r10*r21);
IkReal x14319=(cj5*sj5);
IkReal x14320=(r11*r21);
IkReal x14321=(r11*r20);
IkReal x14322=(r22*sj3);
IkReal x14323=(r10*r20);
IkReal x14324=((1.0)*sj3*x14316);
CheckValue<IkReal> x14325=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14317*x14320))+(((-1.0)*x14316*x14317*x14323))+(((-1.0)*r12*r22*x14317))+((cj3*x14316*x14320))+((cj3*x14319*x14321))+((cj3*x14318*x14319)))),-1);
if(!x14325.valid){
continue;
}
CheckValue<IkReal> x14326 = IKatan2WithCheck(IkReal((((r10*sj5*x14322))+((cj5*r11*x14322)))),IkReal((((sj3*x14318))+(((-1.0)*x14318*x14324))+(((-1.0)*x14321*x14324))+((sj3*x14319*x14320))+(((-1.0)*sj3*x14319*x14323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14325.value)))+(x14326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14327=IKsin(j4);
IkReal x14328=IKcos(j4);
IkReal x14329=(cj2*sj1);
IkReal x14330=(cj1*sj2);
IkReal x14331=(cj5*sj3);
IkReal x14332=(cj5*r10);
IkReal x14333=(r00*sj5);
IkReal x14334=(sj1*sj2);
IkReal x14335=(r11*sj5);
IkReal x14336=(cj3*cj5);
IkReal x14337=(cj3*sj5);
IkReal x14338=(r21*sj5);
IkReal x14339=(cj1*cj2);
IkReal x14340=(sj3*sj5);
IkReal x14341=(r01*sj5);
IkReal x14342=((1.0)*x14328);
IkReal x14343=((1.0)*x14327);
IkReal x14344=(cj3*x14327);
IkReal x14345=(cj3*x14328);
IkReal x14346=(x14330+x14329);
evalcond[0]=((((-1.0)*r22*x14342))+((x14327*x14338))+(((-1.0)*cj5*r20*x14343)));
evalcond[1]=(((x14327*x14341))+(((-1.0)*cj5*r00*x14343))+(((-1.0)*r02*x14342)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14342))+(((-1.0)*x14332*x14343))+((x14327*x14335)));
evalcond[3]=(((r11*x14331))+((r10*x14340))+((r12*x14344))+((x14335*x14345))+(((-1.0)*cj3*x14332*x14342)));
evalcond[4]=((((-1.0)*sj3*x14335*x14342))+((r10*x14328*x14331))+((r11*x14336))+(((-1.0)*r12*sj3*x14343))+((r10*x14337)));
evalcond[5]=(((r21*x14328*x14337))+((r22*x14344))+(((-1.0)*r20*x14336*x14342))+((r20*x14340))+x14346+((r21*x14331)));
evalcond[6]=((((-1.0)*r00*x14336*x14342))+(((-1.0)*x14334))+((r01*x14331))+((r02*x14344))+x14339+((sj3*x14333))+((r01*x14328*x14337)));
evalcond[7]=((((-1.0)*r01*x14340*x14342))+(((-1.0)*r02*sj3*x14343))+((r00*x14328*x14331))+((r01*x14336))+x14346+((cj3*x14333)));
evalcond[8]=(((r20*x14337))+((r20*x14328*x14331))+(((-1.0)*x14339))+x14334+(((-1.0)*sj3*x14338*x14342))+((r21*x14336))+(((-1.0)*r22*sj3*x14343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14347=((1.0)*cj5);
CheckValue<IkReal> x14348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14347))+(((-1.0)*r20*sj5)))),-1);
if(!x14348.valid){
continue;
}
CheckValue<IkReal> x14349 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14348.value)))+(x14349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14350=IKsin(j4);
IkReal x14351=IKcos(j4);
IkReal x14352=(cj2*sj1);
IkReal x14353=(cj1*sj2);
IkReal x14354=(cj5*sj3);
IkReal x14355=(cj5*r10);
IkReal x14356=(r00*sj5);
IkReal x14357=(sj1*sj2);
IkReal x14358=(r11*sj5);
IkReal x14359=(cj3*cj5);
IkReal x14360=(cj3*sj5);
IkReal x14361=(r21*sj5);
IkReal x14362=(cj1*cj2);
IkReal x14363=(sj3*sj5);
IkReal x14364=(r01*sj5);
IkReal x14365=((1.0)*x14351);
IkReal x14366=((1.0)*x14350);
IkReal x14367=(cj3*x14350);
IkReal x14368=(cj3*x14351);
IkReal x14369=(x14352+x14353);
evalcond[0]=((((-1.0)*r22*x14365))+(((-1.0)*cj5*r20*x14366))+((x14350*x14361)));
evalcond[1]=((((-1.0)*r02*x14365))+(((-1.0)*cj5*r00*x14366))+((x14350*x14364)));
evalcond[2]=((-1.0)+((x14350*x14358))+(((-1.0)*r12*x14365))+(((-1.0)*x14355*x14366)));
evalcond[3]=((((-1.0)*cj3*x14355*x14365))+((r10*x14363))+((r11*x14354))+((x14358*x14368))+((r12*x14367)));
evalcond[4]=(((r10*x14360))+((r11*x14359))+(((-1.0)*r12*sj3*x14366))+(((-1.0)*sj3*x14358*x14365))+((r10*x14351*x14354)));
evalcond[5]=(((r20*x14363))+((r21*x14354))+((r21*x14351*x14360))+x14369+(((-1.0)*r20*x14359*x14365))+((r22*x14367)));
evalcond[6]=(((sj3*x14356))+((r01*x14351*x14360))+((r02*x14367))+(((-1.0)*x14357))+((r01*x14354))+x14362+(((-1.0)*r00*x14359*x14365)));
evalcond[7]=(((cj3*x14356))+(((-1.0)*r01*x14363*x14365))+((r01*x14359))+(((-1.0)*r02*sj3*x14366))+((r00*x14351*x14354))+x14369);
evalcond[8]=(((r20*x14360))+(((-1.0)*x14362))+((r20*x14351*x14354))+((r21*x14359))+x14357+(((-1.0)*r22*sj3*x14366))+(((-1.0)*sj3*x14361*x14365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14370 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14370.valid){
continue;
}
CheckValue<IkReal> x14371=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14370.value)+(((1.5707963267949)*(x14371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14372=IKsin(j4);
IkReal x14373=IKcos(j4);
IkReal x14374=(cj2*sj1);
IkReal x14375=(cj1*sj2);
IkReal x14376=(cj5*sj3);
IkReal x14377=(cj5*r10);
IkReal x14378=(r00*sj5);
IkReal x14379=(sj1*sj2);
IkReal x14380=(r11*sj5);
IkReal x14381=(cj3*cj5);
IkReal x14382=(cj3*sj5);
IkReal x14383=(r21*sj5);
IkReal x14384=(cj1*cj2);
IkReal x14385=(sj3*sj5);
IkReal x14386=(r01*sj5);
IkReal x14387=((1.0)*x14373);
IkReal x14388=((1.0)*x14372);
IkReal x14389=(cj3*x14372);
IkReal x14390=(cj3*x14373);
IkReal x14391=(x14374+x14375);
evalcond[0]=(((x14372*x14383))+(((-1.0)*cj5*r20*x14388))+(((-1.0)*r22*x14387)));
evalcond[1]=(((x14372*x14386))+(((-1.0)*cj5*r00*x14388))+(((-1.0)*r02*x14387)));
evalcond[2]=((-1.0)+(((-1.0)*x14377*x14388))+(((-1.0)*r12*x14387))+((x14372*x14380)));
evalcond[3]=((((-1.0)*cj3*x14377*x14387))+((x14380*x14390))+((r12*x14389))+((r10*x14385))+((r11*x14376)));
evalcond[4]=(((r10*x14373*x14376))+((r10*x14382))+(((-1.0)*sj3*x14380*x14387))+((r11*x14381))+(((-1.0)*r12*sj3*x14388)));
evalcond[5]=(((r21*x14376))+((r20*x14385))+((r21*x14373*x14382))+(((-1.0)*r20*x14381*x14387))+((r22*x14389))+x14391);
evalcond[6]=(((r01*x14376))+(((-1.0)*x14379))+(((-1.0)*r00*x14381*x14387))+((sj3*x14378))+((r02*x14389))+x14384+((r01*x14373*x14382)));
evalcond[7]=(((r01*x14381))+((cj3*x14378))+((r00*x14373*x14376))+(((-1.0)*r01*x14385*x14387))+x14391+(((-1.0)*r02*sj3*x14388)));
evalcond[8]=(((r20*x14382))+(((-1.0)*x14384))+((r21*x14381))+(((-1.0)*sj3*x14383*x14387))+(((-1.0)*r22*sj3*x14388))+((r20*x14373*x14376))+x14379);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14392=((-1.0)*r00);
IkReal x14394 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14394)==0){
continue;
}
IkReal x14393=pow(x14394,-0.5);
CheckValue<IkReal> x14395 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14392),IKFAST_ATAN2_MAGTHRESH);
if(!x14395.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14395.value));
IkReal gconst13=(r01*x14393);
IkReal gconst14=(x14392*x14393);
CheckValue<IkReal> x14396 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14396.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14396.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14397=((-1.0)*r00);
IkReal x14398=x14393;
CheckValue<IkReal> x14400 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14397),IKFAST_ATAN2_MAGTHRESH);
if(!x14400.valid){
continue;
}
IkReal x14399=((-1.0)*(x14400.value));
sj5=gconst13;
cj5=gconst14;
j5=x14399;
IkReal gconst12=x14399;
IkReal gconst13=(r01*x14398);
IkReal gconst14=(x14397*x14398);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14401=((1.0)*sj0);
IkReal x14402=((1.0)*cj0);
CheckValue<IkReal> x14403 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14402))+(((-1.0)*r12*x14401)))),IkReal((((cj0*gconst14*r00))+(((-1.0)*gconst13*r11*x14401))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14403.valid){
continue;
}
CheckValue<IkReal> x14404=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14403.value)+(((1.5707963267949)*(x14404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14405=IKsin(j4);
IkReal x14406=IKcos(j4);
IkReal x14407=((1.0)*r22);
IkReal x14408=((1.0)*r12);
IkReal x14409=(gconst13*sj3);
IkReal x14410=(gconst13*r01);
IkReal x14411=(sj1*sj2);
IkReal x14412=(gconst14*sj3);
IkReal x14413=(cj2*sj1);
IkReal x14414=((1.0)*sj0);
IkReal x14415=(cj3*gconst13);
IkReal x14416=(cj3*gconst14);
IkReal x14417=((1.0)*cj0);
IkReal x14418=((1.0)*gconst14);
IkReal x14419=(cj1*sj2);
IkReal x14420=(sj3*x14405);
IkReal x14421=((1.0)*cj1*cj2);
IkReal x14422=(cj3*x14406);
IkReal x14423=(cj3*x14405);
IkReal x14424=(gconst13*x14405);
IkReal x14425=((1.0)*x14406);
IkReal x14426=(x14405*x14418);
evalcond[0]=((((-1.0)*x14406*x14407))+((r21*x14424))+(((-1.0)*r20*x14426)));
evalcond[1]=((((-1.0)*r10*x14426))+cj0+((r11*x14424))+(((-1.0)*x14406*x14408)));
evalcond[2]=(((x14405*x14410))+(((-1.0)*x14414))+(((-1.0)*r02*x14425))+(((-1.0)*r00*x14426)));
evalcond[3]=((((-1.0)*r20*x14416*x14425))+((r21*x14412))+x14413+x14419+((r21*x14406*x14415))+((r22*x14423))+((r20*x14409)));
evalcond[4]=(((r21*x14416))+((r20*x14406*x14412))+(((-1.0)*x14407*x14420))+x14411+(((-1.0)*r21*x14409*x14425))+(((-1.0)*x14421))+((r20*x14415)));
evalcond[5]=((((-1.0)*cj1*cj2*x14417))+((cj0*x14411))+((x14410*x14422))+((r00*x14409))+(((-1.0)*r00*x14416*x14425))+((r01*x14412))+((r02*x14423)));
evalcond[6]=(((r10*x14409))+((r11*x14406*x14415))+(((-1.0)*cj1*cj2*x14414))+(((-1.0)*r10*x14416*x14425))+((r11*x14412))+((r12*x14423))+((sj0*x14411)));
evalcond[7]=((((-1.0)*x14417*x14419))+(((-1.0)*x14413*x14417))+((r00*x14415))+(((-1.0)*r01*x14409*x14425))+((r01*x14416))+((r00*x14406*x14412))+(((-1.0)*r02*x14420)));
evalcond[8]=(((r11*x14416))+(((-1.0)*r11*x14409*x14425))+(((-1.0)*x14413*x14414))+(((-1.0)*x14414*x14419))+(((-1.0)*x14408*x14420))+((r10*x14415))+((r10*x14406*x14412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14427=((1.0)*gconst14);
CheckValue<IkReal> x14428 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14427))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14428.valid){
continue;
}
CheckValue<IkReal> x14429=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14427)))),-1);
if(!x14429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14428.value)+(((1.5707963267949)*(x14429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14430=IKsin(j4);
IkReal x14431=IKcos(j4);
IkReal x14432=((1.0)*r22);
IkReal x14433=((1.0)*r12);
IkReal x14434=(gconst13*sj3);
IkReal x14435=(gconst13*r01);
IkReal x14436=(sj1*sj2);
IkReal x14437=(gconst14*sj3);
IkReal x14438=(cj2*sj1);
IkReal x14439=((1.0)*sj0);
IkReal x14440=(cj3*gconst13);
IkReal x14441=(cj3*gconst14);
IkReal x14442=((1.0)*cj0);
IkReal x14443=((1.0)*gconst14);
IkReal x14444=(cj1*sj2);
IkReal x14445=(sj3*x14430);
IkReal x14446=((1.0)*cj1*cj2);
IkReal x14447=(cj3*x14431);
IkReal x14448=(cj3*x14430);
IkReal x14449=(gconst13*x14430);
IkReal x14450=((1.0)*x14431);
IkReal x14451=(x14430*x14443);
evalcond[0]=((((-1.0)*x14431*x14432))+(((-1.0)*r20*x14451))+((r21*x14449)));
evalcond[1]=((((-1.0)*x14431*x14433))+cj0+((r11*x14449))+(((-1.0)*r10*x14451)));
evalcond[2]=((((-1.0)*x14439))+(((-1.0)*r00*x14451))+(((-1.0)*r02*x14450))+((x14430*x14435)));
evalcond[3]=(((r21*x14437))+((r20*x14434))+(((-1.0)*r20*x14441*x14450))+((r21*x14431*x14440))+x14444+x14438+((r22*x14448)));
evalcond[4]=((((-1.0)*x14446))+(((-1.0)*r21*x14434*x14450))+((r20*x14440))+x14436+((r20*x14431*x14437))+((r21*x14441))+(((-1.0)*x14432*x14445)));
evalcond[5]=(((cj0*x14436))+((r00*x14434))+((r01*x14437))+(((-1.0)*r00*x14441*x14450))+(((-1.0)*cj1*cj2*x14442))+((r02*x14448))+((x14435*x14447)));
evalcond[6]=((((-1.0)*cj1*cj2*x14439))+(((-1.0)*r10*x14441*x14450))+((r11*x14437))+((r12*x14448))+((sj0*x14436))+((r10*x14434))+((r11*x14431*x14440)));
evalcond[7]=(((r00*x14431*x14437))+(((-1.0)*r02*x14445))+(((-1.0)*x14438*x14442))+((r01*x14441))+((r00*x14440))+(((-1.0)*x14442*x14444))+(((-1.0)*r01*x14434*x14450)));
evalcond[8]=((((-1.0)*x14438*x14439))+(((-1.0)*x14439*x14444))+(((-1.0)*r11*x14434*x14450))+((r10*x14440))+((r11*x14441))+((r10*x14431*x14437))+(((-1.0)*x14433*x14445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14452=((-1.0)*r01);
IkReal x14454 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14454)==0){
continue;
}
IkReal x14453=pow(x14454,-0.5);
CheckValue<IkReal> x14455 = IKatan2WithCheck(IkReal(x14452),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14455.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14455.value))));
IkReal gconst16=(x14452*x14453);
IkReal gconst17=((1.0)*r00*x14453);
CheckValue<IkReal> x14456 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14456.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14456.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14457=((-1.0)*r01);
CheckValue<IkReal> x14460 = IKatan2WithCheck(IkReal(x14457),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14460.valid){
continue;
}
IkReal x14458=((1.0)*(x14460.value));
IkReal x14459=x14453;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14458)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14458)));
IkReal gconst16=(x14457*x14459);
IkReal gconst17=((1.0)*r00*x14459);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14461=((-1.0)*r01);
CheckValue<IkReal> x14464 = IKatan2WithCheck(IkReal(x14461),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14464.valid){
continue;
}
IkReal x14462=((1.0)*(x14464.value));
IkReal x14463=x14453;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14462)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14462)));
IkReal gconst16=(x14461*x14463);
IkReal gconst17=((1.0)*r00*x14463);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14465=((-1.0)*r01);
CheckValue<IkReal> x14468 = IKatan2WithCheck(IkReal(x14465),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14468.valid){
continue;
}
IkReal x14466=((1.0)*(x14468.value));
IkReal x14467=x14453;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14466)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14466)));
IkReal gconst16=(x14465*x14467);
IkReal gconst17=((1.0)*r00*x14467);
IkReal x14469=r02*r02;
IkReal x14470=(r12*sj0);
IkReal x14471=((1.0)*cj0);
IkReal x14472=x14453;
j4eval[0]=((IKabs((((cj0*x14469*x14472))+(((-1.0)*x14471*x14472))+((r02*x14470*x14472)))))+(IKabs(((((-1.0)*x14470))+(((-1.0)*r02*x14471))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14473=((-1.0)*r01);
CheckValue<IkReal> x14476 = IKatan2WithCheck(IkReal(x14473),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14476.valid){
continue;
}
IkReal x14474=((1.0)*(x14476.value));
IkReal x14475=x14453;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14474)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14474)));
IkReal gconst16=(x14473*x14475);
IkReal gconst17=((1.0)*r00*x14475);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14477=((-1.0)*r01);
CheckValue<IkReal> x14480 = IKatan2WithCheck(IkReal(x14477),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14480.valid){
continue;
}
IkReal x14478=((1.0)*(x14480.value));
IkReal x14479=x14453;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14478)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14478)));
IkReal gconst16=(x14477*x14479);
IkReal gconst17=((1.0)*r00*x14479);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14481=gconst16*gconst16;
IkReal x14482=gconst17*gconst17;
IkReal x14483=(r11*sj3);
IkReal x14484=(cj3*r10);
IkReal x14485=((1.0)*cj3);
IkReal x14486=(r10*sj3);
IkReal x14487=(gconst16*gconst17);
IkReal x14488=(r21*x14481);
IkReal x14489=((1.0)*r20*x14482);
CheckValue<IkReal> x14490=IKPowWithIntegerCheck(IKsign((((r21*x14484*x14487))+((cj3*r11*r20*x14487))+(((-1.0)*r11*x14485*x14488))+(((-1.0)*x14484*x14489))+(((-1.0)*r12*r22*x14485)))),-1);
if(!x14490.valid){
continue;
}
CheckValue<IkReal> x14491 = IKatan2WithCheck(IkReal((((gconst17*r22*x14483))+((gconst16*r22*x14486)))),IkReal((((x14486*x14488))+(((-1.0)*x14483*x14489))+((r21*x14483*x14487))+(((-1.0)*r20*x14486*x14487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14490.value)))+(x14491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14492=IKsin(j4);
IkReal x14493=IKcos(j4);
IkReal x14494=(cj2*sj1);
IkReal x14495=(cj1*sj2);
IkReal x14496=(gconst16*r21);
IkReal x14497=(cj3*gconst17);
IkReal x14498=(gconst16*r20);
IkReal x14499=(sj1*sj2);
IkReal x14500=(gconst17*r20);
IkReal x14501=(gconst17*sj3);
IkReal x14502=(gconst16*r10);
IkReal x14503=(cj1*cj2);
IkReal x14504=(gconst16*sj3);
IkReal x14505=((1.0)*x14493);
IkReal x14506=((1.0)*x14492);
IkReal x14507=(gconst16*x14492);
IkReal x14508=(cj3*x14493);
IkReal x14509=(cj3*x14492);
IkReal x14510=(x14495+x14494);
evalcond[0]=((((-1.0)*x14500*x14506))+((x14492*x14496))+(((-1.0)*r22*x14505)));
evalcond[1]=((((-1.0)*r02*x14505))+(((-1.0)*gconst17*r00*x14506))+((r01*x14507)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14505))+((r11*x14507))+(((-1.0)*gconst17*r10*x14506)));
evalcond[3]=((((-1.0)*r10*x14497*x14505))+((gconst16*r11*x14508))+((sj3*x14502))+((r11*x14501))+((r12*x14509)));
evalcond[4]=(((cj3*x14502))+((r11*x14497))+((r10*x14493*x14501))+(((-1.0)*r11*x14504*x14505))+(((-1.0)*r12*sj3*x14506)));
evalcond[5]=(((x14496*x14508))+((sj3*x14498))+(((-1.0)*r20*x14497*x14505))+((r22*x14509))+((r21*x14501))+x14510);
evalcond[6]=((((-1.0)*x14499))+((r02*x14509))+x14503+((gconst16*r01*x14508))+((r00*x14504))+((r01*x14501))+(((-1.0)*r00*x14497*x14505)));
evalcond[7]=((((-1.0)*r01*x14504*x14505))+x14510+((r00*x14493*x14501))+((r01*x14497))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14506)));
evalcond[8]=(((r21*x14497))+((sj3*x14493*x14500))+(((-1.0)*sj3*x14496*x14505))+(((-1.0)*x14503))+x14499+((cj3*x14498))+(((-1.0)*r22*sj3*x14506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14511=((1.0)*gconst17);
CheckValue<IkReal> x14512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14511))+(((-1.0)*gconst16*r20)))),-1);
if(!x14512.valid){
continue;
}
CheckValue<IkReal> x14513 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14511))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14512.value)))+(x14513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14514=IKsin(j4);
IkReal x14515=IKcos(j4);
IkReal x14516=(cj2*sj1);
IkReal x14517=(cj1*sj2);
IkReal x14518=(gconst16*r21);
IkReal x14519=(cj3*gconst17);
IkReal x14520=(gconst16*r20);
IkReal x14521=(sj1*sj2);
IkReal x14522=(gconst17*r20);
IkReal x14523=(gconst17*sj3);
IkReal x14524=(gconst16*r10);
IkReal x14525=(cj1*cj2);
IkReal x14526=(gconst16*sj3);
IkReal x14527=((1.0)*x14515);
IkReal x14528=((1.0)*x14514);
IkReal x14529=(gconst16*x14514);
IkReal x14530=(cj3*x14515);
IkReal x14531=(cj3*x14514);
IkReal x14532=(x14516+x14517);
evalcond[0]=((((-1.0)*x14522*x14528))+(((-1.0)*r22*x14527))+((x14514*x14518)));
evalcond[1]=((((-1.0)*gconst17*r00*x14528))+((r01*x14529))+(((-1.0)*r02*x14527)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14528))+((r11*x14529))+(((-1.0)*r12*x14527)));
evalcond[3]=(((r12*x14531))+((sj3*x14524))+((r11*x14523))+(((-1.0)*r10*x14519*x14527))+((gconst16*r11*x14530)));
evalcond[4]=((((-1.0)*r12*sj3*x14528))+((r10*x14515*x14523))+(((-1.0)*r11*x14526*x14527))+((r11*x14519))+((cj3*x14524)));
evalcond[5]=(((sj3*x14520))+((r22*x14531))+((x14518*x14530))+x14532+(((-1.0)*r20*x14519*x14527))+((r21*x14523)));
evalcond[6]=((((-1.0)*x14521))+(((-1.0)*r00*x14519*x14527))+((r02*x14531))+((r01*x14523))+((r00*x14526))+x14525+((gconst16*r01*x14530)));
evalcond[7]=(((r01*x14519))+x14532+(((-1.0)*r02*sj3*x14528))+(((-1.0)*r01*x14526*x14527))+((cj3*gconst16*r00))+((r00*x14515*x14523)));
evalcond[8]=((((-1.0)*x14525))+((cj3*x14520))+(((-1.0)*sj3*x14518*x14527))+((sj3*x14515*x14522))+x14521+(((-1.0)*r22*sj3*x14528))+((r21*x14519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14533=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14533.valid){
continue;
}
CheckValue<IkReal> x14534 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14533.value)))+(x14534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14535=IKsin(j4);
IkReal x14536=IKcos(j4);
IkReal x14537=(cj2*sj1);
IkReal x14538=(cj1*sj2);
IkReal x14539=(gconst16*r21);
IkReal x14540=(cj3*gconst17);
IkReal x14541=(gconst16*r20);
IkReal x14542=(sj1*sj2);
IkReal x14543=(gconst17*r20);
IkReal x14544=(gconst17*sj3);
IkReal x14545=(gconst16*r10);
IkReal x14546=(cj1*cj2);
IkReal x14547=(gconst16*sj3);
IkReal x14548=((1.0)*x14536);
IkReal x14549=((1.0)*x14535);
IkReal x14550=(gconst16*x14535);
IkReal x14551=(cj3*x14536);
IkReal x14552=(cj3*x14535);
IkReal x14553=(x14538+x14537);
evalcond[0]=((((-1.0)*x14543*x14549))+((x14535*x14539))+(((-1.0)*r22*x14548)));
evalcond[1]=((((-1.0)*gconst17*r00*x14549))+(((-1.0)*r02*x14548))+((r01*x14550)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14549))+(((-1.0)*r12*x14548))+((r11*x14550)));
evalcond[3]=((((-1.0)*r10*x14540*x14548))+((r11*x14544))+((r12*x14552))+((sj3*x14545))+((gconst16*r11*x14551)));
evalcond[4]=(((r11*x14540))+(((-1.0)*r12*sj3*x14549))+((cj3*x14545))+((r10*x14536*x14544))+(((-1.0)*r11*x14547*x14548)));
evalcond[5]=(((r21*x14544))+(((-1.0)*r20*x14540*x14548))+x14553+((sj3*x14541))+((x14539*x14551))+((r22*x14552)));
evalcond[6]=(((gconst16*r01*x14551))+((r01*x14544))+(((-1.0)*x14542))+((r00*x14547))+((r02*x14552))+x14546+(((-1.0)*r00*x14540*x14548)));
evalcond[7]=((((-1.0)*r02*sj3*x14549))+((r00*x14536*x14544))+((r01*x14540))+(((-1.0)*r01*x14547*x14548))+x14553+((cj3*gconst16*r00)));
evalcond[8]=(((sj3*x14536*x14543))+(((-1.0)*x14546))+((cj3*x14541))+((r21*x14540))+(((-1.0)*sj3*x14539*x14548))+x14542+(((-1.0)*r22*sj3*x14549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14554=((-1.0)*r01);
CheckValue<IkReal> x14557 = IKatan2WithCheck(IkReal(x14554),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14557.valid){
continue;
}
IkReal x14555=((1.0)*(x14557.value));
IkReal x14556=x14453;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14555)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14555)));
IkReal gconst16=(x14554*x14556);
IkReal gconst17=((1.0)*r00*x14556);
IkReal x14558=r02*r02;
IkReal x14559=(r12*sj0);
IkReal x14560=((1.0)*cj0);
IkReal x14561=x14453;
j4eval[0]=((IKabs((((cj0*x14558*x14561))+(((-1.0)*x14560*x14561))+((r02*x14559*x14561)))))+(IKabs(((((-1.0)*r02*x14560))+(((-1.0)*x14559))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14562=((1.0)*r12);
IkReal x14563=(sj1*sj2);
IkReal x14564=(cj1*cj2);
IkReal x14565=((1.0)*sj3);
IkReal x14566=(gconst16*r21);
IkReal x14567=(cj3*gconst16*r20);
IkReal x14568=(gconst17*r20*sj3);
IkReal x14569=(cj3*gconst17*r21);
CheckValue<IkReal> x14570=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14566))+(((-1.0)*gconst16*r11*x14565*x14566))+((gconst16*r11*x14568))+(((-1.0)*r10*r20*x14565*(gconst17*gconst17)))),-1);
if(!x14570.valid){
continue;
}
CheckValue<IkReal> x14571=IKPowWithIntegerCheck(((((-1.0)*x14565*x14566))+x14568),-1);
if(!x14571.valid){
continue;
}
if( IKabs(((x14570.value)*(((((-1.0)*x14562*x14569))+(((-1.0)*x14562*x14563))+(((-1.0)*x14562*x14567))+((cj0*sj3*x14566))+((r12*x14564))+(((-1.0)*cj0*gconst17*r20*x14565)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14571.value)*((x14564+(((-1.0)*x14569))+(((-1.0)*x14563))+(((-1.0)*x14567)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14570.value)*(((((-1.0)*x14562*x14569))+(((-1.0)*x14562*x14563))+(((-1.0)*x14562*x14567))+((cj0*sj3*x14566))+((r12*x14564))+(((-1.0)*cj0*gconst17*r20*x14565))))))+IKsqr(((x14571.value)*((x14564+(((-1.0)*x14569))+(((-1.0)*x14563))+(((-1.0)*x14567))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14570.value)*(((((-1.0)*x14562*x14569))+(((-1.0)*x14562*x14563))+(((-1.0)*x14562*x14567))+((cj0*sj3*x14566))+((r12*x14564))+(((-1.0)*cj0*gconst17*r20*x14565))))), ((x14571.value)*((x14564+(((-1.0)*x14569))+(((-1.0)*x14563))+(((-1.0)*x14567))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14572=IKsin(j4);
IkReal x14573=IKcos(j4);
IkReal x14574=((1.0)*gconst17);
IkReal x14575=(gconst17*sj3);
IkReal x14576=(gconst16*r21);
IkReal x14577=(cj3*gconst17);
IkReal x14578=(sj1*sj2);
IkReal x14579=((1.0)*sj0);
IkReal x14580=(gconst16*sj3);
IkReal x14581=(cj3*gconst16);
IkReal x14582=(cj2*sj1);
IkReal x14583=((1.0)*cj0);
IkReal x14584=((1.0)*sj3);
IkReal x14585=(cj1*sj2);
IkReal x14586=(cj3*x14573);
IkReal x14587=(gconst16*x14572);
IkReal x14588=((1.0)*x14573);
IkReal x14589=((1.0)*cj1*cj2);
IkReal x14590=(r02*x14572);
IkReal x14591=(r12*x14572);
evalcond[0]=(((x14572*x14576))+(((-1.0)*r20*x14572*x14574)));
evalcond[1]=(cj0+(((-1.0)*r12*x14588))+(((-1.0)*r10*x14572*x14574))+((r11*x14587)));
evalcond[2]=((((-1.0)*r00*x14572*x14574))+(((-1.0)*r02*x14588))+(((-1.0)*x14579))+((r01*x14587)));
evalcond[3]=(((r21*x14575))+((r20*x14580))+x14585+x14582+((x14576*x14586))+(((-1.0)*r20*x14574*x14586)));
evalcond[4]=(((r21*x14577))+((r20*x14581))+(((-1.0)*x14589))+x14578+(((-1.0)*x14573*x14576*x14584))+((r20*x14573*x14575)));
evalcond[5]=(((cj0*x14578))+((cj3*x14590))+((r01*x14573*x14581))+(((-1.0)*r00*x14574*x14586))+(((-1.0)*cj1*cj2*x14583))+((r00*x14580))+((r01*x14575)));
evalcond[6]=((((-1.0)*r10*x14574*x14586))+((cj3*x14591))+((r11*x14573*x14581))+(((-1.0)*cj1*cj2*x14579))+((r10*x14580))+((r11*x14575))+((sj0*x14578)));
evalcond[7]=((((-1.0)*x14583*x14585))+(((-1.0)*x14584*x14590))+((r00*x14573*x14575))+((r00*x14581))+(((-1.0)*r01*x14580*x14588))+(((-1.0)*x14582*x14583))+((r01*x14577)));
evalcond[8]=((((-1.0)*x14584*x14591))+(((-1.0)*r11*x14580*x14588))+((r10*x14581))+((r11*x14577))+((r10*x14573*x14575))+(((-1.0)*x14579*x14582))+(((-1.0)*x14579*x14585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14592=((1.0)*sj0);
IkReal x14593=((1.0)*cj0);
CheckValue<IkReal> x14594=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14594.valid){
continue;
}
CheckValue<IkReal> x14595 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14593))+(((-1.0)*r12*x14592)))),IkReal(((((-1.0)*gconst16*r01*x14593))+(((-1.0)*gconst16*r11*x14592))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14594.value)))+(x14595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14596=IKsin(j4);
IkReal x14597=IKcos(j4);
IkReal x14598=((1.0)*gconst17);
IkReal x14599=(gconst17*sj3);
IkReal x14600=(gconst16*r21);
IkReal x14601=(cj3*gconst17);
IkReal x14602=(sj1*sj2);
IkReal x14603=((1.0)*sj0);
IkReal x14604=(gconst16*sj3);
IkReal x14605=(cj3*gconst16);
IkReal x14606=(cj2*sj1);
IkReal x14607=((1.0)*cj0);
IkReal x14608=((1.0)*sj3);
IkReal x14609=(cj1*sj2);
IkReal x14610=(cj3*x14597);
IkReal x14611=(gconst16*x14596);
IkReal x14612=((1.0)*x14597);
IkReal x14613=((1.0)*cj1*cj2);
IkReal x14614=(r02*x14596);
IkReal x14615=(r12*x14596);
evalcond[0]=(((x14596*x14600))+(((-1.0)*r20*x14596*x14598)));
evalcond[1]=(cj0+(((-1.0)*r10*x14596*x14598))+(((-1.0)*r12*x14612))+((r11*x14611)));
evalcond[2]=((((-1.0)*r00*x14596*x14598))+((r01*x14611))+(((-1.0)*r02*x14612))+(((-1.0)*x14603)));
evalcond[3]=(((x14600*x14610))+(((-1.0)*r20*x14598*x14610))+((r21*x14599))+x14609+x14606+((r20*x14604)));
evalcond[4]=(((r20*x14597*x14599))+((r21*x14601))+x14602+((r20*x14605))+(((-1.0)*x14613))+(((-1.0)*x14597*x14600*x14608)));
evalcond[5]=(((cj0*x14602))+(((-1.0)*cj1*cj2*x14607))+((r00*x14604))+((cj3*x14614))+((r01*x14599))+(((-1.0)*r00*x14598*x14610))+((r01*x14597*x14605)));
evalcond[6]=(((sj0*x14602))+((r10*x14604))+(((-1.0)*cj1*cj2*x14603))+(((-1.0)*r10*x14598*x14610))+((cj3*x14615))+((r11*x14599))+((r11*x14597*x14605)));
evalcond[7]=(((r00*x14597*x14599))+((r01*x14601))+(((-1.0)*x14607*x14609))+((r00*x14605))+(((-1.0)*x14606*x14607))+(((-1.0)*r01*x14604*x14612))+(((-1.0)*x14608*x14614)));
evalcond[8]=((((-1.0)*r11*x14604*x14612))+((r10*x14605))+((r10*x14597*x14599))+((r11*x14601))+(((-1.0)*x14603*x14606))+(((-1.0)*x14603*x14609))+(((-1.0)*x14608*x14615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14616=((1.0)*sj0);
IkReal x14617=((1.0)*cj0);
CheckValue<IkReal> x14618=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14618.valid){
continue;
}
CheckValue<IkReal> x14619 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14616))+(((-1.0)*r02*x14617)))),IkReal(((((-1.0)*gconst16*r01*x14617))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14618.value)))+(x14619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14620=IKsin(j4);
IkReal x14621=IKcos(j4);
IkReal x14622=(cj3*gconst17);
IkReal x14623=(gconst16*r21);
IkReal x14624=(gconst17*sj3);
IkReal x14625=(gconst16*r20);
IkReal x14626=(sj1*sj2);
IkReal x14627=(gconst16*r10);
IkReal x14628=(cj2*sj1);
IkReal x14629=(gconst16*sj3);
IkReal x14630=((1.0)*cj0);
IkReal x14631=((1.0)*sj0);
IkReal x14632=(cj1*sj2);
IkReal x14633=((1.0)*x14621);
IkReal x14634=(gconst16*x14620);
IkReal x14635=(cj3*x14621);
IkReal x14636=(cj3*x14620);
IkReal x14637=((1.0)*cj1*cj2);
IkReal x14638=((1.0)*gconst17*x14620);
IkReal x14639=((1.0)*sj3*x14620);
evalcond[0]=((((-1.0)*r22*x14633))+((x14620*x14623))+(((-1.0)*r20*x14638)));
evalcond[1]=(cj0+((r11*x14634))+(((-1.0)*r10*x14638))+(((-1.0)*r12*x14633)));
evalcond[2]=((((-1.0)*x14631))+(((-1.0)*r00*x14638))+((r01*x14634))+(((-1.0)*r02*x14633)));
evalcond[3]=(((sj3*x14625))+((r22*x14636))+((r21*x14624))+((x14623*x14635))+(((-1.0)*r20*x14622*x14633))+x14632+x14628);
evalcond[4]=((((-1.0)*r22*x14639))+((r21*x14622))+(((-1.0)*sj3*x14623*x14633))+((cj3*x14625))+(((-1.0)*x14637))+((r20*x14621*x14624))+x14626);
evalcond[5]=(((r02*x14636))+((gconst16*r01*x14635))+(((-1.0)*cj1*cj2*x14630))+((cj0*x14626))+((r00*x14629))+((r01*x14624))+(((-1.0)*r00*x14622*x14633)));
evalcond[6]=(((sj3*x14627))+((gconst16*r11*x14635))+((r11*x14624))+((r12*x14636))+(((-1.0)*cj1*cj2*x14631))+(((-1.0)*r10*x14622*x14633))+((sj0*x14626)));
evalcond[7]=((((-1.0)*x14628*x14630))+(((-1.0)*r01*x14629*x14633))+(((-1.0)*x14630*x14632))+((r01*x14622))+((cj3*gconst16*r00))+((r00*x14621*x14624))+(((-1.0)*r02*x14639)));
evalcond[8]=(((r10*x14621*x14624))+(((-1.0)*x14628*x14631))+((cj3*x14627))+(((-1.0)*r11*x14629*x14633))+((r11*x14622))+(((-1.0)*x14631*x14632))+(((-1.0)*r12*x14639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14640=((1.0)*gconst17);
CheckValue<IkReal> x14641 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14641.valid){
continue;
}
CheckValue<IkReal> x14642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14640)))),-1);
if(!x14642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14641.value)+(((1.5707963267949)*(x14642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14643=IKsin(j4);
IkReal x14644=IKcos(j4);
IkReal x14645=(cj3*gconst17);
IkReal x14646=(gconst16*r21);
IkReal x14647=(gconst17*sj3);
IkReal x14648=(gconst16*r20);
IkReal x14649=(sj1*sj2);
IkReal x14650=(gconst16*r10);
IkReal x14651=(cj2*sj1);
IkReal x14652=(gconst16*sj3);
IkReal x14653=((1.0)*cj0);
IkReal x14654=((1.0)*sj0);
IkReal x14655=(cj1*sj2);
IkReal x14656=((1.0)*x14644);
IkReal x14657=(gconst16*x14643);
IkReal x14658=(cj3*x14644);
IkReal x14659=(cj3*x14643);
IkReal x14660=((1.0)*cj1*cj2);
IkReal x14661=((1.0)*gconst17*x14643);
IkReal x14662=((1.0)*sj3*x14643);
evalcond[0]=((((-1.0)*r22*x14656))+((x14643*x14646))+(((-1.0)*r20*x14661)));
evalcond[1]=(cj0+(((-1.0)*r12*x14656))+(((-1.0)*r10*x14661))+((r11*x14657)));
evalcond[2]=(((r01*x14657))+(((-1.0)*r02*x14656))+(((-1.0)*r00*x14661))+(((-1.0)*x14654)));
evalcond[3]=(((r22*x14659))+(((-1.0)*r20*x14645*x14656))+((sj3*x14648))+((r21*x14647))+x14651+x14655+((x14646*x14658)));
evalcond[4]=((((-1.0)*r22*x14662))+(((-1.0)*sj3*x14646*x14656))+((r21*x14645))+x14649+((r20*x14644*x14647))+((cj3*x14648))+(((-1.0)*x14660)));
evalcond[5]=(((gconst16*r01*x14658))+((cj0*x14649))+((r01*x14647))+(((-1.0)*r00*x14645*x14656))+((r00*x14652))+(((-1.0)*cj1*cj2*x14653))+((r02*x14659)));
evalcond[6]=(((r11*x14647))+((r12*x14659))+((sj0*x14649))+(((-1.0)*r10*x14645*x14656))+((sj3*x14650))+(((-1.0)*cj1*cj2*x14654))+((gconst16*r11*x14658)));
evalcond[7]=(((r01*x14645))+(((-1.0)*x14653*x14655))+(((-1.0)*r02*x14662))+((cj3*gconst16*r00))+(((-1.0)*x14651*x14653))+((r00*x14644*x14647))+(((-1.0)*r01*x14652*x14656)));
evalcond[8]=(((r11*x14645))+(((-1.0)*x14654*x14655))+(((-1.0)*r12*x14662))+(((-1.0)*r11*x14652*x14656))+((cj3*x14650))+(((-1.0)*x14651*x14654))+((r10*x14644*x14647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14663=((1.0)*gconst17);
CheckValue<IkReal> x14664 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14663))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14664.valid){
continue;
}
CheckValue<IkReal> x14665=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14663)))),-1);
if(!x14665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14664.value)+(((1.5707963267949)*(x14665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14666=IKsin(j4);
IkReal x14667=IKcos(j4);
IkReal x14668=(cj3*gconst17);
IkReal x14669=(gconst16*r21);
IkReal x14670=(gconst17*sj3);
IkReal x14671=(gconst16*r20);
IkReal x14672=(sj1*sj2);
IkReal x14673=(gconst16*r10);
IkReal x14674=(cj2*sj1);
IkReal x14675=(gconst16*sj3);
IkReal x14676=((1.0)*cj0);
IkReal x14677=((1.0)*sj0);
IkReal x14678=(cj1*sj2);
IkReal x14679=((1.0)*x14667);
IkReal x14680=(gconst16*x14666);
IkReal x14681=(cj3*x14667);
IkReal x14682=(cj3*x14666);
IkReal x14683=((1.0)*cj1*cj2);
IkReal x14684=((1.0)*gconst17*x14666);
IkReal x14685=((1.0)*sj3*x14666);
evalcond[0]=(((x14666*x14669))+(((-1.0)*r22*x14679))+(((-1.0)*r20*x14684)));
evalcond[1]=(cj0+((r11*x14680))+(((-1.0)*r12*x14679))+(((-1.0)*r10*x14684)));
evalcond[2]=((((-1.0)*r00*x14684))+((r01*x14680))+(((-1.0)*x14677))+(((-1.0)*r02*x14679)));
evalcond[3]=((((-1.0)*r20*x14668*x14679))+((x14669*x14681))+((r21*x14670))+x14678+x14674+((sj3*x14671))+((r22*x14682)));
evalcond[4]=(((r21*x14668))+(((-1.0)*x14683))+(((-1.0)*r22*x14685))+x14672+((cj3*x14671))+(((-1.0)*sj3*x14669*x14679))+((r20*x14667*x14670)));
evalcond[5]=((((-1.0)*r00*x14668*x14679))+((cj0*x14672))+((r00*x14675))+((r01*x14670))+(((-1.0)*cj1*cj2*x14676))+((r02*x14682))+((gconst16*r01*x14681)));
evalcond[6]=(((sj0*x14672))+((r12*x14682))+(((-1.0)*cj1*cj2*x14677))+((gconst16*r11*x14681))+((r11*x14670))+((sj3*x14673))+(((-1.0)*r10*x14668*x14679)));
evalcond[7]=((((-1.0)*x14676*x14678))+(((-1.0)*r02*x14685))+((r00*x14667*x14670))+(((-1.0)*x14674*x14676))+((r01*x14668))+(((-1.0)*r01*x14675*x14679))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14675*x14679))+(((-1.0)*x14674*x14677))+((cj3*x14673))+((r11*x14668))+((r10*x14667*x14670))+(((-1.0)*x14677*x14678))+(((-1.0)*r12*x14685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14686=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14686;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14686);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14687=((1.0)*cj5);
IkReal x14688=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14687)));
j4eval[0]=x14688;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14687))))));
j4eval[2]=IKsign(x14688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14689=cj5*cj5;
IkReal x14690=(cj3*r01);
IkReal x14691=(cj5*sj5);
IkReal x14692=((1.0)*cj3);
IkReal x14693=((((-1.0)*r02*r22*x14692))+((r21*x14689*x14690))+(((-1.0)*r21*x14690))+(((-1.0)*r00*r20*x14689*x14692))+((cj3*r00*r21*x14691))+((r20*x14690*x14691)));
j4eval[0]=x14693;
j4eval[1]=IKsign(x14693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14694=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14694;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14695=((1.0)*cj5);
IkReal x14696=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14695)));
j4eval[0]=x14696;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14695)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14697=cj5*cj5;
IkReal x14698=r01*r01;
IkReal x14699=(r01*sj5);
IkReal x14700=(cj5*r00);
IkReal x14701=(((x14697*x14698))+(((2.0)*x14699*x14700))+(((-1.0)*(r02*r02)))+(((-1.0)*x14697*(r00*r00)))+(((-1.0)*x14698)));
j4eval[0]=x14701;
j4eval[1]=IKsign(x14701);
j4eval[2]=((IKabs(r02))+(IKabs((x14700+(((-1.0)*x14699))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14702=cj5*cj5;
IkReal x14703=r01*r01;
IkReal x14704=(r01*sj5);
IkReal x14705=(cj5*r00);
CheckValue<IkReal> x14706 = IKatan2WithCheck(IkReal(((((-1.0)*x14704))+x14705)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14706.valid){
continue;
}
CheckValue<IkReal> x14707=IKPowWithIntegerCheck(IKsign(((((2.0)*x14704*x14705))+(((-1.0)*x14703))+(((-1.0)*(r02*r02)))+(((-1.0)*x14702*(r00*r00)))+((x14702*x14703)))),-1);
if(!x14707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14706.value)+(((1.5707963267949)*(x14707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14708=IKsin(j4);
IkReal x14709=IKcos(j4);
IkReal x14710=(cj5*r10);
IkReal x14711=(r01*sj5);
IkReal x14712=((1.0)*cj2);
IkReal x14713=(cj5*r00);
IkReal x14714=(cj5*r20);
IkReal x14715=((1.0)*x14709);
IkReal x14716=((1.0)*x14708);
IkReal x14717=(sj5*x14708);
evalcond[0]=(((r21*x14717))+(((-1.0)*r22*x14715))+(((-1.0)*x14714*x14716)));
evalcond[1]=(((r11*x14717))+(((-1.0)*x14710*x14716))+(((-1.0)*r12*x14715)));
evalcond[2]=((((-1.0)*r02*x14716))+((x14709*x14713))+(((-1.0)*x14711*x14715)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14715))+((x14708*x14711))+(((-1.0)*x14713*x14716)));
evalcond[4]=((((-1.0)*r22*x14716))+((sj1*sj2))+((x14709*x14714))+(((-1.0)*cj1*x14712))+(((-1.0)*r21*sj5*x14715)));
evalcond[5]=((((-1.0)*sj1*x14712))+(((-1.0)*r11*sj5*x14715))+(((-1.0)*cj1*sj2))+((x14709*x14710))+(((-1.0)*r12*x14716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14718=((1.0)*cj5);
CheckValue<IkReal> x14719 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14719.valid){
continue;
}
CheckValue<IkReal> x14720=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14718)))),-1);
if(!x14720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14719.value)+(((1.5707963267949)*(x14720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14721=IKsin(j4);
IkReal x14722=IKcos(j4);
IkReal x14723=(cj5*r10);
IkReal x14724=(r01*sj5);
IkReal x14725=((1.0)*cj2);
IkReal x14726=(cj5*r00);
IkReal x14727=(cj5*r20);
IkReal x14728=((1.0)*x14722);
IkReal x14729=((1.0)*x14721);
IkReal x14730=(sj5*x14721);
evalcond[0]=((((-1.0)*r22*x14728))+(((-1.0)*x14727*x14729))+((r21*x14730)));
evalcond[1]=((((-1.0)*r12*x14728))+(((-1.0)*x14723*x14729))+((r11*x14730)));
evalcond[2]=(((x14722*x14726))+(((-1.0)*r02*x14729))+(((-1.0)*x14724*x14728)));
evalcond[3]=((-1.0)+((x14721*x14724))+(((-1.0)*x14726*x14729))+(((-1.0)*r02*x14728)));
evalcond[4]=((((-1.0)*r21*sj5*x14728))+((x14722*x14727))+((sj1*sj2))+(((-1.0)*cj1*x14725))+(((-1.0)*r22*x14729)));
evalcond[5]=((((-1.0)*r12*x14729))+(((-1.0)*sj1*x14725))+((x14722*x14723))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14731=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14731.valid){
continue;
}
CheckValue<IkReal> x14732 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14731.value)))+(x14732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14733=IKsin(j4);
IkReal x14734=IKcos(j4);
IkReal x14735=(cj5*r10);
IkReal x14736=(r01*sj5);
IkReal x14737=((1.0)*cj2);
IkReal x14738=(cj5*r00);
IkReal x14739=(cj5*r20);
IkReal x14740=((1.0)*x14734);
IkReal x14741=((1.0)*x14733);
IkReal x14742=(sj5*x14733);
evalcond[0]=(((r21*x14742))+(((-1.0)*x14739*x14741))+(((-1.0)*r22*x14740)));
evalcond[1]=(((r11*x14742))+(((-1.0)*x14735*x14741))+(((-1.0)*r12*x14740)));
evalcond[2]=((((-1.0)*x14736*x14740))+(((-1.0)*r02*x14741))+((x14734*x14738)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14740))+(((-1.0)*x14738*x14741))+((x14733*x14736)));
evalcond[4]=(((x14734*x14739))+((sj1*sj2))+(((-1.0)*r22*x14741))+(((-1.0)*cj1*x14737))+(((-1.0)*r21*sj5*x14740)));
evalcond[5]=((((-1.0)*sj1*x14737))+(((-1.0)*r11*sj5*x14740))+((x14734*x14735))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14743=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14743;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14744=((1.0)*cj5);
IkReal x14745=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14744)));
j4eval[0]=x14745;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14744))))));
j4eval[2]=IKsign(x14745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14746=cj5*cj5;
IkReal x14747=r01*r01;
IkReal x14748=(cj5*r00);
IkReal x14749=(r01*sj5);
IkReal x14750=((((-1.0)*x14746*x14747))+(((-2.0)*x14748*x14749))+x14747+((x14746*(r00*r00)))+(r02*r02));
j4eval[0]=x14750;
j4eval[1]=IKsign(x14750);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14748))+x14749))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14751=cj5*cj5;
IkReal x14752=r01*r01;
IkReal x14753=(r01*sj5);
IkReal x14754=(cj5*r00);
CheckValue<IkReal> x14755 = IKatan2WithCheck(IkReal((x14753+(((-1.0)*x14754)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14755.valid){
continue;
}
CheckValue<IkReal> x14756=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14753*x14754))+((x14751*(r00*r00)))+(((-1.0)*x14751*x14752))+x14752+(r02*r02))),-1);
if(!x14756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14755.value)+(((1.5707963267949)*(x14756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14757=IKcos(j4);
IkReal x14758=IKsin(j4);
IkReal x14759=(cj5*r00);
IkReal x14760=(cj5*r10);
IkReal x14761=(r21*sj5);
IkReal x14762=((1.0)*cj2);
IkReal x14763=(cj5*r20);
IkReal x14764=((1.0)*x14757);
IkReal x14765=((1.0)*x14758);
IkReal x14766=(sj5*x14758);
IkReal x14767=(sj5*x14757);
evalcond[0]=(((r01*x14767))+(((-1.0)*x14759*x14764))+((r02*x14758)));
evalcond[1]=((((-1.0)*x14763*x14765))+((x14758*x14761))+(((-1.0)*r22*x14764)));
evalcond[2]=((((-1.0)*x14760*x14765))+(((-1.0)*r12*x14764))+((r11*x14766)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14764))+((r01*x14766))+(((-1.0)*x14759*x14765)));
evalcond[4]=((((-1.0)*x14763*x14764))+((sj1*sj2))+(((-1.0)*cj1*x14762))+((r22*x14758))+((x14757*x14761)));
evalcond[5]=((((-1.0)*x14760*x14764))+(((-1.0)*sj1*x14762))+(((-1.0)*cj1*sj2))+((r11*x14767))+((r12*x14758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14768=((1.0)*cj5);
CheckValue<IkReal> x14769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14768)))),-1);
if(!x14769.valid){
continue;
}
CheckValue<IkReal> x14770 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14769.value)))+(x14770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14771=IKcos(j4);
IkReal x14772=IKsin(j4);
IkReal x14773=(cj5*r00);
IkReal x14774=(cj5*r10);
IkReal x14775=(r21*sj5);
IkReal x14776=((1.0)*cj2);
IkReal x14777=(cj5*r20);
IkReal x14778=((1.0)*x14771);
IkReal x14779=((1.0)*x14772);
IkReal x14780=(sj5*x14772);
IkReal x14781=(sj5*x14771);
evalcond[0]=(((r01*x14781))+(((-1.0)*x14773*x14778))+((r02*x14772)));
evalcond[1]=((((-1.0)*r22*x14778))+(((-1.0)*x14777*x14779))+((x14772*x14775)));
evalcond[2]=(((r11*x14780))+(((-1.0)*x14774*x14779))+(((-1.0)*r12*x14778)));
evalcond[3]=((-1.0)+((r01*x14780))+(((-1.0)*x14773*x14779))+(((-1.0)*r02*x14778)));
evalcond[4]=(((r22*x14772))+((sj1*sj2))+((x14771*x14775))+(((-1.0)*x14777*x14778))+(((-1.0)*cj1*x14776)));
evalcond[5]=(((r12*x14772))+(((-1.0)*cj1*sj2))+((r11*x14781))+(((-1.0)*sj1*x14776))+(((-1.0)*x14774*x14778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14782=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14782.valid){
continue;
}
CheckValue<IkReal> x14783 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14782.value)))+(x14783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14784=IKcos(j4);
IkReal x14785=IKsin(j4);
IkReal x14786=(cj5*r00);
IkReal x14787=(cj5*r10);
IkReal x14788=(r21*sj5);
IkReal x14789=((1.0)*cj2);
IkReal x14790=(cj5*r20);
IkReal x14791=((1.0)*x14784);
IkReal x14792=((1.0)*x14785);
IkReal x14793=(sj5*x14785);
IkReal x14794=(sj5*x14784);
evalcond[0]=(((r01*x14794))+(((-1.0)*x14786*x14791))+((r02*x14785)));
evalcond[1]=(((x14785*x14788))+(((-1.0)*x14790*x14792))+(((-1.0)*r22*x14791)));
evalcond[2]=((((-1.0)*r12*x14791))+(((-1.0)*x14787*x14792))+((r11*x14793)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14791))+((r01*x14793))+(((-1.0)*x14786*x14792)));
evalcond[4]=((((-1.0)*x14790*x14791))+((sj1*sj2))+(((-1.0)*cj1*x14789))+((x14784*x14788))+((r22*x14785)));
evalcond[5]=((((-1.0)*sj1*x14789))+(((-1.0)*cj1*sj2))+(((-1.0)*x14787*x14791))+((r11*x14794))+((r12*x14785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14796 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14796)==0){
continue;
}
IkReal x14795=pow(x14796,-0.5);
CheckValue<IkReal> x14797 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14797.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14797.value));
IkReal gconst49=((-1.0)*r21*x14795);
IkReal gconst50=(r20*x14795);
CheckValue<IkReal> x14798 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14798.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14798.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14801 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14801.valid){
continue;
}
IkReal x14799=((-1.0)*(x14801.value));
IkReal x14800=x14795;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14799;
IkReal gconst48=x14799;
IkReal gconst49=((-1.0)*r21*x14800);
IkReal gconst50=(r20*x14800);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14804 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14804.valid){
continue;
}
IkReal x14802=((-1.0)*(x14804.value));
IkReal x14803=x14795;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14802;
IkReal gconst48=x14802;
IkReal gconst49=((-1.0)*r21*x14803);
IkReal gconst50=(r20*x14803);
CheckValue<IkReal> x14812=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14812.valid){
continue;
}
IkReal x14805=x14812.value;
IkReal x14806=(sj3*x14805);
IkReal x14807=(r11*x14806);
IkReal x14808=(r00*x14806);
IkReal x14809=(r01*x14806);
IkReal x14810=(r10*x14806);
IkReal x14811=(r20*r21*x14806);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x14809))+((r10*x14808*(r20*r20)))+((r01*x14807*(r21*r21)))+((r00*r20*r21*x14807))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14813=gconst49*gconst49;
IkReal x14814=gconst50*gconst50;
IkReal x14815=((1.0)*cj3);
IkReal x14816=(gconst50*r01);
IkReal x14817=(gconst49*r10);
IkReal x14818=(r12*sj3);
IkReal x14819=(gconst49*r00);
IkReal x14820=(r00*sj3);
IkReal x14821=(r11*x14813);
IkReal x14822=(r10*x14814);
CheckValue<IkReal> x14823=IKPowWithIntegerCheck(IKsign((((cj3*x14816*x14817))+(((-1.0)*r00*x14815*x14822))+((cj3*gconst50*r11*x14819))+(((-1.0)*r01*x14815*x14821))+(((-1.0)*r02*r12*x14815)))),-1);
if(!x14823.valid){
continue;
}
CheckValue<IkReal> x14824 = IKatan2WithCheck(IkReal((((x14818*x14819))+((x14816*x14818)))),IkReal((((x14820*x14821))+(((-1.0)*gconst50*x14817*x14820))+((gconst49*r11*sj3*x14816))+(((-1.0)*r01*sj3*x14822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14823.value)))+(x14824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14825=IKsin(j4);
IkReal x14826=IKcos(j4);
IkReal x14827=(sj1*sj2);
IkReal x14828=(gconst50*r20);
IkReal x14829=(gconst50*sj3);
IkReal x14830=(cj3*r01);
IkReal x14831=(gconst50*r10);
IkReal x14832=(gconst49*sj3);
IkReal x14833=((1.0)*cj2);
IkReal x14834=(cj1*sj2);
IkReal x14835=(cj3*r11);
IkReal x14836=(gconst50*r00);
IkReal x14837=(cj3*r21);
IkReal x14838=(cj3*gconst49);
IkReal x14839=(cj1*x14833);
IkReal x14840=((1.0)*x14826);
IkReal x14841=((1.0)*x14825);
IkReal x14842=(gconst49*x14825);
IkReal x14843=(gconst49*x14826);
IkReal x14844=(cj3*x14825);
evalcond[0]=((((-1.0)*r22*x14840))+((r21*x14842))+(((-1.0)*x14828*x14841)));
evalcond[1]=(((r11*x14842))+(((-1.0)*r12*x14840))+(((-1.0)*x14831*x14841)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14840))+(((-1.0)*x14836*x14841))+((r01*x14842)));
evalcond[3]=(((r02*x14844))+((x14830*x14843))+((r01*x14829))+(((-1.0)*cj3*x14836*x14840))+((r00*x14832)));
evalcond[4]=((((-1.0)*r01*x14832*x14840))+((gconst50*x14830))+(((-1.0)*r02*sj3*x14841))+((r00*x14826*x14829))+((r00*x14838)));
evalcond[5]=(((cj2*sj1))+((r21*x14829))+((x14837*x14843))+x14834+(((-1.0)*cj3*x14828*x14840))+((r20*x14832))+((r22*x14844)));
evalcond[6]=(x14827+((r12*x14844))+((r10*x14832))+(((-1.0)*x14839))+(((-1.0)*cj3*x14831*x14840))+((r11*x14829))+((x14835*x14843)));
evalcond[7]=(((gconst50*x14837))+((sj3*x14826*x14828))+x14827+((r20*x14838))+(((-1.0)*x14839))+(((-1.0)*r21*x14832*x14840))+(((-1.0)*r22*sj3*x14841)));
evalcond[8]=((((-1.0)*x14834))+((gconst50*x14835))+((r10*x14826*x14829))+(((-1.0)*sj1*x14833))+(((-1.0)*r11*x14832*x14840))+((r10*x14838))+(((-1.0)*r12*sj3*x14841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14845=gconst49*gconst49;
IkReal x14846=gconst50*gconst50;
IkReal x14847=(cj3*r12);
IkReal x14848=(gconst49*r00);
IkReal x14849=(r01*r11);
IkReal x14850=(r00*r11);
IkReal x14851=(cj3*gconst50);
IkReal x14852=((1.0)*r01*r10);
IkReal x14853=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14854 = IKatan2WithCheck(IkReal((((x14847*x14848))+((gconst50*r01*x14847)))),IkReal(((((-1.0)*r10*x14848*x14851))+((gconst49*x14849*x14851))+((cj3*x14845*x14850))+(((-1.0)*cj3*x14846*x14852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14854.valid){
continue;
}
CheckValue<IkReal> x14855=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst50*r11*sj3*x14848))+((r02*r12*sj3))+(((-1.0)*x14852*x14853))+((sj3*x14845*x14849))+((r00*r10*sj3*x14846)))),-1);
if(!x14855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14854.value)+(((1.5707963267949)*(x14855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14856=IKsin(j4);
IkReal x14857=IKcos(j4);
IkReal x14858=(sj1*sj2);
IkReal x14859=(gconst50*r20);
IkReal x14860=(gconst50*sj3);
IkReal x14861=(cj3*r01);
IkReal x14862=(gconst50*r10);
IkReal x14863=(gconst49*sj3);
IkReal x14864=((1.0)*cj2);
IkReal x14865=(cj1*sj2);
IkReal x14866=(cj3*r11);
IkReal x14867=(gconst50*r00);
IkReal x14868=(cj3*r21);
IkReal x14869=(cj3*gconst49);
IkReal x14870=(cj1*x14864);
IkReal x14871=((1.0)*x14857);
IkReal x14872=((1.0)*x14856);
IkReal x14873=(gconst49*x14856);
IkReal x14874=(gconst49*x14857);
IkReal x14875=(cj3*x14856);
evalcond[0]=((((-1.0)*r22*x14871))+((r21*x14873))+(((-1.0)*x14859*x14872)));
evalcond[1]=(((r11*x14873))+(((-1.0)*r12*x14871))+(((-1.0)*x14862*x14872)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14871))+(((-1.0)*x14867*x14872))+((r01*x14873)));
evalcond[3]=(((x14861*x14874))+((r01*x14860))+((r00*x14863))+((r02*x14875))+(((-1.0)*cj3*x14867*x14871)));
evalcond[4]=(((r00*x14857*x14860))+(((-1.0)*r01*x14863*x14871))+((gconst50*x14861))+((r00*x14869))+(((-1.0)*r02*sj3*x14872)));
evalcond[5]=((((-1.0)*cj3*x14859*x14871))+((x14868*x14874))+((cj2*sj1))+((r22*x14875))+((r20*x14863))+x14865+((r21*x14860)));
evalcond[6]=(((x14866*x14874))+((r12*x14875))+x14858+((r10*x14863))+(((-1.0)*x14870))+((r11*x14860))+(((-1.0)*cj3*x14862*x14871)));
evalcond[7]=(((r20*x14869))+(((-1.0)*r22*sj3*x14872))+x14858+(((-1.0)*r21*x14863*x14871))+((gconst50*x14868))+(((-1.0)*x14870))+((sj3*x14857*x14859)));
evalcond[8]=((((-1.0)*r12*sj3*x14872))+(((-1.0)*sj1*x14864))+(((-1.0)*r11*x14863*x14871))+((gconst50*x14866))+((r10*x14857*x14860))+((r10*x14869))+(((-1.0)*x14865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14876=((1.0)*gconst50);
CheckValue<IkReal> x14877 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14877.valid){
continue;
}
CheckValue<IkReal> x14878=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14876)))),-1);
if(!x14878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14877.value)+(((1.5707963267949)*(x14878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14879=IKsin(j4);
IkReal x14880=IKcos(j4);
IkReal x14881=(sj1*sj2);
IkReal x14882=(gconst50*r20);
IkReal x14883=(gconst50*sj3);
IkReal x14884=(cj3*r01);
IkReal x14885=(gconst50*r10);
IkReal x14886=(gconst49*sj3);
IkReal x14887=((1.0)*cj2);
IkReal x14888=(cj1*sj2);
IkReal x14889=(cj3*r11);
IkReal x14890=(gconst50*r00);
IkReal x14891=(cj3*r21);
IkReal x14892=(cj3*gconst49);
IkReal x14893=(cj1*x14887);
IkReal x14894=((1.0)*x14880);
IkReal x14895=((1.0)*x14879);
IkReal x14896=(gconst49*x14879);
IkReal x14897=(gconst49*x14880);
IkReal x14898=(cj3*x14879);
evalcond[0]=((((-1.0)*r22*x14894))+((r21*x14896))+(((-1.0)*x14882*x14895)));
evalcond[1]=(((r11*x14896))+(((-1.0)*x14885*x14895))+(((-1.0)*r12*x14894)));
evalcond[2]=((-1.0)+((r01*x14896))+(((-1.0)*x14890*x14895))+(((-1.0)*r02*x14894)));
evalcond[3]=(((r02*x14898))+(((-1.0)*cj3*x14890*x14894))+((x14884*x14897))+((r00*x14886))+((r01*x14883)));
evalcond[4]=(((r00*x14892))+((r00*x14880*x14883))+(((-1.0)*r01*x14886*x14894))+((gconst50*x14884))+(((-1.0)*r02*sj3*x14895)));
evalcond[5]=(((cj2*sj1))+((x14891*x14897))+x14888+(((-1.0)*cj3*x14882*x14894))+((r22*x14898))+((r21*x14883))+((r20*x14886)));
evalcond[6]=(((r11*x14883))+((r12*x14898))+((r10*x14886))+((x14889*x14897))+x14881+(((-1.0)*x14893))+(((-1.0)*cj3*x14885*x14894)));
evalcond[7]=(x14881+((gconst50*x14891))+(((-1.0)*r21*x14886*x14894))+((sj3*x14880*x14882))+(((-1.0)*x14893))+((r20*x14892))+(((-1.0)*r22*sj3*x14895)));
evalcond[8]=(((r10*x14892))+(((-1.0)*r12*sj3*x14895))+(((-1.0)*r11*x14886*x14894))+((gconst50*x14889))+((r10*x14880*x14883))+(((-1.0)*x14888))+(((-1.0)*sj1*x14887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14900 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14900)==0){
continue;
}
IkReal x14899=pow(x14900,-0.5);
CheckValue<IkReal> x14901 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14901.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14901.value))));
IkReal gconst52=((1.0)*r21*x14899);
IkReal gconst53=((-1.0)*r20*x14899);
CheckValue<IkReal> x14902 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14902.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14902.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14905 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14905.valid){
continue;
}
IkReal x14903=((1.0)*(x14905.value));
IkReal x14904=x14899;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14903)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14903)));
IkReal gconst52=((1.0)*r21*x14904);
IkReal gconst53=((-1.0)*r20*x14904);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14908 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14908.valid){
continue;
}
IkReal x14906=((1.0)*(x14908.value));
IkReal x14907=x14899;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14906)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14906)));
IkReal gconst52=((1.0)*r21*x14907);
IkReal gconst53=((-1.0)*r20*x14907);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14911 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14911.valid){
continue;
}
IkReal x14909=((1.0)*(x14911.value));
IkReal x14910=x14899;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14909)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14909)));
IkReal gconst52=((1.0)*r21*x14910);
IkReal gconst53=((-1.0)*r20*x14910);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14912=gconst52*gconst52;
IkReal x14913=gconst53*gconst53;
IkReal x14914=(gconst53*r01);
IkReal x14915=(cj3*r20);
IkReal x14916=(r22*sj3);
IkReal x14917=((1.0)*cj3);
IkReal x14918=(gconst52*sj3);
IkReal x14919=((1.0)*r00);
IkReal x14920=(gconst52*r00);
IkReal x14921=(r21*x14912);
CheckValue<IkReal> x14922=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14913*x14915*x14919))+((cj3*gconst53*r21*x14920))+(((-1.0)*r02*r22*x14917))+(((-1.0)*r01*x14917*x14921))+((gconst52*x14914*x14915)))),-1);
if(!x14922.valid){
continue;
}
CheckValue<IkReal> x14923 = IKatan2WithCheck(IkReal((((x14916*x14920))+((x14914*x14916)))),IkReal((((r00*sj3*x14921))+(((-1.0)*gconst53*r20*x14918*x14919))+((r21*x14914*x14918))+(((-1.0)*r01*r20*sj3*x14913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14922.value)))+(x14923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14924=IKsin(j4);
IkReal x14925=IKcos(j4);
IkReal x14926=(sj1*sj2);
IkReal x14927=((1.0)*cj1);
IkReal x14928=(cj3*gconst52);
IkReal x14929=(gconst53*sj3);
IkReal x14930=(cj3*gconst53);
IkReal x14931=(cj2*sj1);
IkReal x14932=(gconst52*sj3);
IkReal x14933=(cj2*x14927);
IkReal x14934=((1.0)*x14925);
IkReal x14935=((1.0)*x14924);
IkReal x14936=(gconst52*x14924);
IkReal x14937=(cj3*x14924);
evalcond[0]=(((r21*x14936))+(((-1.0)*r22*x14934))+(((-1.0)*gconst53*r20*x14935)));
evalcond[1]=((((-1.0)*r12*x14934))+((r11*x14936))+(((-1.0)*gconst53*r10*x14935)));
evalcond[2]=((-1.0)+((r01*x14936))+(((-1.0)*gconst53*r00*x14935))+(((-1.0)*r02*x14934)));
evalcond[3]=((((-1.0)*r00*x14930*x14934))+((r01*x14929))+((r00*x14932))+((r02*x14937))+((r01*x14925*x14928)));
evalcond[4]=((((-1.0)*r02*sj3*x14935))+((r00*x14925*x14929))+((r01*x14930))+((r00*x14928))+(((-1.0)*r01*x14932*x14934)));
evalcond[5]=((((-1.0)*r20*x14930*x14934))+x14931+((cj1*sj2))+((r21*x14929))+((r21*x14925*x14928))+((r22*x14937))+((r20*x14932)));
evalcond[6]=(x14926+(((-1.0)*r10*x14930*x14934))+((r10*x14932))+(((-1.0)*x14933))+((r11*x14929))+((r12*x14937))+((r11*x14925*x14928)));
evalcond[7]=(x14926+(((-1.0)*r22*sj3*x14935))+(((-1.0)*r21*x14932*x14934))+((r20*x14925*x14929))+((r21*x14930))+(((-1.0)*x14933))+((r20*x14928)));
evalcond[8]=((((-1.0)*x14931))+(((-1.0)*r12*sj3*x14935))+((r10*x14928))+((r10*x14925*x14929))+(((-1.0)*r11*x14932*x14934))+(((-1.0)*sj2*x14927))+((r11*x14930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14938=((1.0)*gconst53);
CheckValue<IkReal> x14939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14938))+(((-1.0)*gconst52*r10)))),-1);
if(!x14939.valid){
continue;
}
CheckValue<IkReal> x14940 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14939.value)))+(x14940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14941=IKsin(j4);
IkReal x14942=IKcos(j4);
IkReal x14943=(sj1*sj2);
IkReal x14944=((1.0)*cj1);
IkReal x14945=(cj3*gconst52);
IkReal x14946=(gconst53*sj3);
IkReal x14947=(cj3*gconst53);
IkReal x14948=(cj2*sj1);
IkReal x14949=(gconst52*sj3);
IkReal x14950=(cj2*x14944);
IkReal x14951=((1.0)*x14942);
IkReal x14952=((1.0)*x14941);
IkReal x14953=(gconst52*x14941);
IkReal x14954=(cj3*x14941);
evalcond[0]=((((-1.0)*gconst53*r20*x14952))+(((-1.0)*r22*x14951))+((r21*x14953)));
evalcond[1]=((((-1.0)*r12*x14951))+(((-1.0)*gconst53*r10*x14952))+((r11*x14953)));
evalcond[2]=((-1.0)+((r01*x14953))+(((-1.0)*r02*x14951))+(((-1.0)*gconst53*r00*x14952)));
evalcond[3]=(((r01*x14942*x14945))+((r00*x14949))+(((-1.0)*r00*x14947*x14951))+((r01*x14946))+((r02*x14954)));
evalcond[4]=(((r00*x14942*x14946))+(((-1.0)*r02*sj3*x14952))+(((-1.0)*r01*x14949*x14951))+((r00*x14945))+((r01*x14947)));
evalcond[5]=((((-1.0)*r20*x14947*x14951))+x14948+((cj1*sj2))+((r22*x14954))+((r21*x14942*x14945))+((r21*x14946))+((r20*x14949)));
evalcond[6]=(((r12*x14954))+((r11*x14942*x14945))+x14943+((r10*x14949))+(((-1.0)*r10*x14947*x14951))+(((-1.0)*x14950))+((r11*x14946)));
evalcond[7]=(((r20*x14942*x14946))+x14943+(((-1.0)*x14950))+(((-1.0)*r21*x14949*x14951))+(((-1.0)*r22*sj3*x14952))+((r21*x14947))+((r20*x14945)));
evalcond[8]=(((r10*x14945))+(((-1.0)*sj2*x14944))+(((-1.0)*r12*sj3*x14952))+(((-1.0)*x14948))+(((-1.0)*r11*x14949*x14951))+((r10*x14942*x14946))+((r11*x14947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14955 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14955.valid){
continue;
}
CheckValue<IkReal> x14956=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14955.value)+(((1.5707963267949)*(x14956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14957=IKsin(j4);
IkReal x14958=IKcos(j4);
IkReal x14959=(sj1*sj2);
IkReal x14960=((1.0)*cj1);
IkReal x14961=(cj3*gconst52);
IkReal x14962=(gconst53*sj3);
IkReal x14963=(cj3*gconst53);
IkReal x14964=(cj2*sj1);
IkReal x14965=(gconst52*sj3);
IkReal x14966=(cj2*x14960);
IkReal x14967=((1.0)*x14958);
IkReal x14968=((1.0)*x14957);
IkReal x14969=(gconst52*x14957);
IkReal x14970=(cj3*x14957);
evalcond[0]=((((-1.0)*r22*x14967))+((r21*x14969))+(((-1.0)*gconst53*r20*x14968)));
evalcond[1]=((((-1.0)*r12*x14967))+((r11*x14969))+(((-1.0)*gconst53*r10*x14968)));
evalcond[2]=((-1.0)+((r01*x14969))+(((-1.0)*r02*x14967))+(((-1.0)*gconst53*r00*x14968)));
evalcond[3]=(((r01*x14962))+((r02*x14970))+(((-1.0)*r00*x14963*x14967))+((r01*x14958*x14961))+((r00*x14965)));
evalcond[4]=(((r01*x14963))+((r00*x14958*x14962))+(((-1.0)*r02*sj3*x14968))+(((-1.0)*r01*x14965*x14967))+((r00*x14961)));
evalcond[5]=(((r21*x14958*x14961))+((r22*x14970))+x14964+((cj1*sj2))+(((-1.0)*r20*x14963*x14967))+((r20*x14965))+((r21*x14962)));
evalcond[6]=(x14959+((r12*x14970))+(((-1.0)*r10*x14963*x14967))+((r11*x14958*x14961))+((r11*x14962))+(((-1.0)*x14966))+((r10*x14965)));
evalcond[7]=((((-1.0)*r21*x14965*x14967))+x14959+(((-1.0)*r22*sj3*x14968))+(((-1.0)*x14966))+((r20*x14958*x14962))+((r20*x14961))+((r21*x14963)));
evalcond[8]=((((-1.0)*sj2*x14960))+(((-1.0)*x14964))+(((-1.0)*r11*x14965*x14967))+((r11*x14963))+((r10*x14958*x14962))+(((-1.0)*r12*sj3*x14968))+((r10*x14961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14971=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14971);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14971);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14972=(r01*sj5);
IkReal x14973=((1.0)*cj5*r00);
j4eval[0]=(x14972+(((-1.0)*x14973)));
j4eval[1]=(((cj3*x14972))+(((-1.0)*cj3*x14973)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14974=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14974);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14974);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14975=(cj5*r00);
IkReal x14976=(r01*sj5);
j4eval[0]=((((-1.0)*x14975))+x14976);
j4eval[1]=((((-1.0)*sj3*x14976))+((sj3*x14975)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14977=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14977);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14977);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14978=((1.0)*r00);
CheckValue<IkReal> x14979=IKPowWithIntegerCheck(cj3,-1);
if(!x14979.valid){
continue;
}
CheckValue<IkReal> x14980=IKPowWithIntegerCheck(r22,-1);
if(!x14980.valid){
continue;
}
CheckValue<IkReal> x14981=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14978))),-1);
if(!x14981.valid){
continue;
}
if( IKabs(((x14979.value)*(x14980.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14981.value)*(((((-1.0)*sj3*sj5*x14978))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14979.value)*(x14980.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14981.value)*(((((-1.0)*sj3*sj5*x14978))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14979.value)*(x14980.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14981.value)*(((((-1.0)*sj3*sj5*x14978))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14982=IKsin(j4);
IkReal x14983=IKcos(j4);
IkReal x14984=(sj1*sj2);
IkReal x14985=(cj5*sj3);
IkReal x14986=(r11*sj5);
IkReal x14987=(cj3*cj5);
IkReal x14988=((1.0)*cj1);
IkReal x14989=(cj3*sj5);
IkReal x14990=(sj3*sj5);
IkReal x14991=(cj2*sj1);
IkReal x14992=(r01*sj5);
IkReal x14993=((1.0)*sj3);
IkReal x14994=(cj2*x14988);
IkReal x14995=(r10*x14983);
IkReal x14996=(r22*x14982);
IkReal x14997=(cj3*x14983);
IkReal x14998=((1.0)*cj5*x14982);
evalcond[0]=((-1.0)*r22*x14983);
evalcond[1]=(x14991+((cj1*sj2))+((cj3*x14996)));
evalcond[2]=((((-1.0)*r10*x14998))+((x14982*x14986)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14998))+((x14982*x14992)));
evalcond[4]=((((-1.0)*x14994))+x14984+(((-1.0)*x14993*x14996)));
evalcond[5]=(((r01*x14985))+(((-1.0)*r00*x14983*x14987))+((r00*x14990))+((r01*x14983*x14989)));
evalcond[6]=(((r00*x14989))+((r01*x14987))+((r00*x14983*x14985))+(((-1.0)*r01*x14983*x14990)));
evalcond[7]=((((-1.0)*x14987*x14995))+(((-1.0)*x14994))+x14984+((x14986*x14997))+((r10*x14990))+((r11*x14985)));
evalcond[8]=((((-1.0)*x14983*x14986*x14993))+((x14985*x14995))+(((-1.0)*sj2*x14988))+((r10*x14989))+((r11*x14987))+(((-1.0)*x14991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14999=((1.0)*cj3);
IkReal x15000=(cj5*r00);
IkReal x15001=(r01*sj5);
CheckValue<IkReal> x15002=IKPowWithIntegerCheck(((((-1.0)*x15000))+x15001),-1);
if(!x15002.valid){
continue;
}
CheckValue<IkReal> x15003=IKPowWithIntegerCheck((((sj3*x15000))+(((-1.0)*sj3*x15001))),-1);
if(!x15003.valid){
continue;
}
if( IKabs(x15002.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15003.value)*(((((-1.0)*cj5*r01*x14999))+(((-1.0)*r00*sj5*x14999)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15002.value)+IKsqr(((x15003.value)*(((((-1.0)*cj5*r01*x14999))+(((-1.0)*r00*sj5*x14999))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15002.value, ((x15003.value)*(((((-1.0)*cj5*r01*x14999))+(((-1.0)*r00*sj5*x14999))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15004=IKsin(j4);
IkReal x15005=IKcos(j4);
IkReal x15006=(sj1*sj2);
IkReal x15007=(cj5*sj3);
IkReal x15008=(r11*sj5);
IkReal x15009=(cj3*cj5);
IkReal x15010=((1.0)*cj1);
IkReal x15011=(cj3*sj5);
IkReal x15012=(sj3*sj5);
IkReal x15013=(cj2*sj1);
IkReal x15014=(r01*sj5);
IkReal x15015=((1.0)*sj3);
IkReal x15016=(cj2*x15010);
IkReal x15017=(r10*x15005);
IkReal x15018=(r22*x15004);
IkReal x15019=(cj3*x15005);
IkReal x15020=((1.0)*cj5*x15004);
evalcond[0]=((-1.0)*r22*x15005);
evalcond[1]=(((cj3*x15018))+((cj1*sj2))+x15013);
evalcond[2]=((((-1.0)*r10*x15020))+((x15004*x15008)));
evalcond[3]=((-1.0)+((x15004*x15014))+(((-1.0)*r00*x15020)));
evalcond[4]=((((-1.0)*x15016))+x15006+(((-1.0)*x15015*x15018)));
evalcond[5]=(((r01*x15007))+((r00*x15012))+(((-1.0)*r00*x15005*x15009))+((r01*x15005*x15011)));
evalcond[6]=(((r01*x15009))+((r00*x15005*x15007))+(((-1.0)*r01*x15005*x15012))+((r00*x15011)));
evalcond[7]=((((-1.0)*x15016))+(((-1.0)*x15009*x15017))+((r10*x15012))+x15006+((r11*x15007))+((x15008*x15019)));
evalcond[8]=((((-1.0)*x15013))+((r10*x15011))+(((-1.0)*x15005*x15008*x15015))+((r11*x15009))+((x15007*x15017))+(((-1.0)*sj2*x15010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15021=((1.0)*sj3);
IkReal x15022=(r01*sj5);
IkReal x15023=((1.0)*cj5*r00);
CheckValue<IkReal> x15024=IKPowWithIntegerCheck((x15022+(((-1.0)*x15023))),-1);
if(!x15024.valid){
continue;
}
CheckValue<IkReal> x15025=IKPowWithIntegerCheck(((((-1.0)*cj3*x15023))+((cj3*x15022))),-1);
if(!x15025.valid){
continue;
}
if( IKabs(x15024.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15025.value)*(((((-1.0)*r00*sj5*x15021))+(((-1.0)*cj5*r01*x15021)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15024.value)+IKsqr(((x15025.value)*(((((-1.0)*r00*sj5*x15021))+(((-1.0)*cj5*r01*x15021))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15024.value, ((x15025.value)*(((((-1.0)*r00*sj5*x15021))+(((-1.0)*cj5*r01*x15021))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15026=IKsin(j4);
IkReal x15027=IKcos(j4);
IkReal x15028=(sj1*sj2);
IkReal x15029=(cj5*sj3);
IkReal x15030=(r11*sj5);
IkReal x15031=(cj3*cj5);
IkReal x15032=((1.0)*cj1);
IkReal x15033=(cj3*sj5);
IkReal x15034=(sj3*sj5);
IkReal x15035=(cj2*sj1);
IkReal x15036=(r01*sj5);
IkReal x15037=((1.0)*sj3);
IkReal x15038=(cj2*x15032);
IkReal x15039=(r10*x15027);
IkReal x15040=(r22*x15026);
IkReal x15041=(cj3*x15027);
IkReal x15042=((1.0)*cj5*x15026);
evalcond[0]=((-1.0)*r22*x15027);
evalcond[1]=(((cj3*x15040))+((cj1*sj2))+x15035);
evalcond[2]=(((x15026*x15030))+(((-1.0)*r10*x15042)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15042))+((x15026*x15036)));
evalcond[4]=((((-1.0)*x15038))+x15028+(((-1.0)*x15037*x15040)));
evalcond[5]=(((r00*x15034))+(((-1.0)*r00*x15027*x15031))+((r01*x15027*x15033))+((r01*x15029)));
evalcond[6]=((((-1.0)*r01*x15027*x15034))+((r00*x15027*x15029))+((r00*x15033))+((r01*x15031)));
evalcond[7]=((((-1.0)*x15038))+(((-1.0)*x15031*x15039))+x15028+((r10*x15034))+((r11*x15029))+((x15030*x15041)));
evalcond[8]=((((-1.0)*x15027*x15030*x15037))+(((-1.0)*sj2*x15032))+(((-1.0)*x15035))+((r10*x15033))+((r11*x15031))+((x15029*x15039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15043=cj5*cj5;
IkReal x15044=(cj3*r20);
IkReal x15045=(r21*sj3);
IkReal x15046=((1.0)*cj3);
IkReal x15047=(r01*r21);
IkReal x15048=(r01*sj3);
IkReal x15049=(r00*sj5);
IkReal x15050=(cj5*r01*sj5);
IkReal x15051=((1.0)*x15043);
CheckValue<IkReal> x15052 = IKatan2WithCheck(IkReal((((cj5*r22*x15048))+((r22*sj3*x15049)))),IkReal(((((-1.0)*r00*x15045*x15051))+((x15045*x15050))+(((-1.0)*r20*x15048*x15051))+((r00*x15045))+(((-1.0)*cj5*r20*sj3*x15049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15052.valid){
continue;
}
CheckValue<IkReal> x15053=IKPowWithIntegerCheck(IKsign((((cj3*x15043*x15047))+(((-1.0)*x15046*x15047))+((cj3*cj5*r21*x15049))+(((-1.0)*r02*r22*x15046))+((x15044*x15050))+(((-1.0)*r00*x15044*x15051)))),-1);
if(!x15053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15052.value)+(((1.5707963267949)*(x15053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15054=IKsin(j4);
IkReal x15055=IKcos(j4);
IkReal x15056=(sj1*sj2);
IkReal x15057=(r11*sj5);
IkReal x15058=(cj5*r10);
IkReal x15059=(cj5*r01);
IkReal x15060=(cj5*r00);
IkReal x15061=((1.0)*cj1);
IkReal x15062=(cj3*sj5);
IkReal x15063=(r21*sj5);
IkReal x15064=(cj5*sj3);
IkReal x15065=(sj3*sj5);
IkReal x15066=(cj2*sj1);
IkReal x15067=(r01*sj5);
IkReal x15068=(cj3*cj5);
IkReal x15069=(cj5*r20);
IkReal x15070=(cj2*x15061);
IkReal x15071=((1.0)*x15055);
IkReal x15072=((1.0)*x15054);
IkReal x15073=(cj3*x15055);
IkReal x15074=(sj3*x15055);
IkReal x15075=(cj3*x15054);
evalcond[0]=((((-1.0)*x15069*x15072))+(((-1.0)*r22*x15071))+((x15054*x15063)));
evalcond[1]=((((-1.0)*r12*x15071))+(((-1.0)*x15058*x15072))+((x15054*x15057)));
evalcond[2]=((-1.0)+((x15054*x15067))+(((-1.0)*r02*x15071))+(((-1.0)*x15060*x15072)));
evalcond[3]=(((r02*x15075))+((r00*x15065))+(((-1.0)*cj3*x15060*x15071))+((sj3*x15059))+((r01*x15055*x15062)));
evalcond[4]=(((x15060*x15074))+((r00*x15062))+((cj3*x15059))+(((-1.0)*r02*sj3*x15072))+(((-1.0)*r01*x15065*x15071)));
evalcond[5]=(((r21*x15064))+((r20*x15065))+((r22*x15075))+((cj1*sj2))+x15066+(((-1.0)*r20*x15068*x15071))+((r21*x15055*x15062)));
evalcond[6]=((((-1.0)*x15070))+((r12*x15075))+((x15057*x15073))+x15056+(((-1.0)*cj3*x15058*x15071))+((r11*x15064))+((r10*x15065)));
evalcond[7]=(((r20*x15055*x15064))+(((-1.0)*x15070))+((r21*x15068))+(((-1.0)*sj3*x15063*x15071))+(((-1.0)*r22*sj3*x15072))+((r20*x15062))+x15056);
evalcond[8]=((((-1.0)*sj2*x15061))+(((-1.0)*sj3*x15057*x15071))+(((-1.0)*r12*sj3*x15072))+((x15058*x15074))+(((-1.0)*x15066))+((r11*x15068))+((r10*x15062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15076=((1.0)*cj5);
CheckValue<IkReal> x15077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15076))+(((-1.0)*r10*sj5)))),-1);
if(!x15077.valid){
continue;
}
CheckValue<IkReal> x15078 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15076))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15077.value)))+(x15078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15079=IKsin(j4);
IkReal x15080=IKcos(j4);
IkReal x15081=(sj1*sj2);
IkReal x15082=(r11*sj5);
IkReal x15083=(cj5*r10);
IkReal x15084=(cj5*r01);
IkReal x15085=(cj5*r00);
IkReal x15086=((1.0)*cj1);
IkReal x15087=(cj3*sj5);
IkReal x15088=(r21*sj5);
IkReal x15089=(cj5*sj3);
IkReal x15090=(sj3*sj5);
IkReal x15091=(cj2*sj1);
IkReal x15092=(r01*sj5);
IkReal x15093=(cj3*cj5);
IkReal x15094=(cj5*r20);
IkReal x15095=(cj2*x15086);
IkReal x15096=((1.0)*x15080);
IkReal x15097=((1.0)*x15079);
IkReal x15098=(cj3*x15080);
IkReal x15099=(sj3*x15080);
IkReal x15100=(cj3*x15079);
evalcond[0]=((((-1.0)*r22*x15096))+((x15079*x15088))+(((-1.0)*x15094*x15097)));
evalcond[1]=(((x15079*x15082))+(((-1.0)*r12*x15096))+(((-1.0)*x15083*x15097)));
evalcond[2]=((-1.0)+((x15079*x15092))+(((-1.0)*r02*x15096))+(((-1.0)*x15085*x15097)));
evalcond[3]=(((r01*x15080*x15087))+((r00*x15090))+((sj3*x15084))+((r02*x15100))+(((-1.0)*cj3*x15085*x15096)));
evalcond[4]=((((-1.0)*r02*sj3*x15097))+((x15085*x15099))+((r00*x15087))+(((-1.0)*r01*x15090*x15096))+((cj3*x15084)));
evalcond[5]=(((r22*x15100))+((r20*x15090))+((cj1*sj2))+x15091+((r21*x15080*x15087))+((r21*x15089))+(((-1.0)*r20*x15093*x15096)));
evalcond[6]=(((r12*x15100))+x15081+((r10*x15090))+((r11*x15089))+(((-1.0)*x15095))+(((-1.0)*cj3*x15083*x15096))+((x15082*x15098)));
evalcond[7]=((((-1.0)*r22*sj3*x15097))+((r21*x15093))+x15081+((r20*x15080*x15089))+((r20*x15087))+(((-1.0)*sj3*x15088*x15096))+(((-1.0)*x15095)));
evalcond[8]=((((-1.0)*r12*sj3*x15097))+(((-1.0)*sj2*x15086))+(((-1.0)*x15091))+((r11*x15093))+((x15083*x15099))+(((-1.0)*sj3*x15082*x15096))+((r10*x15087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15101=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15101.valid){
continue;
}
CheckValue<IkReal> x15102 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15101.value)))+(x15102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15103=IKsin(j4);
IkReal x15104=IKcos(j4);
IkReal x15105=(sj1*sj2);
IkReal x15106=(r11*sj5);
IkReal x15107=(cj5*r10);
IkReal x15108=(cj5*r01);
IkReal x15109=(cj5*r00);
IkReal x15110=((1.0)*cj1);
IkReal x15111=(cj3*sj5);
IkReal x15112=(r21*sj5);
IkReal x15113=(cj5*sj3);
IkReal x15114=(sj3*sj5);
IkReal x15115=(cj2*sj1);
IkReal x15116=(r01*sj5);
IkReal x15117=(cj3*cj5);
IkReal x15118=(cj5*r20);
IkReal x15119=(cj2*x15110);
IkReal x15120=((1.0)*x15104);
IkReal x15121=((1.0)*x15103);
IkReal x15122=(cj3*x15104);
IkReal x15123=(sj3*x15104);
IkReal x15124=(cj3*x15103);
evalcond[0]=(((x15103*x15112))+(((-1.0)*r22*x15120))+(((-1.0)*x15118*x15121)));
evalcond[1]=(((x15103*x15106))+(((-1.0)*x15107*x15121))+(((-1.0)*r12*x15120)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15120))+((x15103*x15116))+(((-1.0)*x15109*x15121)));
evalcond[3]=(((r01*x15104*x15111))+((r00*x15114))+((r02*x15124))+(((-1.0)*cj3*x15109*x15120))+((sj3*x15108)));
evalcond[4]=((((-1.0)*r02*sj3*x15121))+((x15109*x15123))+(((-1.0)*r01*x15114*x15120))+((r00*x15111))+((cj3*x15108)));
evalcond[5]=(((r20*x15114))+((cj1*sj2))+((r22*x15124))+x15115+((r21*x15104*x15111))+(((-1.0)*r20*x15117*x15120))+((r21*x15113)));
evalcond[6]=(((r10*x15114))+(((-1.0)*cj3*x15107*x15120))+(((-1.0)*x15119))+((r11*x15113))+x15105+((r12*x15124))+((x15106*x15122)));
evalcond[7]=(((r20*x15111))+(((-1.0)*r22*sj3*x15121))+(((-1.0)*x15119))+x15105+(((-1.0)*sj3*x15112*x15120))+((r20*x15104*x15113))+((r21*x15117)));
evalcond[8]=((((-1.0)*sj2*x15110))+(((-1.0)*x15115))+((r10*x15111))+(((-1.0)*r12*sj3*x15121))+((r11*x15117))+(((-1.0)*sj3*x15106*x15120))+((x15107*x15123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15125=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15125;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15126=((1.0)*cj5);
IkReal x15127=((((-1.0)*r21*x15126))+(((-1.0)*r20*sj5)));
j4eval[0]=x15127;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15126))+((r11*sj5))))));
j4eval[2]=IKsign(x15127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15128=cj5*cj5;
IkReal x15129=(cj3*r01);
IkReal x15130=(cj5*sj5);
IkReal x15131=((1.0)*cj3);
IkReal x15132=((((-1.0)*r02*r22*x15131))+((r20*x15129*x15130))+((cj3*r00*r21*x15130))+((r21*x15128*x15129))+(((-1.0)*r21*x15129))+(((-1.0)*r00*r20*x15128*x15131)));
j4eval[0]=x15132;
j4eval[1]=IKsign(x15132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15133=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15133;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15134=((1.0)*cj5);
IkReal x15135=((((-1.0)*r21*x15134))+(((-1.0)*r20*sj5)));
j4eval[0]=x15135;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15134))+((r11*sj5))))));
j4eval[2]=IKsign(x15135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15136=cj5*cj5;
IkReal x15137=r01*r01;
IkReal x15138=(cj5*r00);
IkReal x15139=(r01*sj5);
IkReal x15140=(((x15136*(r00*r00)))+x15137+(((-2.0)*x15138*x15139))+(((-1.0)*x15136*x15137))+(r02*r02));
j4eval[0]=x15140;
j4eval[1]=((IKabs(r02))+(IKabs((x15138+(((-1.0)*x15139))))));
j4eval[2]=IKsign(x15140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15141=cj5*cj5;
IkReal x15142=r01*r01;
IkReal x15143=(r01*sj5);
IkReal x15144=(cj5*r00);
CheckValue<IkReal> x15145 = IKatan2WithCheck(IkReal(((((-1.0)*x15143))+x15144)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15145.valid){
continue;
}
CheckValue<IkReal> x15146=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15141*x15142))+((x15141*(r00*r00)))+x15142+(((-2.0)*x15143*x15144))+(r02*r02))),-1);
if(!x15146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15145.value)+(((1.5707963267949)*(x15146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15147=IKsin(j4);
IkReal x15148=IKcos(j4);
IkReal x15149=(cj5*r10);
IkReal x15150=(r01*sj5);
IkReal x15151=(cj5*r00);
IkReal x15152=(cj5*r20);
IkReal x15153=((1.0)*x15148);
IkReal x15154=((1.0)*x15147);
IkReal x15155=(sj5*x15147);
evalcond[0]=(((r21*x15155))+(((-1.0)*r22*x15153))+(((-1.0)*x15152*x15154)));
evalcond[1]=((((-1.0)*x15149*x15154))+(((-1.0)*r12*x15153))+((r11*x15155)));
evalcond[2]=((((-1.0)*r02*x15154))+((x15148*x15151))+(((-1.0)*x15150*x15153)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15153))+(((-1.0)*x15151*x15154))+((x15147*x15150)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15148*x15149))+(((-1.0)*r12*x15154))+(((-1.0)*r11*sj5*x15153)));
evalcond[5]=(((x15148*x15152))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15154))+(((-1.0)*r21*sj5*x15153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15156=((1.0)*cj5);
CheckValue<IkReal> x15157=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15156))+(((-1.0)*r20*sj5)))),-1);
if(!x15157.valid){
continue;
}
CheckValue<IkReal> x15158 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15156))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15157.value)))+(x15158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15159=IKsin(j4);
IkReal x15160=IKcos(j4);
IkReal x15161=(cj5*r10);
IkReal x15162=(r01*sj5);
IkReal x15163=(cj5*r00);
IkReal x15164=(cj5*r20);
IkReal x15165=((1.0)*x15160);
IkReal x15166=((1.0)*x15159);
IkReal x15167=(sj5*x15159);
evalcond[0]=(((r21*x15167))+(((-1.0)*r22*x15165))+(((-1.0)*x15164*x15166)));
evalcond[1]=(((r11*x15167))+(((-1.0)*x15161*x15166))+(((-1.0)*r12*x15165)));
evalcond[2]=((((-1.0)*x15162*x15165))+(((-1.0)*r02*x15166))+((x15160*x15163)));
evalcond[3]=((1.0)+(((-1.0)*x15163*x15166))+((x15159*x15162))+(((-1.0)*r02*x15165)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15165))+(((-1.0)*r12*x15166))+((x15160*x15161)));
evalcond[5]=((((-1.0)*r21*sj5*x15165))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15166))+((x15160*x15164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15168 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15168.valid){
continue;
}
CheckValue<IkReal> x15169=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15168.value)+(((1.5707963267949)*(x15169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15170=IKsin(j4);
IkReal x15171=IKcos(j4);
IkReal x15172=(cj5*r10);
IkReal x15173=(r01*sj5);
IkReal x15174=(cj5*r00);
IkReal x15175=(cj5*r20);
IkReal x15176=((1.0)*x15171);
IkReal x15177=((1.0)*x15170);
IkReal x15178=(sj5*x15170);
evalcond[0]=((((-1.0)*x15175*x15177))+((r21*x15178))+(((-1.0)*r22*x15176)));
evalcond[1]=(((r11*x15178))+(((-1.0)*r12*x15176))+(((-1.0)*x15172*x15177)));
evalcond[2]=((((-1.0)*x15173*x15176))+((x15171*x15174))+(((-1.0)*r02*x15177)));
evalcond[3]=((1.0)+((x15170*x15173))+(((-1.0)*x15174*x15177))+(((-1.0)*r02*x15176)));
evalcond[4]=(((cj2*sj1))+((x15171*x15172))+((cj1*sj2))+(((-1.0)*r11*sj5*x15176))+(((-1.0)*r12*x15177)));
evalcond[5]=(((x15171*x15175))+(((-1.0)*r21*sj5*x15176))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15179=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15179;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15179);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15180=((1.0)*cj5);
IkReal x15181=((((-1.0)*r21*x15180))+(((-1.0)*r20*sj5)));
j4eval[0]=x15181;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15180))))));
j4eval[2]=IKsign(x15181);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15182=cj5*cj5;
IkReal x15183=r01*r01;
IkReal x15184=(r01*sj5);
IkReal x15185=(cj5*r00);
IkReal x15186=((((-1.0)*x15183))+(((-1.0)*x15182*(r00*r00)))+(((2.0)*x15184*x15185))+(((-1.0)*(r02*r02)))+((x15182*x15183)));
j4eval[0]=x15186;
j4eval[1]=IKsign(x15186);
j4eval[2]=((IKabs(((((-1.0)*x15185))+x15184)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15187=cj5*cj5;
IkReal x15188=r01*r01;
IkReal x15189=(r01*sj5);
IkReal x15190=(cj5*r00);
CheckValue<IkReal> x15191=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15188))+(((-1.0)*x15187*(r00*r00)))+((x15187*x15188))+(((-1.0)*(r02*r02)))+(((2.0)*x15189*x15190)))),-1);
if(!x15191.valid){
continue;
}
CheckValue<IkReal> x15192 = IKatan2WithCheck(IkReal((x15189+(((-1.0)*x15190)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15191.value)))+(x15192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15193=IKcos(j4);
IkReal x15194=IKsin(j4);
IkReal x15195=(cj5*r00);
IkReal x15196=(cj5*r10);
IkReal x15197=(r21*sj5);
IkReal x15198=(cj5*r20);
IkReal x15199=((1.0)*x15193);
IkReal x15200=((1.0)*x15194);
IkReal x15201=(sj5*x15194);
IkReal x15202=(sj5*x15193);
evalcond[0]=((((-1.0)*x15195*x15199))+((r01*x15202))+((r02*x15194)));
evalcond[1]=((((-1.0)*x15198*x15200))+((x15194*x15197))+(((-1.0)*r22*x15199)));
evalcond[2]=((((-1.0)*r12*x15199))+((r11*x15201))+(((-1.0)*x15196*x15200)));
evalcond[3]=((1.0)+(((-1.0)*x15195*x15200))+(((-1.0)*r02*x15199))+((r01*x15201)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15196*x15199))+((r11*x15202))+((r12*x15194)));
evalcond[5]=(((x15193*x15197))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15194))+(((-1.0)*x15198*x15199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15203=((1.0)*cj5);
CheckValue<IkReal> x15204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15203))+(((-1.0)*r20*sj5)))),-1);
if(!x15204.valid){
continue;
}
CheckValue<IkReal> x15205 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15204.value)))+(x15205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15206=IKcos(j4);
IkReal x15207=IKsin(j4);
IkReal x15208=(cj5*r00);
IkReal x15209=(cj5*r10);
IkReal x15210=(r21*sj5);
IkReal x15211=(cj5*r20);
IkReal x15212=((1.0)*x15206);
IkReal x15213=((1.0)*x15207);
IkReal x15214=(sj5*x15207);
IkReal x15215=(sj5*x15206);
evalcond[0]=((((-1.0)*x15208*x15212))+((r01*x15215))+((r02*x15207)));
evalcond[1]=((((-1.0)*r22*x15212))+((x15207*x15210))+(((-1.0)*x15211*x15213)));
evalcond[2]=(((r11*x15214))+(((-1.0)*r12*x15212))+(((-1.0)*x15209*x15213)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15212))+(((-1.0)*x15208*x15213))+((r01*x15214)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15215))+((r12*x15207))+(((-1.0)*x15209*x15212)));
evalcond[5]=(((x15206*x15210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15207))+(((-1.0)*x15211*x15212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15216 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15216.valid){
continue;
}
CheckValue<IkReal> x15217=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15216.value)+(((1.5707963267949)*(x15217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15218=IKcos(j4);
IkReal x15219=IKsin(j4);
IkReal x15220=(cj5*r00);
IkReal x15221=(cj5*r10);
IkReal x15222=(r21*sj5);
IkReal x15223=(cj5*r20);
IkReal x15224=((1.0)*x15218);
IkReal x15225=((1.0)*x15219);
IkReal x15226=(sj5*x15219);
IkReal x15227=(sj5*x15218);
evalcond[0]=((((-1.0)*x15220*x15224))+((r02*x15219))+((r01*x15227)));
evalcond[1]=((((-1.0)*r22*x15224))+((x15219*x15222))+(((-1.0)*x15223*x15225)));
evalcond[2]=((((-1.0)*r12*x15224))+(((-1.0)*x15221*x15225))+((r11*x15226)));
evalcond[3]=((1.0)+(((-1.0)*x15220*x15225))+(((-1.0)*r02*x15224))+((r01*x15226)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15221*x15224))+((cj1*sj2))+((r12*x15219))+((r11*x15227)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15219))+((x15218*x15222))+(((-1.0)*x15223*x15224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15229 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15229)==0){
continue;
}
IkReal x15228=pow(x15229,-0.5);
CheckValue<IkReal> x15230 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15230.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15230.value));
IkReal gconst61=((-1.0)*r11*x15228);
IkReal gconst62=(r10*x15228);
CheckValue<IkReal> x15231 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15231.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15231.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15234 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15234.valid){
continue;
}
IkReal x15232=((-1.0)*(x15234.value));
IkReal x15233=x15228;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15232;
IkReal gconst60=x15232;
IkReal gconst61=((-1.0)*r11*x15233);
IkReal gconst62=(r10*x15233);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15237 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15237.valid){
continue;
}
IkReal x15235=((-1.0)*(x15237.value));
IkReal x15236=x15228;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15235;
IkReal gconst60=x15235;
IkReal gconst61=((-1.0)*r11*x15236);
IkReal gconst62=(r10*x15236);
CheckValue<IkReal> x15245=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15245.valid){
continue;
}
IkReal x15238=x15245.value;
IkReal x15239=(sj3*x15238);
IkReal x15240=(r20*x15239);
IkReal x15241=(r00*x15239);
IkReal x15242=(r01*x15239);
IkReal x15243=(r21*x15239);
IkReal x15244=(r10*r11*x15239);
j4eval[0]=IKsign((((r10*r11*r21*x15241))+((r00*x15240*(r10*r10)))+((r01*r10*r11*x15240))+((r21*x15242*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15246=gconst61*gconst61;
IkReal x15247=gconst62*gconst62;
IkReal x15248=(cj3*r01);
IkReal x15249=(r22*sj3);
IkReal x15250=(gconst61*r00);
IkReal x15251=((1.0)*cj3);
IkReal x15252=(gconst62*r01);
IkReal x15253=((1.0)*sj3);
IkReal x15254=(gconst61*gconst62*r20);
IkReal x15255=(r21*x15246);
IkReal x15256=(r20*x15247);
CheckValue<IkReal> x15257=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15248*x15255))+(((-1.0)*r00*x15251*x15256))+((cj3*gconst62*r21*x15250))+((x15248*x15254))+(((-1.0)*r02*r22*x15251)))),-1);
if(!x15257.valid){
continue;
}
CheckValue<IkReal> x15258 = IKatan2WithCheck(IkReal((((x15249*x15252))+((x15249*x15250)))),IkReal((((gconst61*r21*sj3*x15252))+(((-1.0)*r01*x15253*x15256))+((r00*sj3*x15255))+(((-1.0)*gconst62*r20*x15250*x15253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15257.value)))+(x15258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15259=IKsin(j4);
IkReal x15260=IKcos(j4);
IkReal x15261=(cj2*sj1);
IkReal x15262=(cj1*sj2);
IkReal x15263=(gconst61*sj3);
IkReal x15264=(cj3*gconst61);
IkReal x15265=(cj3*gconst62);
IkReal x15266=(sj1*sj2);
IkReal x15267=(gconst62*sj3);
IkReal x15268=(cj1*cj2);
IkReal x15269=((1.0)*x15260);
IkReal x15270=((1.0)*x15259);
IkReal x15271=(gconst61*x15259);
IkReal x15272=(cj3*x15259);
IkReal x15273=(x15261+x15262);
evalcond[0]=((((-1.0)*r22*x15269))+(((-1.0)*gconst62*r20*x15270))+((r21*x15271)));
evalcond[1]=(((r11*x15271))+(((-1.0)*gconst62*r10*x15270))+(((-1.0)*r12*x15269)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15270))+(((-1.0)*r02*x15269))+((r01*x15271)));
evalcond[3]=((((-1.0)*r00*x15265*x15269))+((r02*x15272))+((r01*x15267))+((r00*x15263))+((r01*x15260*x15264)));
evalcond[4]=((((-1.0)*r02*sj3*x15270))+((r01*x15265))+((r00*x15264))+(((-1.0)*r01*x15263*x15269))+((r00*x15260*x15267)));
evalcond[5]=(((r20*x15263))+((r22*x15272))+x15273+(((-1.0)*r20*x15265*x15269))+((r21*x15260*x15264))+((r21*x15267)));
evalcond[6]=(((r12*x15272))+(((-1.0)*r10*x15265*x15269))+x15268+((r10*x15263))+((r11*x15260*x15264))+(((-1.0)*x15266))+((r11*x15267)));
evalcond[7]=(((r10*x15260*x15267))+(((-1.0)*r11*x15263*x15269))+x15273+(((-1.0)*r12*sj3*x15270))+((r10*x15264))+((r11*x15265)));
evalcond[8]=(((r20*x15264))+x15266+(((-1.0)*r22*sj3*x15270))+(((-1.0)*r21*x15263*x15269))+((r20*x15260*x15267))+(((-1.0)*x15268))+((r21*x15265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15274=gconst61*gconst61;
IkReal x15275=gconst62*gconst62;
IkReal x15276=(cj3*r22);
IkReal x15277=(gconst62*r01);
IkReal x15278=(gconst61*r00);
IkReal x15279=((1.0)*r20);
IkReal x15280=(cj3*r21);
IkReal x15281=(r21*sj3);
CheckValue<IkReal> x15282=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15278*x15281))+((r00*r20*sj3*x15275))+((r01*x15274*x15281))+(((-1.0)*gconst61*sj3*x15277*x15279))+((r02*r22*sj3)))),-1);
if(!x15282.valid){
continue;
}
CheckValue<IkReal> x15283 = IKatan2WithCheck(IkReal((((x15276*x15278))+((x15276*x15277)))),IkReal(((((-1.0)*cj3*gconst62*x15278*x15279))+((r00*x15274*x15280))+((gconst61*x15277*x15280))+(((-1.0)*cj3*r01*x15275*x15279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15282.value)))+(x15283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15284=IKsin(j4);
IkReal x15285=IKcos(j4);
IkReal x15286=(cj2*sj1);
IkReal x15287=(cj1*sj2);
IkReal x15288=(gconst61*sj3);
IkReal x15289=(cj3*gconst61);
IkReal x15290=(cj3*gconst62);
IkReal x15291=(sj1*sj2);
IkReal x15292=(gconst62*sj3);
IkReal x15293=(cj1*cj2);
IkReal x15294=((1.0)*x15285);
IkReal x15295=((1.0)*x15284);
IkReal x15296=(gconst61*x15284);
IkReal x15297=(cj3*x15284);
IkReal x15298=(x15287+x15286);
evalcond[0]=((((-1.0)*r22*x15294))+((r21*x15296))+(((-1.0)*gconst62*r20*x15295)));
evalcond[1]=(((r11*x15296))+(((-1.0)*gconst62*r10*x15295))+(((-1.0)*r12*x15294)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15295))+((r01*x15296))+(((-1.0)*r02*x15294)));
evalcond[3]=(((r00*x15288))+(((-1.0)*r00*x15290*x15294))+((r01*x15292))+((r02*x15297))+((r01*x15285*x15289)));
evalcond[4]=(((r00*x15285*x15292))+((r00*x15289))+(((-1.0)*r01*x15288*x15294))+(((-1.0)*r02*sj3*x15295))+((r01*x15290)));
evalcond[5]=(x15298+((r21*x15292))+((r22*x15297))+((r20*x15288))+(((-1.0)*r20*x15290*x15294))+((r21*x15285*x15289)));
evalcond[6]=((((-1.0)*r10*x15290*x15294))+((r11*x15285*x15289))+(((-1.0)*x15291))+((r11*x15292))+x15293+((r12*x15297))+((r10*x15288)));
evalcond[7]=(((r10*x15285*x15292))+((r11*x15290))+x15298+((r10*x15289))+(((-1.0)*r11*x15288*x15294))+(((-1.0)*r12*sj3*x15295)));
evalcond[8]=((((-1.0)*r21*x15288*x15294))+(((-1.0)*x15293))+x15291+((r21*x15290))+(((-1.0)*r22*sj3*x15295))+((r20*x15289))+((r20*x15285*x15292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15299=((1.0)*gconst62);
CheckValue<IkReal> x15300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15299))+(((-1.0)*gconst61*r20)))),-1);
if(!x15300.valid){
continue;
}
CheckValue<IkReal> x15301 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x15299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15300.value)))+(x15301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15302=IKsin(j4);
IkReal x15303=IKcos(j4);
IkReal x15304=(cj2*sj1);
IkReal x15305=(cj1*sj2);
IkReal x15306=(gconst61*sj3);
IkReal x15307=(cj3*gconst61);
IkReal x15308=(cj3*gconst62);
IkReal x15309=(sj1*sj2);
IkReal x15310=(gconst62*sj3);
IkReal x15311=(cj1*cj2);
IkReal x15312=((1.0)*x15303);
IkReal x15313=((1.0)*x15302);
IkReal x15314=(gconst61*x15302);
IkReal x15315=(cj3*x15302);
IkReal x15316=(x15304+x15305);
evalcond[0]=((((-1.0)*gconst62*r20*x15313))+((r21*x15314))+(((-1.0)*r22*x15312)));
evalcond[1]=(((r11*x15314))+(((-1.0)*gconst62*r10*x15313))+(((-1.0)*r12*x15312)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15313))+((r01*x15314))+(((-1.0)*r02*x15312)));
evalcond[3]=(((r01*x15310))+((r00*x15306))+((r02*x15315))+(((-1.0)*r00*x15308*x15312))+((r01*x15303*x15307)));
evalcond[4]=((((-1.0)*r01*x15306*x15312))+((r00*x15303*x15310))+((r00*x15307))+((r01*x15308))+(((-1.0)*r02*sj3*x15313)));
evalcond[5]=((((-1.0)*r20*x15308*x15312))+((r20*x15306))+x15316+((r22*x15315))+((r21*x15310))+((r21*x15303*x15307)));
evalcond[6]=(((r11*x15310))+((r12*x15315))+(((-1.0)*x15309))+((r11*x15303*x15307))+(((-1.0)*r10*x15308*x15312))+x15311+((r10*x15306)));
evalcond[7]=(x15316+(((-1.0)*r12*sj3*x15313))+((r10*x15307))+(((-1.0)*r11*x15306*x15312))+((r10*x15303*x15310))+((r11*x15308)));
evalcond[8]=((((-1.0)*x15311))+((r20*x15307))+((r21*x15308))+x15309+(((-1.0)*r22*sj3*x15313))+((r20*x15303*x15310))+(((-1.0)*r21*x15306*x15312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15318 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15318)==0){
continue;
}
IkReal x15317=pow(x15318,-0.5);
CheckValue<IkReal> x15319 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15319.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15319.value))));
IkReal gconst64=((1.0)*r11*x15317);
IkReal gconst65=((-1.0)*r10*x15317);
CheckValue<IkReal> x15320 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15320.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15320.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15323 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15323.valid){
continue;
}
IkReal x15321=((1.0)*(x15323.value));
IkReal x15322=x15317;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15321)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15321)));
IkReal gconst64=((1.0)*r11*x15322);
IkReal gconst65=((-1.0)*r10*x15322);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15324=gconst64*gconst64;
IkReal x15325=gconst65*gconst65;
IkReal x15326=(gconst65*r01);
IkReal x15327=(cj3*r22);
IkReal x15328=(gconst64*r00);
IkReal x15329=(cj3*r21);
IkReal x15330=((1.0)*gconst64*sj3);
IkReal x15331=((1.0)*cj3*r20);
CheckValue<IkReal> x15332=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x15324))+(((-1.0)*r20*x15326*x15330))+(((-1.0)*gconst65*r21*sj3*x15328))+((r02*r22*sj3))+((r00*r20*sj3*x15325)))),-1);
if(!x15332.valid){
continue;
}
CheckValue<IkReal> x15333 = IKatan2WithCheck(IkReal((((x15327*x15328))+((x15326*x15327)))),IkReal(((((-1.0)*gconst65*x15328*x15331))+((gconst64*x15326*x15329))+(((-1.0)*r01*x15325*x15331))+((r00*x15324*x15329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15332.value)))+(x15333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15334=IKsin(j4);
IkReal x15335=IKcos(j4);
IkReal x15336=(cj2*sj1);
IkReal x15337=(cj1*sj2);
IkReal x15338=(cj3*gconst64);
IkReal x15339=(gconst65*r21);
IkReal x15340=(sj1*sj2);
IkReal x15341=(gconst65*sj3);
IkReal x15342=(gconst64*sj3);
IkReal x15343=(cj3*gconst65);
IkReal x15344=(cj1*cj2);
IkReal x15345=((1.0)*x15335);
IkReal x15346=((1.0)*x15334);
IkReal x15347=(cj3*x15334);
IkReal x15348=(gconst64*x15334);
IkReal x15349=(x15337+x15336);
evalcond[0]=(((r21*x15348))+(((-1.0)*r22*x15345))+(((-1.0)*gconst65*r20*x15346)));
evalcond[1]=((((-1.0)*r12*x15345))+((r11*x15348))+(((-1.0)*gconst65*r10*x15346)));
evalcond[2]=((1.0)+((r01*x15348))+(((-1.0)*gconst65*r00*x15346))+(((-1.0)*r02*x15345)));
evalcond[3]=(((r00*x15342))+((r01*x15341))+((r01*x15335*x15338))+((r02*x15347))+(((-1.0)*r00*x15343*x15345)));
evalcond[4]=(((r01*x15343))+((r00*x15338))+((r00*x15335*x15341))+(((-1.0)*r01*x15342*x15345))+(((-1.0)*r02*sj3*x15346)));
evalcond[5]=(((r22*x15347))+((sj3*x15339))+x15349+((r20*x15342))+(((-1.0)*r20*x15343*x15345))+((r21*x15335*x15338)));
evalcond[6]=((((-1.0)*r10*x15343*x15345))+((r11*x15341))+((r10*x15342))+x15344+((r12*x15347))+((r11*x15335*x15338))+(((-1.0)*x15340)));
evalcond[7]=(((r10*x15335*x15341))+(((-1.0)*r12*sj3*x15346))+((r11*x15343))+x15349+((r10*x15338))+(((-1.0)*r11*x15342*x15345)));
evalcond[8]=(((r20*x15338))+((cj3*x15339))+(((-1.0)*r22*sj3*x15346))+x15340+((r20*x15335*x15341))+(((-1.0)*r21*x15342*x15345))+(((-1.0)*x15344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15350=((1.0)*gconst65);
CheckValue<IkReal> x15351=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15350)))),-1);
if(!x15351.valid){
continue;
}
CheckValue<IkReal> x15352 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15350))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15351.value)))+(x15352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15353=IKsin(j4);
IkReal x15354=IKcos(j4);
IkReal x15355=(cj2*sj1);
IkReal x15356=(cj1*sj2);
IkReal x15357=(cj3*gconst64);
IkReal x15358=(gconst65*r21);
IkReal x15359=(sj1*sj2);
IkReal x15360=(gconst65*sj3);
IkReal x15361=(gconst64*sj3);
IkReal x15362=(cj3*gconst65);
IkReal x15363=(cj1*cj2);
IkReal x15364=((1.0)*x15354);
IkReal x15365=((1.0)*x15353);
IkReal x15366=(cj3*x15353);
IkReal x15367=(gconst64*x15353);
IkReal x15368=(x15355+x15356);
evalcond[0]=((((-1.0)*r22*x15364))+(((-1.0)*gconst65*r20*x15365))+((r21*x15367)));
evalcond[1]=((((-1.0)*r12*x15364))+((r11*x15367))+(((-1.0)*gconst65*r10*x15365)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15365))+(((-1.0)*r02*x15364))+((r01*x15367)));
evalcond[3]=(((r01*x15354*x15357))+(((-1.0)*r00*x15362*x15364))+((r02*x15366))+((r00*x15361))+((r01*x15360)));
evalcond[4]=((((-1.0)*r01*x15361*x15364))+((r00*x15354*x15360))+(((-1.0)*r02*sj3*x15365))+((r01*x15362))+((r00*x15357)));
evalcond[5]=(((r22*x15366))+((r21*x15354*x15357))+(((-1.0)*r20*x15362*x15364))+x15368+((r20*x15361))+((sj3*x15358)));
evalcond[6]=(((r10*x15361))+(((-1.0)*r10*x15362*x15364))+((r12*x15366))+x15363+((r11*x15360))+((r11*x15354*x15357))+(((-1.0)*x15359)));
evalcond[7]=((((-1.0)*r12*sj3*x15365))+((r10*x15357))+(((-1.0)*r11*x15361*x15364))+x15368+((r11*x15362))+((r10*x15354*x15360)));
evalcond[8]=((((-1.0)*r22*sj3*x15365))+((cj3*x15358))+x15359+(((-1.0)*r21*x15361*x15364))+((r20*x15357))+(((-1.0)*x15363))+((r20*x15354*x15360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15369=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15369);
rxp0_2=(py*r00);
rxp1_0=(r21*x15369);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15370=(r01*sj5);
IkReal x15371=((1.0)*cj5*r00);
j4eval[0]=(x15370+(((-1.0)*x15371)));
j4eval[1]=((((-1.0)*cj3*x15371))+((cj3*x15370)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15372=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15372);
rxp0_2=(py*r00);
rxp1_0=(r21*x15372);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15373=(cj5*r00);
IkReal x15374=(r01*sj5);
j4eval[0]=((((-1.0)*x15373))+x15374);
j4eval[1]=((((-1.0)*sj3*x15374))+((sj3*x15373)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15375=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15375);
rxp0_2=(py*r00);
rxp1_0=(r21*x15375);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15376=((1.0)*r00);
CheckValue<IkReal> x15377=IKPowWithIntegerCheck(cj3,-1);
if(!x15377.valid){
continue;
}
CheckValue<IkReal> x15378=IKPowWithIntegerCheck(r12,-1);
if(!x15378.valid){
continue;
}
CheckValue<IkReal> x15379=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15376))),-1);
if(!x15379.valid){
continue;
}
if( IKabs(((x15377.value)*(x15378.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15379.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15376)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15377.value)*(x15378.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15379.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15376))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15377.value)*(x15378.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15379.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15376))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15380=IKsin(j4);
IkReal x15381=IKcos(j4);
IkReal x15382=(cj2*sj1);
IkReal x15383=(cj1*sj2);
IkReal x15384=(sj1*sj2);
IkReal x15385=(cj5*sj3);
IkReal x15386=(cj3*cj5);
IkReal x15387=(r21*sj5);
IkReal x15388=(cj1*cj2);
IkReal x15389=(r00*sj5);
IkReal x15390=(r01*sj5);
IkReal x15391=(r20*sj5);
IkReal x15392=((1.0)*x15380);
IkReal x15393=(r20*x15381);
IkReal x15394=(r00*x15381);
IkReal x15395=(cj3*x15381);
IkReal x15396=(x15382+x15383);
IkReal x15397=((1.0)*sj3*x15381);
evalcond[0]=((-1.0)*r12*x15381);
evalcond[1]=((((-1.0)*cj5*r20*x15392))+((x15380*x15387)));
evalcond[2]=(x15388+(((-1.0)*x15384))+((cj3*r12*x15380)));
evalcond[3]=(x15396+(((-1.0)*r12*sj3*x15392)));
evalcond[4]=((1.0)+((x15380*x15390))+(((-1.0)*cj5*r00*x15392)));
evalcond[5]=(((r01*x15385))+(((-1.0)*x15386*x15394))+((x15390*x15395))+((sj3*x15389)));
evalcond[6]=(((r01*x15386))+((x15385*x15394))+((cj3*x15389))+(((-1.0)*x15390*x15397)));
evalcond[7]=(((r21*x15385))+(((-1.0)*x15386*x15393))+x15396+((sj3*x15391))+((x15387*x15395)));
evalcond[8]=((((-1.0)*x15387*x15397))+((r21*x15386))+((x15385*x15393))+((cj3*x15391))+x15384+(((-1.0)*x15388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15398=((1.0)*r01);
IkReal x15399=(cj5*r00);
CheckValue<IkReal> x15400=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15399))),-1);
if(!x15400.valid){
continue;
}
CheckValue<IkReal> x15401=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15398))+((sj3*x15399))),-1);
if(!x15401.valid){
continue;
}
if( IKabs(((-1.0)*(x15400.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15401.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15398)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15400.value)))+IKsqr(((x15401.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15398))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15400.value)), ((x15401.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15398))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15402=IKsin(j4);
IkReal x15403=IKcos(j4);
IkReal x15404=(cj2*sj1);
IkReal x15405=(cj1*sj2);
IkReal x15406=(sj1*sj2);
IkReal x15407=(cj5*sj3);
IkReal x15408=(cj3*cj5);
IkReal x15409=(r21*sj5);
IkReal x15410=(cj1*cj2);
IkReal x15411=(r00*sj5);
IkReal x15412=(r01*sj5);
IkReal x15413=(r20*sj5);
IkReal x15414=((1.0)*x15402);
IkReal x15415=(r20*x15403);
IkReal x15416=(r00*x15403);
IkReal x15417=(cj3*x15403);
IkReal x15418=(x15405+x15404);
IkReal x15419=((1.0)*sj3*x15403);
evalcond[0]=((-1.0)*r12*x15403);
evalcond[1]=(((x15402*x15409))+(((-1.0)*cj5*r20*x15414)));
evalcond[2]=((((-1.0)*x15406))+x15410+((cj3*r12*x15402)));
evalcond[3]=(x15418+(((-1.0)*r12*sj3*x15414)));
evalcond[4]=((1.0)+((x15402*x15412))+(((-1.0)*cj5*r00*x15414)));
evalcond[5]=((((-1.0)*x15408*x15416))+((r01*x15407))+((sj3*x15411))+((x15412*x15417)));
evalcond[6]=(((cj3*x15411))+((x15407*x15416))+((r01*x15408))+(((-1.0)*x15412*x15419)));
evalcond[7]=((((-1.0)*x15408*x15415))+((sj3*x15413))+((x15409*x15417))+x15418+((r21*x15407)));
evalcond[8]=(((cj3*x15413))+(((-1.0)*x15410))+((x15407*x15415))+(((-1.0)*x15409*x15419))+x15406+((r21*x15408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15420=((1.0)*r00);
IkReal x15421=(r01*sj5);
CheckValue<IkReal> x15422=IKPowWithIntegerCheck(((((-1.0)*cj5*x15420))+x15421),-1);
if(!x15422.valid){
continue;
}
CheckValue<IkReal> x15423=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15420))+((cj3*x15421))),-1);
if(!x15423.valid){
continue;
}
if( IKabs(((-1.0)*(x15422.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15423.value)*(((((-1.0)*sj3*sj5*x15420))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15422.value)))+IKsqr(((x15423.value)*(((((-1.0)*sj3*sj5*x15420))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15422.value)), ((x15423.value)*(((((-1.0)*sj3*sj5*x15420))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15424=IKsin(j4);
IkReal x15425=IKcos(j4);
IkReal x15426=(cj2*sj1);
IkReal x15427=(cj1*sj2);
IkReal x15428=(sj1*sj2);
IkReal x15429=(cj5*sj3);
IkReal x15430=(cj3*cj5);
IkReal x15431=(r21*sj5);
IkReal x15432=(cj1*cj2);
IkReal x15433=(r00*sj5);
IkReal x15434=(r01*sj5);
IkReal x15435=(r20*sj5);
IkReal x15436=((1.0)*x15424);
IkReal x15437=(r20*x15425);
IkReal x15438=(r00*x15425);
IkReal x15439=(cj3*x15425);
IkReal x15440=(x15427+x15426);
IkReal x15441=((1.0)*sj3*x15425);
evalcond[0]=((-1.0)*r12*x15425);
evalcond[1]=((((-1.0)*cj5*r20*x15436))+((x15424*x15431)));
evalcond[2]=(((cj3*r12*x15424))+(((-1.0)*x15428))+x15432);
evalcond[3]=((((-1.0)*r12*sj3*x15436))+x15440);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15436))+((x15424*x15434)));
evalcond[5]=(((x15434*x15439))+((sj3*x15433))+(((-1.0)*x15430*x15438))+((r01*x15429)));
evalcond[6]=(((cj3*x15433))+(((-1.0)*x15434*x15441))+((x15429*x15438))+((r01*x15430)));
evalcond[7]=(((sj3*x15435))+((r21*x15429))+(((-1.0)*x15430*x15437))+((x15431*x15439))+x15440);
evalcond[8]=(((r21*x15430))+(((-1.0)*x15431*x15441))+(((-1.0)*x15432))+((cj3*x15435))+x15428+((x15429*x15437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15442=cj5*cj5;
IkReal x15443=(cj3*r20);
IkReal x15444=(r21*sj3);
IkReal x15445=((1.0)*cj3);
IkReal x15446=(r01*r21);
IkReal x15447=(r01*sj3);
IkReal x15448=(r00*sj5);
IkReal x15449=(cj5*r01*sj5);
IkReal x15450=((1.0)*x15442);
CheckValue<IkReal> x15451=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15445*x15446))+(((-1.0)*r00*x15443*x15450))+((cj3*x15442*x15446))+((x15443*x15449))+((cj3*cj5*r21*x15448))+(((-1.0)*r02*r22*x15445)))),-1);
if(!x15451.valid){
continue;
}
CheckValue<IkReal> x15452 = IKatan2WithCheck(IkReal((((cj5*r22*x15447))+((r22*sj3*x15448)))),IkReal((((r00*x15444))+(((-1.0)*r00*x15444*x15450))+((x15444*x15449))+(((-1.0)*cj5*r20*sj3*x15448))+(((-1.0)*r20*x15447*x15450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15451.value)))+(x15452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15453=IKsin(j4);
IkReal x15454=IKcos(j4);
IkReal x15455=(cj2*sj1);
IkReal x15456=(cj1*sj2);
IkReal x15457=(r11*sj5);
IkReal x15458=(cj5*r10);
IkReal x15459=(sj1*sj2);
IkReal x15460=(cj5*r01);
IkReal x15461=(cj5*r00);
IkReal x15462=(cj3*sj5);
IkReal x15463=(r21*sj5);
IkReal x15464=(cj1*cj2);
IkReal x15465=(cj5*sj3);
IkReal x15466=(sj3*sj5);
IkReal x15467=(r01*sj5);
IkReal x15468=(cj3*cj5);
IkReal x15469=(cj5*r20);
IkReal x15470=((1.0)*x15454);
IkReal x15471=((1.0)*x15453);
IkReal x15472=(cj3*x15454);
IkReal x15473=(sj3*x15454);
IkReal x15474=(cj3*x15453);
IkReal x15475=(x15456+x15455);
evalcond[0]=(((x15453*x15463))+(((-1.0)*r22*x15470))+(((-1.0)*x15469*x15471)));
evalcond[1]=(((x15453*x15457))+(((-1.0)*x15458*x15471))+(((-1.0)*r12*x15470)));
evalcond[2]=((1.0)+((x15453*x15467))+(((-1.0)*x15461*x15471))+(((-1.0)*r02*x15470)));
evalcond[3]=(((r02*x15474))+(((-1.0)*cj3*x15461*x15470))+((r01*x15454*x15462))+((r00*x15466))+((sj3*x15460)));
evalcond[4]=(((x15461*x15473))+((r00*x15462))+((cj3*x15460))+(((-1.0)*r01*x15466*x15470))+(((-1.0)*r02*sj3*x15471)));
evalcond[5]=(((r22*x15474))+((r21*x15465))+(((-1.0)*r20*x15468*x15470))+x15475+((r20*x15466))+((r21*x15454*x15462)));
evalcond[6]=(((x15457*x15472))+(((-1.0)*cj3*x15458*x15470))+((r12*x15474))+x15464+((r11*x15465))+((r10*x15466))+(((-1.0)*x15459)));
evalcond[7]=((((-1.0)*r12*sj3*x15471))+((x15458*x15473))+(((-1.0)*sj3*x15457*x15470))+x15475+((r11*x15468))+((r10*x15462)));
evalcond[8]=((((-1.0)*x15464))+((r21*x15468))+(((-1.0)*sj3*x15463*x15470))+x15459+((r20*x15454*x15465))+((r20*x15462))+(((-1.0)*r22*sj3*x15471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15476=((1.0)*cj5);
CheckValue<IkReal> x15477 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15477.valid){
continue;
}
CheckValue<IkReal> x15478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15476))+(((-1.0)*r20*sj5)))),-1);
if(!x15478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15477.value)+(((1.5707963267949)*(x15478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15479=IKsin(j4);
IkReal x15480=IKcos(j4);
IkReal x15481=(cj2*sj1);
IkReal x15482=(cj1*sj2);
IkReal x15483=(r11*sj5);
IkReal x15484=(cj5*r10);
IkReal x15485=(sj1*sj2);
IkReal x15486=(cj5*r01);
IkReal x15487=(cj5*r00);
IkReal x15488=(cj3*sj5);
IkReal x15489=(r21*sj5);
IkReal x15490=(cj1*cj2);
IkReal x15491=(cj5*sj3);
IkReal x15492=(sj3*sj5);
IkReal x15493=(r01*sj5);
IkReal x15494=(cj3*cj5);
IkReal x15495=(cj5*r20);
IkReal x15496=((1.0)*x15480);
IkReal x15497=((1.0)*x15479);
IkReal x15498=(cj3*x15480);
IkReal x15499=(sj3*x15480);
IkReal x15500=(cj3*x15479);
IkReal x15501=(x15481+x15482);
evalcond[0]=(((x15479*x15489))+(((-1.0)*x15495*x15497))+(((-1.0)*r22*x15496)));
evalcond[1]=((((-1.0)*x15484*x15497))+(((-1.0)*r12*x15496))+((x15479*x15483)));
evalcond[2]=((1.0)+((x15479*x15493))+(((-1.0)*x15487*x15497))+(((-1.0)*r02*x15496)));
evalcond[3]=(((sj3*x15486))+((r00*x15492))+(((-1.0)*cj3*x15487*x15496))+((r02*x15500))+((r01*x15480*x15488)));
evalcond[4]=(((x15487*x15499))+(((-1.0)*r02*sj3*x15497))+((cj3*x15486))+(((-1.0)*r01*x15492*x15496))+((r00*x15488)));
evalcond[5]=(((r22*x15500))+((r20*x15492))+((r21*x15480*x15488))+x15501+((r21*x15491))+(((-1.0)*r20*x15494*x15496)));
evalcond[6]=(((r10*x15492))+((r11*x15491))+(((-1.0)*cj3*x15484*x15496))+((r12*x15500))+x15490+(((-1.0)*x15485))+((x15483*x15498)));
evalcond[7]=(((x15484*x15499))+((r10*x15488))+((r11*x15494))+(((-1.0)*r12*sj3*x15497))+(((-1.0)*sj3*x15483*x15496))+x15501);
evalcond[8]=(((r20*x15480*x15491))+(((-1.0)*sj3*x15489*x15496))+(((-1.0)*r22*sj3*x15497))+x15485+((r21*x15494))+((r20*x15488))+(((-1.0)*x15490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15502 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15502.valid){
continue;
}
CheckValue<IkReal> x15503=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15502.value)+(((1.5707963267949)*(x15503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15504=IKsin(j4);
IkReal x15505=IKcos(j4);
IkReal x15506=(cj2*sj1);
IkReal x15507=(cj1*sj2);
IkReal x15508=(r11*sj5);
IkReal x15509=(cj5*r10);
IkReal x15510=(sj1*sj2);
IkReal x15511=(cj5*r01);
IkReal x15512=(cj5*r00);
IkReal x15513=(cj3*sj5);
IkReal x15514=(r21*sj5);
IkReal x15515=(cj1*cj2);
IkReal x15516=(cj5*sj3);
IkReal x15517=(sj3*sj5);
IkReal x15518=(r01*sj5);
IkReal x15519=(cj3*cj5);
IkReal x15520=(cj5*r20);
IkReal x15521=((1.0)*x15505);
IkReal x15522=((1.0)*x15504);
IkReal x15523=(cj3*x15505);
IkReal x15524=(sj3*x15505);
IkReal x15525=(cj3*x15504);
IkReal x15526=(x15506+x15507);
evalcond[0]=((((-1.0)*x15520*x15522))+((x15504*x15514))+(((-1.0)*r22*x15521)));
evalcond[1]=((((-1.0)*r12*x15521))+((x15504*x15508))+(((-1.0)*x15509*x15522)));
evalcond[2]=((1.0)+((x15504*x15518))+(((-1.0)*x15512*x15522))+(((-1.0)*r02*x15521)));
evalcond[3]=((((-1.0)*cj3*x15512*x15521))+((r02*x15525))+((r01*x15505*x15513))+((sj3*x15511))+((r00*x15517)));
evalcond[4]=(((x15512*x15524))+((cj3*x15511))+(((-1.0)*r01*x15517*x15521))+(((-1.0)*r02*sj3*x15522))+((r00*x15513)));
evalcond[5]=((((-1.0)*r20*x15519*x15521))+((r21*x15516))+((r20*x15517))+x15526+((r21*x15505*x15513))+((r22*x15525)));
evalcond[6]=(((x15508*x15523))+((r11*x15516))+((r10*x15517))+(((-1.0)*cj3*x15509*x15521))+((r12*x15525))+x15515+(((-1.0)*x15510)));
evalcond[7]=((((-1.0)*sj3*x15508*x15521))+((x15509*x15524))+(((-1.0)*r12*sj3*x15522))+((r11*x15519))+((r10*x15513))+x15526);
evalcond[8]=((((-1.0)*sj3*x15514*x15521))+((r21*x15519))+((r20*x15513))+((r20*x15505*x15516))+(((-1.0)*r22*sj3*x15522))+x15510+(((-1.0)*x15515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15527=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15527);
rxp1_1=(px*r21);
rxp1_2=(r11*x15527);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15528=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15528);
rxp1_1=(px*r21);
rxp1_2=(r11*x15528);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15529=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15529)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15529)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15530=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15530);
rxp1_1=(px*r21);
rxp1_2=(r11*x15530);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15531=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15531);
rxp1_1=(px*r21);
rxp1_2=(r11*x15531);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15532=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15532);
rxp1_1=(px*r21);
rxp1_2=(r11*x15532);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15533=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15533);
rxp1_1=(px*r21);
rxp1_2=(r11*x15533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15536=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15536.valid){
continue;
}
IkReal x15534=x15536.value;
IkReal x15535=(sj0*x15534);
cj4array[0]=(((cj1*sj2*x15535))+((cj2*sj1*x15535)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15537=IKsin(j4);
IkReal x15538=IKcos(j4);
IkReal x15539=(cj5*r20);
IkReal x15540=(r21*sj5);
IkReal x15541=((1.0)*x15537);
IkReal x15542=((1.0)*x15538);
evalcond[0]=((-1.0)*r02*x15537);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15542)));
evalcond[2]=(((x15537*x15540))+(((-1.0)*x15539*x15541)));
evalcond[3]=((((-1.0)*cj5*r10*x15541))+((r11*sj5*x15537)));
evalcond[4]=((((-1.0)*x15540*x15542))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15538*x15539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15544=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15544.valid){
continue;
}
IkReal x15543=x15544.value;
cj4array[0]=(((cj1*cj2*x15543))+(((-1.0)*sj1*sj2*x15543)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15545=IKsin(j4);
IkReal x15546=IKcos(j4);
IkReal x15547=(r11*sj5);
IkReal x15548=((1.0)*sj0);
IkReal x15549=((1.0)*x15546);
IkReal x15550=((1.0)*cj5*x15545);
evalcond[0]=((-1.0)*r02*x15545);
evalcond[1]=((((-1.0)*x15548))+(((-1.0)*r02*x15549)));
evalcond[2]=(((r21*sj5*x15545))+(((-1.0)*r20*x15550)));
evalcond[3]=(((x15545*x15547))+(((-1.0)*r10*x15550)));
evalcond[4]=((((-1.0)*cj1*sj2*x15548))+((cj5*r10*x15546))+(((-1.0)*cj2*sj1*x15548))+(((-1.0)*x15547*x15549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15551=IKPowWithIntegerCheck(r02,-1);
if(!x15551.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15551.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15552=IKsin(j4);
IkReal x15553=IKcos(j4);
IkReal x15554=((1.0)*sj0);
IkReal x15555=(cj5*x15553);
IkReal x15556=(sj5*x15552);
IkReal x15557=((1.0)*sj5*x15553);
IkReal x15558=((1.0)*cj5*x15552);
evalcond[0]=((-1.0)*r02*x15552);
evalcond[1]=(((r21*x15556))+(((-1.0)*r20*x15558)));
evalcond[2]=(((r11*x15556))+(((-1.0)*r10*x15558)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15555))+(((-1.0)*r21*x15557)));
evalcond[4]=((((-1.0)*r11*x15557))+(((-1.0)*cj1*sj2*x15554))+((r10*x15555))+(((-1.0)*cj2*sj1*x15554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15559=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15559);
rxp1_1=(px*r21);
rxp1_2=(r11*x15559);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15560=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15560);
rxp1_1=(px*r21);
rxp1_2=(r11*x15560);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15561=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15561);
rxp1_1=(px*r21);
rxp1_2=(r11*x15561);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15564=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15564.valid){
continue;
}
IkReal x15562=x15564.value;
IkReal x15563=(sj0*x15562);
cj4array[0]=(((cj2*sj1*x15563))+((cj1*sj2*x15563)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15565=IKsin(j4);
IkReal x15566=IKcos(j4);
IkReal x15567=(r21*sj5);
IkReal x15568=((1.0)*cj5*r20);
evalcond[0]=(r02*x15565);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15566)));
evalcond[2]=((((-1.0)*x15565*x15568))+((x15565*x15567)));
evalcond[3]=(((r11*sj5*x15565))+(((-1.0)*cj5*r10*x15565)));
evalcond[4]=((((-1.0)*x15566*x15568))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15566*x15567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15570=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15570.valid){
continue;
}
IkReal x15569=x15570.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15569))+((cj1*cj2*x15569)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15571=IKsin(j4);
IkReal x15572=IKcos(j4);
IkReal x15573=((1.0)*sj0);
IkReal x15574=((1.0)*cj5);
IkReal x15575=(sj5*x15571);
evalcond[0]=(r02*x15571);
evalcond[1]=((((-1.0)*r02*x15572))+(((-1.0)*x15573)));
evalcond[2]=(((r21*x15575))+(((-1.0)*r20*x15571*x15574)));
evalcond[3]=((((-1.0)*r10*x15571*x15574))+((r11*x15575)));
evalcond[4]=(((r11*sj5*x15572))+(((-1.0)*cj1*sj2*x15573))+(((-1.0)*cj2*sj1*x15573))+(((-1.0)*r10*x15572*x15574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15576=IKPowWithIntegerCheck(r02,-1);
if(!x15576.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15576.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15577=IKsin(j4);
IkReal x15578=IKcos(j4);
IkReal x15579=((1.0)*cj1);
IkReal x15580=(r21*sj5);
IkReal x15581=((1.0)*cj5);
IkReal x15582=(r11*sj5);
evalcond[0]=(r02*x15577);
evalcond[1]=(((x15577*x15580))+(((-1.0)*r20*x15577*x15581)));
evalcond[2]=((((-1.0)*r10*x15577*x15581))+((x15577*x15582)));
evalcond[3]=((((-1.0)*cj2*x15579))+((sj1*sj2))+((x15578*x15580))+(((-1.0)*r20*x15578*x15581)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x15578*x15582))+(((-1.0)*r10*x15578*x15581))+(((-1.0)*sj0*sj2*x15579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15583 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15583.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15583.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15584 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15584.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15585=((-1.0)*r10);
CheckValue<IkReal> x15587 = IKatan2WithCheck(IkReal(x15585),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15587.valid){
continue;
}
IkReal x15586=((-1.0)*(x15587.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15585);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15586;
IkReal gconst66=x15586;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15588=((-1.0)*r10);
CheckValue<IkReal> x15590 = IKatan2WithCheck(IkReal(x15588),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15590.valid){
continue;
}
IkReal x15589=((-1.0)*(x15590.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15588);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15589;
IkReal gconst66=x15589;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15591=((-1.0)*r10);
CheckValue<IkReal> x15593 = IKatan2WithCheck(IkReal(x15591),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15593.valid){
continue;
}
IkReal x15592=((-1.0)*(x15593.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15591);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15592;
IkReal gconst66=x15592;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15594=((1.0)*gconst67);
IkReal x15595=(cj1*cj2);
IkReal x15596=((1.0)*sj1*sj2);
CheckValue<IkReal> x15597=IKPowWithIntegerCheck(cj3,-1);
if(!x15597.valid){
continue;
}
CheckValue<IkReal> x15598=IKPowWithIntegerCheck(r02,-1);
if(!x15598.valid){
continue;
}
CheckValue<IkReal> x15599=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15594))+((gconst68*r20*sj3))),-1);
if(!x15599.valid){
continue;
}
if( IKabs(((x15597.value)*(x15598.value)*((((cj0*x15595))+(((-1.0)*cj0*x15596)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15599.value)*(((((-1.0)*cj3*r20*x15594))+(((-1.0)*x15596))+x15595+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15597.value)*(x15598.value)*((((cj0*x15595))+(((-1.0)*cj0*x15596))))))+IKsqr(((x15599.value)*(((((-1.0)*cj3*r20*x15594))+(((-1.0)*x15596))+x15595+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15597.value)*(x15598.value)*((((cj0*x15595))+(((-1.0)*cj0*x15596))))), ((x15599.value)*(((((-1.0)*cj3*r20*x15594))+(((-1.0)*x15596))+x15595+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15600=IKsin(j4);
IkReal x15601=IKcos(j4);
IkReal x15602=(sj1*sj2);
IkReal x15603=(gconst68*sj3);
IkReal x15604=(gconst67*r11);
IkReal x15605=(gconst67*sj3);
IkReal x15606=((1.0)*gconst68);
IkReal x15607=(cj2*sj1);
IkReal x15608=((1.0)*cj0);
IkReal x15609=((1.0)*sj0);
IkReal x15610=(cj3*gconst67);
IkReal x15611=(cj3*gconst68);
IkReal x15612=(cj1*sj2);
IkReal x15613=(gconst67*r21);
IkReal x15614=((1.0)*cj1*cj2);
IkReal x15615=(cj3*x15601);
IkReal x15616=((1.0)*x15601);
IkReal x15617=(r02*x15600);
evalcond[0]=((((-1.0)*x15609))+(((-1.0)*r02*x15616)));
evalcond[1]=(((x15600*x15613))+(((-1.0)*r20*x15600*x15606)));
evalcond[2]=((((-1.0)*r10*x15600*x15606))+cj0+((x15600*x15604)));
evalcond[3]=(((cj0*x15602))+((cj3*x15617))+(((-1.0)*cj1*cj2*x15608)));
evalcond[4]=((((-1.0)*x15607*x15608))+(((-1.0)*sj3*x15617))+(((-1.0)*x15608*x15612)));
evalcond[5]=(x15607+x15612+((r20*x15605))+(((-1.0)*r20*x15606*x15615))+((r21*x15603))+((r21*x15601*x15610)));
evalcond[6]=(((r21*x15611))+(((-1.0)*x15614))+x15602+(((-1.0)*r21*x15605*x15616))+((r20*x15610))+((r20*x15601*x15603)));
evalcond[7]=((((-1.0)*cj1*cj2*x15609))+(((-1.0)*r10*x15606*x15615))+((r10*x15605))+((r11*x15603))+((sj0*x15602))+((x15604*x15615)));
evalcond[8]=((((-1.0)*x15609*x15612))+(((-1.0)*x15607*x15609))+(((-1.0)*sj3*x15604*x15616))+((r11*x15611))+((r10*x15610))+((r10*x15601*x15603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15620=IKPowWithIntegerCheck(r02,-1);
if(!x15620.valid){
continue;
}
IkReal x15618=x15620.value;
IkReal x15619=((1.0)*cj0);
CheckValue<IkReal> x15621=IKPowWithIntegerCheck(sj3,-1);
if(!x15621.valid){
continue;
}
if( IKabs((x15618*(x15621.value)*(((((-1.0)*cj1*sj2*x15619))+(((-1.0)*cj2*sj1*x15619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15618)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15618*(x15621.value)*(((((-1.0)*cj1*sj2*x15619))+(((-1.0)*cj2*sj1*x15619))))))+IKsqr(((-1.0)*sj0*x15618))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15618*(x15621.value)*(((((-1.0)*cj1*sj2*x15619))+(((-1.0)*cj2*sj1*x15619))))), ((-1.0)*sj0*x15618));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15622=IKsin(j4);
IkReal x15623=IKcos(j4);
IkReal x15624=(sj1*sj2);
IkReal x15625=(gconst68*sj3);
IkReal x15626=(gconst67*r11);
IkReal x15627=(gconst67*sj3);
IkReal x15628=((1.0)*gconst68);
IkReal x15629=(cj2*sj1);
IkReal x15630=((1.0)*cj0);
IkReal x15631=((1.0)*sj0);
IkReal x15632=(cj3*gconst67);
IkReal x15633=(cj3*gconst68);
IkReal x15634=(cj1*sj2);
IkReal x15635=(gconst67*r21);
IkReal x15636=((1.0)*cj1*cj2);
IkReal x15637=(cj3*x15623);
IkReal x15638=((1.0)*x15623);
IkReal x15639=(r02*x15622);
evalcond[0]=((((-1.0)*r02*x15638))+(((-1.0)*x15631)));
evalcond[1]=((((-1.0)*r20*x15622*x15628))+((x15622*x15635)));
evalcond[2]=(cj0+(((-1.0)*r10*x15622*x15628))+((x15622*x15626)));
evalcond[3]=((((-1.0)*cj1*cj2*x15630))+((cj3*x15639))+((cj0*x15624)));
evalcond[4]=((((-1.0)*x15630*x15634))+(((-1.0)*sj3*x15639))+(((-1.0)*x15629*x15630)));
evalcond[5]=(((r21*x15625))+((r21*x15623*x15632))+x15629+x15634+((r20*x15627))+(((-1.0)*r20*x15628*x15637)));
evalcond[6]=((((-1.0)*r21*x15627*x15638))+((r20*x15632))+x15624+((r21*x15633))+((r20*x15623*x15625))+(((-1.0)*x15636)));
evalcond[7]=((((-1.0)*cj1*cj2*x15631))+((sj0*x15624))+((x15626*x15637))+(((-1.0)*r10*x15628*x15637))+((r11*x15625))+((r10*x15627)));
evalcond[8]=(((r10*x15623*x15625))+(((-1.0)*x15631*x15634))+(((-1.0)*sj3*x15626*x15638))+(((-1.0)*x15629*x15631))+((r11*x15633))+((r10*x15632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15641=IKPowWithIntegerCheck(r02,-1);
if(!x15641.valid){
continue;
}
IkReal x15640=x15641.value;
CheckValue<IkReal> x15642=IKPowWithIntegerCheck(cj3,-1);
if(!x15642.valid){
continue;
}
if( IKabs((x15640*(x15642.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15640)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15640*(x15642.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15640))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15640*(x15642.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15640));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15643=IKsin(j4);
IkReal x15644=IKcos(j4);
IkReal x15645=(sj1*sj2);
IkReal x15646=(gconst68*sj3);
IkReal x15647=(gconst67*r11);
IkReal x15648=(gconst67*sj3);
IkReal x15649=((1.0)*gconst68);
IkReal x15650=(cj2*sj1);
IkReal x15651=((1.0)*cj0);
IkReal x15652=((1.0)*sj0);
IkReal x15653=(cj3*gconst67);
IkReal x15654=(cj3*gconst68);
IkReal x15655=(cj1*sj2);
IkReal x15656=(gconst67*r21);
IkReal x15657=((1.0)*cj1*cj2);
IkReal x15658=(cj3*x15644);
IkReal x15659=((1.0)*x15644);
IkReal x15660=(r02*x15643);
evalcond[0]=((((-1.0)*x15652))+(((-1.0)*r02*x15659)));
evalcond[1]=((((-1.0)*r20*x15643*x15649))+((x15643*x15656)));
evalcond[2]=((((-1.0)*r10*x15643*x15649))+cj0+((x15643*x15647)));
evalcond[3]=((((-1.0)*cj1*cj2*x15651))+((cj3*x15660))+((cj0*x15645)));
evalcond[4]=((((-1.0)*x15651*x15655))+(((-1.0)*x15650*x15651))+(((-1.0)*sj3*x15660)));
evalcond[5]=((((-1.0)*r20*x15649*x15658))+x15655+x15650+((r21*x15646))+((r21*x15644*x15653))+((r20*x15648)));
evalcond[6]=(((r20*x15644*x15646))+x15645+(((-1.0)*r21*x15648*x15659))+(((-1.0)*x15657))+((r21*x15654))+((r20*x15653)));
evalcond[7]=((((-1.0)*cj1*cj2*x15652))+(((-1.0)*r10*x15649*x15658))+((r11*x15646))+((sj0*x15645))+((x15647*x15658))+((r10*x15648)));
evalcond[8]=(((r10*x15653))+(((-1.0)*sj3*x15647*x15659))+((r11*x15654))+(((-1.0)*x15650*x15652))+(((-1.0)*x15652*x15655))+((r10*x15644*x15646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15661=((-1.0)*r10);
CheckValue<IkReal> x15662 = IKatan2WithCheck(IkReal(x15661),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15662.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15662.value))));
IkReal gconst70=x15661;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15663 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15663.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15663.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15664=((-1.0)*r10);
IkReal x15665=((-1.0)*r11);
CheckValue<IkReal> x15667 = IKatan2WithCheck(IkReal(x15664),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15667.valid){
continue;
}
IkReal x15666=((1.0)*(x15667.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15664);
rxp1_1=(px*r21);
rxp1_2=(px*x15665);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15666)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15666)));
IkReal gconst70=x15664;
IkReal gconst71=x15665;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15668=((-1.0)*r10);
IkReal x15669=((-1.0)*r11);
CheckValue<IkReal> x15671 = IKatan2WithCheck(IkReal(x15668),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15671.valid){
continue;
}
IkReal x15670=((1.0)*(x15671.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15668);
rxp1_1=(px*r21);
rxp1_2=(px*x15669);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15670)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15670)));
IkReal gconst70=x15668;
IkReal gconst71=x15669;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15672=((-1.0)*r10);
IkReal x15673=((-1.0)*r11);
CheckValue<IkReal> x15675 = IKatan2WithCheck(IkReal(x15672),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15675.valid){
continue;
}
IkReal x15674=((1.0)*(x15675.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15672);
rxp1_1=(px*r21);
rxp1_2=(px*x15673);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15674)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15674)));
IkReal gconst70=x15672;
IkReal gconst71=x15673;
IkReal x15676=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15676))+((r10*r21*x15676)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15677=((1.0)*r21);
IkReal x15678=(cj1*cj2);
IkReal x15679=((1.0)*sj1*sj2);
CheckValue<IkReal> x15680=IKPowWithIntegerCheck(cj3,-1);
if(!x15680.valid){
continue;
}
CheckValue<IkReal> x15681=IKPowWithIntegerCheck(r02,-1);
if(!x15681.valid){
continue;
}
CheckValue<IkReal> x15682=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15677))+((gconst71*r20*sj3))),-1);
if(!x15682.valid){
continue;
}
if( IKabs(((x15680.value)*(x15681.value)*(((((-1.0)*cj0*x15679))+((cj0*x15678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15682.value)*(((((-1.0)*x15679))+(((-1.0)*cj3*gconst71*x15677))+x15678+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15680.value)*(x15681.value)*(((((-1.0)*cj0*x15679))+((cj0*x15678))))))+IKsqr(((x15682.value)*(((((-1.0)*x15679))+(((-1.0)*cj3*gconst71*x15677))+x15678+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15680.value)*(x15681.value)*(((((-1.0)*cj0*x15679))+((cj0*x15678))))), ((x15682.value)*(((((-1.0)*x15679))+(((-1.0)*cj3*gconst71*x15677))+x15678+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15683=IKsin(j4);
IkReal x15684=IKcos(j4);
IkReal x15685=(cj3*gconst70);
IkReal x15686=(sj1*sj2);
IkReal x15687=((1.0)*gconst71);
IkReal x15688=(gconst71*sj3);
IkReal x15689=(cj2*sj1);
IkReal x15690=((1.0)*sj0);
IkReal x15691=(gconst70*r11);
IkReal x15692=(gconst70*sj3);
IkReal x15693=((1.0)*cj0);
IkReal x15694=(cj3*gconst71);
IkReal x15695=(cj1*sj2);
IkReal x15696=((1.0)*cj1*cj2);
IkReal x15697=(r21*x15684);
IkReal x15698=(r10*x15684);
IkReal x15699=((1.0)*x15684);
IkReal x15700=(r02*x15683);
IkReal x15701=(r20*x15684);
evalcond[0]=((((-1.0)*x15690))+(((-1.0)*r02*x15699)));
evalcond[1]=((((-1.0)*r20*x15683*x15687))+((gconst70*r21*x15683)));
evalcond[2]=((((-1.0)*r10*x15683*x15687))+((x15683*x15691))+cj0);
evalcond[3]=(((cj3*x15700))+((cj0*x15686))+(((-1.0)*cj1*cj2*x15693)));
evalcond[4]=((((-1.0)*x15693*x15695))+(((-1.0)*x15689*x15693))+(((-1.0)*sj3*x15700)));
evalcond[5]=(((r20*x15692))+((x15685*x15697))+x15689+x15695+(((-1.0)*cj3*x15687*x15701))+((r21*x15688)));
evalcond[6]=(((r20*x15685))+(((-1.0)*x15696))+(((-1.0)*x15692*x15697))+((x15688*x15701))+((r21*x15694))+x15686);
evalcond[7]=(((r10*x15692))+(((-1.0)*cj3*x15687*x15698))+((r11*x15684*x15685))+((r11*x15688))+(((-1.0)*cj1*cj2*x15690))+((sj0*x15686)));
evalcond[8]=((((-1.0)*sj3*x15691*x15699))+((r10*x15685))+(((-1.0)*x15690*x15695))+((x15688*x15698))+((r11*x15694))+(((-1.0)*x15689*x15690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15704=IKPowWithIntegerCheck(r02,-1);
if(!x15704.valid){
continue;
}
IkReal x15702=x15704.value;
IkReal x15703=((1.0)*cj0);
CheckValue<IkReal> x15705=IKPowWithIntegerCheck(sj3,-1);
if(!x15705.valid){
continue;
}
if( IKabs((x15702*(x15705.value)*(((((-1.0)*cj2*sj1*x15703))+(((-1.0)*cj1*sj2*x15703)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15702)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15702*(x15705.value)*(((((-1.0)*cj2*sj1*x15703))+(((-1.0)*cj1*sj2*x15703))))))+IKsqr(((-1.0)*sj0*x15702))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15702*(x15705.value)*(((((-1.0)*cj2*sj1*x15703))+(((-1.0)*cj1*sj2*x15703))))), ((-1.0)*sj0*x15702));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15706=IKsin(j4);
IkReal x15707=IKcos(j4);
IkReal x15708=(cj3*gconst70);
IkReal x15709=(sj1*sj2);
IkReal x15710=((1.0)*gconst71);
IkReal x15711=(gconst71*sj3);
IkReal x15712=(cj2*sj1);
IkReal x15713=((1.0)*sj0);
IkReal x15714=(gconst70*r11);
IkReal x15715=(gconst70*sj3);
IkReal x15716=((1.0)*cj0);
IkReal x15717=(cj3*gconst71);
IkReal x15718=(cj1*sj2);
IkReal x15719=((1.0)*cj1*cj2);
IkReal x15720=(r21*x15707);
IkReal x15721=(r10*x15707);
IkReal x15722=((1.0)*x15707);
IkReal x15723=(r02*x15706);
IkReal x15724=(r20*x15707);
evalcond[0]=((((-1.0)*x15713))+(((-1.0)*r02*x15722)));
evalcond[1]=((((-1.0)*r20*x15706*x15710))+((gconst70*r21*x15706)));
evalcond[2]=(cj0+(((-1.0)*r10*x15706*x15710))+((x15706*x15714)));
evalcond[3]=(((cj0*x15709))+(((-1.0)*cj1*cj2*x15716))+((cj3*x15723)));
evalcond[4]=((((-1.0)*x15712*x15716))+(((-1.0)*sj3*x15723))+(((-1.0)*x15716*x15718)));
evalcond[5]=(((r20*x15715))+((x15708*x15720))+((r21*x15711))+x15718+x15712+(((-1.0)*cj3*x15710*x15724)));
evalcond[6]=((((-1.0)*x15719))+((r20*x15708))+(((-1.0)*x15715*x15720))+((r21*x15717))+x15709+((x15711*x15724)));
evalcond[7]=(((sj0*x15709))+(((-1.0)*cj1*cj2*x15713))+(((-1.0)*cj3*x15710*x15721))+((r11*x15707*x15708))+((r11*x15711))+((r10*x15715)));
evalcond[8]=((((-1.0)*x15712*x15713))+(((-1.0)*sj3*x15714*x15722))+(((-1.0)*x15713*x15718))+((x15711*x15721))+((r10*x15708))+((r11*x15717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15726=IKPowWithIntegerCheck(r02,-1);
if(!x15726.valid){
continue;
}
IkReal x15725=x15726.value;
CheckValue<IkReal> x15727=IKPowWithIntegerCheck(cj3,-1);
if(!x15727.valid){
continue;
}
if( IKabs((x15725*(x15727.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15725)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15725*(x15727.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15725))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15725*(x15727.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15725));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15728=IKsin(j4);
IkReal x15729=IKcos(j4);
IkReal x15730=(cj3*gconst70);
IkReal x15731=(sj1*sj2);
IkReal x15732=((1.0)*gconst71);
IkReal x15733=(gconst71*sj3);
IkReal x15734=(cj2*sj1);
IkReal x15735=((1.0)*sj0);
IkReal x15736=(gconst70*r11);
IkReal x15737=(gconst70*sj3);
IkReal x15738=((1.0)*cj0);
IkReal x15739=(cj3*gconst71);
IkReal x15740=(cj1*sj2);
IkReal x15741=((1.0)*cj1*cj2);
IkReal x15742=(r21*x15729);
IkReal x15743=(r10*x15729);
IkReal x15744=((1.0)*x15729);
IkReal x15745=(r02*x15728);
IkReal x15746=(r20*x15729);
evalcond[0]=((((-1.0)*x15735))+(((-1.0)*r02*x15744)));
evalcond[1]=((((-1.0)*r20*x15728*x15732))+((gconst70*r21*x15728)));
evalcond[2]=(cj0+(((-1.0)*r10*x15728*x15732))+((x15728*x15736)));
evalcond[3]=(((cj3*x15745))+(((-1.0)*cj1*cj2*x15738))+((cj0*x15731)));
evalcond[4]=((((-1.0)*x15738*x15740))+(((-1.0)*sj3*x15745))+(((-1.0)*x15734*x15738)));
evalcond[5]=(((r20*x15737))+(((-1.0)*cj3*x15732*x15746))+((r21*x15733))+x15740+x15734+((x15730*x15742)));
evalcond[6]=(((r20*x15730))+(((-1.0)*x15741))+((r21*x15739))+(((-1.0)*x15737*x15742))+x15731+((x15733*x15746)));
evalcond[7]=(((r11*x15733))+(((-1.0)*cj3*x15732*x15743))+(((-1.0)*cj1*cj2*x15735))+((sj0*x15731))+((r10*x15737))+((r11*x15729*x15730)));
evalcond[8]=((((-1.0)*sj3*x15736*x15744))+(((-1.0)*x15735*x15740))+((r11*x15739))+((r10*x15730))+((x15733*x15743))+(((-1.0)*x15734*x15735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15748=IKPowWithIntegerCheck(r02,-1);
if(!x15748.valid){
continue;
}
IkReal x15747=x15748.value;
CheckValue<IkReal> x15749=IKPowWithIntegerCheck(cj3,-1);
if(!x15749.valid){
continue;
}
if( IKabs((x15747*(x15749.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15747)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15747*(x15749.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15747))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15747*(x15749.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15747));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15750=IKsin(j4);
IkReal x15751=IKcos(j4);
IkReal x15752=(cj5*r10);
IkReal x15753=(sj1*sj2);
IkReal x15754=(cj5*sj3);
IkReal x15755=(r11*sj5);
IkReal x15756=(cj3*cj5);
IkReal x15757=(cj3*sj5);
IkReal x15758=(r21*sj5);
IkReal x15759=(cj2*sj1);
IkReal x15760=((1.0)*sj0);
IkReal x15761=((1.0)*cj0);
IkReal x15762=(sj3*sj5);
IkReal x15763=(cj1*sj2);
IkReal x15764=((1.0)*cj1*cj2);
IkReal x15765=((1.0)*x15750);
IkReal x15766=(r20*x15751);
IkReal x15767=(cj3*x15751);
IkReal x15768=(sj3*x15751);
evalcond[0]=((((-1.0)*r02*x15751))+(((-1.0)*x15760)));
evalcond[1]=(((x15750*x15758))+(((-1.0)*cj5*r20*x15765)));
evalcond[2]=(((x15750*x15755))+cj0+(((-1.0)*x15752*x15765)));
evalcond[3]=(((cj3*r02*x15750))+(((-1.0)*cj1*cj2*x15761))+((cj0*x15753)));
evalcond[4]=((((-1.0)*x15759*x15761))+(((-1.0)*r02*sj3*x15765))+(((-1.0)*x15761*x15763)));
evalcond[5]=(((r21*x15751*x15757))+((r21*x15754))+((r20*x15762))+(((-1.0)*x15756*x15766))+x15763+x15759);
evalcond[6]=(((x15754*x15766))+((r21*x15756))+(((-1.0)*x15764))+(((-1.0)*x15758*x15768))+((r20*x15757))+x15753);
evalcond[7]=(((r10*x15762))+((sj0*x15753))+(((-1.0)*cj1*cj2*x15760))+(((-1.0)*x15752*x15767))+((r11*x15754))+((x15755*x15767)));
evalcond[8]=((((-1.0)*x15760*x15763))+(((-1.0)*x15759*x15760))+((r10*x15757))+((x15752*x15768))+((r11*x15756))+(((-1.0)*x15755*x15768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15769=((1.0)*sj3);
IkReal x15770=((1.0)*cj5);
CheckValue<IkReal> x15771=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15770))),-1);
if(!x15771.valid){
continue;
}
CheckValue<IkReal> x15772=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15770))),-1);
if(!x15772.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15771.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15769))+(((-1.0)*cj5*r21*x15769)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15771.value)))+IKsqr(((x15772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15769))+(((-1.0)*cj5*r21*x15769))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15771.value)), ((x15772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15769))+(((-1.0)*cj5*r21*x15769))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15773=IKsin(j4);
IkReal x15774=IKcos(j4);
IkReal x15775=(cj5*r10);
IkReal x15776=(sj1*sj2);
IkReal x15777=(cj5*sj3);
IkReal x15778=(r11*sj5);
IkReal x15779=(cj3*cj5);
IkReal x15780=(cj3*sj5);
IkReal x15781=(r21*sj5);
IkReal x15782=(cj2*sj1);
IkReal x15783=((1.0)*sj0);
IkReal x15784=((1.0)*cj0);
IkReal x15785=(sj3*sj5);
IkReal x15786=(cj1*sj2);
IkReal x15787=((1.0)*cj1*cj2);
IkReal x15788=((1.0)*x15773);
IkReal x15789=(r20*x15774);
IkReal x15790=(cj3*x15774);
IkReal x15791=(sj3*x15774);
evalcond[0]=((((-1.0)*r02*x15774))+(((-1.0)*x15783)));
evalcond[1]=((((-1.0)*cj5*r20*x15788))+((x15773*x15781)));
evalcond[2]=(cj0+(((-1.0)*x15775*x15788))+((x15773*x15778)));
evalcond[3]=((((-1.0)*cj1*cj2*x15784))+((cj0*x15776))+((cj3*r02*x15773)));
evalcond[4]=((((-1.0)*x15782*x15784))+(((-1.0)*r02*sj3*x15788))+(((-1.0)*x15784*x15786)));
evalcond[5]=(((r21*x15777))+((r21*x15774*x15780))+x15782+x15786+(((-1.0)*x15779*x15789))+((r20*x15785)));
evalcond[6]=(((x15777*x15789))+((r21*x15779))+x15776+(((-1.0)*x15781*x15791))+(((-1.0)*x15787))+((r20*x15780)));
evalcond[7]=((((-1.0)*cj1*cj2*x15783))+((r10*x15785))+((x15778*x15790))+((sj0*x15776))+(((-1.0)*x15775*x15790))+((r11*x15777)));
evalcond[8]=(((r10*x15780))+(((-1.0)*x15778*x15791))+(((-1.0)*x15782*x15783))+(((-1.0)*x15783*x15786))+((r11*x15779))+((x15775*x15791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15792=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15792.valid){
continue;
}
CheckValue<IkReal> x15793=IKPowWithIntegerCheck(r02,-1);
if(!x15793.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15792.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15793.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15792.value)))+IKsqr(((-1.0)*sj0*(x15793.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15792.value)), ((-1.0)*sj0*(x15793.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15794=IKsin(j4);
IkReal x15795=IKcos(j4);
IkReal x15796=(cj5*r10);
IkReal x15797=(sj1*sj2);
IkReal x15798=(cj5*sj3);
IkReal x15799=(r11*sj5);
IkReal x15800=(cj3*cj5);
IkReal x15801=(cj3*sj5);
IkReal x15802=(r21*sj5);
IkReal x15803=(cj2*sj1);
IkReal x15804=((1.0)*sj0);
IkReal x15805=((1.0)*cj0);
IkReal x15806=(sj3*sj5);
IkReal x15807=(cj1*sj2);
IkReal x15808=((1.0)*cj1*cj2);
IkReal x15809=((1.0)*x15794);
IkReal x15810=(r20*x15795);
IkReal x15811=(cj3*x15795);
IkReal x15812=(sj3*x15795);
evalcond[0]=((((-1.0)*r02*x15795))+(((-1.0)*x15804)));
evalcond[1]=((((-1.0)*cj5*r20*x15809))+((x15794*x15802)));
evalcond[2]=(cj0+((x15794*x15799))+(((-1.0)*x15796*x15809)));
evalcond[3]=(((cj0*x15797))+((cj3*r02*x15794))+(((-1.0)*cj1*cj2*x15805)));
evalcond[4]=((((-1.0)*x15805*x15807))+(((-1.0)*r02*sj3*x15809))+(((-1.0)*x15803*x15805)));
evalcond[5]=(((r21*x15795*x15801))+((r21*x15798))+(((-1.0)*x15800*x15810))+x15807+x15803+((r20*x15806)));
evalcond[6]=((((-1.0)*x15808))+((x15798*x15810))+(((-1.0)*x15802*x15812))+((r21*x15800))+x15797+((r20*x15801)));
evalcond[7]=(((r10*x15806))+(((-1.0)*x15796*x15811))+((r11*x15798))+((x15799*x15811))+((sj0*x15797))+(((-1.0)*cj1*cj2*x15804)));
evalcond[8]=((((-1.0)*x15799*x15812))+(((-1.0)*x15804*x15807))+((r10*x15801))+((x15796*x15812))+((r11*x15800))+(((-1.0)*x15803*x15804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15813=((1.0)*sj0);
IkReal x15814=((1.0)*cj0);
CheckValue<IkReal> x15815 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15814))+(((-1.0)*r12*x15813)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15814))+(((-1.0)*r11*sj5*x15813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15815.valid){
continue;
}
CheckValue<IkReal> x15816=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15815.value)+(((1.5707963267949)*(x15816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15817=IKsin(j4);
IkReal x15818=IKcos(j4);
IkReal x15819=(r11*sj5);
IkReal x15820=(cj5*r10);
IkReal x15821=(sj1*sj2);
IkReal x15822=(cj5*sj3);
IkReal x15823=((1.0)*sj0);
IkReal x15824=(cj3*cj5);
IkReal x15825=(cj3*sj5);
IkReal x15826=(r21*sj5);
IkReal x15827=(cj2*sj1);
IkReal x15828=(sj3*sj5);
IkReal x15829=(r01*sj5);
IkReal x15830=((1.0)*cj0);
IkReal x15831=(cj1*sj2);
IkReal x15832=((1.0)*x15818);
IkReal x15833=((1.0)*x15817);
IkReal x15834=(cj3*x15818);
IkReal x15835=((1.0)*cj1*cj2);
IkReal x15836=(cj3*x15817);
evalcond[0]=(((x15817*x15826))+(((-1.0)*r22*x15832))+(((-1.0)*cj5*r20*x15833)));
evalcond[1]=(cj0+((x15817*x15819))+(((-1.0)*x15820*x15833))+(((-1.0)*r12*x15832)));
evalcond[2]=((((-1.0)*r02*x15832))+((x15817*x15829))+(((-1.0)*x15823))+(((-1.0)*cj5*r00*x15833)));
evalcond[3]=(((r20*x15828))+((r22*x15836))+((r21*x15818*x15825))+((r21*x15822))+(((-1.0)*r20*x15824*x15832))+x15831+x15827);
evalcond[4]=(((r20*x15818*x15822))+((r20*x15825))+(((-1.0)*r22*sj3*x15833))+((r21*x15824))+(((-1.0)*x15835))+x15821+(((-1.0)*sj3*x15826*x15832)));
evalcond[5]=(((r02*x15836))+(((-1.0)*r00*x15824*x15832))+((r01*x15822))+((r00*x15828))+(((-1.0)*cj1*cj2*x15830))+((cj0*x15821))+((r01*x15818*x15825)));
evalcond[6]=(((x15819*x15834))+(((-1.0)*cj3*x15820*x15832))+((r12*x15836))+(((-1.0)*cj1*cj2*x15823))+((r10*x15828))+((r11*x15822))+((sj0*x15821)));
evalcond[7]=((((-1.0)*r02*sj3*x15833))+(((-1.0)*x15830*x15831))+((r01*x15824))+(((-1.0)*x15827*x15830))+((r00*x15825))+((r00*x15818*x15822))+(((-1.0)*r01*x15828*x15832)));
evalcond[8]=((((-1.0)*x15823*x15827))+((sj3*x15818*x15820))+(((-1.0)*x15823*x15831))+(((-1.0)*sj3*x15819*x15832))+((r10*x15825))+(((-1.0)*r12*sj3*x15833))+((r11*x15824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15837=((1.0)*cj5);
CheckValue<IkReal> x15838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15837)))),-1);
if(!x15838.valid){
continue;
}
CheckValue<IkReal> x15839 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15838.value)))+(x15839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15840=IKsin(j4);
IkReal x15841=IKcos(j4);
IkReal x15842=(r11*sj5);
IkReal x15843=(cj5*r10);
IkReal x15844=(sj1*sj2);
IkReal x15845=(cj5*sj3);
IkReal x15846=((1.0)*sj0);
IkReal x15847=(cj3*cj5);
IkReal x15848=(cj3*sj5);
IkReal x15849=(r21*sj5);
IkReal x15850=(cj2*sj1);
IkReal x15851=(sj3*sj5);
IkReal x15852=(r01*sj5);
IkReal x15853=((1.0)*cj0);
IkReal x15854=(cj1*sj2);
IkReal x15855=((1.0)*x15841);
IkReal x15856=((1.0)*x15840);
IkReal x15857=(cj3*x15841);
IkReal x15858=((1.0)*cj1*cj2);
IkReal x15859=(cj3*x15840);
evalcond[0]=((((-1.0)*cj5*r20*x15856))+(((-1.0)*r22*x15855))+((x15840*x15849)));
evalcond[1]=(cj0+(((-1.0)*r12*x15855))+(((-1.0)*x15843*x15856))+((x15840*x15842)));
evalcond[2]=(((x15840*x15852))+(((-1.0)*r02*x15855))+(((-1.0)*x15846))+(((-1.0)*cj5*r00*x15856)));
evalcond[3]=((((-1.0)*r20*x15847*x15855))+((r20*x15851))+((r21*x15845))+((r22*x15859))+((r21*x15841*x15848))+x15854+x15850);
evalcond[4]=(((r20*x15841*x15845))+(((-1.0)*sj3*x15849*x15855))+((r20*x15848))+((r21*x15847))+(((-1.0)*x15858))+(((-1.0)*r22*sj3*x15856))+x15844);
evalcond[5]=(((r01*x15845))+(((-1.0)*r00*x15847*x15855))+((r00*x15851))+((r02*x15859))+((r01*x15841*x15848))+(((-1.0)*cj1*cj2*x15853))+((cj0*x15844)));
evalcond[6]=(((r11*x15845))+((r12*x15859))+(((-1.0)*cj1*cj2*x15846))+((r10*x15851))+((sj0*x15844))+((x15842*x15857))+(((-1.0)*cj3*x15843*x15855)));
evalcond[7]=(((r01*x15847))+((r00*x15841*x15845))+((r00*x15848))+(((-1.0)*r01*x15851*x15855))+(((-1.0)*r02*sj3*x15856))+(((-1.0)*x15850*x15853))+(((-1.0)*x15853*x15854)));
evalcond[8]=(((r11*x15847))+((sj3*x15841*x15843))+(((-1.0)*sj3*x15842*x15855))+(((-1.0)*x15846*x15850))+(((-1.0)*x15846*x15854))+((r10*x15848))+(((-1.0)*r12*sj3*x15856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15860=((1.0)*cj5);
CheckValue<IkReal> x15861 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15861.valid){
continue;
}
CheckValue<IkReal> x15862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15860)))),-1);
if(!x15862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15861.value)+(((1.5707963267949)*(x15862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15863=IKsin(j4);
IkReal x15864=IKcos(j4);
IkReal x15865=(r11*sj5);
IkReal x15866=(cj5*r10);
IkReal x15867=(sj1*sj2);
IkReal x15868=(cj5*sj3);
IkReal x15869=((1.0)*sj0);
IkReal x15870=(cj3*cj5);
IkReal x15871=(cj3*sj5);
IkReal x15872=(r21*sj5);
IkReal x15873=(cj2*sj1);
IkReal x15874=(sj3*sj5);
IkReal x15875=(r01*sj5);
IkReal x15876=((1.0)*cj0);
IkReal x15877=(cj1*sj2);
IkReal x15878=((1.0)*x15864);
IkReal x15879=((1.0)*x15863);
IkReal x15880=(cj3*x15864);
IkReal x15881=((1.0)*cj1*cj2);
IkReal x15882=(cj3*x15863);
evalcond[0]=((((-1.0)*cj5*r20*x15879))+((x15863*x15872))+(((-1.0)*r22*x15878)));
evalcond[1]=(cj0+(((-1.0)*r12*x15878))+((x15863*x15865))+(((-1.0)*x15866*x15879)));
evalcond[2]=((((-1.0)*x15869))+((x15863*x15875))+(((-1.0)*cj5*r00*x15879))+(((-1.0)*r02*x15878)));
evalcond[3]=(((r21*x15868))+(((-1.0)*r20*x15870*x15878))+((r21*x15864*x15871))+((r20*x15874))+((r22*x15882))+x15877+x15873);
evalcond[4]=(((r20*x15871))+((r21*x15870))+(((-1.0)*r22*sj3*x15879))+(((-1.0)*x15881))+(((-1.0)*sj3*x15872*x15878))+((r20*x15864*x15868))+x15867);
evalcond[5]=(((r01*x15864*x15871))+((r00*x15874))+((cj0*x15867))+(((-1.0)*cj1*cj2*x15876))+(((-1.0)*r00*x15870*x15878))+((r01*x15868))+((r02*x15882)));
evalcond[6]=(((x15865*x15880))+((r11*x15868))+((sj0*x15867))+((r10*x15874))+((r12*x15882))+(((-1.0)*cj3*x15866*x15878))+(((-1.0)*cj1*cj2*x15869)));
evalcond[7]=((((-1.0)*r01*x15874*x15878))+((r01*x15870))+((r00*x15871))+(((-1.0)*r02*sj3*x15879))+(((-1.0)*x15873*x15876))+(((-1.0)*x15876*x15877))+((r00*x15864*x15868)));
evalcond[8]=(((r11*x15870))+(((-1.0)*x15869*x15873))+(((-1.0)*x15869*x15877))+((r10*x15871))+(((-1.0)*r12*sj3*x15879))+(((-1.0)*sj3*x15865*x15878))+((sj3*x15864*x15866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15883=cj5*cj5;
IkReal x15884=r21*r21;
IkReal x15885=r20*r20;
IkReal x15886=(r20*r21);
IkReal x15887=((1.0)*cj3);
IkReal x15888=((1.0)*cj5);
IkReal x15889=(cj1*sj2);
IkReal x15890=(cj5*sj5);
IkReal x15891=(sj3*sj5);
IkReal x15892=(cj2*sj1);
IkReal x15893=(r21*sj5);
CheckValue<IkReal> x15894=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x15886*x15890))+(((-1.0)*x15884*x15887))+(((-1.0)*x15887*(r22*r22)))+((cj3*x15883*x15884))+(((-1.0)*x15883*x15885*x15887)))),-1);
if(!x15894.valid){
continue;
}
CheckValue<IkReal> x15895 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r20*r22*x15891))+((r22*x15889))+((r22*x15892)))),IkReal(((((-1.0)*r20*x15888*x15892))+(((-1.0)*r20*x15888*x15889))+(((-1.0)*x15885*x15888*x15891))+((x15889*x15893))+((sj3*x15886))+((sj3*x15884*x15890))+(((-2.0)*sj3*x15883*x15886))+((x15892*x15893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15894.value)))+(x15895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15896=IKsin(j4);
IkReal x15897=IKcos(j4);
IkReal x15898=(cj3*r21);
IkReal x15899=(r21*sj5);
IkReal x15900=(r20*sj5);
IkReal x15901=(cj5*r20);
IkReal x15902=((1.0)*x15897);
IkReal x15903=((1.0)*x15896);
evalcond[0]=((((-1.0)*x15901*x15903))+(((-1.0)*r22*x15902))+((x15896*x15899)));
evalcond[1]=(((cj3*r22*x15896))+((cj2*sj1))+((sj3*x15900))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15897*x15898))+(((-1.0)*cj3*x15901*x15902)));
evalcond[2]=((((-1.0)*r22*sj3*x15903))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15897*x15901))+((cj3*x15900))+(((-1.0)*sj3*x15899*x15902))+((cj5*x15898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15904=(cj5*sj4);
IkReal x15905=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15905))+(((-1.0)*r00*x15904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15904))+((cj4*r12))+(((-1.0)*r11*x15905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15905))+(((-1.0)*r00*x15904))))+IKsqr((((r10*x15904))+((cj4*r12))+(((-1.0)*r11*x15905))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15905))+(((-1.0)*r00*x15904))), (((r10*x15904))+((cj4*r12))+(((-1.0)*r11*x15905))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15906=IKcos(j0);
IkReal x15907=IKsin(j0);
IkReal x15908=(r02*sj4);
IkReal x15909=(sj4*sj5);
IkReal x15910=((1.0)*sj3);
IkReal x15911=(r12*sj4);
IkReal x15912=((0.571)*sj1);
IkReal x15913=(cj4*cj5);
IkReal x15914=(r00*sj3);
IkReal x15915=((1.0)*cj1);
IkReal x15916=(cj3*r10);
IkReal x15917=(cj4*sj5);
IkReal x15918=(cj5*r01);
IkReal x15919=((0.571)*cj2);
IkReal x15920=(r10*sj3);
IkReal x15921=(cj5*r11);
IkReal x15922=((1.0)*sj1);
IkReal x15923=(r00*sj5);
IkReal x15924=((1.0)*r00);
IkReal x15925=(cj5*sj4);
IkReal x15926=((1.0)*cj4);
IkReal x15927=(sj2*x15906);
IkReal x15928=(cj1*x15907);
IkReal x15929=(sj2*x15907);
IkReal x15930=(cj2*x15906);
IkReal x15931=(cj1*x15906);
IkReal x15932=(cj2*x15907);
evalcond[0]=(((r11*x15909))+(((-1.0)*r12*x15926))+(((-1.0)*r10*x15925))+x15906);
evalcond[1]=((((-1.0)*x15924*x15925))+((r01*x15909))+(((-1.0)*x15907))+(((-1.0)*r02*x15926)));
evalcond[2]=((((-1.0)*x15912*x15927))+(((0.613)*x15931))+(((-0.174)*x15907))+(((-0.12)*x15918))+(((-1.0)*px))+(((-0.12)*x15923))+((x15919*x15931)));
evalcond[3]=((((-1.0)*x15912*x15929))+(((-0.12)*r10*sj5))+(((-1.0)*py))+(((-0.12)*x15921))+(((0.613)*x15928))+(((0.174)*x15906))+((x15919*x15928)));
evalcond[4]=(((sj5*x15914))+((sj3*x15918))+((cj3*r01*x15917))+((sj1*x15927))+(((-1.0)*cj3*x15913*x15924))+(((-1.0)*x15915*x15930))+((cj3*x15908)));
evalcond[5]=(((sj5*x15920))+((sj3*x15921))+((sj1*x15929))+(((-1.0)*x15913*x15916))+((cj3*x15911))+((cj3*r11*x15917))+(((-1.0)*x15915*x15932)));
evalcond[6]=((((-1.0)*x15915*x15927))+(((-1.0)*r01*x15910*x15917))+((cj3*x15923))+(((-1.0)*x15922*x15930))+((x15913*x15914))+(((-1.0)*x15908*x15910))+((cj3*x15918)));
evalcond[7]=(((sj5*x15916))+((x15913*x15920))+(((-1.0)*x15915*x15929))+((cj3*x15921))+(((-1.0)*x15922*x15932))+(((-1.0)*x15910*x15911))+(((-1.0)*r11*x15910*x15917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15933=cj5*cj5;
IkReal x15934=r21*r21;
IkReal x15935=r20*r20;
IkReal x15936=(r20*r21);
IkReal x15937=(sj1*sj2);
IkReal x15938=(r21*sj5);
IkReal x15939=(cj1*cj2);
IkReal x15940=(cj5*r20);
IkReal x15941=(cj5*sj5);
IkReal x15942=(cj3*r22);
IkReal x15943=(sj3*x15934);
CheckValue<IkReal> x15944=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x15933*x15935))+(((-2.0)*sj3*x15936*x15941))+(((-1.0)*x15933*x15943))+x15943)),-1);
if(!x15944.valid){
continue;
}
CheckValue<IkReal> x15945 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15939))+((r20*sj5*x15942))+((cj5*r21*x15942))+((r22*x15937)))),IkReal(((((-1.0)*x15937*x15940))+((x15939*x15940))+(((-1.0)*cj3*x15935*x15941))+(((-2.0)*cj3*x15933*x15936))+((cj3*x15936))+((cj3*x15934*x15941))+((x15937*x15938))+(((-1.0)*x15938*x15939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15944.value)))+(x15945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15946=IKsin(j4);
IkReal x15947=IKcos(j4);
IkReal x15948=(cj3*r21);
IkReal x15949=(r21*sj5);
IkReal x15950=(r20*sj5);
IkReal x15951=(cj5*r20);
IkReal x15952=((1.0)*x15947);
IkReal x15953=((1.0)*x15946);
evalcond[0]=((((-1.0)*r22*x15952))+(((-1.0)*x15951*x15953))+((x15946*x15949)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((sj5*x15947*x15948))+((cj1*sj2))+(((-1.0)*cj3*x15951*x15952))+((cj3*r22*x15946))+((sj3*x15950)));
evalcond[2]=((((-1.0)*r22*sj3*x15953))+((sj3*x15947*x15951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x15948))+(((-1.0)*sj3*x15949*x15952))+((cj3*x15950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15954=(cj5*sj4);
IkReal x15955=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15955))+(((-1.0)*r00*x15954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15955))+((r10*x15954))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15955))+(((-1.0)*r00*x15954))))+IKsqr(((((-1.0)*r11*x15955))+((r10*x15954))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15955))+(((-1.0)*r00*x15954))), ((((-1.0)*r11*x15955))+((r10*x15954))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15956=IKcos(j0);
IkReal x15957=IKsin(j0);
IkReal x15958=(r02*sj4);
IkReal x15959=(sj4*sj5);
IkReal x15960=((1.0)*sj3);
IkReal x15961=(r12*sj4);
IkReal x15962=((0.571)*sj1);
IkReal x15963=(cj4*cj5);
IkReal x15964=(r00*sj3);
IkReal x15965=((1.0)*cj1);
IkReal x15966=(cj3*r10);
IkReal x15967=(cj4*sj5);
IkReal x15968=(cj5*r01);
IkReal x15969=((0.571)*cj2);
IkReal x15970=(r10*sj3);
IkReal x15971=(cj5*r11);
IkReal x15972=((1.0)*sj1);
IkReal x15973=(r00*sj5);
IkReal x15974=((1.0)*r00);
IkReal x15975=(cj5*sj4);
IkReal x15976=((1.0)*cj4);
IkReal x15977=(sj2*x15956);
IkReal x15978=(cj1*x15957);
IkReal x15979=(sj2*x15957);
IkReal x15980=(cj2*x15956);
IkReal x15981=(cj1*x15956);
IkReal x15982=(cj2*x15957);
evalcond[0]=((((-1.0)*r10*x15975))+((r11*x15959))+(((-1.0)*r12*x15976))+x15956);
evalcond[1]=((((-1.0)*x15957))+((r01*x15959))+(((-1.0)*x15974*x15975))+(((-1.0)*r02*x15976)));
evalcond[2]=((((-1.0)*x15962*x15977))+(((-0.12)*x15968))+(((-0.12)*x15973))+((x15969*x15981))+(((-1.0)*px))+(((-0.174)*x15957))+(((0.613)*x15981)));
evalcond[3]=((((0.174)*x15956))+((x15969*x15978))+(((-1.0)*x15962*x15979))+(((-0.12)*r10*sj5))+(((-0.12)*x15971))+(((-1.0)*py))+(((0.613)*x15978)));
evalcond[4]=(((cj3*r01*x15967))+(((-1.0)*x15965*x15980))+((sj1*x15977))+(((-1.0)*cj3*x15963*x15974))+((sj3*x15968))+((sj5*x15964))+((cj3*x15958)));
evalcond[5]=((((-1.0)*x15965*x15982))+((sj1*x15979))+((cj3*r11*x15967))+((sj3*x15971))+((sj5*x15970))+(((-1.0)*x15963*x15966))+((cj3*x15961)));
evalcond[6]=((((-1.0)*x15958*x15960))+(((-1.0)*x15965*x15977))+(((-1.0)*x15972*x15980))+(((-1.0)*r01*x15960*x15967))+((x15963*x15964))+((cj3*x15973))+((cj3*x15968)));
evalcond[7]=((((-1.0)*x15965*x15979))+(((-1.0)*x15972*x15982))+(((-1.0)*r11*x15960*x15967))+(((-1.0)*x15960*x15961))+((sj5*x15966))+((x15963*x15970))+((cj3*x15971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur10e (915750c9a8fa1a0cf1acc58474c0101e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
